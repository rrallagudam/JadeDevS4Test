/* Any copyright is dedicated to the Public Domain.
 * http://creativecommons.org/publicdomain/zero/1.0/ */

(function(scope) {
  'use strict';

  // feature detect for URL constructor
  var hasWorkingUrl = false;
  if (!scope.forceJURL) {
    try {
      var u = new URL('b', 'http://a');
      u.pathname = 'c%20d';
      hasWorkingUrl = u.href === 'http://a/c%20d';
    } catch(e) {}
  }

  if (hasWorkingUrl)
    return;

  var relative = Object.create(null);
  relative['ftp'] = 21;
  relative['file'] = 0;
  relative['gopher'] = 70;
  relative['http'] = 80;
  relative['https'] = 443;
  relative['ws'] = 80;
  relative['wss'] = 443;

  var relativePathDotMapping = Object.create(null);
  relativePathDotMapping['%2e'] = '.';
  relativePathDotMapping['.%2e'] = '..';
  relativePathDotMapping['%2e.'] = '..';
  relativePathDotMapping['%2e%2e'] = '..';

  function isRelativeScheme(scheme) {
    return relative[scheme] !== undefined;
  }

  function invalid() {
    clear.call(this);
    this._isInvalid = true;
  }

  function IDNAToASCII(h) {
    if ('' == h) {
      invalid.call(this)
    }
    // XXX
    return h.toLowerCase()
  }

  function percentEscape(c) {
    var unicode = c.charCodeAt(0);
    if (unicode > 0x20 &&
       unicode < 0x7F &&
       // " # < > ? `
       [0x22, 0x23, 0x3C, 0x3E, 0x3F, 0x60].indexOf(unicode) == -1
      ) {
      return c;
    }
    return encodeURIComponent(c);
  }

  function percentEscapeQuery(c) {
    // XXX This actually needs to encode c using encoding and then
    // convert the bytes one-by-one.

    var unicode = c.charCodeAt(0);
    if (unicode > 0x20 &&
       unicode < 0x7F &&
       // " # < > ` (do not escape '?')
       [0x22, 0x23, 0x3C, 0x3E, 0x60].indexOf(unicode) == -1
      ) {
      return c;
    }
    return encodeURIComponent(c);
  }

  var EOF = undefined,
      ALPHA = /[a-zA-Z]/,
      ALPHANUMERIC = /[a-zA-Z0-9\+\-\.]/;

  function parse(input, stateOverride, base) {
    function err(message) {
      errors.push(message)
    }

    var state = stateOverride || 'scheme start',
        cursor = 0,
        buffer = '',
        seenAt = false,
        seenBracket = false,
        errors = [];

    loop: while ((input[cursor - 1] != EOF || cursor == 0) && !this._isInvalid) {
      var c = input[cursor];
      switch (state) {
        case 'scheme start':
          if (c && ALPHA.test(c)) {
            buffer += c.toLowerCase(); // ASCII-safe
            state = 'scheme';
          } else if (!stateOverride) {
            buffer = '';
            state = 'no scheme';
            continue;
          } else {
            err('Invalid scheme.');
            break loop;
          }
          break;

        case 'scheme':
          if (c && ALPHANUMERIC.test(c)) {
            buffer += c.toLowerCase(); // ASCII-safe
          } else if (':' == c) {
            this._scheme = buffer;
            buffer = '';
            if (stateOverride) {
              break loop;
            }
            if (isRelativeScheme(this._scheme)) {
              this._isRelative = true;
            }
            if ('file' == this._scheme) {
              state = 'relative';
            } else if (this._isRelative && base && base._scheme == this._scheme) {
              state = 'relative or authority';
            } else if (this._isRelative) {
              state = 'authority first slash';
            } else {
              state = 'scheme data';
            }
          } else if (!stateOverride) {
            buffer = '';
            cursor = 0;
            state = 'no scheme';
            continue;
          } else if (EOF == c) {
            break loop;
          } else {
            err('Code point not allowed in scheme: ' + c)
            break loop;
          }
          break;

        case 'scheme data':
          if ('?' == c) {
            query = '?';
            state = 'query';
          } else if ('#' == c) {
            this._fragment = '#';
            state = 'fragment';
          } else {
            // XXX error handling
            if (EOF != c && '\t' != c && '\n' != c && '\r' != c) {
              this._schemeData += percentEscape(c);
            }
          }
          break;

        case 'no scheme':
          if (!base || !(isRelativeScheme(base._scheme))) {
            err('Missing scheme.');
            invalid.call(this);
          } else {
            state = 'relative';
            continue;
          }
          break;

        case 'relative or authority':
          if ('/' == c && '/' == input[cursor+1]) {
            state = 'authority ignore slashes';
          } else {
            err('Expected /, got: ' + c);
            state = 'relative';
            continue
          }
          break;

        case 'relative':
          this._isRelative = true;
          if ('file' != this._scheme)
            this._scheme = base._scheme;
          if (EOF == c) {
            this._host = base._host;
            this._port = base._port;
            this._path = base._path.slice();
            this._query = base._query;
            break loop;
          } else if ('/' == c || '\\' == c) {
            if ('\\' == c)
              err('\\ is an invalid code point.');
            state = 'relative slash';
          } else if ('?' == c) {
            this._host = base._host;
            this._port = base._port;
            this._path = base._path.slice();
            this._query = '?';
            state = 'query';
          } else if ('#' == c) {
            this._host = base._host;
            this._port = base._port;
            this._path = base._path.slice();
            this._query = base._query;
            this._fragment = '#';
            state = 'fragment';
          } else {
            var nextC = input[cursor+1]
            var nextNextC = input[cursor+2]
            if (
              'file' != this._scheme || !ALPHA.test(c) ||
              (nextC != ':' && nextC != '|') ||
              (EOF != nextNextC && '/' != nextNextC && '\\' != nextNextC && '?' != nextNextC && '#' != nextNextC)) {
              this._host = base._host;
              this._port = base._port;
              this._path = base._path.slice();
              this._path.pop();
            }
            state = 'relative path';
            continue;
          }
          break;

        case 'relative slash':
          if ('/' == c || '\\' == c) {
            if ('\\' == c) {
              err('\\ is an invalid code point.');
            }
            if ('file' == this._scheme) {
              state = 'file host';
            } else {
              state = 'authority ignore slashes';
            }
          } else {
            if ('file' != this._scheme) {
              this._host = base._host;
              this._port = base._port;
            }
            state = 'relative path';
            continue;
          }
          break;

        case 'authority first slash':
          if ('/' == c) {
            state = 'authority second slash';
          } else {
            err("Expected '/', got: " + c);
            state = 'authority ignore slashes';
            continue;
          }
          break;

        case 'authority second slash':
          state = 'authority ignore slashes';
          if ('/' != c) {
            err("Expected '/', got: " + c);
            continue;
          }
          break;

        case 'authority ignore slashes':
          if ('/' != c && '\\' != c) {
            state = 'authority';
            continue;
          } else {
            err('Expected authority, got: ' + c);
          }
          break;

        case 'authority':
          if ('@' == c) {
            if (seenAt) {
              err('@ already seen.');
              buffer += '%40';
            }
            seenAt = true;
            for (var i = 0; i < buffer.length; i++) {
              var cp = buffer[i];
              if ('\t' == cp || '\n' == cp || '\r' == cp) {
                err('Invalid whitespace in authority.');
                continue;
              }
              // XXX check URL code points
              if (':' == cp && null === this._password) {
                this._password = '';
                continue;
              }
              var tempC = percentEscape(cp);
              (null !== this._password) ? this._password += tempC : this._username += tempC;
            }
            buffer = '';
          } else if (EOF == c || '/' == c || '\\' == c || '?' == c || '#' == c) {
            cursor -= buffer.length;
            buffer = '';
            state = 'host';
            continue;
          } else {
            buffer += c;
          }
          break;

        case 'file host':
          if (EOF == c || '/' == c || '\\' == c || '?' == c || '#' == c) {
            if (buffer.length == 2 && ALPHA.test(buffer[0]) && (buffer[1] == ':' || buffer[1] == '|')) {
              state = 'relative path';
            } else if (buffer.length == 0) {
              state = 'relative path start';
            } else {
              this._host = IDNAToASCII.call(this, buffer);
              buffer = '';
              state = 'relative path start';
            }
            continue;
          } else if ('\t' == c || '\n' == c || '\r' == c) {
            err('Invalid whitespace in file host.');
          } else {
            buffer += c;
          }
          break;

        case 'host':
        case 'hostname':
          if (':' == c && !seenBracket) {
            // XXX host parsing
            this._host = IDNAToASCII.call(this, buffer);
            buffer = '';
            state = 'port';
            if ('hostname' == stateOverride) {
              break loop;
            }
          } else if (EOF == c || '/' == c || '\\' == c || '?' == c || '#' == c) {
            this._host = IDNAToASCII.call(this, buffer);
            buffer = '';
            state = 'relative path start';
            if (stateOverride) {
              break loop;
            }
            continue;
          } else if ('\t' != c && '\n' != c && '\r' != c) {
            if ('[' == c) {
              seenBracket = true;
            } else if (']' == c) {
              seenBracket = false;
            }
            buffer += c;
          } else {
            err('Invalid code point in host/hostname: ' + c);
          }
          break;

        case 'port':
          if (/[0-9]/.test(c)) {
            buffer += c;
          } else if (EOF == c || '/' == c || '\\' == c || '?' == c || '#' == c || stateOverride) {
            if ('' != buffer) {
              var temp = parseInt(buffer, 10);
              if (temp != relative[this._scheme]) {
                this._port = temp + '';
              }
              buffer = '';
            }
            if (stateOverride) {
              break loop;
            }
            state = 'relative path start';
            continue;
          } else if ('\t' == c || '\n' == c || '\r' == c) {
            err('Invalid code point in port: ' + c);
          } else {
            invalid.call(this);
          }
          break;

        case 'relative path start':
          if ('\\' == c)
            err("'\\' not allowed in path.");
          state = 'relative path';
          if ('/' != c && '\\' != c) {
            continue;
          }
          break;

        case 'relative path':
          if (EOF == c || '/' == c || '\\' == c || (!stateOverride && ('?' == c || '#' == c))) {
            if ('\\' == c) {
              err('\\ not allowed in relative path.');
            }
            var tmp;
            if (tmp = relativePathDotMapping[buffer.toLowerCase()]) {
              buffer = tmp;
            }
            if ('..' == buffer) {
              this._path.pop();
              if ('/' != c && '\\' != c) {
                this._path.push('');
              }
            } else if ('.' == buffer && '/' != c && '\\' != c) {
              this._path.push('');
            } else if ('.' != buffer) {
              if ('file' == this._scheme && this._path.length == 0 && buffer.length == 2 && ALPHA.test(buffer[0]) && buffer[1] == '|') {
                buffer = buffer[0] + ':';
              }
              this._path.push(buffer);
            }
            buffer = '';
            if ('?' == c) {
              this._query = '?';
              state = 'query';
            } else if ('#' == c) {
              this._fragment = '#';
              state = 'fragment';
            }
          } else if ('\t' != c && '\n' != c && '\r' != c) {
            buffer += percentEscape(c);
          }
          break;

        case 'query':
          if (!stateOverride && '#' == c) {
            this._fragment = '#';
            state = 'fragment';
          } else if (EOF != c && '\t' != c && '\n' != c && '\r' != c) {
            this._query += percentEscapeQuery(c);
          }
          break;

        case 'fragment':
          if (EOF != c && '\t' != c && '\n' != c && '\r' != c) {
            this._fragment += c;
          }
          break;
      }

      cursor++;
    }
  }

  function clear() {
    this._scheme = '';
    this._schemeData = '';
    this._username = '';
    this._password = null;
    this._host = '';
    this._port = '';
    this._path = [];
    this._query = '';
    this._fragment = '';
    this._isInvalid = false;
    this._isRelative = false;
  }

  // Does not process domain names or IP addresses.
  // Does not handle encoding for the query parameter.
  function jURL(url, base /* , encoding */) {
    if (base !== undefined && !(base instanceof jURL))
      base = new jURL(String(base));

    this._url = url;
    clear.call(this);

    var input = url.replace(/^[ \t\r\n\f]+|[ \t\r\n\f]+$/g, '');
    // encoding = encoding || 'utf-8'

    parse.call(this, input, null, base);
  }

  jURL.prototype = {
    get href() {
      if (this._isInvalid)
        return this._url;

      var authority = '';
      if ('' != this._username || null != this._password) {
        authority = this._username +
            (null != this._password ? ':' + this._password : '') + '@';
      }

      return this.protocol +
          (this._isRelative ? '//' + authority + this.host : '') +
          this.pathname + this._query + this._fragment;
    },
    set href(href) {
      clear.call(this);
      parse.call(this, href);
    },

    get protocol() {
      return this._scheme + ':';
    },
    set protocol(protocol) {
      if (this._isInvalid)
        return;
      parse.call(this, protocol + ':', 'scheme start');
    },

    get host() {
      return this._isInvalid ? '' : this._port ?
          this._host + ':' + this._port : this._host;
    },
    set host(host) {
      if (this._isInvalid || !this._isRelative)
        return;
      parse.call(this, host, 'host');
    },

    get hostname() {
      return this._host;
    },
    set hostname(hostname) {
      if (this._isInvalid || !this._isRelative)
        return;
      parse.call(this, hostname, 'hostname');
    },

    get port() {
      return this._port;
    },
    set port(port) {
      if (this._isInvalid || !this._isRelative)
        return;
      parse.call(this, port, 'port');
    },

    get pathname() {
      return this._isInvalid ? '' : this._isRelative ?
          '/' + this._path.join('/') : this._schemeData;
    },
    set pathname(pathname) {
      if (this._isInvalid || !this._isRelative)
        return;
      this._path = [];
      parse.call(this, pathname, 'relative path start');
    },

    get search() {
      return this._isInvalid || !this._query || '?' == this._query ?
          '' : this._query;
    },
    set search(search) {
      if (this._isInvalid || !this._isRelative)
        return;
      this._query = '?';
      if ('?' == search[0])
        search = search.slice(1);
      parse.call(this, search, 'query');
    },

    get hash() {
      return this._isInvalid || !this._fragment || '#' == this._fragment ?
          '' : this._fragment;
    },
    set hash(hash) {
      if (this._isInvalid)
        return;
      this._fragment = '#';
      if ('#' == hash[0])
        hash = hash.slice(1);
      parse.call(this, hash, 'fragment');
    },

    get origin() {
      var host;
      if (this._isInvalid || !this._scheme) {
        return '';
      }
      // javascript: Gecko returns String(""), WebKit/Blink String("null")
      // Gecko throws error for "data://"
      // data: Gecko returns "", Blink returns "data://", WebKit returns "null"
      // Gecko returns String("") for file: mailto:
      // WebKit/Blink returns String("SCHEME://") for file: mailto:
      switch (this._scheme) {
        case 'data':
        case 'file':
        case 'javascript':
        case 'mailto':
          return 'null';
      }
      host = this.host;
      if (!host) {
        return '';
      }
      return this._scheme + '://' + host;
    }
  };

  // Copy over the static methods
  var OriginalURL = scope.URL;
  if (OriginalURL) {
    jURL.createObjectURL = function(blob) {
      // IE extension allows a second optional options argument.
      // http://msdn.microsoft.com/en-us/library/ie/hh772302(v=vs.85).aspx
      return OriginalURL.createObjectURL.apply(OriginalURL, arguments);
    };
    jURL.revokeObjectURL = function(url) {
      OriginalURL.revokeObjectURL(url);
    };
  }

  scope.URL = jURL;

})(this);

!function(e){"object"==typeof exports?module.exports=e():"function"==typeof define&&define.amd?define(e):"undefined"!=typeof window?window.Promise=e():"undefined"!=typeof global?global.Promise=e():"undefined"!=typeof self&&(self.Promise=e())}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);throw new Error("Cannot find module '"+o+"'")}var f=n[o]={exports:{}};t[o][0].call(f.exports,function(e){var n=t[o][1][e];return s(n?n:e)},f,f.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

/**
 * ES6 global Promise shim
 */
var unhandledRejections = require('../lib/decorators/unhandledRejection');
var PromiseConstructor = unhandledRejections(require('../lib/Promise'));

module.exports = typeof global != 'undefined' ? (global.Promise = PromiseConstructor)
	           : typeof self   != 'undefined' ? (self.Promise   = PromiseConstructor)
	           : PromiseConstructor;

},{"../lib/Promise":2,"../lib/decorators/unhandledRejection":4}],2:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function (require) {

	var makePromise = require('./makePromise');
	var Scheduler = require('./Scheduler');
	var async = require('./env').asap;

	return makePromise({
		scheduler: new Scheduler(async)
	});

});
})(typeof define === 'function' && define.amd ? define : function (factory) { module.exports = factory(require); });

},{"./Scheduler":3,"./env":5,"./makePromise":7}],3:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	// Credit to Twisol (https://github.com/Twisol) for suggesting
	// this type of extensible queue + trampoline approach for next-tick conflation.

	/**
	 * Async task scheduler
	 * @param {function} async function to schedule a single async function
	 * @constructor
	 */
	function Scheduler(async) {
		this._async = async;
		this._running = false;

		this._queue = this;
		this._queueLen = 0;
		this._afterQueue = {};
		this._afterQueueLen = 0;

		var self = this;
		this.drain = function() {
			self._drain();
		};
	}

	/**
	 * Enqueue a task
	 * @param {{ run:function }} task
	 */
	Scheduler.prototype.enqueue = function(task) {
		this._queue[this._queueLen++] = task;
		this.run();
	};

	/**
	 * Enqueue a task to run after the main task queue
	 * @param {{ run:function }} task
	 */
	Scheduler.prototype.afterQueue = function(task) {
		this._afterQueue[this._afterQueueLen++] = task;
		this.run();
	};

	Scheduler.prototype.run = function() {
		if (!this._running) {
			this._running = true;
			this._async(this.drain);
		}
	};

	/**
	 * Drain the handler queue entirely, and then the after queue
	 */
	Scheduler.prototype._drain = function() {
		var i = 0;
		for (; i < this._queueLen; ++i) {
			this._queue[i].run();
			this._queue[i] = void 0;
		}

		this._queueLen = 0;
		this._running = false;

		for (i = 0; i < this._afterQueueLen; ++i) {
			this._afterQueue[i].run();
			this._afterQueue[i] = void 0;
		}

		this._afterQueueLen = 0;
	};

	return Scheduler;

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],4:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function(require) {

	var setTimer = require('../env').setTimer;
	var format = require('../format');

	return function unhandledRejection(Promise) {

		var logError = noop;
		var logInfo = noop;
		var localConsole;

		if(typeof console !== 'undefined') {
			// Alias console to prevent things like uglify's drop_console option from
			// removing console.log/error. Unhandled rejections fall into the same
			// category as uncaught exceptions, and build tools shouldn't silence them.
			localConsole = console;
			logError = typeof localConsole.error !== 'undefined'
				? function (e) { localConsole.error(e); }
				: function (e) { localConsole.log(e); };

			logInfo = typeof localConsole.info !== 'undefined'
				? function (e) { localConsole.info(e); }
				: function (e) { localConsole.log(e); };
		}

		Promise.onPotentiallyUnhandledRejection = function(rejection) {
			enqueue(report, rejection);
		};

		Promise.onPotentiallyUnhandledRejectionHandled = function(rejection) {
			enqueue(unreport, rejection);
		};

		Promise.onFatalRejection = function(rejection) {
			enqueue(throwit, rejection.value);
		};

		var tasks = [];
		var reported = [];
		var running = null;

		function report(r) {
			if(!r.handled) {
				reported.push(r);
				logError('Potentially unhandled rejection [' + r.id + '] ' + format.formatError(r.value));
			}
		}

		function unreport(r) {
			var i = reported.indexOf(r);
			if(i >= 0) {
				reported.splice(i, 1);
				logInfo('Handled previous rejection [' + r.id + '] ' + format.formatObject(r.value));
			}
		}

		function enqueue(f, x) {
			tasks.push(f, x);
			if(running === null) {
				running = setTimer(flush, 0);
			}
		}

		function flush() {
			running = null;
			while(tasks.length > 0) {
				tasks.shift()(tasks.shift());
			}
		}

		return Promise;
	};

	function throwit(e) {
		throw e;
	}

	function noop() {}

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));

},{"../env":5,"../format":6}],5:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

/*global process,document,setTimeout,clearTimeout,MutationObserver,WebKitMutationObserver*/
(function(define) { 'use strict';
define(function(require) {
	/*jshint maxcomplexity:6*/

	// Sniff "best" async scheduling option
	// Prefer process.nextTick or MutationObserver, then check for
	// setTimeout, and finally vertx, since its the only env that doesn't
	// have setTimeout

	var MutationObs;
	var capturedSetTimeout = typeof setTimeout !== 'undefined' && setTimeout;

	// Default env
	var setTimer = function(f, ms) { return setTimeout(f, ms); };
	var clearTimer = function(t) { return clearTimeout(t); };
	var asap = function (f) { return capturedSetTimeout(f, 0); };

	// Detect specific env
	if (isNode()) { // Node
		asap = function (f) { return process.nextTick(f); };

	} else if (MutationObs = hasMutationObserver()) { // Modern browser
		asap = initMutationObserver(MutationObs);

	} else if (!capturedSetTimeout) { // vert.x
		var vertxRequire = require;
		var vertx = vertxRequire('vertx');
		setTimer = function (f, ms) { return vertx.setTimer(ms, f); };
		clearTimer = vertx.cancelTimer;
		asap = vertx.runOnLoop || vertx.runOnContext;
	}

	return {
		setTimer: setTimer,
		clearTimer: clearTimer,
		asap: asap
	};

	function isNode () {
		return typeof process !== 'undefined' &&
			Object.prototype.toString.call(process) === '[object process]';
	}

	function hasMutationObserver () {
		return (typeof MutationObserver === 'function' && MutationObserver) ||
			(typeof WebKitMutationObserver === 'function' && WebKitMutationObserver);
	}

	function initMutationObserver(MutationObserver) {
		var scheduled;
		var node = document.createTextNode('');
		var o = new MutationObserver(run);
		o.observe(node, { characterData: true });

		function run() {
			var f = scheduled;
			scheduled = void 0;
			f();
		}

		var i = 0;
		return function (f) {
			scheduled = f;
			node.data = (i ^= 1);
		};
	}
});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(require); }));

},{}],6:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return {
		formatError: formatError,
		formatObject: formatObject,
		tryStringify: tryStringify
	};

	/**
	 * Format an error into a string.  If e is an Error and has a stack property,
	 * it's returned.  Otherwise, e is formatted using formatObject, with a
	 * warning added about e not being a proper Error.
	 * @param {*} e
	 * @returns {String} formatted string, suitable for output to developers
	 */
	function formatError(e) {
		var s = typeof e === 'object' && e !== null && (e.stack || e.message) ? e.stack || e.message : formatObject(e);
		return e instanceof Error ? s : s + ' (WARNING: non-Error used)';
	}

	/**
	 * Format an object, detecting "plain" objects and running them through
	 * JSON.stringify if possible.
	 * @param {Object} o
	 * @returns {string}
	 */
	function formatObject(o) {
		var s = String(o);
		if(s === '[object Object]' && typeof JSON !== 'undefined') {
			s = tryStringify(o, s);
		}
		return s;
	}

	/**
	 * Try to return the result of JSON.stringify(x).  If that fails, return
	 * defaultValue
	 * @param {*} x
	 * @param {*} defaultValue
	 * @returns {String|*} JSON.stringify(x) or defaultValue
	 */
	function tryStringify(x, defaultValue) {
		try {
			return JSON.stringify(x);
		} catch(e) {
			return defaultValue;
		}
	}

});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}],7:[function(require,module,exports){
/** @license MIT License (c) copyright 2010-2014 original author or authors */
/** @author Brian Cavalier */
/** @author John Hann */

(function(define) { 'use strict';
define(function() {

	return function makePromise(environment) {

		var tasks = environment.scheduler;
		var emitRejection = initEmitRejection();

		var objectCreate = Object.create ||
			function(proto) {
				function Child() {}
				Child.prototype = proto;
				return new Child();
			};

		/**
		 * Create a promise whose fate is determined by resolver
		 * @constructor
		 * @returns {Promise} promise
		 * @name Promise
		 */
		function Promise(resolver, handler) {
			this._handler = resolver === Handler ? handler : init(resolver);
		}

		/**
		 * Run the supplied resolver
		 * @param resolver
		 * @returns {Pending}
		 */
		function init(resolver) {
			var handler = new Pending();

			try {
				resolver(promiseResolve, promiseReject, promiseNotify);
			} catch (e) {
				promiseReject(e);
			}

			return handler;

			/**
			 * Transition from pre-resolution state to post-resolution state, notifying
			 * all listeners of the ultimate fulfillment or rejection
			 * @param {*} x resolution value
			 */
			function promiseResolve (x) {
				handler.resolve(x);
			}
			/**
			 * Reject this promise with reason, which will be used verbatim
			 * @param {Error|*} reason rejection reason, strongly suggested
			 *   to be an Error type
			 */
			function promiseReject (reason) {
				handler.reject(reason);
			}

			/**
			 * @deprecated
			 * Issue a progress event, notifying all progress listeners
			 * @param {*} x progress event payload to pass to all listeners
			 */
			function promiseNotify (x) {
				handler.notify(x);
			}
		}

		// Creation

		Promise.resolve = resolve;
		Promise.reject = reject;
		Promise.never = never;

		Promise._defer = defer;
		Promise._handler = getHandler;

		/**
		 * Returns a trusted promise. If x is already a trusted promise, it is
		 * returned, otherwise returns a new trusted Promise which follows x.
		 * @param  {*} x
		 * @return {Promise} promise
		 */
		function resolve(x) {
			return isPromise(x) ? x
				: new Promise(Handler, new Async(getHandler(x)));
		}

		/**
		 * Return a reject promise with x as its reason (x is used verbatim)
		 * @param {*} x
		 * @returns {Promise} rejected promise
		 */
		function reject(x) {
			return new Promise(Handler, new Async(new Rejected(x)));
		}

		/**
		 * Return a promise that remains pending forever
		 * @returns {Promise} forever-pending promise.
		 */
		function never() {
			return foreverPendingPromise; // Should be frozen
		}

		/**
		 * Creates an internal {promise, resolver} pair
		 * @private
		 * @returns {Promise}
		 */
		function defer() {
			return new Promise(Handler, new Pending());
		}

		// Transformation and flow control

		/**
		 * Transform this promise's fulfillment value, returning a new Promise
		 * for the transformed result.  If the promise cannot be fulfilled, onRejected
		 * is called with the reason.  onProgress *may* be called with updates toward
		 * this promise's fulfillment.
		 * @param {function=} onFulfilled fulfillment handler
		 * @param {function=} onRejected rejection handler
		 * @param {function=} onProgress @deprecated progress handler
		 * @return {Promise} new promise
		 */
		Promise.prototype.then = function(onFulfilled, onRejected, onProgress) {
			var parent = this._handler;
			var state = parent.join().state();

			if ((typeof onFulfilled !== 'function' && state > 0) ||
				(typeof onRejected !== 'function' && state < 0)) {
				// Short circuit: value will not change, simply share handler
				return new this.constructor(Handler, parent);
			}

			var p = this._beget();
			var child = p._handler;

			parent.chain(child, parent.receiver, onFulfilled, onRejected, onProgress);

			return p;
		};

		/**
		 * If this promise cannot be fulfilled due to an error, call onRejected to
		 * handle the error. Shortcut for .then(undefined, onRejected)
		 * @param {function?} onRejected
		 * @return {Promise}
		 */
		Promise.prototype['catch'] = function(onRejected) {
			return this.then(void 0, onRejected);
		};

		/**
		 * Creates a new, pending promise of the same type as this promise
		 * @private
		 * @returns {Promise}
		 */
		Promise.prototype._beget = function() {
			return begetFrom(this._handler, this.constructor);
		};

		function begetFrom(parent, Promise) {
			var child = new Pending(parent.receiver, parent.join().context);
			return new Promise(Handler, child);
		}

		// Array combinators

		Promise.all = all;
		Promise.race = race;
		Promise._traverse = traverse;

		/**
		 * Return a promise that will fulfill when all promises in the
		 * input array have fulfilled, or will reject when one of the
		 * promises rejects.
		 * @param {array} promises array of promises
		 * @returns {Promise} promise for array of fulfillment values
		 */
		function all(promises) {
			return traverseWith(snd, null, promises);
		}

		/**
		 * Array<Promise<X>> -> Promise<Array<f(X)>>
		 * @private
		 * @param {function} f function to apply to each promise's value
		 * @param {Array} promises array of promises
		 * @returns {Promise} promise for transformed values
		 */
		function traverse(f, promises) {
			return traverseWith(tryCatch2, f, promises);
		}

		function traverseWith(tryMap, f, promises) {
			var handler = typeof f === 'function' ? mapAt : settleAt;

			var resolver = new Pending();
			var pending = promises.length >>> 0;
			var results = new Array(pending);

			for (var i = 0, x; i < promises.length && !resolver.resolved; ++i) {
				x = promises[i];

				if (x === void 0 && !(i in promises)) {
					--pending;
					continue;
				}

				traverseAt(promises, handler, i, x, resolver);
			}

			if(pending === 0) {
				resolver.become(new Fulfilled(results));
			}

			return new Promise(Handler, resolver);

			function mapAt(i, x, resolver) {
				if(!resolver.resolved) {
					traverseAt(promises, settleAt, i, tryMap(f, x, i), resolver);
				}
			}

			function settleAt(i, x, resolver) {
				results[i] = x;
				if(--pending === 0) {
					resolver.become(new Fulfilled(results));
				}
			}
		}

		function traverseAt(promises, handler, i, x, resolver) {
			if (maybeThenable(x)) {
				var h = getHandlerMaybeThenable(x);
				var s = h.state();

				if (s === 0) {
					h.fold(handler, i, void 0, resolver);
				} else if (s > 0) {
					handler(i, h.value, resolver);
				} else {
					resolver.become(h);
					visitRemaining(promises, i+1, h);
				}
			} else {
				handler(i, x, resolver);
			}
		}

		Promise._visitRemaining = visitRemaining;
		function visitRemaining(promises, start, handler) {
			for(var i=start; i<promises.length; ++i) {
				markAsHandled(getHandler(promises[i]), handler);
			}
		}

		function markAsHandled(h, handler) {
			if(h === handler) {
				return;
			}

			var s = h.state();
			if(s === 0) {
				h.visit(h, void 0, h._unreport);
			} else if(s < 0) {
				h._unreport();
			}
		}

		/**
		 * Fulfill-reject competitive race. Return a promise that will settle
		 * to the same state as the earliest input promise to settle.
		 *
		 * WARNING: The ES6 Promise spec requires that race()ing an empty array
		 * must return a promise that is pending forever.  This implementation
		 * returns a singleton forever-pending promise, the same singleton that is
		 * returned by Promise.never(), thus can be checked with ===
		 *
		 * @param {array} promises array of promises to race
		 * @returns {Promise} if input is non-empty, a promise that will settle
		 * to the same outcome as the earliest input promise to settle. if empty
		 * is empty, returns a promise that will never settle.
		 */
		function race(promises) {
			if(typeof promises !== 'object' || promises === null) {
				return reject(new TypeError('non-iterable passed to race()'));
			}

			// Sigh, race([]) is untestable unless we return *something*
			// that is recognizable without calling .then() on it.
			return promises.length === 0 ? never()
				 : promises.length === 1 ? resolve(promises[0])
				 : runRace(promises);
		}

		function runRace(promises) {
			var resolver = new Pending();
			var i, x, h;
			for(i=0; i<promises.length; ++i) {
				x = promises[i];
				if (x === void 0 && !(i in promises)) {
					continue;
				}

				h = getHandler(x);
				if(h.state() !== 0) {
					resolver.become(h);
					visitRemaining(promises, i+1, h);
					break;
				} else {
					h.visit(resolver, resolver.resolve, resolver.reject);
				}
			}
			return new Promise(Handler, resolver);
		}

		// Promise internals
		// Below this, everything is @private

		/**
		 * Get an appropriate handler for x, without checking for cycles
		 * @param {*} x
		 * @returns {object} handler
		 */
		function getHandler(x) {
			if(isPromise(x)) {
				return x._handler.join();
			}
			return maybeThenable(x) ? getHandlerUntrusted(x) : new Fulfilled(x);
		}

		/**
		 * Get a handler for thenable x.
		 * NOTE: You must only call this if maybeThenable(x) == true
		 * @param {object|function|Promise} x
		 * @returns {object} handler
		 */
		function getHandlerMaybeThenable(x) {
			return isPromise(x) ? x._handler.join() : getHandlerUntrusted(x);
		}

		/**
		 * Get a handler for potentially untrusted thenable x
		 * @param {*} x
		 * @returns {object} handler
		 */
		function getHandlerUntrusted(x) {
			try {
				var untrustedThen = x.then;
				return typeof untrustedThen === 'function'
					? new Thenable(untrustedThen, x)
					: new Fulfilled(x);
			} catch(e) {
				return new Rejected(e);
			}
		}

		/**
		 * Handler for a promise that is pending forever
		 * @constructor
		 */
		function Handler() {}

		Handler.prototype.when
			= Handler.prototype.become
			= Handler.prototype.notify // deprecated
			= Handler.prototype.fail
			= Handler.prototype._unreport
			= Handler.prototype._report
			= noop;

		Handler.prototype._state = 0;

		Handler.prototype.state = function() {
			return this._state;
		};

		/**
		 * Recursively collapse handler chain to find the handler
		 * nearest to the fully resolved value.
		 * @returns {object} handler nearest the fully resolved value
		 */
		Handler.prototype.join = function() {
			var h = this;
			while(h.handler !== void 0) {
				h = h.handler;
			}
			return h;
		};

		Handler.prototype.chain = function(to, receiver, fulfilled, rejected, progress) {
			this.when({
				resolver: to,
				receiver: receiver,
				fulfilled: fulfilled,
				rejected: rejected,
				progress: progress
			});
		};

		Handler.prototype.visit = function(receiver, fulfilled, rejected, progress) {
			this.chain(failIfRejected, receiver, fulfilled, rejected, progress);
		};

		Handler.prototype.fold = function(f, z, c, to) {
			this.when(new Fold(f, z, c, to));
		};

		/**
		 * Handler that invokes fail() on any handler it becomes
		 * @constructor
		 */
		function FailIfRejected() {}

		inherit(Handler, FailIfRejected);

		FailIfRejected.prototype.become = function(h) {
			h.fail();
		};

		var failIfRejected = new FailIfRejected();

		/**
		 * Handler that manages a queue of consumers waiting on a pending promise
		 * @constructor
		 */
		function Pending(receiver, inheritedContext) {
			Promise.createContext(this, inheritedContext);

			this.consumers = void 0;
			this.receiver = receiver;
			this.handler = void 0;
			this.resolved = false;
		}

		inherit(Handler, Pending);

		Pending.prototype._state = 0;

		Pending.prototype.resolve = function(x) {
			this.become(getHandler(x));
		};

		Pending.prototype.reject = function(x) {
			if(this.resolved) {
				return;
			}

			this.become(new Rejected(x));
		};

		Pending.prototype.join = function() {
			if (!this.resolved) {
				return this;
			}

			var h = this;

			while (h.handler !== void 0) {
				h = h.handler;
				if (h === this) {
					return this.handler = cycle();
				}
			}

			return h;
		};

		Pending.prototype.run = function() {
			var q = this.consumers;
			var handler = this.handler;
			this.handler = this.handler.join();
			this.consumers = void 0;

			for (var i = 0; i < q.length; ++i) {
				handler.when(q[i]);
			}
		};

		Pending.prototype.become = function(handler) {
			if(this.resolved) {
				return;
			}

			this.resolved = true;
			this.handler = handler;
			if(this.consumers !== void 0) {
				tasks.enqueue(this);
			}

			if(this.context !== void 0) {
				handler._report(this.context);
			}
		};

		Pending.prototype.when = function(continuation) {
			if(this.resolved) {
				tasks.enqueue(new ContinuationTask(continuation, this.handler));
			} else {
				if(this.consumers === void 0) {
					this.consumers = [continuation];
				} else {
					this.consumers.push(continuation);
				}
			}
		};

		/**
		 * @deprecated
		 */
		Pending.prototype.notify = function(x) {
			if(!this.resolved) {
				tasks.enqueue(new ProgressTask(x, this));
			}
		};

		Pending.prototype.fail = function(context) {
			var c = typeof context === 'undefined' ? this.context : context;
			this.resolved && this.handler.join().fail(c);
		};

		Pending.prototype._report = function(context) {
			this.resolved && this.handler.join()._report(context);
		};

		Pending.prototype._unreport = function() {
			this.resolved && this.handler.join()._unreport();
		};

		/**
		 * Wrap another handler and force it into a future stack
		 * @param {object} handler
		 * @constructor
		 */
		function Async(handler) {
			this.handler = handler;
		}

		inherit(Handler, Async);

		Async.prototype.when = function(continuation) {
			tasks.enqueue(new ContinuationTask(continuation, this));
		};

		Async.prototype._report = function(context) {
			this.join()._report(context);
		};

		Async.prototype._unreport = function() {
			this.join()._unreport();
		};

		/**
		 * Handler that wraps an untrusted thenable and assimilates it in a future stack
		 * @param {function} then
		 * @param {{then: function}} thenable
		 * @constructor
		 */
		function Thenable(then, thenable) {
			Pending.call(this);
			tasks.enqueue(new AssimilateTask(then, thenable, this));
		}

		inherit(Pending, Thenable);

		/**
		 * Handler for a fulfilled promise
		 * @param {*} x fulfillment value
		 * @constructor
		 */
		function Fulfilled(x) {
			Promise.createContext(this);
			this.value = x;
		}

		inherit(Handler, Fulfilled);

		Fulfilled.prototype._state = 1;

		Fulfilled.prototype.fold = function(f, z, c, to) {
			runContinuation3(f, z, this, c, to);
		};

		Fulfilled.prototype.when = function(cont) {
			runContinuation1(cont.fulfilled, this, cont.receiver, cont.resolver);
		};

		var errorId = 0;

		/**
		 * Handler for a rejected promise
		 * @param {*} x rejection reason
		 * @constructor
		 */
		function Rejected(x) {
			Promise.createContext(this);

			this.id = ++errorId;
			this.value = x;
			this.handled = false;
			this.reported = false;

			this._report();
		}

		inherit(Handler, Rejected);

		Rejected.prototype._state = -1;

		Rejected.prototype.fold = function(f, z, c, to) {
			to.become(this);
		};

		Rejected.prototype.when = function(cont) {
			if(typeof cont.rejected === 'function') {
				this._unreport();
			}
			runContinuation1(cont.rejected, this, cont.receiver, cont.resolver);
		};

		Rejected.prototype._report = function(context) {
			tasks.afterQueue(new ReportTask(this, context));
		};

		Rejected.prototype._unreport = function() {
			if(this.handled) {
				return;
			}
			this.handled = true;
			tasks.afterQueue(new UnreportTask(this));
		};

		Rejected.prototype.fail = function(context) {
			this.reported = true;
			emitRejection('unhandledRejection', this);
			Promise.onFatalRejection(this, context === void 0 ? this.context : context);
		};

		function ReportTask(rejection, context) {
			this.rejection = rejection;
			this.context = context;
		}

		ReportTask.prototype.run = function() {
			if(!this.rejection.handled && !this.rejection.reported) {
				this.rejection.reported = true;
				emitRejection('unhandledRejection', this.rejection) ||
					Promise.onPotentiallyUnhandledRejection(this.rejection, this.context);
			}
		};

		function UnreportTask(rejection) {
			this.rejection = rejection;
		}

		UnreportTask.prototype.run = function() {
			if(this.rejection.reported) {
				emitRejection('rejectionHandled', this.rejection) ||
					Promise.onPotentiallyUnhandledRejectionHandled(this.rejection);
			}
		};

		// Unhandled rejection hooks
		// By default, everything is a noop

		Promise.createContext
			= Promise.enterContext
			= Promise.exitContext
			= Promise.onPotentiallyUnhandledRejection
			= Promise.onPotentiallyUnhandledRejectionHandled
			= Promise.onFatalRejection
			= noop;

		// Errors and singletons

		var foreverPendingHandler = new Handler();
		var foreverPendingPromise = new Promise(Handler, foreverPendingHandler);

		function cycle() {
			return new Rejected(new TypeError('Promise cycle'));
		}

		// Task runners

		/**
		 * Run a single consumer
		 * @constructor
		 */
		function ContinuationTask(continuation, handler) {
			this.continuation = continuation;
			this.handler = handler;
		}

		ContinuationTask.prototype.run = function() {
			this.handler.join().when(this.continuation);
		};

		/**
		 * Run a queue of progress handlers
		 * @constructor
		 */
		function ProgressTask(value, handler) {
			this.handler = handler;
			this.value = value;
		}

		ProgressTask.prototype.run = function() {
			var q = this.handler.consumers;
			if(q === void 0) {
				return;
			}

			for (var c, i = 0; i < q.length; ++i) {
				c = q[i];
				runNotify(c.progress, this.value, this.handler, c.receiver, c.resolver);
			}
		};

		/**
		 * Assimilate a thenable, sending it's value to resolver
		 * @param {function} then
		 * @param {object|function} thenable
		 * @param {object} resolver
		 * @constructor
		 */
		function AssimilateTask(then, thenable, resolver) {
			this._then = then;
			this.thenable = thenable;
			this.resolver = resolver;
		}

		AssimilateTask.prototype.run = function() {
			var h = this.resolver;
			tryAssimilate(this._then, this.thenable, _resolve, _reject, _notify);

			function _resolve(x) { h.resolve(x); }
			function _reject(x)  { h.reject(x); }
			function _notify(x)  { h.notify(x); }
		};

		function tryAssimilate(then, thenable, resolve, reject, notify) {
			try {
				then.call(thenable, resolve, reject, notify);
			} catch (e) {
				reject(e);
			}
		}

		/**
		 * Fold a handler value with z
		 * @constructor
		 */
		function Fold(f, z, c, to) {
			this.f = f; this.z = z; this.c = c; this.to = to;
			this.resolver = failIfRejected;
			this.receiver = this;
		}

		Fold.prototype.fulfilled = function(x) {
			this.f.call(this.c, this.z, x, this.to);
		};

		Fold.prototype.rejected = function(x) {
			this.to.reject(x);
		};

		Fold.prototype.progress = function(x) {
			this.to.notify(x);
		};

		// Other helpers

		/**
		 * @param {*} x
		 * @returns {boolean} true iff x is a trusted Promise
		 */
		function isPromise(x) {
			return x instanceof Promise;
		}

		/**
		 * Test just enough to rule out primitives, in order to take faster
		 * paths in some code
		 * @param {*} x
		 * @returns {boolean} false iff x is guaranteed *not* to be a thenable
		 */
		function maybeThenable(x) {
			return (typeof x === 'object' || typeof x === 'function') && x !== null;
		}

		function runContinuation1(f, h, receiver, next) {
			if(typeof f !== 'function') {
				return next.become(h);
			}

			Promise.enterContext(h);
			tryCatchReject(f, h.value, receiver, next);
			Promise.exitContext();
		}

		function runContinuation3(f, x, h, receiver, next) {
			if(typeof f !== 'function') {
				return next.become(h);
			}

			Promise.enterContext(h);
			tryCatchReject3(f, x, h.value, receiver, next);
			Promise.exitContext();
		}

		/**
		 * @deprecated
		 */
		function runNotify(f, x, h, receiver, next) {
			if(typeof f !== 'function') {
				return next.notify(x);
			}

			Promise.enterContext(h);
			tryCatchReturn(f, x, receiver, next);
			Promise.exitContext();
		}

		function tryCatch2(f, a, b) {
			try {
				return f(a, b);
			} catch(e) {
				return reject(e);
			}
		}

		/**
		 * Return f.call(thisArg, x), or if it throws return a rejected promise for
		 * the thrown exception
		 */
		function tryCatchReject(f, x, thisArg, next) {
			try {
				next.become(getHandler(f.call(thisArg, x)));
			} catch(e) {
				next.become(new Rejected(e));
			}
		}

		/**
		 * Same as above, but includes the extra argument parameter.
		 */
		function tryCatchReject3(f, x, y, thisArg, next) {
			try {
				f.call(thisArg, x, y, next);
			} catch(e) {
				next.become(new Rejected(e));
			}
		}

		/**
		 * @deprecated
		 * Return f.call(thisArg, x), or if it throws, *return* the exception
		 */
		function tryCatchReturn(f, x, thisArg, next) {
			try {
				next.notify(f.call(thisArg, x));
			} catch(e) {
				next.notify(e);
			}
		}

		function inherit(Parent, Child) {
			Child.prototype = objectCreate(Parent.prototype);
			Child.prototype.constructor = Child;
		}

		function snd(x, y) {
			return y;
		}

		function noop() {}

		function initEmitRejection() {
			/*global process, self, CustomEvent*/
			if(typeof process !== 'undefined' && process !== null
				&& typeof process.emit === 'function') {
				// Returning falsy here means to call the default
				// onPotentiallyUnhandledRejection API.  This is safe even in
				// browserify since process.emit always returns falsy in browserify:
				// https://github.com/defunctzombie/node-process/blob/master/browser.js#L40-L46
				return function(type, rejection) {
					return type === 'unhandledRejection'
						? process.emit(type, rejection.value, rejection)
						: process.emit(type, rejection);
				};
			} else if(typeof self !== 'undefined' && typeof CustomEvent === 'function') {
				return (function(noop, self, CustomEvent) {
					var hasCustomEvent = false;
					try {
						var ev = new CustomEvent('unhandledRejection');
						hasCustomEvent = ev instanceof CustomEvent;
					} catch (e) {}

					return !hasCustomEvent ? noop : function(type, rejection) {
						var ev = new CustomEvent(type, {
							detail: {
								reason: rejection.value,
								key: rejection
							},
							bubbles: false,
							cancelable: true
						});

						return !self.dispatchEvent(ev);
					};
				}(noop, self, CustomEvent));
			}

			return noop;
		}

		return Promise;
	};
});
}(typeof define === 'function' && define.amd ? define : function(factory) { module.exports = factory(); }));

},{}]},{},[1])
(1)
});
;
/*
 * SystemJS v0.19.26
 */
!function(e){function t(e,n){if("string"!=typeof e)throw new TypeError("URL must be a string");var r=String(e).replace(/^\s+|\s+$/g,"").match(/^([^:\/?#]+:)?(?:\/\/(?:([^:@\/?#]*)(?::([^:@\/?#]*))?@)?(([^:\/?#]*)(?::(\d*))?))?([^?#]*)(\?[^#]*)?(#[\s\S]*)?/);if(!r)throw new RangeError("Invalid URL format");var a=r[1]||"",o=r[2]||"",i=r[3]||"",s=r[4]||"",d=r[5]||"",l=r[6]||"",u=r[7]||"",c=r[8]||"",f=r[9]||"";if(void 0!==n){var m=n instanceof t?n:new t(n),p=!a&&!s&&!o;!p||u||c||(c=m.search),p&&"/"!==u[0]&&(u=u?(!m.host&&!m.username||m.pathname?"":"/")+m.pathname.slice(0,m.pathname.lastIndexOf("/")+1)+u:m.pathname);var h=[];u.replace(/^(\.\.?(\/|$))+/,"").replace(/\/(\.(\/|$))+/g,"/").replace(/\/\.\.$/,"/../").replace(/\/?[^\/]*/g,function(e){"/.."===e?h.pop():h.push(e)}),u=h.join("").replace(/^\//,"/"===u[0]?"/":""),p&&(l=m.port,d=m.hostname,s=m.host,i=m.password,o=m.username),a||(a=m.protocol)}"file:"==a&&(u=u.replace(/\\/g,"/")),this.origin=s?a+(""!==a||""!==s?"//":"")+s:"",this.href=a+(a&&s||"file:"==a?"//":"")+(""!==o?o+(""!==i?":"+i:"")+"@":"")+s+u+c+f,this.protocol=a,this.username=o,this.password=i,this.host=s,this.hostname=d,this.port=l,this.pathname=u,this.search=c,this.hash=f}e.URLPolyfill=t}("undefined"!=typeof self?self:global),function(e){function t(e,t){if(!e.originalErr)for(var n=(e.stack||e.message||e).split("\n"),r=[],a=0;a<n.length;a++)("undefined"==typeof $__curScript||-1==n[a].indexOf($__curScript.src))&&r.push(n[a]);var o=(r?r.join("\n	"):e.message)+"\n	"+t;b||(o=o.replace(w?/file:\/\/\//g:/file:\/\//g,""));var i=new Error(o,e.fileName,e.lineNumber);return b?i.stack=null:i.stack=o,i.originalErr=e.originalErr||e,i}function n(e,n,r){try{new Function(e).call(r)}catch(a){throw t(a,"Evaluating "+n)}}function r(){}function a(t){this._loader={loaderObj:this,loads:[],modules:{},importPromises:{},moduleRecords:{}},x(this,"global",{get:function(){return e}})}function o(){a.call(this),this.paths={}}function i(e,t){var n,r="",a=0;for(var o in e){var i=o.split("*");if(i.length>2)throw new TypeError("Only one wildcard in a path is permitted");if(1==i.length){if(t==o)return e[o];if(t.substr(0,o.length-1)==o.substr(0,o.length-1)&&(t.length<o.length||t[o.length-1]==o[o.length-1])&&"/"==e[o][e[o].length-1])return e[o].substr(0,e[o].length-1)+(t.length>o.length?"/"+t.substr(o.length):"")}else{var s=i[0].length;s>=a&&t.substr(0,i[0].length)==i[0]&&t.substr(t.length-i[1].length)==i[1]&&(a=s,r=o,n=t.substr(i[0].length,t.length-i[1].length-i[0].length))}}var d=e[r];return"string"==typeof n&&(d=d.replace("*",n)),d}function s(){}function d(){o.call(this),M.call(this)}function l(){}function u(e,t){d.prototype[e]=t(d.prototype[e]||function(){})}function c(e){M=e(M||function(){})}function f(e){for(var t=[],n=[],r=0,a=e.length;a>r;r++){var o=S.call(t,e[r]);-1===o?(t.push(e[r]),n.push([r])):n[o].push(r)}return{names:t,indices:n}}function m(e){var t={};if("object"==typeof e||"function"==typeof e){var n=e&&e.hasOwnProperty;if(I)for(var r in e)h(t,e,r)||p(t,e,r,n);else for(var r in e)p(t,e,r,n)}return t["default"]=e,x(t,"__useDefault",{value:!0}),t}function p(e,t,n,r){(!r||t.hasOwnProperty(n))&&(e[n]=t[n])}function h(e,t,n){try{var r;return(r=Object.getOwnPropertyDescriptor(t,n))&&x(e,n,r),!0}catch(a){return!1}}function v(e){var t=e.match(D);return t&&"System.register"==e.substr(t[0].length,15)}function g(){return{name:null,deps:null,originalIndices:null,declare:null,execute:null,executingRequire:!1,declarative:!1,normalizedDeps:null,groupIndex:null,evaluated:!1,module:null,esModule:null,esmExports:!1}}var y="undefined"==typeof window&&"undefined"!=typeof self&&"undefined"!=typeof importScripts,b="undefined"!=typeof window&&"undefined"!=typeof document,w="undefined"!=typeof process&&"undefined"!=typeof process.platform&&!!process.platform.match(/^win/);e.console||(e.console={assert:function(){}});var x,S=Array.prototype.indexOf||function(e){for(var t=0,n=this.length;n>t;t++)if(this[t]===e)return t;return-1};!function(){try{Object.defineProperty({},"a",{})&&(x=Object.defineProperty)}catch(e){x=function(e,t,n){try{e[t]=n.value||n.get.call(e)}catch(r){}}}}();var E;if("undefined"!=typeof document&&document.getElementsByTagName){if(E=document.baseURI,!E){var _=document.getElementsByTagName("base");E=_[0]&&_[0].href||window.location.href}E=E.split("#")[0].split("?")[0],E=E.substr(0,E.lastIndexOf("/")+1)}else if("undefined"!=typeof process&&process.cwd)E="file://"+(w?"/":"")+process.cwd()+"/",w&&(E=E.replace(/\\/g,"/"));else{if("undefined"==typeof location)throw new TypeError("No environment baseURI");E=e.location.href}try{var O="test:"==new e.URL("test:///").protocol}catch(j){}var P=O?e.URL:e.URLPolyfill;x(r.prototype,"toString",{value:function(){return"Module"}}),function(){function o(e){return{status:"loading",name:e,linkSets:[],dependencies:[],metadata:{}}}function i(e,t,n){return new Promise(c({step:n.address?"fetch":"locate",loader:e,moduleName:t,moduleMetadata:n&&n.metadata||{},moduleSource:n.source,moduleAddress:n.address}))}function s(e,t,n,r){return new Promise(function(a,o){a(e.loaderObj.normalize(t,n,r))}).then(function(t){var n;if(e.modules[t])return n=o(t),n.status="linked",n.module=e.modules[t],n;for(var r=0,a=e.loads.length;a>r;r++)if(n=e.loads[r],n.name==t)return n;return n=o(t),e.loads.push(n),d(e,n),n})}function d(e,t){l(e,t,Promise.resolve().then(function(){return e.loaderObj.locate({name:t.name,metadata:t.metadata})}))}function l(e,t,n){u(e,t,n.then(function(n){return"loading"==t.status?(t.address=n,e.loaderObj.fetch({name:t.name,metadata:t.metadata,address:n})):void 0}))}function u(t,r,a){a.then(function(a){return"loading"==r.status?Promise.resolve(t.loaderObj.translate({name:r.name,metadata:r.metadata,address:r.address,source:a})).then(function(e){return r.source=e,t.loaderObj.instantiate({name:r.name,metadata:r.metadata,address:r.address,source:e})}).then(function(a){if(void 0===a)return r.address=r.address||"<Anonymous Module "+ ++j+">",r.isDeclarative=!0,O.call(t.loaderObj,r).then(function(t){var a=e.System,o=a.register;a.register=function(e,t,n){"string"!=typeof e&&(n=t,t=e),r.declare=n,r.depsList=t},n(t,r.address,{}),a.register=o});if("object"!=typeof a)throw TypeError("Invalid instantiate return value");r.depsList=a.deps||[],r.execute=a.execute,r.isDeclarative=!1}).then(function(){r.dependencies=[];for(var e=r.depsList,n=[],a=0,o=e.length;o>a;a++)(function(e,a){n.push(s(t,e,r.name,r.address).then(function(t){if(r.dependencies[a]={key:e,value:t.name},"linked"!=t.status)for(var n=r.linkSets.concat([]),o=0,i=n.length;i>o;o++)m(n[o],t)}))})(e[a],a);return Promise.all(n)}).then(function(){r.status="loaded";for(var e=r.linkSets.concat([]),t=0,n=e.length;n>t;t++)h(e[t],r)}):void 0})["catch"](function(e){r.status="failed",r.exception=e;for(var t=r.linkSets.concat([]),n=0,a=t.length;a>n;n++)v(t[n],r,e)})}function c(e){return function(t,n){var r=e.loader,a=e.moduleName,i=e.step;if(r.modules[a])throw new TypeError('"'+a+'" already exists in the module table');for(var s,c=0,m=r.loads.length;m>c;c++)if(r.loads[c].name==a&&(s=r.loads[c],"translate"!=i||s.source||(s.address=e.moduleAddress,u(r,s,Promise.resolve(e.moduleSource))),s.linkSets.length&&s.linkSets[0].loads[0].name==s.name))return s.linkSets[0].done.then(function(){t(s)});var p=s||o(a);p.metadata=e.moduleMetadata;var h=f(r,p);r.loads.push(p),t(h.done),"locate"==i?d(r,p):"fetch"==i?l(r,p,Promise.resolve(e.moduleAddress)):(p.address=e.moduleAddress,u(r,p,Promise.resolve(e.moduleSource)))}}function f(e,t){var n={loader:e,loads:[],startingLoad:t,loadingCount:0};return n.done=new Promise(function(e,t){n.resolve=e,n.reject=t}),m(n,t),n}function m(e,t){if("failed"!=t.status){for(var n=0,r=e.loads.length;r>n;n++)if(e.loads[n]==t)return;e.loads.push(t),t.linkSets.push(e),"loaded"!=t.status&&e.loadingCount++;for(var a=e.loader,n=0,r=t.dependencies.length;r>n;n++)if(t.dependencies[n]){var o=t.dependencies[n].value;if(!a.modules[o])for(var i=0,s=a.loads.length;s>i;i++)if(a.loads[i].name==o){m(e,a.loads[i]);break}}}}function p(e){var t=!1;try{w(e,function(n,r){v(e,n,r),t=!0})}catch(n){v(e,null,n),t=!0}return t}function h(e,t){if(e.loadingCount--,!(e.loadingCount>0)){var n=e.startingLoad;if(e.loader.loaderObj.execute===!1){for(var r=[].concat(e.loads),a=0,o=r.length;o>a;a++){var t=r[a];t.module=t.isDeclarative?{name:t.name,module:P({}),evaluated:!0}:{module:P({})},t.status="linked",g(e.loader,t)}return e.resolve(n)}var i=p(e);i||e.resolve(n)}}function v(e,n,r){var a=e.loader;e:if(n)if(e.loads[0].name==n.name)r=t(r,"Error loading "+n.name);else{for(var o=0;o<e.loads.length;o++)for(var i=e.loads[o],s=0;s<i.dependencies.length;s++){var d=i.dependencies[s];if(d.value==n.name){r=t(r,"Error loading "+n.name+' as "'+d.key+'" from '+i.name);break e}}r=t(r,"Error loading "+n.name+" from "+e.loads[0].name)}else r=t(r,"Error linking "+e.loads[0].name);for(var l=e.loads.concat([]),o=0,u=l.length;u>o;o++){var n=l[o];a.loaderObj.failed=a.loaderObj.failed||[],-1==S.call(a.loaderObj.failed,n)&&a.loaderObj.failed.push(n);var c=S.call(n.linkSets,e);if(n.linkSets.splice(c,1),0==n.linkSets.length){var f=S.call(e.loader.loads,n);-1!=f&&e.loader.loads.splice(f,1)}}e.reject(r)}function g(e,t){if(e.loaderObj.trace){e.loaderObj.loads||(e.loaderObj.loads={});var n={};t.dependencies.forEach(function(e){n[e.key]=e.value}),e.loaderObj.loads[t.name]={name:t.name,deps:t.dependencies.map(function(e){return e.key}),depMap:n,address:t.address,metadata:t.metadata,source:t.source,kind:t.isDeclarative?"declarative":"dynamic"}}t.name&&(e.modules[t.name]=t.module);var r=S.call(e.loads,t);-1!=r&&e.loads.splice(r,1);for(var a=0,o=t.linkSets.length;o>a;a++)r=S.call(t.linkSets[a].loads,t),-1!=r&&t.linkSets[a].loads.splice(r,1);t.linkSets.splice(0,t.linkSets.length)}function y(e,t,n){try{var a=t.execute()}catch(o){return void n(t,o)}return a&&a instanceof r?a:void n(t,new TypeError("Execution must define a Module instance"))}function b(e,t,n){var r=e._loader.importPromises;return r[t]=n.then(function(e){return r[t]=void 0,e},function(e){throw r[t]=void 0,e})}function w(e,t){var n=e.loader;if(e.loads.length)for(var r=e.loads.concat([]),a=0;a<r.length;a++){var o=r[a],i=y(e,o,t);if(!i)return;o.module={name:o.name,module:i},o.status="linked",g(n,o)}}function E(e,t){return t.module.module}function _(){}function O(){throw new TypeError("ES6 transpilation is only provided in the dev module loader build.")}var j=0;a.prototype={constructor:a,define:function(e,t,n){if(this._loader.importPromises[e])throw new TypeError("Module is already loading.");return b(this,e,new Promise(c({step:"translate",loader:this._loader,moduleName:e,moduleMetadata:n&&n.metadata||{},moduleSource:t,moduleAddress:n&&n.address})))},"delete":function(e){var t=this._loader;return delete t.importPromises[e],delete t.moduleRecords[e],t.modules[e]?delete t.modules[e]:!1},get:function(e){return this._loader.modules[e]?(_(this._loader.modules[e],[],this),this._loader.modules[e].module):void 0},has:function(e){return!!this._loader.modules[e]},"import":function(e,t,n){"object"==typeof t&&(t=t.name);var r=this;return Promise.resolve(r.normalize(e,t)).then(function(e){var t=r._loader;return t.modules[e]?(_(t.modules[e],[],t._loader),t.modules[e].module):t.importPromises[e]||b(r,e,i(t,e,{}).then(function(n){return delete t.importPromises[e],E(t,n)}))})},load:function(e){var t=this._loader;return t.modules[e]?Promise.resolve():t.importPromises[e]||b(this,e,new Promise(c({step:"locate",loader:t,moduleName:e,moduleMetadata:{},moduleSource:void 0,moduleAddress:void 0})).then(function(){delete t.importPromises[e]}))},module:function(e,t){var n=o();n.address=t&&t.address;var r=f(this._loader,n),a=Promise.resolve(e),i=this._loader,s=r.done.then(function(){return E(i,n)});return u(i,n,a),s},newModule:function(e){if("object"!=typeof e)throw new TypeError("Expected object");var t=new r,n=[];if(Object.getOwnPropertyNames&&null!=e)n=Object.getOwnPropertyNames(e);else for(var a in e)n.push(a);for(var o=0;o<n.length;o++)(function(n){x(t,n,{configurable:!1,enumerable:!0,get:function(){return e[n]},set:function(){throw new Error("Module exports cannot be changed externally.")}})})(n[o]);return Object.freeze&&Object.freeze(t),t},set:function(e,t){if(!(t instanceof r))throw new TypeError("Loader.set("+e+", module) must be a module");this._loader.modules[e]={module:t}},normalize:function(e,t,n){return e},locate:function(e){return e.name},fetch:function(e){},translate:function(e){return e.source},instantiate:function(e){}};var P=a.prototype.newModule}();var k;s.prototype=a.prototype,o.prototype=new s;var R=/^([^\/]+:\/\/|\/)/;o.prototype.normalize=function(e,t,n){return e=e.match(R)||"."==e[0]?new P(e,t||E).href:new P(i(this.paths,e)||e,E).href},o.prototype.locate=function(e){return e.name},o.prototype.instantiate=function(t){var r=this;return Promise.resolve(r.normalize(r.transpiler)).then(function(a){return t.address===a?{deps:[],execute:function(){var a=e.System,o=e.Reflect.Loader;return n("(function(require,exports,module){"+t.source+"})();",t.address,e),e.System=a,e.Reflect.Loader=o,r.newModule({"default":e[r.transpiler],__useDefault:!0})}}:void 0})},l.prototype=o.prototype,d.prototype=new l,d.prototype.constructor=d,d.prototype.instantiate=function(){};var M,I=!0;try{Object.getOwnPropertyDescriptor({a:0},"a")}catch(j){I=!1}!function(){function t(){if(i&&"interactive"===i.script.readyState)return i.load;for(var e=0;e<l.length;e++)if("interactive"==l[e].script.readyState)return i=l[e],i.load}function n(e,t){return new Promise(function(e,n){t.metadata.integrity&&n(new Error("Subresource integrity checking is not supported in web workers.")),s=t;try{importScripts(t.address)}catch(r){s=null,n(r)}s=null,t.metadata.entry||n(new Error(t.address+" did not call System.register or AMD define")),e("")})}if("undefined"!=typeof document)var r=document.getElementsByTagName("head")[0];var a,o,i,s=null,d=r&&function(){var e=document.createElement("script"),t="undefined"!=typeof opera&&"[object Opera]"===opera.toString();return e.attachEvent&&!(e.attachEvent.toString&&e.attachEvent.toString().indexOf("[native code")<0)&&!t}(),l=[],c=0,f=[];u("pushRegister_",function(e){return function(n){return e.call(this,n)?!1:(s?this.reduceRegister_(s,n):d?this.reduceRegister_(t(),n):c?f.push(n):this.reduceRegister_(null,n),!0)}}),u("fetch",function(t){return function(s){var u=this;return"json"!=s.metadata.format&&s.metadata.scriptLoad&&(b||y)?y?n(u,s):new Promise(function(t,n){function m(e){if(!v.readyState||"loaded"==v.readyState||"complete"==v.readyState){if(c--,s.metadata.entry||f.length){if(!d){for(var r=0;r<f.length;r++)u.reduceRegister_(s,f[r]);f=[]}}else u.reduceRegister_(s);h(),s.metadata.entry||s.metadata.bundle||n(new Error(s.name+" did not call System.register or AMD define. If loading a global module configure the global name via the meta exports property for script injection support.")),t("")}}function p(e){h(),n(new Error("Unable to load script "+s.address))}function h(){if(e.System=a,e.require=o,v.detachEvent){v.detachEvent("onreadystatechange",m);for(var t=0;t<l.length;t++)l[t].script==v&&(i&&i.script==v&&(i=null),l.splice(t,1))}else v.removeEventListener("load",m,!1),v.removeEventListener("error",p,!1);r.removeChild(v)}var v=document.createElement("script");v.async=!0,s.metadata.crossOrigin&&(v.crossOrigin=s.metadata.crossOrigin),s.metadata.integrity&&v.setAttribute("integrity",s.metadata.integrity),d?(v.attachEvent("onreadystatechange",m),l.push({script:v,load:s})):(v.addEventListener("load",m,!1),v.addEventListener("error",p,!1)),c++,a=e.System,o=e.require,v.src=s.address,r.appendChild(v)}):t.call(this,s)}})}();var D=/^(\s*\/\*[^\*]*(\*(?!\/)[^\*]*)*\*\/|\s*\/\/[^\n]*|\s*"[^"]+"\s*;?|\s*'[^']+'\s*;?)*\s*/;!function(){function t(e,n,r){if(r[e.groupIndex]=r[e.groupIndex]||[],-1==S.call(r[e.groupIndex],e)){r[e.groupIndex].push(e);for(var a=0,o=e.normalizedDeps.length;o>a;a++){var i=e.normalizedDeps[a],s=n.defined[i];if(s&&!s.evaluated){var d=e.groupIndex+(s.declarative!=e.declarative);if(null===s.groupIndex||s.groupIndex<d){if(null!==s.groupIndex&&(r[s.groupIndex].splice(S.call(r[s.groupIndex],s),1),0==r[s.groupIndex].length))throw new Error("Mixed dependency cycle detected");s.groupIndex=d}t(s,n,r)}}}}function n(e,n){var r=n.defined[e];if(!r.module){r.groupIndex=0;var a=[];t(r,n,a);for(var o=!!r.declarative==a.length%2,s=a.length-1;s>=0;s--){for(var d=a[s],u=0;u<d.length;u++){var c=d[u];o?i(c,n):l(c,n)}o=!o}}}function a(){}function o(e,t){return t[e]||(t[e]={name:e,dependencies:[],exports:new a,importers:[]})}function i(t,n){if(!t.module){var r=n._loader.moduleRecords,a=t.module=o(t.name,r),s=t.module.exports,d=t.declare.call(e,function(e,t){if(a.locked=!0,"object"==typeof e)for(var n in e)s[n]=e[n];else s[e]=t;for(var r=0,o=a.importers.length;o>r;r++){var i=a.importers[r];if(!i.locked){var d=S.call(i.dependencies,a);i.setters[d](s)}}return a.locked=!1,t},{id:t.name});if(a.setters=d.setters,a.execute=d.execute,!a.setters||!a.execute)throw new TypeError("Invalid System.register form for "+t.name);for(var l=0,u=t.normalizedDeps.length;u>l;l++){var c,f=t.normalizedDeps[l],m=n.defined[f],p=r[f];p?c=p.exports:m&&!m.declarative?c=m.esModule:m?(i(m,n),p=m.module,c=p.exports):c=n.get(f),p&&p.importers?(p.importers.push(a),a.dependencies.push(p)):a.dependencies.push(null);for(var h=t.originalIndices[l],v=0,g=h.length;g>v;++v){var y=h[v];a.setters[y]&&a.setters[y](c)}}}}function s(e,t){var n,r=t.defined[e];if(r)r.declarative?p(e,[],t):r.evaluated||l(r,t),n=r.module.exports;else if(n=t.get(e),!n)throw new Error("Unable to load dependency "+e+".");return(!r||r.declarative)&&n&&n.__useDefault?n["default"]:n}function l(t,n){if(!t.module){var a={},o=t.module={exports:a,id:t.name};if(!t.executingRequire)for(var i=0,d=t.normalizedDeps.length;d>i;i++){var u=t.normalizedDeps[i],c=n.defined[u];c&&l(c,n)}t.evaluated=!0;var f=t.execute.call(e,function(e){for(var r=0,a=t.deps.length;a>r;r++)if(t.deps[r]==e)return s(t.normalizedDeps[r],n);var o=n.normalizeSync(e,t.name);if(-1!=S.call(t.normalizedDeps,o))return s(o,n);throw new Error("Module "+e+" not declared as a dependency of "+t.name)},a,o);f&&(o.exports=f),a=o.exports,a&&(a.__esModule||a instanceof r)?t.esModule=a:t.esmExports&&a!==e?t.esModule=m(a):t.esModule={"default":a}}}function p(t,n,r){var a=r.defined[t];if(a&&!a.evaluated&&a.declarative){n.push(t);for(var o=0,i=a.normalizedDeps.length;i>o;o++){var s=a.normalizedDeps[o];-1==S.call(n,s)&&(r.defined[s]?p(s,n,r):r.get(s))}a.evaluated||(a.evaluated=!0,a.module.execute.call(e))}}d.prototype.register=function(e,t,n){if("string"!=typeof e&&(n=t,t=e,e=null),"boolean"==typeof n)return this.registerDynamic.apply(this,arguments);var r=g();r.name=e&&(this.decanonicalize||this.normalize).call(this,e),r.declarative=!0,r.deps=t,r.declare=n,this.pushRegister_({amd:!1,entry:r})},d.prototype.registerDynamic=function(e,t,n,r){"string"!=typeof e&&(r=n,n=t,t=e,e=null);var a=g();a.name=e&&(this.decanonicalize||this.normalize).call(this,e),a.deps=t,a.execute=r,a.executingRequire=n,this.pushRegister_({amd:!1,entry:a})},u("reduceRegister_",function(){return function(e,t){if(t){var n=t.entry,r=e&&e.metadata;if(n.name&&(n.name in this.defined||(this.defined[n.name]=n),r&&(r.bundle=!0)),!n.name||e&&n.name==e.name){if(!r)throw new TypeError("Invalid System.register call. Anonymous System.register calls can only be made by modules loaded by SystemJS.import and not via script tags.");if(r.entry)throw"register"==r.format?new Error("Multiple anonymous System.register calls in module "+e.name+". If loading a bundle, ensure all the System.register calls are named."):new Error("Module "+e.name+" interpreted as "+r.format+" module format, but called System.register.");r.format||(r.format="register"),r.entry=n}}}}),c(function(e){return function(){e.call(this),this.defined={},this._loader.moduleRecords={}}}),x(a,"toString",{value:function(){return"Module"}}),u("delete",function(e){return function(t){return delete this._loader.moduleRecords[t],delete this.defined[t],e.call(this,t)}}),u("fetch",function(e){return function(t){return this.defined[t.name]?(t.metadata.format="defined",""):(t.metadata.deps=t.metadata.deps||[],e.call(this,t))}}),u("translate",function(e){return function(t){return t.metadata.deps=t.metadata.deps||[],Promise.resolve(e.call(this,t)).then(function(e){return("register"==t.metadata.format||!t.metadata.format&&v(t.source))&&(t.metadata.format="register"),e})}}),u("instantiate",function(e){return function(t){"detect"==t.metadata.format&&(t.metadata.format=void 0),e.call(this,t);var r,a=this;if(a.defined[t.name])r=a.defined[t.name],r.declarative||(r.deps=r.deps.concat(t.metadata.deps));else if(t.metadata.entry)r=t.metadata.entry,r.deps=r.deps.concat(t.metadata.deps);else if(!(a.builder&&t.metadata.bundle||"register"!=t.metadata.format&&"esm"!=t.metadata.format&&"es6"!=t.metadata.format)){if("undefined"!=typeof __exec&&__exec.call(a,t),!t.metadata.entry&&!t.metadata.bundle)throw new Error(t.name+" detected as "+t.metadata.format+" but didn't execute.");r=t.metadata.entry,r&&t.metadata.deps&&(r.deps=r.deps.concat(t.metadata.deps))}r||(r=g(),r.deps=t.metadata.deps,r.execute=function(){}),a.defined[t.name]=r;var o=f(r.deps);r.deps=o.names,r.originalIndices=o.indices,r.name=t.name,r.esmExports=t.metadata.esmExports!==!1;for(var i=[],s=0,d=r.deps.length;d>s;s++)i.push(Promise.resolve(a.normalize(r.deps[s],t.name)));return Promise.all(i).then(function(e){return r.normalizedDeps=e,{deps:r.deps,execute:function(){return n(t.name,a),p(t.name,[],a),a.defined[t.name]=void 0,a.newModule(r.declarative?r.module.exports:r.esModule)}}})}})}(),function(){c(function(e){return function(){e.call(this),this.bundles={},this._loader.loadedBundles={}}}),u("locate",function(e){return function(t){var n=this,r=!1;if(!(t.name in n.defined))for(var a in n.bundles){for(var o=0;o<n.bundles[a].length;o++){var i=n.bundles[a][o];if(i==t.name){r=!0;break}if(-1!=i.indexOf("*")){var s=i.split("*");if(2!=s.length){n.bundles[a].splice(o--,1);continue}if(t.name.substring(0,s[0].length)==s[0]&&t.name.substr(t.name.length-s[1].length,s[1].length)==s[1]&&-1==t.name.substr(s[0].length,t.name.length-s[1].length-s[0].length).indexOf("/")){r=!0;break}}}if(r)return n["import"](a).then(function(){return e.call(n,t)})}return e.call(n,t)}})}(),c(function(t){return function(){t.apply(this,arguments),e.define=this.amdDefine}}),u("fetch",function(e){return function(t){return t.metadata.scriptLoad=!0,e.call(this,t)}}),k=new d,e.SystemJS=k,k.version="0.19.26 Register Only","object"==typeof exports&&(module.exports=a),e.Reflect=e.Reflect||{},e.Reflect.Loader=e.Reflect.Loader||a,e.Reflect.global=e.Reflect.global||e,e.LoaderPolyfill=a,k||(k=new o,k.constructor=o),"object"==typeof exports&&(module.exports=k),e.System=k}("undefined"!=typeof self?self:global);
//# sourceMappingURL=system-register-only.js.map

(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Babel"] = factory();
	else
		root["Babel"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ((function(modules) {
	// Check all modules for deduplicated modules
	for(var i in modules) {
		if(Object.prototype.hasOwnProperty.call(modules, i)) {
			switch(typeof modules[i]) {
			case "function": break;
			case "object":
				// Module can be created from a template
				modules[i] = (function(_m) {
					var args = _m.slice(1), fn = modules[_m[0]];
					return function (a,b,c) {
						fn.apply(this, [a,b,c].concat(args));
					};
				}(modules[i]));
				break;
			default:
				// Module is a copy of another module
				modules[i] = modules[modules[i]];
				break;
			}
		}
	}
	return modules;
}([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';

	var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	exports.version = exports.availablePresets = exports.availablePlugins = undefined;
	exports.transform = transform;
	exports.transformFromAst = transformFromAst;

	var _babelCore = __webpack_require__(2670);

	var Babel = _interopRequireWildcard(_babelCore);

	function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

	/**
	 * Parses plugin names and presets from the specified options.
	 */
	function processOptions(options) {
	  // Parse preset names
	  var presets = (options.presets || []).map(function (presetName) {
	    if (typeof presetName === 'string') {
	      var preset = availablePresets[presetName];
	      if (!preset) {
	        throw new Error('Invalid preset specified in Babel options: "' + presetName + '"');
	      }
	      return preset;
	    } else {
	      // Could be an actual preset module
	      return presetName;
	    }
	  });

	  // Parse plugin names
	  var plugins = (options.plugins || []).map(function (pluginName) {
	    if (typeof pluginName === 'string') {
	      var plugin = availablePlugins[pluginName];
	      if (!plugin) {
	        throw new Error('Invalid plugin specified in Babel options: "' + pluginName + '"');
	      }
	      return plugin;
	    } else {
	      // Could be an actual plugin module
	      return pluginName;
	    }
	  });

	  return _extends({}, options, {
	    presets: presets,
	    plugins: plugins
	  });
	}

	function transform(code, options) {
	  return Babel.transform(code, processOptions(options));
	}

	function transformFromAst(ast, code, options) {
	  return Babel.transformFromAst(code, processOptions(options));
	}

	// All the plugins we should bundle
	var availablePlugins = exports.availablePlugins = {
	  'check-es2015-constants': __webpack_require__(992),
	  'external-helpers-2': __webpack_require__(2919),
	  'syntax-async-functions': __webpack_require__(713),
	  'syntax-async-generators': __webpack_require__(2920),
	  'syntax-class-constructor-call': __webpack_require__(1613),
	  'syntax-class-properties': __webpack_require__(1614),
	  'syntax-decorators': __webpack_require__(1615),
	  'syntax-do-expressions': __webpack_require__(1616),
	  'syntax-exponentiation-operator': __webpack_require__(1617),
	  'syntax-export-extensions': __webpack_require__(1618),
	  'syntax-flow': __webpack_require__(996),
	  'syntax-function-bind': __webpack_require__(1619),
	  'syntax-jsx': __webpack_require__(997),
	  'syntax-object-rest-spread': __webpack_require__(1620),
	  'syntax-trailing-function-commas': __webpack_require__(1621),
	  'transform-async-functions': __webpack_require__(2921),
	  'transform-async-to-generator': __webpack_require__(1622),
	  'transform-async-to-module-method': __webpack_require__(3157),
	  'transform-class-constructor-call': __webpack_require__(1725),
	  'transform-class-properties': __webpack_require__(1764),
	  'transform-decorators': __webpack_require__(1771),
	  'transform-do-expressions': __webpack_require__(1823),
	  'transform-es2015-arrow-functions': __webpack_require__(1105),
	  'transform-es2015-block-scoped-functions': __webpack_require__(1106),
	  'transform-es2015-block-scoping': __webpack_require__(1110),
	  'transform-es2015-classes': __webpack_require__(1132),
	  'transform-es2015-computed-properties': __webpack_require__(1162),
	  'transform-es2015-destructuring': __webpack_require__(1166),
	  'transform-es2015-for-of': __webpack_require__(1170),
	  'transform-es2015-function-name': __webpack_require__(1171),
	  'transform-es2015-instanceof': __webpack_require__(4689),
	  'transform-es2015-literals': __webpack_require__(1203),
	  'transform-es2015-modules-amd': __webpack_require__(1985),
	  'transform-es2015-modules-commonjs': __webpack_require__(1223),
	  'transform-es2015-modules-systemjs': __webpack_require__(5103),
	  'transform-es2015-modules-umd': __webpack_require__(5381),
	  'transform-es2015-object-super': __webpack_require__(1296),
	  'transform-es2015-parameters': __webpack_require__(1318),
	  'transform-es2015-shorthand-properties': __webpack_require__(1344),
	  'transform-es2015-spread': __webpack_require__(1363),
	  'transform-es2015-sticky-regex': __webpack_require__(1367),
	  'transform-es2015-template-literals': __webpack_require__(1386),
	  'transform-es2015-typeof-symbol': __webpack_require__(1390),
	  'transform-es2015-unicode-regex': __webpack_require__(1392),
	  'transform-es3-member-expression-literals': __webpack_require__(6549),
	  'transform-es3-property-literals': __webpack_require__(6550),
	  'transform-es5-property-mutators': __webpack_require__(6551),
	  'transform-eval': __webpack_require__(6778),
	  'transform-exponentiation-operator': __webpack_require__(2447),
	  'transform-export-extensions': __webpack_require__(2485),
	  'transform-flow-strip-types': __webpack_require__(2486),
	  'transform-function-bind': __webpack_require__(2493),
	  'transform-inline-environment-variables': __webpack_require__(6970),
	  'transform-jscript': __webpack_require__(6971),
	  'transform-member-expression-literals': __webpack_require__(6972),
	  'transform-merge-sibling-variables': __webpack_require__(6973),
	  'transform-minify-booleans': __webpack_require__(6974),
	  'transform-node-env-inline': __webpack_require__(6975),
	  'transform-object-assign': __webpack_require__(6976),
	  'transform-object-rest-spread': __webpack_require__(2494),
	  'transform-object-set-prototype-of-to-assign': __webpack_require__(7003),
	  'transform-property-literals': __webpack_require__(7004),
	  'transform-proto-to-assign': __webpack_require__(7005),
	  'transform-react-constant-elements': __webpack_require__(7036),
	  'transform-react-display-name': __webpack_require__(2507),
	  'transform-react-inline-elements': __webpack_require__(7038),
	  'transform-react-jsx': __webpack_require__(2550),
	  'transform-react-jsx-compat': __webpack_require__(7065),
	  'transform-react-jsx-source': __webpack_require__(7230),
	  'transform-regenerator': __webpack_require__(1505),
	  'transform-remove-console': __webpack_require__(7593),
	  'transform-remove-debugger': __webpack_require__(7594),
	  'transform-runtime': __webpack_require__(7596),
	  'transform-simplify-comparison-operators': __webpack_require__(7598),
	  'transform-strict-mode': __webpack_require__(1528),
	  'transform-undefined-to-void': __webpack_require__(7762),
	  'undeclared-variables-check': __webpack_require__(7763)
	};

	// All the presets we should bundle
	var availablePresets = exports.availablePresets = {
	  es2015: __webpack_require__(7766),
	  react: __webpack_require__(7767),
	  'stage-0': __webpack_require__(7768),
	  'stage-1': __webpack_require__(2666),
	  'stage-2': __webpack_require__(2667),
	  'stage-3': __webpack_require__(2668),

	  // ES2015 preset with es2015-modules-commonjs removed
	  // Plugin list copied from babel-preset-es2015/index.js
	  'es2015-no-commonjs': {
	    plugins: [__webpack_require__(1386), __webpack_require__(1203), __webpack_require__(1171), __webpack_require__(1105), __webpack_require__(1106), __webpack_require__(1132), __webpack_require__(1296), __webpack_require__(1344), __webpack_require__(1162), __webpack_require__(1170), __webpack_require__(1367), __webpack_require__(1392), __webpack_require__(992), __webpack_require__(1363), __webpack_require__(1318), __webpack_require__(1166), __webpack_require__(1110), __webpack_require__(1390), [__webpack_require__(1505), { async: false, asyncGenerators: false }]]
	  }
	};

	var version = exports.version = Babel.version;

/***/ },
/* 1 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj : {
	    "default": obj
	  };
	};

	exports.__esModule = true;

/***/ },
/* 2 */
1,
/* 3 */
1,
/* 4 */
1,
/* 5 */
/***/ function(module, exports) {

	// shim for using process in browser

	var process = module.exports = {};
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;

	function cleanUpNextTick() {
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}

	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = setTimeout(cleanUpNextTick);
	    draining = true;

	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    clearTimeout(timeout);
	}

	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        setTimeout(drainQueue, 0);
	    }
	};

	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};

	function noop() {}

	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;

	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};

	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 6 */
1,
/* 7 */
1,
/* 8 */
1,
/* 9 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  if (obj && obj.__esModule) {
	    return obj;
	  } else {
	    var newObj = {};

	    if (obj != null) {
	      for (var key in obj) {
	        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
	      }
	    }

	    newObj["default"] = obj;
	    return newObj;
	  }
	};

	exports.__esModule = true;

/***/ },
/* 10 */
1,
/* 11 */
1,
/* 12 */
[7816, 5226],
/* 13 */
1,
/* 14 */
9,
/* 15 */
[7816, 4537],
/* 16 */
[7816, 6743],
/* 17 */
9,
/* 18 */
[7816, 3292],
/* 19 */
9,
/* 20 */
1,
/* 21 */
9,
/* 22 */
[7816, 3645],
/* 23 */
9,
/* 24 */
9,
/* 25 */
[7908, 1033, 18, 1, 19, 3290, 3291, 3443, 3390, 1720, 3393, 3392, 3332, 300, 3336, 1046, 1699, 3337, 3327, 3335],
/* 26 */
[7908, 1182, 15, 2, 21, 4535, 4536, 4688, 4635, 1980, 4638, 4637, 4577, 319, 4581, 1195, 1959, 4582, 4572, 4580],
/* 27 */
[7816, 4863],
/* 28 */
[7908, 1424, 16, 3, 17, 6741, 6742, 6685, 6686, 1422, 2420, 6687, 6627, 357, 6631, 1414, 2410, 6632, 6622, 6630],
/* 29 */
[7908, 1077, 22, 6, 23, 3643, 3644, 3884, 3831, 1818, 3834, 3833, 3773, 307, 3777, 1097, 1797, 3778, 3768, 3776],
/* 30 */
[7908, 817, 27, 7, 24, 4861, 4862, 5102, 5049, 2071, 5052, 5051, 4991, 326, 4995, 1242, 2050, 4996, 4986, 4994],
/* 31 */
[7908, 697, 49, 8, 14, 2731, 2732, 2809, 2827, 710, 705, 2828, 2800, 293, 2804, 979, 1574, 2805, 2795, 2803],
/* 32 */
1,
/* 33 */
1,
/* 34 */
1,
/* 35 */
1,
/* 36 */
1,
/* 37 */
1,
/* 38 */
1,
/* 39 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

	exports.__esModule = true;

/***/ },
/* 40 */
39,
/* 41 */
1,
/* 42 */
39,
/* 43 */
1,
/* 44 */
1,
/* 45 */
9,
/* 46 */
9,
/* 47 */
1,
/* 48 */
1,
/* 49 */
[7816, 2733],
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	var formatRegExp = /%[sdj%]/g;
	exports.format = function(f) {
	  if (!isString(f)) {
	    var objects = [];
	    for (var i = 0; i < arguments.length; i++) {
	      objects.push(inspect(arguments[i]));
	    }
	    return objects.join(' ');
	  }

	  var i = 1;
	  var args = arguments;
	  var len = args.length;
	  var str = String(f).replace(formatRegExp, function(x) {
	    if (x === '%%') return '%';
	    if (i >= len) return x;
	    switch (x) {
	      case '%s': return String(args[i++]);
	      case '%d': return Number(args[i++]);
	      case '%j':
	        try {
	          return JSON.stringify(args[i++]);
	        } catch (_) {
	          return '[Circular]';
	        }
	      default:
	        return x;
	    }
	  });
	  for (var x = args[i]; i < len; x = args[++i]) {
	    if (isNull(x) || !isObject(x)) {
	      str += ' ' + x;
	    } else {
	      str += ' ' + inspect(x);
	    }
	  }
	  return str;
	};


	// Mark that a method should not be used.
	// Returns a modified function which warns once by default.
	// If --no-deprecation is set, then it is a no-op.
	exports.deprecate = function(fn, msg) {
	  // Allow for deprecating things in the process of starting up.
	  if (isUndefined(global.process)) {
	    return function() {
	      return exports.deprecate(fn, msg).apply(this, arguments);
	    };
	  }

	  if (process.noDeprecation === true) {
	    return fn;
	  }

	  var warned = false;
	  function deprecated() {
	    if (!warned) {
	      if (process.throwDeprecation) {
	        throw new Error(msg);
	      } else if (process.traceDeprecation) {
	        console.trace(msg);
	      } else {
	        console.error(msg);
	      }
	      warned = true;
	    }
	    return fn.apply(this, arguments);
	  }

	  return deprecated;
	};


	var debugs = {};
	var debugEnviron;
	exports.debuglog = function(set) {
	  if (isUndefined(debugEnviron))
	    debugEnviron = process.env.NODE_DEBUG || '';
	  set = set.toUpperCase();
	  if (!debugs[set]) {
	    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
	      var pid = process.pid;
	      debugs[set] = function() {
	        var msg = exports.format.apply(exports, arguments);
	        console.error('%s %d: %s', set, pid, msg);
	      };
	    } else {
	      debugs[set] = function() {};
	    }
	  }
	  return debugs[set];
	};


	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Object} opts Optional options object that alters the output.
	 */
	/* legacy: obj, showHidden, depth, colors*/
	function inspect(obj, opts) {
	  // default options
	  var ctx = {
	    seen: [],
	    stylize: stylizeNoColor
	  };
	  // legacy...
	  if (arguments.length >= 3) ctx.depth = arguments[2];
	  if (arguments.length >= 4) ctx.colors = arguments[3];
	  if (isBoolean(opts)) {
	    // legacy...
	    ctx.showHidden = opts;
	  } else if (opts) {
	    // got an "options" object
	    exports._extend(ctx, opts);
	  }
	  // set default options
	  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
	  if (isUndefined(ctx.depth)) ctx.depth = 2;
	  if (isUndefined(ctx.colors)) ctx.colors = false;
	  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
	  if (ctx.colors) ctx.stylize = stylizeWithColor;
	  return formatValue(ctx, obj, ctx.depth);
	}
	exports.inspect = inspect;


	// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
	inspect.colors = {
	  'bold' : [1, 22],
	  'italic' : [3, 23],
	  'underline' : [4, 24],
	  'inverse' : [7, 27],
	  'white' : [37, 39],
	  'grey' : [90, 39],
	  'black' : [30, 39],
	  'blue' : [34, 39],
	  'cyan' : [36, 39],
	  'green' : [32, 39],
	  'magenta' : [35, 39],
	  'red' : [31, 39],
	  'yellow' : [33, 39]
	};

	// Don't use 'blue' not visible on cmd.exe
	inspect.styles = {
	  'special': 'cyan',
	  'number': 'yellow',
	  'boolean': 'yellow',
	  'undefined': 'grey',
	  'null': 'bold',
	  'string': 'green',
	  'date': 'magenta',
	  // "name": intentionally not styling
	  'regexp': 'red'
	};


	function stylizeWithColor(str, styleType) {
	  var style = inspect.styles[styleType];

	  if (style) {
	    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
	           '\u001b[' + inspect.colors[style][1] + 'm';
	  } else {
	    return str;
	  }
	}


	function stylizeNoColor(str, styleType) {
	  return str;
	}


	function arrayToHash(array) {
	  var hash = {};

	  array.forEach(function(val, idx) {
	    hash[val] = true;
	  });

	  return hash;
	}


	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (ctx.customInspect &&
	      value &&
	      isFunction(value.inspect) &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes, ctx);
	    if (!isString(ret)) {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }

	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }

	  // Look up the keys of the object.
	  var keys = Object.keys(value);
	  var visibleKeys = arrayToHash(keys);

	  if (ctx.showHidden) {
	    keys = Object.getOwnPropertyNames(value);
	  }

	  // IE doesn't make error fields non-enumerable
	  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
	  if (isError(value)
	      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
	    return formatError(value);
	  }

	  // Some type of object without properties can be shortcutted.
	  if (keys.length === 0) {
	    if (isFunction(value)) {
	      var name = value.name ? ': ' + value.name : '';
	      return ctx.stylize('[Function' + name + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }

	  var base = '', array = false, braces = ['{', '}'];

	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }

	  // Make functions say that they are functions
	  if (isFunction(value)) {
	    var n = value.name ? ': ' + value.name : '';
	    base = ' [Function' + n + ']';
	  }

	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }

	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }

	  // Make error with message first say the error
	  if (isError(value)) {
	    base = ' ' + formatError(value);
	  }

	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }

	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }

	  ctx.seen.push(value);

	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }

	  ctx.seen.pop();

	  return reduceToSingleString(output, base, braces);
	}


	function formatPrimitive(ctx, value) {
	  if (isUndefined(value))
	    return ctx.stylize('undefined', 'undefined');
	  if (isString(value)) {
	    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                             .replace(/'/g, "\\'")
	                                             .replace(/\\"/g, '"') + '\'';
	    return ctx.stylize(simple, 'string');
	  }
	  if (isNumber(value))
	    return ctx.stylize('' + value, 'number');
	  if (isBoolean(value))
	    return ctx.stylize('' + value, 'boolean');
	  // For some reason typeof null is "object", so special case here.
	  if (isNull(value))
	    return ctx.stylize('null', 'null');
	}


	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}


	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (hasOwnProperty(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}


	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str, desc;
	  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
	  if (desc.get) {
	    if (desc.set) {
	      str = ctx.stylize('[Getter/Setter]', 'special');
	    } else {
	      str = ctx.stylize('[Getter]', 'special');
	    }
	  } else {
	    if (desc.set) {
	      str = ctx.stylize('[Setter]', 'special');
	    }
	  }
	  if (!hasOwnProperty(visibleKeys, key)) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(desc.value) < 0) {
	      if (isNull(recurseTimes)) {
	        str = formatValue(ctx, desc.value, null);
	      } else {
	        str = formatValue(ctx, desc.value, recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (isUndefined(name)) {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }

	  return name + ': ' + str;
	}


	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
	  }, 0);

	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }

	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}


	// NOTE: These type checking functions intentionally don't use `instanceof`
	// because it is fragile and can be easily faked with `Object.create()`.
	function isArray(ar) {
	  return Array.isArray(ar);
	}
	exports.isArray = isArray;

	function isBoolean(arg) {
	  return typeof arg === 'boolean';
	}
	exports.isBoolean = isBoolean;

	function isNull(arg) {
	  return arg === null;
	}
	exports.isNull = isNull;

	function isNullOrUndefined(arg) {
	  return arg == null;
	}
	exports.isNullOrUndefined = isNullOrUndefined;

	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	exports.isNumber = isNumber;

	function isString(arg) {
	  return typeof arg === 'string';
	}
	exports.isString = isString;

	function isSymbol(arg) {
	  return typeof arg === 'symbol';
	}
	exports.isSymbol = isSymbol;

	function isUndefined(arg) {
	  return arg === void 0;
	}
	exports.isUndefined = isUndefined;

	function isRegExp(re) {
	  return isObject(re) && objectToString(re) === '[object RegExp]';
	}
	exports.isRegExp = isRegExp;

	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	exports.isObject = isObject;

	function isDate(d) {
	  return isObject(d) && objectToString(d) === '[object Date]';
	}
	exports.isDate = isDate;

	function isError(e) {
	  return isObject(e) &&
	      (objectToString(e) === '[object Error]' || e instanceof Error);
	}
	exports.isError = isError;

	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	exports.isFunction = isFunction;

	function isPrimitive(arg) {
	  return arg === null ||
	         typeof arg === 'boolean' ||
	         typeof arg === 'number' ||
	         typeof arg === 'string' ||
	         typeof arg === 'symbol' ||  // ES6 symbol
	         typeof arg === 'undefined';
	}
	exports.isPrimitive = isPrimitive;

	exports.isBuffer = __webpack_require__(7805);

	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


	function pad(n) {
	  return n < 10 ? '0' + n.toString(10) : n.toString(10);
	}


	var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
	              'Oct', 'Nov', 'Dec'];

	// 26 Feb 16:19:34
	function timestamp() {
	  var d = new Date();
	  var time = [pad(d.getHours()),
	              pad(d.getMinutes()),
	              pad(d.getSeconds())].join(':');
	  return [d.getDate(), months[d.getMonth()], time].join(' ');
	}


	// log is just a thin wrapper to console.log that prepends a timestamp
	exports.log = function() {
	  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
	};


	/**
	 * Inherit the prototype methods from one constructor into another.
	 *
	 * The Function.prototype.inherits from lang.js rewritten as a standalone
	 * function (not on Function.prototype). NOTE: If this file is to be loaded
	 * during bootstrapping this function needs to be rewritten using some native
	 * functions as prototype setup using normal JavaScript does not work as
	 * expected during bootstrapping (see mirror.js in r114903).
	 *
	 * @param {function} ctor Constructor function which needs to inherit the
	 *     prototype.
	 * @param {function} superCtor Constructor function to inherit prototype from.
	 */
	exports.inherits = __webpack_require__(7804);

	exports._extend = function(origin, add) {
	  // Don't do anything if add isn't an object
	  if (!add || !isObject(add)) return origin;

	  var keys = Object.keys(add);
	  var i = keys.length;
	  while (i--) {
	    origin[keys[i]] = add[keys[i]];
	  }
	  return origin;
	};

	function hasOwnProperty(obj, prop) {
	  return Object.prototype.hasOwnProperty.call(obj, prop);
	}

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(5)))

/***/ },
/* 51 */
[7908, 1874, 59, 10, 45, 4125, 4126, 4349, 4299, 4339, 4302, 4301, 4290, 315, 4294, 1157, 1904, 4295, 4285, 4293],
/* 52 */
[7816, 5756],
/* 53 */
9,
/* 54 */
[7908, 2223, 52, 13, 46, 5754, 5755, 5978, 5928, 5968, 5931, 5930, 5919, 344, 5923, 1339, 2255, 5924, 5914, 5922],
/* 55 */
/***/ function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 56 */
9,
/* 57 */
[7908, 1506, 104, 32, 53, 7408, 7410, 7579, 7529, 7569, 7532, 7531, 7520, 370, 7524, 1523, 2612, 7525, 7515, 7523],
/* 58 */
9,
/* 59 */
[7816, 4127],
/* 60 */
39,
/* 61 */
[7908, 1657, 62, 11, 56, 3120, 3121, 3112, 3062, 3102, 3065, 3064, 3053, 296, 3057, 1008, 1642, 3058, 3048, 3056],
/* 62 */
[7816, 3122],
/* 63 */
39,
/* 64 */
[7816, 3921],
/* 65 */
39,
/* 66 */
39,
/* 67 */
9,
/* 68 */
9,
/* 69 */
9,
/* 70 */
9,
/* 71 */
9,
/* 72 */
[7908, 1830, 64, 20, 58, 3919, 3920, 4037, 4038, 1864, 4040, 4039, 4028, 311, 4032, 1124, 1850, 4033, 4023, 4031],
/* 73 */
9,
/* 74 */
9,
/* 75 */
9,
/* 76 */
9,
/* 77 */
9,
/* 78 */
9,
/* 79 */
[7908, 2212, 88, 36, 67, 5703, 5705, 5695, 5645, 5685, 5648, 5647, 5636, 340, 5640, 1302, 2197, 5641, 5631, 5639],
/* 80 */
[7908, 2313, 100, 41, 68, 6180, 6182, 6334, 6281, 2345, 6284, 6283, 6223, 351, 6227, 1378, 2324, 6228, 6218, 6226],
/* 81 */
[7908, 2474, 102, 38, 70, 6906, 6908, 6897, 6844, 2469, 6847, 6846, 6786, 361, 6790, 1437, 2448, 6791, 6781, 6789],
/* 82 */
[7816, 3454],
/* 83 */
[7908, 1726, 82, 33, 71, 3451, 3453, 3544, 3557, 1759, 3559, 3558, 3535, 303, 3539, 1067, 1743, 3540, 3530, 3538],
/* 84 */
[7908, 1986, 97, 34, 73, 4697, 4699, 4790, 4803, 2020, 4805, 4804, 4781, 322, 4785, 1216, 2004, 4786, 4776, 4784],
/* 85 */
[7908, 837, 12, 4, 9, 2105, 2107, 5221, 5168, 2097, 5171, 5170, 5110, 329, 5114, 1250, 2076, 5115, 5105, 5113],
/* 86 */
[7908, 837, 12, 4, 9, 2105, 2107, 5316, 5329, 2139, 5331, 5330, 5307, 332, 5311, 1270, 2123, 5312, 5302, 5310],
/* 87 */
[7908, 2144, 98, 35, 74, 5389, 5391, 5482, 5495, 2178, 5497, 5496, 5473, 336, 5477, 1289, 2162, 5478, 5468, 5476],
/* 88 */
[7816, 5706],
/* 89 */
[7908, 2270, 99, 47, 75, 5987, 5989, 6141, 6088, 2302, 6091, 6090, 6030, 348, 6034, 1355, 2281, 6035, 6025, 6033],
/* 90 */
[7908, 2390, 101, 37, 69, 6507, 6509, 6444, 6445, 2385, 6449, 6448, 6386, 354, 6390, 1393, 2365, 6391, 6381, 6389],
/* 91 */
[7908, 2539, 103, 43, 76, 7192, 7194, 7128, 7131, 2534, 7134, 7133, 7072, 364, 7076, 1467, 2514, 7077, 7067, 7075],
/* 92 */
[7908, 2576, 93, 44, 77, 7358, 7360, 7294, 7297, 2571, 7300, 7299, 7238, 367, 7242, 1486, 2551, 7243, 7233, 7241],
/* 93 */
[7816, 7361],
/* 94 */
[7816, 7610],
/* 95 */
[7908, 2629, 94, 48, 78, 7607, 7609, 7761, 7708, 2661, 7711, 7710, 7650, 374, 7654, 1539, 2640, 7655, 7645, 7653],
/* 96 */
39,
/* 97 */
[7816, 4700],
/* 98 */
[7816, 5392],
/* 99 */
[7816, 5990],
/* 100 */
[7816, 6183],
/* 101 */
[7816, 6510],
/* 102 */
[7816, 6909],
/* 103 */
[7816, 7195],
/* 104 */
[7816, 7411],
/* 105 */
39,
/* 106 */
39,
/* 107 */
39,
/* 108 */
/***/ function(module, exports) {

	var $Object = Object;
	module.exports = {
	  create:     $Object.create,
	  getProto:   $Object.getPrototypeOf,
	  isEnum:     {}.propertyIsEnumerable,
	  getDesc:    $Object.getOwnPropertyDescriptor,
	  setDesc:    $Object.defineProperty,
	  setDescs:   $Object.defineProperties,
	  getKeys:    $Object.keys,
	  getNames:   $Object.getOwnPropertyNames,
	  getSymbols: $Object.getOwnPropertySymbols,
	  each:       [].forEach
	};

/***/ },
/* 109 */
39,
/* 110 */
[7977, 708, 294, 172],
/* 111 */
39,
/* 112 */
39,
/* 113 */
39,
/* 114 */
39,
/* 115 */
39,
/* 116 */
39,
/* 117 */
39,
/* 118 */
39,
/* 119 */
39,
/* 120 */
39,
/* 121 */
39,
/* 122 */
108,
/* 123 */
108,
/* 124 */
108,
/* 125 */
108,
/* 126 */
108,
/* 127 */
108,
/* 128 */
108,
/* 129 */
108,
/* 130 */
108,
/* 131 */
108,
/* 132 */
108,
/* 133 */
108,
/* 134 */
108,
/* 135 */
108,
/* 136 */
108,
/* 137 */
108,
/* 138 */
108,
/* 139 */
108,
/* 140 */
108,
/* 141 */
108,
/* 142 */
108,
/* 143 */
108,
/* 144 */
/***/ function(module, exports) {

	var core = module.exports = {version: '1.2.6'};
	if(typeof __e == 'number')__e = core; // eslint-disable-line no-undef

/***/ },
/* 145 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
	 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(1);
	 * // => false
	 */
	function isObject(value) {
	  // Avoid a V8 JIT bug in Chrome 19-20.
	  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
	  var type = typeof value;
	  return !!value && (type == 'object' || type == 'function');
	}

	module.exports = isObject;


/***/ },
/* 146 */
145,
/* 147 */
145,
/* 148 */
145,
/* 149 */
145,
/* 150 */
145,
/* 151 */
145,
/* 152 */
145,
/* 153 */
145,
/* 154 */
145,
/* 155 */
145,
/* 156 */
145,
/* 157 */
145,
/* 158 */
145,
/* 159 */
145,
/* 160 */
145,
/* 161 */
145,
/* 162 */
145,
/* 163 */
145,
/* 164 */
145,
/* 165 */
145,
/* 166 */
145,
/* 167 */
145,
/* 168 */
145,
/* 169 */
[7876, 49, 2728, 8, 14, 968, 2772, 2789, 290, 706, 31, 378, 978, 1570, 378, 978, 1570],
/* 170 */
[7915, 377, 60, 49, 8, 548, 2810, 1576],
/* 171 */
[7926, 60],
/* 172 */
/***/ function(module, exports) {

	/**
	 * Checks if `value` is object-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 */
	function isObjectLike(value) {
	  return !!value && typeof value == 'object';
	}

	module.exports = isObjectLike;


/***/ },
/* 173 */
[7915, 1659, 106, 62, 11, 553, 2926, 1624],
/* 174 */
[7926, 106],
/* 175 */
[7915, 1659, 106, 62, 11, 556, 3000, 1633],
/* 176 */
[7926, 106],
/* 177 */
[7915, 1035, 39, 18, 1, 560, 3162, 1671],
/* 178 */
[7926, 39],
/* 179 */
[7915, 1035, 39, 18, 1, 564, 3236, 1680],
/* 180 */
[7926, 39],
/* 181 */
[7818, 3294],
/* 182 */
[7915, 1035, 39, 18, 1, 569, 3369, 1704],
/* 183 */
[7926, 39],
/* 184 */
[7915, 3452, 111, 82, 33, 573, 3545, 1746],
/* 185 */
[7926, 111],
/* 186 */
[7977, 744, 304, 305],
/* 187 */
[7915, 1773, 63, 22, 6, 579, 3721, 1790],
/* 188 */
[7926, 63],
/* 189 */
[7915, 1773, 63, 22, 6, 581, 3810, 1802],
/* 190 */
[7926, 63],
/* 191 */
[7915, 1831, 105, 64, 20, 585, 3958, 1842],
/* 192 */
[7926, 105],
/* 193 */
[7915, 1831, 105, 64, 20, 586, 4004, 1848],
/* 194 */
[7926, 105],
/* 195 */
[7977, 771, 312, 313],
/* 196 */
[7915, 1137, 96, 59, 10, 590, 4163, 1886],
/* 197 */
[7926, 96],
/* 198 */
[7915, 1137, 96, 59, 10, 593, 4237, 1895],
/* 199 */
[7926, 96],
/* 200 */
[7915, 1184, 40, 15, 2, 597, 4407, 1931],
/* 201 */
[7926, 40],
/* 202 */
[7915, 1184, 40, 15, 2, 601, 4481, 1940],
/* 203 */
[7926, 40],
/* 204 */
[7818, 4539],
/* 205 */
[7915, 1184, 40, 15, 2, 606, 4614, 1964],
/* 206 */
[7926, 40],
/* 207 */
[7915, 4698, 112, 97, 34, 609, 4791, 2007],
/* 208 */
[7926, 112],
/* 209 */
[7977, 813, 323, 324],
/* 210 */
[7915, 2026, 65, 27, 7, 614, 4939, 2043],
/* 211 */
[7926, 65],
/* 212 */
[7915, 2026, 65, 27, 7, 616, 5028, 2055],
/* 213 */
[7926, 65],
/* 214 */
[7915, 2106, 66, 12, 4, 618, 5147, 2081],
/* 215 */
[7926, 66],
/* 216 */
[7818, 5228],
/* 217 */
[7915, 2106, 66, 12, 4, 621, 5317, 2126],
/* 218 */
[7926, 66],
/* 219 */
[7977, 844, 333, 334],
/* 220 */
[7915, 5390, 113, 98, 35, 626, 5483, 2165],
/* 221 */
[7926, 113],
/* 222 */
[7977, 852, 337, 338],
/* 223 */
[7915, 5704, 109, 88, 36, 629, 5583, 2188],
/* 224 */
[7926, 109],
/* 225 */
[7915, 2225, 107, 52, 13, 636, 5792, 2237],
/* 226 */
[7926, 107],
/* 227 */
[7915, 2225, 107, 52, 13, 639, 5866, 2246],
/* 228 */
[7926, 107],
/* 229 */
[7915, 5988, 114, 99, 47, 645, 6067, 2286],
/* 230 */
[7926, 114],
/* 231 */
[7915, 6181, 115, 100, 41, 651, 6260, 2329],
/* 232 */
[7926, 115],
/* 233 */
[7915, 6508, 116, 101, 37, 654, 6423, 2370],
/* 234 */
[7926, 116],
/* 235 */
[7915, 1426, 42, 16, 3, 658, 6557, 2402],
/* 236 */
[7926, 42],
/* 237 */
[7915, 1426, 42, 16, 3, 660, 6603, 2408],
/* 238 */
[7926, 42],
/* 239 */
[7915, 1426, 42, 16, 3, 662, 6664, 2415],
/* 240 */
[7926, 42],
/* 241 */
[7977, 909, 358, 359],
/* 242 */
[7818, 6745],
/* 243 */
[7915, 6907, 117, 102, 38, 667, 6823, 2453],
/* 244 */
[7926, 117],
/* 245 */
[7915, 7193, 118, 103, 43, 676, 7109, 2519],
/* 246 */
[7926, 118],
/* 247 */
[7915, 7359, 119, 93, 44, 681, 7275, 2556],
/* 248 */
[7926, 119],
/* 249 */
[7915, 7409, 120, 104, 32, 690, 7581, 2627],
/* 250 */
[7926, 120],
/* 251 */
[7915, 7608, 121, 94, 48, 695, 7687, 2645],
/* 252 */
[7926, 121],
/* 253 */
144,
/* 254 */
144,
/* 255 */
[7977, 738, 384, 301],
/* 256 */
144,
/* 257 */
[7818, 3647],
/* 258 */
144,
/* 259 */
[7977, 761, 389, 308],
/* 260 */
144,
/* 261 */
144,
/* 262 */
144,
/* 263 */
[7977, 807, 397, 320],
/* 264 */
144,
/* 265 */
[7818, 4865],
/* 266 */
144,
/* 267 */
[7977, 830, 402, 327],
/* 268 */
[7977, 835, 404, 330],
/* 269 */
144,
/* 270 */
144,
/* 271 */
144,
/* 272 */
144,
/* 273 */
144,
/* 274 */
[7977, 882, 412, 349],
/* 275 */
144,
/* 276 */
[7977, 891, 414, 352],
/* 277 */
[7977, 899, 416, 355],
/* 278 */
144,
/* 279 */
144,
/* 280 */
[7977, 919, 420, 362],
/* 281 */
144,
/* 282 */
[7977, 934, 422, 365],
/* 283 */
144,
/* 284 */
[7977, 941, 424, 368],
/* 285 */
144,
/* 286 */
144,
/* 287 */
144,
/* 288 */
[7977, 959, 427, 375],
/* 289 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.

	// resolves . and .. elements in a path array with directory names there
	// must be no slashes, empty elements, or device names (c:\) in the array
	// (so also no leading and trailing slashes - it does not distinguish
	// relative and absolute paths)
	function normalizeArray(parts, allowAboveRoot) {
	  // if the path tries to go above the root, `up` ends up > 0
	  var up = 0;
	  for (var i = parts.length - 1; i >= 0; i--) {
	    var last = parts[i];
	    if (last === '.') {
	      parts.splice(i, 1);
	    } else if (last === '..') {
	      parts.splice(i, 1);
	      up++;
	    } else if (up) {
	      parts.splice(i, 1);
	      up--;
	    }
	  }

	  // if the path is allowed to go above the root, restore leading ..s
	  if (allowAboveRoot) {
	    for (; up--; up) {
	      parts.unshift('..');
	    }
	  }

	  return parts;
	}

	// Split a filename into [root, dir, basename, ext], unix version
	// 'root' is just a slash, or nothing.
	var splitPathRe =
	    /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
	var splitPath = function(filename) {
	  return splitPathRe.exec(filename).slice(1);
	};

	// path.resolve([from ...], to)
	// posix version
	exports.resolve = function() {
	  var resolvedPath = '',
	      resolvedAbsolute = false;

	  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
	    var path = (i >= 0) ? arguments[i] : process.cwd();

	    // Skip empty and invalid entries
	    if (typeof path !== 'string') {
	      throw new TypeError('Arguments to path.resolve must be strings');
	    } else if (!path) {
	      continue;
	    }

	    resolvedPath = path + '/' + resolvedPath;
	    resolvedAbsolute = path.charAt(0) === '/';
	  }

	  // At this point the path should be resolved to a full absolute path, but
	  // handle relative paths to be safe (might happen when process.cwd() fails)

	  // Normalize the path
	  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
	    return !!p;
	  }), !resolvedAbsolute).join('/');

	  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
	};

	// path.normalize(path)
	// posix version
	exports.normalize = function(path) {
	  var isAbsolute = exports.isAbsolute(path),
	      trailingSlash = substr(path, -1) === '/';

	  // Normalize the path
	  path = normalizeArray(filter(path.split('/'), function(p) {
	    return !!p;
	  }), !isAbsolute).join('/');

	  if (!path && !isAbsolute) {
	    path = '.';
	  }
	  if (path && trailingSlash) {
	    path += '/';
	  }

	  return (isAbsolute ? '/' : '') + path;
	};

	// posix version
	exports.isAbsolute = function(path) {
	  return path.charAt(0) === '/';
	};

	// posix version
	exports.join = function() {
	  var paths = Array.prototype.slice.call(arguments, 0);
	  return exports.normalize(filter(paths, function(p, index) {
	    if (typeof p !== 'string') {
	      throw new TypeError('Arguments to path.join must be strings');
	    }
	    return p;
	  }).join('/'));
	};


	// path.relative(from, to)
	// posix version
	exports.relative = function(from, to) {
	  from = exports.resolve(from).substr(1);
	  to = exports.resolve(to).substr(1);

	  function trim(arr) {
	    var start = 0;
	    for (; start < arr.length; start++) {
	      if (arr[start] !== '') break;
	    }

	    var end = arr.length - 1;
	    for (; end >= 0; end--) {
	      if (arr[end] !== '') break;
	    }

	    if (start > end) return [];
	    return arr.slice(start, end - start + 1);
	  }

	  var fromParts = trim(from.split('/'));
	  var toParts = trim(to.split('/'));

	  var length = Math.min(fromParts.length, toParts.length);
	  var samePartsLength = length;
	  for (var i = 0; i < length; i++) {
	    if (fromParts[i] !== toParts[i]) {
	      samePartsLength = i;
	      break;
	    }
	  }

	  var outputParts = [];
	  for (var i = samePartsLength; i < fromParts.length; i++) {
	    outputParts.push('..');
	  }

	  outputParts = outputParts.concat(toParts.slice(samePartsLength));

	  return outputParts.join('/');
	};

	exports.sep = '/';
	exports.delimiter = ':';

	exports.dirname = function(path) {
	  var result = splitPath(path),
	      root = result[0],
	      dir = result[1];

	  if (!root && !dir) {
	    // No dirname whatsoever
	    return '.';
	  }

	  if (dir) {
	    // It has a dirname, strip trailing slash
	    dir = dir.substr(0, dir.length - 1);
	  }

	  return root + dir;
	};


	exports.basename = function(path, ext) {
	  var f = splitPath(path)[2];
	  // TODO: make this comparison case-insensitive on windows?
	  if (ext && f.substr(-1 * ext.length) === ext) {
	    f = f.substr(0, f.length - ext.length);
	  }
	  return f;
	};


	exports.extname = function(path) {
	  return splitPath(path)[3];
	};

	function filter (xs, f) {
	    if (xs.filter) return xs.filter(f);
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        if (f(xs[i], i, xs)) res.push(xs[i]);
	    }
	    return res;
	}

	// String.prototype.substr - negative index don't work in IE8
	var substr = 'ab'.substr(-1) === 'b'
	    ? function (str, start, len) { return str.substr(start, len) }
	    : function (str, start, len) {
	        if (start < 0) start = str.length + start;
	        return str.substr(start, len);
	    }
	;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 290 */
[7815, 14],
/* 291 */
[7845, 544, 144, 698],
/* 292 */
[7861, 1562, 975, 544],
/* 293 */
[7903, 49, 14, 31],
/* 294 */
/***/ function(module, exports) {

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;


/***/ },
/* 295 */
[7972, 145],
/* 296 */
[7903, 62, 56, 61],
/* 297 */
172,
/* 298 */
[7972, 146],
/* 299 */
[7977, 721, 437, 297],
/* 300 */
[7903, 18, 19, 25],
/* 301 */
172,
/* 302 */
[7972, 147],
/* 303 */
[7903, 82, 71, 83],
/* 304 */
294,
/* 305 */
172,
/* 306 */
[7972, 148],
/* 307 */
[7903, 22, 23, 29],
/* 308 */
172,
/* 309 */
[7972, 149],
/* 310 */
[7818, 3923],
/* 311 */
[7903, 64, 58, 72],
/* 312 */
294,
/* 313 */
172,
/* 314 */
[7972, 150],
/* 315 */
[7903, 59, 45, 51],
/* 316 */
172,
/* 317 */
[7972, 151],
/* 318 */
[7977, 788, 467, 316],
/* 319 */
[7903, 15, 21, 26],
/* 320 */
172,
/* 321 */
[7972, 152],
/* 322 */
[7903, 97, 73, 84],
/* 323 */
294,
/* 324 */
172,
/* 325 */
[7972, 153],
/* 326 */
[7903, 27, 24, 30],
/* 327 */
172,
/* 328 */
[7972, 154],
/* 329 */
[7903, 12, 9, 85],
/* 330 */
172,
/* 331 */
[7972, 155],
/* 332 */
[7903, 12, 9, 86],
/* 333 */
294,
/* 334 */
172,
/* 335 */
[7972, 156],
/* 336 */
[7903, 98, 74, 87],
/* 337 */
294,
/* 338 */
172,
/* 339 */
[7972, 157],
/* 340 */
[7903, 88, 67, 79],
/* 341 */
172,
/* 342 */
[7972, 158],
/* 343 */
[7977, 862, 498, 341],
/* 344 */
[7903, 52, 46, 54],
/* 345 */
172,
/* 346 */
[7972, 159],
/* 347 */
[7977, 875, 505, 345],
/* 348 */
[7903, 99, 75, 89],
/* 349 */
172,
/* 350 */
[7972, 160],
/* 351 */
[7903, 100, 68, 80],
/* 352 */
172,
/* 353 */
[7972, 161],
/* 354 */
[7903, 101, 69, 90],
/* 355 */
172,
/* 356 */
[7972, 162],
/* 357 */
[7903, 16, 17, 28],
/* 358 */
294,
/* 359 */
172,
/* 360 */
[7972, 163],
/* 361 */
[7903, 102, 70, 81],
/* 362 */
172,
/* 363 */
[7972, 164],
/* 364 */
[7903, 103, 76, 91],
/* 365 */
172,
/* 366 */
[7972, 165],
/* 367 */
[7903, 93, 77, 92],
/* 368 */
172,
/* 369 */
[7972, 166],
/* 370 */
[7903, 104, 53, 57],
/* 371 */
172,
/* 372 */
[7972, 167],
/* 373 */
[7977, 950, 533, 371],
/* 374 */
[7903, 94, 78, 95],
/* 375 */
172,
/* 376 */
[7972, 168],
/* 377 */
[7828, 540, 2729],
/* 378 */
[7882, 60, 49, 14, 8, 1572, 2823, 1571, 2791, 169, 990, 978, 31, 2773, 2779, 2787, 2777, 2776, 2782, 2775, 2786, 2785, 2778, 2774],
/* 379 */
[7988, 708, 430, 145, 2869],
/* 380 */
[7882, 106, 62, 56, 11, 1630, 3012, 1629, 3016, 434, 1640, 1002, 61, 2967, 2973, 2981, 2971, 2970, 2976, 2969, 2980, 2979, 2972, 2968],
/* 381 */
[7818, 3124],
/* 382 */
[7882, 39, 18, 19, 1, 1677, 3248, 1676, 3252, 563, 1687, 1027, 25, 3203, 3209, 3217, 3207, 3206, 3212, 3205, 3216, 3215, 3208, 3204],
/* 383 */
[7882, 39, 18, 19, 1, 1702, 3381, 1701, 3385, 568, 1722, 1047, 25, 3339, 3345, 3353, 3343, 3342, 3348, 3341, 3352, 3351, 3344, 3340],
/* 384 */
294,
/* 385 */
[7882, 111, 82, 71, 33, 1739, 3523, 1738, 3527, 447, 1761, 1065, 83, 3491, 3497, 3505, 3495, 3494, 3500, 3493, 3504, 3503, 3496, 3492],
/* 386 */
[7882, 63, 22, 23, 6, 1785, 3714, 1784, 3718, 578, 1796, 1089, 29, 3682, 3688, 3696, 3686, 3685, 3691, 3684, 3695, 3694, 3687, 3683],
/* 387 */
[7977, 1795, 452, 756],
/* 388 */
[7882, 63, 22, 23, 6, 1800, 3822, 1799, 3826, 580, 1820, 1098, 29, 3780, 3786, 3794, 3784, 3783, 3789, 3782, 3793, 3792, 3785, 3781],
/* 389 */
294,
/* 390 */
[7876, 64, 3916, 20, 58, 1832, 3970, 3987, 1123, 1125, 72, 391, 1122, 1843, 391, 1122, 1843],
/* 391 */
[7882, 105, 64, 58, 20, 1845, 4016, 1844, 4020, 390, 1131, 1122, 72, 3971, 3977, 3985, 3975, 3974, 3980, 3973, 3984, 3983, 3976, 3972],
/* 392 */
[7818, 4129],
/* 393 */
[7876, 59, 4122, 10, 45, 1875, 4203, 4220, 777, 1153, 51, 394, 1152, 1890, 394, 1152, 1890],
/* 394 */
[7882, 96, 59, 45, 10, 1892, 4249, 1891, 4253, 393, 1902, 1152, 51, 4204, 4210, 4218, 4208, 4207, 4213, 4206, 4217, 4216, 4209, 4205],
/* 395 */
[7882, 40, 15, 21, 2, 1937, 4493, 1936, 4497, 600, 1947, 1176, 26, 4448, 4454, 4462, 4452, 4451, 4457, 4450, 4461, 4460, 4453, 4449],
/* 396 */
[7882, 40, 15, 21, 2, 1962, 4626, 1961, 4630, 605, 1982, 1196, 26, 4584, 4590, 4598, 4588, 4587, 4593, 4586, 4597, 4596, 4589, 4585],
/* 397 */
294,
/* 398 */
[7882, 112, 97, 73, 34, 2000, 4769, 1999, 4773, 477, 2022, 1214, 84, 4737, 4743, 4751, 4741, 4740, 4746, 4739, 4750, 4749, 4742, 4738],
/* 399 */
[7882, 65, 27, 24, 7, 2038, 4932, 2037, 4936, 613, 2049, 1234, 30, 4900, 4906, 4914, 4904, 4903, 4909, 4902, 4913, 4912, 4905, 4901],
/* 400 */
[7977, 2048, 482, 825],
/* 401 */
[7882, 65, 27, 24, 7, 2053, 5040, 2052, 5044, 615, 2073, 1243, 30, 4998, 5004, 5012, 5002, 5001, 5007, 5000, 5011, 5010, 5003, 4999],
/* 402 */
294,
/* 403 */
[7882, 66, 12, 9, 4, 2079, 5159, 2078, 5163, 617, 2099, 1251, 85, 5117, 5123, 5131, 5121, 5120, 5126, 5119, 5130, 5129, 5122, 5118],
/* 404 */
294,
/* 405 */
[7882, 66, 12, 9, 4, 2119, 5295, 2118, 5299, 489, 2141, 1268, 86, 5263, 5269, 5277, 5267, 5266, 5272, 5265, 5276, 5275, 5268, 5264],
/* 406 */
[7882, 113, 98, 74, 35, 2158, 5461, 2157, 5465, 493, 2180, 1287, 87, 5429, 5435, 5443, 5433, 5432, 5438, 5431, 5442, 5441, 5434, 5430],
/* 407 */
[7882, 109, 88, 67, 36, 2185, 5595, 2184, 5599, 628, 2195, 1297, 79, 5550, 5556, 5564, 5554, 5553, 5559, 5552, 5563, 5562, 5555, 5551],
/* 408 */
[7818, 5758],
/* 409 */
[7876, 52, 5751, 13, 46, 2226, 5832, 5849, 1334, 1335, 54, 410, 1333, 2241, 410, 1333, 2241],
/* 410 */
[7882, 107, 52, 46, 13, 2243, 5878, 2242, 5882, 409, 2253, 1333, 54, 5833, 5839, 5847, 5837, 5836, 5842, 5835, 5846, 5845, 5838, 5834],
/* 411 */
[7882, 114, 99, 75, 47, 2284, 6079, 2283, 6083, 644, 2304, 1356, 89, 6037, 6043, 6051, 6041, 6040, 6046, 6039, 6050, 6049, 6042, 6038],
/* 412 */
294,
/* 413 */
[7882, 115, 100, 68, 41, 2327, 6272, 2326, 6276, 650, 2347, 1379, 80, 6230, 6236, 6244, 6234, 6233, 6239, 6232, 6243, 6242, 6235, 6231],
/* 414 */
294,
/* 415 */
[7882, 116, 101, 69, 37, 2368, 6435, 2367, 6439, 653, 2387, 1394, 90, 6393, 6399, 6407, 6397, 6396, 6402, 6395, 6406, 6405, 6398, 6394],
/* 416 */
294,
/* 417 */
[7882, 42, 16, 17, 3, 2405, 6615, 2404, 6619, 659, 1423, 1412, 28, 6570, 6576, 6584, 6574, 6573, 6579, 6572, 6583, 6582, 6575, 6571],
/* 418 */
[7882, 42, 16, 17, 3, 2413, 6676, 2412, 6680, 661, 1423, 1415, 28, 6634, 6640, 6648, 6638, 6637, 6643, 6636, 6647, 6646, 6639, 6635],
/* 419 */
[7882, 117, 102, 70, 38, 2451, 6835, 2450, 6839, 666, 2471, 1438, 81, 6793, 6799, 6807, 6797, 6796, 6802, 6795, 6806, 6805, 6798, 6794],
/* 420 */
294,
/* 421 */
[7882, 118, 103, 76, 43, 2517, 7121, 2516, 7125, 675, 2536, 1468, 91, 7079, 7085, 7093, 7083, 7082, 7088, 7081, 7092, 7091, 7084, 7080],
/* 422 */
294,
/* 423 */
[7882, 119, 93, 77, 44, 2554, 7287, 2553, 7291, 680, 2573, 1487, 92, 7245, 7251, 7259, 7249, 7248, 7254, 7247, 7258, 7257, 7250, 7246],
/* 424 */
294,
/* 425 */
[7882, 120, 104, 53, 32, 2601, 7479, 2600, 7483, 688, 2610, 1517, 57, 7447, 7453, 7461, 7451, 7450, 7456, 7449, 7460, 7459, 7452, 7448],
/* 426 */
[7882, 121, 94, 78, 48, 2643, 7699, 2642, 7703, 694, 2663, 1540, 95, 7657, 7663, 7671, 7661, 7660, 7666, 7659, 7670, 7669, 7662, 7658],
/* 427 */
294,
/* 428 */
/***/ function(module, exports) {

	

/***/ },
/* 429 */
/***/ function(module, exports) {

	/* @flow */

	// Matches a whole line break (where CRLF is considered a single
	// line break). Used to count lines.

	"use strict";

	exports.__esModule = true;
	exports.isNewLine = isNewLine;
	var lineBreak = /\r\n?|\n|\u2028|\u2029/;
	exports.lineBreak = lineBreak;
	var lineBreakG = new RegExp(lineBreak.source, "g");

	exports.lineBreakG = lineBreakG;

	function isNewLine(code /*: number*/) /*: boolean*/ {
	  return code === 10 || code === 13 || code === 0x2028 || code === 0x2029;
	}

	var nonASCIIwhitespace = /[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;
	exports.nonASCIIwhitespace = nonASCIIwhitespace;

/***/ },
/* 430 */
[7967, 985, 294],
/* 431 */
[7968, 430, 709, 145],
/* 432 */
429,
/* 433 */
[7977, 1625, 554, 999],
/* 434 */
[7876, 62, 3117, 11, 56, 1660, 2966, 2983, 1003, 1004, 61, 380, 1002, 1628, 380, 1002, 1628],
/* 435 */
429,
/* 436 */
145,
/* 437 */
294,
/* 438 */
[7861, 1668, 1669, 723],
/* 439 */
429,
/* 440 */
[7977, 1672, 561, 1024],
/* 441 */
429,
/* 442 */
145,
/* 443 */
[7861, 1697, 1698, 733],
/* 444 */
429,
/* 445 */
[7988, 738, 1051, 147, 3431],
/* 446 */
[7861, 1735, 1736, 740],
/* 447 */
[7876, 82, 3448, 33, 71, 1727, 3490, 3507, 1066, 1068, 83, 385, 1065, 1737, 385, 1065, 1737],
/* 448 */
429,
/* 449 */
[7988, 744, 1071, 148, 3595],
/* 450 */
[7861, 1781, 1782, 751],
/* 451 */
429,
/* 452 */
294,
/* 453 */
145,
/* 454 */
429,
/* 455 */
[7988, 761, 1102, 149, 3872],
/* 456 */
[7861, 1840, 1841, 765],
/* 457 */
429,
/* 458 */
429,
/* 459 */
[7988, 771, 1128, 150, 4076],
/* 460 */
294,
/* 461 */
[7977, 1871, 460, 1134],
/* 462 */
[7861, 1883, 1884, 779],
/* 463 */
429,
/* 464 */
[7977, 1887, 591, 1149],
/* 465 */
429,
/* 466 */
145,
/* 467 */
294,
/* 468 */
429,
/* 469 */
[7977, 1932, 598, 1173],
/* 470 */
429,
/* 471 */
145,
/* 472 */
[7861, 1957, 1958, 802],
/* 473 */
429,
/* 474 */
[7988, 807, 1200, 152, 4676],
/* 475 */
[7818, 4702],
/* 476 */
[7861, 1996, 1997, 809],
/* 477 */
[7876, 97, 4694, 34, 73, 1988, 4736, 4753, 1215, 1217, 84, 398, 1214, 1998, 398, 1214, 1998],
/* 478 */
429,
/* 479 */
[7988, 813, 1220, 153, 4841],
/* 480 */
[7861, 2034, 2035, 820],
/* 481 */
429,
/* 482 */
294,
/* 483 */
145,
/* 484 */
429,
/* 485 */
[7988, 830, 1247, 154, 5090],
/* 486 */
429,
/* 487 */
[7988, 835, 1255, 155, 5209],
/* 488 */
[7861, 2115, 2116, 840],
/* 489 */
[7876, 12, 2103, 4, 9, 839, 5262, 5279, 1269, 1271, 86, 405, 1268, 2117, 405, 1268, 2117],
/* 490 */
429,
/* 491 */
[7988, 844, 1274, 156, 5367],
/* 492 */
[7861, 2154, 2155, 848],
/* 493 */
[7876, 98, 5386, 35, 74, 2146, 5428, 5445, 1288, 1290, 87, 406, 1287, 2156, 406, 1287, 2156],
/* 494 */
429,
/* 495 */
[7988, 852, 1293, 157, 5533],
/* 496 */
429,
/* 497 */
145,
/* 498 */
294,
/* 499 */
[7861, 2221, 2222, 864],
/* 500 */
[7861, 2234, 2235, 866],
/* 501 */
429,
/* 502 */
[7977, 2238, 637, 1330],
/* 503 */
429,
/* 504 */
145,
/* 505 */
294,
/* 506 */
[7861, 2279, 2280, 877],
/* 507 */
429,
/* 508 */
[7988, 882, 1360, 160, 6129],
/* 509 */
[7861, 2322, 2323, 886],
/* 510 */
429,
/* 511 */
[7988, 891, 1383, 161, 6322],
/* 512 */
108,
/* 513 */
429,
/* 514 */
[7988, 899, 1399, 162, 6487],
/* 515 */
[7861, 2399, 2400, 901],
/* 516 */
429,
/* 517 */
429,
/* 518 */
429,
/* 519 */
[7933, 2427, 1418, 241, 911, 358, 2432, 6733],
/* 520 */
[7988, 909, 1419, 163, 6723],
/* 521 */
[7861, 2445, 2446, 914],
/* 522 */
429,
/* 523 */
[7988, 919, 1442, 164, 6885],
/* 524 */
[7861, 2483, 2484, 921],
/* 525 */
429,
/* 526 */
[7988, 934, 1473, 165, 7172],
/* 527 */
[7861, 2548, 2549, 936],
/* 528 */
429,
/* 529 */
[7988, 941, 1492, 166, 7338],
/* 530 */
[7861, 2585, 2586, 943],
/* 531 */
[7861, 2597, 2598, 945],
/* 532 */
145,
/* 533 */
294,
/* 534 */
429,
/* 535 */
[7861, 2638, 2639, 954],
/* 536 */
429,
/* 537 */
[7988, 959, 1544, 168, 7749],
/* 538 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {
	  filename: {
	    type: "filename",
	    description: "filename to use when reading from stdin - this will be used in source-maps, errors etc",
	    "default": "unknown",
	    shorthand: "f"
	  },

	  filenameRelative: {
	    hidden: true,
	    type: "string"
	  },

	  inputSourceMap: {
	    hidden: true
	  },

	  env: {
	    hidden: true,
	    "default": {}
	  },

	  mode: {
	    description: "",
	    hidden: true
	  },

	  retainLines: {
	    type: "boolean",
	    "default": false,
	    description: "retain line numbers - will result in really ugly code"
	  },

	  highlightCode: {
	    description: "enable/disable ANSI syntax highlighting of code frames (on by default)",
	    type: "boolean",
	    "default": true
	  },

	  suppressDeprecationMessages: {
	    type: "boolean",
	    "default": false,
	    hidden: true
	  },

	  presets: {
	    type: "list",
	    description: "",
	    "default": []
	  },

	  plugins: {
	    type: "list",
	    "default": [],
	    description: ""
	  },

	  ignore: {
	    type: "list",
	    description: "list of glob paths to **not** compile",
	    "default": []
	  },

	  only: {
	    type: "list",
	    description: "list of glob paths to **only** compile"
	  },

	  code: {
	    hidden: true,
	    "default": true,
	    type: "boolean"
	  },

	  metadata: {
	    hidden: true,
	    "default": true,
	    type: "boolean"
	  },

	  ast: {
	    hidden: true,
	    "default": true,
	    type: "boolean"
	  },

	  "extends": {
	    type: "string",
	    hidden: true
	  },

	  comments: {
	    type: "boolean",
	    "default": true,
	    description: "strip/output comments in generated output (on by default)"
	  },

	  shouldPrintComment: {
	    hidden: true,
	    description: "optional callback to control whether a comment should be inserted, when this is used the comments option is ignored"
	  },

	  compact: {
	    type: "booleanString",
	    "default": "auto",
	    description: "do not include superfluous whitespace characters and line terminators [true|false|auto]"
	  },

	  sourceMap: {
	    alias: "sourceMaps",
	    hidden: true
	  },

	  sourceMaps: {
	    type: "booleanString",
	    description: "[true|false|inline]",
	    "default": false,
	    shorthand: "s"
	  },

	  sourceMapTarget: {
	    type: "string",
	    description: "set `file` on returned source map"
	  },

	  sourceFileName: {
	    type: "string",
	    description: "set `sources[0]` on returned source map"
	  },

	  sourceRoot: {
	    type: "filename",
	    description: "the root from which all sources are relative"
	  },

	  babelrc: {
	    description: "Whether or not to look up .babelrc and .babelignore files",
	    type: "boolean",
	    "default": true
	  },

	  sourceType: {
	    description: "",
	    "default": "module"
	  },

	  auxiliaryCommentBefore: {
	    type: "string",
	    description: "print a comment before any injected non-user code"
	  },

	  auxiliaryCommentAfter: {
	    type: "string",
	    description: "print a comment after any injected non-user code"
	  },

	  resolveModuleSource: {
	    hidden: true
	  },

	  getModuleId: {
	    hidden: true
	  },

	  moduleRoot: {
	    type: "filename",
	    description: "optional prefix for the AMD module formatter that will be prepend to the filename on module definitions"
	  },

	  moduleIds: {
	    type: "boolean",
	    "default": false,
	    shorthand: "M",
	    description: "insert an explicit id for modules"
	  },

	  moduleId: {
	    description: "specify a custom name for module ids",
	    type: "string"
	  }
	};

/***/ },
/* 539 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _classCallCheck = __webpack_require__(60)["default"];

	var _getIterator = __webpack_require__(49)["default"];

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	exports.__esModule = true;

	var _apiNode = __webpack_require__(1547);

	var context = _interopRequireWildcard(_apiNode);

	var _plugin2 = __webpack_require__(966);

	var _plugin3 = _interopRequireDefault(_plugin2);

	var _babelMessages = __webpack_require__(290);

	var messages = _interopRequireWildcard(_babelMessages);

	var _index = __webpack_require__(964);

	var _helpersResolve = __webpack_require__(2673);

	var _helpersResolve2 = _interopRequireDefault(_helpersResolve);

	var _json5 = __webpack_require__(2826);

	var _json52 = _interopRequireDefault(_json5);

	var _pathIsAbsolute = __webpack_require__(2885);

	var _pathIsAbsolute2 = _interopRequireDefault(_pathIsAbsolute);

	var _pathExists = __webpack_require__(2884);

	var _pathExists2 = _interopRequireDefault(_pathExists);

	var _lodashLangCloneDeep = __webpack_require__(1594);

	var _lodashLangCloneDeep2 = _interopRequireDefault(_lodashLangCloneDeep);

	var _lodashLangClone = __webpack_require__(710);

	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);

	var _helpersMerge = __webpack_require__(2671);

	var _helpersMerge2 = _interopRequireDefault(_helpersMerge);

	var _config = __webpack_require__(538);

	var _config2 = _interopRequireDefault(_config);

	var _path = __webpack_require__(289);

	var _path2 = _interopRequireDefault(_path);

	var _fs = __webpack_require__(428);

	var _fs2 = _interopRequireDefault(_fs);

	/*:: import type Logger from "../logger";*/

	var existsCache = {};
	var jsonCache = {};

	var BABELIGNORE_FILENAME = ".babelignore";
	var BABELRC_FILENAME = ".babelrc";
	var PACKAGE_FILENAME = "package.json";

	function exists(filename) {
	  var cached = existsCache[filename];
	  if (cached == null) {
	    return existsCache[filename] = _pathExists2["default"].sync(filename);
	  } else {
	    return cached;
	  }
	}

	/*:: type PluginObject = {
	  pre?: Function;
	  post?: Function;
	  manipulateOptions?: Function;

	  visitor: ?{
	    [key: string]: Function | {
	      enter?: Function | Array<Function>;
	      exit?: Function | Array<Function>;
	    }
	  };
	};*/
	var OptionManager = (function () {
	  function OptionManager(log /*:: ?: Logger*/) {
	    _classCallCheck(this, OptionManager);

	    this.resolvedConfigs = [];
	    this.options = OptionManager.createBareOptions();
	    this.log = log;
	  }

	  OptionManager.memoisePluginContainer = function memoisePluginContainer(fn, loc, i, alias) {
	    for (var _iterator = (OptionManager.memoisedPlugins /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var cache = _ref;

	      if (cache.container === fn) return cache.plugin;
	    }

	    var obj /*: ?PluginObject*/ = undefined;

	    if (typeof fn === "function") {
	      obj = fn(context);
	    } else {
	      obj = fn;
	    }

	    if (typeof obj === "object") {
	      var _plugin = new _plugin3["default"](obj, alias);
	      OptionManager.memoisedPlugins.push({
	        container: fn,
	        plugin: _plugin
	      });
	      return _plugin;
	    } else {
	      throw new TypeError(messages.get("pluginNotObject", loc, i, typeof obj) + loc + i);
	    }
	  };

	  OptionManager.createBareOptions = function createBareOptions() {
	    var opts = {};

	    for (var _key in _config2["default"]) {
	      var opt = _config2["default"][_key];
	      opts[_key] = _lodashLangClone2["default"](opt["default"]);
	    }

	    return opts;
	  };

	  OptionManager.normalisePlugin = function normalisePlugin(plugin, loc, i, alias) {
	    plugin = plugin.__esModule ? plugin["default"] : plugin;

	    if (!(plugin instanceof _plugin3["default"])) {
	      // allow plugin containers to be specified so they don't have to manually require
	      if (typeof plugin === "function" || typeof plugin === "object") {
	        plugin = OptionManager.memoisePluginContainer(plugin, loc, i, alias);
	      } else {
	        throw new TypeError(messages.get("pluginNotFunction", loc, i, typeof plugin));
	      }
	    }

	    plugin.init(loc, i);

	    return plugin;
	  };

	  OptionManager.normalisePlugins = function normalisePlugins(loc, dirname, plugins) {
	    return plugins.map(function (val, i) {
	      var plugin = undefined,
	          options = undefined;

	      // destructure plugins
	      if (Array.isArray(val)) {
	        plugin = val[0];
	        options = val[1];
	      } else {
	        plugin = val;
	      }

	      var alias = typeof plugin === "string" ? plugin : loc + "$" + i;

	      // allow plugins to be specified as strings
	      if (typeof plugin === "string") {
	        var pluginLoc = _helpersResolve2["default"]("babel-plugin-" + plugin, dirname) || _helpersResolve2["default"](plugin, dirname);
	        if (pluginLoc) {
	          plugin = __webpack_require__(1548)(pluginLoc);
	        } else {
	          throw new ReferenceError(messages.get("pluginUnknown", plugin, loc, i, dirname));
	        }
	      }

	      plugin = OptionManager.normalisePlugin(plugin, loc, i, alias);

	      return [plugin, options];
	    });
	  };

	  OptionManager.prototype.addConfig = function addConfig(loc /*: string*/, key /*:: ?: string*/) /*: boolean*/ {
	    var json = arguments.length <= 2 || arguments[2] === undefined ? _json52["default"] : arguments[2];

	    if (this.resolvedConfigs.indexOf(loc) >= 0) {
	      return false;
	    }

	    var content = _fs2["default"].readFileSync(loc, "utf8");
	    var opts = undefined;

	    try {
	      opts = jsonCache[content] = jsonCache[content] || json.parse(content);
	      if (key) opts = opts[key];
	    } catch (err) {
	      err.message = loc + ": Error while parsing JSON - " + err.message;
	      throw err;
	    }

	    this.mergeOptions(opts, loc, null, _path2["default"].dirname(loc));
	    this.resolvedConfigs.push(loc);

	    return !!opts;
	  };

	  /**
	   * This is called when we want to merge the input `opts` into our
	   * base options.
	   *
	   *  - `alias` is used to output pretty traces back to the original source.
	   *  - `loc` is used to point to the original config.
	   *  - `dirname` is used to resolve plugins relative to it.
	   */

	  OptionManager.prototype.mergeOptions = function mergeOptions(rawOpts /*:: ?: Object*/, alias /*: string*/, loc /*:: ?: string*/, dirname /*:: ?: string*/) {
	    if (alias === undefined) alias = "foreign";

	    if (!rawOpts) return;

	    //
	    if (typeof rawOpts !== "object" || Array.isArray(rawOpts)) {
	      this.log.error("Invalid options type for " + alias, TypeError);
	    }

	    //
	    var opts = _lodashLangCloneDeep2["default"](rawOpts, function (val) {
	      if (val instanceof _plugin3["default"]) {
	        return val;
	      }
	    });

	    //
	    dirname = dirname || process.cwd();
	    loc = loc || alias;

	    for (var _key2 in opts) {
	      var option = _config2["default"][_key2];

	      // check for an unknown option
	      if (!option && this.log) {
	        this.log.error("Unknown option: " + alias + "." + _key2, ReferenceError);
	      }
	    }

	    // normalise options
	    _index.normaliseOptions(opts);

	    // resolve plugins
	    if (opts.plugins) {
	      opts.plugins = OptionManager.normalisePlugins(loc, dirname, opts.plugins);
	    }

	    // add extends clause
	    if (opts["extends"]) {
	      var extendsLoc = _helpersResolve2["default"](opts["extends"], dirname);
	      if (extendsLoc) {
	        this.addConfig(extendsLoc);
	      } else {
	        if (this.log) this.log.error("Couldn't resolve extends clause of " + opts["extends"] + " in " + alias);
	      }
	      delete opts["extends"];
	    }

	    // resolve presets
	    if (opts.presets) {
	      this.mergePresets(opts.presets, dirname);
	      delete opts.presets;
	    }

	    // env
	    var envOpts = undefined;
	    var envKey = process.env.BABEL_ENV || ("production") || "development";
	    if (opts.env) {
	      envOpts = opts.env[envKey];
	      delete opts.env;
	    }

	    // merge them into this current files options
	    _helpersMerge2["default"](this.options, opts);

	    // merge in env options
	    this.mergeOptions(envOpts, alias + ".env." + envKey, null, dirname);
	  };

	  OptionManager.prototype.mergePresets = function mergePresets(presets /*: Array<string | Object>*/, dirname /*: string*/) {
	    for (var _iterator2 = presets, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var val = _ref2;

	      if (typeof val === "string") {
	        var presetLoc = _helpersResolve2["default"]("babel-preset-" + val, dirname) || _helpersResolve2["default"](val, dirname);
	        if (presetLoc) {
	          var presetOpts = __webpack_require__(1548)(presetLoc);
	          this.mergeOptions(presetOpts, presetLoc, presetLoc, _path2["default"].dirname(presetLoc));
	        } else {
	          throw new Error("Couldn't find preset " + JSON.stringify(val) + " relative to directory " + JSON.stringify(dirname));
	        }
	      } else if (typeof val === "object") {
	        this.mergeOptions(val);
	      } else {
	        throw new Error("todo");
	      }
	    }
	  };

	  OptionManager.prototype.addIgnoreConfig = function addIgnoreConfig(loc) {
	    var file = _fs2["default"].readFileSync(loc, "utf8");
	    var lines = file.split("\n");

	    lines = lines.map(function (line) {
	      return line.replace(/#(.*?)$/, "").trim();
	    }).filter(function (line) {
	      return !!line;
	    });

	    this.mergeOptions({ ignore: lines }, loc);
	  };

	  OptionManager.prototype.findConfigs = function findConfigs(loc) {
	    if (!loc) return;

	    if (!_pathIsAbsolute2["default"](loc)) {
	      loc = _path2["default"].join(process.cwd(), loc);
	    }

	    var foundConfig = false;
	    var foundIgnore = false;

	    while (loc !== (loc = _path2["default"].dirname(loc))) {
	      if (!foundConfig) {
	        var configLoc = _path2["default"].join(loc, BABELRC_FILENAME);
	        if (exists(configLoc)) {
	          this.addConfig(configLoc);
	          foundConfig = true;
	        }

	        var pkgLoc = _path2["default"].join(loc, PACKAGE_FILENAME);
	        if (!foundConfig && exists(pkgLoc)) {
	          foundConfig = this.addConfig(pkgLoc, "babel", JSON);
	        }
	      }

	      if (!foundIgnore) {
	        var ignoreLoc = _path2["default"].join(loc, BABELIGNORE_FILENAME);
	        if (exists(ignoreLoc)) {
	          this.addIgnoreConfig(ignoreLoc);
	          foundIgnore = true;
	        }
	      }

	      if (foundIgnore && foundConfig) return;
	    }
	  };

	  OptionManager.prototype.normaliseOptions = function normaliseOptions() {
	    var opts = this.options;

	    for (var _key3 in _config2["default"]) {
	      var option = _config2["default"][_key3];
	      var val = opts[_key3];

	      // optional
	      if (!val && option.optional) continue;

	      // aliases
	      if (option.alias) {
	        opts[option.alias] = opts[option.alias] || val;
	      } else {
	        opts[_key3] = val;
	      }
	    }
	  };

	  OptionManager.prototype.init = function init() /*: Object*/ {
	    var opts /*: Object*/ = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	    var filename = opts.filename;

	    // resolve all .babelrc files
	    if (opts.babelrc !== false) {
	      this.findConfigs(filename);
	    }

	    // merge in base options
	    this.mergeOptions(opts, "base", null, filename && _path2["default"].dirname(filename));

	    // normalise
	    this.normaliseOptions(opts);

	    return this.options;
	  };

	  return OptionManager;
	})();

	exports["default"] = OptionManager;

	OptionManager.memoisedPlugins = [];
	module.exports = exports["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 540 */
[7818, 2737],
/* 541 */
[7840, 701],
/* 542 */
[7843, 543],
/* 543 */
/***/ function(module, exports) {

	module.exports = function(exec){
	  try {
	    return !!exec();
	  } catch(e){
	    return true;
	  }
	};

/***/ },
/* 544 */
/***/ function(module, exports) {

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math
	  ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if(typeof __g == 'number')__g = global; // eslint-disable-line no-undef

/***/ },
/* 545 */
[7847, 108, 973, 542],
/* 546 */
/***/ function(module, exports) {

	module.exports = {};

/***/ },
/* 547 */
[7859, 1558, 699],
/* 548 */
/***/ function(module, exports) {

	// This is a trick taken from Esprima. It turns out that, on
	// non-Chrome browsers, to check whether a string is in a set, a
	// predicate containing a big ugly `switch` statement is faster than
	// a regular expression, and on Chrome the two are about on par.
	// This function uses `eval` (non-lexical) to produce such a
	// predicate from a space-separated string of words.
	//
	// It starts by sorting the words by length.

	"use strict";

	exports.__esModule = true;
	exports.isIdentifierStart = isIdentifierStart;
	exports.isIdentifierChar = isIdentifierChar;
	function makePredicate(words) {
	  words = words.split(" ");
	  return function (str) {
	    return words.indexOf(str) >= 0;
	  };
	}

	// Reserved word lists for various dialects of the language

	var reservedWords = {
	  6: makePredicate("enum await"),
	  strict: makePredicate("implements interface let package private protected public static yield"),
	  strictBind: makePredicate("eval arguments")
	};

	exports.reservedWords = reservedWords;
	// And the keywords

	var isKeyword = makePredicate("break case catch continue debugger default do else finally for function if return switch throw try var while with null true false instanceof typeof void delete new in this let const class extends export import yield super");

	exports.isKeyword = isKeyword;
	// ## Character categories

	// Big ugly regular expressions that match characters in the
	// whitespace, identifier, and identifier-start categories. These
	// are only applied when a character is found to actually have a
	// code point above 128.
	// Generated by `tools/generate-identifier-regex.js`.

	var nonASCIIidentifierStartChars = "ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢲऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕ℘-ℝℤΩℨK-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ々-〇〡-〩〱-〵〸-〼ぁ-ゖ゛-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞭꞰꞱꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭟꭤꭥꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";
	var nonASCIIidentifierChars = "‌‍·̀-ͯ·҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-٩ٰۖ-ۜ۟-۪ۤۧۨ-ۭ۰-۹ܑܰ-݊ަ-ް߀-߉߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣤ-ःऺ-़ा-ॏ॑-ॗॢॣ०-९ঁ-ঃ়া-ৄেৈো-্ৗৢৣ০-৯ਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఀ-ఃా-ౄె-ైొ-్ౕౖౢౣ౦-౯ಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣ೦-೯ഁ-ഃാ-ൄെ-ൈൊ-്ൗൢൣ൦-൯ංඃ්ා-ුූෘ-ෟ෦-෯ෲෳัิ-ฺ็-๎๐-๙ັິ-ູົຼ່-ໍ໐-໙༘༙༠-༩༹༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှ၀-၉ၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟፩-፱ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝០-៩᠋-᠍᠐-᠙ᢩᤠ-ᤫᤰ-᤻᥆-᥏ᦰ-ᧀᧈᧉ᧐-᧚ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪰-᪽ᬀ-ᬄ᬴-᭄᭐-᭙᭫-᭳ᮀ-ᮂᮡ-ᮭ᮰-᮹᯦-᯳ᰤ-᰷᱀-᱉᱐-᱙᳐-᳔᳒-᳨᳭ᳲ-᳴᳸᳹᷀-᷵᷼-᷿‿⁀⁔⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꘠-꘩꙯ꙴ-꙽ꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-꣄꣐-꣙꣠-꣱꤀-꤉ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀꧐-꧙ꧥ꧰-꧹ꨩ-ꨶꩃꩌꩍ꩐-꩙ꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭꯰-꯹ﬞ︀-️︠-︭︳︴﹍-﹏０-９＿";

	var nonASCIIidentifierStart = new RegExp("[" + nonASCIIidentifierStartChars + "]");
	var nonASCIIidentifier = new RegExp("[" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + "]");

	nonASCIIidentifierStartChars = nonASCIIidentifierChars = null;

	// These are a run-length and offset encoded representation of the
	// >0xffff code points that are a valid part of identifiers. The
	// offset starts at 0x10000, and each pair of numbers represents an
	// offset to the next range, and then a size of the range. They were
	// generated by tools/generate-identifier-regex.js
	var astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 17, 26, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 99, 39, 9, 51, 157, 310, 10, 21, 11, 7, 153, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 98, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 26, 45, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 955, 52, 76, 44, 33, 24, 27, 35, 42, 34, 4, 0, 13, 47, 15, 3, 22, 0, 38, 17, 2, 24, 133, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 32, 4, 287, 47, 21, 1, 2, 0, 185, 46, 82, 47, 21, 0, 60, 42, 502, 63, 32, 0, 449, 56, 1288, 920, 104, 110, 2962, 1070, 13266, 568, 8, 30, 114, 29, 19, 47, 17, 3, 32, 20, 6, 18, 881, 68, 12, 0, 67, 12, 16481, 1, 3071, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 4149, 196, 1340, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42710, 42, 4148, 12, 221, 16355, 541];
	var astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 1306, 2, 54, 14, 32, 9, 16, 3, 46, 10, 54, 9, 7, 2, 37, 13, 2, 9, 52, 0, 13, 2, 49, 13, 16, 9, 83, 11, 168, 11, 6, 9, 8, 2, 57, 0, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 316, 19, 13, 9, 214, 6, 3, 8, 112, 16, 16, 9, 82, 12, 9, 9, 535, 9, 20855, 9, 135, 4, 60, 6, 26, 9, 1016, 45, 17, 3, 19723, 1, 5319, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 4305, 6, 792618, 239];

	// This has a complexity linear to the value of the code. The
	// assumption is that looking up astral identifier characters is
	// rare.
	function isInAstralSet(code, set) {
	  var pos = 0x10000;
	  for (var i = 0; i < set.length; i += 2) {
	    pos += set[i];
	    if (pos > code) return false;

	    pos += set[i + 1];
	    if (pos >= code) return true;
	  }
	}

	// Test whether a given character code starts an identifier.

	function isIdentifierStart(code) {
	  if (code < 65) return code === 36;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));
	  return isInAstralSet(code, astralIdentifierStartCodes);
	}

	// Test whether a given character is part of an identifier.

	function isIdentifierChar(code) {
	  if (code < 48) return code === 36;
	  if (code < 58) return true;
	  if (code < 65) return false;
	  if (code < 91) return true;
	  if (code < 97) return code === 95;
	  if (code < 123) return true;
	  if (code <= 0xffff) return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));
	  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);
	}

/***/ },
/* 549 */
[7952, 1601],
/* 550 */
[7976, 430, 172],
/* 551 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  /**
	   * This is a helper function for getting values from parameter/options
	   * objects.
	   *
	   * @param args The object we are extracting values from
	   * @param name The name of the property we are getting.
	   * @param defaultValue An optional value to return if the property is missing
	   * from the object. If this is not specified and the property is missing, an
	   * error will be thrown.
	   */
	  function getArg(aArgs, aName, aDefaultValue) {
	    if (aName in aArgs) {
	      return aArgs[aName];
	    } else if (arguments.length === 3) {
	      return aDefaultValue;
	    } else {
	      throw new Error('"' + aName + '" is a required argument.');
	    }
	  }
	  exports.getArg = getArg;

	  var urlRegexp = /^(?:([\w+\-.]+):)?\/\/(?:(\w+:\w+)@)?([\w.]*)(?::(\d+))?(\S*)$/;
	  var dataUrlRegexp = /^data:.+\,.+$/;

	  function urlParse(aUrl) {
	    var match = aUrl.match(urlRegexp);
	    if (!match) {
	      return null;
	    }
	    return {
	      scheme: match[1],
	      auth: match[2],
	      host: match[3],
	      port: match[4],
	      path: match[5]
	    };
	  }
	  exports.urlParse = urlParse;

	  function urlGenerate(aParsedUrl) {
	    var url = '';
	    if (aParsedUrl.scheme) {
	      url += aParsedUrl.scheme + ':';
	    }
	    url += '//';
	    if (aParsedUrl.auth) {
	      url += aParsedUrl.auth + '@';
	    }
	    if (aParsedUrl.host) {
	      url += aParsedUrl.host;
	    }
	    if (aParsedUrl.port) {
	      url += ":" + aParsedUrl.port
	    }
	    if (aParsedUrl.path) {
	      url += aParsedUrl.path;
	    }
	    return url;
	  }
	  exports.urlGenerate = urlGenerate;

	  /**
	   * Normalizes a path, or the path portion of a URL:
	   *
	   * - Replaces consequtive slashes with one slash.
	   * - Removes unnecessary '.' parts.
	   * - Removes unnecessary '<dir>/..' parts.
	   *
	   * Based on code in the Node.js 'path' core module.
	   *
	   * @param aPath The path or url to normalize.
	   */
	  function normalize(aPath) {
	    var path = aPath;
	    var url = urlParse(aPath);
	    if (url) {
	      if (!url.path) {
	        return aPath;
	      }
	      path = url.path;
	    }
	    var isAbsolute = exports.isAbsolute(path);

	    var parts = path.split(/\/+/);
	    for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {
	      part = parts[i];
	      if (part === '.') {
	        parts.splice(i, 1);
	      } else if (part === '..') {
	        up++;
	      } else if (up > 0) {
	        if (part === '') {
	          // The first part is blank if the path is absolute. Trying to go
	          // above the root is a no-op. Therefore we can remove all '..' parts
	          // directly after the root.
	          parts.splice(i + 1, up);
	          up = 0;
	        } else {
	          parts.splice(i, 2);
	          up--;
	        }
	      }
	    }
	    path = parts.join('/');

	    if (path === '') {
	      path = isAbsolute ? '/' : '.';
	    }

	    if (url) {
	      url.path = path;
	      return urlGenerate(url);
	    }
	    return path;
	  }
	  exports.normalize = normalize;

	  /**
	   * Joins two paths/URLs.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be joined with the root.
	   *
	   * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a
	   *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended
	   *   first.
	   * - Otherwise aPath is a path. If aRoot is a URL, then its path portion
	   *   is updated with the result and aRoot is returned. Otherwise the result
	   *   is returned.
	   *   - If aPath is absolute, the result is aPath.
	   *   - Otherwise the two paths are joined with a slash.
	   * - Joining for example 'http://' and 'www.example.com' is also supported.
	   */
	  function join(aRoot, aPath) {
	    if (aRoot === "") {
	      aRoot = ".";
	    }
	    if (aPath === "") {
	      aPath = ".";
	    }
	    var aPathUrl = urlParse(aPath);
	    var aRootUrl = urlParse(aRoot);
	    if (aRootUrl) {
	      aRoot = aRootUrl.path || '/';
	    }

	    // `join(foo, '//www.example.org')`
	    if (aPathUrl && !aPathUrl.scheme) {
	      if (aRootUrl) {
	        aPathUrl.scheme = aRootUrl.scheme;
	      }
	      return urlGenerate(aPathUrl);
	    }

	    if (aPathUrl || aPath.match(dataUrlRegexp)) {
	      return aPath;
	    }

	    // `join('http://', 'www.example.com')`
	    if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {
	      aRootUrl.host = aPath;
	      return urlGenerate(aRootUrl);
	    }

	    var joined = aPath.charAt(0) === '/'
	      ? aPath
	      : normalize(aRoot.replace(/\/+$/, '') + '/' + aPath);

	    if (aRootUrl) {
	      aRootUrl.path = joined;
	      return urlGenerate(aRootUrl);
	    }
	    return joined;
	  }
	  exports.join = join;

	  exports.isAbsolute = function (aPath) {
	    return aPath.charAt(0) === '/' || !!aPath.match(urlRegexp);
	  };

	  /**
	   * Make a path relative to a URL or another path.
	   *
	   * @param aRoot The root path or URL.
	   * @param aPath The path or URL to be made relative to aRoot.
	   */
	  function relative(aRoot, aPath) {
	    if (aRoot === "") {
	      aRoot = ".";
	    }

	    aRoot = aRoot.replace(/\/$/, '');

	    // It is possible for the path to be above the root. In this case, simply
	    // checking whether the root is a prefix of the path won't work. Instead, we
	    // need to remove components from the root one by one, until either we find
	    // a prefix that fits, or we run out of components to remove.
	    var level = 0;
	    while (aPath.indexOf(aRoot + '/') !== 0) {
	      var index = aRoot.lastIndexOf("/");
	      if (index < 0) {
	        return aPath;
	      }

	      // If the only part of the root that is left is the scheme (i.e. http://,
	      // file:///, etc.), one or more slashes (/), or simply nothing at all, we
	      // have exhausted all components, so the path is not relative to the root.
	      aRoot = aRoot.slice(0, index);
	      if (aRoot.match(/^([^\/]+:\/)?\/*$/)) {
	        return aPath;
	      }

	      ++level;
	    }

	    // Make sure we add a "../" for each component we removed from the root.
	    return Array(level + 1).join("../") + aPath.substr(aRoot.length + 1);
	  }
	  exports.relative = relative;

	  /**
	   * Because behavior goes wacky when you set `__proto__` on objects, we
	   * have to prefix all the strings in our set with an arbitrary character.
	   *
	   * See https://github.com/mozilla/source-map/pull/31 and
	   * https://github.com/mozilla/source-map/issues/30
	   *
	   * @param String aStr
	   */
	  function toSetString(aStr) {
	    return '$' + aStr;
	  }
	  exports.toSetString = toSetString;

	  function fromSetString(aStr) {
	    return aStr.substr(1);
	  }
	  exports.fromSetString = fromSetString;

	  /**
	   * Comparator between two mappings where the original positions are compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same original source/line/column, but different generated
	   * line and column the same. Useful when searching for a mapping with a
	   * stubbed out mapping.
	   */
	  function compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {
	    var cmp = mappingA.source - mappingB.source;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0 || onlyCompareOriginal) {
	      return cmp;
	    }

	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    return mappingA.name - mappingB.name;
	  }
	  exports.compareByOriginalPositions = compareByOriginalPositions;

	  /**
	   * Comparator between two mappings with deflated source and name indices where
	   * the generated positions are compared.
	   *
	   * Optionally pass in `true` as `onlyCompareGenerated` to consider two
	   * mappings with the same generated line and column, but different
	   * source/name/original line and column the same. Useful when searching for a
	   * mapping with a stubbed out mapping.
	   */
	  function compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {
	    var cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0 || onlyCompareGenerated) {
	      return cmp;
	    }

	    cmp = mappingA.source - mappingB.source;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    return mappingA.name - mappingB.name;
	  }
	  exports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;

	  function strcmp(aStr1, aStr2) {
	    if (aStr1 === aStr2) {
	      return 0;
	    }

	    if (aStr1 > aStr2) {
	      return 1;
	    }

	    return -1;
	  }

	  /**
	   * Comparator between two mappings with inflated source and name strings where
	   * the generated positions are compared.
	   */
	  function compareByGeneratedPositionsInflated(mappingA, mappingB) {
	    var cmp = mappingA.generatedLine - mappingB.generatedLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.generatedColumn - mappingB.generatedColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = strcmp(mappingA.source, mappingB.source);
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalLine - mappingB.originalLine;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    cmp = mappingA.originalColumn - mappingB.originalColumn;
	    if (cmp !== 0) {
	      return cmp;
	    }

	    return strcmp(mappingA.name, mappingB.name);
	  }
	  exports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
	}


/***/ },
/* 552 */
[7861, 2909, 2913, 994],
/* 553 */
548,
/* 554 */
294,
/* 555 */
145,
/* 556 */
548,
/* 557 */
294,
/* 558 */
[7845, 723, 253, 1661],
/* 559 */
[7859, 3137, 1015],
/* 560 */
548,
/* 561 */
294,
/* 562 */
145,
/* 563 */
[7876, 18, 1689, 1, 19, 732, 3202, 3219, 1028, 1029, 25, 382, 1027, 1675, 382, 1027, 1675],
/* 564 */
548,
/* 565 */
294,
/* 566 */
[7845, 733, 254, 1690],
/* 567 */
[7859, 3307, 1038],
/* 568 */
[7876, 18, 1689, 1, 19, 732, 3338, 3355, 1048, 1049, 25, 383, 1047, 1700, 383, 1047, 1700],
/* 569 */
548,
/* 570 */
[7818, 3456],
/* 571 */
[7845, 740, 256, 1728],
/* 572 */
[7859, 3469, 1057],
/* 573 */
548,
/* 574 */
[7952, 1763],
/* 575 */
[7861, 3625, 3629, 1075],
/* 576 */
[7845, 751, 258, 1774],
/* 577 */
[7859, 3660, 1081],
/* 578 */
[7876, 22, 1772, 6, 23, 750, 3681, 3698, 1090, 1091, 29, 386, 1089, 1783, 386, 1089, 1783],
/* 579 */
548,
/* 580 */
[7876, 22, 1772, 6, 23, 750, 3779, 3796, 1099, 1100, 29, 388, 1098, 1798, 388, 1098, 1798],
/* 581 */
548,
/* 582 */
[7861, 3901, 3905, 1108],
/* 583 */
[7845, 765, 260, 1833],
/* 584 */
[7859, 3936, 1114],
/* 585 */
548,
/* 586 */
548,
/* 587 */
[7952, 1868],
/* 588 */
[7845, 779, 261, 1876],
/* 589 */
[7859, 4142, 1140],
/* 590 */
548,
/* 591 */
294,
/* 592 */
145,
/* 593 */
548,
/* 594 */
294,
/* 595 */
[7861, 4366, 4370, 1164],
/* 596 */
[7861, 4393, 4397, 1168],
/* 597 */
548,
/* 598 */
294,
/* 599 */
145,
/* 600 */
[7876, 15, 1949, 2, 21, 801, 4447, 4464, 1177, 1178, 26, 395, 1176, 1935, 395, 1176, 1935],
/* 601 */
548,
/* 602 */
294,
/* 603 */
[7845, 802, 262, 1950],
/* 604 */
[7859, 4552, 1187],
/* 605 */
[7876, 15, 1949, 2, 21, 801, 4583, 4600, 1197, 1198, 26, 396, 1196, 1960, 396, 1196, 1960],
/* 606 */
548,
/* 607 */
[7845, 809, 264, 1989],
/* 608 */
[7859, 4715, 1206],
/* 609 */
548,
/* 610 */
[7952, 2024],
/* 611 */
[7845, 820, 266, 2027],
/* 612 */
[7859, 4878, 1226],
/* 613 */
[7876, 27, 2025, 7, 24, 819, 4899, 4916, 1235, 1236, 30, 399, 1234, 2036, 399, 1234, 2036],
/* 614 */
548,
/* 615 */
[7876, 27, 2025, 7, 24, 819, 4997, 5014, 1244, 1245, 30, 401, 1243, 2051, 401, 1243, 2051],
/* 616 */
548,
/* 617 */
[7876, 12, 2103, 4, 9, 839, 5116, 5133, 1252, 1253, 85, 403, 1251, 2077, 403, 1251, 2077],
/* 618 */
548,
/* 619 */
[7845, 840, 269, 2108],
/* 620 */
[7859, 5241, 1260],
/* 621 */
548,
/* 622 */
[7952, 2143],
/* 623 */
[7818, 5394],
/* 624 */
[7845, 848, 270, 2147],
/* 625 */
[7859, 5407, 1279],
/* 626 */
548,
/* 627 */
[7952, 2182],
/* 628 */
[7876, 88, 5700, 36, 67, 2213, 5549, 5566, 856, 1298, 79, 407, 1297, 2183, 407, 1297, 2183],
/* 629 */
548,
/* 630 */
294,
/* 631 */
[7818, 5708],
/* 632 */
[7845, 864, 271, 2214],
/* 633 */
[7859, 5721, 1310],
/* 634 */
[7845, 866, 272, 2227],
/* 635 */
[7859, 5771, 1321],
/* 636 */
548,
/* 637 */
294,
/* 638 */
145,
/* 639 */
548,
/* 640 */
294,
/* 641 */
[7818, 5992],
/* 642 */
[7845, 877, 273, 2272],
/* 643 */
[7859, 6005, 1347],
/* 644 */
[7876, 99, 5983, 47, 75, 2271, 6036, 6053, 1357, 1358, 89, 411, 1356, 2282, 411, 1356, 2282],
/* 645 */
548,
/* 646 */
[7861, 6158, 6162, 1365],
/* 647 */
[7818, 6185],
/* 648 */
[7845, 886, 275, 2315],
/* 649 */
[7859, 6198, 1370],
/* 650 */
[7876, 100, 6176, 41, 68, 2314, 6229, 6246, 1380, 1381, 80, 413, 1379, 2325, 413, 1379, 2325],
/* 651 */
548,
/* 652 */
[7861, 6351, 6355, 1388],
/* 653 */
[7876, 101, 6503, 37, 69, 2391, 6392, 6409, 1395, 1396, 90, 415, 1394, 2366, 415, 1394, 2366],
/* 654 */
548,
/* 655 */
[7818, 6512],
/* 656 */
[7845, 901, 278, 2392],
/* 657 */
[7859, 6525, 1404],
/* 658 */
548,
/* 659 */
[7876, 16, 2437, 3, 17, 913, 6569, 6586, 1413, 519, 28, 417, 1412, 2403, 417, 1412, 2403],
/* 660 */
548,
/* 661 */
[7876, 16, 2437, 3, 17, 913, 6633, 6650, 1416, 519, 28, 418, 1415, 2411, 418, 1415, 2411],
/* 662 */
548,
/* 663 */
[7952, 2436],
/* 664 */
[7845, 914, 279, 2438],
/* 665 */
[7859, 6758, 1429],
/* 666 */
[7876, 102, 6902, 38, 70, 2475, 6792, 6809, 1439, 1440, 81, 419, 1438, 2449, 419, 1438, 2449],
/* 667 */
548,
/* 668 */
[7818, 6911],
/* 669 */
[7845, 921, 281, 2476],
/* 670 */
[7859, 6924, 1447],
/* 671 */
[7861, 6960, 6964, 1456],
/* 672 */
[7861, 6993, 6997, 1459],
/* 673 */
[7861, 7023, 7027, 1462],
/* 674 */
[7861, 7055, 7059, 1465],
/* 675 */
[7876, 103, 7188, 43, 76, 2540, 7078, 7095, 1469, 1471, 91, 421, 1468, 2515, 421, 1468, 2515],
/* 676 */
548,
/* 677 */
[7818, 7197],
/* 678 */
[7845, 936, 283, 2541],
/* 679 */
[7859, 7210, 1478],
/* 680 */
[7876, 93, 7354, 44, 77, 2577, 7244, 7261, 1488, 1490, 92, 423, 1487, 2552, 423, 1487, 2552],
/* 681 */
548,
/* 682 */
[7818, 7363],
/* 683 */
[7845, 943, 285, 2578],
/* 684 */
[7859, 7376, 1497],
/* 685 */
[7818, 7413],
/* 686 */
[7845, 945, 286, 2590],
/* 687 */
[7859, 7426, 1509],
/* 688 */
[7876, 104, 7404, 32, 53, 2589, 7446, 7463, 1518, 1519, 57, 425, 1517, 2599, 425, 1517, 2599],
/* 689 */
294,
/* 690 */
548,
/* 691 */
[7818, 7612],
/* 692 */
[7845, 954, 287, 2631],
/* 693 */
[7859, 7625, 1531],
/* 694 */
[7876, 94, 7603, 48, 78, 2630, 7656, 7673, 1541, 1542, 95, 426, 1540, 2641, 426, 1540, 2641],
/* 695 */
548,
/* 696 */
[7813, 2718],
/* 697 */
[7823, 2742],
/* 698 */
[7842, 2746],
/* 699 */
/***/ function(module, exports) {

	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function(it){
	  if(it == undefined)throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 700 */
/***/ function(module, exports) {

	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function(it, key){
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 701 */
/***/ function(module, exports) {

	module.exports = function(it){
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 702 */
[7856, 108, 700, 292],
/* 703 */
[7923, 60, 171, 429],
/* 704 */
[7927, 60, 429],
/* 705 */
[7931, 2830],
/* 706 */
[7933, 1587, 985, 110, 431, 294, 988, 2876],
/* 707 */
[7937, 2842, 2843, 549, 1601, 2879],
/* 708 */
[7965, 2871],
/* 709 */
/***/ function(module, exports) {

	/** Used to detect unsigned integer values. */
	var reIsUint = /^\d+$/;

	/**
	 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
	 * of an array-like value.
	 */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
	  length = length == null ? MAX_SAFE_INTEGER : length;
	  return value > -1 && value % 1 == 0 && value < length;
	}

	module.exports = isIndex;


/***/ },
/* 710 */
[7974, 1583, 549, 431],
/* 711 */
546,
/* 712 */
108,
/* 713 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("asyncFunctions");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 714 */
[7923, 106, 174, 432],
/* 715 */
[7927, 106, 432],
/* 716 */
[7923, 106, 176, 435],
/* 717 */
[7927, 106, 435],
/* 718 */
172,
/* 719 */
[7977, 1638, 557, 718],
/* 720 */
[7988, 1638, 1005, 436, 3036],
/* 721 */
[7965, 3104],
/* 722 */
[7988, 721, 1010, 146, 3100],
/* 723 */
544,
/* 724 */
546,
/* 725 */
[7923, 39, 178, 439],
/* 726 */
[7927, 39, 439],
/* 727 */
[7923, 39, 180, 441],
/* 728 */
[7927, 39, 441],
/* 729 */
172,
/* 730 */
[7977, 1685, 565, 729],
/* 731 */
[7988, 1685, 1030, 442, 3272],
/* 732 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj) {
	  return obj && obj.__esModule ? obj["default"] : obj;
	};

	exports.__esModule = true;

/***/ },
/* 733 */
544,
/* 734 */
546,
/* 735 */
[7923, 39, 183, 444],
/* 736 */
[7927, 39, 444],
/* 737 */
[7952, 1724],
/* 738 */
[7965, 3434],
/* 739 */
[7968, 1051, 1052, 147],
/* 740 */
544,
/* 741 */
546,
/* 742 */
[7923, 111, 185, 448],
/* 743 */
[7927, 111, 448],
/* 744 */
[7965, 3599],
/* 745 */
709,
/* 746 */
[7968, 1071, 745, 148],
/* 747 */
[7976, 1071, 305],
/* 748 */
546,
/* 749 */
108,
/* 750 */
732,
/* 751 */
544,
/* 752 */
546,
/* 753 */
[7923, 63, 188, 451],
/* 754 */
[7927, 63, 451],
/* 755 */
709,
/* 756 */
172,
/* 757 */
[7988, 1795, 1093, 453, 3756],
/* 758 */
[7923, 63, 190, 454],
/* 759 */
[7927, 63, 454],
/* 760 */
[7952, 1822],
/* 761 */
[7965, 3875],
/* 762 */
[7968, 1102, 1103, 149],
/* 763 */
546,
/* 764 */
108,
/* 765 */
544,
/* 766 */
546,
/* 767 */
[7923, 105, 192, 457],
/* 768 */
[7927, 105, 457],
/* 769 */
[7923, 105, 194, 458],
/* 770 */
[7927, 105, 458],
/* 771 */
[7965, 4080],
/* 772 */
709,
/* 773 */
[7968, 1128, 772, 150],
/* 774 */
[7976, 1128, 313],
/* 775 */
[7972, 776],
/* 776 */
145,
/* 777 */
[7815, 45],
/* 778 */
[7825, 4137],
/* 779 */
544,
/* 780 */
546,
/* 781 */
[7923, 96, 197, 463],
/* 782 */
[7927, 96, 463],
/* 783 */
[7923, 96, 199, 465],
/* 784 */
[7927, 96, 465],
/* 785 */
172,
/* 786 */
[7977, 1900, 594, 785],
/* 787 */
[7988, 1900, 1154, 466, 4273],
/* 788 */
[7965, 4341],
/* 789 */
[7988, 788, 1159, 151, 4337],
/* 790 */
546,
/* 791 */
108,
/* 792 */
546,
/* 793 */
108,
/* 794 */
[7923, 40, 201, 468],
/* 795 */
[7927, 40, 468],
/* 796 */
[7923, 40, 203, 470],
/* 797 */
[7927, 40, 470],
/* 798 */
172,
/* 799 */
[7977, 1945, 602, 798],
/* 800 */
[7988, 1945, 1179, 471, 4517],
/* 801 */
732,
/* 802 */
544,
/* 803 */
546,
/* 804 */
[7923, 40, 206, 473],
/* 805 */
[7927, 40, 473],
/* 806 */
[7952, 1984],
/* 807 */
[7965, 4679],
/* 808 */
[7968, 1200, 1201, 152],
/* 809 */
544,
/* 810 */
546,
/* 811 */
[7923, 112, 208, 478],
/* 812 */
[7927, 112, 478],
/* 813 */
[7965, 4845],
/* 814 */
709,
/* 815 */
[7968, 1220, 814, 153],
/* 816 */
[7976, 1220, 324],
/* 817 */
[7823, 4870],
/* 818 */
[7825, 4873],
/* 819 */
732,
/* 820 */
544,
/* 821 */
546,
/* 822 */
[7923, 65, 211, 481],
/* 823 */
[7927, 65, 481],
/* 824 */
709,
/* 825 */
172,
/* 826 */
[7988, 2048, 1238, 483, 4974],
/* 827 */
[7923, 65, 213, 484],
/* 828 */
[7927, 65, 484],
/* 829 */
[7952, 2075],
/* 830 */
[7965, 5093],
/* 831 */
[7968, 1247, 1248, 154],
/* 832 */
[7923, 66, 215, 486],
/* 833 */
[7927, 66, 486],
/* 834 */
[7952, 2101],
/* 835 */
[7965, 5212],
/* 836 */
[7968, 1255, 1256, 155],
/* 837 */
[7823, 5233],
/* 838 */
[7825, 5236],
/* 839 */
732,
/* 840 */
544,
/* 841 */
546,
/* 842 */
[7923, 66, 218, 490],
/* 843 */
[7927, 66, 490],
/* 844 */
[7965, 5371],
/* 845 */
709,
/* 846 */
[7968, 1274, 845, 156],
/* 847 */
[7976, 1274, 334],
/* 848 */
544,
/* 849 */
546,
/* 850 */
[7923, 113, 221, 494],
/* 851 */
[7927, 113, 494],
/* 852 */
[7965, 5537],
/* 853 */
709,
/* 854 */
[7968, 1293, 853, 157],
/* 855 */
[7976, 1293, 338],
/* 856 */
[7815, 67],
/* 857 */
[7923, 109, 224, 496],
/* 858 */
[7927, 109, 496],
/* 859 */
172,
/* 860 */
[7977, 2193, 630, 859],
/* 861 */
[7988, 2193, 1299, 497, 5619],
/* 862 */
[7965, 5687],
/* 863 */
[7988, 862, 1304, 158, 5683],
/* 864 */
544,
/* 865 */
546,
/* 866 */
544,
/* 867 */
546,
/* 868 */
[7923, 107, 226, 501],
/* 869 */
[7927, 107, 501],
/* 870 */
[7923, 107, 228, 503],
/* 871 */
[7927, 107, 503],
/* 872 */
172,
/* 873 */
[7977, 2251, 640, 872],
/* 874 */
[7988, 2251, 1336, 504, 5902],
/* 875 */
[7965, 5970],
/* 876 */
[7988, 875, 1341, 159, 5966],
/* 877 */
544,
/* 878 */
546,
/* 879 */
[7923, 114, 230, 507],
/* 880 */
[7927, 114, 507],
/* 881 */
[7952, 2306],
/* 882 */
[7965, 6132],
/* 883 */
[7968, 1360, 1361, 160],
/* 884 */
546,
/* 885 */
108,
/* 886 */
544,
/* 887 */
546,
/* 888 */
[7923, 115, 232, 510],
/* 889 */
[7927, 115, 510],
/* 890 */
[7952, 2349],
/* 891 */
[7965, 6325],
/* 892 */
[7968, 1383, 1384, 161],
/* 893 */
546,
/* 894 */
108,
/* 895 */
544,
/* 896 */
[7923, 116, 234, 513],
/* 897 */
[7927, 116, 513],
/* 898 */
[7952, 2389],
/* 899 */
[7965, 6490],
/* 900 */
[7968, 1399, 1400, 162],
/* 901 */
544,
/* 902 */
546,
/* 903 */
[7923, 42, 236, 516],
/* 904 */
[7927, 42, 516],
/* 905 */
[7923, 42, 238, 517],
/* 906 */
[7927, 42, 517],
/* 907 */
[7923, 42, 240, 518],
/* 908 */
[7927, 42, 518],
/* 909 */
[7965, 6727],
/* 910 */
709,
/* 911 */
[7968, 1419, 910, 163],
/* 912 */
[7976, 1419, 359],
/* 913 */
732,
/* 914 */
544,
/* 915 */
546,
/* 916 */
[7923, 117, 244, 522],
/* 917 */
[7927, 117, 522],
/* 918 */
[7952, 2473],
/* 919 */
[7965, 6888],
/* 920 */
[7968, 1442, 1443, 164],
/* 921 */
544,
/* 922 */
546,
/* 923 */
546,
/* 924 */
108,
/* 925 */
546,
/* 926 */
108,
/* 927 */
546,
/* 928 */
108,
/* 929 */
546,
/* 930 */
108,
/* 931 */
[7923, 118, 246, 525],
/* 932 */
[7927, 118, 525],
/* 933 */
[7952, 2538],
/* 934 */
[7965, 7175],
/* 935 */
[7968, 1473, 1474, 165],
/* 936 */
544,
/* 937 */
546,
/* 938 */
[7923, 119, 248, 528],
/* 939 */
[7927, 119, 528],
/* 940 */
[7952, 2575],
/* 941 */
[7965, 7341],
/* 942 */
[7968, 1492, 1493, 166],
/* 943 */
544,
/* 944 */
546,
/* 945 */
544,
/* 946 */
546,
/* 947 */
172,
/* 948 */
[7977, 2608, 689, 947],
/* 949 */
[7988, 2608, 1520, 532, 7503],
/* 950 */
[7965, 7571],
/* 951 */
[7988, 950, 1525, 167, 7567],
/* 952 */
[7923, 120, 250, 534],
/* 953 */
[7927, 120, 534],
/* 954 */
544,
/* 955 */
546,
/* 956 */
[7923, 121, 252, 536],
/* 957 */
[7927, 121, 536],
/* 958 */
[7952, 2665],
/* 959 */
[7965, 7752],
/* 960 */
[7968, 1544, 1545, 168],
/* 961 */
/***/ function(module, exports, __webpack_require__) {

	// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
	//
	// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
	//
	// Originally from narwhal.js (http://narwhaljs.org)
	// Copyright (c) 2009 Thomas Robinson <280north.com>
	//
	// Permission is hereby granted, free of charge, to any person obtaining a copy
	// of this software and associated documentation files (the 'Software'), to
	// deal in the Software without restriction, including without limitation the
	// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
	// sell copies of the Software, and to permit persons to whom the Software is
	// furnished to do so, subject to the following conditions:
	//
	// The above copyright notice and this permission notice shall be included in
	// all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
	// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

	// when used in node, this will actually load the util module we depend on
	// versus loading the builtin util module as happens otherwise
	// this is a bug in node module loading as far as I am concerned
	var util = __webpack_require__(50);

	var pSlice = Array.prototype.slice;
	var hasOwn = Object.prototype.hasOwnProperty;

	// 1. The assert module provides functions that throw
	// AssertionError's when particular conditions are not met. The
	// assert module must conform to the following interface.

	var assert = module.exports = ok;

	// 2. The AssertionError is defined in assert.
	// new assert.AssertionError({ message: message,
	//                             actual: actual,
	//                             expected: expected })

	assert.AssertionError = function AssertionError(options) {
	  this.name = 'AssertionError';
	  this.actual = options.actual;
	  this.expected = options.expected;
	  this.operator = options.operator;
	  if (options.message) {
	    this.message = options.message;
	    this.generatedMessage = false;
	  } else {
	    this.message = getMessage(this);
	    this.generatedMessage = true;
	  }
	  var stackStartFunction = options.stackStartFunction || fail;

	  if (Error.captureStackTrace) {
	    Error.captureStackTrace(this, stackStartFunction);
	  }
	  else {
	    // non v8 browsers so we can have a stacktrace
	    var err = new Error();
	    if (err.stack) {
	      var out = err.stack;

	      // try to strip useless frames
	      var fn_name = stackStartFunction.name;
	      var idx = out.indexOf('\n' + fn_name);
	      if (idx >= 0) {
	        // once we have located the function frame
	        // we need to strip out everything before it (and its line)
	        var next_line = out.indexOf('\n', idx + 1);
	        out = out.substring(next_line + 1);
	      }

	      this.stack = out;
	    }
	  }
	};

	// assert.AssertionError instanceof Error
	util.inherits(assert.AssertionError, Error);

	function replacer(key, value) {
	  if (util.isUndefined(value)) {
	    return '' + value;
	  }
	  if (util.isNumber(value) && !isFinite(value)) {
	    return value.toString();
	  }
	  if (util.isFunction(value) || util.isRegExp(value)) {
	    return value.toString();
	  }
	  return value;
	}

	function truncate(s, n) {
	  if (util.isString(s)) {
	    return s.length < n ? s : s.slice(0, n);
	  } else {
	    return s;
	  }
	}

	function getMessage(self) {
	  return truncate(JSON.stringify(self.actual, replacer), 128) + ' ' +
	         self.operator + ' ' +
	         truncate(JSON.stringify(self.expected, replacer), 128);
	}

	// At present only the three keys mentioned above are used and
	// understood by the spec. Implementations or sub modules can pass
	// other keys to the AssertionError's constructor - they will be
	// ignored.

	// 3. All of the following functions must throw an AssertionError
	// when a corresponding condition is not met, with a message that
	// may be undefined if not provided.  All assertion methods provide
	// both the actual and expected values to the assertion error for
	// display purposes.

	function fail(actual, expected, message, operator, stackStartFunction) {
	  throw new assert.AssertionError({
	    message: message,
	    actual: actual,
	    expected: expected,
	    operator: operator,
	    stackStartFunction: stackStartFunction
	  });
	}

	// EXTENSION! allows for well behaved errors defined elsewhere.
	assert.fail = fail;

	// 4. Pure assertion tests whether a value is truthy, as determined
	// by !!guard.
	// assert.ok(guard, message_opt);
	// This statement is equivalent to assert.equal(true, !!guard,
	// message_opt);. To test strictly for the value true, use
	// assert.strictEqual(true, guard, message_opt);.

	function ok(value, message) {
	  if (!value) fail(value, true, message, '==', assert.ok);
	}
	assert.ok = ok;

	// 5. The equality assertion tests shallow, coercive equality with
	// ==.
	// assert.equal(actual, expected, message_opt);

	assert.equal = function equal(actual, expected, message) {
	  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
	};

	// 6. The non-equality assertion tests for whether two objects are not equal
	// with != assert.notEqual(actual, expected, message_opt);

	assert.notEqual = function notEqual(actual, expected, message) {
	  if (actual == expected) {
	    fail(actual, expected, message, '!=', assert.notEqual);
	  }
	};

	// 7. The equivalence assertion tests a deep equality relation.
	// assert.deepEqual(actual, expected, message_opt);

	assert.deepEqual = function deepEqual(actual, expected, message) {
	  if (!_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
	  }
	};

	function _deepEqual(actual, expected) {
	  // 7.1. All identical values are equivalent, as determined by ===.
	  if (actual === expected) {
	    return true;

	  } else if (util.isBuffer(actual) && util.isBuffer(expected)) {
	    if (actual.length != expected.length) return false;

	    for (var i = 0; i < actual.length; i++) {
	      if (actual[i] !== expected[i]) return false;
	    }

	    return true;

	  // 7.2. If the expected value is a Date object, the actual value is
	  // equivalent if it is also a Date object that refers to the same time.
	  } else if (util.isDate(actual) && util.isDate(expected)) {
	    return actual.getTime() === expected.getTime();

	  // 7.3 If the expected value is a RegExp object, the actual value is
	  // equivalent if it is also a RegExp object with the same source and
	  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
	  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
	    return actual.source === expected.source &&
	           actual.global === expected.global &&
	           actual.multiline === expected.multiline &&
	           actual.lastIndex === expected.lastIndex &&
	           actual.ignoreCase === expected.ignoreCase;

	  // 7.4. Other pairs that do not both pass typeof value == 'object',
	  // equivalence is determined by ==.
	  } else if (!util.isObject(actual) && !util.isObject(expected)) {
	    return actual == expected;

	  // 7.5 For all other Object pairs, including Array objects, equivalence is
	  // determined by having the same number of owned properties (as verified
	  // with Object.prototype.hasOwnProperty.call), the same set of keys
	  // (although not necessarily the same order), equivalent values for every
	  // corresponding key, and an identical 'prototype' property. Note: this
	  // accounts for both named and indexed properties on Arrays.
	  } else {
	    return objEquiv(actual, expected);
	  }
	}

	function isArguments(object) {
	  return Object.prototype.toString.call(object) == '[object Arguments]';
	}

	function objEquiv(a, b) {
	  if (util.isNullOrUndefined(a) || util.isNullOrUndefined(b))
	    return false;
	  // an identical 'prototype' property.
	  if (a.prototype !== b.prototype) return false;
	  // if one is a primitive, the other must be same
	  if (util.isPrimitive(a) || util.isPrimitive(b)) {
	    return a === b;
	  }
	  var aIsArgs = isArguments(a),
	      bIsArgs = isArguments(b);
	  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
	    return false;
	  if (aIsArgs) {
	    a = pSlice.call(a);
	    b = pSlice.call(b);
	    return _deepEqual(a, b);
	  }
	  var ka = objectKeys(a),
	      kb = objectKeys(b),
	      key, i;
	  // having the same number of owned properties (keys incorporates
	  // hasOwnProperty)
	  if (ka.length != kb.length)
	    return false;
	  //the same set of keys (although not necessarily the same order),
	  ka.sort();
	  kb.sort();
	  //~~~cheap key test
	  for (i = ka.length - 1; i >= 0; i--) {
	    if (ka[i] != kb[i])
	      return false;
	  }
	  //equivalent values for every corresponding key, and
	  //~~~possibly expensive deep test
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!_deepEqual(a[key], b[key])) return false;
	  }
	  return true;
	}

	// 8. The non-equivalence assertion tests for any deep inequality.
	// assert.notDeepEqual(actual, expected, message_opt);

	assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
	  if (_deepEqual(actual, expected)) {
	    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
	  }
	};

	// 9. The strict equality assertion tests strict equality, as determined by ===.
	// assert.strictEqual(actual, expected, message_opt);

	assert.strictEqual = function strictEqual(actual, expected, message) {
	  if (actual !== expected) {
	    fail(actual, expected, message, '===', assert.strictEqual);
	  }
	};

	// 10. The strict non-equality assertion tests for strict inequality, as
	// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

	assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
	  if (actual === expected) {
	    fail(actual, expected, message, '!==', assert.notStrictEqual);
	  }
	};

	function expectedException(actual, expected) {
	  if (!actual || !expected) {
	    return false;
	  }

	  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
	    return expected.test(actual);
	  } else if (actual instanceof expected) {
	    return true;
	  } else if (expected.call({}, actual) === true) {
	    return true;
	  }

	  return false;
	}

	function _throws(shouldThrow, block, expected, message) {
	  var actual;

	  if (util.isString(expected)) {
	    message = expected;
	    expected = null;
	  }

	  try {
	    block();
	  } catch (e) {
	    actual = e;
	  }

	  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
	            (message ? ' ' + message : '.');

	  if (shouldThrow && !actual) {
	    fail(actual, expected, 'Missing expected exception' + message);
	  }

	  if (!shouldThrow && expectedException(actual, expected)) {
	    fail(actual, expected, 'Got unwanted exception' + message);
	  }

	  if ((shouldThrow && actual && expected &&
	      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
	    throw actual;
	  }
	}

	// 11. Expected to throw an error:
	// assert.throws(block, Error_opt, message_opt);

	assert.throws = function(block, /*optional*/error, /*optional*/message) {
	  _throws.apply(this, [true].concat(pSlice.call(arguments)));
	};

	// EXTENSION! This is annoying to write outside this module.
	assert.doesNotThrow = function(block, /*optional*/message) {
	  _throws.apply(this, [false].concat(pSlice.call(arguments)));
	};

	assert.ifError = function(err) { if (err) {throw err;}};

	var objectKeys = Object.keys || function (obj) {
	  var keys = [];
	  for (var key in obj) {
	    if (hasOwn.call(obj, key)) keys.push(key);
	  }
	  return keys;
	};


/***/ },
/* 962 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _inherits = __webpack_require__(377)["default"];

	var _classCallCheck = __webpack_require__(60)["default"];

	var _Map2 = __webpack_require__(2722)["default"];

	exports.__esModule = true;

	var Store = (function (_Map) {
	  _inherits(Store, _Map);

	  function Store() {
	    _classCallCheck(this, Store);

	    _Map.call(this);
	    this.dynamicData = {};
	  }

	  Store.prototype.setDynamic = function setDynamic(key, fn) {
	    this.dynamicData[key] = fn;
	  };

	  Store.prototype.get = function get(key /*: string*/) /*: any*/ {
	    if (this.has(key)) {
	      return _Map.prototype.get.call(this, key);
	    } else {
	      if (Object.prototype.hasOwnProperty.call(this.dynamicData, key)) {
	        var val = this.dynamicData[key]();
	        this.set(key, val);
	        return val;
	      }
	    }
	  };

	  return Store;
	})(_Map2);

	exports["default"] = Store;
	module.exports = exports["default"];

/***/ },
/* 963 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {/* global BabelParserOptions */
	/* global BabelFileMetadata */
	/* global BabelFileResult */

	"use strict";

	var _inherits = __webpack_require__(377)["default"];

	var _classCallCheck = __webpack_require__(60)["default"];

	var _getIterator = __webpack_require__(49)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;

	var _babelHelpers = __webpack_require__(1554);

	var _babelHelpers2 = _interopRequireDefault(_babelHelpers);

	var _metadata = __webpack_require__(2676);

	var metadataVisitor = _interopRequireWildcard(_metadata);

	var _convertSourceMap = __webpack_require__(2822);

	var _convertSourceMap2 = _interopRequireDefault(_convertSourceMap);

	var _optionsOptionManager = __webpack_require__(539);

	var _optionsOptionManager2 = _interopRequireDefault(_optionsOptionManager);

	var _pluginPass = __webpack_require__(2680);

	var _pluginPass2 = _interopRequireDefault(_pluginPass);

	var _shebangRegex = __webpack_require__(2886);

	var _shebangRegex2 = _interopRequireDefault(_shebangRegex);

	var _babelTraverse = __webpack_require__(169);

	var _sourceMap = __webpack_require__(1606);

	var _sourceMap2 = _interopRequireDefault(_sourceMap);

	var _babelGenerator = __webpack_require__(1552);

	var _babelGenerator2 = _interopRequireDefault(_babelGenerator);

	var _babelCodeFrame = __webpack_require__(1549);

	var _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);

	var _lodashObjectDefaults = __webpack_require__(1600);

	var _lodashObjectDefaults2 = _interopRequireDefault(_lodashObjectDefaults);

	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

	var _logger = __webpack_require__(2675);

	var _logger2 = _interopRequireDefault(_logger);

	var _store = __webpack_require__(962);

	var _store2 = _interopRequireDefault(_store);

	var _babylon = __webpack_require__(980);

	var _util = __webpack_require__(967);

	var util = _interopRequireWildcard(_util);

	var _path = __webpack_require__(289);

	var _path2 = _interopRequireDefault(_path);

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	var _internalPluginsBlockHoist = __webpack_require__(2677);

	var _internalPluginsBlockHoist2 = _interopRequireDefault(_internalPluginsBlockHoist);

	var _internalPluginsShadowFunctions = __webpack_require__(2678);

	var _internalPluginsShadowFunctions2 = _interopRequireDefault(_internalPluginsShadowFunctions);

	/*:: import type Pipeline from "../pipeline";*/
	/*:: import type Plugin from "../plugin";*/

	var INTERNAL_PLUGINS = [[_internalPluginsBlockHoist2["default"]], [_internalPluginsShadowFunctions2["default"]]];

	var errorVisitor = {
	  enter: function enter(path, state) {
	    var loc = path.node.loc;
	    if (loc) {
	      state.loc = loc;
	      path.stop();
	    }
	  }
	};

	var File = (function (_Store) {
	  _inherits(File, _Store);

	  function File(opts /*: Object*/, pipeline /*: Pipeline*/) {
	    if (opts === undefined) opts = {};

	    _classCallCheck(this, File);

	    _Store.call(this);

	    this.pipeline = pipeline;

	    this.log = new _logger2["default"](this, opts.filename || "unknown");
	    this.opts = this.initOptions(opts);

	    this.parserOpts = {
	      highlightCode: this.opts.highlightCode,
	      nonStandard: this.opts.nonStandard,
	      sourceType: this.opts.sourceType,
	      filename: this.opts.filename,
	      plugins: []
	    };

	    this.pluginVisitors = [];
	    this.pluginPasses = [];
	    this.pluginStack = [];
	    this.buildPlugins();

	    this.metadata = {
	      usedHelpers: [],
	      marked: [],
	      modules: {
	        imports: [],
	        exports: {
	          exported: [],
	          specifiers: []
	        }
	      }
	    };

	    this.dynamicImportTypes = {};
	    this.dynamicImportIds = {};
	    this.dynamicImports = [];
	    this.declarations = {};
	    this.usedHelpers = {};

	    this.path = null;
	    this.ast = {};

	    this.code = "";
	    this.shebang = "";

	    this.hub = new _babelTraverse.Hub(this);
	  }

	  File.prototype.getMetadata = function getMetadata() {
	    var has = false;
	    for (var _iterator = (this.ast.program.body /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var node = _ref;

	      if (t.isModuleDeclaration(node)) {
	        has = true;
	        break;
	      }
	    }
	    if (has) {
	      this.path.traverse(metadataVisitor, this);
	    }
	  };

	  File.prototype.initOptions = function initOptions(opts) {
	    opts = new _optionsOptionManager2["default"](this.log, this.pipeline).init(opts);

	    if (opts.inputSourceMap) {
	      opts.sourceMaps = true;
	    }

	    if (opts.moduleId) {
	      opts.moduleIds = true;
	    }

	    opts.basename = _path2["default"].basename(opts.filename, _path2["default"].extname(opts.filename));

	    opts.ignore = util.arrayify(opts.ignore, util.regexify);

	    if (opts.only) opts.only = util.arrayify(opts.only, util.regexify);

	    _lodashObjectDefaults2["default"](opts, {
	      moduleRoot: opts.sourceRoot
	    });

	    _lodashObjectDefaults2["default"](opts, {
	      sourceRoot: opts.moduleRoot
	    });

	    _lodashObjectDefaults2["default"](opts, {
	      filenameRelative: opts.filename
	    });

	    var basenameRelative = _path2["default"].basename(opts.filenameRelative);

	    _lodashObjectDefaults2["default"](opts, {
	      sourceFileName: basenameRelative,
	      sourceMapTarget: basenameRelative
	    });

	    return opts;
	  };

	  File.prototype.buildPlugins = function buildPlugins() {
	    var plugins /*: Array<[PluginPass, Object]>*/ = this.opts.plugins.concat(INTERNAL_PLUGINS);

	    // init plugins!
	    for (var _iterator2 = plugins, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var ref = _ref2;
	      var plugin = ref[0];
	      var pluginOpts = ref[1];
	      // todo: fix - can't embed in loop head because of flow bug

	      this.pluginStack.push(plugin);
	      this.pluginVisitors.push(plugin.visitor);
	      this.pluginPasses.push(new _pluginPass2["default"](this, plugin, pluginOpts));

	      if (plugin.manipulateOptions) {
	        plugin.manipulateOptions(this.opts, this.parserOpts, this);
	      }
	    }
	  };

	  File.prototype.getModuleName = function getModuleName() /*: ?string*/ {
	    var opts = this.opts;
	    if (!opts.moduleIds) {
	      return null;
	    }

	    // moduleId is n/a if a `getModuleId()` is provided
	    if (opts.moduleId != null && !opts.getModuleId) {
	      return opts.moduleId;
	    }

	    var filenameRelative = opts.filenameRelative;
	    var moduleName = "";

	    if (opts.moduleRoot != null) {
	      moduleName = opts.moduleRoot + "/";
	    }

	    if (!opts.filenameRelative) {
	      return moduleName + opts.filename.replace(/^\//, "");
	    }

	    if (opts.sourceRoot != null) {
	      // remove sourceRoot from filename
	      var sourceRootRegEx = new RegExp("^" + opts.sourceRoot + "\/?");
	      filenameRelative = filenameRelative.replace(sourceRootRegEx, "");
	    }

	    // remove extension
	    filenameRelative = filenameRelative.replace(/\.(\w*?)$/, "");

	    moduleName += filenameRelative;

	    // normalize path separators
	    moduleName = moduleName.replace(/\\/g, "/");

	    if (opts.getModuleId) {
	      // If return is falsy, assume they want us to use our generated default name
	      return opts.getModuleId(moduleName) || moduleName;
	    } else {
	      return moduleName;
	    }
	  };

	  File.prototype.resolveModuleSource = function resolveModuleSource(source /*: string*/) /*: string*/ {
	    var resolveModuleSource = this.opts.resolveModuleSource;
	    if (resolveModuleSource) source = resolveModuleSource(source, this.opts.filename);
	    return source;
	  };

	  File.prototype.addImport = function addImport(source /*: string*/, imported /*: string*/) /*: Object*/ {
	    var name /*:: ?: string*/ = arguments.length <= 2 || arguments[2] === undefined ? imported : arguments[2];
	    return (function () {
	      var alias = source + ":" + imported;
	      var id = this.dynamicImportIds[alias];

	      if (!id) {
	        source = this.resolveModuleSource(source);
	        id = this.dynamicImportIds[alias] = this.scope.generateUidIdentifier(name);

	        var specifiers = [];

	        if (imported === "*") {
	          specifiers.push(t.importNamespaceSpecifier(id));
	        } else if (imported === "default") {
	          specifiers.push(t.importDefaultSpecifier(id));
	        } else {
	          specifiers.push(t.importSpecifier(id, t.identifier(imported)));
	        }

	        var declar = t.importDeclaration(specifiers, t.stringLiteral(source));
	        declar._blockHoist = 3;

	        this.path.unshiftContainer("body", declar);
	      }

	      return id;
	    }).apply(this, arguments);
	  };

	  File.prototype.addHelper = function addHelper(name /*: string*/) /*: Object*/ {
	    var declar = this.declarations[name];
	    if (declar) return declar;

	    if (!this.usedHelpers[name]) {
	      this.metadata.usedHelpers.push(name);
	      this.usedHelpers[name] = true;
	    }

	    var generator = this.get("helperGenerator");
	    var runtime = this.get("helpersNamespace");
	    if (generator) {
	      var res = generator(name);
	      if (res) return res;
	    } else if (runtime) {
	      return t.memberExpression(runtime, t.identifier(name));
	    }

	    var ref = _babelHelpers2["default"](name);
	    var uid = this.declarations[name] = this.scope.generateUidIdentifier(name);

	    if (t.isFunctionExpression(ref) && !ref.id) {
	      ref.body._compact = true;
	      ref._generated = true;
	      ref.id = uid;
	      ref.type = "FunctionDeclaration";
	      this.path.unshiftContainer("body", ref);
	    } else {
	      ref._compact = true;
	      this.scope.push({
	        id: uid,
	        init: ref,
	        unique: true
	      });
	    }

	    return uid;
	  };

	  File.prototype.addTemplateObject = function addTemplateObject(helperName /*: string*/, strings /*: Array<Object>*/, raw /*: Object*/) /*: Object*/ {
	    // Generate a unique name based on the string literals so we dedupe
	    // identical strings used in the program.
	    var stringIds = raw.elements.map(function (string) {
	      return string.value;
	    });
	    var name = helperName + "_" + raw.elements.length + "_" + stringIds.join(",");

	    var declar = this.declarations[name];
	    if (declar) return declar;

	    var uid = this.declarations[name] = this.scope.generateUidIdentifier("templateObject");

	    var helperId = this.addHelper(helperName);
	    var init = t.callExpression(helperId, [strings, raw]);
	    init._compact = true;
	    this.scope.push({
	      id: uid,
	      init: init,
	      _blockHoist: 1.9 // This ensures that we don't fail if not using function expression helpers
	    });
	    return uid;
	  };

	  File.prototype.buildCodeFrameError = function buildCodeFrameError(node /*: Object*/, msg /*: string*/) /*: Error*/ {
	    var Error /*: typeof Error*/ = arguments.length <= 2 || arguments[2] === undefined ? SyntaxError : arguments[2];

	    var loc = node && (node.loc || node._loc);

	    var err = new Error(msg);

	    if (loc) {
	      err.loc = loc.start;
	    } else {
	      _babelTraverse2["default"](node, errorVisitor, this.scope, err);

	      err.message += " (This is an error on an internal node. Probably an internal error";

	      if (err.loc) {
	        err.message += ". Location has been estimated.";
	      }

	      err.message += ")";
	    }

	    return err;
	  };

	  File.prototype.mergeSourceMap = function mergeSourceMap(map /*: Object*/) {
	    var inputMap = this.opts.inputSourceMap;

	    if (inputMap) {
	      var _ret = (function () {
	        var inputMapConsumer = new _sourceMap2["default"].SourceMapConsumer(inputMap);
	        var outputMapConsumer = new _sourceMap2["default"].SourceMapConsumer(map);

	        var mergedGenerator = new _sourceMap2["default"].SourceMapGenerator({
	          file: inputMapConsumer.file,
	          sourceRoot: inputMapConsumer.sourceRoot
	        });

	        // This assumes the output map always has a single source, since Babel always compiles a single source file to a
	        // single output file.
	        var source = outputMapConsumer.sources[0];

	        inputMapConsumer.eachMapping(function (mapping) {
	          var generatedPosition = outputMapConsumer.generatedPositionFor({
	            line: mapping.generatedLine,
	            column: mapping.generatedColumn,
	            source: source
	          });
	          if (generatedPosition.column != null) {
	            mergedGenerator.addMapping({
	              source: mapping.source,

	              original: {
	                line: mapping.originalLine,
	                column: mapping.originalColumn
	              },

	              generated: generatedPosition
	            });
	          }
	        });

	        var mergedMap = mergedGenerator.toJSON();
	        inputMap.mappings = mergedMap.mappings;
	        return {
	          v: inputMap
	        };
	      })();

	      // istanbul ignore next
	      if (typeof _ret === "object") return _ret.v;
	    } else {
	      return map;
	    }
	  };

	  File.prototype.parse = function parse(code /*: string*/) {
	    this.log.debug("Parse start");
	    var ast = _babylon.parse(code, this.parserOpts);
	    this.log.debug("Parse stop");
	    return ast;
	  };

	  File.prototype._addAst = function _addAst(ast) {
	    this.path = _babelTraverse.NodePath.get({
	      hub: this.hub,
	      parentPath: null,
	      parent: ast,
	      container: ast,
	      key: "program"
	    }).setContext();
	    this.scope = this.path.scope;
	    this.ast = ast;
	    this.getMetadata();
	  };

	  File.prototype.addAst = function addAst(ast) {
	    this.log.debug("Start set AST");
	    this._addAst(ast);
	    this.log.debug("End set AST");
	  };

	  File.prototype.transform = function transform() /*: BabelFileResult*/ {
	    this.call("pre");
	    this.log.debug("Start transform traverse");
	    _babelTraverse2["default"](this.ast, _babelTraverse2["default"].visitors.merge(this.pluginVisitors, this.pluginPasses), this.scope);
	    this.log.debug("End transform traverse");
	    this.call("post");
	    return this.generate();
	  };

	  File.prototype.wrap = function wrap(code /*: string*/, callback /*: Function*/) /*: BabelFileResult*/ {
	    code = code + "";

	    try {
	      if (this.shouldIgnore()) {
	        return this.makeResult({ code: code, ignored: true });
	      } else {
	        return callback();
	      }
	    } catch (err) {
	      if (err._babel) {
	        throw err;
	      } else {
	        err._babel = true;
	      }

	      var message = err.message = this.opts.filename + ": " + err.message;

	      var loc = err.loc;
	      if (loc) {
	        err.codeFrame = _babelCodeFrame2["default"](code, loc.line, loc.column + 1, this.opts);
	        message += "\n" + err.codeFrame;
	      }

	      if (process.browser) {
	        // chrome has it's own pretty stringifier which doesn't use the stack property
	        // https://github.com/babel/babel/issues/2175
	        err.message = message;
	      }

	      if (err.stack) {
	        var newStack = err.stack.replace(err.message, message);
	        err.stack = newStack;
	      }

	      throw err;
	    }
	  };

	  File.prototype.addCode = function addCode(code /*: string*/) {
	    code = (code || "") + "";
	    code = this.parseInputSourceMap(code);
	    this.code = code;
	  };

	  File.prototype.parseCode = function parseCode() {
	    this.parseShebang();
	    var ast = this.parse(this.code);
	    this.addAst(ast);
	  };

	  File.prototype.shouldIgnore = function shouldIgnore() {
	    var opts = this.opts;
	    return util.shouldIgnore(opts.filename, opts.ignore, opts.only);
	  };

	  File.prototype.call = function call(key /*: "pre" | "post"*/) {
	    for (var _iterator3 = (this.pluginPasses /*: Array<PluginPass>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;

	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }

	      var pass = _ref3;

	      var plugin = pass.plugin;
	      var fn = plugin[key];
	      if (fn) fn.call(pass, this);
	    }
	  };

	  File.prototype.parseInputSourceMap = function parseInputSourceMap(code /*: string*/) /*: string*/ {
	    var opts = this.opts;

	    if (opts.inputSourceMap !== false) {
	      var inputMap = _convertSourceMap2["default"].fromSource(code);
	      if (inputMap) {
	        opts.inputSourceMap = inputMap.toObject();
	        code = _convertSourceMap2["default"].removeComments(code);
	      }
	    }

	    return code;
	  };

	  File.prototype.parseShebang = function parseShebang() {
	    var shebangMatch = _shebangRegex2["default"].exec(this.code);
	    if (shebangMatch) {
	      this.shebang = shebangMatch[0];
	      this.code = this.code.replace(_shebangRegex2["default"], "");
	    }
	  };

	  File.prototype.makeResult = function makeResult(_ref4 /*: BabelFileResult*/) /*: BabelFileResult*/ {
	    var code = _ref4.code;
	    var map = _ref4.map;
	    var ast = _ref4.ast;
	    var ignored = _ref4.ignored;

	    var result = {
	      metadata: null,
	      options: this.opts,
	      ignored: !!ignored,
	      code: null,
	      ast: null,
	      map: map || null
	    };

	    if (this.opts.code) {
	      result.code = code;
	    }

	    if (this.opts.ast) {
	      result.ast = ast;
	    }

	    if (this.opts.metadata) {
	      result.metadata = this.metadata;
	    }

	    return result;
	  };

	  File.prototype.generate = function generate() /*: BabelFileResult*/ {
	    var opts = this.opts;
	    var ast = this.ast;

	    var result /*: BabelFileResult*/ = { ast: ast };
	    if (!opts.code) return this.makeResult(result);

	    this.log.debug("Generation start");

	    var _result = _babelGenerator2["default"](ast, opts, this.code);
	    result.code = _result.code;
	    result.map = _result.map;

	    this.log.debug("Generation end");

	    if (this.shebang) {
	      // add back shebang
	      result.code = this.shebang + "\n" + result.code;
	    }

	    if (result.map) {
	      result.map = this.mergeSourceMap(result.map);
	    }

	    if (opts.sourceMaps === "inline" || opts.sourceMaps === "both") {
	      result.code += "\n" + _convertSourceMap2["default"].fromObject(result.map).toComment();
	    }

	    if (opts.sourceMaps === "inline") {
	      result.map = null;
	    }

	    return this.makeResult(result);
	  };

	  return File;
	})(_store2["default"]);

	exports["default"] = File;
	exports.File = File;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 964 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	exports.__esModule = true;
	exports.normaliseOptions = normaliseOptions;

	var _parsers = __webpack_require__(965);

	var parsers = _interopRequireWildcard(_parsers);

	var _config = __webpack_require__(538);

	var _config2 = _interopRequireDefault(_config);

	exports.config = _config2["default"];

	function normaliseOptions() /*: Object*/ {
	  var options /*: Object*/ = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];

	  for (var key in options) {
	    var val = options[key];
	    if (val == null) continue;

	    var opt = _config2["default"][key];
	    if (opt && opt.alias) opt = _config2["default"][opt.alias];
	    if (!opt) continue;

	    var parser = parsers[opt.type];
	    if (parser) val = parser(val);

	    options[key] = val;
	  }

	  return options;
	}

/***/ },
/* 965 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(8)["default"];

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;
	exports.boolean = boolean;
	exports.booleanString = booleanString;
	exports.list = list;

	var _slash = __webpack_require__(1602);

	var _slash2 = _interopRequireDefault(_slash);

	var _util = __webpack_require__(967);

	var util = _interopRequireWildcard(_util);

	var filename = _slash2["default"];

	exports.filename = filename;

	function boolean(val /*: any*/) /*: boolean*/ {
	  return !!val;
	}

	function booleanString(val /*: any*/) /*: boolean | any*/ {
	  return util.booleanify(val);
	}

	function list(val /*: any*/) /*: Array<string>*/ {
	  return util.list(val);
	}

/***/ },
/* 966 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _inherits = __webpack_require__(377)["default"];

	var _classCallCheck = __webpack_require__(60)["default"];

	var _getIterator = __webpack_require__(49)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;

	var _fileOptionsOptionManager = __webpack_require__(539);

	var _fileOptionsOptionManager2 = _interopRequireDefault(_fileOptionsOptionManager);

	var _babelMessages = __webpack_require__(290);

	var messages = _interopRequireWildcard(_babelMessages);

	var _store = __webpack_require__(962);

	var _store2 = _interopRequireDefault(_store);

	var _babelTraverse = __webpack_require__(169);

	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

	var _lodashObjectAssign = __webpack_require__(990);

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var _lodashLangClone = __webpack_require__(710);

	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);

	var GLOBAL_VISITOR_PROPS = ["enter", "exit"];

	var Plugin = (function (_Store) {
	  _inherits(Plugin, _Store);

	  function Plugin(plugin /*: Object*/, key /*:: ?: string*/) {
	    _classCallCheck(this, Plugin);

	    _Store.call(this);

	    this.initialized = false;
	    this.raw = _lodashObjectAssign2["default"]({}, plugin);
	    this.key = key;

	    this.manipulateOptions = this.take("manipulateOptions");
	    this.post = this.take("post");
	    this.pre = this.take("pre");
	    this.visitor = this.normaliseVisitor(_lodashLangClone2["default"](this.take("visitor")) || {});
	  }

	  Plugin.prototype.take = function take(key) {
	    var val = this.raw[key];
	    delete this.raw[key];
	    return val;
	  };

	  Plugin.prototype.chain = function chain(target, key) {
	    if (!target[key]) return this[key];
	    if (!this[key]) return target[key];

	    var fns /*: Array<?Function>*/ = [target[key], this[key]];

	    return function () {
	      var val = undefined;

	      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	      }

	      for (var _iterator = fns, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var fn = _ref;

	        if (fn) {
	          var ret = fn.apply(this, args);
	          if (ret != null) val = ret;
	        }
	      }
	      return val;
	    };
	  };

	  Plugin.prototype.maybeInherit = function maybeInherit(loc /*: string*/) {
	    var inherits = this.take("inherits");
	    if (!inherits) return;

	    inherits = _fileOptionsOptionManager2["default"].normalisePlugin(inherits, loc, "inherits");

	    this.manipulateOptions = this.chain(inherits, "manipulateOptions");
	    this.post = this.chain(inherits, "post");
	    this.pre = this.chain(inherits, "pre");
	    this.visitor = _babelTraverse2["default"].visitors.merge([inherits.visitor, this.visitor]);
	  };

	  /**
	   * We lazy initialise parts of a plugin that rely on contextual information such as
	   * position on disk and how it was specified.
	   */

	  Plugin.prototype.init = function init(loc /*: string*/, i /*: number*/) {
	    if (this.initialized) return;
	    this.initialized = true;

	    this.maybeInherit(loc);

	    for (var key in this.raw) {
	      throw new Error(messages.get("pluginInvalidProperty", loc, i, key));
	    }
	  };

	  Plugin.prototype.normaliseVisitor = function normaliseVisitor(visitor /*: Object*/) /*: Object*/ {
	    for (var _iterator2 = GLOBAL_VISITOR_PROPS, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var key = _ref2;

	      if (visitor[key]) {
	        throw new Error("Plugins aren't allowed to specify catch-all enter/exit handlers. Please target individual nodes.");
	      }
	    }

	    _babelTraverse2["default"].explode(visitor);
	    return visitor;
	  };

	  return Plugin;
	})(_store2["default"]);

	exports["default"] = Plugin;
	module.exports = exports["default"];

/***/ },
/* 967 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(49)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	exports.__esModule = true;
	exports.canCompile = canCompile;
	exports.list = list;
	exports.regexify = regexify;
	exports.arrayify = arrayify;
	exports.booleanify = booleanify;
	exports.shouldIgnore = shouldIgnore;

	var _lodashStringEscapeRegExp = __webpack_require__(2877);

	var _lodashStringEscapeRegExp2 = _interopRequireDefault(_lodashStringEscapeRegExp);

	var _lodashStringStartsWith = __webpack_require__(2878);

	var _lodashStringStartsWith2 = _interopRequireDefault(_lodashStringStartsWith);

	var _lodashLangIsBoolean = __webpack_require__(1595);

	var _lodashLangIsBoolean2 = _interopRequireDefault(_lodashLangIsBoolean);

	var _minimatch = __webpack_require__(2880);

	var _minimatch2 = _interopRequireDefault(_minimatch);

	var _lodashCollectionContains = __webpack_require__(2829);

	var _lodashCollectionContains2 = _interopRequireDefault(_lodashCollectionContains);

	var _lodashLangIsString = __webpack_require__(988);

	var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);

	var _lodashLangIsRegExp = __webpack_require__(1599);

	var _lodashLangIsRegExp2 = _interopRequireDefault(_lodashLangIsRegExp);

	var _path = __webpack_require__(289);

	var _path2 = _interopRequireDefault(_path);

	var _slash = __webpack_require__(1602);

	var _slash2 = _interopRequireDefault(_slash);

	var _util = __webpack_require__(50);

	exports.inherits = _util.inherits;
	exports.inspect = _util.inspect;

	/**
	 * Test if a filename ends with a compilable extension.
	 */

	function canCompile(filename /*: string*/, altExts /*:: ?: Array<string>*/) {
	  var exts = altExts || canCompile.EXTENSIONS;
	  var ext = _path2["default"].extname(filename);
	  return _lodashCollectionContains2["default"](exts, ext);
	}

	/**
	 * Default set of compilable extensions.
	 */

	canCompile.EXTENSIONS = [".js", ".jsx", ".es6", ".es"];

	/**
	 * Create an array from any value, splitting strings by ",".
	 */

	function list(val /*:: ?: string*/) /*: Array<string>*/ {
	  if (!val) {
	    return [];
	  } else if (Array.isArray(val)) {
	    return val;
	  } else if (typeof val === "string") {
	    return val.split(",");
	  } else {
	    return [val];
	  }
	}

	/**
	 * Create a RegExp from a string, array, or regexp.
	 */

	function regexify(val /*: any*/) /*: RegExp*/ {
	  if (!val) {
	    return new RegExp(/.^/);
	  }

	  if (Array.isArray(val)) {
	    val = new RegExp(val.map(_lodashStringEscapeRegExp2["default"]).join("|"), "i");
	  }

	  if (typeof val === "string") {
	    // normalise path separators
	    val = _slash2["default"](val);

	    // remove starting wildcards or relative separator if present
	    if (_lodashStringStartsWith2["default"](val, "./") || _lodashStringStartsWith2["default"](val, "*/")) val = val.slice(2);
	    if (_lodashStringStartsWith2["default"](val, "**/")) val = val.slice(3);

	    var regex = _minimatch2["default"].makeRe(val, { nocase: true });
	    return new RegExp(regex.source.slice(1, -1), "i");
	  }

	  if (_lodashLangIsRegExp2["default"](val)) {
	    return val;
	  }

	  throw new TypeError("illegal type for regexify");
	}

	/**
	 * Create an array from a boolean, string, or array, mapped by and optional function.
	 */

	function arrayify(val /*: any*/, mapFn /*:: ?: Function*/) /*: Array<any>*/ {
	  if (!val) return [];
	  if (_lodashLangIsBoolean2["default"](val)) return arrayify([val], mapFn);
	  if (_lodashLangIsString2["default"](val)) return arrayify(list(val), mapFn);

	  if (Array.isArray(val)) {
	    if (mapFn) val = val.map(mapFn);
	    return val;
	  }

	  return [val];
	}

	/**
	 * Makes boolean-like strings into booleans.
	 */

	function booleanify(val /*: any*/) /*: boolean | any*/ {
	  if (val === "true" || val == 1) {
	    return true;
	  }

	  if (val === "false" || val == 0 || !val) {
	    return false;
	  }

	  return val;
	}

	/**
	 * Tests if a filename should be ignored based on "ignore" and "only" options.
	 */

	function shouldIgnore(filename /*: string*/, ignore /*: Array<RegExp | Function>*/, only /*:: ?: Array<RegExp | Function>*/) /*: boolean*/ {
	  if (ignore === undefined) ignore = [];

	  filename = _slash2["default"](filename);

	  if (only) {
	    for (var _iterator = only, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var pattern = _ref;

	      if (_shouldIgnore(pattern, filename)) return false;
	    }
	    return true;
	  } else if (ignore.length) {
	    for (var _iterator2 = ignore, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var pattern = _ref2;

	      if (_shouldIgnore(pattern, filename)) return true;
	    }
	  }

	  return false;
	}

	/**
	 * Returns result of calling function with filename if pattern is a function.
	 * Otherwise returns result of matching pattern Regex with filename.
	 */

	function _shouldIgnore(pattern /*: Function | RegExp*/, filename /*: string*/) {
	  if (typeof pattern === "function") {
	    return pattern(filename);
	  } else {
	    return pattern.test(filename);
	  }
	}

/***/ },
/* 968 */
732,
/* 969 */
/***/ function(module, exports) {

	var toString = {}.toString;

	module.exports = function(it){
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 970 */
/***/ function(module, exports, __webpack_require__) {

	var ctx         = __webpack_require__(698)
	  , call        = __webpack_require__(2754)
	  , isArrayIter = __webpack_require__(2752)
	  , anObject    = __webpack_require__(541)
	  , toLength    = __webpack_require__(2761)
	  , getIterFn   = __webpack_require__(1566);
	module.exports = function(iterable, entries, fn, that){
	  var iterFn = getIterFn(iterable)
	    , f      = ctx(fn, that, entries ? 2 : 1)
	    , index  = 0
	    , length, step, iterator;
	  if(typeof iterFn != 'function')throw TypeError(iterable + ' is not iterable!');
	  // fast case for arrays with default iterator
	  if(isArrayIter(iterFn))for(length = toLength(iterable.length); length > index; index++){
	    entries ? f(anObject(step = iterable[index])[0], step[1]) : f(iterable[index]);
	  } else for(iterator = iterFn.call(iterable); !(step = iterator.next()).done; ){
	    call(iterator, f, step.value, entries);
	  }
	};

/***/ },
/* 971 */
[7851, 1560, 291, 974, 545, 700, 546, 2755, 702, 108, 292],
/* 972 */
[7853, 291, 144, 543],
/* 973 */
/***/ function(module, exports) {

	module.exports = function(bitmap, value){
	  return {
	    enumerable  : !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable    : !(bitmap & 4),
	    value       : value
	  };
	};

/***/ },
/* 974 */
[7854, 545],
/* 975 */
/***/ function(module, exports) {

	var id = 0
	  , px = Math.random();
	module.exports = function(key){
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 976 */
[7871, 108, 544, 700, 542, 291, 974, 543, 1562, 702, 975, 292, 2756, 1557, 2751, 2753, 541, 547, 973, 1560],
/* 977 */
[7873, 1555, 8, 14, 1594, 2873, 169, 980, 31],
/* 978 */
[7893, 60, 1555, 49, 540, 8, 14, 706, 2792, 2788, 169, 1600, 290, 1573, 2790, 31],
/* 979 */
[7897, 2730],
/* 980 */
[7912, 8, 170, 2817, 2816, 2814, 2812, 2815, 2813, 2811, 171, 1576, 703, 2818, 2819],
/* 981 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.forEach` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	module.exports = arrayEach;


/***/ },
/* 982 */
[7939, 1586, 2855],
/* 983 */
[7943, 295],
/* 984 */
/***/ function(module, exports) {

	/**
	 * Converts `value` to a string if it's not one. An empty string is returned
	 * for `null` or `undefined` values.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  return value == null ? '' : (value + '');
	}

	module.exports = baseToString;


/***/ },
/* 985 */
[7963, 1590],
/* 986 */
[7969, 110, 295],
/* 987 */
[7973, 984, 110],
/* 988 */
[7983, 172],
/* 989 */
[7984, 294, 172],
/* 990 */
[7985, 2837, 1582, 1592],
/* 991 */
[7989, 550, 110, 709, 294, 145],
/* 992 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(2893)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref2) {
	  var messages = _ref2.messages;

	  return {
	    visitor: {
	      Scope: function Scope(_ref3) {
	        var scope = _ref3.scope;

	        for (var _name in scope.bindings) {
	          var binding = scope.bindings[_name];
	          if (binding.kind !== "const" && binding.kind !== "module") continue;

	          for (var _iterator = (binding.constantViolations /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	            var _ref;

	            if (_isArray) {
	              if (_i >= _iterator.length) break;
	              _ref = _iterator[_i++];
	            } else {
	              _i = _iterator.next();
	              if (_i.done) break;
	              _ref = _i.value;
	            }

	            var violation = _ref;

	            throw violation.buildCodeFrameError(messages.get("readOnly", _name));
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 993 */
144,
/* 994 */
544,
/* 995 */
[7847, 712, 1611, 2900],
/* 996 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("flow");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 997 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("jsx");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 998 */
709,
/* 999 */
172,
/* 1000 */
[7972, 555],
/* 1001 */
[7976, 1626, 999],
/* 1002 */
[7893, 106, 1658, 62, 381, 11, 56, 1004, 1641, 2982, 434, 3042, 1003, 1631, 3015, 61],
/* 1003 */
[7815, 56],
/* 1004 */
[7933, 3025, 1637, 719, 1007, 557, 3041, 3044],
/* 1005 */
[7967, 1637, 557],
/* 1006 */
709,
/* 1007 */
[7968, 1005, 1006, 436],
/* 1008 */
[7897, 3119],
/* 1009 */
[7952, 1656],
/* 1010 */
[7967, 1650, 437],
/* 1011 */
709,
/* 1012 */
[7976, 1010, 297],
/* 1013 */
[7840, 1664],
/* 1014 */
969,
/* 1015 */
699,
/* 1016 */
543,
/* 1017 */
700,
/* 1018 */
[7847, 122, 1020, 1662],
/* 1019 */
[7853, 558, 253, 1016],
/* 1020 */
973,
/* 1021 */
[7856, 122, 1017, 438],
/* 1022 */
[7871, 122, 723, 1017, 1662, 558, 1667, 1016, 1668, 1021, 1669, 438, 3141, 1663, 3136, 3138, 1013, 559, 1020, 1666],
/* 1023 */
709,
/* 1024 */
172,
/* 1025 */
[7972, 562],
/* 1026 */
[7976, 1673, 1024],
/* 1027 */
[7893, 39, 1034, 18, 181, 1, 19, 1029, 1688, 3218, 563, 3278, 1028, 1678, 3251, 25],
/* 1028 */
[7815, 19],
/* 1029 */
[7933, 3261, 1684, 730, 1032, 565, 3277, 3280],
/* 1030 */
[7967, 1684, 565],
/* 1031 */
709,
/* 1032 */
[7968, 1030, 1031, 442],
/* 1033 */
[7823, 3299],
/* 1034 */
[7825, 3302],
/* 1035 */
[7828, 181, 3288],
/* 1036 */
[7840, 1693],
/* 1037 */
969,
/* 1038 */
699,
/* 1039 */
543,
/* 1040 */
700,
/* 1041 */
[7847, 123, 1043, 1691],
/* 1042 */
[7853, 566, 254, 1039],
/* 1043 */
973,
/* 1044 */
[7856, 123, 1040, 443],
/* 1045 */
[7871, 123, 733, 1040, 1691, 566, 1696, 1039, 1697, 1044, 1698, 443, 3311, 1692, 3306, 3308, 1036, 567, 1043, 1695],
/* 1046 */
[7897, 3289],
/* 1047 */
[7893, 39, 1034, 18, 181, 1, 19, 1049, 1705, 3354, 568, 3439, 1048, 1703, 3384, 25],
/* 1048 */
[7815, 19],
/* 1049 */
[7933, 1714, 1050, 255, 739, 384, 1721, 3441],
/* 1050 */
[7963, 1716],
/* 1051 */
[7967, 1050, 384],
/* 1052 */
709,
/* 1053 */
[7976, 1051, 301],
/* 1054 */
[7825, 3464],
/* 1055 */
[7840, 1731],
/* 1056 */
969,
/* 1057 */
699,
/* 1058 */
543,
/* 1059 */
700,
/* 1060 */
[7847, 124, 1062, 1729],
/* 1061 */
[7853, 571, 256, 1058],
/* 1062 */
973,
/* 1063 */
[7856, 124, 1059, 446],
/* 1064 */
[7871, 124, 740, 1059, 1729, 571, 1734, 1058, 1735, 1063, 1736, 446, 3473, 1730, 3468, 3470, 1055, 572, 1062, 1733],
/* 1065 */
[7893, 111, 1054, 82, 570, 33, 71, 1068, 1742, 3506, 447, 3604, 1066, 1740, 3526, 83],
/* 1066 */
[7815, 71],
/* 1067 */
[7897, 3450],
/* 1068 */
[7933, 1754, 1070, 186, 746, 304, 1760, 3607],
/* 1069 */
[7943, 306],
/* 1070 */
[7963, 1756],
/* 1071 */
[7967, 1070, 304],
/* 1072 */
[7969, 186, 306],
/* 1073 */
[7973, 3575, 186],
/* 1074 */
144,
/* 1075 */
544,
/* 1076 */
[7847, 749, 1769, 3616],
/* 1077 */
[7823, 3652],
/* 1078 */
[7825, 3655],
/* 1079 */
[7840, 1777],
/* 1080 */
969,
/* 1081 */
699,
/* 1082 */
543,
/* 1083 */
700,
/* 1084 */
[7847, 125, 1086, 1775],
/* 1085 */
[7853, 576, 258, 1082],
/* 1086 */
973,
/* 1087 */
[7856, 125, 1083, 450],
/* 1088 */
[7871, 125, 751, 1083, 1775, 576, 1780, 1082, 1781, 1087, 1782, 450, 3664, 1776, 3659, 3661, 1079, 577, 1086, 1779],
/* 1089 */
[7893, 63, 1078, 22, 257, 6, 23, 1091, 1788, 3697, 578, 3763, 1090, 1786, 3717, 29],
/* 1090 */
[7815, 23],
/* 1091 */
[7933, 3742, 1794, 387, 1094, 452, 3762, 3766],
/* 1092 */
[7952, 3767],
/* 1093 */
[7967, 1794, 452],
/* 1094 */
[7968, 1093, 755, 453],
/* 1095 */
[7972, 453],
/* 1096 */
[7976, 1093, 756],
/* 1097 */
[7897, 3642],
/* 1098 */
[7893, 63, 1078, 22, 257, 6, 23, 1100, 1803, 3795, 580, 3880, 1099, 1801, 3825, 29],
/* 1099 */
[7815, 23],
/* 1100 */
[7933, 1812, 1101, 259, 762, 389, 1819, 3882],
/* 1101 */
[7963, 1814],
/* 1102 */
[7967, 1101, 389],
/* 1103 */
709,
/* 1104 */
[7976, 1102, 308],
/* 1105 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      ArrowFunctionExpression: function ArrowFunctionExpression(path, state) {
	        if (state.opts.spec) {
	          var node = path.node;

	          if (node.shadow) return;

	          node.shadow = { "this": false };
	          node.type = "FunctionExpression";

	          var boundThis = t.thisExpression();
	          boundThis._forceShadow = path;

	          // make sure that arrow function won't be instantiated
	          path.ensureBlock();
	          path.get("body").unshiftContainer("body", t.expressionStatement(t.callExpression(state.addHelper("newArrowCheck"), [t.thisExpression(), boundThis])));

	          path.replaceWith(t.callExpression(t.memberExpression(node, t.identifier("bind")), [t.thisExpression()]));
	        } else {
	          path.arrowFunctionToShadowed();
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1106 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(3885)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  function statementList(key, path) {
	    var paths /*: Array*/ = path.get(key);

	    for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var _path = _ref;

	      var func = _path.node;
	      if (!_path.isFunctionDeclaration()) continue;

	      var declar = t.variableDeclaration("let", [t.variableDeclarator(func.id, t.toExpression(func))]);

	      // hoist it up above everything else
	      declar._blockHoist = 2;

	      // todo: name this
	      func.id = null;

	      _path.replaceWith(declar);
	    }
	  }

	  return {
	    visitor: {
	      BlockStatement: function BlockStatement(path) {
	        var node = path.node;
	        var parent = path.parent;

	        if (t.isFunction(parent, { body: node }) || t.isExportDeclaration(parent)) {
	          return;
	        }

	        statementList("body", path);
	      },

	      SwitchCase: function SwitchCase(path) {
	        statementList("consequent", path);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1107 */
144,
/* 1108 */
544,
/* 1109 */
[7847, 764, 1828, 3892],
/* 1110 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _classCallCheck = __webpack_require__(105)["default"];

	var _Object$create = __webpack_require__(310)["default"];

	var _Symbol = __webpack_require__(1111)["default"];

	var _interopRequireDefault = __webpack_require__(20)["default"];

	var _interopRequireWildcard = __webpack_require__(58)["default"];

	exports.__esModule = true;

	var _babelTraverse = __webpack_require__(390);

	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

	var _tdz = __webpack_require__(3911);

	var _babelTypes = __webpack_require__(72);

	var t = _interopRequireWildcard(_babelTypes);

	var _lodashObjectValues = __webpack_require__(1867);

	var _lodashObjectValues2 = _interopRequireDefault(_lodashObjectValues);

	var _lodashObjectExtend = __webpack_require__(4086);

	var _lodashObjectExtend2 = _interopRequireDefault(_lodashObjectExtend);

	var _babelTemplate = __webpack_require__(3956);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	/*:: import type NodePath from "babel-traverse";*/
	/*:: import type Scope from "babel-traverse";*/
	/*:: import type File from "../../../file";*/
	exports["default"] = function () {
	  return {
	    visitor: {
	      VariableDeclaration: function VariableDeclaration(path, file) {
	        var node = path.node;
	        var parent = path.parent;
	        var scope = path.scope;

	        if (!isBlockScoped(node)) return;
	        convertBlockScopedToVar(node, parent, scope);

	        if (node._tdzThis) {
	          var nodes = [node];

	          for (var i = 0; i < node.declarations.length; i++) {
	            var decl = node.declarations[i];
	            if (decl.init) {
	              var assign = t.assignmentExpression("=", decl.id, decl.init);
	              assign._ignoreBlockScopingTDZ = true;
	              nodes.push(t.expressionStatement(assign));
	            }
	            decl.init = file.addHelper("temporalUndefined");
	          }

	          node._blockHoist = 2;

	          if (path.isCompletionRecord()) {
	            // ensure we don't break completion record semantics by returning
	            // the initialiser of the last declarator
	            nodes.push(t.expressionStatement(scope.buildUndefinedNode()));
	          }

	          path.replaceWithMultiple(nodes);
	        }
	      },

	      Loop: function Loop(path, file) {
	        var node = path.node;
	        var parent = path.parent;
	        var scope = path.scope;

	        t.ensureBlock(node);
	        var blockScoping = new BlockScoping(path, path.get("body"), parent, scope, file);
	        var replace = blockScoping.run();
	        if (replace) path.replaceWith(replace);
	      },

	      "BlockStatement|Program": function BlockStatementProgram(path, file) {
	        if (!t.isLoop(path.parent)) {
	          var blockScoping = new BlockScoping(null, path, path.parent, path.scope, file);
	          blockScoping.run();
	        }
	      }
	    }
	  };
	};

	var buildRetCheck = _babelTemplate2["default"]("\n  if (typeof RETURN === \"object\") return RETURN.v;\n");

	function isBlockScoped(node) {
	  if (!t.isVariableDeclaration(node)) return false;
	  if (node[t.BLOCK_SCOPED_SYMBOL]) return true;
	  if (node.kind !== "let" && node.kind !== "const") return false;
	  return true;
	}

	function convertBlockScopedToVar(node, parent, scope) {
	  // https://github.com/babel/babel/issues/255
	  if (!t.isFor(parent)) {
	    for (var i = 0; i < node.declarations.length; i++) {
	      var declar = node.declarations[i];
	      declar.init = declar.init || scope.buildUndefinedNode();
	    }
	  }

	  node[t.BLOCK_SCOPED_SYMBOL] = true;
	  node.kind = "var";
	}

	function isVar(node) {
	  return t.isVariableDeclaration(node, { kind: "var" }) && !isBlockScoped(node);
	}

	function replace(path, node, scope, remaps) {
	  var remap = remaps[node.name];
	  if (!remap) return;

	  var ownBinding = scope.getBindingIdentifier(node.name);
	  if (ownBinding === remap.binding) {
	    node.name = remap.uid;
	  } else {
	    // scope already has it's own binding that doesn't
	    // match the one we have a stored replacement for
	    if (path) path.skip();
	  }
	}

	var replaceVisitor = {
	  ReferencedIdentifier: function ReferencedIdentifier(path, remaps) {
	    replace(path, path.node, path.scope, remaps);
	  },

	  AssignmentExpression: function AssignmentExpression(path, remaps) {
	    var ids = path.getBindingIdentifiers();
	    for (var _name in ids) {
	      replace(null, ids[_name], path.scope, remaps);
	    }
	  }
	};

	function traverseReplace(node, parent, scope, remaps) {
	  if (t.isIdentifier(node)) {
	    replace(node, parent, scope, remaps);
	  }

	  if (t.isAssignmentExpression(node)) {
	    var ids = t.getBindingIdentifiers(node);
	    for (var _name2 in ids) {
	      replace(ids[_name2], parent, scope, remaps);
	    }
	  }

	  scope.traverse(node, replaceVisitor, remaps);
	}

	var letReferenceBlockVisitor = _babelTraverse2["default"].visitors.merge([{
	  Function: function Function(path, state) {
	    path.traverse(letReferenceFunctionVisitor, state);
	    return path.skip();
	  }
	}, _tdz.visitor]);

	var letReferenceFunctionVisitor = _babelTraverse2["default"].visitors.merge([{
	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    var ref = state.letReferences[path.node.name];

	    // not a part of our scope
	    if (!ref) return;

	    // this scope has a variable with the same name so it couldn't belong
	    // to our let scope
	    var localBinding = path.scope.getBindingIdentifier(path.node.name);
	    if (localBinding && localBinding !== ref) return;

	    state.closurify = true;
	  }
	}, _tdz.visitor]);

	var hoistVarDeclarationsVisitor = {
	  enter: function enter(path, self) {
	    var node = path.node;
	    var parent = path.parent;

	    if (path.isForStatement()) {
	      if (isVar(node.init, node)) {
	        var nodes = self.pushDeclar(node.init);
	        if (nodes.length === 1) {
	          node.init = nodes[0];
	        } else {
	          node.init = t.sequenceExpression(nodes);
	        }
	      }
	    } else if (path.isFor()) {
	      if (isVar(node.left, node)) {
	        self.pushDeclar(node.left);
	        node.left = node.left.declarations[0].id;
	      }
	    } else if (isVar(node, parent)) {
	      path.replaceWithMultiple(self.pushDeclar(node).map(function (expr) {
	        return t.expressionStatement(expr);
	      }));
	    } else if (path.isFunction()) {
	      return path.skip();
	    }
	  }
	};

	var loopLabelVisitor = {
	  LabeledStatement: function LabeledStatement(_ref, state) {
	    var node = _ref.node;

	    state.innerLabels.push(node.label.name);
	  }
	};

	var continuationVisitor = {
	  enter: function enter(path, state) {
	    if (path.isAssignmentExpression() || path.isUpdateExpression()) {
	      var bindings = path.getBindingIdentifiers();
	      for (var _name3 in bindings) {
	        if (state.outsideReferences[_name3] !== path.scope.getBindingIdentifier(_name3)) continue;
	        state.reassignments[_name3] = true;
	      }
	    }
	  }
	};

	function loopNodeTo(node) {
	  if (t.isBreakStatement(node)) {
	    return "break";
	  } else if (t.isContinueStatement(node)) {
	    return "continue";
	  }
	}

	var loopVisitor = {
	  Loop: function Loop(path, state) {
	    var oldIgnoreLabeless = state.ignoreLabeless;
	    state.ignoreLabeless = true;
	    path.traverse(loopVisitor, state);
	    state.ignoreLabeless = oldIgnoreLabeless;
	    path.skip();
	  },

	  Function: function Function(path) {
	    path.skip();
	  },

	  SwitchCase: function SwitchCase(path, state) {
	    var oldInSwitchCase = state.inSwitchCase;
	    state.inSwitchCase = true;
	    path.traverse(loopVisitor, state);
	    state.inSwitchCase = oldInSwitchCase;
	    path.skip();
	  },

	  "BreakStatement|ContinueStatement|ReturnStatement": function BreakStatementContinueStatementReturnStatement(path, state) {
	    var node = path.node;
	    var parent = path.parent;
	    var scope = path.scope;

	    if (node[this.LOOP_IGNORE]) return;

	    var replace = undefined;
	    var loopText = loopNodeTo(node);

	    if (loopText) {
	      if (node.label) {
	        // we shouldn't be transforming this because it exists somewhere inside
	        if (state.innerLabels.indexOf(node.label.name) >= 0) {
	          return;
	        }

	        loopText = loopText + "|" + node.label.name;
	      } else {
	        // we shouldn't be transforming these statements because
	        // they don't refer to the actual loop we're scopifying
	        if (state.ignoreLabeless) return;

	        //
	        if (state.inSwitchCase) return;

	        // break statements mean something different in this context
	        if (t.isBreakStatement(node) && t.isSwitchCase(parent)) return;
	      }

	      state.hasBreakContinue = true;
	      state.map[loopText] = node;
	      replace = t.stringLiteral(loopText);
	    }

	    if (path.isReturnStatement()) {
	      state.hasReturn = true;
	      replace = t.objectExpression([t.objectProperty(t.identifier("v"), node.argument || scope.buildUndefinedNode())]);
	    }

	    if (replace) {
	      replace = t.returnStatement(replace);
	      replace[this.LOOP_IGNORE] = true;
	      path.skip();
	      path.replaceWith(t.inherits(replace, node));
	    }
	  }
	};

	var BlockScoping = (function () {
	  function BlockScoping(loopPath /*:: ?: NodePath*/, blockPath /*: NodePath*/, parent /*: Object*/, scope /*: Scope*/, file /*: File*/) {
	    _classCallCheck(this, BlockScoping);

	    this.parent = parent;
	    this.scope = scope;
	    this.file = file;

	    this.blockPath = blockPath;
	    this.block = blockPath.node;

	    this.outsideLetReferences = _Object$create(null);
	    this.hasLetReferences = false;
	    this.letReferences = _Object$create(null);
	    this.body = [];

	    if (loopPath) {
	      this.loopParent = loopPath.parent;
	      this.loopLabel = t.isLabeledStatement(this.loopParent) && this.loopParent.label;
	      this.loopPath = loopPath;
	      this.loop = loopPath.node;
	    }
	  }

	  /**
	   * Start the ball rolling.
	   */

	  BlockScoping.prototype.run = function run() {
	    var block = this.block;
	    if (block._letDone) return;
	    block._letDone = true;

	    var needsClosure = this.getLetReferences();

	    // this is a block within a `Function/Program` so we can safely leave it be
	    if (t.isFunction(this.parent) || t.isProgram(this.block)) return;

	    // we can skip everything
	    if (!this.hasLetReferences) return;

	    if (needsClosure) {
	      this.wrapClosure();
	    } else {
	      this.remap();
	    }

	    if (this.loopLabel && !t.isLabeledStatement(this.loopParent)) {
	      return t.labeledStatement(this.loopLabel, this.loop);
	    }
	  };

	  BlockScoping.prototype.remap = function remap() {
	    var hasRemaps = false;
	    var letRefs = this.letReferences;
	    var scope = this.scope;

	    // alright, so since we aren't wrapping this block in a closure
	    // we have to check if any of our let variables collide with
	    // those in upper scopes and then if they do, generate a uid
	    // for them and replace all references with it
	    var remaps = _Object$create(null);

	    for (var key in letRefs) {
	      // just an Identifier node we collected in `getLetReferences`
	      // this is the defining identifier of a declaration
	      var ref = letRefs[key];

	      // todo: could skip this if the colliding binding is in another function
	      if (scope.parentHasBinding(key) || scope.hasGlobal(key)) {
	        var uid = scope.generateUidIdentifier(ref.name).name;
	        ref.name = uid;

	        hasRemaps = true;
	        remaps[key] = remaps[uid] = {
	          binding: ref,
	          uid: uid
	        };
	      }
	    }

	    if (!hasRemaps) return;

	    //

	    var loop = this.loop;
	    if (loop) {
	      traverseReplace(loop.right, loop, scope, remaps);
	      traverseReplace(loop.test, loop, scope, remaps);
	      traverseReplace(loop.update, loop, scope, remaps);
	    }

	    this.blockPath.traverse(replaceVisitor, remaps);
	  };

	  BlockScoping.prototype.wrapClosure = function wrapClosure() {
	    var block = this.block;

	    var outsideRefs = this.outsideLetReferences;

	    // remap loop heads with colliding variables
	    if (this.loop) {
	      for (var _name4 in outsideRefs) {
	        var id = outsideRefs[_name4];

	        if (this.scope.hasGlobal(id.name) || this.scope.parentHasBinding(id.name)) {
	          delete outsideRefs[id.name];
	          delete this.letReferences[id.name];

	          this.scope.rename(id.name);

	          this.letReferences[id.name] = id;
	          outsideRefs[id.name] = id;
	        }
	      }
	    }

	    // if we're inside of a for loop then we search to see if there are any
	    // `break`s, `continue`s, `return`s etc
	    this.has = this.checkLoop();

	    // hoist let references to retain scope
	    this.hoistVarDeclarations();

	    // turn outsideLetReferences into an array
	    var params = _lodashObjectValues2["default"](outsideRefs);
	    var args = _lodashObjectValues2["default"](outsideRefs);

	    // build the closure that we're going to wrap the block with
	    var fn = t.functionExpression(null, params, t.blockStatement(block.body));
	    fn.shadow = true;

	    // continuation
	    this.addContinuations(fn);

	    // replace the current block body with the one we're going to build
	    block.body = this.body;

	    var ref = fn;

	    if (this.loop) {
	      ref = this.scope.generateUidIdentifier("loop");
	      this.loopPath.insertBefore(t.variableDeclaration("var", [t.variableDeclarator(ref, fn)]));
	    }

	    // build a call and a unique id that we can assign the return value to
	    var call = t.callExpression(ref, args);
	    var ret = this.scope.generateUidIdentifier("ret");

	    // handle generators
	    var hasYield = _babelTraverse2["default"].hasType(fn.body, this.scope, "YieldExpression", t.FUNCTION_TYPES);
	    if (hasYield) {
	      fn.generator = true;
	      call = t.yieldExpression(call, true);
	    }

	    // handlers async functions
	    var hasAsync = _babelTraverse2["default"].hasType(fn.body, this.scope, "AwaitExpression", t.FUNCTION_TYPES);
	    if (hasAsync) {
	      fn.async = true;
	      call = t.awaitExpression(call);
	    }

	    this.buildClosure(ret, call);
	  };

	  /**
	   * Push the closure to the body.
	   */

	  BlockScoping.prototype.buildClosure = function buildClosure(ret /*: { type: "Identifier" }*/, call /*: { type: "CallExpression" }*/) {
	    var has = this.has;
	    if (has.hasReturn || has.hasBreakContinue) {
	      this.buildHas(ret, call);
	    } else {
	      this.body.push(t.expressionStatement(call));
	    }
	  };

	  /**
	   * If any of the outer let variables are reassigned then we need to rename them in
	   * the closure so we can get direct access to the outer variable to continue the
	   * iteration with bindings based on each iteration.
	   *
	   * Reference: https://github.com/babel/babel/issues/1078
	   */

	  BlockScoping.prototype.addContinuations = function addContinuations(fn) {
	    var state = {
	      reassignments: {},
	      outsideReferences: this.outsideLetReferences
	    };

	    this.scope.traverse(fn, continuationVisitor, state);

	    for (var i = 0; i < fn.params.length; i++) {
	      var param = fn.params[i];
	      if (!state.reassignments[param.name]) continue;

	      var newParam = this.scope.generateUidIdentifier(param.name);
	      fn.params[i] = newParam;

	      this.scope.rename(param.name, newParam.name, fn);

	      // assign outer reference as it's been modified internally and needs to be retained
	      fn.body.body.push(t.expressionStatement(t.assignmentExpression("=", param, newParam)));
	    }
	  };

	  BlockScoping.prototype.getLetReferences = function getLetReferences() {
	    var block = this.block;

	    var declarators = [];

	    if (this.loop) {
	      var init = this.loop.left || this.loop.init;
	      if (isBlockScoped(init)) {
	        declarators.push(init);
	        _lodashObjectExtend2["default"](this.outsideLetReferences, t.getBindingIdentifiers(init));
	      }
	    }

	    //
	    if (block.body) {
	      for (var i = 0; i < block.body.length; i++) {
	        var declar = block.body[i];
	        if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar) || isBlockScoped(declar)) {
	          if (isBlockScoped(declar)) convertBlockScopedToVar(declar, block, this.scope);
	          declarators = declarators.concat(declar.declarations || declar);
	        }
	      }
	    }

	    //
	    for (var i = 0; i < declarators.length; i++) {
	      var declar = declarators[i];
	      var keys = t.getBindingIdentifiers(declar);
	      _lodashObjectExtend2["default"](this.letReferences, keys);
	      this.hasLetReferences = true;
	    }

	    // no let references so we can just quit
	    if (!this.hasLetReferences) return;

	    var state = {
	      letReferences: this.letReferences,
	      closurify: false,
	      file: this.file
	    };

	    // traverse through this block, stopping on functions and checking if they
	    // contain any local let references
	    this.blockPath.traverse(letReferenceBlockVisitor, state);

	    return state.closurify;
	  };

	  /**
	   * If we're inside of a loop then traverse it and check if it has one of
	   * the following node types `ReturnStatement`, `BreakStatement`,
	   * `ContinueStatement` and replace it with a return value that we can track
	   * later on.
	   */

	  BlockScoping.prototype.checkLoop = function checkLoop() /*: Object*/ {
	    var state = {
	      hasBreakContinue: false,
	      ignoreLabeless: false,
	      inSwitchCase: false,
	      innerLabels: [],
	      hasReturn: false,
	      isLoop: !!this.loop,
	      map: {},
	      LOOP_IGNORE: _Symbol()
	    };

	    this.blockPath.traverse(loopLabelVisitor, state);
	    this.blockPath.traverse(loopVisitor, state);

	    return state;
	  };

	  /**
	   * Hoist all let declarations in this block to before it so they retain scope
	   * once we wrap everything in a closure.
	   */

	  BlockScoping.prototype.hoistVarDeclarations = function hoistVarDeclarations() {
	    this.blockPath.traverse(hoistVarDeclarationsVisitor, this);
	  };

	  /**
	   * Turn a `VariableDeclaration` into an array of `AssignmentExpressions` with
	   * their declarations hoisted to before the closure wrapper.
	   */

	  BlockScoping.prototype.pushDeclar = function pushDeclar(node /*: { type: "VariableDeclaration" }*/) /*: Array<Object>*/ {
	    var declars = [];
	    var names = t.getBindingIdentifiers(node);
	    for (var _name5 in names) {
	      declars.push(t.variableDeclarator(names[_name5]));
	    }

	    this.body.push(t.variableDeclaration(node.kind, declars));

	    var replace = [];

	    for (var i = 0; i < node.declarations.length; i++) {
	      var declar = node.declarations[i];
	      if (!declar.init) continue;

	      var expr = t.assignmentExpression("=", declar.id, declar.init);
	      replace.push(t.inherits(expr, declar));
	    }

	    return replace;
	  };

	  BlockScoping.prototype.buildHas = function buildHas(ret /*: { type: "Identifier" }*/, call /*: { type: "CallExpression" }*/) {
	    var body = this.body;

	    body.push(t.variableDeclaration("var", [t.variableDeclarator(ret, call)]));

	    var retCheck = undefined;
	    var has = this.has;
	    var cases = [];

	    if (has.hasReturn) {
	      // typeof ret === "object"
	      retCheck = buildRetCheck({
	        RETURN: ret
	      });
	    }

	    if (has.hasBreakContinue) {
	      for (var key in has.map) {
	        cases.push(t.switchCase(t.stringLiteral(key), [has.map[key]]));
	      }

	      if (has.hasReturn) {
	        cases.push(t.switchCase(null, [retCheck]));
	      }

	      if (cases.length === 1) {
	        var single = cases[0];
	        body.push(t.ifStatement(t.binaryExpression("===", ret, single.test), single.consequent[0]));
	      } else {
	        // https://github.com/babel/babel/issues/998
	        for (var i = 0; i < cases.length; i++) {
	          var caseConsequent = cases[i].consequent[0];
	          if (t.isBreakStatement(caseConsequent) && !caseConsequent.label) {
	            caseConsequent.label = this.loopLabel = this.loopLabel || this.scope.generateUidIdentifier("loop");
	          }
	        }

	        body.push(t.switchStatement(ret, cases));
	      }
	    } else {
	      if (has.hasReturn) {
	        body.push(retCheck);
	      }
	    }
	  };

	  return BlockScoping;
	})();

	module.exports = exports["default"];

/***/ },
/* 1111 */
[7825, 3931],
/* 1112 */
[7840, 1836],
/* 1113 */
969,
/* 1114 */
699,
/* 1115 */
543,
/* 1116 */
700,
/* 1117 */
[7847, 126, 1119, 1834],
/* 1118 */
[7853, 583, 260, 1115],
/* 1119 */
973,
/* 1120 */
[7856, 126, 1116, 456],
/* 1121 */
[7871, 126, 765, 1116, 1834, 583, 1839, 1115, 1840, 1120, 1841, 456, 3940, 1835, 3935, 3937, 1112, 584, 1119, 1838],
/* 1122 */
[7893, 105, 1111, 64, 310, 20, 58, 1125, 1849, 3986, 390, 4085, 1123, 1846, 4019, 72],
/* 1123 */
[7815, 58],
/* 1124 */
[7897, 3918],
/* 1125 */
[7933, 1859, 1127, 195, 773, 312, 1865, 1867],
/* 1126 */
[7943, 314],
/* 1127 */
[7963, 1861],
/* 1128 */
[7967, 1127, 312],
/* 1129 */
[7969, 195, 314],
/* 1130 */
[7973, 4056, 195],
/* 1131 */
[7985, 4046, 1855, 4062],
/* 1132 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Symbol = __webpack_require__(778)["default"];

	var _interopRequireDefault = __webpack_require__(10)["default"];

	exports.__esModule = true;

	var _loose = __webpack_require__(4090);

	var _loose2 = _interopRequireDefault(_loose);

	var _vanilla = __webpack_require__(1869);

	var _vanilla2 = _interopRequireDefault(_vanilla);

	var _babelHelperFunctionName = __webpack_require__(1136);

	var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  // todo: investigate traversal requeueing
	  var VISITED = _Symbol();

	  return {
	    visitor: {
	      ExportDefaultDeclaration: function ExportDefaultDeclaration(path) {
	        if (!path.get("declaration").isClassDeclaration()) return;

	        var node = path.node;

	        var ref = node.declaration.id || path.scope.generateUidIdentifier("class");
	        node.declaration.id = ref;

	        // Split the class declaration and the export into two separate statements.
	        path.replaceWith(node.declaration);
	        path.insertAfter(t.exportDefaultDeclaration(ref));
	      },

	      ClassDeclaration: function ClassDeclaration(path) {
	        var node = path.node;

	        var ref = node.id || path.scope.generateUidIdentifier("class");

	        path.replaceWith(t.variableDeclaration("let", [t.variableDeclarator(ref, t.toExpression(node))]));
	      },

	      ClassExpression: function ClassExpression(path, state) {
	        var node = path.node;

	        if (node[VISITED]) return;

	        var inferred = _babelHelperFunctionName2["default"](path);
	        if (inferred && inferred !== node) return path.replaceWith(inferred);

	        node[VISITED] = true;

	        var Constructor = _vanilla2["default"];
	        if (state.opts.loose) Constructor = _loose2["default"];

	        path.replaceWith(new Constructor(path, state.file).run());
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1133 */
709,
/* 1134 */
172,
/* 1135 */
[7976, 1872, 1134],
/* 1136 */
[7994, 10, 45, 4116, 1885, 51],
/* 1137 */
[7828, 392, 4123],
/* 1138 */
[7840, 1879],
/* 1139 */
969,
/* 1140 */
699,
/* 1141 */
543,
/* 1142 */
700,
/* 1143 */
[7847, 127, 1145, 1877],
/* 1144 */
[7853, 588, 261, 1141],
/* 1145 */
973,
/* 1146 */
[7856, 127, 1142, 462],
/* 1147 */
[7871, 127, 779, 1142, 1877, 588, 1882, 1141, 1883, 1146, 1884, 462, 4146, 1878, 4141, 4143, 1138, 589, 1145, 1881],
/* 1148 */
709,
/* 1149 */
172,
/* 1150 */
[7972, 592],
/* 1151 */
[7976, 1888, 1149],
/* 1152 */
[7893, 96, 778, 59, 392, 10, 45, 1153, 1903, 4219, 393, 4279, 777, 1893, 4252, 51],
/* 1153 */
[7933, 4262, 1899, 786, 1156, 594, 4278, 4281],
/* 1154 */
[7967, 1899, 594],
/* 1155 */
709,
/* 1156 */
[7968, 1154, 1155, 466],
/* 1157 */
[7897, 4124],
/* 1158 */
[7952, 1918],
/* 1159 */
[7967, 1912, 467],
/* 1160 */
709,
/* 1161 */
[7976, 1159, 316],
/* 1162 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(4350)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref5) {
	  var t = _ref5.types;
	  var template = _ref5.template;

	  var buildMutatorMapAssign = template("\n    MUTATOR_MAP_REF[KEY] = MUTATOR_MAP_REF[KEY] || {};\n    MUTATOR_MAP_REF[KEY].KIND = VALUE;\n  ");

	  function getValue(prop) {
	    if (t.isObjectProperty(prop)) {
	      return prop.value;
	    } else if (t.isObjectMethod(prop)) {
	      return t.functionExpression(null, prop.params, prop.body, prop.generator, prop.async);
	    }
	  }

	  function pushAssign(objId, prop, body) {
	    if (prop.kind === "get" && prop.kind === "set") {
	      pushMutatorDefine(objId, prop, body);
	    } else {
	      body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(objId, prop.key, prop.computed || t.isLiteral(prop.key)), getValue(prop))));
	    }
	  }

	  function pushMutatorDefine(_ref6, prop) {
	    var objId = _ref6.objId;
	    var body = _ref6.body;
	    var getMutatorId = _ref6.getMutatorId;
	    var scope = _ref6.scope;

	    var key = prop.key;

	    var maybeMemoise = scope.maybeGenerateMemoised(prop.key);
	    if (maybeMemoise) {
	      body.push(t.expressionStatement(t.assignmentExpression("=", maybeMemoise, key)));
	      key = maybeMemoise;
	    }

	    body.push.apply(body, buildMutatorMapAssign({
	      MUTATOR_MAP_REF: getMutatorId(),
	      KEY: key,
	      VALUE: getValue(prop),
	      KIND: t.identifier(prop.kind)
	    }));
	  }

	  function loose(info) {
	    for (var _iterator = info.computedProps, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var prop = _ref;

	      if (prop.kind === "get" || prop.kind === "set") {
	        pushMutatorDefine(info, prop);
	      } else {
	        pushAssign(info.objId, prop, info.body);
	      }
	    }
	  }

	  function spec(info) {
	    var objId = info.objId;
	    var body = info.body;
	    var computedProps = info.computedProps;
	    var state = info.state;

	    for (var _iterator2 = computedProps, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var prop = _ref2;

	      var key = t.toComputedKey(prop);

	      if (prop.kind === "get" || prop.kind === "set") {
	        pushMutatorDefine(info, prop);
	      } else if (t.isStringLiteral(key, { value: "__proto__" })) {
	        pushAssign(objId, prop, body);
	      } else {
	        if (computedProps.length === 1) {
	          return t.callExpression(state.addHelper("defineProperty"), [info.initPropExpression, key, getValue(prop)]);
	        } else {
	          body.push(t.expressionStatement(t.callExpression(state.addHelper("defineProperty"), [objId, key, getValue(prop)])));
	        }
	      }
	    }
	  }

	  return {
	    visitor: {
	      ObjectExpression: {
	        exit: function exit(path, state) {
	          var node = path.node;
	          var parent = path.parent;
	          var scope = path.scope;

	          var hasComputed = false;
	          for (var _iterator3 = (node.properties /*: Array<Object>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	            var _ref3;

	            if (_isArray3) {
	              if (_i3 >= _iterator3.length) break;
	              _ref3 = _iterator3[_i3++];
	            } else {
	              _i3 = _iterator3.next();
	              if (_i3.done) break;
	              _ref3 = _i3.value;
	            }

	            var prop = _ref3;

	            hasComputed = prop.computed === true;
	            if (hasComputed) break;
	          }
	          if (!hasComputed) return;

	          // put all getters/setters into the first object expression as well as all initialisers up
	          // to the first computed property

	          var initProps = [];
	          var computedProps = [];
	          var foundComputed = false;

	          for (var _iterator4 = node.properties, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	            var _ref4;

	            if (_isArray4) {
	              if (_i4 >= _iterator4.length) break;
	              _ref4 = _iterator4[_i4++];
	            } else {
	              _i4 = _iterator4.next();
	              if (_i4.done) break;
	              _ref4 = _i4.value;
	            }

	            var prop = _ref4;

	            if (prop.computed) {
	              foundComputed = true;
	            }

	            if (foundComputed) {
	              computedProps.push(prop);
	            } else {
	              initProps.push(prop);
	            }
	          }

	          var objId = scope.generateUidIdentifierBasedOnNode(parent);
	          var initPropExpression = t.objectExpression(initProps);
	          var body = [];

	          body.push(t.variableDeclaration("var", [t.variableDeclarator(objId, initPropExpression)]));

	          var callback = spec;
	          if (state.opts.loose) callback = loose;

	          var mutatorRef = undefined;

	          var getMutatorId = function getMutatorId() {
	            if (!mutatorRef) {
	              mutatorRef = scope.generateUidIdentifier("mutatorMap");

	              body.push(t.variableDeclaration("var", [t.variableDeclarator(mutatorRef, t.objectExpression([]))]));
	            }

	            return mutatorRef;
	          };

	          var single = callback({
	            scope: scope,
	            objId: objId,
	            body: body,
	            computedProps: computedProps,
	            initPropExpression: initPropExpression,
	            getMutatorId: getMutatorId,
	            state: state
	          });

	          if (mutatorRef) {
	            body.push(t.expressionStatement(t.callExpression(state.addHelper("defineEnumerableProperties"), [objId, mutatorRef])));
	          }

	          if (single) {
	            path.replaceWith(single);
	          } else {
	            body.push(t.expressionStatement(objId));
	            path.replaceWithMultiple(body);
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1163 */
144,
/* 1164 */
544,
/* 1165 */
[7847, 791, 1923, 4357],
/* 1166 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _classCallCheck = __webpack_require__(4377)["default"];

	var _getIterator = __webpack_require__(4376)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref5) {
	  var t = _ref5.types;

	  /**
	   * Test if a VariableDeclaration's declarations contains any Patterns.
	   */

	  function variableDeclarationHasPattern(node) {
	    for (var _iterator = (node.declarations /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var declar = _ref;

	      if (t.isPattern(declar.id)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  /**
	   * Test if an ArrayPattern's elements contain any RestElements.
	   */

	  function hasRest(pattern) {
	    for (var _iterator2 = (pattern.elements /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var elem = _ref2;

	      if (t.isRestElement(elem)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  var arrayUnpackVisitor = {
	    ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	      if (state.bindings[path.node.name]) {
	        state.deopt = true;
	        path.stop();
	      }
	    }
	  };

	  var DestructuringTransformer = (function () {
	    function DestructuringTransformer(opts) {
	      _classCallCheck(this, DestructuringTransformer);

	      this.blockHoist = opts.blockHoist;
	      this.operator = opts.operator;
	      this.arrays = {};
	      this.nodes = opts.nodes || [];
	      this.scope = opts.scope;
	      this.file = opts.file;
	      this.kind = opts.kind;
	    }

	    DestructuringTransformer.prototype.buildVariableAssignment = function buildVariableAssignment(id, init) {
	      var op = this.operator;
	      if (t.isMemberExpression(id)) op = "=";

	      var node = undefined;

	      if (op) {
	        node = t.expressionStatement(t.assignmentExpression(op, id, init));
	      } else {
	        node = t.variableDeclaration(this.kind, [t.variableDeclarator(id, init)]);
	      }

	      node._blockHoist = this.blockHoist;

	      return node;
	    };

	    DestructuringTransformer.prototype.buildVariableDeclaration = function buildVariableDeclaration(id, init) {
	      var declar = t.variableDeclaration("var", [t.variableDeclarator(id, init)]);
	      declar._blockHoist = this.blockHoist;
	      return declar;
	    };

	    DestructuringTransformer.prototype.push = function push(id, init) {
	      if (t.isObjectPattern(id)) {
	        this.pushObjectPattern(id, init);
	      } else if (t.isArrayPattern(id)) {
	        this.pushArrayPattern(id, init);
	      } else if (t.isAssignmentPattern(id)) {
	        this.pushAssignmentPattern(id, init);
	      } else {
	        this.nodes.push(this.buildVariableAssignment(id, init));
	      }
	    };

	    DestructuringTransformer.prototype.toArray = function toArray(node, count) {
	      if (this.file.opts.loose || t.isIdentifier(node) && this.arrays[node.name]) {
	        return node;
	      } else {
	        return this.scope.toArray(node, count);
	      }
	    };

	    DestructuringTransformer.prototype.pushAssignmentPattern = function pushAssignmentPattern(pattern, valueRef) {
	      // we need to assign the current value of the assignment to avoid evaluating
	      // it more than once

	      var tempValueRef = this.scope.generateUidIdentifierBasedOnNode(valueRef);

	      var declar = t.variableDeclaration("var", [t.variableDeclarator(tempValueRef, valueRef)]);
	      declar._blockHoist = this.blockHoist;
	      this.nodes.push(declar);

	      //

	      var tempConditional = t.conditionalExpression(t.binaryExpression("===", tempValueRef, t.identifier("undefined")), pattern.right, tempValueRef);

	      var left = pattern.left;
	      if (t.isPattern(left)) {
	        var tempValueDefault = t.expressionStatement(t.assignmentExpression("=", tempValueRef, tempConditional));
	        tempValueDefault._blockHoist = this.blockHoist;

	        this.nodes.push(tempValueDefault);
	        this.push(left, tempValueRef);
	      } else {
	        this.nodes.push(this.buildVariableAssignment(left, tempConditional));
	      }
	    };

	    DestructuringTransformer.prototype.pushObjectRest = function pushObjectRest(pattern, objRef, spreadProp, spreadPropIndex) {
	      // get all the keys that appear in this object before the current spread

	      var keys = [];

	      for (var i = 0; i < pattern.properties.length; i++) {
	        var prop = pattern.properties[i];

	        // we've exceeded the index of the spread property to all properties to the
	        // right need to be ignored
	        if (i >= spreadPropIndex) break;

	        // ignore other spread properties
	        if (t.isRestProperty(prop)) continue;

	        var key = prop.key;
	        if (t.isIdentifier(key) && !prop.computed) key = t.stringLiteral(prop.key.name);
	        keys.push(key);
	      }

	      keys = t.arrayExpression(keys);

	      //

	      var value = t.callExpression(this.file.addHelper("objectWithoutProperties"), [objRef, keys]);
	      this.nodes.push(this.buildVariableAssignment(spreadProp.argument, value));
	    };

	    DestructuringTransformer.prototype.pushObjectProperty = function pushObjectProperty(prop, propRef) {
	      if (t.isLiteral(prop.key)) prop.computed = true;

	      var pattern = prop.value;
	      var objRef = t.memberExpression(propRef, prop.key, prop.computed);

	      if (t.isPattern(pattern)) {
	        this.push(pattern, objRef);
	      } else {
	        this.nodes.push(this.buildVariableAssignment(pattern, objRef));
	      }
	    };

	    DestructuringTransformer.prototype.pushObjectPattern = function pushObjectPattern(pattern, objRef) {
	      // https://github.com/babel/babel/issues/681

	      if (!pattern.properties.length) {
	        this.nodes.push(t.expressionStatement(t.callExpression(this.file.addHelper("objectDestructuringEmpty"), [objRef])));
	      }

	      // if we have more than one properties in this pattern and the objectRef is a
	      // member expression then we need to assign it to a temporary variable so it's
	      // only evaluated once

	      if (pattern.properties.length > 1 && !this.scope.isStatic(objRef)) {
	        var temp = this.scope.generateUidIdentifierBasedOnNode(objRef);
	        this.nodes.push(this.buildVariableDeclaration(temp, objRef));
	        objRef = temp;
	      }

	      //

	      for (var i = 0; i < pattern.properties.length; i++) {
	        var prop = pattern.properties[i];
	        if (t.isRestProperty(prop)) {
	          this.pushObjectRest(pattern, objRef, prop, i);
	        } else {
	          this.pushObjectProperty(prop, objRef);
	        }
	      }
	    };

	    DestructuringTransformer.prototype.canUnpackArrayPattern = function canUnpackArrayPattern(pattern, arr) {
	      // not an array so there's no way we can deal with this
	      if (!t.isArrayExpression(arr)) return false;

	      // pattern has less elements than the array and doesn't have a rest so some
	      // elements wont be evaluated
	      if (pattern.elements.length > arr.elements.length) return;
	      if (pattern.elements.length < arr.elements.length && !hasRest(pattern)) return false;

	      for (var _iterator3 = (pattern.elements /*: Array*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	        var _ref3;

	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }

	        var elem = _ref3;

	        // deopt on holes
	        if (!elem) return false;

	        // deopt on member expressions as they may be included in the RHS
	        if (t.isMemberExpression(elem)) return false;
	      }

	      for (var _iterator4 = (arr.elements /*: Array*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	        var _ref4;

	        if (_isArray4) {
	          if (_i4 >= _iterator4.length) break;
	          _ref4 = _iterator4[_i4++];
	        } else {
	          _i4 = _iterator4.next();
	          if (_i4.done) break;
	          _ref4 = _i4.value;
	        }

	        var elem = _ref4;

	        // deopt on spread elements
	        if (t.isSpreadElement(elem)) return false;
	      }

	      // deopt on reference to left side identifiers
	      var bindings = t.getBindingIdentifiers(pattern);
	      var state = { deopt: false, bindings: bindings };
	      this.scope.traverse(arr, arrayUnpackVisitor, state);
	      return !state.deopt;
	    };

	    DestructuringTransformer.prototype.pushUnpackedArrayPattern = function pushUnpackedArrayPattern(pattern, arr) {
	      for (var i = 0; i < pattern.elements.length; i++) {
	        var elem = pattern.elements[i];
	        if (t.isRestElement(elem)) {
	          this.push(elem.argument, t.arrayExpression(arr.elements.slice(i)));
	        } else {
	          this.push(elem, arr.elements[i]);
	        }
	      }
	    };

	    DestructuringTransformer.prototype.pushArrayPattern = function pushArrayPattern(pattern, arrayRef) {
	      if (!pattern.elements) return;

	      // optimise basic array destructuring of an array expression
	      //
	      // we can't do this to a pattern of unequal size to it's right hand
	      // array expression as then there will be values that wont be evaluated
	      //
	      // eg: let [a, b] = [1, 2];

	      if (this.canUnpackArrayPattern(pattern, arrayRef)) {
	        return this.pushUnpackedArrayPattern(pattern, arrayRef);
	      }

	      // if we have a rest then we need all the elements so don't tell
	      // `scope.toArray` to only get a certain amount

	      var count = !hasRest(pattern) && pattern.elements.length;

	      // so we need to ensure that the `arrayRef` is an array, `scope.toArray` will
	      // return a locally bound identifier if it's been inferred to be an array,
	      // otherwise it'll be a call to a helper that will ensure it's one

	      var toArray = this.toArray(arrayRef, count);

	      if (t.isIdentifier(toArray)) {
	        // we've been given an identifier so it must have been inferred to be an
	        // array
	        arrayRef = toArray;
	      } else {
	        arrayRef = this.scope.generateUidIdentifierBasedOnNode(arrayRef);
	        this.arrays[arrayRef.name] = true;
	        this.nodes.push(this.buildVariableDeclaration(arrayRef, toArray));
	      }

	      //

	      for (var i = 0; i < pattern.elements.length; i++) {
	        var elem = pattern.elements[i];

	        // hole
	        if (!elem) continue;

	        var elemRef = undefined;

	        if (t.isRestElement(elem)) {
	          elemRef = this.toArray(arrayRef);

	          if (i > 0) {
	            elemRef = t.callExpression(t.memberExpression(elemRef, t.identifier("slice")), [t.numericLiteral(i)]);
	          }

	          // set the element to the rest element argument since we've dealt with it
	          // being a rest already
	          elem = elem.argument;
	        } else {
	          elemRef = t.memberExpression(arrayRef, t.numericLiteral(i), true);
	        }

	        this.push(elem, elemRef);
	      }
	    };

	    DestructuringTransformer.prototype.init = function init(pattern, ref) {
	      // trying to destructure a value that we can't evaluate more than once so we
	      // need to save it to a variable

	      if (!t.isArrayExpression(ref) && !t.isMemberExpression(ref)) {
	        var memo = this.scope.maybeGenerateMemoised(ref, true);
	        if (memo) {
	          this.nodes.push(this.buildVariableDeclaration(memo, ref));
	          ref = memo;
	        }
	      }

	      //

	      this.push(pattern, ref);

	      return this.nodes;
	    };

	    return DestructuringTransformer;
	  })();

	  return {
	    visitor: {
	      ForXStatement: function ForXStatement(path, file) {
	        var node = path.node;
	        var scope = path.scope;

	        var left = node.left;

	        if (t.isPattern(left)) {
	          // for ({ length: k } in { abc: 3 });

	          var temp = scope.generateUidIdentifier("ref");

	          node.left = t.variableDeclaration("var", [t.variableDeclarator(temp)]);

	          path.ensureBlock();

	          node.body.body.unshift(t.variableDeclaration("var", [t.variableDeclarator(left, temp)]));

	          return;
	        }

	        if (!t.isVariableDeclaration(left)) return;

	        var pattern = left.declarations[0].id;
	        if (!t.isPattern(pattern)) return;

	        var key = scope.generateUidIdentifier("ref");
	        node.left = t.variableDeclaration(left.kind, [t.variableDeclarator(key, null)]);

	        var nodes = [];

	        var destructuring = new DestructuringTransformer({
	          kind: left.kind,
	          file: file,
	          scope: scope,
	          nodes: nodes
	        });

	        destructuring.init(pattern, key);

	        path.ensureBlock();

	        var block = node.body;
	        block.body = nodes.concat(block.body);
	      },

	      CatchClause: function CatchClause(_ref6, file) {
	        var node = _ref6.node;
	        var scope = _ref6.scope;

	        var pattern = node.param;
	        if (!t.isPattern(pattern)) return;

	        var ref = scope.generateUidIdentifier("ref");
	        node.param = ref;

	        var nodes = [];

	        var destructuring = new DestructuringTransformer({
	          kind: "let",
	          file: file,
	          scope: scope,
	          nodes: nodes
	        });
	        destructuring.init(pattern, ref);

	        node.body.body = nodes.concat(node.body.body);
	      },

	      AssignmentExpression: function AssignmentExpression(path, file) {
	        var node = path.node;
	        var scope = path.scope;

	        if (!t.isPattern(node.left)) return;

	        var nodes = [];

	        var destructuring = new DestructuringTransformer({
	          operator: node.operator,
	          file: file,
	          scope: scope,
	          nodes: nodes
	        });

	        var ref = undefined;
	        if (path.isCompletionRecord() || !path.parentPath.isExpressionStatement()) {
	          ref = scope.generateUidIdentifierBasedOnNode(node.right, "ref");

	          nodes.push(t.variableDeclaration("var", [t.variableDeclarator(ref, node.right)]));

	          if (t.isArrayExpression(node.right)) {
	            destructuring.arrays[ref.name] = true;
	          }
	        }

	        destructuring.init(node.left, ref || node.right);

	        if (ref) {
	          nodes.push(t.expressionStatement(ref));
	        }

	        path.replaceWithMultiple(nodes);
	      },

	      VariableDeclaration: function VariableDeclaration(path, file) {
	        var node = path.node;
	        var scope = path.scope;
	        var parent = path.parent;

	        if (t.isForXStatement(parent)) return;
	        if (!parent || !path.container) return; // i don't know why this is necessary - TODO
	        if (!variableDeclarationHasPattern(node)) return;

	        var nodes = [];
	        var declar = undefined;

	        for (var i = 0; i < node.declarations.length; i++) {
	          declar = node.declarations[i];

	          var patternId = declar.init;
	          var pattern = declar.id;

	          var destructuring = new DestructuringTransformer({
	            blockHoist: node._blockHoist,
	            nodes: nodes,
	            scope: scope,
	            kind: node.kind,
	            file: file
	          });

	          if (t.isPattern(pattern)) {
	            destructuring.init(pattern, patternId);

	            if (+i !== node.declarations.length - 1) {
	              // we aren't the last declarator so let's just make the
	              // last transformed node inherit from us
	              t.inherits(nodes[nodes.length - 1], declar);
	            }
	          } else {
	            nodes.push(t.inherits(destructuring.buildVariableAssignment(declar.id, declar.init), declar));
	          }
	        }

	        path.replaceWithMultiple(nodes);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1167 */
144,
/* 1168 */
544,
/* 1169 */
[7847, 793, 1929, 4384],
/* 1170 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var messages = _ref.messages;
	  var template = _ref.template;
	  var t = _ref.types;

	  var buildForOfArray = template("\n    for (var KEY = 0; KEY < ARR.length; KEY++) BODY;\n  ");

	  var buildForOfLoose = template("\n    for (var LOOP_OBJECT = OBJECT,\n             IS_ARRAY = Array.isArray(LOOP_OBJECT),\n             INDEX = 0,\n             LOOP_OBJECT = IS_ARRAY ? LOOP_OBJECT : LOOP_OBJECT[Symbol.iterator]();;) {\n      var ID;\n      if (IS_ARRAY) {\n        if (INDEX >= LOOP_OBJECT.length) break;\n        ID = LOOP_OBJECT[INDEX++];\n      } else {\n        INDEX = LOOP_OBJECT.next();\n        if (INDEX.done) break;\n        ID = INDEX.value;\n      }\n    }\n  ");

	  var buildForOf = template("\n    var ITERATOR_COMPLETION = true;\n    var ITERATOR_HAD_ERROR_KEY = false;\n    var ITERATOR_ERROR_KEY = undefined;\n    try {\n      for (var ITERATOR_KEY = OBJECT[Symbol.iterator](), STEP_KEY; !(ITERATOR_COMPLETION = (STEP_KEY = ITERATOR_KEY.next()).done); ITERATOR_COMPLETION = true) {\n      }\n    } catch (err) {\n      ITERATOR_HAD_ERROR_KEY = true;\n      ITERATOR_ERROR_KEY = err;\n    } finally {\n      try {\n        if (!ITERATOR_COMPLETION && ITERATOR_KEY.return) {\n          ITERATOR_KEY.return();\n        }\n      } finally {\n        if (ITERATOR_HAD_ERROR_KEY) {\n          throw ITERATOR_ERROR_KEY;\n        }\n      }\n    }\n  ");

	  function _ForOfStatementArray(path) {
	    var node = path.node;
	    var scope = path.scope;

	    var nodes = [];
	    var right = node.right;

	    if (!t.isIdentifier(right) || !scope.hasBinding(right.name)) {
	      var uid = scope.generateUidIdentifier("arr");
	      nodes.push(t.variableDeclaration("var", [t.variableDeclarator(uid, right)]));
	      right = uid;
	    }

	    var iterationKey = scope.generateUidIdentifier("i");

	    var loop = buildForOfArray({
	      BODY: node.body,
	      KEY: iterationKey,
	      ARR: right
	    });

	    t.inherits(loop, node);
	    t.ensureBlock(loop);

	    var iterationValue = t.memberExpression(right, iterationKey, true);

	    var left = node.left;
	    if (t.isVariableDeclaration(left)) {
	      left.declarations[0].init = iterationValue;
	      loop.body.body.unshift(left);
	    } else {
	      loop.body.body.unshift(t.expressionStatement(t.assignmentExpression("=", left, iterationValue)));
	    }

	    if (path.parentPath.isLabeledStatement()) {
	      loop = t.labeledStatement(path.parentPath.node.label, loop);
	    }

	    nodes.push(loop);

	    return nodes;
	  }

	  return {
	    visitor: {
	      ForOfStatement: function ForOfStatement(path, state) {
	        if (path.get("right").isArrayExpression()) {
	          return path.replaceWithMultiple(_ForOfStatementArray.call(this, path, state));
	        }

	        var callback = spec;
	        if (state.opts.loose) callback = loose;

	        var node = path.node;

	        var build = callback(path, state);
	        var declar = build.declar;
	        var loop = build.loop;
	        var block = loop.body;

	        // ensure that it's a block so we can take all its statements
	        path.ensureBlock();

	        // add the value declaration to the new loop body
	        if (declar) {
	          block.body.push(declar);
	        }

	        // push the rest of the original loop body onto our new body
	        block.body = block.body.concat(node.body.body);

	        t.inherits(loop, node);
	        t.inherits(loop.body, node.body);

	        if (build.replaceParent) {
	          path.parentPath.replaceWithMultiple(build.node);
	          path.remove();
	        } else {
	          path.replaceWithMultiple(build.node);
	        }
	      }
	    }
	  };

	  function loose(path, file) {
	    var node = path.node;
	    var scope = path.scope;

	    var left = node.left;
	    var declar = undefined,
	        id = undefined;

	    if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {
	      // for (i of test), for ({ i } of test)
	      id = left;
	    } else if (t.isVariableDeclaration(left)) {
	      // for (let i of test)
	      id = scope.generateUidIdentifier("ref");
	      declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, id)]);
	    } else {
	      throw file.buildCodeFrameError(left, messages.get("unknownForHead", left.type));
	    }

	    var iteratorKey = scope.generateUidIdentifier("iterator");
	    var isArrayKey = scope.generateUidIdentifier("isArray");

	    var loop = buildForOfLoose({
	      LOOP_OBJECT: iteratorKey,
	      IS_ARRAY: isArrayKey,
	      OBJECT: node.right,
	      INDEX: scope.generateUidIdentifier("i"),
	      ID: id
	    });

	    if (!declar) {
	      // no declaration so we need to remove the variable declaration at the top of
	      // the for-of-loose template
	      loop.body.body.shift();
	    }

	    //

	    return {
	      declar: declar,
	      node: loop,
	      loop: loop
	    };
	  }

	  function spec(path, file) {
	    var node = path.node;
	    var scope = path.scope;
	    var parent = path.parent;

	    var left = node.left;
	    var declar = undefined;

	    var stepKey = scope.generateUidIdentifier("step");
	    var stepValue = t.memberExpression(stepKey, t.identifier("value"));

	    if (t.isIdentifier(left) || t.isPattern(left) || t.isMemberExpression(left)) {
	      // for (i of test), for ({ i } of test)
	      declar = t.expressionStatement(t.assignmentExpression("=", left, stepValue));
	    } else if (t.isVariableDeclaration(left)) {
	      // for (let i of test)
	      declar = t.variableDeclaration(left.kind, [t.variableDeclarator(left.declarations[0].id, stepValue)]);
	    } else {
	      throw file.buildCodeFrameError(left, messages.get("unknownForHead", left.type));
	    }

	    //

	    var iteratorKey = scope.generateUidIdentifier("iterator");

	    var template = buildForOf({
	      ITERATOR_HAD_ERROR_KEY: scope.generateUidIdentifier("didIteratorError"),
	      ITERATOR_COMPLETION: scope.generateUidIdentifier("iteratorNormalCompletion"),
	      ITERATOR_ERROR_KEY: scope.generateUidIdentifier("iteratorError"),
	      ITERATOR_KEY: iteratorKey,
	      STEP_KEY: stepKey,
	      OBJECT: node.right,
	      BODY: null
	    });

	    var isLabeledParent = t.isLabeledStatement(parent);

	    var tryBody = template[3].block.body;
	    var loop = tryBody[0];

	    if (isLabeledParent) {
	      tryBody[0] = t.labeledStatement(parent.label, loop);
	    }

	    //

	    return {
	      replaceParent: isLabeledParent,
	      declar: declar,
	      loop: loop,
	      node: template
	    };
	  }
	};

	module.exports = exports["default"];

/***/ },
/* 1171 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(15)["default"];

	var _interopRequireWildcard = __webpack_require__(21)["default"];

	var _interopRequireDefault = __webpack_require__(2)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(26);

	var t = _interopRequireWildcard(_babelTypes);

	var _babelHelperFunctionName = __webpack_require__(4403);

	var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

	exports["default"] = function () {
	  return {
	    visitor: {
	      "ArrowFunctionExpression|FunctionExpression": {
	        exit: function exit(path) {
	          if (path.key !== "value" && !path.parentPath.isObjectProperty()) {
	            var replacement = _babelHelperFunctionName2["default"](path);
	            if (replacement) path.replaceWith(replacement);
	          }
	        }
	      },

	      ObjectExpression: function ObjectExpression(path) {
	        var props /*: Array<Object>*/ = path.get("properties");

	        for (var _iterator = props, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var prop = _ref;

	          if (prop.isObjectMethod({ kind: "method", computed: false })) {
	            var node = prop.node;
	            prop.replaceWith(t.objectProperty(node.key, t.functionExpression(null, node.params, node.body, node.generator, node.async)));
	          }

	          if (prop.isObjectProperty()) {
	            var value = prop.get("value");
	            if (value.isFunction()) {
	              var newNode = _babelHelperFunctionName2["default"](value);
	              if (newNode) value.replaceWith(newNode);
	            }
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1172 */
709,
/* 1173 */
172,
/* 1174 */
[7972, 599],
/* 1175 */
[7976, 1933, 1173],
/* 1176 */
[7893, 40, 1183, 15, 204, 2, 21, 1178, 1948, 4463, 600, 4523, 1177, 1938, 4496, 26],
/* 1177 */
[7815, 21],
/* 1178 */
[7933, 4506, 1944, 799, 1181, 602, 4522, 4525],
/* 1179 */
[7967, 1944, 602],
/* 1180 */
709,
/* 1181 */
[7968, 1179, 1180, 471],
/* 1182 */
[7823, 4544],
/* 1183 */
[7825, 4547],
/* 1184 */
[7828, 204, 4533],
/* 1185 */
[7840, 1953],
/* 1186 */
969,
/* 1187 */
699,
/* 1188 */
543,
/* 1189 */
700,
/* 1190 */
[7847, 128, 1192, 1951],
/* 1191 */
[7853, 603, 262, 1188],
/* 1192 */
973,
/* 1193 */
[7856, 128, 1189, 472],
/* 1194 */
[7871, 128, 802, 1189, 1951, 603, 1956, 1188, 1957, 1193, 1958, 472, 4556, 1952, 4551, 4553, 1185, 604, 1192, 1955],
/* 1195 */
[7897, 4534],
/* 1196 */
[7893, 40, 1183, 15, 204, 2, 21, 1198, 1965, 4599, 605, 4684, 1197, 1963, 4629, 26],
/* 1197 */
[7815, 21],
/* 1198 */
[7933, 1974, 1199, 263, 808, 397, 1981, 4686],
/* 1199 */
[7963, 1976],
/* 1200 */
[7967, 1199, 397],
/* 1201 */
709,
/* 1202 */
[7976, 1200, 320],
/* 1203 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    visitor: {
	      NumericLiteral: function NumericLiteral(_ref) {
	        var node = _ref.node;

	        // number octal like 0b10 or 0o70
	        if (node.extra && /^0[ob]/i.test(node.extra.raw)) {
	          node.extra = undefined;
	        }
	      },

	      StringLiteral: function StringLiteral(_ref2) {
	        var node = _ref2.node;

	        // unicode escape
	        if (node.extra && /\\[u]/gi.test(node.extra.raw)) {
	          node.extra = undefined;
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1204 */
[7840, 1992],
/* 1205 */
969,
/* 1206 */
699,
/* 1207 */
543,
/* 1208 */
700,
/* 1209 */
[7847, 129, 1211, 1990],
/* 1210 */
[7853, 607, 264, 1207],
/* 1211 */
973,
/* 1212 */
[7856, 129, 1208, 476],
/* 1213 */
[7871, 129, 809, 1208, 1990, 607, 1995, 1207, 1996, 1212, 1997, 476, 4719, 1991, 4714, 4716, 1204, 608, 1211, 1994],
/* 1214 */
[7893, 112, 1987, 97, 475, 34, 73, 1217, 2003, 4752, 477, 4850, 1215, 2001, 4772, 84],
/* 1215 */
[7815, 73],
/* 1216 */
[7897, 4696],
/* 1217 */
[7933, 2015, 1219, 209, 815, 323, 2021, 4853],
/* 1218 */
[7943, 325],
/* 1219 */
[7963, 2017],
/* 1220 */
[7967, 1219, 323],
/* 1221 */
[7969, 209, 325],
/* 1222 */
[7973, 4821, 209],
/* 1223 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Symbol = __webpack_require__(818)["default"];

	var _getIterator = __webpack_require__(27)["default"];

	var _Object$create = __webpack_require__(265)["default"];

	var _Object$keys = __webpack_require__(817)["default"];

	var _interopRequireDefault = __webpack_require__(7)["default"];

	var _interopRequireWildcard = __webpack_require__(24)["default"];

	exports.__esModule = true;

	var _path2 = __webpack_require__(289);

	var _babelTemplate = __webpack_require__(4898);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _babelTypes = __webpack_require__(30);

	var t = _interopRequireWildcard(_babelTypes);

	var buildRequire = _babelTemplate2["default"]("\n  require($0);\n");

	var buildExportsModuleDeclaration = _babelTemplate2["default"]("\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n");

	var buildExportsFrom = _babelTemplate2["default"]("\n  Object.defineProperty(exports, $0, {\n    enumerable: true,\n    get: function () {\n      return $1;\n    }\n  });\n");

	var buildLooseExportsModuleDeclaration = _babelTemplate2["default"]("\n  exports.__esModule = true;\n");

	var buildExportsAssignment = _babelTemplate2["default"]("\n  exports.$0 = $1;\n");

	var buildExportAll = _babelTemplate2["default"]("\n  for (let KEY in OBJECT) {\n    if (KEY === \"default\") continue;\n\n    Object.defineProperty(exports, KEY, {\n      enumerable: true,\n      get: function () {\n        return OBJECT[KEY];\n      }\n    });\n  }\n");

	var THIS_BREAK_KEYS = ["FunctionExpression", "FunctionDeclaration", "ClassProperty", "ClassMethod", "ObjectMethod"];

	exports["default"] = function () {
	  var REASSIGN_REMAP_SKIP = _Symbol();

	  var reassignmentVisitor = {
	    ReferencedIdentifier: function ReferencedIdentifier(path) {
	      var name = path.node.name;
	      var remap = this.remaps[name];
	      if (!remap) return;

	      // redeclared in this scope
	      if (this.scope.getBinding(name) !== path.scope.getBinding(name)) return;

	      if (path.parentPath.isCallExpression({ callee: path.node })) {
	        path.replaceWith(t.sequenceExpression([t.numericLiteral(0), remap]));
	      } else {
	        path.replaceWith(remap);
	      }
	    },

	    AssignmentExpression: function AssignmentExpression(path) {
	      var node = path.node;
	      if (node[REASSIGN_REMAP_SKIP]) return;

	      var left = path.get("left");
	      if (!left.isIdentifier()) return;

	      var name = left.node.name;
	      var exports = this.exports[name];
	      if (!exports) return;

	      // redeclared in this scope
	      if (this.scope.getBinding(name) !== path.scope.getBinding(name)) return;

	      node[REASSIGN_REMAP_SKIP] = true;

	      for (var _iterator = exports, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var reid = _ref;

	        node = buildExportsAssignment(reid, node).expression;
	      }

	      path.replaceWith(node);
	    },

	    UpdateExpression: function UpdateExpression(path) {
	      var arg = path.get("argument");
	      if (!arg.isIdentifier()) return;

	      var name = arg.node.name;
	      var exports = this.exports[name];
	      if (!exports) return;

	      // redeclared in this scope
	      if (this.scope.getBinding(name) !== path.scope.getBinding(name)) return;

	      var node = t.assignmentExpression(path.node.operator[0] + "=", arg.node, t.numericLiteral(1));

	      if (path.parentPath.isExpressionStatement() && !path.isCompletionRecord() || path.node.prefix) {
	        return path.replaceWith(node);
	      }

	      var nodes = [];
	      nodes.push(node);

	      var operator = undefined;
	      if (path.node.operator === "--") {
	        operator = "+";
	      } else {
	        // "++"
	        operator = "-";
	      }
	      nodes.push(t.binaryExpression(operator, arg.node, t.numericLiteral(1)));

	      path.replaceWithMultiple(t.sequenceExpression(nodes));
	    }
	  };

	  return {
	    inherits: __webpack_require__(1528),

	    visitor: {
	      ThisExpression: function ThisExpression(path, state) {
	        if (state.opts.allowTopLevelThis !== true && !path.findParent(function (path) {
	          return !path.is("shadow") && THIS_BREAK_KEYS.indexOf(path.type) >= 0;
	        })) {
	          path.replaceWith(t.identifier("undefined"));
	        }
	      },

	      Program: {
	        exit: function exit(path) {
	          var strict = !!this.opts.strict;

	          var scope = path.scope;

	          // rename these commonjs variables if they're declared in the file
	          scope.rename("module");
	          scope.rename("exports");
	          scope.rename("require");

	          var hasExports = false;
	          var hasImports = false;

	          var body /*: Array<Object>*/ = path.get("body");
	          var imports = _Object$create(null);
	          var exports = _Object$create(null);

	          var nonHoistedExportNames = _Object$create(null);

	          var topNodes = [];
	          var remaps = _Object$create(null);

	          var requires = _Object$create(null);

	          function addRequire(source) {
	            var cached = requires[source];
	            if (cached) return cached;

	            var ref = path.scope.generateUidIdentifier(_path2.basename(source, _path2.extname(source)));

	            topNodes.push(t.variableDeclaration("var", [t.variableDeclarator(ref, buildRequire(t.stringLiteral(source)).expression)]));

	            return requires[source] = ref;
	          }

	          function addTo(obj, key, arr) {
	            var existing = obj[key] || [];
	            obj[key] = existing.concat(arr);
	          }

	          for (var _iterator2 = body, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	            var _ref2;

	            if (_isArray2) {
	              if (_i2 >= _iterator2.length) break;
	              _ref2 = _iterator2[_i2++];
	            } else {
	              _i2 = _iterator2.next();
	              if (_i2.done) break;
	              _ref2 = _i2.value;
	            }

	            var _path = _ref2;

	            if (_path.isExportDeclaration()) {
	              hasExports = true;

	              var specifiers = [].concat(_path.get("declaration"), _path.get("specifiers"));
	              for (var _iterator3 = specifiers, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	                var _ref3;

	                if (_isArray3) {
	                  if (_i3 >= _iterator3.length) break;
	                  _ref3 = _iterator3[_i3++];
	                } else {
	                  _i3 = _iterator3.next();
	                  if (_i3.done) break;
	                  _ref3 = _i3.value;
	                }

	                var specifier = _ref3;

	                var ids = specifier.getBindingIdentifiers();
	                if (ids.__esModule) {
	                  throw specifier.buildCodeFrameError("Illegal export \"__esModule\"");
	                }
	              }
	            }

	            if (_path.isImportDeclaration()) {
	              hasImports = true;
	              addTo(imports, _path.node.source.value, _path.node.specifiers);
	              _path.remove();
	            } else if (_path.isExportDefaultDeclaration()) {
	              var declaration = _path.get("declaration");
	              if (declaration.isFunctionDeclaration()) {
	                var id = declaration.node.id;
	                var defNode = t.identifier("default");
	                if (id) {
	                  addTo(exports, id.name, defNode);
	                  topNodes.push(buildExportsAssignment(defNode, id));
	                  _path.replaceWith(declaration.node);
	                } else {
	                  topNodes.push(buildExportsAssignment(defNode, t.toExpression(declaration.node)));
	                  _path.remove();
	                }
	              } else if (declaration.isClassDeclaration()) {
	                var id = declaration.node.id;
	                var defNode = t.identifier("default");
	                if (id) {
	                  addTo(exports, id.name, defNode);
	                  _path.replaceWithMultiple([declaration.node, buildExportsAssignment(defNode, id)]);
	                } else {
	                  _path.replaceWith(buildExportsAssignment(defNode, t.toExpression(declaration.node)));
	                }
	              } else {
	                _path.replaceWith(buildExportsAssignment(t.identifier("default"), declaration.node));
	              }
	            } else if (_path.isExportNamedDeclaration()) {
	              var declaration = _path.get("declaration");
	              if (declaration.node) {
	                if (declaration.isFunctionDeclaration()) {
	                  var id = declaration.node.id;
	                  addTo(exports, id.name, id);
	                  topNodes.push(buildExportsAssignment(id, id));
	                  _path.replaceWith(declaration.node);
	                } else if (declaration.isClassDeclaration()) {
	                  var id = declaration.node.id;
	                  addTo(exports, id.name, id);
	                  _path.replaceWithMultiple([declaration.node, buildExportsAssignment(id, id)]);
	                  nonHoistedExportNames[id.name] = true;
	                } else if (declaration.isVariableDeclaration()) {
	                  var declarators = declaration.get("declarations");
	                  for (var _iterator4 = declarators, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	                    var _ref4;

	                    if (_isArray4) {
	                      if (_i4 >= _iterator4.length) break;
	                      _ref4 = _iterator4[_i4++];
	                    } else {
	                      _i4 = _iterator4.next();
	                      if (_i4.done) break;
	                      _ref4 = _i4.value;
	                    }

	                    var decl = _ref4;

	                    var id = decl.get("id");

	                    var init = decl.get("init");
	                    if (!init.node) init.replaceWith(t.identifier("undefined"));

	                    if (id.isIdentifier()) {
	                      addTo(exports, id.node.name, id.node);
	                      init.replaceWith(buildExportsAssignment(id.node, init.node).expression);
	                      nonHoistedExportNames[id.node.name] = true;
	                    } else {
	                      // todo
	                    }
	                  }
	                  _path.replaceWith(declaration.node);
	                }
	                continue;
	              }

	              var specifiers = _path.get("specifiers");
	              if (specifiers.length) {
	                var nodes = [];
	                var source = _path.node.source;
	                if (source) {
	                  var ref = addRequire(source.value);

	                  for (var _iterator5 = specifiers, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	                    var _ref5;

	                    if (_isArray5) {
	                      if (_i5 >= _iterator5.length) break;
	                      _ref5 = _iterator5[_i5++];
	                    } else {
	                      _i5 = _iterator5.next();
	                      if (_i5.done) break;
	                      _ref5 = _i5.value;
	                    }

	                    var specifier = _ref5;

	                    if (specifier.isExportNamespaceSpecifier()) {
	                      // todo
	                    } else if (specifier.isExportDefaultSpecifier()) {
	                        // todo
	                      } else if (specifier.isExportSpecifier()) {
	                          topNodes.push(buildExportsFrom(t.stringLiteral(specifier.node.exported.name), t.memberExpression(ref, specifier.node.local)));
	                          nonHoistedExportNames[specifier.node.exported.name] = true;
	                        }
	                  }
	                } else {
	                  for (var _iterator6 = specifiers, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
	                    var _ref6;

	                    if (_isArray6) {
	                      if (_i6 >= _iterator6.length) break;
	                      _ref6 = _iterator6[_i6++];
	                    } else {
	                      _i6 = _iterator6.next();
	                      if (_i6.done) break;
	                      _ref6 = _i6.value;
	                    }

	                    var specifier = _ref6;

	                    if (specifier.isExportSpecifier()) {
	                      addTo(exports, specifier.node.local.name, specifier.node.exported);
	                      nonHoistedExportNames[specifier.node.exported.name] = true;
	                      nodes.push(buildExportsAssignment(specifier.node.exported, specifier.node.local));
	                    }
	                  }
	                }
	                _path.replaceWithMultiple(nodes);
	              }
	            } else if (_path.isExportAllDeclaration()) {
	              topNodes.push(buildExportAll({
	                KEY: _path.scope.generateUidIdentifier("key"),
	                OBJECT: addRequire(_path.node.source.value)
	              }));
	              _path.remove();
	            }
	          }

	          for (var source in imports) {
	            var specifiers = imports[source];
	            if (specifiers.length) {
	              var uid = addRequire(source);

	              var wildcard = undefined;

	              for (var i = 0; i < specifiers.length; i++) {
	                var specifier = specifiers[i];
	                if (t.isImportNamespaceSpecifier(specifier)) {
	                  if (strict) {
	                    remaps[specifier.local.name] = uid;
	                  } else {
	                    topNodes.push(t.variableDeclaration("var", [t.variableDeclarator(specifier.local, t.callExpression(this.addHelper("interopRequireWildcard"), [uid]))]));
	                  }
	                  wildcard = specifier.local;
	                } else if (t.isImportDefaultSpecifier(specifier)) {
	                  specifiers[i] = t.importSpecifier(specifier.local, t.identifier("default"));
	                }
	              }

	              for (var _iterator7 = specifiers, _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _getIterator(_iterator7);;) {
	                var _ref7;

	                if (_isArray7) {
	                  if (_i7 >= _iterator7.length) break;
	                  _ref7 = _iterator7[_i7++];
	                } else {
	                  _i7 = _iterator7.next();
	                  if (_i7.done) break;
	                  _ref7 = _i7.value;
	                }

	                var specifier = _ref7;

	                if (t.isImportSpecifier(specifier)) {
	                  var target = uid;
	                  if (specifier.imported.name === "default") {
	                    if (wildcard) {
	                      target = wildcard;
	                    } else {
	                      target = wildcard = path.scope.generateUidIdentifier(uid.name);
	                      topNodes.push(t.variableDeclaration("var", [t.variableDeclarator(target, t.callExpression(this.addHelper("interopRequireDefault"), [uid]))]));
	                    }
	                  }
	                  remaps[specifier.local.name] = t.memberExpression(target, specifier.imported);
	                }
	              }
	            } else {
	              // bare import
	              topNodes.push(buildRequire(t.stringLiteral(source)));
	            }
	          }

	          if (hasImports && _Object$keys(nonHoistedExportNames).length) {
	            var hoistedExportsNode = t.identifier("undefined");

	            for (var _name in nonHoistedExportNames) {
	              hoistedExportsNode = buildExportsAssignment(t.identifier(_name), hoistedExportsNode).expression;
	            }

	            topNodes.unshift(t.expressionStatement(hoistedExportsNode));
	          }

	          // add __esModule declaration if this file has any exports
	          if (hasExports && !strict) {
	            var buildTemplate = buildExportsModuleDeclaration;
	            if (this.opts.loose) buildTemplate = buildLooseExportsModuleDeclaration;
	            topNodes.unshift(buildTemplate());
	          }

	          path.unshiftContainer("body", topNodes);
	          path.traverse(reassignmentVisitor, { remaps: remaps, scope: scope, exports: exports });
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1224 */
[7840, 2030],
/* 1225 */
969,
/* 1226 */
699,
/* 1227 */
543,
/* 1228 */
700,
/* 1229 */
[7847, 130, 1231, 2028],
/* 1230 */
[7853, 611, 266, 1227],
/* 1231 */
973,
/* 1232 */
[7856, 130, 1228, 480],
/* 1233 */
[7871, 130, 820, 1228, 2028, 611, 2033, 1227, 2034, 1232, 2035, 480, 4882, 2029, 4877, 4879, 1224, 612, 1231, 2032],
/* 1234 */
[7893, 65, 818, 27, 265, 7, 24, 1236, 2041, 4915, 613, 4981, 1235, 2039, 4935, 30],
/* 1235 */
[7815, 24],
/* 1236 */
[7933, 4960, 2047, 400, 1239, 482, 4980, 4984],
/* 1237 */
[7952, 4985],
/* 1238 */
[7967, 2047, 482],
/* 1239 */
[7968, 1238, 824, 483],
/* 1240 */
[7972, 483],
/* 1241 */
[7976, 1238, 825],
/* 1242 */
[7897, 4860],
/* 1243 */
[7893, 65, 818, 27, 265, 7, 24, 1245, 2056, 5013, 615, 5098, 1244, 2054, 5043, 30],
/* 1244 */
[7815, 24],
/* 1245 */
[7933, 2065, 1246, 267, 831, 402, 2072, 5100],
/* 1246 */
[7963, 2067],
/* 1247 */
[7967, 1246, 402],
/* 1248 */
709,
/* 1249 */
[7976, 1247, 327],
/* 1250 */
[7897, 2104],
/* 1251 */
[7893, 66, 838, 12, 216, 4, 9, 1253, 2082, 5132, 617, 5217, 1252, 2080, 5162, 85],
/* 1252 */
[7815, 9],
/* 1253 */
[7933, 2091, 1254, 268, 836, 404, 2098, 5219],
/* 1254 */
[7963, 2093],
/* 1255 */
[7967, 1254, 404],
/* 1256 */
709,
/* 1257 */
[7976, 1255, 330],
/* 1258 */
[7840, 2111],
/* 1259 */
969,
/* 1260 */
699,
/* 1261 */
543,
/* 1262 */
700,
/* 1263 */
[7847, 131, 1265, 2109],
/* 1264 */
[7853, 619, 269, 1261],
/* 1265 */
973,
/* 1266 */
[7856, 131, 1262, 488],
/* 1267 */
[7871, 131, 840, 1262, 2109, 619, 2114, 1261, 2115, 1266, 2116, 488, 5245, 2110, 5240, 5242, 1258, 620, 1265, 2113],
/* 1268 */
[7893, 66, 838, 12, 216, 4, 9, 1271, 2122, 5278, 489, 5376, 1269, 2120, 5298, 86],
/* 1269 */
[7815, 9],
/* 1270 */
[7897, 2104],
/* 1271 */
[7933, 2134, 1273, 219, 846, 333, 2140, 5379],
/* 1272 */
[7943, 335],
/* 1273 */
[7963, 2136],
/* 1274 */
[7967, 1273, 333],
/* 1275 */
[7969, 219, 335],
/* 1276 */
[7973, 5347, 219],
/* 1277 */
[7840, 2150],
/* 1278 */
969,
/* 1279 */
699,
/* 1280 */
543,
/* 1281 */
700,
/* 1282 */
[7847, 132, 1284, 2148],
/* 1283 */
[7853, 624, 270, 1280],
/* 1284 */
973,
/* 1285 */
[7856, 132, 1281, 492],
/* 1286 */
[7871, 132, 848, 1281, 2148, 624, 2153, 1280, 2154, 1285, 2155, 492, 5411, 2149, 5406, 5408, 1277, 625, 1284, 2152],
/* 1287 */
[7893, 113, 2145, 98, 623, 35, 74, 1290, 2161, 5444, 493, 5542, 1288, 2159, 5464, 87],
/* 1288 */
[7815, 74],
/* 1289 */
[7897, 5388],
/* 1290 */
[7933, 2173, 1292, 222, 854, 337, 2179, 5545],
/* 1291 */
[7943, 339],
/* 1292 */
[7963, 2175],
/* 1293 */
[7967, 1292, 337],
/* 1294 */
[7969, 222, 339],
/* 1295 */
[7973, 5513, 222],
/* 1296 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Symbol = __webpack_require__(1307)["default"];

	var _getIterator = __webpack_require__(88)["default"];

	var _interopRequireDefault = __webpack_require__(36)["default"];

	exports.__esModule = true;

	var _babelHelperReplaceSupers = __webpack_require__(5547);

	var _babelHelperReplaceSupers2 = _interopRequireDefault(_babelHelperReplaceSupers);

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  function Property(path, node, scope, getObjectRef, file) {
	    var replaceSupers = new _babelHelperReplaceSupers2["default"]({
	      getObjectRef: getObjectRef,
	      methodNode: node,
	      methodPath: path,
	      isStatic: true,
	      scope: scope,
	      file: file
	    });

	    replaceSupers.replace();
	  }

	  var CONTAINS_SUPER = _Symbol();

	  return {
	    visitor: {
	      Super: function Super(path) {
	        var parentObj = path.findParent(function (path) {
	          return path.isObjectExpression();
	        });
	        if (parentObj) parentObj.node[CONTAINS_SUPER] = true;
	      },

	      ObjectExpression: {
	        exit: function exit(path, file) {
	          if (!path.node[CONTAINS_SUPER]) return;

	          var objectRef = undefined;
	          var getObjectRef = function getObjectRef() {
	            return objectRef = objectRef || path.scope.generateUidIdentifier("obj");
	          };

	          var propPaths /*: Array*/ = path.get("properties");
	          for (var _iterator = propPaths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	            var _ref;

	            if (_isArray) {
	              if (_i >= _iterator.length) break;
	              _ref = _iterator[_i++];
	            } else {
	              _i = _iterator.next();
	              if (_i.done) break;
	              _ref = _i.value;
	            }

	            var propPath = _ref;

	            if (propPath.isObjectProperty()) propPath = propPath.get("value");
	            Property(propPath, propPath.node, path.scope, getObjectRef, file);
	          }

	          if (objectRef) {
	            path.scope.push({ id: objectRef });
	            path.replaceWith(t.assignmentExpression("=", objectRef, path.node));
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1297 */
[7893, 109, 1307, 88, 631, 36, 67, 1298, 2196, 5565, 628, 5625, 856, 2186, 5598, 79],
/* 1298 */
[7933, 5608, 2192, 860, 1301, 630, 5624, 5627],
/* 1299 */
[7967, 2192, 630],
/* 1300 */
709,
/* 1301 */
[7968, 1299, 1300, 497],
/* 1302 */
[7897, 5702],
/* 1303 */
[7952, 2211],
/* 1304 */
[7967, 2205, 498],
/* 1305 */
709,
/* 1306 */
[7976, 1304, 341],
/* 1307 */
[7825, 5716],
/* 1308 */
[7840, 2217],
/* 1309 */
969,
/* 1310 */
699,
/* 1311 */
543,
/* 1312 */
700,
/* 1313 */
[7847, 133, 1315, 2215],
/* 1314 */
[7853, 632, 271, 1311],
/* 1315 */
973,
/* 1316 */
[7856, 133, 1312, 499],
/* 1317 */
[7871, 133, 864, 1312, 2215, 632, 2220, 1311, 2221, 1316, 2222, 499, 5725, 2216, 5720, 5722, 1308, 633, 1315, 2219],
/* 1318 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(52)["default"];

	var _interopRequireWildcard = __webpack_require__(46)["default"];

	exports.__esModule = true;

	var _babelTraverse = __webpack_require__(409);

	var _destructuring = __webpack_require__(5742);

	var destructuring = _interopRequireWildcard(_destructuring);

	var _default = __webpack_require__(5741);

	var def = _interopRequireWildcard(_default);

	var _rest = __webpack_require__(5743);

	var rest = _interopRequireWildcard(_rest);

	/*:: import type { NodePath } from "babel-traverse";*/
	exports["default"] = function () {
	  return {
	    visitor: _babelTraverse.visitors.merge([{
	      ArrowFunctionExpression: function ArrowFunctionExpression(path) {
	        // default/rest visitors require access to `arguments`
	        var params /*: Array<NodePath>*/ = path.get("params");
	        for (var _iterator = params, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var param = _ref;

	          if (param.isRestElement() || param.isAssignmentPattern()) {
	            path.arrowFunctionToShadowed();
	            break;
	          }
	        }
	      }
	    }, destructuring.visitor, rest.visitor, def.visitor])
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1319 */
[7840, 2230],
/* 1320 */
969,
/* 1321 */
699,
/* 1322 */
543,
/* 1323 */
700,
/* 1324 */
[7847, 134, 1326, 2228],
/* 1325 */
[7853, 634, 272, 1322],
/* 1326 */
973,
/* 1327 */
[7856, 134, 1323, 500],
/* 1328 */
[7871, 134, 866, 1323, 2228, 634, 2233, 1322, 2234, 1327, 2235, 500, 5775, 2229, 5770, 5772, 1319, 635, 1326, 2232],
/* 1329 */
709,
/* 1330 */
172,
/* 1331 */
[7972, 638],
/* 1332 */
[7976, 2239, 1330],
/* 1333 */
[7893, 107, 2224, 52, 408, 13, 46, 1335, 2254, 5848, 409, 5908, 1334, 2244, 5881, 54],
/* 1334 */
[7815, 46],
/* 1335 */
[7933, 5891, 2250, 873, 1338, 640, 5907, 5910],
/* 1336 */
[7967, 2250, 640],
/* 1337 */
709,
/* 1338 */
[7968, 1336, 1337, 504],
/* 1339 */
[7897, 5753],
/* 1340 */
[7952, 2269],
/* 1341 */
[7967, 2263, 505],
/* 1342 */
709,
/* 1343 */
[7976, 1341, 345],
/* 1344 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(75)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(89);

	var t = _interopRequireWildcard(_babelTypes);

	exports["default"] = function () {
	  return {
	    visitor: {
	      ObjectMethod: function ObjectMethod(path) {
	        var node = path.node;

	        if (node.kind === "method") {
	          path.replaceWith(t.objectProperty(node.key, t.functionExpression(null, node.params, node.body, node.generator, node.async), node.computed));
	        }
	      },

	      ObjectProperty: function ObjectProperty(_ref) {
	        var node = _ref.node;

	        if (node.shorthand) {
	          node.shorthand = false;
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1345 */
[7840, 2275],
/* 1346 */
969,
/* 1347 */
699,
/* 1348 */
543,
/* 1349 */
700,
/* 1350 */
[7847, 135, 1352, 2273],
/* 1351 */
[7853, 642, 273, 1348],
/* 1352 */
973,
/* 1353 */
[7856, 135, 1349, 506],
/* 1354 */
[7871, 135, 877, 1349, 2273, 642, 2278, 1348, 2279, 1353, 2280, 506, 6009, 2274, 6004, 6006, 1345, 643, 1352, 2277],
/* 1355 */
[7897, 5986],
/* 1356 */
[7893, 114, 5985, 99, 641, 47, 75, 1358, 2287, 6052, 644, 6137, 1357, 2285, 6082, 89],
/* 1357 */
[7815, 75],
/* 1358 */
[7933, 2296, 1359, 274, 883, 412, 2303, 6139],
/* 1359 */
[7963, 2298],
/* 1360 */
[7967, 1359, 412],
/* 1361 */
709,
/* 1362 */
[7976, 1360, 349],
/* 1363 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(6142)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  function getSpreadLiteral(spread, scope, state) {
	    if (state.opts.loose && !t.isIdentifier(spread.argument, { name: "arguments" })) {
	      return spread.argument;
	    } else {
	      return scope.toArray(spread.argument, true);
	    }
	  }

	  function hasSpread(nodes) {
	    for (var i = 0; i < nodes.length; i++) {
	      if (t.isSpreadElement(nodes[i])) {
	        return true;
	      }
	    }
	    return false;
	  }

	  function build(props /*: Array*/, scope, state) {
	    var nodes = [];

	    var _props = [];

	    function push() {
	      if (!_props.length) return;
	      nodes.push(t.arrayExpression(_props));
	      _props = [];
	    }

	    for (var _iterator = props, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var prop = _ref;

	      if (t.isSpreadElement(prop)) {
	        push();
	        nodes.push(getSpreadLiteral(prop, scope, state));
	      } else {
	        _props.push(prop);
	      }
	    }

	    push();

	    return nodes;
	  }

	  return {
	    visitor: {
	      ArrayExpression: function ArrayExpression(path, state) {
	        var node = path.node;
	        var scope = path.scope;

	        var elements = node.elements;
	        if (!hasSpread(elements)) return;

	        var nodes = build(elements, scope, state);
	        var first = nodes.shift();

	        if (!t.isArrayExpression(first)) {
	          nodes.unshift(first);
	          first = t.arrayExpression([]);
	        }

	        path.replaceWith(t.callExpression(t.memberExpression(first, t.identifier("concat")), nodes));
	      },

	      CallExpression: function CallExpression(path, state) {
	        var node = path.node;
	        var scope = path.scope;

	        var args = node.arguments;
	        if (!hasSpread(args)) return;

	        var calleePath = path.get("callee");
	        if (calleePath.isSuper()) return;

	        var contextLiteral = t.identifier("undefined");

	        node.arguments = [];

	        var nodes = undefined;
	        if (args.length === 1 && args[0].argument.name === "arguments") {
	          nodes = [args[0].argument];
	        } else {
	          nodes = build(args, scope, state);
	        }

	        var first = nodes.shift();
	        if (nodes.length) {
	          node.arguments.push(t.callExpression(t.memberExpression(first, t.identifier("concat")), nodes));
	        } else {
	          node.arguments.push(first);
	        }

	        var callee = node.callee;

	        if (calleePath.isMemberExpression()) {
	          var temp = scope.maybeGenerateMemoised(callee.object);
	          if (temp) {
	            callee.object = t.assignmentExpression("=", temp, callee.object);
	            contextLiteral = temp;
	          } else {
	            contextLiteral = callee.object;
	          }
	          t.appendToMemberExpression(callee, t.identifier("apply"));
	        } else {
	          node.callee = t.memberExpression(node.callee, t.identifier("apply"));
	        }

	        node.arguments.unshift(contextLiteral);
	      },

	      NewExpression: function NewExpression(path, state) {
	        var node = path.node;
	        var scope = path.scope;

	        var args = node.arguments;
	        if (!hasSpread(args)) return;

	        var nodes = build(args, scope, state);

	        var context = t.arrayExpression([t.nullLiteral()]);

	        args = t.callExpression(t.memberExpression(context, t.identifier("concat")), nodes);

	        path.replaceWith(t.newExpression(t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier("Function"), t.identifier("prototype")), t.identifier("bind")), t.identifier("apply")), [node.callee, args]), []));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1364 */
144,
/* 1365 */
544,
/* 1366 */
[7847, 885, 2311, 6149],
/* 1367 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(68)["default"];

	exports.__esModule = true;

	var _babelHelperRegex = __webpack_require__(6168);

	var regex = _interopRequireWildcard(_babelHelperRegex);

	var _babelTypes = __webpack_require__(80);

	var t = _interopRequireWildcard(_babelTypes);

	exports["default"] = function () {
	  return {
	    visitor: {
	      RegExpLiteral: function RegExpLiteral(path) {
	        var node = path.node;

	        if (!regex.is(node, "y")) return;

	        path.replaceWith(t.newExpression(t.identifier("RegExp"), [t.stringLiteral(node.pattern), t.stringLiteral(node.flags)]));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1368 */
[7840, 2318],
/* 1369 */
969,
/* 1370 */
699,
/* 1371 */
543,
/* 1372 */
700,
/* 1373 */
[7847, 136, 1375, 2316],
/* 1374 */
[7853, 648, 275, 1371],
/* 1375 */
973,
/* 1376 */
[7856, 136, 1372, 509],
/* 1377 */
[7871, 136, 886, 1372, 2316, 648, 2321, 1371, 2322, 1376, 2323, 509, 6202, 2317, 6197, 6199, 1368, 649, 1375, 2320],
/* 1378 */
[7897, 6179],
/* 1379 */
[7893, 115, 6178, 100, 647, 41, 68, 1381, 2330, 6245, 650, 6330, 1380, 2328, 6275, 80],
/* 1380 */
[7815, 68],
/* 1381 */
[7933, 2339, 1382, 276, 892, 414, 2346, 6332],
/* 1382 */
[7963, 2341],
/* 1383 */
[7967, 1382, 414],
/* 1384 */
709,
/* 1385 */
[7976, 1383, 352],
/* 1386 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(6335)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref4) {
	  var t = _ref4.types;

	  function isString(node) {
	    return t.isLiteral(node) && typeof node.value === "string";
	  }

	  function buildBinaryExpression(left, right) {
	    return t.binaryExpression("+", left, right);
	  }

	  return {
	    visitor: {
	      TaggedTemplateExpression: function TaggedTemplateExpression(path, state) {
	        var node = path.node;

	        var quasi = node.quasi;
	        var args = [];

	        var strings = [];
	        var raw = [];

	        for (var _iterator = (quasi.quasis /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var elem = _ref;

	          strings.push(t.stringLiteral(elem.value.cooked));
	          raw.push(t.stringLiteral(elem.value.raw));
	        }

	        strings = t.arrayExpression(strings);
	        raw = t.arrayExpression(raw);

	        var templateName = "taggedTemplateLiteral";
	        if (state.opts.loose) templateName += "Loose";

	        var templateObject = state.file.addTemplateObject(templateName, strings, raw);
	        args.push(templateObject);

	        args = args.concat(quasi.expressions);

	        path.replaceWith(t.callExpression(node.tag, args));
	      },

	      TemplateLiteral: function TemplateLiteral(path, state) {
	        var nodes /*: Array<Object>*/ = [];

	        var expressions = path.get("expressions");

	        for (var _iterator2 = (path.node.quasis /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	          var _ref2;

	          if (_isArray2) {
	            if (_i2 >= _iterator2.length) break;
	            _ref2 = _iterator2[_i2++];
	          } else {
	            _i2 = _iterator2.next();
	            if (_i2.done) break;
	            _ref2 = _i2.value;
	          }

	          var elem = _ref2;

	          nodes.push(t.stringLiteral(elem.value.cooked));

	          var expr = expressions.shift();
	          if (expr) {
	            if (state.opts.spec && !expr.isBaseType("string") && !expr.isBaseType("number")) {
	              nodes.push(t.callExpression(t.identifier("String"), [expr.node]));
	            } else {
	              nodes.push(expr.node);
	            }
	          }
	        }

	        // filter out empty string literals
	        nodes = nodes.filter(function (n) {
	          return !t.isLiteral(n, { value: "" });
	        });

	        // since `+` is left-to-right associative
	        // ensure the first node is a string if first/second isn't
	        if (!isString(nodes[0]) && !isString(nodes[1])) {
	          nodes.unshift(t.stringLiteral(""));
	        }

	        if (nodes.length > 1) {
	          var root = buildBinaryExpression(nodes.shift(), nodes.shift());

	          for (var _iterator3 = nodes, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	            var _ref3;

	            if (_isArray3) {
	              if (_i3 >= _iterator3.length) break;
	              _ref3 = _iterator3[_i3++];
	            } else {
	              _i3 = _iterator3.next();
	              if (_i3.done) break;
	              _ref3 = _i3.value;
	            }

	            var node = _ref3;

	            root = buildBinaryExpression(root, node);
	          }

	          path.replaceWith(root);
	        } else {
	          path.replaceWith(nodes[0]);
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1387 */
144,
/* 1388 */
544,
/* 1389 */
[7847, 894, 2354, 6342],
/* 1390 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Symbol = __webpack_require__(6361)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  var IGNORE = _Symbol();

	  return {
	    visitor: {
	      UnaryExpression: function UnaryExpression(path) {
	        var node = path.node;
	        var parent = path.parent;

	        if (node[IGNORE]) return;
	        if (path.find(function (path) {
	          return path.node && !!path.node._generated;
	        })) return;

	        if (path.parentPath.isBinaryExpression() && t.EQUALITY_BINARY_OPERATORS.indexOf(parent.operator) >= 0) {
	          // optimise `typeof foo === "string"` since we can determine that they'll never need to handle symbols
	          var opposite = path.getOpposite();
	          if (opposite.isLiteral() && opposite.node.value !== "symbol" && opposite.node.value !== "object") {
	            return;
	          }
	        }

	        if (node.operator === "typeof") {
	          var call = t.callExpression(this.addHelper("typeof"), [node.argument]);
	          if (path.get("argument").isIdentifier()) {
	            var undefLiteral = t.stringLiteral("undefined");
	            var unary = t.unaryExpression("typeof", node.argument);
	            unary[IGNORE] = true;
	            path.replaceWith(t.conditionalExpression(t.binaryExpression("===", unary, undefLiteral), undefLiteral, call));
	          } else {
	            path.replaceWith(call);
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1391 */
[7859, 6371, 6366],
/* 1392 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(37)["default"];

	var _interopRequireWildcard = __webpack_require__(69)["default"];

	exports.__esModule = true;

	var _regexpuRewritePattern = __webpack_require__(6548);

	var _regexpuRewritePattern2 = _interopRequireDefault(_regexpuRewritePattern);

	var _babelHelperRegex = __webpack_require__(6380);

	var regex = _interopRequireWildcard(_babelHelperRegex);

	exports["default"] = function () {
	  return {
	    visitor: {
	      RegExpLiteral: function RegExpLiteral(_ref) {
	        var node = _ref.node;

	        if (!regex.is(node, "u")) return;
	        node.pattern = _regexpuRewritePattern2["default"](node.pattern, node.flags);
	        regex.pullFlag(node, "u");
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1393 */
[7897, 6506],
/* 1394 */
[7893, 116, 6505, 101, 655, 37, 69, 1396, 2371, 6408, 653, 6495, 1395, 2369, 6438, 90],
/* 1395 */
[7815, 69],
/* 1396 */
[7933, 1397, 1398, 277, 900, 416, 2386, 6497],
/* 1397 */
[7944, 6483],
/* 1398 */
[7963, 2381],
/* 1399 */
[7967, 1398, 416],
/* 1400 */
709,
/* 1401 */
[7976, 1399, 355],
/* 1402 */
[7840, 2395],
/* 1403 */
969,
/* 1404 */
699,
/* 1405 */
543,
/* 1406 */
700,
/* 1407 */
[7847, 137, 1409, 2393],
/* 1408 */
[7853, 656, 278, 1405],
/* 1409 */
973,
/* 1410 */
[7856, 137, 1406, 515],
/* 1411 */
[7871, 137, 901, 1406, 2393, 656, 2398, 1405, 2399, 1410, 2400, 515, 6529, 2394, 6524, 6526, 1402, 657, 1409, 2397],
/* 1412 */
[7893, 42, 1425, 16, 242, 3, 17, 519, 2409, 6585, 659, 2433, 1413, 2406, 6618, 28],
/* 1413 */
[7815, 17],
/* 1414 */
[7897, 6740],
/* 1415 */
[7893, 42, 1425, 16, 242, 3, 17, 519, 2416, 6649, 661, 2433, 1416, 2414, 6679, 28],
/* 1416 */
[7815, 17],
/* 1417 */
[7943, 360],
/* 1418 */
[7963, 2429],
/* 1419 */
[7967, 1418, 358],
/* 1420 */
[7969, 241, 360],
/* 1421 */
[7973, 6703, 241],
/* 1422 */
[7974, 2424, 663, 911],
/* 1423 */
[7985, 6693, 2423, 6709],
/* 1424 */
[7823, 6750],
/* 1425 */
[7825, 6753],
/* 1426 */
[7828, 242, 6739],
/* 1427 */
[7840, 2441],
/* 1428 */
969,
/* 1429 */
699,
/* 1430 */
543,
/* 1431 */
700,
/* 1432 */
[7847, 138, 1434, 2439],
/* 1433 */
[7853, 664, 279, 1430],
/* 1434 */
973,
/* 1435 */
[7856, 138, 1431, 521],
/* 1436 */
[7871, 138, 914, 1431, 2439, 664, 2444, 1430, 2445, 1435, 2446, 521, 6762, 2440, 6757, 6759, 1427, 665, 1434, 2443],
/* 1437 */
[7897, 6905],
/* 1438 */
[7893, 117, 6904, 102, 668, 38, 70, 1440, 2454, 6808, 666, 6893, 1439, 2452, 6838, 81],
/* 1439 */
[7815, 70],
/* 1440 */
[7933, 2463, 1441, 280, 920, 420, 2470, 6895],
/* 1441 */
[7963, 2465],
/* 1442 */
[7967, 1441, 420],
/* 1443 */
709,
/* 1444 */
[7976, 1442, 362],
/* 1445 */
[7840, 2479],
/* 1446 */
969,
/* 1447 */
699,
/* 1448 */
543,
/* 1449 */
700,
/* 1450 */
[7847, 139, 1452, 2477],
/* 1451 */
[7853, 669, 281, 1448],
/* 1452 */
973,
/* 1453 */
[7856, 139, 1449, 524],
/* 1454 */
[7871, 139, 921, 1449, 2477, 669, 2482, 1448, 2483, 1453, 2484, 524, 6928, 2478, 6923, 6925, 1445, 670, 1452, 2481],
/* 1455 */
144,
/* 1456 */
544,
/* 1457 */
[7847, 924, 2491, 6951],
/* 1458 */
144,
/* 1459 */
544,
/* 1460 */
[7847, 926, 2499, 6984],
/* 1461 */
144,
/* 1462 */
544,
/* 1463 */
[7847, 928, 2505, 7014],
/* 1464 */
144,
/* 1465 */
544,
/* 1466 */
[7847, 930, 2512, 7046],
/* 1467 */
[7897, 7191],
/* 1468 */
[7893, 118, 7190, 103, 677, 43, 76, 1471, 2520, 7094, 675, 7180, 1469, 2518, 7124, 91],
/* 1469 */
[7815, 76],
/* 1470 */
[7811, 7129, 2521, 7130],
/* 1471 */
[7933, 2528, 1472, 282, 935, 422, 2535, 7182],
/* 1472 */
[7963, 2530],
/* 1473 */
[7967, 1472, 422],
/* 1474 */
709,
/* 1475 */
[7976, 1473, 365],
/* 1476 */
[7840, 2544],
/* 1477 */
969,
/* 1478 */
699,
/* 1479 */
543,
/* 1480 */
700,
/* 1481 */
[7847, 140, 1483, 2542],
/* 1482 */
[7853, 678, 283, 1479],
/* 1483 */
973,
/* 1484 */
[7856, 140, 1480, 527],
/* 1485 */
[7871, 140, 936, 1480, 2542, 678, 2547, 1479, 2548, 1484, 2549, 527, 7214, 2543, 7209, 7211, 1476, 679, 1483, 2546],
/* 1486 */
[7897, 7357],
/* 1487 */
[7893, 119, 7356, 93, 682, 44, 77, 1490, 2557, 7260, 680, 7346, 1488, 2555, 7290, 92],
/* 1488 */
[7815, 77],
/* 1489 */
[7811, 7295, 2558, 7296],
/* 1490 */
[7933, 2565, 1491, 284, 942, 424, 2572, 7348],
/* 1491 */
[7963, 2567],
/* 1492 */
[7967, 1491, 424],
/* 1493 */
709,
/* 1494 */
[7976, 1492, 368],
/* 1495 */
[7840, 2581],
/* 1496 */
969,
/* 1497 */
699,
/* 1498 */
543,
/* 1499 */
700,
/* 1500 */
[7847, 141, 1502, 2579],
/* 1501 */
[7853, 683, 285, 1498],
/* 1502 */
973,
/* 1503 */
[7856, 141, 1499, 530],
/* 1504 */
[7871, 141, 943, 1499, 2579, 683, 2584, 1498, 2585, 1503, 2586, 530, 7380, 2580, 7375, 7377, 1495, 684, 1502, 2583],
/* 1505 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return __webpack_require__(7399);
	};

	module.exports = exports["default"];

/***/ },
/* 1506 */
[7823, 7418],
/* 1507 */
[7840, 2593],
/* 1508 */
969,
/* 1509 */
699,
/* 1510 */
543,
/* 1511 */
700,
/* 1512 */
[7847, 142, 1514, 2591],
/* 1513 */
[7853, 686, 286, 1510],
/* 1514 */
973,
/* 1515 */
[7856, 142, 1511, 531],
/* 1516 */
[7871, 142, 945, 1511, 2591, 686, 2596, 1510, 2597, 1515, 2598, 531, 7430, 2592, 7425, 7427, 1507, 687, 1514, 2595],
/* 1517 */
[7893, 120, 7406, 104, 685, 32, 53, 1519, 2611, 7462, 688, 7509, 1518, 2602, 7482, 57],
/* 1518 */
[7815, 53],
/* 1519 */
[7933, 7492, 2607, 948, 1522, 689, 7508, 7511],
/* 1520 */
[7967, 2607, 689],
/* 1521 */
709,
/* 1522 */
[7968, 1520, 1521, 532],
/* 1523 */
[7897, 7407],
/* 1524 */
[7952, 2626],
/* 1525 */
[7967, 2620, 533],
/* 1526 */
709,
/* 1527 */
[7976, 1525, 371],
/* 1528 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(94)["default"];

	var _interopRequireWildcard = __webpack_require__(78)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(95);

	var t = _interopRequireWildcard(_babelTypes);

	exports["default"] = function () {
	  return {
	    visitor: {
	      Program: function Program(path, state) {
	        if (state.opts.strict === false) return;

	        var node = path.node;

	        for (var _iterator = (node.directives /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var directive = _ref;

	          if (directive.value.value === "use strict") return;
	        }

	        path.unshiftContainer("directives", t.directive(t.directiveLiteral("use strict")));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1529 */
[7840, 2634],
/* 1530 */
969,
/* 1531 */
699,
/* 1532 */
543,
/* 1533 */
700,
/* 1534 */
[7847, 143, 1536, 2632],
/* 1535 */
[7853, 692, 287, 1532],
/* 1536 */
973,
/* 1537 */
[7856, 143, 1533, 535],
/* 1538 */
[7871, 143, 954, 1533, 2632, 692, 2637, 1532, 2638, 1537, 2639, 535, 7629, 2633, 7624, 7626, 1529, 693, 1536, 2636],
/* 1539 */
[7897, 7606],
/* 1540 */
[7893, 121, 7605, 94, 691, 48, 78, 1542, 2646, 7672, 694, 7757, 1541, 2644, 7702, 95],
/* 1541 */
[7815, 78],
/* 1542 */
[7933, 2655, 1543, 288, 960, 427, 2662, 7759],
/* 1543 */
[7963, 2657],
/* 1544 */
[7967, 1543, 427],
/* 1545 */
709,
/* 1546 */
[7976, 1544, 375],
/* 1547 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(8)["default"];

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	var _interopRequire = __webpack_require__(968)["default"];

	exports.__esModule = true;
	exports.transformFile = transformFile;
	exports.transformFileSync = transformFileSync;

	var _lodashLangIsFunction = __webpack_require__(1596);

	var _lodashLangIsFunction2 = _interopRequireDefault(_lodashLangIsFunction);

	var _fs = __webpack_require__(428);

	var _fs2 = _interopRequireDefault(_fs);

	//

	//

	var _util = __webpack_require__(967);

	var util = _interopRequireWildcard(_util);

	var _babelMessages = __webpack_require__(290);

	var messages = _interopRequireWildcard(_babelMessages);

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	var _babelTraverse = __webpack_require__(169);

	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

	var _transformationFileOptionsOptionManager = __webpack_require__(539);

	var _transformationFileOptionsOptionManager2 = _interopRequireDefault(_transformationFileOptionsOptionManager);

	//

	var _transformationPipeline = __webpack_require__(2679);

	var _transformationPipeline2 = _interopRequireDefault(_transformationPipeline);

	var _transformationFile = __webpack_require__(963);

	exports.File = _interopRequire(_transformationFile);

	var _transformationFileOptionsConfig = __webpack_require__(538);

	exports.options = _interopRequire(_transformationFileOptionsConfig);

	var _toolsBuildExternalHelpers = __webpack_require__(2674);

	exports.buildExternalHelpers = _interopRequire(_toolsBuildExternalHelpers);

	var _babelTemplate = __webpack_require__(977);

	exports.template = _interopRequire(_babelTemplate);

	var _package = __webpack_require__(7770);

	exports.version = _package.version;
	exports.util = util;
	exports.messages = messages;
	exports.types = t;
	exports.traverse = _babelTraverse2["default"];
	exports.OptionManager = _transformationFileOptionsOptionManager2["default"];
	exports.Pipeline = _transformationPipeline2["default"];

	var pipeline = new _transformationPipeline2["default"]();
	var transform = pipeline.transform.bind(pipeline);
	exports.transform = transform;
	var transformFromAst = pipeline.transformFromAst.bind(pipeline);

	exports.transformFromAst = transformFromAst;
	//

	function transformFile(filename /*: string*/, opts /*:: ?: Object*/, callback /*: Function*/) {
	  if (_lodashLangIsFunction2["default"](opts)) {
	    callback = opts;
	    opts = {};
	  }

	  opts.filename = filename;

	  _fs2["default"].readFile(filename, function (err, code) {
	    var result = undefined;

	    if (!err) {
	      try {
	        result = transform(code, opts);
	      } catch (_err) {
	        err = _err;
	      }
	    }

	    if (err) {
	      callback(err);
	    } else {
	      callback(null, result);
	    }
	  });
	}

	function transformFileSync(filename /*: string*/) /*: string*/ {
	  var opts /*:: ?: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  opts.filename = filename;
	  return transform(_fs2["default"].readFileSync(filename, "utf8"), opts);
	}

/***/ },
/* 1548 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./config": 538,
		"./config.js": 538,
		"./index": 964,
		"./index.js": 964,
		"./option-manager": 539,
		"./option-manager.js": 539,
		"./parsers": 965,
		"./parsers.js": 965
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 1548;


/***/ },
/* 1549 */
[7806, 8, 2693, 2695, 2692, 2691, 2681],
/* 1550 */
/***/ function(module, exports) {

	/*
	  Copyright (C) 2013-2014 Yusuke Suzuki <utatane.tea@gmail.com>
	  Copyright (C) 2014 Ivan Nikulin <ifaaan@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function () {
	    'use strict';

	    var ES6Regex, ES5Regex, NON_ASCII_WHITESPACES, IDENTIFIER_START, IDENTIFIER_PART, ch;

	    // See `tools/generate-identifier-regex.js`.
	    ES5Regex = {
	        // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierStart:
	        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
	        // ECMAScript 5.1/Unicode v7.0.0 NonAsciiIdentifierPart:
	        NonAsciiIdentifierPart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/
	    };

	    ES6Regex = {
	        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:
	        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,
	        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:
	        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
	    };

	    function isDecimalDigit(ch) {
	        return 0x30 <= ch && ch <= 0x39;  // 0..9
	    }

	    function isHexDigit(ch) {
	        return 0x30 <= ch && ch <= 0x39 ||  // 0..9
	            0x61 <= ch && ch <= 0x66 ||     // a..f
	            0x41 <= ch && ch <= 0x46;       // A..F
	    }

	    function isOctalDigit(ch) {
	        return ch >= 0x30 && ch <= 0x37;  // 0..7
	    }

	    // 7.2 White Space

	    NON_ASCII_WHITESPACES = [
	        0x1680, 0x180E,
	        0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A,
	        0x202F, 0x205F,
	        0x3000,
	        0xFEFF
	    ];

	    function isWhiteSpace(ch) {
	        return ch === 0x20 || ch === 0x09 || ch === 0x0B || ch === 0x0C || ch === 0xA0 ||
	            ch >= 0x1680 && NON_ASCII_WHITESPACES.indexOf(ch) >= 0;
	    }

	    // 7.3 Line Terminators

	    function isLineTerminator(ch) {
	        return ch === 0x0A || ch === 0x0D || ch === 0x2028 || ch === 0x2029;
	    }

	    // 7.6 Identifier Names and Identifiers

	    function fromCodePoint(cp) {
	        if (cp <= 0xFFFF) { return String.fromCharCode(cp); }
	        var cu1 = String.fromCharCode(Math.floor((cp - 0x10000) / 0x400) + 0xD800);
	        var cu2 = String.fromCharCode(((cp - 0x10000) % 0x400) + 0xDC00);
	        return cu1 + cu2;
	    }

	    IDENTIFIER_START = new Array(0x80);
	    for(ch = 0; ch < 0x80; ++ch) {
	        IDENTIFIER_START[ch] =
	            ch >= 0x61 && ch <= 0x7A ||  // a..z
	            ch >= 0x41 && ch <= 0x5A ||  // A..Z
	            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
	    }

	    IDENTIFIER_PART = new Array(0x80);
	    for(ch = 0; ch < 0x80; ++ch) {
	        IDENTIFIER_PART[ch] =
	            ch >= 0x61 && ch <= 0x7A ||  // a..z
	            ch >= 0x41 && ch <= 0x5A ||  // A..Z
	            ch >= 0x30 && ch <= 0x39 ||  // 0..9
	            ch === 0x24 || ch === 0x5F;  // $ (dollar) and _ (underscore)
	    }

	    function isIdentifierStartES5(ch) {
	        return ch < 0x80 ? IDENTIFIER_START[ch] : ES5Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
	    }

	    function isIdentifierPartES5(ch) {
	        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES5Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
	    }

	    function isIdentifierStartES6(ch) {
	        return ch < 0x80 ? IDENTIFIER_START[ch] : ES6Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch));
	    }

	    function isIdentifierPartES6(ch) {
	        return ch < 0x80 ? IDENTIFIER_PART[ch] : ES6Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch));
	    }

	    module.exports = {
	        isDecimalDigit: isDecimalDigit,
	        isHexDigit: isHexDigit,
	        isOctalDigit: isOctalDigit,
	        isWhiteSpace: isWhiteSpace,
	        isLineTerminator: isLineTerminator,
	        isIdentifierStartES5: isIdentifierStartES5,
	        isIdentifierPartES5: isIdentifierPartES5,
	        isIdentifierStartES6: isIdentifierStartES6,
	        isIdentifierPartES6: isIdentifierPartES6
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 1551 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	/* eslint quotes: 0 */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;
	exports.Identifier = Identifier;
	exports.RestElement = RestElement;
	exports.ObjectExpression = ObjectExpression;
	exports.ObjectMethod = ObjectMethod;
	exports.ObjectProperty = ObjectProperty;
	exports.ArrayExpression = ArrayExpression;
	exports.RegExpLiteral = RegExpLiteral;
	exports.BooleanLiteral = BooleanLiteral;
	exports.NullLiteral = NullLiteral;
	exports.NumericLiteral = NumericLiteral;
	exports.StringLiteral = StringLiteral;
	exports._stringLiteral = _stringLiteral;

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	function Identifier(node /*: Object*/) {
	  this.push(node.name);
	}

	function RestElement(node /*: Object*/) {
	  this.push("...");
	  this.print(node.argument, node);
	}

	exports.SpreadElement = RestElement;
	exports.SpreadProperty = RestElement;
	exports.RestProperty = RestElement;

	function ObjectExpression(node /*: Object*/) {
	  var props = node.properties;

	  this.push("{");
	  this.printInnerComments(node);

	  if (props.length) {
	    this.space();
	    this.printList(props, node, { indent: true });
	    this.space();
	  }

	  this.push("}");
	}

	exports.ObjectPattern = ObjectExpression;

	function ObjectMethod(node /*: Object*/) {
	  this.printJoin(node.decorators, node, { separator: "" });
	  this._method(node);
	}

	function ObjectProperty(node /*: Object*/) {
	  this.printJoin(node.decorators, node, { separator: "" });

	  if (node.computed) {
	    this.push("[");
	    this.print(node.key, node);
	    this.push("]");
	  } else {
	    // print `({ foo: foo = 5 } = {})` as `({ foo = 5 } = {});`
	    if (t.isAssignmentPattern(node.value) && t.isIdentifier(node.key) && node.key.name === node.value.left.name) {
	      this.print(node.value, node);
	      return;
	    }

	    this.print(node.key, node);

	    // shorthand!
	    if (node.shorthand && t.isIdentifier(node.key) && t.isIdentifier(node.value) && node.key.name === node.value.name) {
	      return;
	    }
	  }

	  this.push(":");
	  this.space();
	  this.print(node.value, node);
	}

	function ArrayExpression(node /*: Object*/) {
	  var elems = node.elements;
	  var len = elems.length;

	  this.push("[");
	  this.printInnerComments(node);

	  for (var i = 0; i < elems.length; i++) {
	    var elem = elems[i];
	    if (elem) {
	      if (i > 0) this.space();
	      this.print(elem, node);
	      if (i < len - 1) this.push(",");
	    } else {
	      // If the array expression ends with a hole, that hole
	      // will be ignored by the interpreter, but if it ends with
	      // two (or more) holes, we need to write out two (or more)
	      // commas so that the resulting code is interpreted with
	      // both (all) of the holes.
	      this.push(",");
	    }
	  }

	  this.push("]");
	}

	exports.ArrayPattern = ArrayExpression;

	function RegExpLiteral(node /*: Object*/) {
	  this.push("/" + node.pattern + "/" + node.flags);
	}

	function BooleanLiteral(node /*: Object*/) {
	  this.push(node.value ? "true" : "false");
	}

	function NullLiteral() {
	  this.push("null");
	}

	function NumericLiteral(node /*: Object*/) {
	  this.push(node.value + "");
	}

	function StringLiteral(node /*: Object*/) {
	  this.push(this._stringLiteral(node.value));
	}

	function _stringLiteral(val /*: string*/) /*: string*/ {
	  val = JSON.stringify(val);

	  // escape illegal js but valid json unicode characters
	  val = val.replace(/[\u000A\u000D\u2028\u2029]/g, function (c) {
	    return "\\u" + ("0000" + c.charCodeAt(0).toString(16)).slice(-4);
	  });

	  if (this.format.quotes === "single") {
	    // remove double quotes
	    val = val.slice(1, -1);

	    // unescape double quotes
	    val = val.replace(/\\"/g, '"');

	    // escape single quotes
	    val = val.replace(/'/g, "\\'");

	    // add single quotes
	    val = "'" + val + "'";
	  }

	  return val;
	}

/***/ },
/* 1552 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _inherits = __webpack_require__(377)["default"];

	var _classCallCheck = __webpack_require__(60)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;

	var _detectIndent = __webpack_require__(2714);

	var _detectIndent2 = _interopRequireDefault(_detectIndent);

	var _whitespace = __webpack_require__(2713);

	var _whitespace2 = _interopRequireDefault(_whitespace);

	var _sourceMap = __webpack_require__(2712);

	var _sourceMap2 = _interopRequireDefault(_sourceMap);

	var _position = __webpack_require__(2710);

	var _position2 = _interopRequireDefault(_position);

	var _babelMessages = __webpack_require__(290);

	var messages = _interopRequireWildcard(_babelMessages);

	var _printer = __webpack_require__(2711);

	var _printer2 = _interopRequireDefault(_printer);

	/**
	 * Babel's code generator, turns an ast into code, maintaining sourcemaps,
	 * user preferences, and valid output.
	 */

	var CodeGenerator = (function (_Printer) {
	  _inherits(CodeGenerator, _Printer);

	  function CodeGenerator(ast, opts, code) {
	    _classCallCheck(this, CodeGenerator);

	    opts = opts || {};

	    var comments = ast.comments || [];
	    var tokens = ast.tokens || [];
	    var format = CodeGenerator.normalizeOptions(code, opts, tokens);

	    var position = new _position2["default"]();

	    _Printer.call(this, position, format);

	    this.comments = comments;
	    this.position = position;
	    this.tokens = tokens;
	    this.format = format;
	    this.opts = opts;
	    this.ast = ast;

	    this.whitespace = new _whitespace2["default"](tokens);
	    this.map = new _sourceMap2["default"](position, opts, code);
	  }

	  /**
	   * Normalize generator options, setting defaults.
	   *
	   * - Detects code indentation.
	   * - If `opts.compact = "auto"` and the code is over 100KB, `compact` will be set to `true`.
	    */

	  CodeGenerator.normalizeOptions = function normalizeOptions(code, opts, tokens) {
	    var style = "  ";
	    if (code) {
	      var _indent = _detectIndent2["default"](code).indent;
	      if (_indent && _indent !== " ") style = _indent;
	    }

	    var format = {
	      auxiliaryCommentBefore: opts.auxiliaryCommentBefore,
	      auxiliaryCommentAfter: opts.auxiliaryCommentAfter,
	      shouldPrintComment: opts.shouldPrintComment,
	      retainLines: opts.retainLines,
	      comments: opts.comments == null || opts.comments,
	      compact: opts.compact,
	      concise: opts.concise,
	      quotes: CodeGenerator.findCommonStringDelimiter(code, tokens),
	      indent: {
	        adjustMultilineComment: true,
	        style: style,
	        base: 0
	      }
	    };

	    if (format.compact === "auto") {
	      format.compact = code.length > 100000; // 100KB

	      if (format.compact) {
	        console.error("[BABEL] " + messages.get("codeGeneratorDeopt", opts.filename, "100KB"));
	      }
	    }

	    if (format.compact) {
	      format.indent.adjustMultilineComment = false;
	    }

	    return format;
	  };

	  /**
	   * Determine if input code uses more single or double quotes.
	   */

	  CodeGenerator.findCommonStringDelimiter = function findCommonStringDelimiter(code, tokens) {
	    var occurences = {
	      single: 0,
	      double: 0
	    };

	    var checked = 0;

	    for (var i = 0; i < tokens.length; i++) {
	      var token = tokens[i];
	      if (token.type.label !== "string") continue;

	      var raw = code.slice(token.start, token.end);
	      if (raw[0] === "'") {
	        occurences.single++;
	      } else {
	        occurences.double++;
	      }

	      checked++;
	      if (checked >= 3) break;
	    }
	    if (occurences.single > occurences.double) {
	      return "single";
	    } else {
	      return "double";
	    }
	  };

	  /**
	   * Generate code and sourcemap from ast.
	   *
	   * Appends comments that weren't attached to any node to the end of the generated output.
	   */

	  CodeGenerator.prototype.generate = function generate() {
	    this.print(this.ast);
	    this.printAuxAfterComment();

	    return {
	      map: this.map.get(),
	      code: this.get()
	    };
	  };

	  return CodeGenerator;
	})(_printer2["default"]);

	exports.CodeGenerator = CodeGenerator;

	exports["default"] = function (ast /*: Object*/, opts /*: Object*/, code /*: string*/) /*: Object*/ {
	  var gen = new CodeGenerator(ast, opts, code);
	  return gen.generate();
	};

/***/ },
/* 1553 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _classCallCheck = __webpack_require__(60)["default"];

	var _Object$keys = __webpack_require__(697)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;

	var _whitespace = __webpack_require__(2709);

	var _whitespace2 = _interopRequireDefault(_whitespace);

	var _parentheses = __webpack_require__(2708);

	var parens = _interopRequireWildcard(_parentheses);

	var _lodashCollectionEach = __webpack_require__(705);

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _lodashCollectionSome = __webpack_require__(2832);

	var _lodashCollectionSome2 = _interopRequireDefault(_lodashCollectionSome);

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	function find(obj, node, parent) {
	  if (!obj) return;
	  var result = undefined;

	  var types = _Object$keys(obj);
	  for (var i = 0; i < types.length; i++) {
	    var type = types[i];

	    if (t.is(type, node)) {
	      var fn = obj[type];
	      result = fn(node, parent);
	      if (result != null) break;
	    }
	  }

	  return result;
	}

	var Node = (function () {
	  function Node(node /*: Object*/, parent /*: Object*/) {
	    _classCallCheck(this, Node);

	    this.parent = parent;
	    this.node = node;
	  }

	  Node.isUserWhitespacable = function isUserWhitespacable(node) {
	    return t.isUserWhitespacable(node);
	  };

	  Node.needsWhitespace = function needsWhitespace(node, parent, type) {
	    if (!node) return 0;

	    if (t.isExpressionStatement(node)) {
	      node = node.expression;
	    }

	    var linesInfo = find(_whitespace2["default"].nodes, node, parent);

	    if (!linesInfo) {
	      var items = find(_whitespace2["default"].list, node, parent);
	      if (items) {
	        for (var i = 0; i < items.length; i++) {
	          linesInfo = Node.needsWhitespace(items[i], node, type);
	          if (linesInfo) break;
	        }
	      }
	    }

	    return linesInfo && linesInfo[type] || 0;
	  };

	  Node.needsWhitespaceBefore = function needsWhitespaceBefore(node, parent) {
	    return Node.needsWhitespace(node, parent, "before");
	  };

	  Node.needsWhitespaceAfter = function needsWhitespaceAfter(node, parent) {
	    return Node.needsWhitespace(node, parent, "after");
	  };

	  Node.needsParens = function needsParens(node, parent) {
	    if (!parent) return false;

	    if (t.isNewExpression(parent) && parent.callee === node) {
	      if (t.isCallExpression(node)) return true;

	      var hasCall = _lodashCollectionSome2["default"](node, function (val) {
	        return t.isCallExpression(val);
	      });
	      if (hasCall) return true;
	    }

	    return find(parens, node, parent);
	  };

	  return Node;
	})();

	exports["default"] = Node;

	_lodashCollectionEach2["default"](Node, function (fn, key) {
	  Node.prototype[key] = function () {
	    // Avoid leaking arguments to prevent deoptimization
	    var args = new Array(arguments.length + 2);

	    args[0] = this.node;
	    args[1] = this.parent;

	    for (var i = 0; i < args.length; i++) {
	      args[i + 2] = arguments[i];
	    }

	    return Node[key].apply(null, args);
	  };
	});
	module.exports = exports["default"];

/***/ },
/* 1554 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$keys = __webpack_require__(697)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	exports.__esModule = true;
	exports.get = get;

	var _helpers = __webpack_require__(2721);

	var _helpers2 = _interopRequireDefault(_helpers);

	function get(name) {
	  var fn = _helpers2["default"][name];
	  if (!fn) throw new ReferenceError("Unknown helper " + name);

	  return fn().expression;
	}

	var list = _Object$keys(_helpers2["default"]).map(function (name) {
	  return name[0] === "_" ? name.slice(1) : name;
	}).filter(function (name) {
	  return name !== "__esModule";
	});

	exports.list = list;
	exports["default"] = get;

/***/ },
/* 1555 */
[7825, 2745],
/* 1556 */
[7841, 969, 292],
/* 1557 */
[7846, 547, 108],
/* 1558 */
[7848, 969],
/* 1559 */
/***/ function(module, exports) {

	module.exports = function(done, value){
	  return {value: value, done: !!done};
	};

/***/ },
/* 1560 */
/***/ function(module, exports) {

	module.exports = true;

/***/ },
/* 1561 */
/***/ function(module, exports, __webpack_require__) {

	var redefine = __webpack_require__(974);
	module.exports = function(target, src){
	  for(var key in src)redefine(target, key, src[key]);
	  return target;
	};

/***/ },
/* 1562 */
[7857, 544],
/* 1563 */
/***/ function(module, exports) {

	module.exports = function(it, Constructor, name){
	  if(!(it instanceof Constructor))throw TypeError(name + ": use the 'new' operator!");
	  return it;
	};

/***/ },
/* 1564 */
/***/ function(module, exports) {

	// 7.1.4 ToInteger
	var ceil  = Math.ceil
	  , floor = Math.floor;
	module.exports = function(it){
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 1565 */
[7860, 699],
/* 1566 */
[7862, 1556, 292, 546, 144],
/* 1567 */
428,
/* 1568 */
[7870, 2760, 971],
/* 1569 */
[7872, 2763, 546],
/* 1570 */
[7875, 60],
/* 1571 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	var PATH_CACHE_KEY = "_paths";exports.PATH_CACHE_KEY = PATH_CACHE_KEY;
	//Symbol();

/***/ },
/* 1572 */
[7888, 14, 31],
/* 1573 */
[7892, 60],
/* 1574 */
[7910, 540, 14, 31],
/* 1575 */
1550,
/* 1576 */
[7924, 60, 8, 548, 171, 703, 704, 429, 2821],
/* 1577 */
[7929, 2825],
/* 1578 */
/***/ function(module, exports) {

	/**
	 * Gets the last element of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to query.
	 * @returns {*} Returns the last element of `array`.
	 * @example
	 *
	 * _.last([1, 2, 3]);
	 * // => 3
	 */
	function last(array) {
	  var length = array ? array.length : 0;
	  return length ? array[length - 1] : undefined;
	}

	module.exports = last;


/***/ },
/* 1579 */
/***/ function(module, exports) {

	/** Used as the `TypeError` message for "Functions" methods. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Creates a function that invokes `func` with the `this` binding of the
	 * created function and arguments from `start` and beyond provided as an array.
	 *
	 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
	 *
	 * @static
	 * @memberOf _
	 * @category Function
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var say = _.restParam(function(what, names) {
	 *   return what + ' ' + _.initial(names).join(', ') +
	 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
	 * });
	 *
	 * say('hello', 'fred', 'barney', 'pebbles');
	 * // => 'hello fred, barney, & pebbles'
	 */
	function restParam(func, start) {
	  if (typeof func != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
	  return function() {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        rest = Array(length);

	    while (++index < length) {
	      rest[index] = args[start + index];
	    }
	    switch (start) {
	      case 0: return func.call(this, rest);
	      case 1: return func.call(this, args[0], rest);
	      case 2: return func.call(this, args[0], args[1], rest);
	    }
	    var otherArgs = Array(start + 1);
	    index = -1;
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = rest;
	    return func.apply(this, otherArgs);
	  };
	}

	module.exports = restParam;


/***/ },
/* 1580 */
/***/ function(module, exports) {

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function arrayCopy(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	module.exports = arrayCopy;


/***/ },
/* 1581 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;


/***/ },
/* 1582 */
[7936, 1584, 379],
/* 1583 */
[7938, 1580, 981, 1582, 1586, 2866, 2867, 2868, 110, 145],
/* 1584 */
/***/ function(module, exports) {

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property names to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @returns {Object} Returns `object`.
	 */
	function baseCopy(source, props, object) {
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];
	    object[key] = source[key];
	  }
	  return object;
	}

	module.exports = baseCopy;


/***/ },
/* 1585 */
[7940, 2856],
/* 1586 */
[7942, 1585, 379],
/* 1587 */
[7944, 2865],
/* 1588 */
[7945, 2840, 145, 172],
/* 1589 */
/***/ function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(982),
	    isArrayLike = __webpack_require__(430);

	/**
	 * The base implementation of `_.map` without support for callback shorthands
	 * and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];

	  baseEach(collection, function(value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	module.exports = baseMap;


/***/ },
/* 1590 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function baseProperty(key) {
	  return function(object) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = baseProperty;


/***/ },
/* 1591 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  start = start == null ? 0 : (+start || 0);
	  if (start < 0) {
	    start = -start > length ? 0 : (length + start);
	  }
	  end = (end === undefined || end > length) ? length : (+end || 0);
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : ((end - start) >>> 0);
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	module.exports = baseSlice;


/***/ },
/* 1592 */
[7955, 549, 431, 1579],
/* 1593 */
[7970, 145],
/* 1594 */
[7975, 1583, 549],
/* 1595 */
/***/ function(module, exports, __webpack_require__) {

	var isObjectLike = __webpack_require__(172);

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a boolean primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isBoolean(false);
	 * // => true
	 *
	 * _.isBoolean(null);
	 * // => false
	 */
	function isBoolean(value) {
	  return value === true || value === false || (isObjectLike(value) && objToString.call(value) == boolTag);
	}

	module.exports = isBoolean;


/***/ },
/* 1596 */
[7978, 145],
/* 1597 */
[7980, 172],
/* 1598 */
[7981, 2839, 550, 172],
/* 1599 */
[7982, 145],
/* 1600 */
[7986, 990, 2836, 2858],
/* 1601 */
/***/ function(module, exports) {

	/**
	 * This method returns the first argument provided to it.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'user': 'fred' };
	 *
	 * _.identity(object) === object;
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;


/***/ },
/* 1602 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (str) {
		var isExtendedLengthPath = /^\\\\\?\\/.test(str);
		var hasNonAscii = /[^\x00-\x80]+/.test(str);

		if (isExtendedLengthPath || hasNonAscii) {
			return str;
		}

		return str.replace(/\\/g, '/');
	};


/***/ },
/* 1603 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var util = __webpack_require__(551);

	  /**
	   * A data structure which is a combination of an array and a set. Adding a new
	   * member is O(1), testing for membership is O(1), and finding the index of an
	   * element is O(1). Removing elements from the set is not supported. Only
	   * strings are supported for membership.
	   */
	  function ArraySet() {
	    this._array = [];
	    this._set = {};
	  }

	  /**
	   * Static method for creating ArraySet instances from an existing array.
	   */
	  ArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {
	    var set = new ArraySet();
	    for (var i = 0, len = aArray.length; i < len; i++) {
	      set.add(aArray[i], aAllowDuplicates);
	    }
	    return set;
	  };

	  /**
	   * Return how many unique items are in this ArraySet. If duplicates have been
	   * added, than those do not count towards the size.
	   *
	   * @returns Number
	   */
	  ArraySet.prototype.size = function ArraySet_size() {
	    return Object.getOwnPropertyNames(this._set).length;
	  };

	  /**
	   * Add the given string to this set.
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {
	    var sStr = util.toSetString(aStr);
	    var isDuplicate = this._set.hasOwnProperty(sStr);
	    var idx = this._array.length;
	    if (!isDuplicate || aAllowDuplicates) {
	      this._array.push(aStr);
	    }
	    if (!isDuplicate) {
	      this._set[sStr] = idx;
	    }
	  };

	  /**
	   * Is the given string a member of this set?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.has = function ArraySet_has(aStr) {
	    var sStr = util.toSetString(aStr);
	    return this._set.hasOwnProperty(sStr);
	  };

	  /**
	   * What is the index of the given string in the array?
	   *
	   * @param String aStr
	   */
	  ArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {
	    var sStr = util.toSetString(aStr);
	    if (this._set.hasOwnProperty(sStr)) {
	      return this._set[sStr];
	    }
	    throw new Error('"' + aStr + '" is not in the set.');
	  };

	  /**
	   * What is the element at the given index?
	   *
	   * @param Number aIdx
	   */
	  ArraySet.prototype.at = function ArraySet_at(aIdx) {
	    if (aIdx >= 0 && aIdx < this._array.length) {
	      return this._array[aIdx];
	    }
	    throw new Error('No element indexed by ' + aIdx);
	  };

	  /**
	   * Returns the array representation of this set (which has the proper indices
	   * indicated by indexOf). Note that this is a copy of the internal array used
	   * for storing the members so that no one can mess with internal state.
	   */
	  ArraySet.prototype.toArray = function ArraySet_toArray() {
	    return this._array.slice();
	  };

	  exports.ArraySet = ArraySet;
	}


/***/ },
/* 1604 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 *
	 * Based on the Base 64 VLQ implementation in Closure Compiler:
	 * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java
	 *
	 * Copyright 2011 The Closure Compiler Authors. All rights reserved.
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are
	 * met:
	 *
	 *  * Redistributions of source code must retain the above copyright
	 *    notice, this list of conditions and the following disclaimer.
	 *  * Redistributions in binary form must reproduce the above
	 *    copyright notice, this list of conditions and the following
	 *    disclaimer in the documentation and/or other materials provided
	 *    with the distribution.
	 *  * Neither the name of Google Inc. nor the names of its
	 *    contributors may be used to endorse or promote products derived
	 *    from this software without specific prior written permission.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
	 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
	 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
	 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
	 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
	 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
	 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
	 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
	 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
	 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */
	{
	  var base64 = __webpack_require__(2887);

	  // A single base 64 digit can contain 6 bits of data. For the base 64 variable
	  // length quantities we use in the source map spec, the first bit is the sign,
	  // the next four bits are the actual value, and the 6th bit is the
	  // continuation bit. The continuation bit tells us whether there are more
	  // digits in this value following this digit.
	  //
	  //   Continuation
	  //   |    Sign
	  //   |    |
	  //   V    V
	  //   101011

	  var VLQ_BASE_SHIFT = 5;

	  // binary: 100000
	  var VLQ_BASE = 1 << VLQ_BASE_SHIFT;

	  // binary: 011111
	  var VLQ_BASE_MASK = VLQ_BASE - 1;

	  // binary: 100000
	  var VLQ_CONTINUATION_BIT = VLQ_BASE;

	  /**
	   * Converts from a two-complement value to a value where the sign bit is
	   * placed in the least significant bit.  For example, as decimals:
	   *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)
	   *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)
	   */
	  function toVLQSigned(aValue) {
	    return aValue < 0
	      ? ((-aValue) << 1) + 1
	      : (aValue << 1) + 0;
	  }

	  /**
	   * Converts to a two-complement value from a value where the sign bit is
	   * placed in the least significant bit.  For example, as decimals:
	   *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1
	   *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2
	   */
	  function fromVLQSigned(aValue) {
	    var isNegative = (aValue & 1) === 1;
	    var shifted = aValue >> 1;
	    return isNegative
	      ? -shifted
	      : shifted;
	  }

	  /**
	   * Returns the base 64 VLQ encoded value.
	   */
	  exports.encode = function base64VLQ_encode(aValue) {
	    var encoded = "";
	    var digit;

	    var vlq = toVLQSigned(aValue);

	    do {
	      digit = vlq & VLQ_BASE_MASK;
	      vlq >>>= VLQ_BASE_SHIFT;
	      if (vlq > 0) {
	        // There are still more digits in this value, so we must make sure the
	        // continuation bit is marked.
	        digit |= VLQ_CONTINUATION_BIT;
	      }
	      encoded += base64.encode(digit);
	    } while (vlq > 0);

	    return encoded;
	  };

	  /**
	   * Decodes the next base 64 VLQ value from the given string and returns the
	   * value and the rest of the string via the out parameter.
	   */
	  exports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {
	    var strLen = aStr.length;
	    var result = 0;
	    var shift = 0;
	    var continuation, digit;

	    do {
	      if (aIndex >= strLen) {
	        throw new Error("Expected more digits in base 64 VLQ value.");
	      }

	      digit = base64.decode(aStr.charCodeAt(aIndex++));
	      if (digit === -1) {
	        throw new Error("Invalid base64 digit: " + aStr.charAt(aIndex - 1));
	      }

	      continuation = !!(digit & VLQ_CONTINUATION_BIT);
	      digit &= VLQ_BASE_MASK;
	      result = result + (digit << shift);
	      shift += VLQ_BASE_SHIFT;
	    } while (continuation);

	    aOutParam.value = fromVLQSigned(result);
	    aOutParam.rest = aIndex;
	  };
	}


/***/ },
/* 1605 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var base64VLQ = __webpack_require__(1604);
	  var util = __webpack_require__(551);
	  var ArraySet = __webpack_require__(1603).ArraySet;
	  var MappingList = __webpack_require__(2889).MappingList;

	  /**
	   * An instance of the SourceMapGenerator represents a source map which is
	   * being built incrementally. You may pass an object with the following
	   * properties:
	   *
	   *   - file: The filename of the generated source.
	   *   - sourceRoot: A root for all relative URLs in this source map.
	   */
	  function SourceMapGenerator(aArgs) {
	    if (!aArgs) {
	      aArgs = {};
	    }
	    this._file = util.getArg(aArgs, 'file', null);
	    this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);
	    this._skipValidation = util.getArg(aArgs, 'skipValidation', false);
	    this._sources = new ArraySet();
	    this._names = new ArraySet();
	    this._mappings = new MappingList();
	    this._sourcesContents = null;
	  }

	  SourceMapGenerator.prototype._version = 3;

	  /**
	   * Creates a new SourceMapGenerator based on a SourceMapConsumer
	   *
	   * @param aSourceMapConsumer The SourceMap.
	   */
	  SourceMapGenerator.fromSourceMap =
	    function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {
	      var sourceRoot = aSourceMapConsumer.sourceRoot;
	      var generator = new SourceMapGenerator({
	        file: aSourceMapConsumer.file,
	        sourceRoot: sourceRoot
	      });
	      aSourceMapConsumer.eachMapping(function (mapping) {
	        var newMapping = {
	          generated: {
	            line: mapping.generatedLine,
	            column: mapping.generatedColumn
	          }
	        };

	        if (mapping.source != null) {
	          newMapping.source = mapping.source;
	          if (sourceRoot != null) {
	            newMapping.source = util.relative(sourceRoot, newMapping.source);
	          }

	          newMapping.original = {
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          };

	          if (mapping.name != null) {
	            newMapping.name = mapping.name;
	          }
	        }

	        generator.addMapping(newMapping);
	      });
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          generator.setSourceContent(sourceFile, content);
	        }
	      });
	      return generator;
	    };

	  /**
	   * Add a single mapping from original source line and column to the generated
	   * source's line and column for this source map being created. The mapping
	   * object should have the following properties:
	   *
	   *   - generated: An object with the generated line and column positions.
	   *   - original: An object with the original line and column positions.
	   *   - source: The original source file (relative to the sourceRoot).
	   *   - name: An optional original token name for this mapping.
	   */
	  SourceMapGenerator.prototype.addMapping =
	    function SourceMapGenerator_addMapping(aArgs) {
	      var generated = util.getArg(aArgs, 'generated');
	      var original = util.getArg(aArgs, 'original', null);
	      var source = util.getArg(aArgs, 'source', null);
	      var name = util.getArg(aArgs, 'name', null);

	      if (!this._skipValidation) {
	        this._validateMapping(generated, original, source, name);
	      }

	      if (source != null && !this._sources.has(source)) {
	        this._sources.add(source);
	      }

	      if (name != null && !this._names.has(name)) {
	        this._names.add(name);
	      }

	      this._mappings.add({
	        generatedLine: generated.line,
	        generatedColumn: generated.column,
	        originalLine: original != null && original.line,
	        originalColumn: original != null && original.column,
	        source: source,
	        name: name
	      });
	    };

	  /**
	   * Set the source content for a source file.
	   */
	  SourceMapGenerator.prototype.setSourceContent =
	    function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {
	      var source = aSourceFile;
	      if (this._sourceRoot != null) {
	        source = util.relative(this._sourceRoot, source);
	      }

	      if (aSourceContent != null) {
	        // Add the source content to the _sourcesContents map.
	        // Create a new _sourcesContents map if the property is null.
	        if (!this._sourcesContents) {
	          this._sourcesContents = {};
	        }
	        this._sourcesContents[util.toSetString(source)] = aSourceContent;
	      } else if (this._sourcesContents) {
	        // Remove the source file from the _sourcesContents map.
	        // If the _sourcesContents map is empty, set the property to null.
	        delete this._sourcesContents[util.toSetString(source)];
	        if (Object.keys(this._sourcesContents).length === 0) {
	          this._sourcesContents = null;
	        }
	      }
	    };

	  /**
	   * Applies the mappings of a sub-source-map for a specific source file to the
	   * source map being generated. Each mapping to the supplied source file is
	   * rewritten using the supplied source map. Note: The resolution for the
	   * resulting mappings is the minimium of this map and the supplied map.
	   *
	   * @param aSourceMapConsumer The source map to be applied.
	   * @param aSourceFile Optional. The filename of the source file.
	   *        If omitted, SourceMapConsumer's file property will be used.
	   * @param aSourceMapPath Optional. The dirname of the path to the source map
	   *        to be applied. If relative, it is relative to the SourceMapConsumer.
	   *        This parameter is needed when the two source maps aren't in the same
	   *        directory, and the source map to be applied contains relative source
	   *        paths. If so, those relative source paths need to be rewritten
	   *        relative to the SourceMapGenerator.
	   */
	  SourceMapGenerator.prototype.applySourceMap =
	    function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {
	      var sourceFile = aSourceFile;
	      // If aSourceFile is omitted, we will use the file property of the SourceMap
	      if (aSourceFile == null) {
	        if (aSourceMapConsumer.file == null) {
	          throw new Error(
	            'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +
	            'or the source map\'s "file" property. Both were omitted.'
	          );
	        }
	        sourceFile = aSourceMapConsumer.file;
	      }
	      var sourceRoot = this._sourceRoot;
	      // Make "sourceFile" relative if an absolute Url is passed.
	      if (sourceRoot != null) {
	        sourceFile = util.relative(sourceRoot, sourceFile);
	      }
	      // Applying the SourceMap can add and remove items from the sources and
	      // the names array.
	      var newSources = new ArraySet();
	      var newNames = new ArraySet();

	      // Find mappings for the "sourceFile"
	      this._mappings.unsortedForEach(function (mapping) {
	        if (mapping.source === sourceFile && mapping.originalLine != null) {
	          // Check if it can be mapped by the source map, then update the mapping.
	          var original = aSourceMapConsumer.originalPositionFor({
	            line: mapping.originalLine,
	            column: mapping.originalColumn
	          });
	          if (original.source != null) {
	            // Copy mapping
	            mapping.source = original.source;
	            if (aSourceMapPath != null) {
	              mapping.source = util.join(aSourceMapPath, mapping.source)
	            }
	            if (sourceRoot != null) {
	              mapping.source = util.relative(sourceRoot, mapping.source);
	            }
	            mapping.originalLine = original.line;
	            mapping.originalColumn = original.column;
	            if (original.name != null) {
	              mapping.name = original.name;
	            }
	          }
	        }

	        var source = mapping.source;
	        if (source != null && !newSources.has(source)) {
	          newSources.add(source);
	        }

	        var name = mapping.name;
	        if (name != null && !newNames.has(name)) {
	          newNames.add(name);
	        }

	      }, this);
	      this._sources = newSources;
	      this._names = newNames;

	      // Copy sourcesContents of applied map.
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aSourceMapPath != null) {
	            sourceFile = util.join(aSourceMapPath, sourceFile);
	          }
	          if (sourceRoot != null) {
	            sourceFile = util.relative(sourceRoot, sourceFile);
	          }
	          this.setSourceContent(sourceFile, content);
	        }
	      }, this);
	    };

	  /**
	   * A mapping can have one of the three levels of data:
	   *
	   *   1. Just the generated position.
	   *   2. The Generated position, original position, and original source.
	   *   3. Generated and original position, original source, as well as a name
	   *      token.
	   *
	   * To maintain consistency, we validate that any new mapping being added falls
	   * in to one of these categories.
	   */
	  SourceMapGenerator.prototype._validateMapping =
	    function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,
	                                                aName) {
	      if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	          && aGenerated.line > 0 && aGenerated.column >= 0
	          && !aOriginal && !aSource && !aName) {
	        // Case 1.
	        return;
	      }
	      else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated
	               && aOriginal && 'line' in aOriginal && 'column' in aOriginal
	               && aGenerated.line > 0 && aGenerated.column >= 0
	               && aOriginal.line > 0 && aOriginal.column >= 0
	               && aSource) {
	        // Cases 2 and 3.
	        return;
	      }
	      else {
	        throw new Error('Invalid mapping: ' + JSON.stringify({
	          generated: aGenerated,
	          source: aSource,
	          original: aOriginal,
	          name: aName
	        }));
	      }
	    };

	  /**
	   * Serialize the accumulated mappings in to the stream of base 64 VLQs
	   * specified by the source map format.
	   */
	  SourceMapGenerator.prototype._serializeMappings =
	    function SourceMapGenerator_serializeMappings() {
	      var previousGeneratedColumn = 0;
	      var previousGeneratedLine = 1;
	      var previousOriginalColumn = 0;
	      var previousOriginalLine = 0;
	      var previousName = 0;
	      var previousSource = 0;
	      var result = '';
	      var mapping;
	      var nameIdx;
	      var sourceIdx;

	      var mappings = this._mappings.toArray();
	      for (var i = 0, len = mappings.length; i < len; i++) {
	        mapping = mappings[i];

	        if (mapping.generatedLine !== previousGeneratedLine) {
	          previousGeneratedColumn = 0;
	          while (mapping.generatedLine !== previousGeneratedLine) {
	            result += ';';
	            previousGeneratedLine++;
	          }
	        }
	        else {
	          if (i > 0) {
	            if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {
	              continue;
	            }
	            result += ',';
	          }
	        }

	        result += base64VLQ.encode(mapping.generatedColumn
	                                   - previousGeneratedColumn);
	        previousGeneratedColumn = mapping.generatedColumn;

	        if (mapping.source != null) {
	          sourceIdx = this._sources.indexOf(mapping.source);
	          result += base64VLQ.encode(sourceIdx - previousSource);
	          previousSource = sourceIdx;

	          // lines are stored 0-based in SourceMap spec version 3
	          result += base64VLQ.encode(mapping.originalLine - 1
	                                     - previousOriginalLine);
	          previousOriginalLine = mapping.originalLine - 1;

	          result += base64VLQ.encode(mapping.originalColumn
	                                     - previousOriginalColumn);
	          previousOriginalColumn = mapping.originalColumn;

	          if (mapping.name != null) {
	            nameIdx = this._names.indexOf(mapping.name);
	            result += base64VLQ.encode(nameIdx - previousName);
	            previousName = nameIdx;
	          }
	        }
	      }

	      return result;
	    };

	  SourceMapGenerator.prototype._generateSourcesContent =
	    function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {
	      return aSources.map(function (source) {
	        if (!this._sourcesContents) {
	          return null;
	        }
	        if (aSourceRoot != null) {
	          source = util.relative(aSourceRoot, source);
	        }
	        var key = util.toSetString(source);
	        return Object.prototype.hasOwnProperty.call(this._sourcesContents,
	                                                    key)
	          ? this._sourcesContents[key]
	          : null;
	      }, this);
	    };

	  /**
	   * Externalize the source map.
	   */
	  SourceMapGenerator.prototype.toJSON =
	    function SourceMapGenerator_toJSON() {
	      var map = {
	        version: this._version,
	        sources: this._sources.toArray(),
	        names: this._names.toArray(),
	        mappings: this._serializeMappings()
	      };
	      if (this._file != null) {
	        map.file = this._file;
	      }
	      if (this._sourceRoot != null) {
	        map.sourceRoot = this._sourceRoot;
	      }
	      if (this._sourcesContents) {
	        map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);
	      }

	      return map;
	    };

	  /**
	   * Render the source map being generated to a string.
	   */
	  SourceMapGenerator.prototype.toString =
	    function SourceMapGenerator_toString() {
	      return JSON.stringify(this.toJSON());
	    };

	  exports.SourceMapGenerator = SourceMapGenerator;
	}


/***/ },
/* 1606 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * Copyright 2009-2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE.txt or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	exports.SourceMapGenerator = __webpack_require__(1605).SourceMapGenerator;
	exports.SourceMapConsumer = __webpack_require__(2891).SourceMapConsumer;
	exports.SourceNode = __webpack_require__(2892).SourceNode;


/***/ },
/* 1607 */
969,
/* 1608 */
699,
/* 1609 */
700,
/* 1610 */
[7851, 2907, 2901, 2908, 995, 1609, 711, 2905, 1612, 712, 552],
/* 1611 */
973,
/* 1612 */
[7856, 712, 1609, 552],
/* 1613 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("classConstructorCall");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1614 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("classProperties");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1615 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("decorators");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1616 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("doExpressions");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1617 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("exponentiationOperator");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1618 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("exportExtensions");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1619 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("functionBind");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1620 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("objectRestSpread");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1621 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("trailingFunctionCommas");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1622 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(11)["default"];

	exports.__esModule = true;

	var _babelHelperRemapAsyncToGenerator = __webpack_require__(2922);

	var _babelHelperRemapAsyncToGenerator2 = _interopRequireDefault(_babelHelperRemapAsyncToGenerator);

	exports["default"] = function () {
	  return {
	    inherits: __webpack_require__(713),

	    visitor: {
	      Function: function Function(path, state) {
	        if (!path.node.async || path.node.generator) return;

	        _babelHelperRemapAsyncToGenerator2["default"](path, state.addHelper("asyncToGenerator"));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1623 */
[7873, 1658, 11, 56, 2960, 2963, 434, 2925, 61],
/* 1624 */
[7924, 106, 11, 553, 174, 714, 715, 432, 2937],
/* 1625 */
[7965, 2962],
/* 1626 */
[7967, 2953, 554],
/* 1627 */
[7988, 1625, 1626, 555, 2958],
/* 1628 */
[7875, 106],
/* 1629 */
1571,
/* 1630 */
[7888, 56, 61],
/* 1631 */
[7892, 106],
/* 1632 */
1550,
/* 1633 */
[7924, 106, 11, 556, 176, 716, 717, 435, 3011],
/* 1634 */
1579,
/* 1635 */
[7936, 3022, 720],
/* 1636 */
[7952, 3045],
/* 1637 */
[7963, 3026],
/* 1638 */
[7965, 3040],
/* 1639 */
[7976, 1005, 718],
/* 1640 */
[7985, 3020, 1635, 3029],
/* 1641 */
[7813, 3046],
/* 1642 */
[7910, 381, 56, 61],
/* 1643 */
1550,
/* 1644 */
981,
/* 1645 */
[7940, 3089],
/* 1646 */
[7942, 1645, 722],
/* 1647 */
[7943, 298],
/* 1648 */
[7945, 3077, 146, 297],
/* 1649 */
1590,
/* 1650 */
[7963, 1649],
/* 1651 */
[7968, 1010, 1011, 146],
/* 1652 */
[7969, 299, 298],
/* 1653 */
[7970, 146],
/* 1654 */
[7973, 3083, 299],
/* 1655 */
[7989, 1012, 299, 1011, 437, 146],
/* 1656 */
1601,
/* 1657 */
[7823, 3129],
/* 1658 */
[7825, 3132],
/* 1659 */
[7828, 381, 3118],
/* 1660 */
732,
/* 1661 */
[7842, 3133],
/* 1662 */
[7843, 1016],
/* 1663 */
[7846, 559, 122],
/* 1664 */
701,
/* 1665 */
[7851, 1666, 558, 1667, 1018, 1017, 724, 3139, 1021, 122, 438],
/* 1666 */
1560,
/* 1667 */
[7854, 1018],
/* 1668 */
[7857, 723],
/* 1669 */
975,
/* 1670 */
[7873, 1034, 1, 19, 3196, 3199, 563, 3161, 25],
/* 1671 */
[7924, 39, 1, 560, 178, 725, 726, 439, 3173],
/* 1672 */
[7965, 3198],
/* 1673 */
[7967, 3189, 561],
/* 1674 */
[7988, 1672, 1673, 562, 3194],
/* 1675 */
[7875, 39],
/* 1676 */
1571,
/* 1677 */
[7888, 19, 25],
/* 1678 */
[7892, 39],
/* 1679 */
1550,
/* 1680 */
[7924, 39, 1, 564, 180, 727, 728, 441, 3247],
/* 1681 */
1579,
/* 1682 */
[7936, 3258, 731],
/* 1683 */
[7952, 3281],
/* 1684 */
[7963, 3262],
/* 1685 */
[7965, 3276],
/* 1686 */
[7976, 1030, 729],
/* 1687 */
[7985, 3256, 1682, 3265],
/* 1688 */
[7813, 3282],
/* 1689 */
[7822, 3298],
/* 1690 */
[7842, 3303],
/* 1691 */
[7843, 1039],
/* 1692 */
[7846, 567, 123],
/* 1693 */
701,
/* 1694 */
[7851, 1695, 566, 1696, 1041, 1040, 734, 3309, 1044, 123, 443],
/* 1695 */
1560,
/* 1696 */
[7854, 1041],
/* 1697 */
[7857, 733],
/* 1698 */
975,
/* 1699 */
[7910, 181, 19, 25],
/* 1700 */
[7875, 39],
/* 1701 */
1571,
/* 1702 */
[7888, 19, 25],
/* 1703 */
[7892, 39],
/* 1704 */
[7924, 39, 1, 569, 183, 735, 736, 444, 3380],
/* 1705 */
[7813, 3386],
/* 1706 */
1550,
/* 1707 */
[7811, 3388, 1706, 3389],
/* 1708 */
1579,
/* 1709 */
981,
/* 1710 */
[7936, 3402, 445],
/* 1711 */
[7940, 3419],
/* 1712 */
[7942, 1711, 445],
/* 1713 */
[7943, 302],
/* 1714 */
[7944, 3427],
/* 1715 */
[7945, 3405, 147, 301],
/* 1716 */
1590,
/* 1717 */
[7969, 255, 302],
/* 1718 */
[7970, 147],
/* 1719 */
[7973, 3411, 255],
/* 1720 */
[7974, 3401, 737, 739],
/* 1721 */
[7983, 301],
/* 1722 */
[7985, 3399, 1710, 3417],
/* 1723 */
[7989, 1053, 255, 1052, 384, 147],
/* 1724 */
1601,
/* 1725 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Symbol = __webpack_require__(1054)["default"];

	var _getIterator = __webpack_require__(82)["default"];

	var _interopRequireDefault = __webpack_require__(33)["default"];

	exports.__esModule = true;

	var _babelTemplate = __webpack_require__(3489);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var buildWrapper = _babelTemplate2["default"]("\n  let CLASS_REF = CLASS;\n  var CALL_REF = CALL;\n  var WRAPPER_REF = function (...args) {\n    if (this instanceof WRAPPER_REF) {\n      return Reflect.construct(CLASS_REF, args);\n    } else {\n      return CALL_REF.apply(this, args);\n    }\n  };\n  WRAPPER_REF.__proto__ = CLASS_REF;\n  WRAPPER_REF;\n");

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  var ALREADY_VISITED = _Symbol();

	  function findConstructorCall(path) /*: ?Object*/ {
	    var methods /*: Array<Object>*/ = path.get("body.body");

	    for (var _iterator = methods, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var method = _ref;

	      if (method.node.kind === "constructorCall") {
	        return method;
	      }
	    }

	    return null;
	  }

	  function handleClassWithCall(constructorCall, classPath) {
	    var _classPath = classPath;
	    var node = _classPath.node;

	    var ref = node.id || classPath.scope.generateUidIdentifier("class");

	    if (classPath.parentPath.isExportDefaultDeclaration()) {
	      classPath = classPath.parentPath;
	      classPath.insertAfter(t.exportDefaultDeclaration(ref));
	    }

	    classPath.replaceWithMultiple(buildWrapper({
	      CLASS_REF: classPath.scope.generateUidIdentifier(ref.name),
	      CALL_REF: classPath.scope.generateUidIdentifier(ref.name + "Call"),
	      CALL: t.functionExpression(null, constructorCall.node.params, constructorCall.node.body),
	      CLASS: t.toExpression(node),
	      WRAPPER_REF: ref
	    }));

	    constructorCall.remove();
	  }

	  return {
	    inherits: __webpack_require__(1613),

	    visitor: {
	      Class: function Class(path) {
	        if (path.node[ALREADY_VISITED]) return;
	        path.node[ALREADY_VISITED] = true;

	        var constructorCall = findConstructorCall(path);

	        if (constructorCall) {
	          handleClassWithCall(constructorCall, path);
	        } else {
	          return;
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1726 */
[7823, 3461],
/* 1727 */
732,
/* 1728 */
[7842, 3465],
/* 1729 */
[7843, 1058],
/* 1730 */
[7846, 572, 124],
/* 1731 */
701,
/* 1732 */
[7851, 1733, 571, 1734, 1060, 1059, 741, 3471, 1063, 124, 446],
/* 1733 */
1560,
/* 1734 */
[7854, 1060],
/* 1735 */
[7857, 740],
/* 1736 */
975,
/* 1737 */
[7875, 111],
/* 1738 */
1571,
/* 1739 */
[7888, 71, 83],
/* 1740 */
[7892, 111],
/* 1741 */
1550,
/* 1742 */
[7813, 3528],
/* 1743 */
[7910, 570, 71, 83],
/* 1744 */
1550,
/* 1745 */
[7912, 33, 184, 3552, 3551, 3549, 3547, 3550, 3548, 3546, 185, 1746, 742, 3553, 3554],
/* 1746 */
[7924, 111, 33, 573, 185, 742, 743, 448, 3556],
/* 1747 */
1578,
/* 1748 */
1579,
/* 1749 */
981,
/* 1750 */
[7936, 3567, 449],
/* 1751 */
[7938, 3562, 1749, 1750, 1753, 3592, 3593, 3594, 186, 148],
/* 1752 */
[7940, 3583],
/* 1753 */
[7942, 1752, 449],
/* 1754 */
[7944, 3591],
/* 1755 */
[7945, 3570, 148, 305],
/* 1756 */
1590,
/* 1757 */
1591,
/* 1758 */
[7970, 148],
/* 1759 */
[7974, 1751, 574, 746],
/* 1760 */
[7983, 305],
/* 1761 */
[7985, 3565, 1750, 3581],
/* 1762 */
[7989, 747, 186, 745, 304, 148],
/* 1763 */
1601,
/* 1764 */
/***/ function(module, exports, __webpack_require__) {

	// todo: define instead of assign

	"use strict";

	var _getIterator = __webpack_require__(3609)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  var findBareSupers = {
	    Super: function Super(path) {
	      if (path.parentPath.isCallExpression({ callee: path.node })) {
	        this.push(path.parentPath);
	      }
	    }
	  };

	  var referenceVisitor = {
	    ReferencedIdentifier: function ReferencedIdentifier(path) {
	      if (this.scope.hasOwnBinding(path.node.name)) {
	        this.collision = true;
	        path.skip();
	      }
	    }
	  };

	  return {
	    inherits: __webpack_require__(1614),

	    visitor: {
	      Class: function Class(path) {
	        var isDerived = !!path.node.superClass;
	        var constructor = undefined;
	        var props = [];
	        var body = path.get("body");

	        for (var _iterator = body.get("body"), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var _path = _ref;

	          if (_path.isClassProperty()) {
	            props.push(_path);
	          } else if (_path.isClassMethod({ kind: "constructor" })) {
	            constructor = _path;
	          }
	        }

	        if (!props.length) return;

	        var nodes = [];
	        var ref = undefined;

	        if (path.isClassExpression() || !path.node.id) {
	          ref = path.scope.generateUidIdentifier("class");
	        } else {
	          // path.isClassDeclaration() && path.node.id
	          ref = path.node.id;
	        }

	        var instanceBody = [];

	        for (var _i2 = 0; _i2 < props.length; _i2++) {
	          var prop = props[_i2];
	          var propNode = prop.node;
	          if (propNode.decorators && propNode.decorators.length > 0) continue;
	          if (!propNode.value) continue;

	          var isStatic = propNode["static"];

	          if (isStatic) {
	            nodes.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(ref, propNode.key), propNode.value)));
	          } else {
	            instanceBody.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(t.thisExpression(), propNode.key), propNode.value)));
	          }
	        }

	        if (instanceBody.length) {
	          if (!constructor) {
	            var newConstructor = t.classMethod("constructor", t.identifier("constructor"), [], t.blockStatement([]));
	            if (isDerived) {
	              newConstructor.params = [t.restElement(t.identifier("args"))];
	              newConstructor.body.body.push(t.returnStatement(t.callExpression(t["super"](), [t.spreadElement(t.identifier("args"))])));
	            }

	            var _body$unshiftContainer = body.unshiftContainer("body", newConstructor);

	            constructor = _body$unshiftContainer[0];
	          }

	          var collisionState = {
	            collision: false,
	            scope: constructor.scope
	          };

	          for (var _i3 = 0; _i3 < props.length; _i3++) {
	            var prop = props[_i3];
	            prop.traverse(referenceVisitor, collisionState);
	            if (collisionState.collision) break;
	          }

	          if (collisionState.collision) {
	            var initialisePropsRef = path.scope.generateUidIdentifier("initialiseProps");

	            nodes.push(t.variableDeclaration("var", [t.variableDeclarator(initialisePropsRef, t.functionExpression(null, [], t.blockStatement(instanceBody)))]));

	            instanceBody = [t.expressionStatement(t.callExpression(t.memberExpression(initialisePropsRef, t.identifier("call")), [t.thisExpression()]))];
	          }

	          //

	          if (isDerived) {
	            var bareSupers = [];
	            constructor.traverse(findBareSupers, bareSupers);
	            for (var _i4 = 0; _i4 < bareSupers.length; _i4++) {
	              var bareSuper = bareSupers[_i4];
	              bareSuper.insertAfter(instanceBody);
	            }
	          } else {
	            constructor.get("body").unshiftContainer("body", instanceBody);
	          }
	        }

	        for (var _i5 = 0; _i5 < props.length; _i5++) {
	          var prop = props[_i5];
	          prop.remove();
	        }

	        if (!nodes.length) return;

	        if (path.isClassExpression()) {
	          path.scope.push({ id: ref });
	          path.replaceWith(t.assignmentExpression("=", ref, path.node));
	        } else {
	          // path.isClassDeclaration()
	          if (!path.node.id) {
	            path.node.id = ref;
	          }

	          if (path.parentPath.isExportDeclaration()) {
	            path = path.parentPath;
	          }
	        }

	        path.insertAfter(nodes);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1765 */
969,
/* 1766 */
699,
/* 1767 */
700,
/* 1768 */
[7851, 3623, 3617, 3624, 1076, 1767, 748, 3621, 1770, 749, 575],
/* 1769 */
973,
/* 1770 */
[7856, 749, 1767, 575],
/* 1771 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(22)["default"];

	var _Object$create = __webpack_require__(257)["default"];

	var _interopRequireDefault = __webpack_require__(6)["default"];

	exports.__esModule = true;

	var _babelTemplate = __webpack_require__(3680);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _babelHelperExplodeClass = __webpack_require__(3635);

	var _babelHelperExplodeClass2 = _interopRequireDefault(_babelHelperExplodeClass);

	var buildClassDecorator = _babelTemplate2["default"]("\n  CLASS_REF = DECORATOR(CLASS_REF) || CLASS_REF;\n");

	exports["default"] = function (_ref5) {
	  var t = _ref5.types;

	  function cleanDecorators(decorators) {
	    return decorators.reverse().map(function (dec) {
	      return dec.expression;
	    });
	  }

	  function transformClass(path, ref, state) {
	    var nodes = [];

	    state;

	    var classDecorators = path.node.decorators;
	    if (classDecorators) {
	      path.node.decorators = null;
	      classDecorators = cleanDecorators(classDecorators);

	      for (var _iterator = classDecorators, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var decorator = _ref;

	        nodes.push(buildClassDecorator({
	          CLASS_REF: ref,
	          DECORATOR: decorator
	        }));
	      }
	    }

	    var map = _Object$create(null);

	    for (var _iterator2 = path.get("body.body"), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var method = _ref2;

	      var decorators = method.node.decorators;
	      if (!decorators) continue;

	      var alias = t.toKeyAlias(method.node);
	      map[alias] = map[alias] || [];
	      map[alias].push(method.node);

	      method.remove();
	    }

	    for (var alias in map) {
	      var items = map[alias];

	      items;
	    }

	    return nodes;
	  }

	  function hasDecorators(path) {
	    if (path.isClass()) {
	      if (path.node.decorators) return true;

	      for (var _iterator3 = (path.node.body.body /*: Array<Object>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	        var _ref3;

	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }

	        var method = _ref3;

	        if (method.decorators) {
	          return true;
	        }
	      }
	    } else if (path.isObjectExpression()) {
	      for (var _iterator4 = (path.node.properties /*: Array<Object>*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	        var _ref4;

	        if (_isArray4) {
	          if (_i4 >= _iterator4.length) break;
	          _ref4 = _iterator4[_i4++];
	        } else {
	          _i4 = _iterator4.next();
	          if (_i4.done) break;
	          _ref4 = _i4.value;
	        }

	        var prop = _ref4;

	        if (prop.decorators) {
	          return true;
	        }
	      }
	    }

	    return false;
	  }

	  function doError(path) {
	    throw path.buildCodeFrameError("Decorators are not supported yet in 6.x pending proposal update.");
	  }

	  return {
	    inherits: __webpack_require__(1615),

	    visitor: {
	      ClassExpression: function ClassExpression(path) {
	        if (!hasDecorators(path)) return;
	        doError(path);

	        _babelHelperExplodeClass2["default"](path);

	        var ref = path.scope.generateDeclaredUidIdentifier("ref");
	        var nodes = [];

	        nodes.push(t.assignmentExpression("=", ref, path.node));

	        nodes = nodes.concat(transformClass(path, ref, this));

	        nodes.push(ref);

	        path.replaceWith(t.sequenceExpression(nodes));
	      },

	      ClassDeclaration: function ClassDeclaration(path) {
	        if (!hasDecorators(path)) return;
	        doError(path);
	        _babelHelperExplodeClass2["default"](path);

	        var ref = path.node.id;
	        var nodes = [];

	        nodes = nodes.concat(transformClass(path, ref, this).map(function (expr) {
	          return t.expressionStatement(expr);
	        }));
	        nodes.push(t.expressionStatement(ref));

	        path.insertAfter(nodes);
	      },

	      ObjectExpression: function ObjectExpression(path) {
	        if (!hasDecorators(path)) return;
	        doError(path);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1772 */
[7822, 3651],
/* 1773 */
[7828, 257, 3641],
/* 1774 */
[7842, 3656],
/* 1775 */
[7843, 1082],
/* 1776 */
[7846, 577, 125],
/* 1777 */
701,
/* 1778 */
[7851, 1779, 576, 1780, 1084, 1083, 752, 3662, 1087, 125, 450],
/* 1779 */
1560,
/* 1780 */
[7854, 1084],
/* 1781 */
[7857, 751],
/* 1782 */
975,
/* 1783 */
[7875, 63],
/* 1784 */
1571,
/* 1785 */
[7888, 23, 29],
/* 1786 */
[7892, 63],
/* 1787 */
1550,
/* 1788 */
[7813, 3719],
/* 1789 */
[7912, 6, 187, 3728, 3727, 3725, 3723, 3726, 3724, 3722, 188, 1790, 753, 3729, 3730],
/* 1790 */
[7924, 63, 6, 579, 188, 753, 754, 451, 3732],
/* 1791 */
1579,
/* 1792 */
[7936, 3738, 757],
/* 1793 */
[7938, 3734, 3735, 1792, 3740, 3752, 3753, 3754, 387, 453],
/* 1794 */
[7963, 3743],
/* 1795 */
[7965, 3761],
/* 1796 */
[7985, 3737, 1792, 3748],
/* 1797 */
[7910, 257, 23, 29],
/* 1798 */
[7875, 63],
/* 1799 */
1571,
/* 1800 */
[7888, 23, 29],
/* 1801 */
[7892, 63],
/* 1802 */
[7924, 63, 6, 581, 190, 758, 759, 454, 3821],
/* 1803 */
[7813, 3827],
/* 1804 */
1550,
/* 1805 */
[7811, 3829, 1804, 3830],
/* 1806 */
1579,
/* 1807 */
981,
/* 1808 */
[7936, 3843, 455],
/* 1809 */
[7940, 3860],
/* 1810 */
[7942, 1809, 455],
/* 1811 */
[7943, 309],
/* 1812 */
[7944, 3868],
/* 1813 */
[7945, 3846, 149, 308],
/* 1814 */
1590,
/* 1815 */
[7969, 259, 309],
/* 1816 */
[7970, 149],
/* 1817 */
[7973, 3852, 259],
/* 1818 */
[7974, 3842, 760, 762],
/* 1819 */
[7983, 308],
/* 1820 */
[7985, 3840, 1808, 3858],
/* 1821 */
[7989, 1104, 259, 1103, 389, 149],
/* 1822 */
1601,
/* 1823 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    inherits: __webpack_require__(1616),

	    visitor: {
	      DoExpression: function DoExpression(path) {
	        var body = path.node.body.body;
	        if (body.length) {
	          path.replaceWithMultiple(body);
	        } else {
	          path.replaceWith(path.scope.buildUndefinedNode());
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1824 */
969,
/* 1825 */
699,
/* 1826 */
700,
/* 1827 */
[7851, 3899, 3893, 3900, 1109, 1826, 763, 3897, 1829, 764, 582],
/* 1828 */
973,
/* 1829 */
[7856, 764, 1826, 582],
/* 1830 */
[7823, 3928],
/* 1831 */
[7828, 310, 3917],
/* 1832 */
732,
/* 1833 */
[7842, 3932],
/* 1834 */
[7843, 1115],
/* 1835 */
[7846, 584, 126],
/* 1836 */
701,
/* 1837 */
[7851, 1838, 583, 1839, 1117, 1116, 766, 3938, 1120, 126, 456],
/* 1838 */
1560,
/* 1839 */
[7854, 1117],
/* 1840 */
[7857, 765],
/* 1841 */
975,
/* 1842 */
[7924, 105, 20, 585, 192, 767, 768, 457, 3969],
/* 1843 */
[7875, 105],
/* 1844 */
1571,
/* 1845 */
[7888, 58, 72],
/* 1846 */
[7892, 105],
/* 1847 */
1550,
/* 1848 */
[7924, 105, 20, 586, 194, 769, 770, 458, 4015],
/* 1849 */
[7813, 4021],
/* 1850 */
[7910, 310, 58, 72],
/* 1851 */
1550,
/* 1852 */
1578,
/* 1853 */
1579,
/* 1854 */
981,
/* 1855 */
[7936, 4048, 459],
/* 1856 */
[7938, 4043, 1854, 1855, 1858, 4073, 4074, 4075, 195, 150],
/* 1857 */
[7940, 4064],
/* 1858 */
[7942, 1857, 459],
/* 1859 */
[7944, 4072],
/* 1860 */
[7945, 4051, 150, 313],
/* 1861 */
1590,
/* 1862 */
1591,
/* 1863 */
[7970, 150],
/* 1864 */
[7974, 1856, 587, 773],
/* 1865 */
[7983, 313],
/* 1866 */
[7989, 774, 195, 772, 312, 150],
/* 1867 */
[7991, 4058, 459],
/* 1868 */
1601,
/* 1869 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _classCallCheck = __webpack_require__(96)["default"];

	var _getIterator = __webpack_require__(59)["default"];

	var _interopRequireDefault = __webpack_require__(10)["default"];

	var _interopRequireWildcard = __webpack_require__(45)["default"];

	exports.__esModule = true;

	var _babelTraverse = __webpack_require__(393);

	var _babelHelperReplaceSupers = __webpack_require__(4117);

	var _babelHelperReplaceSupers2 = _interopRequireDefault(_babelHelperReplaceSupers);

	var _babelHelperOptimiseCallExpression = __webpack_require__(1873);

	var _babelHelperOptimiseCallExpression2 = _interopRequireDefault(_babelHelperOptimiseCallExpression);

	var _babelHelperDefineMap = __webpack_require__(4091);

	var defineMap = _interopRequireWildcard(_babelHelperDefineMap);

	var _babelTemplate = __webpack_require__(1885);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _babelTypes = __webpack_require__(51);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type { NodePath } from "babel-traverse";*/

	var buildDerivedConstructor = _babelTemplate2["default"]("\n  (function () {\n    super(...arguments);\n  })\n");

	var noMethodVisitor = {
	  "FunctionExpression|FunctionDeclaration": function FunctionExpressionFunctionDeclaration(path) {
	    if (!path.is("shadow")) {
	      path.skip();
	    }
	  },

	  Method: function Method(path) {
	    path.skip();
	  }
	};

	var verifyConstructorVisitor = _babelTraverse.visitors.merge([noMethodVisitor, {
	  Super: function Super(path) {
	    if (this.isDerived && !this.hasBareSuper && !path.parentPath.isCallExpression({ callee: path.node })) {
	      throw path.buildCodeFrameError("'super.*' is not allowed before super()");
	    }
	  },

	  CallExpression: {
	    exit: function exit(path) {
	      if (path.get("callee").isSuper()) {
	        this.hasBareSuper = true;

	        if (!this.isDerived) {
	          throw path.buildCodeFrameError("super() is only allowed in a derived constructor");
	        }
	      }
	    }
	  },

	  ThisExpression: function ThisExpression(path) {
	    if (this.isDerived && !this.hasBareSuper) {
	      if (!path.inShadow("this")) {
	        throw path.buildCodeFrameError("'this' is not allowed before super()");
	      }
	    }
	  }
	}]);

	var findThisesVisitor = _babelTraverse.visitors.merge([noMethodVisitor, {
	  ThisExpression: function ThisExpression(path) {
	    this.superThises.push(path);
	  }
	}]);

	var ClassTransformer = (function () {
	  function ClassTransformer(path /*: NodePath*/, file) {
	    _classCallCheck(this, ClassTransformer);

	    this.parent = path.parent;
	    this.scope = path.scope;
	    this.node = path.node;
	    this.path = path;
	    this.file = file;

	    this.clearDescriptors();

	    this.instancePropBody = [];
	    this.instancePropRefs = {};
	    this.staticPropBody = [];
	    this.body = [];

	    this.bareSuperAfter = [];
	    this.bareSupers = [];

	    this.pushedConstructor = false;
	    this.pushedInherits = false;
	    this.isLoose = false;

	    this.superThises = [];

	    // class id
	    this.classId = this.node.id;

	    // this is the name of the binding that will **always** reference the class we've constructed
	    this.classRef = this.node.id || this.scope.generateUidIdentifier("class");

	    this.superName = this.node.superClass || t.identifier("Function");
	    this.isDerived = !!this.node.superClass;
	  }

	  ClassTransformer.prototype.run = function run() {
	    // istanbul ignore next

	    var _this = this;

	    var superName = this.superName;
	    var file = this.file;
	    var body = this.body;

	    //

	    var constructorBody = this.constructorBody = t.blockStatement([]);
	    this.constructor = this.buildConstructor();

	    //

	    var closureParams = [];
	    var closureArgs = [];

	    //
	    if (this.isDerived) {
	      closureArgs.push(superName);

	      superName = this.scope.generateUidIdentifierBasedOnNode(superName);
	      closureParams.push(superName);

	      this.superName = superName;
	    }

	    //
	    this.buildBody();

	    // make sure this class isn't directly called
	    constructorBody.body.unshift(t.expressionStatement(t.callExpression(file.addHelper("classCallCheck"), [t.thisExpression(), this.classRef])));

	    body = body.concat(this.staticPropBody.map(function (fn) {
	      return fn(_this.classRef);
	    }));

	    if (this.classId) {
	      // named class with only a constructor
	      if (body.length === 1) return t.toExpression(body[0]);
	    }

	    //
	    body.push(t.returnStatement(this.classRef));

	    var container = t.functionExpression(null, closureParams, t.blockStatement(body));
	    container.shadow = true;
	    return t.callExpression(container, closureArgs);
	  };

	  ClassTransformer.prototype.buildConstructor = function buildConstructor() {
	    var func = t.functionDeclaration(this.classRef, [], this.constructorBody);
	    t.inherits(func, this.node);
	    return func;
	  };

	  ClassTransformer.prototype.pushToMap = function pushToMap(node, enumerable, kind, scope /*:: ?*/) {
	    if (kind === undefined) kind = "value";

	    var mutatorMap = undefined;
	    if (node["static"]) {
	      this.hasStaticDescriptors = true;
	      mutatorMap = this.staticMutatorMap;
	    } else {
	      this.hasInstanceDescriptors = true;
	      mutatorMap = this.instanceMutatorMap;
	    }

	    var map = defineMap.push(mutatorMap, node, kind, this.file, scope);

	    if (enumerable) {
	      map.enumerable = t.booleanLiteral(true);
	    }

	    return map;
	  };

	  /**
	   * [Please add a description.]
	   * https://www.youtube.com/watch?v=fWNaR-rxAic
	   */

	  ClassTransformer.prototype.constructorMeMaybe = function constructorMeMaybe() {
	    var hasConstructor = false;
	    var paths = this.path.get("body.body");
	    for (var _iterator = (paths /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var path = _ref;

	      hasConstructor = path.equals("kind", "constructor");
	      if (hasConstructor) break;
	    }
	    if (hasConstructor) return;

	    var params = undefined,
	        body = undefined;

	    if (this.isDerived) {
	      var _constructor = buildDerivedConstructor().expression;
	      params = _constructor.params;
	      body = _constructor.body;
	    } else {
	      params = [];
	      body = t.blockStatement([]);
	    }

	    this.path.get("body").unshiftContainer("body", t.classMethod("constructor", t.identifier("constructor"), params, body));
	  };

	  ClassTransformer.prototype.buildBody = function buildBody() {
	    this.constructorMeMaybe();
	    this.pushBody();
	    this.verifyConstructor();

	    if (this.userConstructor) {
	      var constructorBody = this.constructorBody;
	      constructorBody.body = constructorBody.body.concat(this.userConstructor.body.body);
	      t.inherits(this.constructor, this.userConstructor);
	      t.inherits(constructorBody, this.userConstructor.body);
	    }

	    this.pushDescriptors();
	  };

	  ClassTransformer.prototype.pushBody = function pushBody() {
	    var classBodyPaths /*: Array<Object>*/ = this.path.get("body.body");

	    for (var _iterator2 = classBodyPaths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var path = _ref2;

	      var node = path.node;

	      if (path.isClassProperty()) {
	        throw path.buildCodeFrameError("Missing class properties transform.");
	      }

	      if (node.decorators) {
	        throw path.buildCodeFrameError("Method has decorators, put the decorator plugin before the classes one.");
	      }

	      if (t.isClassMethod(node)) {
	        var isConstructor = node.kind === "constructor";

	        if (isConstructor) {
	          path.traverse(verifyConstructorVisitor, this);

	          if (!this.hasBareSuper && this.isDerived) {
	            throw path.buildCodeFrameError("missing super() call in constructor");
	          }
	        }

	        var replaceSupers = new _babelHelperReplaceSupers2["default"]({
	          forceSuperMemoisation: isConstructor,
	          methodPath: path,
	          methodNode: node,
	          objectRef: this.classRef,
	          superRef: this.superName,
	          isStatic: node["static"],
	          isLoose: this.isLoose,
	          scope: this.scope,
	          file: this.file
	        }, true);

	        replaceSupers.replace();

	        if (isConstructor) {
	          this.pushConstructor(replaceSupers, node, path);
	        } else {
	          this.pushMethod(node, path);
	        }
	      }
	    }
	  };

	  ClassTransformer.prototype.clearDescriptors = function clearDescriptors() {
	    this.hasInstanceDescriptors = false;
	    this.hasStaticDescriptors = false;

	    this.instanceMutatorMap = {};
	    this.staticMutatorMap = {};
	  };

	  ClassTransformer.prototype.pushDescriptors = function pushDescriptors() {
	    this.pushInherits();

	    var body = this.body;

	    var instanceProps = undefined;
	    var staticProps = undefined;

	    if (this.hasInstanceDescriptors) {
	      instanceProps = defineMap.toClassObject(this.instanceMutatorMap);
	    }

	    if (this.hasStaticDescriptors) {
	      staticProps = defineMap.toClassObject(this.staticMutatorMap);
	    }

	    if (instanceProps || staticProps) {
	      if (instanceProps) instanceProps = defineMap.toComputedObjectFromClass(instanceProps);
	      if (staticProps) staticProps = defineMap.toComputedObjectFromClass(staticProps);

	      var nullNode = t.nullLiteral();

	      // (Constructor, instanceDescriptors, staticDescriptors, instanceInitializers, staticInitializers)
	      var args = [this.classRef, nullNode, nullNode, nullNode, nullNode];

	      if (instanceProps) args[1] = instanceProps;
	      if (staticProps) args[2] = staticProps;

	      if (this.instanceInitializersId) {
	        args[3] = this.instanceInitializersId;
	        body.unshift(this.buildObjectAssignment(this.instanceInitializersId));
	      }

	      if (this.staticInitializersId) {
	        args[4] = this.staticInitializersId;
	        body.unshift(this.buildObjectAssignment(this.staticInitializersId));
	      }

	      var lastNonNullIndex = 0;
	      for (var i = 0; i < args.length; i++) {
	        if (args[i] !== nullNode) lastNonNullIndex = i;
	      }
	      args = args.slice(0, lastNonNullIndex + 1);

	      body.push(t.expressionStatement(t.callExpression(this.file.addHelper("createClass"), args)));
	    }

	    this.clearDescriptors();
	  };

	  ClassTransformer.prototype.buildObjectAssignment = function buildObjectAssignment(id) {
	    return t.variableDeclaration("var", [t.variableDeclarator(id, t.objectExpression([]))]);
	  };

	  ClassTransformer.prototype.wrapSuperCall = function wrapSuperCall(bareSuper, superRef, thisRef, body) {
	    var bareSuperNode = bareSuper.node;

	    if (this.isLoose) {
	      bareSuperNode.arguments.unshift(t.thisExpression());
	      if (bareSuperNode.arguments.length === 2 && t.isSpreadElement(bareSuperNode.arguments[1]) && t.isIdentifier(bareSuperNode.arguments[1].argument, { name: "arguments" })) {
	        // special case single arguments spread
	        bareSuperNode.arguments[1] = bareSuperNode.arguments[1].argument;
	        bareSuperNode.callee = t.memberExpression(superRef, t.identifier("apply"));
	      } else {
	        bareSuperNode.callee = t.memberExpression(superRef, t.identifier("call"));
	      }
	    } else {
	      bareSuperNode = _babelHelperOptimiseCallExpression2["default"](t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.classRef]), t.thisExpression(), bareSuperNode.arguments);
	    }

	    var call = t.callExpression(this.file.addHelper("possibleConstructorReturn"), [t.thisExpression(), bareSuperNode]);

	    var bareSuperAfter = this.bareSuperAfter.map(function (fn) {
	      return fn(thisRef);
	    });

	    if (bareSuper.parentPath.isExpressionStatement() && bareSuper.parentPath.container === body.node.body && body.node.body.length - 1 === bareSuper.parentPath.key) {
	      // this super call is the last statement in the body so we can just straight up
	      // turn it into a return

	      if (this.superThises.length || bareSuperAfter.length) {
	        bareSuper.scope.push({ id: thisRef });
	        call = t.assignmentExpression("=", thisRef, call);
	      }

	      if (bareSuperAfter.length) {
	        call = t.toSequenceExpression([call].concat(bareSuperAfter, [thisRef]));
	      }

	      bareSuper.parentPath.replaceWith(t.returnStatement(call));
	    } else {
	      bareSuper.replaceWithMultiple([t.variableDeclaration("var", [t.variableDeclarator(thisRef, call)])].concat(bareSuperAfter, [t.expressionStatement(thisRef)]));
	    }
	  };

	  ClassTransformer.prototype.verifyConstructor = function verifyConstructor() {
	    // istanbul ignore next

	    var _this2 = this;

	    if (!this.isDerived) return;

	    var path = this.userConstructorPath;
	    var body = path.get("body");

	    path.traverse(findThisesVisitor, this);

	    var guaranteedSuperBeforeFinish = !!this.bareSupers.length;

	    var superRef = this.superName || t.identifier("Function");
	    var thisRef = path.scope.generateUidIdentifier("this");

	    for (var _iterator3 = this.bareSupers, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;

	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }

	      var bareSuper = _ref3;

	      this.wrapSuperCall(bareSuper, superRef, thisRef, body);

	      if (guaranteedSuperBeforeFinish) {
	        bareSuper.find(function (parentPath) {
	          // hit top so short circuit
	          if (parentPath === path) {
	            return true;
	          }

	          if (parentPath.isLoop() || parentPath.isConditional()) {
	            guaranteedSuperBeforeFinish = false;
	            return true;
	          }
	        });
	      }
	    }

	    for (var _iterator4 = this.superThises, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	      var _ref4;

	      if (_isArray4) {
	        if (_i4 >= _iterator4.length) break;
	        _ref4 = _iterator4[_i4++];
	      } else {
	        _i4 = _iterator4.next();
	        if (_i4.done) break;
	        _ref4 = _i4.value;
	      }

	      var thisPath = _ref4;

	      thisPath.replaceWith(thisRef);
	    }

	    var wrapReturn = function wrapReturn(returnArg) {
	      return t.callExpression(_this2.file.addHelper("possibleConstructorReturn"), [thisRef].concat(returnArg || []));
	    };

	    // if we have a return as the last node in the body then we've already caught that
	    // return
	    var bodyPaths = body.get("body");
	    if (bodyPaths.length && !bodyPaths.pop().isReturnStatement()) {
	      body.pushContainer("body", t.returnStatement(guaranteedSuperBeforeFinish ? thisRef : wrapReturn()));
	    }

	    for (var _iterator5 = this.superReturns, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	      var _ref5;

	      if (_isArray5) {
	        if (_i5 >= _iterator5.length) break;
	        _ref5 = _iterator5[_i5++];
	      } else {
	        _i5 = _iterator5.next();
	        if (_i5.done) break;
	        _ref5 = _i5.value;
	      }

	      var returnPath = _ref5;

	      if (returnPath.node.argument) {
	        var ref = returnPath.scope.generateDeclaredUidIdentifier("ret");
	        returnPath.get("argument").replaceWithMultiple([t.assignmentExpression("=", ref, returnPath.node.argument), wrapReturn(ref)]);
	      } else {
	        returnPath.get("argument").replaceWith(wrapReturn());
	      }
	    }
	  };

	  /**
	   * Push a method to its respective mutatorMap.
	   */

	  ClassTransformer.prototype.pushMethod = function pushMethod(node /*: { type: "ClassMethod" }*/, path /*:: ?: NodePath*/) {
	    var scope = path ? path.scope : this.scope;

	    if (node.kind === "method") {
	      if (this._processMethod(node, scope)) return;
	    }

	    this.pushToMap(node, false, null, scope);
	  };

	  ClassTransformer.prototype._processMethod = function _processMethod() {
	    return false;
	  };

	  /**
	   * Replace the constructor body of our class.
	   */

	  ClassTransformer.prototype.pushConstructor = function pushConstructor(replaceSupers, method /*: { type: "ClassMethod" }*/, path /*: NodePath*/) {
	    this.bareSupers = replaceSupers.bareSupers;
	    this.superReturns = replaceSupers.returns;

	    // https://github.com/babel/babel/issues/1077
	    if (path.scope.hasOwnBinding(this.classRef.name)) {
	      path.scope.rename(this.classRef.name);
	    }

	    var construct = this.constructor;

	    this.userConstructorPath = path;
	    this.userConstructor = method;
	    this.hasConstructor = true;

	    t.inheritsComments(construct, method);

	    construct._ignoreUserWhitespace = true;
	    construct.params = method.params;

	    t.inherits(construct.body, method.body);
	    construct.body.directives = method.body.directives;

	    // push constructor to body
	    this._pushConstructor();
	  };

	  ClassTransformer.prototype._pushConstructor = function _pushConstructor() {
	    if (this.pushedConstructor) return;
	    this.pushedConstructor = true;

	    // we haven't pushed any descriptors yet
	    if (this.hasInstanceDescriptors || this.hasStaticDescriptors) {
	      this.pushDescriptors();
	    }

	    this.body.push(this.constructor);

	    this.pushInherits();
	  };

	  /**
	   * Push inherits helper to body.
	   */

	  ClassTransformer.prototype.pushInherits = function pushInherits() {
	    if (!this.isDerived || this.pushedInherits) return;

	    // Unshift to ensure that the constructor inheritance is set up before
	    // any properties can be assigned to the prototype.
	    this.pushedInherits = true;
	    this.body.unshift(t.expressionStatement(t.callExpression(this.file.addHelper("inherits"), [this.classRef, this.superName])));
	  };

	  return ClassTransformer;
	})();

	exports["default"] = ClassTransformer;
	module.exports = exports["default"];

/***/ },
/* 1870 */
[7963, 4100],
/* 1871 */
[7965, 4111],
/* 1872 */
[7967, 1870, 460],
/* 1873 */
[7997, 45, 51],
/* 1874 */
[7823, 4134],
/* 1875 */
732,
/* 1876 */
[7842, 4138],
/* 1877 */
[7843, 1141],
/* 1878 */
[7846, 589, 127],
/* 1879 */
701,
/* 1880 */
[7851, 1881, 588, 1882, 1143, 1142, 780, 4144, 1146, 127, 462],
/* 1881 */
1560,
/* 1882 */
[7854, 1143],
/* 1883 */
[7857, 779],
/* 1884 */
975,
/* 1885 */
[7873, 778, 10, 45, 4197, 4200, 393, 4162, 51],
/* 1886 */
[7924, 96, 10, 590, 197, 781, 782, 463, 4174],
/* 1887 */
[7965, 4199],
/* 1888 */
[7967, 4190, 591],
/* 1889 */
[7988, 1887, 1888, 592, 4195],
/* 1890 */
[7875, 96],
/* 1891 */
1571,
/* 1892 */
[7888, 45, 51],
/* 1893 */
[7892, 96],
/* 1894 */
1550,
/* 1895 */
[7924, 96, 10, 593, 199, 783, 784, 465, 4248],
/* 1896 */
1579,
/* 1897 */
[7936, 4259, 787],
/* 1898 */
[7952, 4282],
/* 1899 */
[7963, 4263],
/* 1900 */
[7965, 4277],
/* 1901 */
[7976, 1154, 785],
/* 1902 */
[7985, 4257, 1897, 4266],
/* 1903 */
[7813, 4283],
/* 1904 */
[7910, 392, 45, 51],
/* 1905 */
1550,
/* 1906 */
981,
/* 1907 */
[7940, 4326],
/* 1908 */
[7942, 1907, 789],
/* 1909 */
[7943, 317],
/* 1910 */
[7945, 4314, 151, 316],
/* 1911 */
1590,
/* 1912 */
[7963, 1911],
/* 1913 */
[7968, 1159, 1160, 151],
/* 1914 */
[7969, 318, 317],
/* 1915 */
[7970, 151],
/* 1916 */
[7973, 4320, 318],
/* 1917 */
[7989, 1161, 318, 1160, 467, 151],
/* 1918 */
1601,
/* 1919 */
969,
/* 1920 */
699,
/* 1921 */
700,
/* 1922 */
[7851, 4364, 4358, 4365, 1165, 1921, 790, 4362, 1924, 791, 595],
/* 1923 */
973,
/* 1924 */
[7856, 791, 1921, 595],
/* 1925 */
969,
/* 1926 */
699,
/* 1927 */
700,
/* 1928 */
[7851, 4391, 4385, 4392, 1169, 1927, 792, 4389, 1930, 793, 596],
/* 1929 */
973,
/* 1930 */
[7856, 793, 1927, 596],
/* 1931 */
[7924, 40, 2, 597, 201, 794, 795, 468, 4418],
/* 1932 */
[7965, 4443],
/* 1933 */
[7967, 4434, 598],
/* 1934 */
[7988, 1932, 1933, 599, 4439],
/* 1935 */
[7875, 40],
/* 1936 */
1571,
/* 1937 */
[7888, 21, 26],
/* 1938 */
[7892, 40],
/* 1939 */
1550,
/* 1940 */
[7924, 40, 2, 601, 203, 796, 797, 470, 4492],
/* 1941 */
1579,
/* 1942 */
[7936, 4503, 800],
/* 1943 */
[7952, 4526],
/* 1944 */
[7963, 4507],
/* 1945 */
[7965, 4521],
/* 1946 */
[7976, 1179, 798],
/* 1947 */
[7985, 4501, 1942, 4510],
/* 1948 */
[7813, 4527],
/* 1949 */
[7822, 4543],
/* 1950 */
[7842, 4548],
/* 1951 */
[7843, 1188],
/* 1952 */
[7846, 604, 128],
/* 1953 */
701,
/* 1954 */
[7851, 1955, 603, 1956, 1190, 1189, 803, 4554, 1193, 128, 472],
/* 1955 */
1560,
/* 1956 */
[7854, 1190],
/* 1957 */
[7857, 802],
/* 1958 */
975,
/* 1959 */
[7910, 204, 21, 26],
/* 1960 */
[7875, 40],
/* 1961 */
1571,
/* 1962 */
[7888, 21, 26],
/* 1963 */
[7892, 40],
/* 1964 */
[7924, 40, 2, 606, 206, 804, 805, 473, 4625],
/* 1965 */
[7813, 4631],
/* 1966 */
1550,
/* 1967 */
[7811, 4633, 1966, 4634],
/* 1968 */
1579,
/* 1969 */
981,
/* 1970 */
[7936, 4647, 474],
/* 1971 */
[7940, 4664],
/* 1972 */
[7942, 1971, 474],
/* 1973 */
[7943, 321],
/* 1974 */
[7944, 4672],
/* 1975 */
[7945, 4650, 152, 320],
/* 1976 */
1590,
/* 1977 */
[7969, 263, 321],
/* 1978 */
[7970, 152],
/* 1979 */
[7973, 4656, 263],
/* 1980 */
[7974, 4646, 806, 808],
/* 1981 */
[7983, 320],
/* 1982 */
[7985, 4644, 1970, 4662],
/* 1983 */
[7989, 1202, 263, 1201, 397, 152],
/* 1984 */
1601,
/* 1985 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Object$create = __webpack_require__(475)["default"];

	var _interopRequireDefault = __webpack_require__(34)["default"];

	exports.__esModule = true;

	var _babelTemplate = __webpack_require__(4735);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var buildDefine = _babelTemplate2["default"]("\n  define(MODULE_NAME, [SOURCES], function (PARAMS) {\n    BODY;\n  });\n");

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  function isValidRequireCall(path) {
	    if (!path.isCallExpression()) return false;
	    if (!path.get("callee").isIdentifier({ name: "require" })) return false;
	    if (path.scope.getBinding("require")) return false;

	    var args = path.get("arguments");
	    if (args.length !== 1) return false;

	    var arg = args[0];
	    if (!arg.isStringLiteral()) return false;

	    return true;
	  }

	  var amdVisitor = {
	    ReferencedIdentifier: function ReferencedIdentifier(_ref2) {
	      var node = _ref2.node;
	      var scope = _ref2.scope;

	      if (node.name === "exports" && !scope.getBinding("exports")) {
	        this.hasExports = true;
	      }

	      if (node.name === "module" && !scope.getBinding("module")) {
	        this.hasModule = true;
	      }
	    },

	    CallExpression: function CallExpression(path) {
	      if (!isValidRequireCall(path)) return;
	      this.bareSources.push(path.node.arguments[0]);
	      path.remove();
	    },

	    VariableDeclarator: function VariableDeclarator(path) {
	      var id = path.get("id");
	      if (!id.isIdentifier()) return;

	      var init = path.get("init");
	      if (!isValidRequireCall(init)) return;

	      var source = init.node.arguments[0];
	      this.sourceNames[source.value] = true;
	      this.sources.push([id.node, source]);

	      path.remove();
	    }
	  };

	  return {
	    inherits: __webpack_require__(1223),

	    pre: function pre() {
	      // source strings
	      this.sources = [];
	      this.sourceNames = _Object$create(null);

	      // bare sources
	      this.bareSources = [];

	      this.hasExports = false;
	      this.hasModule = false;
	    },

	    visitor: {
	      Program: {
	        exit: function exit(path) {
	          // istanbul ignore next

	          var _this = this;

	          if (this.ran) return;
	          this.ran = true;

	          path.traverse(amdVisitor, this);

	          var params = this.sources.map(function (source) {
	            return source[0];
	          });
	          var sources = this.sources.map(function (source) {
	            return source[1];
	          });

	          sources = sources.concat(this.bareSources.filter(function (str) {
	            return !_this.sourceNames[str.value];
	          }));

	          var moduleName = this.getModuleName();
	          if (moduleName) moduleName = t.stringLiteral(moduleName);

	          if (this.hasExports) {
	            sources.unshift(t.stringLiteral("exports"));
	            params.unshift(t.identifier("exports"));
	          }

	          if (this.hasModule) {
	            sources.unshift(t.stringLiteral("module"));
	            params.unshift(t.identifier("module"));
	          }

	          path.node.body = [buildDefine({
	            MODULE_NAME: moduleName,
	            SOURCES: sources,
	            PARAMS: params,
	            BODY: path.node.body
	          })];
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 1986 */
[7823, 4707],
/* 1987 */
[7825, 4710],
/* 1988 */
732,
/* 1989 */
[7842, 4711],
/* 1990 */
[7843, 1207],
/* 1991 */
[7846, 608, 129],
/* 1992 */
701,
/* 1993 */
[7851, 1994, 607, 1995, 1209, 1208, 810, 4717, 1212, 129, 476],
/* 1994 */
1560,
/* 1995 */
[7854, 1209],
/* 1996 */
[7857, 809],
/* 1997 */
975,
/* 1998 */
[7875, 112],
/* 1999 */
1571,
/* 2000 */
[7888, 73, 84],
/* 2001 */
[7892, 112],
/* 2002 */
1550,
/* 2003 */
[7813, 4774],
/* 2004 */
[7910, 475, 73, 84],
/* 2005 */
1550,
/* 2006 */
[7912, 34, 207, 4798, 4797, 4795, 4793, 4796, 4794, 4792, 208, 2007, 811, 4799, 4800],
/* 2007 */
[7924, 112, 34, 609, 208, 811, 812, 478, 4802],
/* 2008 */
1578,
/* 2009 */
1579,
/* 2010 */
981,
/* 2011 */
[7936, 4813, 479],
/* 2012 */
[7938, 4808, 2010, 2011, 2014, 4838, 4839, 4840, 209, 153],
/* 2013 */
[7940, 4829],
/* 2014 */
[7942, 2013, 479],
/* 2015 */
[7944, 4837],
/* 2016 */
[7945, 4816, 153, 324],
/* 2017 */
1590,
/* 2018 */
1591,
/* 2019 */
[7970, 153],
/* 2020 */
[7974, 2012, 610, 815],
/* 2021 */
[7983, 324],
/* 2022 */
[7985, 4811, 2011, 4827],
/* 2023 */
[7989, 816, 209, 814, 323, 153],
/* 2024 */
1601,
/* 2025 */
[7822, 4869],
/* 2026 */
[7828, 265, 4859],
/* 2027 */
[7842, 4874],
/* 2028 */
[7843, 1227],
/* 2029 */
[7846, 612, 130],
/* 2030 */
701,
/* 2031 */
[7851, 2032, 611, 2033, 1229, 1228, 821, 4880, 1232, 130, 480],
/* 2032 */
1560,
/* 2033 */
[7854, 1229],
/* 2034 */
[7857, 820],
/* 2035 */
975,
/* 2036 */
[7875, 65],
/* 2037 */
1571,
/* 2038 */
[7888, 24, 30],
/* 2039 */
[7892, 65],
/* 2040 */
1550,
/* 2041 */
[7813, 4937],
/* 2042 */
[7912, 7, 210, 4946, 4945, 4943, 4941, 4944, 4942, 4940, 211, 2043, 822, 4947, 4948],
/* 2043 */
[7924, 65, 7, 614, 211, 822, 823, 481, 4950],
/* 2044 */
1579,
/* 2045 */
[7936, 4956, 826],
/* 2046 */
[7938, 4952, 4953, 2045, 4958, 4970, 4971, 4972, 400, 483],
/* 2047 */
[7963, 4961],
/* 2048 */
[7965, 4979],
/* 2049 */
[7985, 4955, 2045, 4966],
/* 2050 */
[7910, 265, 24, 30],
/* 2051 */
[7875, 65],
/* 2052 */
1571,
/* 2053 */
[7888, 24, 30],
/* 2054 */
[7892, 65],
/* 2055 */
[7924, 65, 7, 616, 213, 827, 828, 484, 5039],
/* 2056 */
[7813, 5045],
/* 2057 */
1550,
/* 2058 */
[7811, 5047, 2057, 5048],
/* 2059 */
1579,
/* 2060 */
981,
/* 2061 */
[7936, 5061, 485],
/* 2062 */
[7940, 5078],
/* 2063 */
[7942, 2062, 485],
/* 2064 */
[7943, 328],
/* 2065 */
[7944, 5086],
/* 2066 */
[7945, 5064, 154, 327],
/* 2067 */
1590,
/* 2068 */
[7969, 267, 328],
/* 2069 */
[7970, 154],
/* 2070 */
[7973, 5070, 267],
/* 2071 */
[7974, 5060, 829, 831],
/* 2072 */
[7983, 327],
/* 2073 */
[7985, 5058, 2061, 5076],
/* 2074 */
[7989, 1249, 267, 1248, 402, 154],
/* 2075 */
1601,
/* 2076 */
[7910, 216, 9, 85],
/* 2077 */
[7875, 66],
/* 2078 */
1571,
/* 2079 */
[7888, 9, 85],
/* 2080 */
[7892, 66],
/* 2081 */
[7924, 66, 4, 618, 215, 832, 833, 486, 5158],
/* 2082 */
[7813, 5164],
/* 2083 */
1550,
/* 2084 */
[7811, 5166, 2083, 5167],
/* 2085 */
1579,
/* 2086 */
981,
/* 2087 */
[7936, 5180, 487],
/* 2088 */
[7940, 5197],
/* 2089 */
[7942, 2088, 487],
/* 2090 */
[7943, 331],
/* 2091 */
[7944, 5205],
/* 2092 */
[7945, 5183, 155, 330],
/* 2093 */
1590,
/* 2094 */
[7969, 268, 331],
/* 2095 */
[7970, 155],
/* 2096 */
[7973, 5189, 268],
/* 2097 */
[7974, 5179, 834, 836],
/* 2098 */
[7983, 330],
/* 2099 */
[7985, 5177, 2087, 5195],
/* 2100 */
[7989, 1257, 268, 1256, 404, 155],
/* 2101 */
1601,
/* 2102 */
[7817, 5227],
/* 2103 */
[7822, 5232],
/* 2104 */
[7826, 5235],
/* 2105 */
[7827, 5224, 5223, 5222],
/* 2106 */
[7828, 216, 5225],
/* 2107 */
/***/ function(module, exports) {

	"use strict";

	exports["default"] = function (obj, defaults) {
	  var newObj = defaults({}, obj);
	  delete newObj["default"];
	  return newObj;
	};

	exports.__esModule = true;

/***/ },
/* 2108 */
[7842, 5237],
/* 2109 */
[7843, 1261],
/* 2110 */
[7846, 620, 131],
/* 2111 */
701,
/* 2112 */
[7851, 2113, 619, 2114, 1263, 1262, 841, 5243, 1266, 131, 488],
/* 2113 */
1560,
/* 2114 */
[7854, 1263],
/* 2115 */
[7857, 840],
/* 2116 */
975,
/* 2117 */
[7875, 66],
/* 2118 */
1571,
/* 2119 */
[7888, 9, 86],
/* 2120 */
[7892, 66],
/* 2121 */
1550,
/* 2122 */
[7813, 5300],
/* 2123 */
[7910, 216, 9, 86],
/* 2124 */
1550,
/* 2125 */
[7912, 4, 217, 5324, 5323, 5321, 5319, 5322, 5320, 5318, 218, 2126, 842, 5325, 5326],
/* 2126 */
[7924, 66, 4, 621, 218, 842, 843, 490, 5328],
/* 2127 */
1578,
/* 2128 */
1579,
/* 2129 */
981,
/* 2130 */
[7936, 5339, 491],
/* 2131 */
[7938, 5334, 2129, 2130, 2133, 5364, 5365, 5366, 219, 156],
/* 2132 */
[7940, 5355],
/* 2133 */
[7942, 2132, 491],
/* 2134 */
[7944, 5363],
/* 2135 */
[7945, 5342, 156, 334],
/* 2136 */
1590,
/* 2137 */
1591,
/* 2138 */
[7970, 156],
/* 2139 */
[7974, 2131, 622, 846],
/* 2140 */
[7983, 334],
/* 2141 */
[7985, 5337, 2130, 5353],
/* 2142 */
[7989, 847, 219, 845, 333, 156],
/* 2143 */
1601,
/* 2144 */
[7823, 5399],
/* 2145 */
[7825, 5402],
/* 2146 */
732,
/* 2147 */
[7842, 5403],
/* 2148 */
[7843, 1280],
/* 2149 */
[7846, 625, 132],
/* 2150 */
701,
/* 2151 */
[7851, 2152, 624, 2153, 1282, 1281, 849, 5409, 1285, 132, 492],
/* 2152 */
1560,
/* 2153 */
[7854, 1282],
/* 2154 */
[7857, 848],
/* 2155 */
975,
/* 2156 */
[7875, 113],
/* 2157 */
1571,
/* 2158 */
[7888, 74, 87],
/* 2159 */
[7892, 113],
/* 2160 */
1550,
/* 2161 */
[7813, 5466],
/* 2162 */
[7910, 623, 74, 87],
/* 2163 */
1550,
/* 2164 */
[7912, 35, 220, 5490, 5489, 5487, 5485, 5488, 5486, 5484, 221, 2165, 850, 5491, 5492],
/* 2165 */
[7924, 113, 35, 626, 221, 850, 851, 494, 5494],
/* 2166 */
1578,
/* 2167 */
1579,
/* 2168 */
981,
/* 2169 */
[7936, 5505, 495],
/* 2170 */
[7938, 5500, 2168, 2169, 2172, 5530, 5531, 5532, 222, 157],
/* 2171 */
[7940, 5521],
/* 2172 */
[7942, 2171, 495],
/* 2173 */
[7944, 5529],
/* 2174 */
[7945, 5508, 157, 338],
/* 2175 */
1590,
/* 2176 */
1591,
/* 2177 */
[7970, 157],
/* 2178 */
[7974, 2170, 627, 854],
/* 2179 */
[7983, 338],
/* 2180 */
[7985, 5503, 2169, 5519],
/* 2181 */
[7989, 855, 222, 853, 337, 157],
/* 2182 */
1601,
/* 2183 */
[7875, 109],
/* 2184 */
1571,
/* 2185 */
[7888, 67, 79],
/* 2186 */
[7892, 109],
/* 2187 */
1550,
/* 2188 */
[7924, 109, 36, 629, 224, 857, 858, 496, 5594],
/* 2189 */
1579,
/* 2190 */
[7936, 5605, 861],
/* 2191 */
[7952, 5628],
/* 2192 */
[7963, 5609],
/* 2193 */
[7965, 5623],
/* 2194 */
[7976, 1299, 859],
/* 2195 */
[7985, 5603, 2190, 5612],
/* 2196 */
[7813, 5629],
/* 2197 */
[7910, 631, 67, 79],
/* 2198 */
1550,
/* 2199 */
981,
/* 2200 */
[7940, 5672],
/* 2201 */
[7942, 2200, 863],
/* 2202 */
[7943, 342],
/* 2203 */
[7945, 5660, 158, 341],
/* 2204 */
1590,
/* 2205 */
[7963, 2204],
/* 2206 */
[7968, 1304, 1305, 158],
/* 2207 */
[7969, 343, 342],
/* 2208 */
[7970, 158],
/* 2209 */
[7973, 5666, 343],
/* 2210 */
[7989, 1306, 343, 1305, 498, 158],
/* 2211 */
1601,
/* 2212 */
[7823, 5713],
/* 2213 */
732,
/* 2214 */
[7842, 5717],
/* 2215 */
[7843, 1311],
/* 2216 */
[7846, 633, 133],
/* 2217 */
701,
/* 2218 */
[7851, 2219, 632, 2220, 1313, 1312, 865, 5723, 1316, 133, 499],
/* 2219 */
1560,
/* 2220 */
[7854, 1313],
/* 2221 */
[7857, 864],
/* 2222 */
975,
/* 2223 */
[7823, 5763],
/* 2224 */
[7825, 5766],
/* 2225 */
[7828, 408, 5752],
/* 2226 */
732,
/* 2227 */
[7842, 5767],
/* 2228 */
[7843, 1322],
/* 2229 */
[7846, 635, 134],
/* 2230 */
701,
/* 2231 */
[7851, 2232, 634, 2233, 1324, 1323, 867, 5773, 1327, 134, 500],
/* 2232 */
1560,
/* 2233 */
[7854, 1324],
/* 2234 */
[7857, 866],
/* 2235 */
975,
/* 2236 */
[7873, 2224, 13, 46, 5826, 5829, 409, 5791, 54],
/* 2237 */
[7924, 107, 13, 636, 226, 868, 869, 501, 5803],
/* 2238 */
[7965, 5828],
/* 2239 */
[7967, 5819, 637],
/* 2240 */
[7988, 2238, 2239, 638, 5824],
/* 2241 */
[7875, 107],
/* 2242 */
1571,
/* 2243 */
[7888, 46, 54],
/* 2244 */
[7892, 107],
/* 2245 */
1550,
/* 2246 */
[7924, 107, 13, 639, 228, 870, 871, 503, 5877],
/* 2247 */
1579,
/* 2248 */
[7936, 5888, 874],
/* 2249 */
[7952, 5911],
/* 2250 */
[7963, 5892],
/* 2251 */
[7965, 5906],
/* 2252 */
[7976, 1336, 872],
/* 2253 */
[7985, 5886, 2248, 5895],
/* 2254 */
[7813, 5912],
/* 2255 */
[7910, 408, 46, 54],
/* 2256 */
1550,
/* 2257 */
981,
/* 2258 */
[7940, 5955],
/* 2259 */
[7942, 2258, 876],
/* 2260 */
[7943, 346],
/* 2261 */
[7945, 5943, 159, 345],
/* 2262 */
1590,
/* 2263 */
[7963, 2262],
/* 2264 */
[7968, 1341, 1342, 159],
/* 2265 */
[7969, 347, 346],
/* 2266 */
[7970, 159],
/* 2267 */
[7973, 5949, 347],
/* 2268 */
[7989, 1343, 347, 1342, 505, 159],
/* 2269 */
1601,
/* 2270 */
[7823, 5997],
/* 2271 */
732,
/* 2272 */
[7842, 6001],
/* 2273 */
[7843, 1348],
/* 2274 */
[7846, 643, 135],
/* 2275 */
701,
/* 2276 */
[7851, 2277, 642, 2278, 1350, 1349, 878, 6007, 1353, 135, 506],
/* 2277 */
1560,
/* 2278 */
[7854, 1350],
/* 2279 */
[7857, 877],
/* 2280 */
975,
/* 2281 */
[7910, 641, 75, 89],
/* 2282 */
[7875, 114],
/* 2283 */
1571,
/* 2284 */
[7888, 75, 89],
/* 2285 */
[7892, 114],
/* 2286 */
[7924, 114, 47, 645, 230, 879, 880, 507, 6078],
/* 2287 */
[7813, 6084],
/* 2288 */
1550,
/* 2289 */
[7811, 6086, 2288, 6087],
/* 2290 */
1579,
/* 2291 */
981,
/* 2292 */
[7936, 6100, 508],
/* 2293 */
[7940, 6117],
/* 2294 */
[7942, 2293, 508],
/* 2295 */
[7943, 350],
/* 2296 */
[7944, 6125],
/* 2297 */
[7945, 6103, 160, 349],
/* 2298 */
1590,
/* 2299 */
[7969, 274, 350],
/* 2300 */
[7970, 160],
/* 2301 */
[7973, 6109, 274],
/* 2302 */
[7974, 6099, 881, 883],
/* 2303 */
[7983, 349],
/* 2304 */
[7985, 6097, 2292, 6115],
/* 2305 */
[7989, 1362, 274, 1361, 412, 160],
/* 2306 */
1601,
/* 2307 */
969,
/* 2308 */
699,
/* 2309 */
700,
/* 2310 */
[7851, 6156, 6150, 6157, 1366, 2309, 884, 6154, 2312, 885, 646],
/* 2311 */
973,
/* 2312 */
[7856, 885, 2309, 646],
/* 2313 */
[7823, 6190],
/* 2314 */
732,
/* 2315 */
[7842, 6194],
/* 2316 */
[7843, 1371],
/* 2317 */
[7846, 649, 136],
/* 2318 */
701,
/* 2319 */
[7851, 2320, 648, 2321, 1373, 1372, 887, 6200, 1376, 136, 509],
/* 2320 */
1560,
/* 2321 */
[7854, 1373],
/* 2322 */
[7857, 886],
/* 2323 */
975,
/* 2324 */
[7910, 647, 68, 80],
/* 2325 */
[7875, 115],
/* 2326 */
1571,
/* 2327 */
[7888, 68, 80],
/* 2328 */
[7892, 115],
/* 2329 */
[7924, 115, 41, 651, 232, 888, 889, 510, 6271],
/* 2330 */
[7813, 6277],
/* 2331 */
1550,
/* 2332 */
[7811, 6279, 2331, 6280],
/* 2333 */
1579,
/* 2334 */
981,
/* 2335 */
[7936, 6293, 511],
/* 2336 */
[7940, 6310],
/* 2337 */
[7942, 2336, 511],
/* 2338 */
[7943, 353],
/* 2339 */
[7944, 6318],
/* 2340 */
[7945, 6296, 161, 352],
/* 2341 */
1590,
/* 2342 */
[7969, 276, 353],
/* 2343 */
[7970, 161],
/* 2344 */
[7973, 6302, 276],
/* 2345 */
[7974, 6292, 890, 892],
/* 2346 */
[7983, 352],
/* 2347 */
[7985, 6290, 2335, 6308],
/* 2348 */
[7989, 1385, 276, 1384, 414, 161],
/* 2349 */
1601,
/* 2350 */
969,
/* 2351 */
699,
/* 2352 */
700,
/* 2353 */
[7851, 6349, 6343, 6350, 1389, 2352, 893, 6347, 2355, 894, 652],
/* 2354 */
973,
/* 2355 */
[7856, 894, 2352, 652],
/* 2356 */
969,
/* 2357 */
144,
/* 2358 */
[7843, 2359],
/* 2359 */
543,
/* 2360 */
700,
/* 2361 */
973,
/* 2362 */
[7857, 895],
/* 2363 */
975,
/* 2364 */
[7861, 2362, 2363, 895],
/* 2365 */
[7910, 655, 69, 90],
/* 2366 */
[7875, 116],
/* 2367 */
1571,
/* 2368 */
[7888, 69, 90],
/* 2369 */
[7892, 116],
/* 2370 */
[7924, 116, 37, 654, 234, 896, 897, 513, 6434],
/* 2371 */
[7813, 6440],
/* 2372 */
1550,
/* 2373 */
[7811, 6442, 2372, 6443],
/* 2374 */
1579,
/* 2375 */
981,
/* 2376 */
[7936, 6458, 514],
/* 2377 */
[7940, 6475],
/* 2378 */
[7942, 2377, 514],
/* 2379 */
[7943, 356],
/* 2380 */
[7945, 6461, 162, 355],
/* 2381 */
1590,
/* 2382 */
[7969, 277, 356],
/* 2383 */
[7970, 162],
/* 2384 */
[7973, 6467, 277],
/* 2385 */
[7974, 6457, 898, 900],
/* 2386 */
[7983, 355],
/* 2387 */
[7985, 6455, 2376, 6473],
/* 2388 */
[7989, 1401, 277, 1400, 416, 162],
/* 2389 */
1601,
/* 2390 */
[7823, 6517],
/* 2391 */
732,
/* 2392 */
[7842, 6521],
/* 2393 */
[7843, 1405],
/* 2394 */
[7846, 657, 137],
/* 2395 */
701,
/* 2396 */
[7851, 2397, 656, 2398, 1407, 1406, 902, 6527, 1410, 137, 515],
/* 2397 */
1560,
/* 2398 */
[7854, 1407],
/* 2399 */
[7857, 901],
/* 2400 */
975,
/* 2401 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*! https://mths.be/regenerate v1.2.0 by @mathias | MIT license */
	;(function(root) {

		// Detect free variables `exports`.
		var freeExports = typeof exports == 'object' && exports;

		// Detect free variable `module`.
		var freeModule = typeof module == 'object' && module &&
			module.exports == freeExports && module;

		// Detect free variable `global`, from Node.js or Browserified code,
		// and use it as `root`.
		var freeGlobal = typeof global == 'object' && global;
		if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {
			root = freeGlobal;
		}

		/*--------------------------------------------------------------------------*/

		var ERRORS = {
			'rangeOrder': 'A range\u2019s `stop` value must be greater than or equal ' +
				'to the `start` value.',
			'codePointRange': 'Invalid code point value. Code points range from ' +
				'U+000000 to U+10FFFF.'
		};

		// https://mathiasbynens.be/notes/javascript-encoding#surrogate-pairs
		var HIGH_SURROGATE_MIN = 0xD800;
		var HIGH_SURROGATE_MAX = 0xDBFF;
		var LOW_SURROGATE_MIN = 0xDC00;
		var LOW_SURROGATE_MAX = 0xDFFF;

		// In Regenerate output, `\0` will never be preceded by `\` because we sort
		// by code point value, so let’s keep this regular expression simple.
		var regexNull = /\\x00([^0123456789]|$)/g;

		var object = {};
		var hasOwnProperty = object.hasOwnProperty;
		var extend = function(destination, source) {
			var key;
			for (key in source) {
				if (hasOwnProperty.call(source, key)) {
					destination[key] = source[key];
				}
			}
			return destination;
		};

		var forEach = function(array, callback) {
			var index = -1;
			var length = array.length;
			while (++index < length) {
				callback(array[index], index);
			}
		};

		var toString = object.toString;
		var isArray = function(value) {
			return toString.call(value) == '[object Array]';
		};
		var isNumber = function(value) {
			return typeof value == 'number' ||
				toString.call(value) == '[object Number]';
		};

		// This assumes that `number` is a positive integer that `toString()`s nicely
		// (which is the case for all code point values).
		var zeroes = '0000';
		var pad = function(number, totalCharacters) {
			var string = String(number);
			return string.length < totalCharacters
				? (zeroes + string).slice(-totalCharacters)
				: string;
		};

		var hex = function(number) {
			return Number(number).toString(16).toUpperCase();
		};

		var slice = [].slice;

		/*--------------------------------------------------------------------------*/

		var dataFromCodePoints = function(codePoints) {
			var index = -1;
			var length = codePoints.length;
			var max = length - 1;
			var result = [];
			var isStart = true;
			var tmp;
			var previous = 0;
			while (++index < length) {
				tmp = codePoints[index];
				if (isStart) {
					result.push(tmp);
					previous = tmp;
					isStart = false;
				} else {
					if (tmp == previous + 1) {
						if (index != max) {
							previous = tmp;
							continue;
						} else {
							isStart = true;
							result.push(tmp + 1);
						}
					} else {
						// End the previous range and start a new one.
						result.push(previous + 1, tmp);
						previous = tmp;
					}
				}
			}
			if (!isStart) {
				result.push(tmp + 1);
			}
			return result;
		};

		var dataRemove = function(data, codePoint) {
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var length = data.length;
			while (index < length) {
				start = data[index];
				end = data[index + 1];
				if (codePoint >= start && codePoint < end) {
					// Modify this pair.
					if (codePoint == start) {
						if (end == start + 1) {
							// Just remove `start` and `end`.
							data.splice(index, 2);
							return data;
						} else {
							// Just replace `start` with a new value.
							data[index] = codePoint + 1;
							return data;
						}
					} else if (codePoint == end - 1) {
						// Just replace `end` with a new value.
						data[index + 1] = codePoint;
						return data;
					} else {
						// Replace `[start, end]` with `[startA, endA, startB, endB]`.
						data.splice(index, 2, start, codePoint, codePoint + 1, end);
						return data;
					}
				}
				index += 2;
			}
			return data;
		};

		var dataRemoveRange = function(data, rangeStart, rangeEnd) {
			if (rangeEnd < rangeStart) {
				throw Error(ERRORS.rangeOrder);
			}
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			while (index < data.length) {
				start = data[index];
				end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.

				// Exit as soon as no more matching pairs can be found.
				if (start > rangeEnd) {
					return data;
				}

				// Check if this range pair is equal to, or forms a subset of, the range
				// to be removed.
				// E.g. we have `[0, 11, 40, 51]` and want to remove 0-10 → `[40, 51]`.
				// E.g. we have `[40, 51]` and want to remove 0-100 → `[]`.
				if (rangeStart <= start && rangeEnd >= end) {
					// Remove this pair.
					data.splice(index, 2);
					continue;
				}

				// Check if both `rangeStart` and `rangeEnd` are within the bounds of
				// this pair.
				// E.g. we have `[0, 11]` and want to remove 4-6 → `[0, 4, 7, 11]`.
				if (rangeStart >= start && rangeEnd < end) {
					if (rangeStart == start) {
						// Replace `[start, end]` with `[startB, endB]`.
						data[index] = rangeEnd + 1;
						data[index + 1] = end + 1;
						return data;
					}
					// Replace `[start, end]` with `[startA, endA, startB, endB]`.
					data.splice(index, 2, start, rangeStart, rangeEnd + 1, end + 1);
					return data;
				}

				// Check if only `rangeStart` is within the bounds of this pair.
				// E.g. we have `[0, 11]` and want to remove 4-20 → `[0, 4]`.
				if (rangeStart >= start && rangeStart <= end) {
					// Replace `end` with `rangeStart`.
					data[index + 1] = rangeStart;
					// Note: we cannot `return` just yet, in case any following pairs still
					// contain matching code points.
					// E.g. we have `[0, 11, 14, 31]` and want to remove 4-20
					// → `[0, 4, 21, 31]`.
				}

				// Check if only `rangeEnd` is within the bounds of this pair.
				// E.g. we have `[14, 31]` and want to remove 4-20 → `[21, 31]`.
				else if (rangeEnd >= start && rangeEnd <= end) {
					// Just replace `start`.
					data[index] = rangeEnd + 1;
					return data;
				}

				index += 2;
			}
			return data;
		};

		 var dataAdd = function(data, codePoint) {
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var lastIndex = null;
			var length = data.length;
			if (codePoint < 0x0 || codePoint > 0x10FFFF) {
				throw RangeError(ERRORS.codePointRange);
			}
			while (index < length) {
				start = data[index];
				end = data[index + 1];

				// Check if the code point is already in the set.
				if (codePoint >= start && codePoint < end) {
					return data;
				}

				if (codePoint == start - 1) {
					// Just replace `start` with a new value.
					data[index] = codePoint;
					return data;
				}

				// At this point, if `start` is `greater` than `codePoint`, insert a new
				// `[start, end]` pair before the current pair, or after the current pair
				// if there is a known `lastIndex`.
				if (start > codePoint) {
					data.splice(
						lastIndex != null ? lastIndex + 2 : 0,
						0,
						codePoint,
						codePoint + 1
					);
					return data;
				}

				if (codePoint == end) {
					// Check if adding this code point causes two separate ranges to become
					// a single range, e.g. `dataAdd([0, 4, 5, 10], 4)` → `[0, 10]`.
					if (codePoint + 1 == data[index + 2]) {
						data.splice(index, 4, start, data[index + 3]);
						return data;
					}
					// Else, just replace `end` with a new value.
					data[index + 1] = codePoint + 1;
					return data;
				}
				lastIndex = index;
				index += 2;
			}
			// The loop has finished; add the new pair to the end of the data set.
			data.push(codePoint, codePoint + 1);
			return data;
		};

		var dataAddData = function(dataA, dataB) {
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var data = dataA.slice();
			var length = dataB.length;
			while (index < length) {
				start = dataB[index];
				end = dataB[index + 1] - 1;
				if (start == end) {
					data = dataAdd(data, start);
				} else {
					data = dataAddRange(data, start, end);
				}
				index += 2;
			}
			return data;
		};

		var dataRemoveData = function(dataA, dataB) {
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var data = dataA.slice();
			var length = dataB.length;
			while (index < length) {
				start = dataB[index];
				end = dataB[index + 1] - 1;
				if (start == end) {
					data = dataRemove(data, start);
				} else {
					data = dataRemoveRange(data, start, end);
				}
				index += 2;
			}
			return data;
		};

		var dataAddRange = function(data, rangeStart, rangeEnd) {
			if (rangeEnd < rangeStart) {
				throw Error(ERRORS.rangeOrder);
			}
			if (
				rangeStart < 0x0 || rangeStart > 0x10FFFF ||
				rangeEnd < 0x0 || rangeEnd > 0x10FFFF
			) {
				throw RangeError(ERRORS.codePointRange);
			}
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var added = false;
			var length = data.length;
			while (index < length) {
				start = data[index];
				end = data[index + 1];

				if (added) {
					// The range has already been added to the set; at this point, we just
					// need to get rid of the following ranges in case they overlap.

					// Check if this range can be combined with the previous range.
					if (start == rangeEnd + 1) {
						data.splice(index - 1, 2);
						return data;
					}

					// Exit as soon as no more possibly overlapping pairs can be found.
					if (start > rangeEnd) {
						return data;
					}

					// E.g. `[0, 11, 12, 16]` and we’ve added 5-15, so we now have
					// `[0, 16, 12, 16]`. Remove the `12,16` part, as it lies within the
					// `0,16` range that was previously added.
					if (start >= rangeStart && start <= rangeEnd) {
						// `start` lies within the range that was previously added.

						if (end > rangeStart && end - 1 <= rangeEnd) {
							// `end` lies within the range that was previously added as well,
							// so remove this pair.
							data.splice(index, 2);
							index -= 2;
							// Note: we cannot `return` just yet, as there may still be other
							// overlapping pairs.
						} else {
							// `start` lies within the range that was previously added, but
							// `end` doesn’t. E.g. `[0, 11, 12, 31]` and we’ve added 5-15, so
							// now we have `[0, 16, 12, 31]`. This must be written as `[0, 31]`.
							// Remove the previously added `end` and the current `start`.
							data.splice(index - 1, 2);
							index -= 2;
						}

						// Note: we cannot return yet.
					}

				}

				else if (start == rangeEnd + 1) {
					data[index] = rangeStart;
					return data;
				}

				// Check if a new pair must be inserted *before* the current one.
				else if (start > rangeEnd) {
					data.splice(index, 0, rangeStart, rangeEnd + 1);
					return data;
				}

				else if (rangeStart >= start && rangeStart < end && rangeEnd + 1 <= end) {
					// The new range lies entirely within an existing range pair. No action
					// needed.
					return data;
				}

				else if (
					// E.g. `[0, 11]` and you add 5-15 → `[0, 16]`.
					(rangeStart >= start && rangeStart < end) ||
					// E.g. `[0, 3]` and you add 3-6 → `[0, 7]`.
					end == rangeStart
				) {
					// Replace `end` with the new value.
					data[index + 1] = rangeEnd + 1;
					// Make sure the next range pair doesn’t overlap, e.g. `[0, 11, 12, 14]`
					// and you add 5-15 → `[0, 16]`, i.e. remove the `12,14` part.
					added = true;
					// Note: we cannot `return` just yet.
				}

				else if (rangeStart <= start && rangeEnd + 1 >= end) {
					// The new range is a superset of the old range.
					data[index] = rangeStart;
					data[index + 1] = rangeEnd + 1;
					added = true;
				}

				index += 2;
			}
			// The loop has finished without doing anything; add the new pair to the end
			// of the data set.
			if (!added) {
				data.push(rangeStart, rangeEnd + 1);
			}
			return data;
		};

		var dataContains = function(data, codePoint) {
			var index = 0;
			var length = data.length;
			// Exit early if `codePoint` is not within `data`’s overall range.
			var start = data[index];
			var end = data[length - 1];
			if (length >= 2) {
				if (codePoint < start || codePoint > end) {
					return false;
				}
			}
			// Iterate over the data per `(start, end)` pair.
			while (index < length) {
				start = data[index];
				end = data[index + 1];
				if (codePoint >= start && codePoint < end) {
					return true;
				}
				index += 2;
			}
			return false;
		};

		var dataIntersection = function(data, codePoints) {
			var index = 0;
			var length = codePoints.length;
			var codePoint;
			var result = [];
			while (index < length) {
				codePoint = codePoints[index];
				if (dataContains(data, codePoint)) {
					result.push(codePoint);
				}
				++index;
			}
			return dataFromCodePoints(result);
		};

		var dataIsEmpty = function(data) {
			return !data.length;
		};

		var dataIsSingleton = function(data) {
			// Check if the set only represents a single code point.
			return data.length == 2 && data[0] + 1 == data[1];
		};

		var dataToArray = function(data) {
			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var result = [];
			var length = data.length;
			while (index < length) {
				start = data[index];
				end = data[index + 1];
				while (start < end) {
					result.push(start);
					++start;
				}
				index += 2;
			}
			return result;
		};

		/*--------------------------------------------------------------------------*/

		// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
		var floor = Math.floor;
		var highSurrogate = function(codePoint) {
			return parseInt(
				floor((codePoint - 0x10000) / 0x400) + HIGH_SURROGATE_MIN,
				10
			);
		};

		var lowSurrogate = function(codePoint) {
			return parseInt(
				(codePoint - 0x10000) % 0x400 + LOW_SURROGATE_MIN,
				10
			);
		};

		var stringFromCharCode = String.fromCharCode;
		var codePointToString = function(codePoint) {
			var string;
			// https://mathiasbynens.be/notes/javascript-escapes#single
			// Note: the `\b` escape sequence for U+0008 BACKSPACE in strings has a
			// different meaning in regular expressions (word boundary), so it cannot
			// be used here.
			if (codePoint == 0x09) {
				string = '\\t';
			}
			// Note: IE < 9 treats `'\v'` as `'v'`, so avoid using it.
			// else if (codePoint == 0x0B) {
			// 	string = '\\v';
			// }
			else if (codePoint == 0x0A) {
				string = '\\n';
			}
			else if (codePoint == 0x0C) {
				string = '\\f';
			}
			else if (codePoint == 0x0D) {
				string = '\\r';
			}
			else if (codePoint == 0x5C) {
				string = '\\\\';
			}
			else if (
				codePoint == 0x24 ||
				(codePoint >= 0x28 && codePoint <= 0x2B) ||
				codePoint == 0x2D || codePoint == 0x2E || codePoint == 0x3F ||
				(codePoint >= 0x5B && codePoint <= 0x5E) ||
				(codePoint >= 0x7B && codePoint <= 0x7D)
			) {
				// The code point maps to an unsafe printable ASCII character;
				// backslash-escape it. Here’s the list of those symbols:
				//
				//     $()*+-.?[\]^{|}
				//
				// See #7 for more info.
				string = '\\' + stringFromCharCode(codePoint);
			}
			else if (codePoint >= 0x20 && codePoint <= 0x7E) {
				// The code point maps to one of these printable ASCII symbols
				// (including the space character):
				//
				//      !"#%&',/0123456789:;<=>@ABCDEFGHIJKLMNO
				//     PQRSTUVWXYZ_`abcdefghijklmnopqrstuvwxyz~
				//
				// These can safely be used directly.
				string = stringFromCharCode(codePoint);
			}
			else if (codePoint <= 0xFF) {
				// https://mathiasbynens.be/notes/javascript-escapes#hexadecimal
				string = '\\x' + pad(hex(codePoint), 2);
			}
			else { // `codePoint <= 0xFFFF` holds true.
				// https://mathiasbynens.be/notes/javascript-escapes#unicode
				string = '\\u' + pad(hex(codePoint), 4);
			}

			// There’s no need to account for astral symbols / surrogate pairs here,
			// since `codePointToString` is private and only used for BMP code points.
			// But if that’s what you need, just add an `else` block with this code:
			//
			//     string = '\\u' + pad(hex(highSurrogate(codePoint)), 4)
			//     	+ '\\u' + pad(hex(lowSurrogate(codePoint)), 4);

			return string;
		};

		var symbolToCodePoint = function(symbol) {
			var length = symbol.length;
			var first = symbol.charCodeAt(0);
			var second;
			if (
				first >= HIGH_SURROGATE_MIN && first <= HIGH_SURROGATE_MAX &&
				length > 1 // There is a next code unit.
			) {
				// `first` is a high surrogate, and there is a next character. Assume
				// it’s a low surrogate (else it’s invalid usage of Regenerate anyway).
				second = symbol.charCodeAt(1);
				// https://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
				return (first - HIGH_SURROGATE_MIN) * 0x400 +
					second - LOW_SURROGATE_MIN + 0x10000;
			}
			return first;
		};

		var createBMPCharacterClasses = function(data) {
			// Iterate over the data per `(start, end)` pair.
			var result = '';
			var index = 0;
			var start;
			var end;
			var length = data.length;
			if (dataIsSingleton(data)) {
				return codePointToString(data[0]);
			}
			while (index < length) {
				start = data[index];
				end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.
				if (start == end) {
					result += codePointToString(start);
				} else if (start + 1 == end) {
					result += codePointToString(start) + codePointToString(end);
				} else {
					result += codePointToString(start) + '-' + codePointToString(end);
				}
				index += 2;
			}
			return '[' + result + ']';
		};

		var splitAtBMP = function(data) {
			// Iterate over the data per `(start, end)` pair.
			var loneHighSurrogates = [];
			var loneLowSurrogates = [];
			var bmp = [];
			var astral = [];
			var index = 0;
			var start;
			var end;
			var length = data.length;
			while (index < length) {
				start = data[index];
				end = data[index + 1] - 1; // Note: the `- 1` makes `end` inclusive.

				if (start < HIGH_SURROGATE_MIN) {

					// The range starts and ends before the high surrogate range.
					// E.g. (0, 0x10).
					if (end < HIGH_SURROGATE_MIN) {
						bmp.push(start, end + 1);
					}

					// The range starts before the high surrogate range and ends within it.
					// E.g. (0, 0xD855).
					if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
						bmp.push(start, HIGH_SURROGATE_MIN);
						loneHighSurrogates.push(HIGH_SURROGATE_MIN, end + 1);
					}

					// The range starts before the high surrogate range and ends in the low
					// surrogate range. E.g. (0, 0xDCFF).
					if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
						bmp.push(start, HIGH_SURROGATE_MIN);
						loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
						loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
					}

					// The range starts before the high surrogate range and ends after the
					// low surrogate range. E.g. (0, 0x10FFFF).
					if (end > LOW_SURROGATE_MAX) {
						bmp.push(start, HIGH_SURROGATE_MIN);
						loneHighSurrogates.push(HIGH_SURROGATE_MIN, HIGH_SURROGATE_MAX + 1);
						loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
						if (end <= 0xFFFF) {
							bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
						} else {
							bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
							astral.push(0xFFFF + 1, end + 1);
						}
					}

				} else if (start >= HIGH_SURROGATE_MIN && start <= HIGH_SURROGATE_MAX) {

					// The range starts and ends in the high surrogate range.
					// E.g. (0xD855, 0xD866).
					if (end >= HIGH_SURROGATE_MIN && end <= HIGH_SURROGATE_MAX) {
						loneHighSurrogates.push(start, end + 1);
					}

					// The range starts in the high surrogate range and ends in the low
					// surrogate range. E.g. (0xD855, 0xDCFF).
					if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
						loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
						loneLowSurrogates.push(LOW_SURROGATE_MIN, end + 1);
					}

					// The range starts in the high surrogate range and ends after the low
					// surrogate range. E.g. (0xD855, 0x10FFFF).
					if (end > LOW_SURROGATE_MAX) {
						loneHighSurrogates.push(start, HIGH_SURROGATE_MAX + 1);
						loneLowSurrogates.push(LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1);
						if (end <= 0xFFFF) {
							bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
						} else {
							bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
							astral.push(0xFFFF + 1, end + 1);
						}
					}

				} else if (start >= LOW_SURROGATE_MIN && start <= LOW_SURROGATE_MAX) {

					// The range starts and ends in the low surrogate range.
					// E.g. (0xDCFF, 0xDDFF).
					if (end >= LOW_SURROGATE_MIN && end <= LOW_SURROGATE_MAX) {
						loneLowSurrogates.push(start, end + 1);
					}

					// The range starts in the low surrogate range and ends after the low
					// surrogate range. E.g. (0xDCFF, 0x10FFFF).
					if (end > LOW_SURROGATE_MAX) {
						loneLowSurrogates.push(start, LOW_SURROGATE_MAX + 1);
						if (end <= 0xFFFF) {
							bmp.push(LOW_SURROGATE_MAX + 1, end + 1);
						} else {
							bmp.push(LOW_SURROGATE_MAX + 1, 0xFFFF + 1);
							astral.push(0xFFFF + 1, end + 1);
						}
					}

				} else if (start > LOW_SURROGATE_MAX && start <= 0xFFFF) {

					// The range starts and ends after the low surrogate range.
					// E.g. (0xFFAA, 0x10FFFF).
					if (end <= 0xFFFF) {
						bmp.push(start, end + 1);
					} else {
						bmp.push(start, 0xFFFF + 1);
						astral.push(0xFFFF + 1, end + 1);
					}

				} else {

					// The range starts and ends in the astral range.
					astral.push(start, end + 1);

				}

				index += 2;
			}
			return {
				'loneHighSurrogates': loneHighSurrogates,
				'loneLowSurrogates': loneLowSurrogates,
				'bmp': bmp,
				'astral': astral
			};
		};

		var optimizeSurrogateMappings = function(surrogateMappings) {
			var result = [];
			var tmpLow = [];
			var addLow = false;
			var mapping;
			var nextMapping;
			var highSurrogates;
			var lowSurrogates;
			var nextHighSurrogates;
			var nextLowSurrogates;
			var index = -1;
			var length = surrogateMappings.length;
			while (++index < length) {
				mapping = surrogateMappings[index];
				nextMapping = surrogateMappings[index + 1];
				if (!nextMapping) {
					result.push(mapping);
					continue;
				}
				highSurrogates = mapping[0];
				lowSurrogates = mapping[1];
				nextHighSurrogates = nextMapping[0];
				nextLowSurrogates = nextMapping[1];

				// Check for identical high surrogate ranges.
				tmpLow = lowSurrogates;
				while (
					nextHighSurrogates &&
					highSurrogates[0] == nextHighSurrogates[0] &&
					highSurrogates[1] == nextHighSurrogates[1]
				) {
					// Merge with the next item.
					if (dataIsSingleton(nextLowSurrogates)) {
						tmpLow = dataAdd(tmpLow, nextLowSurrogates[0]);
					} else {
						tmpLow = dataAddRange(
							tmpLow,
							nextLowSurrogates[0],
							nextLowSurrogates[1] - 1
						);
					}
					++index;
					mapping = surrogateMappings[index];
					highSurrogates = mapping[0];
					lowSurrogates = mapping[1];
					nextMapping = surrogateMappings[index + 1];
					nextHighSurrogates = nextMapping && nextMapping[0];
					nextLowSurrogates = nextMapping && nextMapping[1];
					addLow = true;
				}
				result.push([
					highSurrogates,
					addLow ? tmpLow : lowSurrogates
				]);
				addLow = false;
			}
			return optimizeByLowSurrogates(result);
		};

		var optimizeByLowSurrogates = function(surrogateMappings) {
			if (surrogateMappings.length == 1) {
				return surrogateMappings;
			}
			var index = -1;
			var innerIndex = -1;
			while (++index < surrogateMappings.length) {
				var mapping = surrogateMappings[index];
				var lowSurrogates = mapping[1];
				var lowSurrogateStart = lowSurrogates[0];
				var lowSurrogateEnd = lowSurrogates[1];
				innerIndex = index; // Note: the loop starts at the next index.
				while (++innerIndex < surrogateMappings.length) {
					var otherMapping = surrogateMappings[innerIndex];
					var otherLowSurrogates = otherMapping[1];
					var otherLowSurrogateStart = otherLowSurrogates[0];
					var otherLowSurrogateEnd = otherLowSurrogates[1];
					if (
						lowSurrogateStart == otherLowSurrogateStart &&
						lowSurrogateEnd == otherLowSurrogateEnd
					) {
						// Add the code points in the other item to this one.
						if (dataIsSingleton(otherMapping[0])) {
							mapping[0] = dataAdd(mapping[0], otherMapping[0][0]);
						} else {
							mapping[0] = dataAddRange(
								mapping[0],
								otherMapping[0][0],
								otherMapping[0][1] - 1
							);
						}
						// Remove the other, now redundant, item.
						surrogateMappings.splice(innerIndex, 1);
						--innerIndex;
					}
				}
			}
			return surrogateMappings;
		};

		var surrogateSet = function(data) {
			// Exit early if `data` is an empty set.
			if (!data.length) {
				return [];
			}

			// Iterate over the data per `(start, end)` pair.
			var index = 0;
			var start;
			var end;
			var startHigh;
			var startLow;
			var prevStartHigh = 0;
			var prevEndHigh = 0;
			var tmpLow = [];
			var endHigh;
			var endLow;
			var surrogateMappings = [];
			var length = data.length;
			var dataHigh = [];
			while (index < length) {
				start = data[index];
				end = data[index + 1] - 1;

				startHigh = highSurrogate(start);
				startLow = lowSurrogate(start);
				endHigh = highSurrogate(end);
				endLow = lowSurrogate(end);

				var startsWithLowestLowSurrogate = startLow == LOW_SURROGATE_MIN;
				var endsWithHighestLowSurrogate = endLow == LOW_SURROGATE_MAX;
				var complete = false;

				// Append the previous high-surrogate-to-low-surrogate mappings.
				// Step 1: `(startHigh, startLow)` to `(startHigh, LOW_SURROGATE_MAX)`.
				if (
					startHigh == endHigh ||
					startsWithLowestLowSurrogate && endsWithHighestLowSurrogate
				) {
					surrogateMappings.push([
						[startHigh, endHigh + 1],
						[startLow, endLow + 1]
					]);
					complete = true;
				} else {
					surrogateMappings.push([
						[startHigh, startHigh + 1],
						[startLow, LOW_SURROGATE_MAX + 1]
					]);
				}

				// Step 2: `(startHigh + 1, LOW_SURROGATE_MIN)` to
				// `(endHigh - 1, LOW_SURROGATE_MAX)`.
				if (!complete && startHigh + 1 < endHigh) {
					if (endsWithHighestLowSurrogate) {
						// Combine step 2 and step 3.
						surrogateMappings.push([
							[startHigh + 1, endHigh + 1],
							[LOW_SURROGATE_MIN, endLow + 1]
						]);
						complete = true;
					} else {
						surrogateMappings.push([
							[startHigh + 1, endHigh],
							[LOW_SURROGATE_MIN, LOW_SURROGATE_MAX + 1]
						]);
					}
				}

				// Step 3. `(endHigh, LOW_SURROGATE_MIN)` to `(endHigh, endLow)`.
				if (!complete) {
					surrogateMappings.push([
						[endHigh, endHigh + 1],
						[LOW_SURROGATE_MIN, endLow + 1]
					]);
				}

				prevStartHigh = startHigh;
				prevEndHigh = endHigh;

				index += 2;
			}

			// The format of `surrogateMappings` is as follows:
			//
			//     [ surrogateMapping1, surrogateMapping2 ]
			//
			// i.e.:
			//
			//     [
			//       [ highSurrogates1, lowSurrogates1 ],
			//       [ highSurrogates2, lowSurrogates2 ]
			//     ]
			return optimizeSurrogateMappings(surrogateMappings);
		};

		var createSurrogateCharacterClasses = function(surrogateMappings) {
			var result = [];
			forEach(surrogateMappings, function(surrogateMapping) {
				var highSurrogates = surrogateMapping[0];
				var lowSurrogates = surrogateMapping[1];
				result.push(
					createBMPCharacterClasses(highSurrogates) +
					createBMPCharacterClasses(lowSurrogates)
				);
			});
			return result.join('|');
		};

		var createCharacterClassesFromData = function(data, bmpOnly) {
			var result = [];

			var parts = splitAtBMP(data);
			var loneHighSurrogates = parts.loneHighSurrogates;
			var loneLowSurrogates = parts.loneLowSurrogates;
			var bmp = parts.bmp;
			var astral = parts.astral;
			var hasAstral = !dataIsEmpty(parts.astral);
			var hasLoneHighSurrogates = !dataIsEmpty(loneHighSurrogates);
			var hasLoneLowSurrogates = !dataIsEmpty(loneLowSurrogates);

			var surrogateMappings = surrogateSet(astral);

			if (bmpOnly) {
				bmp = dataAddData(bmp, loneHighSurrogates);
				hasLoneHighSurrogates = false;
				bmp = dataAddData(bmp, loneLowSurrogates);
				hasLoneLowSurrogates = false;
			}

			if (!dataIsEmpty(bmp)) {
				// The data set contains BMP code points that are not high surrogates
				// needed for astral code points in the set.
				result.push(createBMPCharacterClasses(bmp));
			}
			if (surrogateMappings.length) {
				// The data set contains astral code points; append character classes
				// based on their surrogate pairs.
				result.push(createSurrogateCharacterClasses(surrogateMappings));
			}
			// https://gist.github.com/mathiasbynens/bbe7f870208abcfec860
			if (hasLoneHighSurrogates) {
				result.push(
					createBMPCharacterClasses(loneHighSurrogates) +
					// Make sure the high surrogates aren’t part of a surrogate pair.
					'(?![\\uDC00-\\uDFFF])'
				);
			}
			if (hasLoneLowSurrogates) {
				result.push(
					// Make sure the low surrogates aren’t part of a surrogate pair.
					'(?:[^\\uD800-\\uDBFF]|^)' +
					createBMPCharacterClasses(loneLowSurrogates)
				);
			}
			return result.join('|');
		};

		/*--------------------------------------------------------------------------*/

		// `regenerate` can be used as a constructor (and new methods can be added to
		// its prototype) but also as a regular function, the latter of which is the
		// documented and most common usage. For that reason, it’s not capitalized.
		var regenerate = function(value) {
			if (arguments.length > 1) {
				value = slice.call(arguments);
			}
			if (this instanceof regenerate) {
				this.data = [];
				return value ? this.add(value) : this;
			}
			return (new regenerate).add(value);
		};

		regenerate.version = '1.2.0';

		var proto = regenerate.prototype;
		extend(proto, {
			'add': function(value) {
				var $this = this;
				if (value == null) {
					return $this;
				}
				if (value instanceof regenerate) {
					// Allow passing other Regenerate instances.
					$this.data = dataAddData($this.data, value.data);
					return $this;
				}
				if (arguments.length > 1) {
					value = slice.call(arguments);
				}
				if (isArray(value)) {
					forEach(value, function(item) {
						$this.add(item);
					});
					return $this;
				}
				$this.data = dataAdd(
					$this.data,
					isNumber(value) ? value : symbolToCodePoint(value)
				);
				return $this;
			},
			'remove': function(value) {
				var $this = this;
				if (value == null) {
					return $this;
				}
				if (value instanceof regenerate) {
					// Allow passing other Regenerate instances.
					$this.data = dataRemoveData($this.data, value.data);
					return $this;
				}
				if (arguments.length > 1) {
					value = slice.call(arguments);
				}
				if (isArray(value)) {
					forEach(value, function(item) {
						$this.remove(item);
					});
					return $this;
				}
				$this.data = dataRemove(
					$this.data,
					isNumber(value) ? value : symbolToCodePoint(value)
				);
				return $this;
			},
			'addRange': function(start, end) {
				var $this = this;
				$this.data = dataAddRange($this.data,
					isNumber(start) ? start : symbolToCodePoint(start),
					isNumber(end) ? end : symbolToCodePoint(end)
				);
				return $this;
			},
			'removeRange': function(start, end) {
				var $this = this;
				var startCodePoint = isNumber(start) ? start : symbolToCodePoint(start);
				var endCodePoint = isNumber(end) ? end : symbolToCodePoint(end);
				$this.data = dataRemoveRange(
					$this.data,
					startCodePoint,
					endCodePoint
				);
				return $this;
			},
			'intersection': function(argument) {
				var $this = this;
				// Allow passing other Regenerate instances.
				// TODO: Optimize this by writing and using `dataIntersectionData()`.
				var array = argument instanceof regenerate ?
					dataToArray(argument.data) :
					argument;
				$this.data = dataIntersection($this.data, array);
				return $this;
			},
			'contains': function(codePoint) {
				return dataContains(
					this.data,
					isNumber(codePoint) ? codePoint : symbolToCodePoint(codePoint)
				);
			},
			'clone': function() {
				var set = new regenerate;
				set.data = this.data.slice(0);
				return set;
			},
			'toString': function(options) {
				var result = createCharacterClassesFromData(
					this.data,
					options ? options.bmpOnly : false
				);
				// Use `\0` instead of `\x00` where possible.
				return result.replace(regexNull, '\\0$1');
			},
			'toRegExp': function(flags) {
				return RegExp(this.toString(), flags || '');
			},
			'valueOf': function() { // Note: `valueOf` is aliased as `toArray`.
				return dataToArray(this.data);
			}
		});

		proto.toArray = proto.valueOf;

		// Some AMD build optimizers, like r.js, check for specific condition patterns
		// like the following:
		if (
			true
		) {
			!(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
				return regenerate;
			}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
		}	else if (freeExports && !freeExports.nodeType) {
			if (freeModule) { // in Node.js, io.js, or RingoJS v0.8.0+
				freeModule.exports = regenerate;
			} else { // in Narwhal or RingoJS v0.7.0-
				freeExports.regenerate = regenerate;
			}
		} else { // in Rhino or a web browser
			root.regenerate = regenerate;
		}

	}(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(55)(module), (function() { return this; }())))

/***/ },
/* 2402 */
[7924, 42, 3, 658, 236, 903, 904, 516, 6568],
/* 2403 */
[7875, 42],
/* 2404 */
1571,
/* 2405 */
[7888, 17, 28],
/* 2406 */
[7892, 42],
/* 2407 */
1550,
/* 2408 */
[7924, 42, 3, 660, 238, 905, 906, 517, 6614],
/* 2409 */
[7813, 6620],
/* 2410 */
[7910, 242, 17, 28],
/* 2411 */
[7875, 42],
/* 2412 */
1571,
/* 2413 */
[7888, 17, 28],
/* 2414 */
[7892, 42],
/* 2415 */
[7924, 42, 3, 662, 240, 907, 908, 518, 6675],
/* 2416 */
[7813, 6681],
/* 2417 */
1550,
/* 2418 */
[7811, 6683, 2417, 6684],
/* 2419 */
1578,
/* 2420 */
[7931, 6688],
/* 2421 */
1579,
/* 2422 */
981,
/* 2423 */
[7936, 6695, 520],
/* 2424 */
[7938, 6690, 2422, 2423, 2426, 6720, 6721, 6722, 241, 163],
/* 2425 */
[7940, 6711],
/* 2426 */
[7942, 2425, 520],
/* 2427 */
[7944, 6719],
/* 2428 */
[7945, 6698, 163, 359],
/* 2429 */
1590,
/* 2430 */
1591,
/* 2431 */
[7970, 163],
/* 2432 */
[7983, 359],
/* 2433 */
[7986, 1423, 6692, 6713],
/* 2434 */
[7987, 1417, 2430, 912, 241, 910, 1420, 358, 2419, 1421],
/* 2435 */
[7989, 912, 241, 910, 358, 163],
/* 2436 */
1601,
/* 2437 */
[7822, 6749],
/* 2438 */
[7842, 6754],
/* 2439 */
[7843, 1430],
/* 2440 */
[7846, 665, 138],
/* 2441 */
701,
/* 2442 */
[7851, 2443, 664, 2444, 1432, 1431, 915, 6760, 1435, 138, 521],
/* 2443 */
1560,
/* 2444 */
[7854, 1432],
/* 2445 */
[7857, 914],
/* 2446 */
975,
/* 2447 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(38)["default"];

	exports.__esModule = true;

	var _babelHelperBuilderBinaryAssignmentOperatorVisitor = __webpack_require__(6779);

	var _babelHelperBuilderBinaryAssignmentOperatorVisitor2 = _interopRequireDefault(_babelHelperBuilderBinaryAssignmentOperatorVisitor);

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    inherits: __webpack_require__(1617),

	    visitor: _babelHelperBuilderBinaryAssignmentOperatorVisitor2["default"]({
	      operator: "**",

	      build: function build(left, right) {
	        return t.callExpression(t.memberExpression(t.identifier("Math"), t.identifier("pow")), [left, right]);
	      }
	    })
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2448 */
[7910, 668, 70, 81],
/* 2449 */
[7875, 117],
/* 2450 */
1571,
/* 2451 */
[7888, 70, 81],
/* 2452 */
[7892, 117],
/* 2453 */
[7924, 117, 38, 667, 244, 916, 917, 522, 6834],
/* 2454 */
[7813, 6840],
/* 2455 */
1550,
/* 2456 */
[7811, 6842, 2455, 6843],
/* 2457 */
1579,
/* 2458 */
981,
/* 2459 */
[7936, 6856, 523],
/* 2460 */
[7940, 6873],
/* 2461 */
[7942, 2460, 523],
/* 2462 */
[7943, 363],
/* 2463 */
[7944, 6881],
/* 2464 */
[7945, 6859, 164, 362],
/* 2465 */
1590,
/* 2466 */
[7969, 280, 363],
/* 2467 */
[7970, 164],
/* 2468 */
[7973, 6865, 280],
/* 2469 */
[7974, 6855, 918, 920],
/* 2470 */
[7983, 362],
/* 2471 */
[7985, 6853, 2459, 6871],
/* 2472 */
[7989, 1444, 280, 1443, 420, 164],
/* 2473 */
1601,
/* 2474 */
[7823, 6916],
/* 2475 */
732,
/* 2476 */
[7842, 6920],
/* 2477 */
[7843, 1448],
/* 2478 */
[7846, 670, 139],
/* 2479 */
701,
/* 2480 */
[7851, 2481, 669, 2482, 1450, 1449, 922, 6926, 1453, 139, 524],
/* 2481 */
1560,
/* 2482 */
[7854, 1450],
/* 2483 */
[7857, 921],
/* 2484 */
975,
/* 2485 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  function build(node, nodes, scope) {
	    var first = node.specifiers[0];
	    if (!t.isExportNamespaceSpecifier(first) && !t.isExportDefaultSpecifier(first)) return;

	    var specifier = node.specifiers.shift();
	    var uid = scope.generateUidIdentifier(specifier.exported.name);

	    var newSpecifier = undefined;
	    if (t.isExportNamespaceSpecifier(specifier)) {
	      newSpecifier = t.importNamespaceSpecifier(uid);
	    } else {
	      newSpecifier = t.importDefaultSpecifier(uid);
	    }

	    nodes.push(t.importDeclaration([newSpecifier], node.source));
	    nodes.push(t.exportNamedDeclaration(null, [t.exportSpecifier(uid, specifier.exported)]));

	    build(node, nodes, scope);
	  }

	  return {
	    inherits: __webpack_require__(1618),

	    visitor: {
	      ExportNamedDeclaration: function ExportNamedDeclaration(path) {
	        var node = path.node;
	        var scope = path.scope;

	        var nodes = [];
	        build(node, nodes, scope);
	        if (!nodes.length) return;

	        if (node.specifiers.length >= 1) {
	          nodes.push(node);
	        }
	        path.replaceWithMultiple(nodes);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2486 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(6944)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  var FLOW_DIRECTIVE = "@flow";

	  return {
	    inherits: __webpack_require__(996),

	    visitor: {
	      Program: function Program(path, _ref3) {
	        var comments = _ref3.file.ast.comments;

	        for (var _iterator = (comments /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var comment = _ref;

	          if (comment.value.indexOf(FLOW_DIRECTIVE) >= 0) {
	            // remove flow directive
	            comment.value = comment.value.replace(FLOW_DIRECTIVE, "");

	            // remove the comment completely if it only consists of whitespace and/or stars
	            if (!comment.value.replace(/\*/g, "").trim()) comment.ignore = true;
	          }
	        }
	      },

	      Flow: function Flow(path) {
	        path.remove();
	      },

	      ClassProperty: function ClassProperty(path) {
	        path.node.typeAnnotation = null;
	        if (!path.node.value) path.remove();
	      },

	      Class: function Class(_ref4) {
	        var node = _ref4.node;

	        node["implements"] = null;
	      },

	      Function: function Function(_ref5) {
	        var node = _ref5.node;

	        for (var i = 0; i < node.params.length; i++) {
	          var param = node.params[i];
	          param.optional = false;
	        }
	      },

	      TypeCastExpression: function TypeCastExpression(path) {
	        var node = path.node;

	        do {
	          node = node.expression;
	        } while (t.isTypeCastExpression(node));
	        path.replaceWith(node);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2487 */
969,
/* 2488 */
699,
/* 2489 */
700,
/* 2490 */
[7851, 6958, 6952, 6959, 1457, 2489, 923, 6956, 2492, 924, 671],
/* 2491 */
973,
/* 2492 */
[7856, 924, 2489, 671],
/* 2493 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  function getTempId(scope) {
	    var id = scope.path.getData("functionBind");
	    if (id) return id;

	    id = scope.generateDeclaredUidIdentifier("context");
	    return scope.path.setData("functionBind", id);
	  }

	  function getStaticContext(bind, scope) {
	    var object = bind.object || bind.callee.object;
	    return scope.isStatic(object) && object;
	  }

	  function inferBindContext(bind, scope) {
	    var staticContext = getStaticContext(bind, scope);
	    if (staticContext) return staticContext;

	    var tempId = getTempId(scope);
	    if (bind.object) {
	      bind.callee = t.sequenceExpression([t.assignmentExpression("=", tempId, bind.object), bind.callee]);
	    } else {
	      bind.callee.object = t.assignmentExpression("=", tempId, bind.callee.object);
	    }
	    return tempId;
	  }

	  return {
	    inherits: __webpack_require__(1619),

	    visitor: {
	      CallExpression: function CallExpression(_ref2) {
	        var node = _ref2.node;
	        var scope = _ref2.scope;

	        var bind = node.callee;
	        if (!t.isBindExpression(bind)) return;

	        var context = inferBindContext(bind, scope);
	        node.callee = t.memberExpression(bind.callee, t.identifier("call"));
	        node.arguments.unshift(context);
	      },

	      BindExpression: function BindExpression(path) {
	        var node = path.node;
	        var scope = path.scope;

	        var context = inferBindContext(node, scope);
	        path.replaceWith(t.callExpression(t.memberExpression(node.callee, t.identifier("bind")), [context]));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2494 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(6977)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref3) {
	  var t = _ref3.types;

	  function hasSpread(node) {
	    for (var _iterator = (node.properties /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var prop = _ref;

	      if (t.isSpreadProperty(prop)) {
	        return true;
	      }
	    }
	    return false;
	  }

	  return {
	    inherits: __webpack_require__(1620),

	    visitor: {
	      ObjectExpression: function ObjectExpression(path, file) {
	        if (!hasSpread(path.node)) return;

	        var args = [];
	        var props = [];

	        function push() {
	          if (!props.length) return;
	          args.push(t.objectExpression(props));
	          props = [];
	        }

	        for (var _iterator2 = (path.node.properties /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	          var _ref2;

	          if (_isArray2) {
	            if (_i2 >= _iterator2.length) break;
	            _ref2 = _iterator2[_i2++];
	          } else {
	            _i2 = _iterator2.next();
	            if (_i2.done) break;
	            _ref2 = _i2.value;
	          }

	          var prop = _ref2;

	          if (t.isSpreadProperty(prop)) {
	            push();
	            args.push(prop.argument);
	          } else {
	            props.push(prop);
	          }
	        }

	        push();

	        if (!t.isObjectExpression(args[0])) {
	          args.unshift(t.objectExpression([]));
	        }

	        path.replaceWith(t.callExpression(file.addHelper("extends"), args));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2495 */
969,
/* 2496 */
699,
/* 2497 */
700,
/* 2498 */
[7851, 6991, 6985, 6992, 1460, 2497, 925, 6989, 2500, 926, 672],
/* 2499 */
973,
/* 2500 */
[7856, 926, 2497, 672],
/* 2501 */
969,
/* 2502 */
699,
/* 2503 */
700,
/* 2504 */
[7851, 7021, 7015, 7022, 1463, 2503, 927, 7019, 2506, 928, 673],
/* 2505 */
973,
/* 2506 */
[7856, 928, 2503, 673],
/* 2507 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(7037)["default"];

	exports.__esModule = true;

	var _path = __webpack_require__(289);

	var _path2 = _interopRequireDefault(_path);

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  function addDisplayName(id, call) {
	    var props = call.arguments[0].properties;
	    var safe = true;

	    for (var i = 0; i < props.length; i++) {
	      var prop = props[i];
	      var key = t.toComputedKey(prop);
	      if (t.isLiteral(key, { value: "displayName" })) {
	        safe = false;
	        break;
	      }
	    }

	    if (safe) {
	      props.unshift(t.objectProperty(t.identifier("displayName"), t.stringLiteral(id)));
	    }
	  }

	  var isCreateClassCallExpression = t.buildMatchMemberExpression("React.createClass");

	  function isCreateClass(node) {
	    if (!node || !t.isCallExpression(node)) return false;

	    // not React.createClass call member object
	    if (!isCreateClassCallExpression(node.callee)) return false;

	    // no call arguments
	    var args = node.arguments;
	    if (args.length !== 1) return false;

	    // first node arg is not an object
	    var first = args[0];
	    if (!t.isObjectExpression(first)) return false;

	    return true;
	  }

	  return {
	    visitor: {
	      ExportDefaultDeclaration: function ExportDefaultDeclaration(_ref2, state) {
	        var node = _ref2.node;

	        if (isCreateClass(node.declaration)) {
	          var displayName = state.file.opts.basename;

	          // ./{module name}/index.js
	          if (displayName === "index") {
	            displayName = _path2["default"].basename(_path2["default"].dirname(state.file.opts.filename));
	          }

	          addDisplayName(displayName, node.declaration);
	        }
	      },

	      "AssignmentExpression|ObjectProperty|VariableDeclarator": function AssignmentExpressionObjectPropertyVariableDeclarator(_ref3) {
	        var node = _ref3.node;

	        var left = undefined,
	            right = undefined;

	        if (t.isAssignmentExpression(node)) {
	          left = node.left;
	          right = node.right;
	        } else if (t.isObjectProperty(node)) {
	          left = node.key;
	          right = node.value;
	        } else if (t.isVariableDeclarator(node)) {
	          left = node.id;
	          right = node.init;
	        }

	        if (t.isMemberExpression(left)) {
	          left = left.property;
	        }

	        if (t.isIdentifier(left) && isCreateClass(right)) {
	          addDisplayName(left.name, right);
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2508 */
969,
/* 2509 */
699,
/* 2510 */
700,
/* 2511 */
[7851, 7053, 7047, 7054, 1466, 2510, 929, 7051, 2513, 930, 674],
/* 2512 */
973,
/* 2513 */
[7856, 930, 2510, 674],
/* 2514 */
[7910, 677, 76, 91],
/* 2515 */
[7875, 118],
/* 2516 */
1571,
/* 2517 */
[7888, 76, 91],
/* 2518 */
[7892, 118],
/* 2519 */
[7924, 118, 43, 676, 246, 931, 932, 525, 7120],
/* 2520 */
[7813, 7126],
/* 2521 */
1550,
/* 2522 */
1579,
/* 2523 */
981,
/* 2524 */
[7936, 7143, 526],
/* 2525 */
[7940, 7160],
/* 2526 */
[7942, 2525, 526],
/* 2527 */
[7943, 366],
/* 2528 */
[7944, 7168],
/* 2529 */
[7945, 7146, 165, 365],
/* 2530 */
1590,
/* 2531 */
[7969, 282, 366],
/* 2532 */
[7970, 165],
/* 2533 */
[7973, 7152, 282],
/* 2534 */
[7974, 7142, 933, 935],
/* 2535 */
[7983, 365],
/* 2536 */
[7985, 7140, 2524, 7158],
/* 2537 */
[7989, 1475, 282, 1474, 422, 165],
/* 2538 */
1601,
/* 2539 */
[7823, 7202],
/* 2540 */
732,
/* 2541 */
[7842, 7206],
/* 2542 */
[7843, 1479],
/* 2543 */
[7846, 679, 140],
/* 2544 */
701,
/* 2545 */
[7851, 2546, 678, 2547, 1481, 1480, 937, 7212, 1484, 140, 527],
/* 2546 */
1560,
/* 2547 */
[7854, 1481],
/* 2548 */
[7857, 936],
/* 2549 */
975,
/* 2550 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(93)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  var JSX_ANNOTATION_REGEX = /\*?\s*@jsx\s+([^\s]+)/;

	  var visitor = __webpack_require__(7232)({
	    pre: function pre(state) {
	      var tagName = state.tagName;
	      var args = state.args;
	      if (t.react.isCompatTag(tagName)) {
	        args.push(t.stringLiteral(tagName));
	      } else {
	        args.push(state.tagExpr);
	      }
	    },

	    post: function post(state, pass) {
	      state.callee = pass.get("jsxIdentifier");
	    }
	  });

	  visitor.Program = function (path, state) {
	    var file = state.file;

	    var id = state.opts.pragma || "React.createElement";

	    for (var _iterator = (file.ast.comments /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var comment = _ref;

	      var matches = JSX_ANNOTATION_REGEX.exec(comment.value);
	      if (matches) {
	        id = matches[1];
	        if (id === "React.DOM") {
	          throw file.buildCodeFrameError(comment, "The @jsx React.DOM pragma has been deprecated as of React 0.12");
	        } else {
	          break;
	        }
	      }
	    }

	    state.set("jsxIdentifier", id.split(".").map(function (name) {
	      return t.identifier(name);
	    }).reduce(function (object, property) {
	      return t.memberExpression(object, property);
	    }));
	  };

	  return {
	    inherits: __webpack_require__(997),
	    visitor: visitor
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2551 */
[7910, 682, 77, 92],
/* 2552 */
[7875, 119],
/* 2553 */
1571,
/* 2554 */
[7888, 77, 92],
/* 2555 */
[7892, 119],
/* 2556 */
[7924, 119, 44, 681, 248, 938, 939, 528, 7286],
/* 2557 */
[7813, 7292],
/* 2558 */
1550,
/* 2559 */
1579,
/* 2560 */
981,
/* 2561 */
[7936, 7309, 529],
/* 2562 */
[7940, 7326],
/* 2563 */
[7942, 2562, 529],
/* 2564 */
[7943, 369],
/* 2565 */
[7944, 7334],
/* 2566 */
[7945, 7312, 166, 368],
/* 2567 */
1590,
/* 2568 */
[7969, 284, 369],
/* 2569 */
[7970, 166],
/* 2570 */
[7973, 7318, 284],
/* 2571 */
[7974, 7308, 940, 942],
/* 2572 */
[7983, 368],
/* 2573 */
[7985, 7306, 2561, 7324],
/* 2574 */
[7989, 1494, 284, 1493, 424, 166],
/* 2575 */
1601,
/* 2576 */
[7823, 7368],
/* 2577 */
732,
/* 2578 */
[7842, 7372],
/* 2579 */
[7843, 1498],
/* 2580 */
[7846, 684, 141],
/* 2581 */
701,
/* 2582 */
[7851, 2583, 683, 2584, 1500, 1499, 944, 7378, 1503, 141, 530],
/* 2583 */
1560,
/* 2584 */
[7854, 1500],
/* 2585 */
[7857, 943],
/* 2586 */
975,
/* 2587 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	"use strict";

	var _interopRequireDefault = __webpack_require__(32)["default"];

	var _interopRequireWildcard = __webpack_require__(53)["default"];

	var _assert = __webpack_require__(961);

	var _assert2 = _interopRequireDefault(_assert);

	var _babelTypes = __webpack_require__(57);

	var t = _interopRequireWildcard(_babelTypes);

	var _leap = __webpack_require__(7397);

	var leap = _interopRequireWildcard(_leap);

	var _meta = __webpack_require__(7398);

	var meta = _interopRequireWildcard(_meta);

	var _util = __webpack_require__(2588);

	var util = _interopRequireWildcard(_util);

	var hasOwn = Object.prototype.hasOwnProperty;

	function Emitter(contextId) {
	  _assert2["default"].ok(this instanceof Emitter);
	  t.assertIdentifier(contextId);

	  // Used to generate unique temporary names.
	  this.nextTempId = 0;

	  // In order to make sure the context object does not collide with
	  // anything in the local scope, we might have to rename it, so we
	  // refer to it symbolically instead of just assuming that it will be
	  // called "context".
	  this.contextId = contextId;

	  // An append-only list of Statements that grows each time this.emit is
	  // called.
	  this.listing = [];

	  // A sparse array whose keys correspond to locations in this.listing
	  // that have been marked as branch/jump targets.
	  this.marked = [true];

	  // The last location will be marked when this.getDispatchLoop is
	  // called.
	  this.finalLoc = loc();

	  // A list of all leap.TryEntry statements emitted.
	  this.tryEntries = [];

	  // Each time we evaluate the body of a loop, we tell this.leapManager
	  // to enter a nested loop context that determines the meaning of break
	  // and continue statements therein.
	  this.leapManager = new leap.LeapManager(this);
	}

	var Ep = Emitter.prototype;
	exports.Emitter = Emitter;

	// Offsets into this.listing that could be used as targets for branches or
	// jumps are represented as numeric Literal nodes. This representation has
	// the amazingly convenient benefit of allowing the exact value of the
	// location to be determined at any time, even after generating code that
	// refers to the location.
	function loc() {
	  return t.numericLiteral(-1);
	}

	// Sets the exact value of the given location to the offset of the next
	// Statement emitted.
	Ep.mark = function (loc) {
	  t.assertLiteral(loc);
	  var index = this.listing.length;
	  if (loc.value === -1) {
	    loc.value = index;
	  } else {
	    // Locations can be marked redundantly, but their values cannot change
	    // once set the first time.
	    _assert2["default"].strictEqual(loc.value, index);
	  }
	  this.marked[index] = true;
	  return loc;
	};

	Ep.emit = function (node) {
	  if (t.isExpression(node)) {
	    node = t.expressionStatement(node);
	  }

	  t.assertStatement(node);
	  this.listing.push(node);
	};

	// Shorthand for emitting assignment statements. This will come in handy
	// for assignments to temporary variables.
	Ep.emitAssign = function (lhs, rhs) {
	  this.emit(this.assign(lhs, rhs));
	  return lhs;
	};

	// Shorthand for an assignment statement.
	Ep.assign = function (lhs, rhs) {
	  return t.expressionStatement(t.assignmentExpression("=", lhs, rhs));
	};

	// Convenience function for generating expressions like context.next,
	// context.sent, and context.rval.
	Ep.contextProperty = function (name, computed) {
	  return t.memberExpression(this.contextId, computed ? t.stringLiteral(name) : t.identifier(name), !!computed);
	};

	// Shorthand for setting context.rval and jumping to `context.stop()`.
	Ep.stop = function (rval) {
	  if (rval) {
	    this.setReturnValue(rval);
	  }

	  this.jump(this.finalLoc);
	};

	Ep.setReturnValue = function (valuePath) {
	  t.assertExpression(valuePath.value);

	  this.emitAssign(this.contextProperty("rval"), this.explodeExpression(valuePath));
	};

	Ep.clearPendingException = function (tryLoc, assignee) {
	  t.assertLiteral(tryLoc);

	  var catchCall = t.callExpression(this.contextProperty("catch", true), [tryLoc]);

	  if (assignee) {
	    this.emitAssign(assignee, catchCall);
	  } else {
	    this.emit(catchCall);
	  }
	};

	// Emits code for an unconditional jump to the given location, even if the
	// exact value of the location is not yet known.
	Ep.jump = function (toLoc) {
	  this.emitAssign(this.contextProperty("next"), toLoc);
	  this.emit(t.breakStatement());
	};

	// Conditional jump.
	Ep.jumpIf = function (test, toLoc) {
	  t.assertExpression(test);
	  t.assertLiteral(toLoc);

	  this.emit(t.ifStatement(test, t.blockStatement([this.assign(this.contextProperty("next"), toLoc), t.breakStatement()])));
	};

	// Conditional jump, with the condition negated.
	Ep.jumpIfNot = function (test, toLoc) {
	  t.assertExpression(test);
	  t.assertLiteral(toLoc);

	  var negatedTest = undefined;
	  if (t.isUnaryExpression(test) && test.operator === "!") {
	    // Avoid double negation.
	    negatedTest = test.argument;
	  } else {
	    negatedTest = t.unaryExpression("!", test);
	  }

	  this.emit(t.ifStatement(negatedTest, t.blockStatement([this.assign(this.contextProperty("next"), toLoc), t.breakStatement()])));
	};

	// Returns a unique MemberExpression that can be used to store and
	// retrieve temporary values. Since the object of the member expression is
	// the context object, which is presumed to coexist peacefully with all
	// other local variables, and since we just increment `nextTempId`
	// monotonically, uniqueness is assured.
	Ep.makeTempVar = function () {
	  return this.contextProperty("t" + this.nextTempId++);
	};

	Ep.getContextFunction = function (id) {
	  return t.functionExpression(id || null, /*Anonymous*/
	  [this.contextId], t.blockStatement([this.getDispatchLoop()]), false, // Not a generator anymore!
	  false // Nor an expression.
	  );
	};

	// Turns this.listing into a loop of the form
	//
	//   while (1) switch (context.next) {
	//   case 0:
	//   ...
	//   case n:
	//     return context.stop();
	//   }
	//
	// Each marked location in this.listing will correspond to one generated
	// case statement.
	Ep.getDispatchLoop = function () {
	  var self = this;
	  var cases = [];
	  var current = undefined;

	  // If we encounter a break, continue, or return statement in a switch
	  // case, we can skip the rest of the statements until the next case.
	  var alreadyEnded = false;

	  self.listing.forEach(function (stmt, i) {
	    if (self.marked.hasOwnProperty(i)) {
	      cases.push(t.switchCase(t.numericLiteral(i), current = []));
	      alreadyEnded = false;
	    }

	    if (!alreadyEnded) {
	      current.push(stmt);
	      if (t.isCompletionStatement(stmt)) alreadyEnded = true;
	    }
	  });

	  // Now that we know how many statements there will be in this.listing,
	  // we can finally resolve this.finalLoc.value.
	  this.finalLoc.value = this.listing.length;

	  cases.push(t.switchCase(this.finalLoc, [
	    // Intentionally fall through to the "end" case...
	  ]),

	  // So that the runtime can jump to the final location without having
	  // to know its offset, we provide the "end" case as a synonym.
	  t.switchCase(t.stringLiteral("end"), [
	  // This will check/clear both context.thrown and context.rval.
	  t.returnStatement(t.callExpression(this.contextProperty("stop"), []))]));

	  return t.whileStatement(t.numericLiteral(1), t.switchStatement(t.assignmentExpression("=", this.contextProperty("prev"), this.contextProperty("next")), cases));
	};

	Ep.getTryLocsList = function () {
	  if (this.tryEntries.length === 0) {
	    // To avoid adding a needless [] to the majority of runtime.wrap
	    // argument lists, force the caller to handle this case specially.
	    return null;
	  }

	  var lastLocValue = 0;

	  return t.arrayExpression(this.tryEntries.map(function (tryEntry) {
	    var thisLocValue = tryEntry.firstLoc.value;
	    _assert2["default"].ok(thisLocValue >= lastLocValue, "try entries out of order");
	    lastLocValue = thisLocValue;

	    var ce = tryEntry.catchEntry;
	    var fe = tryEntry.finallyEntry;

	    var locs = [tryEntry.firstLoc,
	    // The null here makes a hole in the array.
	    ce ? ce.firstLoc : null];

	    if (fe) {
	      locs[2] = fe.firstLoc;
	      locs[3] = fe.afterLoc;
	    }

	    return t.arrayExpression(locs);
	  }));
	};

	// All side effects must be realized in order.

	// If any subexpression harbors a leap, all subexpressions must be
	// neutered of side effects.

	// No destructive modification of AST nodes.

	Ep.explode = function (path, ignoreResult) {
	  var node = path.node;
	  var self = this;

	  t.assertNode(node);

	  if (t.isDeclaration(node)) throw getDeclError(node);

	  if (t.isStatement(node)) return self.explodeStatement(path);

	  if (t.isExpression(node)) return self.explodeExpression(path, ignoreResult);

	  switch (node.type) {
	    case "Program":
	      return path.get("body").map(self.explodeStatement, self);

	    case "VariableDeclarator":
	      throw getDeclError(node);

	    // These node types should be handled by their parent nodes
	    // (ObjectExpression, SwitchStatement, and TryStatement, respectively).
	    case "Property":
	    case "SwitchCase":
	    case "CatchClause":
	      throw new Error(node.type + " nodes should be handled by their parents");

	    default:
	      throw new Error("unknown Node of type " + JSON.stringify(node.type));
	  }
	};

	function getDeclError(node) {
	  return new Error("all declarations should have been transformed into " + "assignments before the Exploder began its work: " + JSON.stringify(node));
	}

	Ep.explodeStatement = function (path, labelId) {
	  var stmt = path.node;
	  var self = this;
	  var before = undefined,
	      after = undefined,
	      head = undefined;

	  t.assertStatement(stmt);

	  if (labelId) {
	    t.assertIdentifier(labelId);
	  } else {
	    labelId = null;
	  }

	  // Explode BlockStatement nodes even if they do not contain a yield,
	  // because we don't want or need the curly braces.
	  if (t.isBlockStatement(stmt)) {
	    path.get("body").forEach(function (path) {
	      self.explodeStatement(path);
	    });
	    return;
	  }

	  if (!meta.containsLeap(stmt)) {
	    // Technically we should be able to avoid emitting the statement
	    // altogether if !meta.hasSideEffects(stmt), but that leads to
	    // confusing generated code (for instance, `while (true) {}` just
	    // disappears) and is probably a more appropriate job for a dedicated
	    // dead code elimination pass.
	    self.emit(stmt);
	    return;
	  }

	  switch (stmt.type) {
	    case "ExpressionStatement":
	      self.explodeExpression(path.get("expression"), true);
	      break;

	    case "LabeledStatement":
	      after = loc();

	      // Did you know you can break from any labeled block statement or
	      // control structure? Well, you can! Note: when a labeled loop is
	      // encountered, the leap.LabeledEntry created here will immediately
	      // enclose a leap.LoopEntry on the leap manager's stack, and both
	      // entries will have the same label. Though this works just fine, it
	      // may seem a bit redundant. In theory, we could check here to
	      // determine if stmt knows how to handle its own label; for example,
	      // stmt happens to be a WhileStatement and so we know it's going to
	      // establish its own LoopEntry when we explode it (below). Then this
	      // LabeledEntry would be unnecessary. Alternatively, we might be
	      // tempted not to pass stmt.label down into self.explodeStatement,
	      // because we've handled the label here, but that's a mistake because
	      // labeled loops may contain labeled continue statements, which is not
	      // something we can handle in this generic case. All in all, I think a
	      // little redundancy greatly simplifies the logic of this case, since
	      // it's clear that we handle all possible LabeledStatements correctly
	      // here, regardless of whether they interact with the leap manager
	      // themselves. Also remember that labels and break/continue-to-label
	      // statements are rare, and all of this logic happens at transform
	      // time, so it has no additional runtime cost.
	      self.leapManager.withEntry(new leap.LabeledEntry(after, stmt.label), function () {
	        self.explodeStatement(path.get("body"), stmt.label);
	      });

	      self.mark(after);

	      break;

	    case "WhileStatement":
	      before = loc();
	      after = loc();

	      self.mark(before);
	      self.jumpIfNot(self.explodeExpression(path.get("test")), after);
	      self.leapManager.withEntry(new leap.LoopEntry(after, before, labelId), function () {
	        self.explodeStatement(path.get("body"));
	      });
	      self.jump(before);
	      self.mark(after);

	      break;

	    case "DoWhileStatement":
	      var first = loc();
	      var test = loc();
	      after = loc();

	      self.mark(first);
	      self.leapManager.withEntry(new leap.LoopEntry(after, test, labelId), function () {
	        self.explode(path.get("body"));
	      });
	      self.mark(test);
	      self.jumpIf(self.explodeExpression(path.get("test")), first);
	      self.mark(after);

	      break;

	    case "ForStatement":
	      head = loc();
	      var update = loc();
	      after = loc();

	      if (stmt.init) {
	        // We pass true here to indicate that if stmt.init is an expression
	        // then we do not care about its result.
	        self.explode(path.get("init"), true);
	      }

	      self.mark(head);

	      if (stmt.test) {
	        self.jumpIfNot(self.explodeExpression(path.get("test")), after);
	      } else {
	        // No test means continue unconditionally.
	      }

	      self.leapManager.withEntry(new leap.LoopEntry(after, update, labelId), function () {
	        self.explodeStatement(path.get("body"));
	      });

	      self.mark(update);

	      if (stmt.update) {
	        // We pass true here to indicate that if stmt.update is an
	        // expression then we do not care about its result.
	        self.explode(path.get("update"), true);
	      }

	      self.jump(head);

	      self.mark(after);

	      break;

	    case "TypeCastExpression":
	      return self.explodeExpression(path.get("expression"));

	    case "ForInStatement":
	      head = loc();
	      after = loc();

	      var keyIterNextFn = self.makeTempVar();
	      self.emitAssign(keyIterNextFn, t.callExpression(util.runtimeProperty("keys"), [self.explodeExpression(path.get("right"))]));

	      self.mark(head);

	      var keyInfoTmpVar = self.makeTempVar();
	      self.jumpIf(t.memberExpression(t.assignmentExpression("=", keyInfoTmpVar, t.callExpression(keyIterNextFn, [])), t.identifier("done"), false), after);

	      self.emitAssign(stmt.left, t.memberExpression(keyInfoTmpVar, t.identifier("value"), false));

	      self.leapManager.withEntry(new leap.LoopEntry(after, head, labelId), function () {
	        self.explodeStatement(path.get("body"));
	      });

	      self.jump(head);

	      self.mark(after);

	      break;

	    case "BreakStatement":
	      self.emitAbruptCompletion({
	        type: "break",
	        target: self.leapManager.getBreakLoc(stmt.label)
	      });

	      break;

	    case "ContinueStatement":
	      self.emitAbruptCompletion({
	        type: "continue",
	        target: self.leapManager.getContinueLoc(stmt.label)
	      });

	      break;

	    case "SwitchStatement":
	      // Always save the discriminant into a temporary variable in case the
	      // test expressions overwrite values like context.sent.
	      var disc = self.emitAssign(self.makeTempVar(), self.explodeExpression(path.get("discriminant")));

	      after = loc();
	      var defaultLoc = loc();
	      var condition = defaultLoc;
	      var caseLocs = [];

	      // If there are no cases, .cases might be undefined.
	      var cases = stmt.cases || [];

	      for (var i = cases.length - 1; i >= 0; --i) {
	        var c = cases[i];
	        t.assertSwitchCase(c);

	        if (c.test) {
	          condition = t.conditionalExpression(t.binaryExpression("===", disc, c.test), caseLocs[i] = loc(), condition);
	        } else {
	          caseLocs[i] = defaultLoc;
	        }
	      }

	      var discriminant = path.get("discriminant");
	      discriminant.replaceWith(condition);
	      self.jump(self.explodeExpression(discriminant));

	      self.leapManager.withEntry(new leap.SwitchEntry(after), function () {
	        path.get("cases").forEach(function (casePath) {
	          var i = casePath.key;
	          self.mark(caseLocs[i]);

	          casePath.get("consequent").forEach(function (path) {
	            self.explodeStatement(path);
	          });
	        });
	      });

	      self.mark(after);
	      if (defaultLoc.value === -1) {
	        self.mark(defaultLoc);
	        _assert2["default"].strictEqual(after.value, defaultLoc.value);
	      }

	      break;

	    case "IfStatement":
	      var elseLoc = stmt.alternate && loc();
	      after = loc();

	      self.jumpIfNot(self.explodeExpression(path.get("test")), elseLoc || after);

	      self.explodeStatement(path.get("consequent"));

	      if (elseLoc) {
	        self.jump(after);
	        self.mark(elseLoc);
	        self.explodeStatement(path.get("alternate"));
	      }

	      self.mark(after);

	      break;

	    case "ReturnStatement":
	      self.emitAbruptCompletion({
	        type: "return",
	        value: self.explodeExpression(path.get("argument"))
	      });

	      break;

	    case "WithStatement":
	      throw new Error("WithStatement not supported in generator functions.");

	    case "TryStatement":
	      after = loc();

	      var handler = stmt.handler;

	      var catchLoc = handler && loc();
	      var catchEntry = catchLoc && new leap.CatchEntry(catchLoc, handler.param);

	      var finallyLoc = stmt.finalizer && loc();
	      var finallyEntry = finallyLoc && new leap.FinallyEntry(finallyLoc, after);

	      var tryEntry = new leap.TryEntry(self.getUnmarkedCurrentLoc(), catchEntry, finallyEntry);

	      self.tryEntries.push(tryEntry);
	      self.updateContextPrevLoc(tryEntry.firstLoc);

	      self.leapManager.withEntry(tryEntry, function () {
	        self.explodeStatement(path.get("block"));

	        if (catchLoc) {
	          (function () {
	            if (finallyLoc) {
	              // If we have both a catch block and a finally block, then
	              // because we emit the catch block first, we need to jump over
	              // it to the finally block.
	              self.jump(finallyLoc);
	            } else {
	              // If there is no finally block, then we need to jump over the
	              // catch block to the fall-through location.
	              self.jump(after);
	            }

	            self.updateContextPrevLoc(self.mark(catchLoc));

	            var bodyPath = path.get("handler.body");
	            var safeParam = self.makeTempVar();
	            self.clearPendingException(tryEntry.firstLoc, safeParam);

	            bodyPath.traverse(catchParamVisitor, {
	              safeParam: safeParam,
	              catchParamName: handler.param.name
	            });

	            self.leapManager.withEntry(catchEntry, function () {
	              self.explodeStatement(bodyPath);
	            });
	          })();
	        }

	        if (finallyLoc) {
	          self.updateContextPrevLoc(self.mark(finallyLoc));

	          self.leapManager.withEntry(finallyEntry, function () {
	            self.explodeStatement(path.get("finalizer"));
	          });

	          self.emit(t.returnStatement(t.callExpression(self.contextProperty("finish"), [finallyEntry.firstLoc])));
	        }
	      });

	      self.mark(after);

	      break;

	    case "ThrowStatement":
	      self.emit(t.throwStatement(self.explodeExpression(path.get("argument"))));

	      break;

	    default:
	      throw new Error("unknown Statement of type " + JSON.stringify(stmt.type));
	  }
	};

	var catchParamVisitor = {
	  Identifier: function Identifier(path, state) {
	    if (path.node.name === state.catchParamName && util.isReference(path)) {
	      path.replaceWith(state.safeParam);
	    }
	  },

	  Scope: function Scope(path, state) {
	    if (path.scope.hasOwnBinding(state.catchParamName)) {
	      // Don't descend into nested scopes that shadow the catch
	      // parameter with their own declarations.
	      path.skip();
	    }
	  }
	};

	Ep.emitAbruptCompletion = function (record) {
	  if (!isValidCompletion(record)) {
	    _assert2["default"].ok(false, "invalid completion record: " + JSON.stringify(record));
	  }

	  _assert2["default"].notStrictEqual(record.type, "normal", "normal completions are not abrupt");

	  var abruptArgs = [t.stringLiteral(record.type)];

	  if (record.type === "break" || record.type === "continue") {
	    t.assertLiteral(record.target);
	    abruptArgs[1] = record.target;
	  } else if (record.type === "return" || record.type === "throw") {
	    if (record.value) {
	      t.assertExpression(record.value);
	      abruptArgs[1] = record.value;
	    }
	  }

	  this.emit(t.returnStatement(t.callExpression(this.contextProperty("abrupt"), abruptArgs)));
	};

	function isValidCompletion(record) {
	  var type = record.type;

	  if (type === "normal") {
	    return !hasOwn.call(record, "target");
	  }

	  if (type === "break" || type === "continue") {
	    return !hasOwn.call(record, "value") && t.isLiteral(record.target);
	  }

	  if (type === "return" || type === "throw") {
	    return hasOwn.call(record, "value") && !hasOwn.call(record, "target");
	  }

	  return false;
	}

	// Not all offsets into emitter.listing are potential jump targets. For
	// example, execution typically falls into the beginning of a try block
	// without jumping directly there. This method returns the current offset
	// without marking it, so that a switch case will not necessarily be
	// generated for this offset (I say "not necessarily" because the same
	// location might end up being marked in the process of emitting other
	// statements). There's no logical harm in marking such locations as jump
	// targets, but minimizing the number of switch cases keeps the generated
	// code shorter.
	Ep.getUnmarkedCurrentLoc = function () {
	  return t.numericLiteral(this.listing.length);
	};

	// The context.prev property takes the value of context.next whenever we
	// evaluate the switch statement discriminant, which is generally good
	// enough for tracking the last location we jumped to, but sometimes
	// context.prev needs to be more precise, such as when we fall
	// successfully out of a try block and into a finally block without
	// jumping. This method exists to update context.prev to the freshest
	// available location. If we were implementing a full interpreter, we
	// would know the location of the current instruction with complete
	// precision at all times, but we don't have that luxury here, as it would
	// be costly and verbose to set context.prev before every statement.
	Ep.updateContextPrevLoc = function (loc) {
	  if (loc) {
	    t.assertLiteral(loc);

	    if (loc.value === -1) {
	      // If an uninitialized location literal was passed in, set its value
	      // to the current this.listing.length.
	      loc.value = this.listing.length;
	    } else {
	      // Otherwise assert that the location matches the current offset.
	      _assert2["default"].strictEqual(loc.value, this.listing.length);
	    }
	  } else {
	    loc = this.getUnmarkedCurrentLoc();
	  }

	  // Make sure context.prev is up to date in case we fell into this try
	  // statement without jumping to it. TODO Consider avoiding this
	  // assignment when we know control must have jumped here.
	  this.emitAssign(this.contextProperty("prev"), loc);
	};

	Ep.explodeExpression = function (path, ignoreResult) {
	  var expr = path.node;
	  if (expr) {
	    t.assertExpression(expr);
	  } else {
	    return expr;
	  }

	  var self = this;
	  var result = undefined; // Used optionally by several cases below.
	  var after = undefined;

	  function finish(expr) {
	    t.assertExpression(expr);
	    if (ignoreResult) {
	      self.emit(expr);
	    } else {
	      return expr;
	    }
	  }

	  // If the expression does not contain a leap, then we either emit the
	  // expression as a standalone statement or return it whole.
	  if (!meta.containsLeap(expr)) {
	    return finish(expr);
	  }

	  // If any child contains a leap (such as a yield or labeled continue or
	  // break statement), then any sibling subexpressions will almost
	  // certainly have to be exploded in order to maintain the order of their
	  // side effects relative to the leaping child(ren).
	  var hasLeapingChildren = meta.containsLeap.onlyChildren(expr);

	  // In order to save the rest of explodeExpression from a combinatorial
	  // trainwreck of special cases, explodeViaTempVar is responsible for
	  // deciding when a subexpression needs to be "exploded," which is my
	  // very technical term for emitting the subexpression as an assignment
	  // to a temporary variable and the substituting the temporary variable
	  // for the original subexpression. Think of exploded view diagrams, not
	  // Michael Bay movies. The point of exploding subexpressions is to
	  // control the precise order in which the generated code realizes the
	  // side effects of those subexpressions.
	  function explodeViaTempVar(tempVar, childPath, ignoreChildResult) {
	    _assert2["default"].ok(!ignoreChildResult || !tempVar, "Ignoring the result of a child expression but forcing it to " + "be assigned to a temporary variable?");

	    var result = self.explodeExpression(childPath, ignoreChildResult);

	    if (ignoreChildResult) {
	      // Side effects already emitted above.

	    } else if (tempVar || hasLeapingChildren && !t.isLiteral(result)) {
	        // If tempVar was provided, then the result will always be assigned
	        // to it, even if the result does not otherwise need to be assigned
	        // to a temporary variable.  When no tempVar is provided, we have
	        // the flexibility to decide whether a temporary variable is really
	        // necessary.  Unfortunately, in general, a temporary variable is
	        // required whenever any child contains a yield expression, since it
	        // is difficult to prove (at all, let alone efficiently) whether
	        // this result would evaluate to the same value before and after the
	        // yield (see #206).  One narrow case where we can prove it doesn't
	        // matter (and thus we do not need a temporary variable) is when the
	        // result in question is a Literal value.
	        result = self.emitAssign(tempVar || self.makeTempVar(), result);
	      }
	    return result;
	  }

	  // If ignoreResult is true, then we must take full responsibility for
	  // emitting the expression with all its side effects, and we should not
	  // return a result.

	  switch (expr.type) {
	    case "MemberExpression":
	      return finish(t.memberExpression(self.explodeExpression(path.get("object")), expr.computed ? explodeViaTempVar(null, path.get("property")) : expr.property, expr.computed));

	    case "CallExpression":
	      var calleePath = path.get("callee");
	      var argsPath = path.get("arguments");

	      var newCallee = undefined;
	      var newArgs = [];

	      var hasLeapingArgs = false;
	      argsPath.forEach(function (argPath) {
	        hasLeapingArgs = hasLeapingArgs || meta.containsLeap(argPath.node);
	      });

	      if (t.isMemberExpression(calleePath.node)) {
	        if (hasLeapingArgs) {
	          // If the arguments of the CallExpression contained any yield
	          // expressions, then we need to be sure to evaluate the callee
	          // before evaluating the arguments, but if the callee was a member
	          // expression, then we must be careful that the object of the
	          // member expression still gets bound to `this` for the call.

	          var newObject = explodeViaTempVar(
	          // Assign the exploded callee.object expression to a temporary
	          // variable so that we can use it twice without reevaluating it.
	          self.makeTempVar(), calleePath.get("object"));

	          var newProperty = calleePath.node.computed ? explodeViaTempVar(null, calleePath.get("property")) : calleePath.node.property;

	          newArgs.unshift(newObject);

	          newCallee = t.memberExpression(t.memberExpression(newObject, newProperty, calleePath.node.computed), t.identifier("call"), false);
	        } else {
	          newCallee = self.explodeExpression(calleePath);
	        }
	      } else {
	        newCallee = self.explodeExpression(calleePath);

	        if (t.isMemberExpression(newCallee)) {
	          // If the callee was not previously a MemberExpression, then the
	          // CallExpression was "unqualified," meaning its `this` object
	          // should be the global object. If the exploded expression has
	          // become a MemberExpression (e.g. a context property, probably a
	          // temporary variable), then we need to force it to be unqualified
	          // by using the (0, object.property)(...) trick; otherwise, it
	          // will receive the object of the MemberExpression as its `this`
	          // object.
	          newCallee = t.sequenceExpression([t.numbericLiteral(0), newCallee]);
	        }
	      }

	      argsPath.forEach(function (argPath) {
	        newArgs.push(explodeViaTempVar(null, argPath));
	      });

	      return finish(t.callExpression(newCallee, newArgs));

	    case "NewExpression":
	      return finish(t.newExpression(explodeViaTempVar(null, path.get("callee")), path.get("arguments").map(function (argPath) {
	        return explodeViaTempVar(null, argPath);
	      })));

	    case "ObjectExpression":
	      return finish(t.objectExpression(path.get("properties").map(function (propPath) {
	        if (propPath.isObjectProperty()) {
	          return t.objectProperty(propPath.node.key, explodeViaTempVar(null, propPath.get("value")), propPath.node.computed);
	        } else {
	          return propPath.node;
	        }
	      })));

	    case "ArrayExpression":
	      return finish(t.arrayExpression(path.get("elements").map(function (elemPath) {
	        return explodeViaTempVar(null, elemPath);
	      })));

	    case "SequenceExpression":
	      var lastIndex = expr.expressions.length - 1;

	      path.get("expressions").forEach(function (exprPath) {
	        if (exprPath.key === lastIndex) {
	          result = self.explodeExpression(exprPath, ignoreResult);
	        } else {
	          self.explodeExpression(exprPath, true);
	        }
	      });

	      return result;

	    case "LogicalExpression":
	      after = loc();

	      if (!ignoreResult) {
	        result = self.makeTempVar();
	      }

	      var left = explodeViaTempVar(result, path.get("left"));

	      if (expr.operator === "&&") {
	        self.jumpIfNot(left, after);
	      } else {
	        _assert2["default"].strictEqual(expr.operator, "||");
	        self.jumpIf(left, after);
	      }

	      explodeViaTempVar(result, path.get("right"), ignoreResult);

	      self.mark(after);

	      return result;

	    case "ConditionalExpression":
	      var elseLoc = loc();
	      after = loc();
	      var test = self.explodeExpression(path.get("test"));

	      self.jumpIfNot(test, elseLoc);

	      if (!ignoreResult) {
	        result = self.makeTempVar();
	      }

	      explodeViaTempVar(result, path.get("consequent"), ignoreResult);
	      self.jump(after);

	      self.mark(elseLoc);
	      explodeViaTempVar(result, path.get("alternate"), ignoreResult);

	      self.mark(after);

	      return result;

	    case "UnaryExpression":
	      return finish(t.unaryExpression(expr.operator,
	      // Can't (and don't need to) break up the syntax of the argument.
	      // Think about delete a[b].
	      self.explodeExpression(path.get("argument")), !!expr.prefix));

	    case "BinaryExpression":
	      return finish(t.binaryExpression(expr.operator, explodeViaTempVar(null, path.get("left")), explodeViaTempVar(null, path.get("right"))));

	    case "AssignmentExpression":
	      return finish(t.assignmentExpression(expr.operator, self.explodeExpression(path.get("left")), self.explodeExpression(path.get("right"))));

	    case "UpdateExpression":
	      return finish(t.updateExpression(expr.operator, self.explodeExpression(path.get("argument")), expr.prefix));

	    case "YieldExpression":
	      after = loc();
	      var arg = expr.argument && self.explodeExpression(path.get("argument"));

	      if (arg && expr.delegate) {
	        var _result = self.makeTempVar();

	        self.emit(t.returnStatement(t.callExpression(self.contextProperty("delegateYield"), [arg, t.stringLiteral(_result.property.name), after])));

	        self.mark(after);

	        return _result;
	      }

	      self.emitAssign(self.contextProperty("next"), after);
	      self.emit(t.returnStatement(arg || null));
	      self.mark(after);

	      return self.contextProperty("sent");

	    default:
	      throw new Error("unknown Expression of type " + JSON.stringify(expr.type));
	  }
	};

/***/ },
/* 2588 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(53)["default"];

	exports.__esModule = true;
	exports.runtimeProperty = runtimeProperty;
	exports.isReference = isReference;

	var _babelTypes = __webpack_require__(57);

	var t = _interopRequireWildcard(_babelTypes);

	function runtimeProperty(name) {
	  return t.memberExpression(t.identifier("regeneratorRuntime"), t.identifier(name), false);
	}

	function isReference(path) {
	  return path.isReferenced() || path.parentPath.isAssignmentExpression({ left: path.node });
	}

/***/ },
/* 2589 */
732,
/* 2590 */
[7842, 7422],
/* 2591 */
[7843, 1510],
/* 2592 */
[7846, 687, 142],
/* 2593 */
701,
/* 2594 */
[7851, 2595, 686, 2596, 1512, 1511, 946, 7428, 1515, 142, 531],
/* 2595 */
1560,
/* 2596 */
[7854, 1512],
/* 2597 */
[7857, 945],
/* 2598 */
975,
/* 2599 */
[7875, 120],
/* 2600 */
1571,
/* 2601 */
[7888, 53, 57],
/* 2602 */
[7892, 120],
/* 2603 */
1550,
/* 2604 */
1579,
/* 2605 */
[7936, 7489, 949],
/* 2606 */
[7952, 7512],
/* 2607 */
[7963, 7493],
/* 2608 */
[7965, 7507],
/* 2609 */
[7976, 1520, 947],
/* 2610 */
[7985, 7487, 2605, 7496],
/* 2611 */
[7813, 7513],
/* 2612 */
[7910, 685, 53, 57],
/* 2613 */
1550,
/* 2614 */
981,
/* 2615 */
[7940, 7556],
/* 2616 */
[7942, 2615, 951],
/* 2617 */
[7943, 372],
/* 2618 */
[7945, 7544, 167, 371],
/* 2619 */
1590,
/* 2620 */
[7963, 2619],
/* 2621 */
[7968, 1525, 1526, 167],
/* 2622 */
[7969, 373, 372],
/* 2623 */
[7970, 167],
/* 2624 */
[7973, 7550, 373],
/* 2625 */
[7989, 1527, 373, 1526, 533, 167],
/* 2626 */
1601,
/* 2627 */
[7924, 120, 32, 690, 250, 952, 953, 534, 7592],
/* 2628 */
/***/ function(module, exports) {

	"use strict";

	var originalObject = Object;
	var originalDefProp = Object.defineProperty;
	var originalCreate = Object.create;

	function defProp(obj, name, value) {
	  if (originalDefProp) try {
	    originalDefProp.call(originalObject, obj, name, { value: value });
	  } catch (definePropertyIsBrokenInIE8) {
	    obj[name] = value;
	  } else {
	    obj[name] = value;
	  }
	}

	// For functions that will be invoked using .call or .apply, we need to
	// define those methods on the function objects themselves, rather than
	// inheriting them from Function.prototype, so that a malicious or clumsy
	// third party cannot interfere with the functionality of this module by
	// redefining Function.prototype.call or .apply.
	function makeSafeToCall(fun) {
	  if (fun) {
	    defProp(fun, "call", fun.call);
	    defProp(fun, "apply", fun.apply);
	  }
	  return fun;
	}

	makeSafeToCall(originalDefProp);
	makeSafeToCall(originalCreate);

	var hasOwn = makeSafeToCall(Object.prototype.hasOwnProperty);
	var numToStr = makeSafeToCall(Number.prototype.toString);
	var strSlice = makeSafeToCall(String.prototype.slice);

	var cloner = function(){};
	function create(prototype) {
	  if (originalCreate) {
	    return originalCreate.call(originalObject, prototype);
	  }
	  cloner.prototype = prototype || null;
	  return new cloner;
	}

	var rand = Math.random;
	var uniqueKeys = create(null);

	function makeUniqueKey() {
	  // Collisions are highly unlikely, but this module is in the business of
	  // making guarantees rather than safe bets.
	  do var uniqueKey = internString(strSlice.call(numToStr.call(rand(), 36), 2));
	  while (hasOwn.call(uniqueKeys, uniqueKey));
	  return uniqueKeys[uniqueKey] = uniqueKey;
	}

	function internString(str) {
	  var obj = {};
	  obj[str] = true;
	  return Object.keys(obj)[0];
	}

	// External users might find this function useful, but it is not necessary
	// for the typical use of this module.
	defProp(exports, "makeUniqueKey", makeUniqueKey);

	// Object.getOwnPropertyNames is the only way to enumerate non-enumerable
	// properties, so if we wrap it to ignore our secret keys, there should be
	// no way (except guessing) to access those properties.
	var originalGetOPNs = Object.getOwnPropertyNames;
	Object.getOwnPropertyNames = function getOwnPropertyNames(object) {
	  for (var names = originalGetOPNs(object),
	           src = 0,
	           dst = 0,
	           len = names.length;
	       src < len;
	       ++src) {
	    if (!hasOwn.call(uniqueKeys, names[src])) {
	      if (src > dst) {
	        names[dst] = names[src];
	      }
	      ++dst;
	    }
	  }
	  names.length = dst;
	  return names;
	};

	function defaultCreatorFn(object) {
	  return create(null);
	}

	function makeAccessor(secretCreatorFn) {
	  var brand = makeUniqueKey();
	  var passkey = create(null);

	  secretCreatorFn = secretCreatorFn || defaultCreatorFn;

	  function register(object) {
	    var secret; // Created lazily.

	    function vault(key, forget) {
	      // Only code that has access to the passkey can retrieve (or forget)
	      // the secret object.
	      if (key === passkey) {
	        return forget
	          ? secret = null
	          : secret || (secret = secretCreatorFn(object));
	      }
	    }

	    defProp(object, brand, vault);
	  }

	  function accessor(object) {
	    if (!hasOwn.call(object, brand))
	      register(object);
	    return object[brand](passkey);
	  }

	  accessor.forget = function(object) {
	    if (hasOwn.call(object, brand))
	      object[brand](passkey, true);
	  };

	  return accessor;
	}

	defProp(exports, "makeAccessor", makeAccessor);


/***/ },
/* 2629 */
[7823, 7617],
/* 2630 */
732,
/* 2631 */
[7842, 7621],
/* 2632 */
[7843, 1532],
/* 2633 */
[7846, 693, 143],
/* 2634 */
701,
/* 2635 */
[7851, 2636, 692, 2637, 1534, 1533, 955, 7627, 1537, 143, 535],
/* 2636 */
1560,
/* 2637 */
[7854, 1534],
/* 2638 */
[7857, 954],
/* 2639 */
975,
/* 2640 */
[7910, 691, 78, 95],
/* 2641 */
[7875, 121],
/* 2642 */
1571,
/* 2643 */
[7888, 78, 95],
/* 2644 */
[7892, 121],
/* 2645 */
[7924, 121, 48, 695, 252, 956, 957, 536, 7698],
/* 2646 */
[7813, 7704],
/* 2647 */
1550,
/* 2648 */
[7811, 7706, 2647, 7707],
/* 2649 */
1579,
/* 2650 */
981,
/* 2651 */
[7936, 7720, 537],
/* 2652 */
[7940, 7737],
/* 2653 */
[7942, 2652, 537],
/* 2654 */
[7943, 376],
/* 2655 */
[7944, 7745],
/* 2656 */
[7945, 7723, 168, 375],
/* 2657 */
1590,
/* 2658 */
[7969, 288, 376],
/* 2659 */
[7970, 168],
/* 2660 */
[7973, 7729, 288],
/* 2661 */
[7974, 7719, 958, 960],
/* 2662 */
[7983, 375],
/* 2663 */
[7985, 7717, 2651, 7735],
/* 2664 */
[7989, 1546, 288, 1545, 427, 168],
/* 2665 */
1601,
/* 2666 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  presets: [
	    __webpack_require__(2667)
	  ],
	  plugins: [
	    __webpack_require__(1725),
	    __webpack_require__(1764),
	    __webpack_require__(1771),
	    __webpack_require__(2485)
	  ]
	};


/***/ },
/* 2667 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  presets: [
	    __webpack_require__(2668)
	  ],
	  plugins: [
	    __webpack_require__(1621),
	    __webpack_require__(2494)
	  ]
	};


/***/ },
/* 2668 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  plugins: [
	    __webpack_require__(1622),
	    __webpack_require__(2447)
	  ]
	};


/***/ },
/* 2669 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer, global) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	/* eslint-disable no-proto */

	var base64 = __webpack_require__(7800)
	var ieee754 = __webpack_require__(7801)
	var isArray = __webpack_require__(7802)

	exports.Buffer = Buffer
	exports.SlowBuffer = SlowBuffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation

	var rootParent = {}

	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Due to various browser bugs, sometimes the Object implementation will be used even
	 * when the browser supports typed arrays.
	 *
	 * Note:
	 *
	 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
	 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
	 *     on objects.
	 *
	 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *     incorrect length in some situations.

	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
	 * get the Object implementation, which is slower but behaves correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
	  ? global.TYPED_ARRAY_SUPPORT
	  : typedArraySupport()

	function typedArraySupport () {
	  function Bar () {}
	  try {
	    var arr = new Uint8Array(1)
	    arr.foo = function () { return 42 }
	    arr.constructor = Bar
	    return arr.foo() === 42 && // typed array instances can be augmented
	        arr.constructor === Bar && // constructor can be set
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	}

	function kMaxLength () {
	  return Buffer.TYPED_ARRAY_SUPPORT
	    ? 0x7fffffff
	    : 0x3fffffff
	}

	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (arg) {
	  if (!(this instanceof Buffer)) {
	    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
	    if (arguments.length > 1) return new Buffer(arg, arguments[1])
	    return new Buffer(arg)
	  }

	  this.length = 0
	  this.parent = undefined

	  // Common case.
	  if (typeof arg === 'number') {
	    return fromNumber(this, arg)
	  }

	  // Slightly less common case.
	  if (typeof arg === 'string') {
	    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
	  }

	  // Unusual.
	  return fromObject(this, arg)
	}

	function fromNumber (that, length) {
	  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < length; i++) {
	      that[i] = 0
	    }
	  }
	  return that
	}

	function fromString (that, string, encoding) {
	  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

	  // Assumption: byteLength() return value is always < kMaxLength.
	  var length = byteLength(string, encoding) | 0
	  that = allocate(that, length)

	  that.write(string, encoding)
	  return that
	}

	function fromObject (that, object) {
	  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

	  if (isArray(object)) return fromArray(that, object)

	  if (object == null) {
	    throw new TypeError('must start with number, buffer, array or string')
	  }

	  if (typeof ArrayBuffer !== 'undefined') {
	    if (object.buffer instanceof ArrayBuffer) {
	      return fromTypedArray(that, object)
	    }
	    if (object instanceof ArrayBuffer) {
	      return fromArrayBuffer(that, object)
	    }
	  }

	  if (object.length) return fromArrayLike(that, object)

	  return fromJsonObject(that, object)
	}

	function fromBuffer (that, buffer) {
	  var length = checked(buffer.length) | 0
	  that = allocate(that, length)
	  buffer.copy(that, 0, 0, length)
	  return that
	}

	function fromArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Duplicate of fromArray() to keep fromArray() monomorphic.
	function fromTypedArray (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  // Truncating the elements is probably not what people expect from typed
	  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
	  // of the old Buffer constructor.
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	function fromArrayBuffer (that, array) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    array.byteLength
	    that = Buffer._augment(new Uint8Array(array))
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that = fromTypedArray(that, new Uint8Array(array))
	  }
	  return that
	}

	function fromArrayLike (that, array) {
	  var length = checked(array.length) | 0
	  that = allocate(that, length)
	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
	// Returns a zero-length buffer for inputs that don't conform to the spec.
	function fromJsonObject (that, object) {
	  var array
	  var length = 0

	  if (object.type === 'Buffer' && isArray(object.data)) {
	    array = object.data
	    length = checked(array.length) | 0
	  }
	  that = allocate(that, length)

	  for (var i = 0; i < length; i += 1) {
	    that[i] = array[i] & 255
	  }
	  return that
	}

	if (Buffer.TYPED_ARRAY_SUPPORT) {
	  Buffer.prototype.__proto__ = Uint8Array.prototype
	  Buffer.__proto__ = Uint8Array
	}

	function allocate (that, length) {
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Return an augmented `Uint8Array` instance, for best performance
	    that = Buffer._augment(new Uint8Array(length))
	    that.__proto__ = Buffer.prototype
	  } else {
	    // Fallback: Return an object instance of the Buffer class
	    that.length = length
	    that._isBuffer = true
	  }

	  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
	  if (fromPool) that.parent = rootParent

	  return that
	}

	function checked (length) {
	  // Note: cannot use `length < kMaxLength` here because that fails when
	  // length is NaN (which is otherwise coerced to zero.)
	  if (length >= kMaxLength()) {
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
	  }
	  return length | 0
	}

	function SlowBuffer (subject, encoding) {
	  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

	  var buf = new Buffer(subject, encoding)
	  delete buf.parent
	  return buf
	}

	Buffer.isBuffer = function isBuffer (b) {
	  return !!(b != null && b._isBuffer)
	}

	Buffer.compare = function compare (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
	    throw new TypeError('Arguments must be Buffers')
	  }

	  if (a === b) return 0

	  var x = a.length
	  var y = b.length

	  var i = 0
	  var len = Math.min(x, y)
	  while (i < len) {
	    if (a[i] !== b[i]) break

	    ++i
	  }

	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }

	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}

	Buffer.isEncoding = function isEncoding (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}

	Buffer.concat = function concat (list, length) {
	  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

	  if (list.length === 0) {
	    return new Buffer(0)
	  }

	  var i
	  if (length === undefined) {
	    length = 0
	    for (i = 0; i < list.length; i++) {
	      length += list[i].length
	    }
	  }

	  var buf = new Buffer(length)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}

	function byteLength (string, encoding) {
	  if (typeof string !== 'string') string = '' + string

	  var len = string.length
	  if (len === 0) return 0

	  // Use a for loop to avoid recursion
	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'ascii':
	      case 'binary':
	      // Deprecated
	      case 'raw':
	      case 'raws':
	        return len
	      case 'utf8':
	      case 'utf-8':
	        return utf8ToBytes(string).length
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return len * 2
	      case 'hex':
	        return len >>> 1
	      case 'base64':
	        return base64ToBytes(string).length
	      default:
	        if (loweredCase) return utf8ToBytes(string).length // assume utf8
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	Buffer.byteLength = byteLength

	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined

	function slowToString (encoding, start, end) {
	  var loweredCase = false

	  start = start | 0
	  end = end === undefined || end === Infinity ? this.length : end | 0

	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''

	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)

	      case 'ascii':
	        return asciiSlice(this, start, end)

	      case 'binary':
	        return binarySlice(this, start, end)

	      case 'base64':
	        return base64Slice(this, start, end)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toString = function toString () {
	  var length = this.length | 0
	  if (length === 0) return ''
	  if (arguments.length === 0) return utf8Slice(this, 0, length)
	  return slowToString.apply(this, arguments)
	}

	Buffer.prototype.equals = function equals (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return true
	  return Buffer.compare(this, b) === 0
	}

	Buffer.prototype.inspect = function inspect () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max) str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}

	Buffer.prototype.compare = function compare (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  if (this === b) return 0
	  return Buffer.compare(this, b)
	}

	Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
	  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
	  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
	  byteOffset >>= 0

	  if (this.length === 0) return -1
	  if (byteOffset >= this.length) return -1

	  // Negative offsets start from the end of the buffer
	  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

	  if (typeof val === 'string') {
	    if (val.length === 0) return -1 // special case: looking for empty string always fails
	    return String.prototype.indexOf.call(this, val, byteOffset)
	  }
	  if (Buffer.isBuffer(val)) {
	    return arrayIndexOf(this, val, byteOffset)
	  }
	  if (typeof val === 'number') {
	    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
	      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
	    }
	    return arrayIndexOf(this, [ val ], byteOffset)
	  }

	  function arrayIndexOf (arr, val, byteOffset) {
	    var foundIndex = -1
	    for (var i = 0; byteOffset + i < arr.length; i++) {
	      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
	        if (foundIndex === -1) foundIndex = i
	        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
	      } else {
	        foundIndex = -1
	      }
	    }
	    return -1
	  }

	  throw new TypeError('val must be string, number or Buffer')
	}

	// `get` is deprecated
	Buffer.prototype.get = function get (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}

	// `set` is deprecated
	Buffer.prototype.set = function set (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}

	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }

	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var parsed = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(parsed)) throw new Error('Invalid hex string')
	    buf[offset + i] = parsed
	  }
	  return i
	}

	function utf8Write (buf, string, offset, length) {
	  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
	}

	function asciiWrite (buf, string, offset, length) {
	  return blitBuffer(asciiToBytes(string), buf, offset, length)
	}

	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}

	function base64Write (buf, string, offset, length) {
	  return blitBuffer(base64ToBytes(string), buf, offset, length)
	}

	function ucs2Write (buf, string, offset, length) {
	  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
	}

	Buffer.prototype.write = function write (string, offset, length, encoding) {
	  // Buffer#write(string)
	  if (offset === undefined) {
	    encoding = 'utf8'
	    length = this.length
	    offset = 0
	  // Buffer#write(string, encoding)
	  } else if (length === undefined && typeof offset === 'string') {
	    encoding = offset
	    length = this.length
	    offset = 0
	  // Buffer#write(string, offset[, length][, encoding])
	  } else if (isFinite(offset)) {
	    offset = offset | 0
	    if (isFinite(length)) {
	      length = length | 0
	      if (encoding === undefined) encoding = 'utf8'
	    } else {
	      encoding = length
	      length = undefined
	    }
	  // legacy write(string, encoding, offset, length) - remove in v0.13
	  } else {
	    var swap = encoding
	    encoding = offset
	    offset = length | 0
	    length = swap
	  }

	  var remaining = this.length - offset
	  if (length === undefined || length > remaining) length = remaining

	  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
	    throw new RangeError('attempt to write outside buffer bounds')
	  }

	  if (!encoding) encoding = 'utf8'

	  var loweredCase = false
	  for (;;) {
	    switch (encoding) {
	      case 'hex':
	        return hexWrite(this, string, offset, length)

	      case 'utf8':
	      case 'utf-8':
	        return utf8Write(this, string, offset, length)

	      case 'ascii':
	        return asciiWrite(this, string, offset, length)

	      case 'binary':
	        return binaryWrite(this, string, offset, length)

	      case 'base64':
	        // Warning: maxLength not taken into account in base64Write
	        return base64Write(this, string, offset, length)

	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return ucs2Write(this, string, offset, length)

	      default:
	        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = ('' + encoding).toLowerCase()
	        loweredCase = true
	    }
	  }
	}

	Buffer.prototype.toJSON = function toJSON () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}

	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}

	function utf8Slice (buf, start, end) {
	  end = Math.min(buf.length, end)
	  var res = []

	  var i = start
	  while (i < end) {
	    var firstByte = buf[i]
	    var codePoint = null
	    var bytesPerSequence = (firstByte > 0xEF) ? 4
	      : (firstByte > 0xDF) ? 3
	      : (firstByte > 0xBF) ? 2
	      : 1

	    if (i + bytesPerSequence <= end) {
	      var secondByte, thirdByte, fourthByte, tempCodePoint

	      switch (bytesPerSequence) {
	        case 1:
	          if (firstByte < 0x80) {
	            codePoint = firstByte
	          }
	          break
	        case 2:
	          secondByte = buf[i + 1]
	          if ((secondByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
	            if (tempCodePoint > 0x7F) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 3:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
	            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
	              codePoint = tempCodePoint
	            }
	          }
	          break
	        case 4:
	          secondByte = buf[i + 1]
	          thirdByte = buf[i + 2]
	          fourthByte = buf[i + 3]
	          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
	            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
	            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
	              codePoint = tempCodePoint
	            }
	          }
	      }
	    }

	    if (codePoint === null) {
	      // we did not generate a valid codePoint so insert a
	      // replacement char (U+FFFD) and advance only 1 byte
	      codePoint = 0xFFFD
	      bytesPerSequence = 1
	    } else if (codePoint > 0xFFFF) {
	      // encode to utf16 (surrogate pair dance)
	      codePoint -= 0x10000
	      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
	      codePoint = 0xDC00 | codePoint & 0x3FF
	    }

	    res.push(codePoint)
	    i += bytesPerSequence
	  }

	  return decodeCodePointsArray(res)
	}

	// Based on http://stackoverflow.com/a/22747272/680742, the browser with
	// the lowest limit is Chrome, with 0x10000 args.
	// We go 1 magnitude less, for safety
	var MAX_ARGUMENTS_LENGTH = 0x1000

	function decodeCodePointsArray (codePoints) {
	  var len = codePoints.length
	  if (len <= MAX_ARGUMENTS_LENGTH) {
	    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
	  }

	  // Decode in chunks to avoid "call stack size exceeded".
	  var res = ''
	  var i = 0
	  while (i < len) {
	    res += String.fromCharCode.apply(
	      String,
	      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
	    )
	  }
	  return res
	}

	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i] & 0x7F)
	  }
	  return ret
	}

	function binarySlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)

	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}

	function hexSlice (buf, start, end) {
	  var len = buf.length

	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len

	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}

	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}

	Buffer.prototype.slice = function slice (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end

	  if (start < 0) {
	    start += len
	    if (start < 0) start = 0
	  } else if (start > len) {
	    start = len
	  }

	  if (end < 0) {
	    end += len
	    if (end < 0) end = 0
	  } else if (end > len) {
	    end = len
	  }

	  if (end < start) end = start

	  var newBuf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    newBuf = Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    newBuf = new Buffer(sliceLen, undefined)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	  }

	  if (newBuf.length) newBuf.parent = this.parent || this

	  return newBuf
	}

	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
	  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
	}

	Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }

	  return val
	}

	Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) {
	    checkOffset(offset, byteLength, this.length)
	  }

	  var val = this[offset + --byteLength]
	  var mul = 1
	  while (byteLength > 0 && (mul *= 0x100)) {
	    val += this[offset + --byteLength] * mul
	  }

	  return val
	}

	Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  return this[offset]
	}

	Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}

	Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}

	Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}

	Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] * 0x1000000) +
	    ((this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    this[offset + 3])
	}

	Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var val = this[offset]
	  var mul = 1
	  var i = 0
	  while (++i < byteLength && (mul *= 0x100)) {
	    val += this[offset + i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkOffset(offset, byteLength, this.length)

	  var i = byteLength
	  var mul = 1
	  var val = this[offset + --i]
	  while (i > 0 && (mul *= 0x100)) {
	    val += this[offset + --i] * mul
	  }
	  mul *= 0x80

	  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

	  return val
	}

	Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80)) return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}

	Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}

	Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset]) |
	    (this[offset + 1] << 8) |
	    (this[offset + 2] << 16) |
	    (this[offset + 3] << 24)
	}

	Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)

	  return (this[offset] << 24) |
	    (this[offset + 1] << 16) |
	    (this[offset + 2] << 8) |
	    (this[offset + 3])
	}

	Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}

	Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}

	Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}

	Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
	  if (!noAssert) checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}

	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	}

	Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var mul = 1
	  var i = 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  byteLength = byteLength | 0
	  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

	  var i = byteLength - 1
	  var mul = 1
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = (value / mul) & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}

	Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}

	Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = 0
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset] = value & 0xFF
	  while (++i < byteLength && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) {
	    var limit = Math.pow(2, 8 * byteLength - 1)

	    checkInt(this, value, offset, byteLength, limit - 1, -limit)
	  }

	  var i = byteLength - 1
	  var mul = 1
	  var sub = value < 0 ? 1 : 0
	  this[offset + i] = value & 0xFF
	  while (--i >= 0 && (mul *= 0x100)) {
	    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
	  }

	  return offset + byteLength
	}

	Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = (value & 0xff)
	  return offset + 1
	}

	Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	  } else {
	    objectWriteUInt16(this, value, offset, true)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = (value & 0xff)
	  } else {
	    objectWriteUInt16(this, value, offset, false)
	  }
	  return offset + 2
	}

	Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value & 0xff)
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else {
	    objectWriteUInt32(this, value, offset, true)
	  }
	  return offset + 4
	}

	Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
	  value = +value
	  offset = offset | 0
	  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = (value & 0xff)
	  } else {
	    objectWriteUInt32(this, value, offset, false)
	  }
	  return offset + 4
	}

	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new RangeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new RangeError('index out of range')
	  if (offset < 0) throw new RangeError('index out of range')
	}

	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}

	Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}

	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert) {
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  }
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}

	Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}

	Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}

	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function copy (target, targetStart, start, end) {
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (targetStart >= target.length) targetStart = target.length
	  if (!targetStart) targetStart = 0
	  if (end > 0 && end < start) end = start

	  // Copy 0 bytes; we're done
	  if (end === start) return 0
	  if (target.length === 0 || this.length === 0) return 0

	  // Fatal error conditions
	  if (targetStart < 0) {
	    throw new RangeError('targetStart out of bounds')
	  }
	  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
	  if (end < 0) throw new RangeError('sourceEnd out of bounds')

	  // Are we oob?
	  if (end > this.length) end = this.length
	  if (target.length - targetStart < end - start) {
	    end = target.length - targetStart + start
	  }

	  var len = end - start
	  var i

	  if (this === target && start < targetStart && targetStart < end) {
	    // descending copy from end
	    for (i = len - 1; i >= 0; i--) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    // ascending copy from start
	    for (i = 0; i < len; i++) {
	      target[i + targetStart] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), targetStart)
	  }

	  return len
	}

	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function fill (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length

	  if (end < start) throw new RangeError('end < start')

	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return

	  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }

	  return this
	}

	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}

	// HELPER FUNCTIONS
	// ================

	var BP = Buffer.prototype

	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function _augment (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true

	  // save reference to original Uint8Array set method before overwriting
	  arr._set = arr.set

	  // deprecated
	  arr.get = BP.get
	  arr.set = BP.set

	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.indexOf = BP.indexOf
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUIntLE = BP.readUIntLE
	  arr.readUIntBE = BP.readUIntBE
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readIntLE = BP.readIntLE
	  arr.readIntBE = BP.readIntBE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUIntLE = BP.writeUIntLE
	  arr.writeUIntBE = BP.writeUIntBE
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeIntLE = BP.writeIntLE
	  arr.writeIntBE = BP.writeIntBE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer

	  return arr
	}

	var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node converts strings with length < 2 to ''
	  if (str.length < 2) return ''
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}

	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}

	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}

	function utf8ToBytes (string, units) {
	  units = units || Infinity
	  var codePoint
	  var length = string.length
	  var leadSurrogate = null
	  var bytes = []

	  for (var i = 0; i < length; i++) {
	    codePoint = string.charCodeAt(i)

	    // is surrogate component
	    if (codePoint > 0xD7FF && codePoint < 0xE000) {
	      // last char was a lead
	      if (!leadSurrogate) {
	        // no lead yet
	        if (codePoint > 0xDBFF) {
	          // unexpected trail
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        } else if (i + 1 === length) {
	          // unpaired lead
	          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	          continue
	        }

	        // valid lead
	        leadSurrogate = codePoint

	        continue
	      }

	      // 2 leads in a row
	      if (codePoint < 0xDC00) {
	        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	        leadSurrogate = codePoint
	        continue
	      }

	      // valid surrogate pair
	      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
	    } else if (leadSurrogate) {
	      // valid bmp char, but last char was a lead
	      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
	    }

	    leadSurrogate = null

	    // encode utf8
	    if (codePoint < 0x80) {
	      if ((units -= 1) < 0) break
	      bytes.push(codePoint)
	    } else if (codePoint < 0x800) {
	      if ((units -= 2) < 0) break
	      bytes.push(
	        codePoint >> 0x6 | 0xC0,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x10000) {
	      if ((units -= 3) < 0) break
	      bytes.push(
	        codePoint >> 0xC | 0xE0,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else if (codePoint < 0x110000) {
	      if ((units -= 4) < 0) break
	      bytes.push(
	        codePoint >> 0x12 | 0xF0,
	        codePoint >> 0xC & 0x3F | 0x80,
	        codePoint >> 0x6 & 0x3F | 0x80,
	        codePoint & 0x3F | 0x80
	      )
	    } else {
	      throw new Error('Invalid code point')
	    }
	  }

	  return bytes
	}

	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}

	function utf16leToBytes (str, units) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    if ((units -= 2) < 0) break

	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }

	  return byteArray
	}

	function base64ToBytes (str) {
	  return base64.toByteArray(base64clean(str))
	}

	function blitBuffer (src, dst, offset, length) {
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length)) break
	    dst[i + offset] = src[i]
	  }
	  return i
	}

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2669).Buffer, (function() { return this; }())))

/***/ },
/* 2670 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1547);


/***/ },
/* 2671 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _getIterator = __webpack_require__(49)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	exports.__esModule = true;

	var _lodashObjectMerge = __webpack_require__(2874);

	var _lodashObjectMerge2 = _interopRequireDefault(_lodashObjectMerge);

	exports["default"] = function (dest /*:: ?: Object*/, src /*:: ?: Object*/) /*: ?Object*/ {
	  if (!dest || !src) return;

	  return _lodashObjectMerge2["default"](dest, src, function (a, b) {
	    if (b && Array.isArray(a)) {
	      var newArray = b.slice(0);

	      for (var _iterator = a, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var item = _ref;

	        if (newArray.indexOf(item) < 0) {
	          newArray.push(item);
	        }
	      }

	      return newArray;
	    }
	  });
	};

	module.exports = exports["default"];

/***/ },
/* 2672 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	/**
	 * Normalize an AST.
	 *
	 * - Wrap `Program` node with a `File` node.
	 */

	exports["default"] = function (ast /*: Object*/, comments /*:: ?: Array<Object>*/, tokens /*:: ?: Array<Object>*/) {
	  if (ast) {
	    if (ast.type === "Program") {
	      return t.file(ast, comments || [], tokens || []);
	    } else if (ast.type === "File") {
	      return ast;
	    }
	  }

	  throw new Error("Not a valid ast?");
	};

	module.exports = exports["default"];

/***/ },
/* 2673 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	var _interopRequireDefault = __webpack_require__(8)["default"];

	exports.__esModule = true;

	var _module2 = __webpack_require__(428);

	var _module3 = _interopRequireDefault(_module2);

	var relativeModules = {};

	exports["default"] = function (loc /*: string*/) /*: ?string*/ {
	  var relative /*: string*/ = arguments.length <= 1 || arguments[1] === undefined ? process.cwd() : arguments[1];

	  // we're in the browser, probably
	  if (typeof _module3["default"] === "object") return null;

	  var relativeMod = relativeModules[relative];

	  if (!relativeMod) {
	    relativeMod = new _module3["default"]();
	    relativeMod.paths = _module3["default"]._nodeModulePaths(relative);
	    relativeModules[relative] = relativeMod;
	  }

	  try {
	    return _module3["default"]._resolveFilename(loc, relativeMod);
	  } catch (err) {
	    return null;
	  }
	};

	module.exports = exports["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 2674 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	exports.__esModule = true;

	var _babelHelpers = __webpack_require__(1554);

	var helpers = _interopRequireWildcard(_babelHelpers);

	var _babelGenerator = __webpack_require__(1552);

	var _babelGenerator2 = _interopRequireDefault(_babelGenerator);

	var _babelMessages = __webpack_require__(290);

	var messages = _interopRequireWildcard(_babelMessages);

	var _babelTemplate = __webpack_require__(977);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _lodashCollectionEach = __webpack_require__(705);

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	var buildUmdWrapper = _babelTemplate2["default"]("\n  (function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n      define(AMD_ARGUMENTS, factory);\n    } else if (typeof exports === \"object\") {\n      factory(COMMON_ARGUMENTS);\n    } else {\n      factory(BROWSER_ARGUMENTS);\n    }\n  })(UMD_ROOT, function (FACTORY_PARAMETERS) {\n    FACTORY_BODY\n  });\n");

	function buildGlobal(namespace, builder) {
	  var body = [];
	  var container = t.functionExpression(null, [t.identifier("global")], t.blockStatement(body));
	  var tree = t.program([t.expressionStatement(t.callExpression(container, [helpers.get("selfGlobal")]))]);

	  body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.assignmentExpression("=", t.memberExpression(t.identifier("global"), namespace), t.objectExpression([])))]));

	  builder(body);

	  return tree;
	}

	function buildUmd(namespace, builder) {
	  var body = [];
	  body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.identifier("global"))]));

	  builder(body);

	  return t.program([buildUmdWrapper({
	    FACTORY_PARAMETERS: t.identifier("global"),
	    BROWSER_ARGUMENTS: t.assignmentExpression("=", t.memberExpression(t.identifier("root"), namespace), t.objectExpression([])),
	    COMMON_ARGUMENTS: t.identifier("exports"),
	    AMD_ARGUMENTS: t.arrayExpression([t.stringLiteral("exports")]),
	    FACTORY_BODY: body,
	    UMD_ROOT: t.identifier("this")
	  })]);
	}

	function buildVar(namespace, builder) {
	  var body = [];
	  body.push(t.variableDeclaration("var", [t.variableDeclarator(namespace, t.objectExpression([]))]));
	  builder(body);
	  body.push(t.expressionStatement(namespace));
	  return t.program(body);
	}

	function buildHelpers(body, namespace, whitelist) {
	  _lodashCollectionEach2["default"](helpers.list, function (name) {
	    if (whitelist && whitelist.indexOf(name) < 0) return;

	    var key = t.identifier(name);
	    body.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(namespace, key), helpers.get(name))));
	  });
	}

	exports["default"] = function (whitelist /*:: ?: Array<string>*/) {
	  var outputType /*: "global" | "umd" | "var"*/ = arguments.length <= 1 || arguments[1] === undefined ? "global" : arguments[1];

	  var namespace = t.identifier("babelHelpers");

	  var builder = function builder(body) {
	    return buildHelpers(body, namespace, whitelist);
	  };

	  var tree = undefined;

	  var build = ({
	    global: buildGlobal,
	    umd: buildUmd,
	    "var": buildVar
	  })[outputType];

	  if (build) {
	    tree = build(namespace, builder);
	  } else {
	    throw new Error(messages.get("unsupportedOutputType", outputType));
	  }

	  return _babelGenerator2["default"](tree).code;
	};

	module.exports = exports["default"];

/***/ },
/* 2675 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _classCallCheck = __webpack_require__(60)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	exports.__esModule = true;

	var _debugNode = __webpack_require__(2824);

	var _debugNode2 = _interopRequireDefault(_debugNode);

	/*:: import type File from "./index";*/

	var verboseDebug = _debugNode2["default"]("babel:verbose");
	var generalDebug = _debugNode2["default"]("babel");

	var seenDeprecatedMessages = [];

	var Logger = (function () {
	  function Logger(file /*: File*/, filename /*: string*/) {
	    _classCallCheck(this, Logger);

	    this.filename = filename;
	    this.file = file;
	  }

	  Logger.prototype._buildMessage = function _buildMessage(msg /*: string*/) /*: string*/ {
	    var parts = "[BABEL] " + this.filename;
	    if (msg) parts += ": " + msg;
	    return parts;
	  };

	  Logger.prototype.warn = function warn(msg /*: string*/) {
	    console.warn(this._buildMessage(msg));
	  };

	  Logger.prototype.error = function error(msg /*: string*/) /*: Error*/ {
	    var Constructor /*: typeof Error*/ = arguments.length <= 1 || arguments[1] === undefined ? Error : arguments[1];

	    throw new Constructor(this._buildMessage(msg));
	  };

	  Logger.prototype.deprecate = function deprecate(msg /*: string*/) {
	    if (this.file.opts && this.file.opts.suppressDeprecationMessages) return;

	    msg = this._buildMessage(msg);

	    // already seen this message
	    if (seenDeprecatedMessages.indexOf(msg) >= 0) return;

	    // make sure we don't see it again
	    seenDeprecatedMessages.push(msg);

	    console.error(msg);
	  };

	  Logger.prototype.verbose = function verbose(msg /*: string*/) {
	    if (verboseDebug.enabled) verboseDebug(this._buildMessage(msg));
	  };

	  Logger.prototype.debug = function debug(msg /*: string*/) {
	    if (generalDebug.enabled) generalDebug(this._buildMessage(msg));
	  };

	  Logger.prototype.deopt = function deopt(node /*: Object*/, msg /*: string*/) {
	    this.debug(msg);
	  };

	  return Logger;
	})();

	exports["default"] = Logger;
	module.exports = exports["default"];

/***/ },
/* 2676 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(49)["default"];

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;
	exports.ExportDeclaration = ExportDeclaration;
	exports.Scope = Scope;

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	var ModuleDeclaration = {
	  enter: function enter(path, file) {
	    var node = path.node;

	    if (node.source) {
	      node.source.value = file.resolveModuleSource(node.source.value);
	    }
	  }
	};

	exports.ModuleDeclaration = ModuleDeclaration;
	var ImportDeclaration = {
	  exit: function exit(path, file) {
	    var node = path.node;

	    var specifiers = [];
	    var imported = [];
	    file.metadata.modules.imports.push({
	      source: node.source.value,
	      imported: imported,
	      specifiers: specifiers
	    });

	    for (var _iterator = (path.get("specifiers") /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var specifier = _ref;

	      var local = specifier.node.local.name;

	      if (specifier.isImportDefaultSpecifier()) {
	        imported.push("default");
	        specifiers.push({
	          kind: "named",
	          imported: "default",
	          local: local
	        });
	      }

	      if (specifier.isImportSpecifier()) {
	        var importedName = specifier.node.imported.name;
	        imported.push(importedName);
	        specifiers.push({
	          kind: "named",
	          imported: importedName,
	          local: local
	        });
	      }

	      if (specifier.isImportNamespaceSpecifier()) {
	        imported.push("*");
	        specifiers.push({
	          kind: "namespace",
	          local: local
	        });
	      }
	    }
	  }
	};

	exports.ImportDeclaration = ImportDeclaration;

	function ExportDeclaration(path, file) {
	  var node = path.node;

	  var source = node.source ? node.source.value : null;
	  var exports = file.metadata.modules.exports;

	  // export function foo() {}
	  // export let foo = "bar";
	  var declar = path.get("declaration");
	  if (declar.isStatement()) {
	    var bindings = declar.getBindingIdentifiers();

	    for (var _name in bindings) {
	      exports.exported.push(_name);
	      exports.specifiers.push({
	        kind: "local",
	        local: _name,
	        exported: path.isExportDefaultDeclaration() ? "default" : _name
	      });
	    }
	  }

	  if (path.isExportNamedDeclaration() && node.specifiers) {
	    for (var _iterator2 = (node.specifiers /*: Array<Object>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var specifier = _ref2;

	      var exported = specifier.exported.name;
	      exports.exported.push(exported);

	      // export foo from "bar";
	      if (t.isExportDefaultSpecifier(specifier)) {
	        exports.specifiers.push({
	          kind: "external",
	          local: exported,
	          exported: exported,
	          source: source
	        });
	      }

	      // export * as foo from "bar";
	      if (t.isExportNamespaceSpecifier(specifier)) {
	        exports.specifiers.push({
	          kind: "external-namespace",
	          exported: exported,
	          source: source
	        });
	      }

	      var local = specifier.local;
	      if (!local) continue;

	      // export { foo } from "bar";
	      // export { foo as bar } from "bar";
	      if (source) {
	        exports.specifiers.push({
	          kind: "external",
	          local: local.name,
	          exported: exported,
	          source: source
	        });
	      }

	      // export { foo };
	      // export { foo as bar };
	      if (!source) {
	        exports.specifiers.push({
	          kind: "local",
	          local: local.name,
	          exported: exported
	        });
	      }
	    }
	  }

	  // export * from "bar";
	  if (path.isExportAllDeclaration()) {
	    exports.specifiers.push({
	      kind: "external-all",
	      source: source
	    });
	  }
	}

	function Scope(path) {
	  path.skip();
	}

/***/ },
/* 2677 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(8)["default"];

	exports.__esModule = true;

	var _plugin = __webpack_require__(966);

	var _plugin2 = _interopRequireDefault(_plugin);

	var _lodashCollectionSortBy = __webpack_require__(2833);

	var _lodashCollectionSortBy2 = _interopRequireDefault(_lodashCollectionSortBy);

	exports["default"] = new _plugin2["default"]({
	  /**
	   * [Please add a description.]
	   *
	   * Priority:
	   *
	   *  - 0 We want this to be at the **very** bottom
	   *  - 1 Default node position
	   *  - 2 Priority over normal nodes
	   *  - 3 We want this to be at the **very** top
	   */

	  visitor: {
	    Block: {
	      exit: function exit(_ref) {
	        var node = _ref.node;

	        var hasChange = false;
	        for (var i = 0; i < node.body.length; i++) {
	          var bodyNode = node.body[i];
	          if (bodyNode && bodyNode._blockHoist != null) {
	            hasChange = true;
	            break;
	          }
	        }
	        if (!hasChange) return;

	        node.body = _lodashCollectionSortBy2["default"](node.body, function (bodyNode) {
	          var priority = bodyNode && bodyNode._blockHoist;
	          if (priority == null) priority = 1;
	          if (priority === true) priority = 2;

	          // Higher priorities should move toward the top.
	          return -1 * priority;
	        });
	      }
	    }
	  }
	});
	module.exports = exports["default"];

/***/ },
/* 2678 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(8)["default"];

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;

	var _plugin = __webpack_require__(966);

	var _plugin2 = _interopRequireDefault(_plugin);

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	exports["default"] = new _plugin2["default"]({
	  visitor: {
	    ThisExpression: function ThisExpression(path) {
	      remap(path, "this", function () {
	        return t.thisExpression();
	      });
	    },

	    ReferencedIdentifier: function ReferencedIdentifier(path) {
	      if (path.node.name === "arguments") {
	        remap(path, "arguments", function () {
	          return t.identifier("arguments");
	        });
	      }
	    }
	  }
	});

	function shouldShadow(path, shadowPath) {
	  if (path.is("_forceShadow")) {
	    return true;
	  } else {
	    return shadowPath && !shadowPath.isArrowFunctionExpression();
	  }
	}

	function remap(path, key, create) {
	  // ensure that we're shadowed
	  var shadowPath = path.inShadow(key);
	  if (!shouldShadow(path, shadowPath)) return;

	  var shadowFunction = path.node._shadowedFunctionLiteral;
	  var currentFunction = undefined;

	  var fnPath = path.findParent(function (path) {
	    if (path.isProgram() || path.isFunction()) {
	      // catch current function in case this is the shadowed one and we can ignore it
	      currentFunction = currentFunction || path;
	    }

	    if (path.isProgram()) {
	      return true;
	    } else if (path.isFunction()) {
	      if (shadowFunction) {
	        return path === shadowFunction || path.node === shadowFunction.node;
	      } else {
	        return !path.is("shadow");
	      }
	    }

	    return false;
	  });

	  // no point in realiasing if we're in this function
	  if (fnPath === currentFunction) return;

	  var cached = fnPath.getData(key);
	  if (cached) return path.replaceWith(cached);

	  var init = create();
	  var id = path.scope.generateUidIdentifier(key);

	  fnPath.setData(key, id);
	  fnPath.scope.push({ id: id, init: init });

	  return path.replaceWith(id);
	}
	module.exports = exports["default"];

/***/ },
/* 2679 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _classCallCheck = __webpack_require__(60)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	exports.__esModule = true;

	var _helpersNormalizeAst = __webpack_require__(2672);

	var _helpersNormalizeAst2 = _interopRequireDefault(_helpersNormalizeAst);

	var _file = __webpack_require__(963);

	var _file2 = _interopRequireDefault(_file);

	var Pipeline = (function () {
	  function Pipeline() {
	    _classCallCheck(this, Pipeline);
	  }

	  Pipeline.prototype.lint = function lint(code /*: string*/) {
	    var opts /*:: ?: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	    opts.code = false;
	    opts.mode = "lint";
	    return this.transform(code, opts);
	  };

	  Pipeline.prototype.pretransform = function pretransform(code /*: string*/, opts /*:: ?: Object*/) {
	    var file = new _file2["default"](opts, this);
	    return file.wrap(code, function () {
	      file.addCode(code);
	      file.parseCode(code);
	      return file;
	    });
	  };

	  Pipeline.prototype.transform = function transform(code /*: string*/, opts /*:: ?: Object*/) {
	    var file = new _file2["default"](opts, this);
	    return file.wrap(code, function () {
	      file.addCode(code);
	      file.parseCode(code);
	      return file.transform();
	    });
	  };

	  Pipeline.prototype.transformFromAst = function transformFromAst(ast, code /*: string*/, opts /*: Object*/) {
	    ast = _helpersNormalizeAst2["default"](ast);

	    var file = new _file2["default"](opts, this);
	    return file.wrap(code, function () {
	      file.addCode(code);
	      file.addAst(ast);
	      return file.transform();
	    });
	  };

	  return Pipeline;
	})();

	exports["default"] = Pipeline;
	module.exports = exports["default"];

/***/ },
/* 2680 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _inherits = __webpack_require__(377)["default"];

	var _classCallCheck = __webpack_require__(60)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	exports.__esModule = true;

	var _store = __webpack_require__(962);

	var _store2 = _interopRequireDefault(_store);

	var _babelTraverse = __webpack_require__(169);

	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

	var _file5 = __webpack_require__(963);

	var _file6 = _interopRequireDefault(_file5);

	/*:: import type Plugin from "./plugin";*/
	var PluginPass = (function (_Store) {
	  _inherits(PluginPass, _Store);

	  function PluginPass(file /*: File*/, plugin /*: Plugin*/) {
	    var options /*: Object*/ = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    _classCallCheck(this, PluginPass);

	    _Store.call(this);
	    this.plugin = plugin;
	    this.file = file;
	    this.opts = options;
	  }

	  PluginPass.prototype.transform = function transform() {
	    var file = this.file;
	    file.log.debug("Start transformer " + this.key);
	    _babelTraverse2["default"](file.ast, this.plugin.visitor, file.scope, file);
	    file.log.debug("Finish transformer " + this.key);
	  };

	  PluginPass.prototype.addHelper = function addHelper() {
	    // istanbul ignore next

	    var _file;

	    return (_file = this.file).addHelper.apply(_file, arguments);
	  };

	  PluginPass.prototype.addImport = function addImport() {
	    // istanbul ignore next

	    var _file2;

	    return (_file2 = this.file).addImport.apply(_file2, arguments);
	  };

	  PluginPass.prototype.getModuleName = function getModuleName() {
	    // istanbul ignore next

	    var _file3;

	    return (_file3 = this.file).getModuleName.apply(_file3, arguments);
	  };

	  PluginPass.prototype.buildCodeFrameError = function buildCodeFrameError() {
	    // istanbul ignore next

	    var _file4;

	    return (_file4 = this.file).buildCodeFrameError.apply(_file4, arguments);
	  };

	  return PluginPass;
	})(_store2["default"]);

	exports["default"] = PluginPass;
	module.exports = exports["default"];

/***/ },
/* 2681 */
[7807, 2683, 2682, 2686, 2684, 2688],
/* 2682 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {'use strict';

	function assembleStyles () {
		var styles = {
			modifiers: {
				reset: [0, 0],
				bold: [1, 22], // 21 isn't widely supported and 22 does the same thing
				dim: [2, 22],
				italic: [3, 23],
				underline: [4, 24],
				inverse: [7, 27],
				hidden: [8, 28],
				strikethrough: [9, 29]
			},
			colors: {
				black: [30, 39],
				red: [31, 39],
				green: [32, 39],
				yellow: [33, 39],
				blue: [34, 39],
				magenta: [35, 39],
				cyan: [36, 39],
				white: [37, 39],
				gray: [90, 39]
			},
			bgColors: {
				bgBlack: [40, 49],
				bgRed: [41, 49],
				bgGreen: [42, 49],
				bgYellow: [43, 49],
				bgBlue: [44, 49],
				bgMagenta: [45, 49],
				bgCyan: [46, 49],
				bgWhite: [47, 49]
			}
		};

		// fix humans
		styles.colors.grey = styles.colors.gray;

		Object.keys(styles).forEach(function (groupName) {
			var group = styles[groupName];

			Object.keys(group).forEach(function (styleName) {
				var style = group[styleName];

				styles[styleName] = group[styleName] = {
					open: '\u001b[' + style[0] + 'm',
					close: '\u001b[' + style[1] + 'm'
				};
			});

			Object.defineProperty(styles, groupName, {
				value: group,
				enumerable: false
			});
		});

		return styles;
	}

	Object.defineProperty(module, 'exports', {
		enumerable: true,
		get: assembleStyles
	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(55)(module)))

/***/ },
/* 2683 */
/***/ function(module, exports) {

	'use strict';

	var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

	module.exports = function (str) {
		if (typeof str !== 'string') {
			throw new TypeError('Expected a string');
		}

		return str.replace(matchOperatorsRe,  '\\$&');
	};


/***/ },
/* 2684 */
[7808, 2685],
/* 2685 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function () {
		return /[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-ORZcf-nqry=><]/g;
	};


/***/ },
/* 2686 */
[7809, 2687],
/* 2687 */
2685,
/* 2688 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	var argv = process.argv;

	var terminator = argv.indexOf('--');
	var hasFlag = function (flag) {
		flag = '--' + flag;
		var pos = argv.indexOf(flag);
		return pos !== -1 && (terminator !== -1 ? pos < terminator : true);
	};

	module.exports = (function () {
		if ('FORCE_COLOR' in process.env) {
			return true;
		}

		if (hasFlag('no-color') ||
			hasFlag('no-colors') ||
			hasFlag('color=false')) {
			return false;
		}

		if (hasFlag('color') ||
			hasFlag('colors') ||
			hasFlag('color=true') ||
			hasFlag('color=always')) {
			return true;
		}

		if (process.stdout && !process.stdout.isTTY) {
			return false;
		}

		if (process.platform === 'win32') {
			return true;
		}

		if ('COLORTERM' in process.env) {
			return true;
		}

		if (process.env.TERM === 'dumb') {
			return false;
		}

		if (/^screen|^xterm|^vt100|color|ansi|cygwin|linux/i.test(process.env.TERM)) {
			return true;
		}

		return false;
	})();

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 2689 */
/***/ function(module, exports) {

	/*
	  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 'AS IS'
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function () {
	    'use strict';

	    function isExpression(node) {
	        if (node == null) { return false; }
	        switch (node.type) {
	            case 'ArrayExpression':
	            case 'AssignmentExpression':
	            case 'BinaryExpression':
	            case 'CallExpression':
	            case 'ConditionalExpression':
	            case 'FunctionExpression':
	            case 'Identifier':
	            case 'Literal':
	            case 'LogicalExpression':
	            case 'MemberExpression':
	            case 'NewExpression':
	            case 'ObjectExpression':
	            case 'SequenceExpression':
	            case 'ThisExpression':
	            case 'UnaryExpression':
	            case 'UpdateExpression':
	                return true;
	        }
	        return false;
	    }

	    function isIterationStatement(node) {
	        if (node == null) { return false; }
	        switch (node.type) {
	            case 'DoWhileStatement':
	            case 'ForInStatement':
	            case 'ForStatement':
	            case 'WhileStatement':
	                return true;
	        }
	        return false;
	    }

	    function isStatement(node) {
	        if (node == null) { return false; }
	        switch (node.type) {
	            case 'BlockStatement':
	            case 'BreakStatement':
	            case 'ContinueStatement':
	            case 'DebuggerStatement':
	            case 'DoWhileStatement':
	            case 'EmptyStatement':
	            case 'ExpressionStatement':
	            case 'ForInStatement':
	            case 'ForStatement':
	            case 'IfStatement':
	            case 'LabeledStatement':
	            case 'ReturnStatement':
	            case 'SwitchStatement':
	            case 'ThrowStatement':
	            case 'TryStatement':
	            case 'VariableDeclaration':
	            case 'WhileStatement':
	            case 'WithStatement':
	                return true;
	        }
	        return false;
	    }

	    function isSourceElement(node) {
	      return isStatement(node) || node != null && node.type === 'FunctionDeclaration';
	    }

	    function trailingStatement(node) {
	        switch (node.type) {
	        case 'IfStatement':
	            if (node.alternate != null) {
	                return node.alternate;
	            }
	            return node.consequent;

	        case 'LabeledStatement':
	        case 'ForStatement':
	        case 'ForInStatement':
	        case 'WhileStatement':
	        case 'WithStatement':
	            return node.body;
	        }
	        return null;
	    }

	    function isProblematicIfStatement(node) {
	        var current;

	        if (node.type !== 'IfStatement') {
	            return false;
	        }
	        if (node.alternate == null) {
	            return false;
	        }
	        current = node.consequent;
	        do {
	            if (current.type === 'IfStatement') {
	                if (current.alternate == null)  {
	                    return true;
	                }
	            }
	            current = trailingStatement(current);
	        } while (current);

	        return false;
	    }

	    module.exports = {
	        isExpression: isExpression,
	        isStatement: isStatement,
	        isIterationStatement: isIterationStatement,
	        isSourceElement: isSourceElement,
	        isProblematicIfStatement: isProblematicIfStatement,

	        trailingStatement: trailingStatement
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 2690 */
[7810, 1550],
/* 2691 */
[7811, 2689, 1550, 2690],
/* 2692 */
/***/ function(module, exports) {

	// Copyright 2014, 2015 Simon Lydell
	// X11 (“MIT”) Licensed. (See LICENSE.)

	// This regex comes from regex.coffee, and is inserted here by generate-index.js
	// (run `npm run build`).
	module.exports = /((['"])(?:(?!\2|\\).|\\(?:\r\n|[\s\S]))*(\2)?|`(?:[^`\\$]|\\[\s\S]|\$(?!\{)|\$\{(?:[^{}]|\{[^}]*\}?)*\}?)*(`)?)|(\/\/.*)|(\/\*(?:[^*]|\*(?!\/))*(\*\/)?)|(\/(?!\*)(?:\[(?:(?![\]\\]).|\\.)*\]|(?![\/\]\\]).|\\.)+\/(?:(?!\s*(?:\b|[\u0080-\uFFFF$\\'"~({]|[+\-!](?!=)|\.?\d))|[gmiyu]{1,5}\b(?![\u0080-\uFFFF$\\]|\s*(?:[+\-*%&|^<>!=?({]|\/(?![\/*])))))|((?:0[xX][\da-fA-F]+|0[oO][0-7]+|0[bB][01]+|(?:\d*\.\d+|\d+\.?)(?:[eE][+-]?\d+)?))|((?!\d)(?:(?!\s)[$\w\u0080-\uFFFF]|\\u[\da-fA-F]{4}|\\u\{[\da-fA-F]{1,6}\})+)|(--|\+\+|&&|\|\||=>|\.{3}|(?:[+\-*\/%&|^]|<{1,2}|>{1,3}|!=?|={1,2})=?|[?:~]|[;,.[\](){}])|(\s+)|(^$|[\s\S])/g

	module.exports.matchToToken = function(match) {
	  var token = {type: "invalid", value: match[0]}
	       if (match[ 1]) token.type = "string" , token.closed = !!(match[3] || match[4])
	  else if (match[ 5]) token.type = "comment"
	  else if (match[ 6]) token.type = "comment", token.closed = !!match[7]
	  else if (match[ 8]) token.type = "regex"
	  else if (match[ 9]) token.type = "number"
	  else if (match[10]) token.type = "name"
	  else if (match[11]) token.type = "punctuator"
	  else if (match[12]) token.type = "whitespace"
	  return token
	}


/***/ },
/* 2693 */
[7812, 2694],
/* 2694 */
/***/ function(module, exports) {

	module.exports = leftpad;

	function leftpad (str, len, ch) {
	  str = String(str);

	  var i = -1;

	  ch || (ch = ' ');
	  len = len - str.length;


	  while (++i < len) {
	    str = ch + str;
	  }

	  return str;
	}


/***/ },
/* 2695 */
[7813, 2696],
/* 2696 */
[7814, 2697],
/* 2697 */
/***/ function(module, exports) {

	'use strict';
	module.exports = Number.isNaN || function (x) {
		return x !== x;
	};


/***/ },
/* 2698 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _classCallCheck = __webpack_require__(60)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	exports.__esModule = true;

	var _repeating = __webpack_require__(696);

	var _repeating2 = _interopRequireDefault(_repeating);

	var _trimRight = __webpack_require__(2720);

	var _trimRight2 = _interopRequireDefault(_trimRight);

	/**
	 * Buffer for collecting generated output.
	 */

	/*:: import type Position from "./position";*/
	var Buffer = (function () {
	  function Buffer(position /*: Position*/, format /*: Object*/) {
	    _classCallCheck(this, Buffer);

	    this.printedCommentStarts = {};
	    this.parenPushNewlineState = null;
	    this.position = position;
	    this._indent = format.indent.base;
	    this.format = format;
	    this.buf = "";
	  }

	  /**
	   * Description
	   */

	  Buffer.prototype.catchUp = function catchUp(node) {
	    // catch up to this nodes newline if we're behind
	    if (node.loc && this.format.retainLines && this.buf) {
	      while (this.position.line < node.loc.start.line) {
	        this._push("\n");
	      }
	    }
	  };

	  /**
	   * Get the current trimmed buffer.
	   */

	  Buffer.prototype.get = function get() {
	    return _trimRight2["default"](this.buf);
	  };

	  /**
	   * Get the current indent.
	   */

	  Buffer.prototype.getIndent = function getIndent() {
	    if (this.format.compact || this.format.concise) {
	      return "";
	    } else {
	      return _repeating2["default"](this.format.indent.style, this._indent);
	    }
	  };

	  /**
	   * Get the current indent size.
	   */

	  Buffer.prototype.indentSize = function indentSize() {
	    return this.getIndent().length;
	  };

	  /**
	   * Increment indent size.
	   */

	  Buffer.prototype.indent = function indent() {
	    this._indent++;
	  };

	  /**
	   * Decrement indent size.
	   */

	  Buffer.prototype.dedent = function dedent() {
	    this._indent--;
	  };

	  /**
	   * Add a semicolon to the buffer.
	   */

	  Buffer.prototype.semicolon = function semicolon() {
	    this.push(";");
	  };

	  /**
	   * Ensure last character is a semicolon.
	   */

	  Buffer.prototype.ensureSemicolon = function ensureSemicolon() {
	    if (!this.isLast(";")) this.semicolon();
	  };

	  /**
	   * Add a right brace to the buffer.
	   */

	  Buffer.prototype.rightBrace = function rightBrace() {
	    this.newline(true);
	    if (this.format.compact && !this._lastPrintedIsEmptyStatement) {
	      this._removeLast(";");
	    }
	    this.push("}");
	  };

	  /**
	   * Add a keyword to the buffer.
	   */

	  Buffer.prototype.keyword = function keyword(name /*: string*/) {
	    this.push(name);
	    this.space();
	  };

	  /**
	   * Add a space to the buffer unless it is compact (override with force).
	   */

	  Buffer.prototype.space = function space(force /*:: ?: boolean*/) {
	    if (!force && this.format.compact) return;

	    if (force || this.buf && !this.isLast(" ") && !this.isLast("\n")) {
	      this.push(" ");
	    }
	  };

	  /**
	   * Remove the last character.
	   */

	  Buffer.prototype.removeLast = function removeLast(cha /*: string*/) {
	    if (this.format.compact) return;
	    return this._removeLast(cha);
	  };

	  Buffer.prototype._removeLast = function _removeLast(cha /*: string*/) {
	    if (!this._isLast(cha)) return;
	    this.buf = this.buf.substr(0, this.buf.length - 1);
	    this.position.unshift(cha);
	  };

	  /**
	   * Set some state that will be modified if a newline has been inserted before any
	   * non-space characters.
	   *
	   * This is to prevent breaking semantics for terminatorless separator nodes. eg:
	   *
	   *    return foo;
	   *
	   * returns `foo`. But if we do:
	   *
	   *   return
	   *   foo;
	   *
	   *  `undefined` will be returned and not `foo` due to the terminator.
	   */

	  Buffer.prototype.startTerminatorless = function startTerminatorless() /*: Object*/ {
	    return this.parenPushNewlineState = {
	      printed: false
	    };
	  };

	  /**
	   * Print an ending parentheses if a starting one has been printed.
	   */

	  Buffer.prototype.endTerminatorless = function endTerminatorless(state /*: Object*/) {
	    if (state.printed) {
	      this.dedent();
	      this.newline();
	      this.push(")");
	    }
	  };

	  /**
	   * Add a newline (or many newlines), maintaining formatting.
	   * Strips multiple newlines if removeLast is true.
	   */

	  Buffer.prototype.newline = function newline(i /*:: ?: boolean | number*/, removeLast /*:: ?: boolean*/) {
	    if (this.format.retainLines || this.format.compact) return;

	    if (this.format.concise) {
	      this.space();
	      return;
	    }

	    removeLast = removeLast || false;

	    if (typeof i === "number") {
	      i = Math.min(2, i);

	      if (this.endsWith("{\n") || this.endsWith(":\n")) i--;
	      if (i <= 0) return;

	      while (i > 0) {
	        this._newline(removeLast);
	        i--;
	      }
	      return;
	    }

	    if (typeof i === "boolean") {
	      removeLast = i;
	    }

	    this._newline(removeLast);
	  };

	  /**
	   * Adds a newline unless there is already two previous newlines.
	   */

	  Buffer.prototype._newline = function _newline(removeLast /*:: ?: boolean*/) {
	    // never allow more than two lines
	    if (this.endsWith("\n\n")) return;

	    // remove the last newline
	    if (removeLast && this.isLast("\n")) this.removeLast("\n");

	    this.removeLast(" ");
	    this._removeSpacesAfterLastNewline();
	    this._push("\n");
	  };

	  /**
	   * If buffer ends with a newline and some spaces after it, trim those spaces.
	   */

	  Buffer.prototype._removeSpacesAfterLastNewline = function _removeSpacesAfterLastNewline() {
	    var lastNewlineIndex = this.buf.lastIndexOf("\n");
	    if (lastNewlineIndex === -1) {
	      return;
	    }

	    var index = this.buf.length - 1;
	    while (index > lastNewlineIndex) {
	      if (this.buf[index] !== " ") {
	        break;
	      }

	      index--;
	    }

	    if (index === lastNewlineIndex) {
	      this.buf = this.buf.substring(0, index + 1);
	    }
	  };

	  /**
	   * Push a string to the buffer, maintaining indentation and newlines.
	   */

	  Buffer.prototype.push = function push(str /*: string*/, noIndent /*:: ?: boolean*/) {
	    if (!this.format.compact && this._indent && !noIndent && str !== "\n") {
	      // we have an indent level and we aren't pushing a newline
	      var indent = this.getIndent();

	      // replace all newlines with newlines with the indentation
	      str = str.replace(/\n/g, "\n" + indent);

	      // we've got a newline before us so prepend on the indentation
	      if (this.isLast("\n")) this._push(indent);
	    }

	    this._push(str);
	  };

	  /**
	   * Push a string to the buffer.
	   */

	  Buffer.prototype._push = function _push(str) {
	    // see startTerminatorless() instance method
	    var parenPushNewlineState = this.parenPushNewlineState;
	    if (parenPushNewlineState) {
	      for (var i = 0; i < str.length; i++) {
	        var cha = str[i];

	        // we can ignore spaces since they wont interupt a terminatorless separator
	        if (cha === " ") continue;

	        this.parenPushNewlineState = null;

	        if (cha === "\n" || cha === "/") {
	          // we're going to break this terminator expression so we need to add a parentheses
	          this._push("(");
	          this.indent();
	          parenPushNewlineState.printed = true;
	        }

	        break;
	      }
	    }

	    //
	    this.position.push(str);
	    this.buf += str;
	  };

	  /**
	   * Test if the buffer ends with a string.
	   */

	  Buffer.prototype.endsWith = function endsWith(str /*: string*/) /*: boolean*/ {
	    var buf /*: string*/ = arguments.length <= 1 || arguments[1] === undefined ? this.buf : arguments[1];

	    if (str.length === 1) {
	      return buf[buf.length - 1] === str;
	    } else {
	      return buf.slice(-str.length) === str;
	    }
	  };

	  /**
	   * Test if a character is last in the buffer.
	   */

	  Buffer.prototype.isLast = function isLast(cha /*: string*/) {
	    if (this.format.compact) return false;
	    return this._isLast(cha);
	  };

	  Buffer.prototype._isLast = function _isLast(cha /*: string*/) {
	    var buf = this.buf;
	    var last = buf[buf.length - 1];

	    if (Array.isArray(cha)) {
	      return cha.indexOf(last) >= 0;
	    } else {
	      return cha === last;
	    }
	  };

	  return Buffer;
	})();

	exports["default"] = Buffer;
	module.exports = exports["default"];

/***/ },
/* 2699 */
/***/ function(module, exports) {

	/* @flow */

	"use strict";

	exports.__esModule = true;
	exports.File = File;
	exports.Program = Program;
	exports.BlockStatement = BlockStatement;
	exports.Noop = Noop;
	exports.Directive = Directive;
	exports.DirectiveLiteral = DirectiveLiteral;

	function File(node /*: Object*/) {
	  this.print(node.program, node);
	}

	function Program(node /*: Object*/) {
	  this.printInnerComments(node, false);

	  this.printSequence(node.directives, node);
	  if (node.directives && node.directives.length) this.newline();

	  this.printSequence(node.body, node);
	}

	function BlockStatement(node /*: Object*/) {
	  this.push("{");
	  this.printInnerComments(node);
	  if (node.body.length) {
	    this.newline();

	    this.printSequence(node.directives, node, { indent: true });
	    if (node.directives && node.directives.length) this.newline();

	    this.printSequence(node.body, node, { indent: true });
	    if (!this.format.retainLines) this.removeLast("\n");
	    this.rightBrace();
	  } else {
	    this.push("}");
	  }
	}

	function Noop() {}

	function Directive(node /*: Object*/) {
	  this.print(node.value, node);
	  this.semicolon();
	}

	function DirectiveLiteral(node /*: Object*/) {
	  this.push(this._stringLiteral(node.value));
	}

/***/ },
/* 2700 */
/***/ function(module, exports) {

	/* @flow */

	"use strict";

	exports.__esModule = true;
	exports.ClassDeclaration = ClassDeclaration;
	exports.ClassBody = ClassBody;
	exports.ClassProperty = ClassProperty;
	exports.ClassMethod = ClassMethod;

	function ClassDeclaration(node /*: Object*/) {
	  this.printJoin(node.decorators, node, { separator: "" });
	  this.push("class");

	  if (node.id) {
	    this.push(" ");
	    this.print(node.id, node);
	  }

	  this.print(node.typeParameters, node);

	  if (node.superClass) {
	    this.push(" extends ");
	    this.print(node.superClass, node);
	    this.print(node.superTypeParameters, node);
	  }

	  if (node["implements"]) {
	    this.push(" implements ");
	    this.printJoin(node["implements"], node, { separator: ", " });
	  }

	  this.space();
	  this.print(node.body, node);
	}

	exports.ClassExpression = ClassDeclaration;

	function ClassBody(node /*: Object*/) {
	  this.push("{");
	  this.printInnerComments(node);
	  if (node.body.length === 0) {
	    this.push("}");
	  } else {
	    this.newline();

	    this.indent();
	    this.printSequence(node.body, node);
	    this.dedent();

	    this.rightBrace();
	  }
	}

	function ClassProperty(node /*: Object*/) {
	  this.printJoin(node.decorators, node, { separator: "" });

	  if (node["static"]) this.push("static ");
	  this.print(node.key, node);
	  this.print(node.typeAnnotation, node);
	  if (node.value) {
	    this.space();
	    this.push("=");
	    this.space();
	    this.print(node.value, node);
	  }
	  this.semicolon();
	}

	function ClassMethod(node /*: Object*/) {
	  this.printJoin(node.decorators, node, { separator: "" });

	  if (node["static"]) {
	    this.push("static ");
	  }

	  if (node.kind === "constructorCall") {
	    this.push("call ");
	  }

	  this._method(node);
	}

/***/ },
/* 2701 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(8)["default"];

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;
	exports.UnaryExpression = UnaryExpression;
	exports.DoExpression = DoExpression;
	exports.ParenthesizedExpression = ParenthesizedExpression;
	exports.UpdateExpression = UpdateExpression;
	exports.ConditionalExpression = ConditionalExpression;
	exports.NewExpression = NewExpression;
	exports.SequenceExpression = SequenceExpression;
	exports.ThisExpression = ThisExpression;
	exports.Super = Super;
	exports.Decorator = Decorator;
	exports.CallExpression = CallExpression;
	exports.EmptyStatement = EmptyStatement;
	exports.ExpressionStatement = ExpressionStatement;
	exports.AssignmentPattern = AssignmentPattern;
	exports.AssignmentExpression = AssignmentExpression;
	exports.BindExpression = BindExpression;
	exports.MemberExpression = MemberExpression;
	exports.MetaProperty = MetaProperty;

	var _isInteger = __webpack_require__(2715);

	var _isInteger2 = _interopRequireDefault(_isInteger);

	var _lodashLangIsNumber = __webpack_require__(1597);

	var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	var _node = __webpack_require__(1553);

	var _node2 = _interopRequireDefault(_node);

	var SCIENTIFIC_NOTATION = /e/i;
	var ZERO_DECIMAL_INTEGER = /\.0+$/;

	function UnaryExpression(node /*: Object*/) {
	  var needsSpace = /[a-z]$/.test(node.operator);
	  var arg = node.argument;

	  if (t.isUpdateExpression(arg) || t.isUnaryExpression(arg)) {
	    needsSpace = true;
	  }

	  if (t.isUnaryExpression(arg) && arg.operator === "!") {
	    needsSpace = false;
	  }

	  this.push(node.operator);
	  if (needsSpace) this.push(" ");
	  this.print(node.argument, node);
	}

	function DoExpression(node /*: Object*/) {
	  this.push("do");
	  this.space();
	  this.print(node.body, node);
	}

	function ParenthesizedExpression(node /*: Object*/) {
	  this.push("(");
	  this.print(node.expression, node);
	  this.push(")");
	}

	function UpdateExpression(node /*: Object*/) {
	  if (node.prefix) {
	    this.push(node.operator);
	    this.print(node.argument, node);
	  } else {
	    this.print(node.argument, node);
	    this.push(node.operator);
	  }
	}

	function ConditionalExpression(node /*: Object*/) {
	  this.print(node.test, node);
	  this.space();
	  this.push("?");
	  this.space();
	  this.print(node.consequent, node);
	  this.space();
	  this.push(":");
	  this.space();
	  this.print(node.alternate, node);
	}

	function NewExpression(node /*: Object*/) {
	  this.push("new ");
	  this.print(node.callee, node);
	  this.push("(");
	  this.printList(node.arguments, node);
	  this.push(")");
	}

	function SequenceExpression(node /*: Object*/) {
	  this.printList(node.expressions, node);
	}

	function ThisExpression() {
	  this.push("this");
	}

	function Super() {
	  this.push("super");
	}

	function Decorator(node /*: Object*/) {
	  this.push("@");
	  this.print(node.expression, node);
	  this.newline();
	}

	function CallExpression(node /*: Object*/) {
	  this.print(node.callee, node);

	  this.push("(");

	  var isPrettyCall = node._prettyCall && !this.format.retainLines && !this.format.compact;

	  var separator = undefined;
	  if (isPrettyCall) {
	    separator = ",\n";
	    this.newline();
	    this.indent();
	  }

	  this.printList(node.arguments, node, { separator: separator });

	  if (isPrettyCall) {
	    this.newline();
	    this.dedent();
	  }

	  this.push(")");
	}

	function buildYieldAwait(keyword /*: string*/) {
	  return function (node /*: Object*/) {
	    this.push(keyword);

	    if (node.delegate || node.all) {
	      this.push("*");
	    }

	    if (node.argument) {
	      this.push(" ");
	      var terminatorState = this.startTerminatorless();
	      this.print(node.argument, node);
	      this.endTerminatorless(terminatorState);
	    }
	  };
	}

	var YieldExpression = buildYieldAwait("yield");
	exports.YieldExpression = YieldExpression;
	var AwaitExpression = buildYieldAwait("await");

	exports.AwaitExpression = AwaitExpression;

	function EmptyStatement() {
	  this._lastPrintedIsEmptyStatement = true;
	  this.semicolon();
	}

	function ExpressionStatement(node /*: Object*/) {
	  this.print(node.expression, node);
	  this.semicolon();
	}

	function AssignmentPattern(node /*: Object*/) {
	  this.print(node.left, node);
	  this.space();
	  this.push("=");
	  this.space();
	  this.print(node.right, node);
	}

	function AssignmentExpression(node /*: Object*/, parent /*: Object*/) {
	  // Somewhere inside a for statement `init` node but doesn't usually
	  // needs a paren except for `in` expressions: `for (a in b ? a : b;;)`
	  var parens = this._inForStatementInit && node.operator === "in" && !_node2["default"].needsParens(node, parent);

	  if (parens) {
	    this.push("(");
	  }

	  this.print(node.left, node);

	  var spaces = !this.format.compact || node.operator === "in" || node.operator === "instanceof";
	  if (spaces) this.push(" ");

	  this.push(node.operator);

	  if (!spaces) {
	    // space is mandatory to avoid outputting <!--
	    // http://javascript.spec.whatwg.org/#comment-syntax
	    spaces = node.operator === "<" && t.isUnaryExpression(node.right, { prefix: true, operator: "!" }) && t.isUnaryExpression(node.right.argument, { prefix: true, operator: "--" }) ||
	    // Need spaces for operators of the same kind to avoid: `a+++b`
	    t.isUnaryExpression(node.right, { prefix: true, operator: node.operator }) || t.isUpdateExpression(node.right, { prefix: true, operator: node.operator + node.operator }) || t.isBinaryExpression(node.right) && t.isUnaryExpression(getLeftMost(node.right), { prefix: true, operator: node.operator });
	  }

	  if (spaces) this.push(" ");

	  this.print(node.right, node);

	  if (parens) {
	    this.push(")");
	  }
	}

	function BindExpression(node /*: Object*/) {
	  this.print(node.object, node);
	  this.push("::");
	  this.print(node.callee, node);
	}

	exports.BinaryExpression = AssignmentExpression;
	exports.LogicalExpression = AssignmentExpression;

	function MemberExpression(node /*: Object*/) {
	  this.print(node.object, node);

	  if (!node.computed && t.isMemberExpression(node.property)) {
	    throw new TypeError("Got a MemberExpression for MemberExpression property");
	  }

	  var computed = node.computed;
	  if (t.isLiteral(node.property) && _lodashLangIsNumber2["default"](node.property.value)) {
	    computed = true;
	  }

	  if (computed) {
	    this.push("[");
	    this.print(node.property, node);
	    this.push("]");
	  } else {
	    if (t.isLiteral(node.object) && !t.isTemplateLiteral(node.object)) {
	      var val = this.getPossibleRaw(node.object) || this._stringLiteral(node.object);
	      if (_isInteger2["default"](+val) && !SCIENTIFIC_NOTATION.test(val) && !ZERO_DECIMAL_INTEGER.test(val) && !this.endsWith(".")) {
	        this.push(".");
	      }
	    }

	    this.push(".");
	    this.print(node.property, node);
	  }
	}

	function MetaProperty(node /*: Object*/) {
	  this.print(node.meta, node);
	  this.push(".");
	  this.print(node.property, node);
	}

	function getLeftMost(binaryExpr) {
	  if (!t.isBinaryExpression(binaryExpr)) {
	    return binaryExpr;
	  }
	  return getLeftMost(binaryExpr.left);
	}

/***/ },
/* 2702 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;
	exports.AnyTypeAnnotation = AnyTypeAnnotation;
	exports.ArrayTypeAnnotation = ArrayTypeAnnotation;
	exports.BooleanTypeAnnotation = BooleanTypeAnnotation;
	exports.BooleanLiteralTypeAnnotation = BooleanLiteralTypeAnnotation;
	exports.NullLiteralTypeAnnotation = NullLiteralTypeAnnotation;
	exports.DeclareClass = DeclareClass;
	exports.DeclareFunction = DeclareFunction;
	exports.DeclareModule = DeclareModule;
	exports.DeclareVariable = DeclareVariable;
	exports.ExistentialTypeParam = ExistentialTypeParam;
	exports.FunctionTypeAnnotation = FunctionTypeAnnotation;
	exports.FunctionTypeParam = FunctionTypeParam;
	exports.InterfaceExtends = InterfaceExtends;
	exports._interfaceish = _interfaceish;
	exports.InterfaceDeclaration = InterfaceDeclaration;
	exports.IntersectionTypeAnnotation = IntersectionTypeAnnotation;
	exports.MixedTypeAnnotation = MixedTypeAnnotation;
	exports.NullableTypeAnnotation = NullableTypeAnnotation;
	exports.NumberTypeAnnotation = NumberTypeAnnotation;
	exports.StringLiteralTypeAnnotation = StringLiteralTypeAnnotation;
	exports.StringTypeAnnotation = StringTypeAnnotation;
	exports.TupleTypeAnnotation = TupleTypeAnnotation;
	exports.TypeofTypeAnnotation = TypeofTypeAnnotation;
	exports.TypeAlias = TypeAlias;
	exports.TypeAnnotation = TypeAnnotation;
	exports.TypeParameterInstantiation = TypeParameterInstantiation;
	exports.ObjectTypeAnnotation = ObjectTypeAnnotation;
	exports.ObjectTypeCallProperty = ObjectTypeCallProperty;
	exports.ObjectTypeIndexer = ObjectTypeIndexer;
	exports.ObjectTypeProperty = ObjectTypeProperty;
	exports.QualifiedTypeIdentifier = QualifiedTypeIdentifier;
	exports.UnionTypeAnnotation = UnionTypeAnnotation;
	exports.TypeCastExpression = TypeCastExpression;
	exports.VoidTypeAnnotation = VoidTypeAnnotation;

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	function AnyTypeAnnotation() {
	  this.push("any");
	}

	function ArrayTypeAnnotation(node /*: Object*/) {
	  this.print(node.elementType, node);
	  this.push("[");
	  this.push("]");
	}

	function BooleanTypeAnnotation() {
	  this.push("bool");
	}

	function BooleanLiteralTypeAnnotation(node /*: Object*/) {
	  this.push(node.value ? "true" : "false");
	}

	function NullLiteralTypeAnnotation() {
	  this.push("null");
	}

	function DeclareClass(node /*: Object*/) {
	  this.push("declare class ");
	  this._interfaceish(node);
	}

	function DeclareFunction(node /*: Object*/) {
	  this.push("declare function ");
	  this.print(node.id, node);
	  this.print(node.id.typeAnnotation.typeAnnotation, node);
	  this.semicolon();
	}

	function DeclareModule(node /*: Object*/) {
	  this.push("declare module ");
	  this.print(node.id, node);
	  this.space();
	  this.print(node.body, node);
	}

	function DeclareVariable(node /*: Object*/) {
	  this.push("declare var ");
	  this.print(node.id, node);
	  this.print(node.id.typeAnnotation, node);
	  this.semicolon();
	}

	function ExistentialTypeParam() {
	  this.push("*");
	}

	function FunctionTypeAnnotation(node /*: Object*/, parent /*: Object*/) {
	  this.print(node.typeParameters, node);
	  this.push("(");
	  this.printList(node.params, node);

	  if (node.rest) {
	    if (node.params.length) {
	      this.push(",");
	      this.space();
	    }
	    this.push("...");
	    this.print(node.rest, node);
	  }

	  this.push(")");

	  // this node type is overloaded, not sure why but it makes it EXTREMELY annoying
	  if (parent.type === "ObjectTypeProperty" || parent.type === "ObjectTypeCallProperty" || parent.type === "DeclareFunction") {
	    this.push(":");
	  } else {
	    this.space();
	    this.push("=>");
	  }

	  this.space();
	  this.print(node.returnType, node);
	}

	function FunctionTypeParam(node /*: Object*/) {
	  this.print(node.name, node);
	  if (node.optional) this.push("?");
	  this.push(":");
	  this.space();
	  this.print(node.typeAnnotation, node);
	}

	function InterfaceExtends(node /*: Object*/) {
	  this.print(node.id, node);
	  this.print(node.typeParameters, node);
	}

	exports.ClassImplements = InterfaceExtends;
	exports.GenericTypeAnnotation = InterfaceExtends;

	function _interfaceish(node /*: Object*/) {
	  this.print(node.id, node);
	  this.print(node.typeParameters, node);
	  if (node["extends"].length) {
	    this.push(" extends ");
	    this.printJoin(node["extends"], node, { separator: ", " });
	  }
	  this.space();
	  this.print(node.body, node);
	}

	function InterfaceDeclaration(node /*: Object*/) {
	  this.push("interface ");
	  this._interfaceish(node);
	}

	function IntersectionTypeAnnotation(node /*: Object*/) {
	  this.printJoin(node.types, node, { separator: " & " });
	}

	function MixedTypeAnnotation() {
	  this.push("mixed");
	}

	function NullableTypeAnnotation(node /*: Object*/) {
	  this.push("?");
	  this.print(node.typeAnnotation, node);
	}

	var _types = __webpack_require__(1551);

	exports.NumericLiteralTypeAnnotation = _types.NumericLiteral;

	function NumberTypeAnnotation() {
	  this.push("number");
	}

	function StringLiteralTypeAnnotation(node /*: Object*/) {
	  this.push(this._stringLiteral(node.value));
	}

	function StringTypeAnnotation() {
	  this.push("string");
	}

	function TupleTypeAnnotation(node /*: Object*/) {
	  this.push("[");
	  this.printJoin(node.types, node, { separator: ", " });
	  this.push("]");
	}

	function TypeofTypeAnnotation(node /*: Object*/) {
	  this.push("typeof ");
	  this.print(node.argument, node);
	}

	function TypeAlias(node /*: Object*/) {
	  this.push("type ");
	  this.print(node.id, node);
	  this.print(node.typeParameters, node);
	  this.space();
	  this.push("=");
	  this.space();
	  this.print(node.right, node);
	  this.semicolon();
	}

	function TypeAnnotation(node /*: Object*/) {
	  this.push(":");
	  this.space();
	  if (node.optional) this.push("?");
	  this.print(node.typeAnnotation, node);
	}

	function TypeParameterInstantiation(node /*: Object*/) {
	  // istanbul ignore next

	  var _this = this;

	  this.push("<");
	  this.printJoin(node.params, node, {
	    separator: ", ",
	    iterator: function iterator(node /*: Object*/) {
	      _this.print(node.typeAnnotation, node);
	    }
	  });
	  this.push(">");
	}

	exports.TypeParameterDeclaration = TypeParameterInstantiation;

	function ObjectTypeAnnotation(node /*: Object*/) {
	  // istanbul ignore next

	  var _this2 = this;

	  this.push("{");
	  var props = node.properties.concat(node.callProperties, node.indexers);

	  if (props.length) {
	    this.space();

	    this.printJoin(props, node, {
	      separator: false,
	      indent: true,
	      iterator: function iterator() {
	        if (props.length !== 1) {
	          _this2.semicolon();
	          _this2.space();
	        }
	      }
	    });

	    this.space();
	  }

	  this.push("}");
	}

	function ObjectTypeCallProperty(node /*: Object*/) {
	  if (node["static"]) this.push("static ");
	  this.print(node.value, node);
	}

	function ObjectTypeIndexer(node /*: Object*/) {
	  if (node["static"]) this.push("static ");
	  this.push("[");
	  this.print(node.id, node);
	  this.push(":");
	  this.space();
	  this.print(node.key, node);
	  this.push("]");
	  this.push(":");
	  this.space();
	  this.print(node.value, node);
	}

	function ObjectTypeProperty(node /*: Object*/) {
	  if (node["static"]) this.push("static ");
	  this.print(node.key, node);
	  if (node.optional) this.push("?");
	  if (!t.isFunctionTypeAnnotation(node.value)) {
	    this.push(":");
	    this.space();
	  }
	  this.print(node.value, node);
	}

	function QualifiedTypeIdentifier(node /*: Object*/) {
	  this.print(node.qualification, node);
	  this.push(".");
	  this.print(node.id, node);
	}

	function UnionTypeAnnotation(node /*: Object*/) {
	  this.printJoin(node.types, node, { separator: " | " });
	}

	function TypeCastExpression(node /*: Object*/) {
	  this.push("(");
	  this.print(node.expression, node);
	  this.print(node.typeAnnotation, node);
	  this.push(")");
	}

	function VoidTypeAnnotation() {
	  this.push("void");
	}

/***/ },
/* 2703 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(49)["default"];

	exports.__esModule = true;
	exports.JSXAttribute = JSXAttribute;
	exports.JSXIdentifier = JSXIdentifier;
	exports.JSXNamespacedName = JSXNamespacedName;
	exports.JSXMemberExpression = JSXMemberExpression;
	exports.JSXSpreadAttribute = JSXSpreadAttribute;
	exports.JSXExpressionContainer = JSXExpressionContainer;
	exports.JSXText = JSXText;
	exports.JSXElement = JSXElement;
	exports.JSXOpeningElement = JSXOpeningElement;
	exports.JSXClosingElement = JSXClosingElement;
	exports.JSXEmptyExpression = JSXEmptyExpression;

	function JSXAttribute(node /*: Object*/) {
	  this.print(node.name, node);
	  if (node.value) {
	    this.push("=");
	    this.print(node.value, node);
	  }
	}

	function JSXIdentifier(node /*: Object*/) {
	  this.push(node.name);
	}

	function JSXNamespacedName(node /*: Object*/) {
	  this.print(node.namespace, node);
	  this.push(":");
	  this.print(node.name, node);
	}

	function JSXMemberExpression(node /*: Object*/) {
	  this.print(node.object, node);
	  this.push(".");
	  this.print(node.property, node);
	}

	function JSXSpreadAttribute(node /*: Object*/) {
	  this.push("{...");
	  this.print(node.argument, node);
	  this.push("}");
	}

	function JSXExpressionContainer(node /*: Object*/) {
	  this.push("{");
	  this.print(node.expression, node);
	  this.push("}");
	}

	function JSXText(node /*: Object*/) {
	  this.push(node.value, true);
	}

	function JSXElement(node /*: Object*/) {
	  var open = node.openingElement;
	  this.print(open, node);
	  if (open.selfClosing) return;

	  this.indent();
	  for (var _iterator = (node.children /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var child = _ref;

	    this.print(child, node);
	  }
	  this.dedent();

	  this.print(node.closingElement, node);
	}

	function JSXOpeningElement(node /*: Object*/) {
	  this.push("<");
	  this.print(node.name, node);
	  if (node.attributes.length > 0) {
	    this.push(" ");
	    this.printJoin(node.attributes, node, { separator: " " });
	  }
	  this.push(node.selfClosing ? " />" : ">");
	}

	function JSXClosingElement(node /*: Object*/) {
	  this.push("</");
	  this.print(node.name, node);
	  this.push(">");
	}

	function JSXEmptyExpression() {}

/***/ },
/* 2704 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;
	exports._params = _params;
	exports._method = _method;
	exports.FunctionExpression = FunctionExpression;
	exports.ArrowFunctionExpression = ArrowFunctionExpression;

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	function _params(node /*: Object*/) {
	  // istanbul ignore next

	  var _this = this;

	  this.print(node.typeParameters, node);
	  this.push("(");
	  this.printList(node.params, node, {
	    iterator: function iterator(node) {
	      if (node.optional) _this.push("?");
	      _this.print(node.typeAnnotation, node);
	    }
	  });
	  this.push(")");

	  if (node.returnType) {
	    this.print(node.returnType, node);
	  }
	}

	function _method(node /*: Object*/) {
	  var kind = node.kind;
	  var key = node.key;

	  if (kind === "method" || kind === "init") {
	    if (node.generator) {
	      this.push("*");
	    }
	  }

	  if (kind === "get" || kind === "set") {
	    this.push(kind + " ");
	  }

	  if (node.async) this.push("async ");

	  if (node.computed) {
	    this.push("[");
	    this.print(key, node);
	    this.push("]");
	  } else {
	    this.print(key, node);
	  }

	  this._params(node);
	  this.space();
	  this.print(node.body, node);
	}

	function FunctionExpression(node /*: Object*/) {
	  if (node.async) this.push("async ");
	  this.push("function");
	  if (node.generator) this.push("*");

	  if (node.id) {
	    this.push(" ");
	    this.print(node.id, node);
	  } else {
	    this.space();
	  }

	  this._params(node);
	  this.space();
	  this.print(node.body, node);
	}

	exports.FunctionDeclaration = FunctionExpression;

	function ArrowFunctionExpression(node /*: Object*/) {
	  if (node.async) this.push("async ");

	  if (node.params.length === 1 && t.isIdentifier(node.params[0])) {
	    this.print(node.params[0], node);
	  } else {
	    this._params(node);
	  }

	  this.push(" => ");

	  var bodyNeedsParens = t.isObjectExpression(node.body);

	  if (bodyNeedsParens) {
	    this.push("(");
	  }

	  this.print(node.body, node);

	  if (bodyNeedsParens) {
	    this.push(")");
	  }
	}

/***/ },
/* 2705 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;
	exports.ImportSpecifier = ImportSpecifier;
	exports.ImportDefaultSpecifier = ImportDefaultSpecifier;
	exports.ExportDefaultSpecifier = ExportDefaultSpecifier;
	exports.ExportSpecifier = ExportSpecifier;
	exports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;
	exports.ExportAllDeclaration = ExportAllDeclaration;
	exports.ExportNamedDeclaration = ExportNamedDeclaration;
	exports.ExportDefaultDeclaration = ExportDefaultDeclaration;
	exports.ImportDeclaration = ImportDeclaration;
	exports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	function ImportSpecifier(node /*: Object*/) {
	  this.print(node.imported, node);
	  if (node.local && node.local.name !== node.imported.name) {
	    this.push(" as ");
	    this.print(node.local, node);
	  }
	}

	function ImportDefaultSpecifier(node /*: Object*/) {
	  this.print(node.local, node);
	}

	function ExportDefaultSpecifier(node /*: Object*/) {
	  this.print(node.exported, node);
	}

	function ExportSpecifier(node /*: Object*/) {
	  this.print(node.local, node);
	  if (node.exported && node.local.name !== node.exported.name) {
	    this.push(" as ");
	    this.print(node.exported, node);
	  }
	}

	function ExportNamespaceSpecifier(node /*: Object*/) {
	  this.push("* as ");
	  this.print(node.exported, node);
	}

	function ExportAllDeclaration(node /*: Object*/) {
	  this.push("export *");
	  if (node.exported) {
	    this.push(" as ");
	    this.print(node.exported, node);
	  }
	  this.push(" from ");
	  this.print(node.source, node);
	  this.semicolon();
	}

	function ExportNamedDeclaration() {
	  this.push("export ");
	  ExportDeclaration.apply(this, arguments);
	}

	function ExportDefaultDeclaration() {
	  this.push("export default ");
	  ExportDeclaration.apply(this, arguments);
	}

	function ExportDeclaration(node /*: Object*/) {
	  if (node.declaration) {
	    var declar = node.declaration;
	    this.print(declar, node);
	    if (t.isStatement(declar) || t.isFunction(declar) || t.isClass(declar)) return;
	  } else {
	    if (node.exportKind === "type") {
	      this.push("type ");
	    }

	    var specifiers = node.specifiers.slice(0);

	    // print "special" specifiers first
	    var hasSpecial = false;
	    while (true) {
	      var first = specifiers[0];
	      if (t.isExportDefaultSpecifier(first) || t.isExportNamespaceSpecifier(first)) {
	        hasSpecial = true;
	        this.print(specifiers.shift(), node);
	        if (specifiers.length) {
	          this.push(", ");
	        }
	      } else {
	        break;
	      }
	    }

	    if (specifiers.length || !specifiers.length && !hasSpecial) {
	      this.push("{");
	      if (specifiers.length) {
	        this.space();
	        this.printJoin(specifiers, node, { separator: ", " });
	        this.space();
	      }
	      this.push("}");
	    }

	    if (node.source) {
	      this.push(" from ");
	      this.print(node.source, node);
	    }
	  }

	  this.ensureSemicolon();
	}

	function ImportDeclaration(node /*: Object*/) {
	  this.push("import ");

	  if (node.importKind === "type" || node.importKind === "typeof") {
	    this.push(node.importKind + " ");
	  }

	  var specifiers = node.specifiers.slice(0);
	  if (specifiers && specifiers.length) {
	    // print "special" specifiers first
	    while (true) {
	      var first = specifiers[0];
	      if (t.isImportDefaultSpecifier(first) || t.isImportNamespaceSpecifier(first)) {
	        this.print(specifiers.shift(), node);
	        if (specifiers.length) {
	          this.push(", ");
	        }
	      } else {
	        break;
	      }
	    }

	    if (specifiers.length) {
	      this.push("{");
	      this.space();
	      this.printJoin(specifiers, node, { separator: ", " });
	      this.space();
	      this.push("}");
	    }

	    this.push(" from ");
	  }

	  this.print(node.source, node);
	  this.semicolon();
	}

	function ImportNamespaceSpecifier(node /*: Object*/) {
	  this.push("* as ");
	  this.print(node.local, node);
	}

/***/ },
/* 2706 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(49)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;
	exports.WithStatement = WithStatement;
	exports.IfStatement = IfStatement;
	exports.ForStatement = ForStatement;
	exports.WhileStatement = WhileStatement;
	exports.DoWhileStatement = DoWhileStatement;
	exports.LabeledStatement = LabeledStatement;
	exports.TryStatement = TryStatement;
	exports.CatchClause = CatchClause;
	exports.SwitchStatement = SwitchStatement;
	exports.SwitchCase = SwitchCase;
	exports.DebuggerStatement = DebuggerStatement;
	exports.VariableDeclaration = VariableDeclaration;
	exports.VariableDeclarator = VariableDeclarator;

	var _repeating = __webpack_require__(696);

	var _repeating2 = _interopRequireDefault(_repeating);

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	function WithStatement(node /*: Object*/) {
	  this.keyword("with");
	  this.push("(");
	  this.print(node.object, node);
	  this.push(")");
	  this.printBlock(node);
	}

	function IfStatement(node /*: Object*/) {
	  this.keyword("if");
	  this.push("(");
	  this.print(node.test, node);
	  this.push(")");
	  this.space();

	  var needsBlock = node.alternate && t.isIfStatement(node.consequent);
	  if (needsBlock) {
	    this.push("{");
	    this.newline();
	    this.indent();
	  }

	  this.printAndIndentOnComments(node.consequent, node);

	  if (needsBlock) {
	    this.dedent();
	    this.newline();
	    this.push("}");
	  }

	  if (node.alternate) {
	    if (this.isLast("}")) this.space();
	    this.push("else ");
	    this.printAndIndentOnComments(node.alternate, node);
	  }
	}

	function ForStatement(node /*: Object*/) {
	  this.keyword("for");
	  this.push("(");

	  this._inForStatementInit = true;
	  this.print(node.init, node);
	  this._inForStatementInit = false;
	  this.push(";");

	  if (node.test) {
	    this.space();
	    this.print(node.test, node);
	  }
	  this.push(";");

	  if (node.update) {
	    this.space();
	    this.print(node.update, node);
	  }

	  this.push(")");
	  this.printBlock(node);
	}

	function WhileStatement(node /*: Object*/) {
	  this.keyword("while");
	  this.push("(");
	  this.print(node.test, node);
	  this.push(")");
	  this.printBlock(node);
	}

	var buildForXStatement = function buildForXStatement(op) {
	  return function (node /*: Object*/) {
	    this.keyword("for");
	    this.push("(");
	    this.print(node.left, node);
	    this.push(" " + op + " ");
	    this.print(node.right, node);
	    this.push(")");
	    this.printBlock(node);
	  };
	};

	var ForInStatement = buildForXStatement("in");
	exports.ForInStatement = ForInStatement;
	var ForOfStatement = buildForXStatement("of");

	exports.ForOfStatement = ForOfStatement;

	function DoWhileStatement(node /*: Object*/) {
	  this.push("do ");
	  this.print(node.body, node);
	  this.space();
	  this.keyword("while");
	  this.push("(");
	  this.print(node.test, node);
	  this.push(");");
	}

	function buildLabelStatement(prefix) {
	  var key = arguments.length <= 1 || arguments[1] === undefined ? "label" : arguments[1];

	  return function (node /*: Object*/) {
	    this.push(prefix);

	    var label = node[key];
	    if (label) {
	      this.push(" ");
	      var terminatorState = this.startTerminatorless();
	      this.print(label, node);
	      this.endTerminatorless(terminatorState);
	    }

	    this.semicolon();
	  };
	}

	var ContinueStatement = buildLabelStatement("continue");
	exports.ContinueStatement = ContinueStatement;
	var ReturnStatement = buildLabelStatement("return", "argument");
	exports.ReturnStatement = ReturnStatement;
	var BreakStatement = buildLabelStatement("break");
	exports.BreakStatement = BreakStatement;
	var ThrowStatement = buildLabelStatement("throw", "argument");

	exports.ThrowStatement = ThrowStatement;

	function LabeledStatement(node /*: Object*/) {
	  this.print(node.label, node);
	  this.push(": ");
	  this.print(node.body, node);
	}

	function TryStatement(node /*: Object*/) {
	  this.keyword("try");
	  this.print(node.block, node);
	  this.space();

	  // Esprima bug puts the catch clause in a `handlers` array.
	  // see https://code.google.com/p/esprima/issues/detail?id=433
	  // We run into this from regenerator generated ast.
	  if (node.handlers) {
	    this.print(node.handlers[0], node);
	  } else {
	    this.print(node.handler, node);
	  }

	  if (node.finalizer) {
	    this.space();
	    this.push("finally ");
	    this.print(node.finalizer, node);
	  }
	}

	function CatchClause(node /*: Object*/) {
	  this.keyword("catch");
	  this.push("(");
	  this.print(node.param, node);
	  this.push(") ");
	  this.print(node.body, node);
	}

	function SwitchStatement(node /*: Object*/) {
	  this.keyword("switch");
	  this.push("(");
	  this.print(node.discriminant, node);
	  this.push(")");
	  this.space();
	  this.push("{");

	  this.printSequence(node.cases, node, {
	    indent: true,
	    addNewlines: function addNewlines(leading, cas) {
	      if (!leading && node.cases[node.cases.length - 1] === cas) return -1;
	    }
	  });

	  this.push("}");
	}

	function SwitchCase(node /*: Object*/) {
	  if (node.test) {
	    this.push("case ");
	    this.print(node.test, node);
	    this.push(":");
	  } else {
	    this.push("default:");
	  }

	  if (node.consequent.length) {
	    this.newline();
	    this.printSequence(node.consequent, node, { indent: true });
	  }
	}

	function DebuggerStatement() {
	  this.push("debugger;");
	}

	function VariableDeclaration(node /*: Object*/, parent /*: Object*/) {
	  this.push(node.kind + " ");

	  var hasInits = false;
	  // don't add whitespace to loop heads
	  if (!t.isFor(parent)) {
	    for (var _iterator = (node.declarations /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var declar = _ref;

	      if (declar.init) {
	        // has an init so let's split it up over multiple lines
	        hasInits = true;
	      }
	    }
	  }

	  //
	  // use a pretty separator when we aren't in compact mode, have initializers and don't have retainLines on
	  // this will format declarations like:
	  //
	  //   let foo = "bar", bar = "foo";
	  //
	  // into
	  //
	  //   let foo = "bar",
	  //       bar = "foo";
	  //

	  var sep = undefined;
	  if (!this.format.compact && !this.format.concise && hasInits && !this.format.retainLines) {
	    sep = ",\n" + _repeating2["default"](" ", node.kind.length + 1);
	  }

	  //

	  this.printList(node.declarations, node, { separator: sep });

	  if (t.isFor(parent)) {
	    // don't give semicolons to these nodes since they'll be inserted in the parent generator
	    if (parent.left === node || parent.init === node) return;
	  }

	  this.semicolon();
	}

	function VariableDeclarator(node /*: Object*/) {
	  this.print(node.id, node);
	  this.print(node.id.typeAnnotation, node);
	  if (node.init) {
	    this.space();
	    this.push("=");
	    this.space();
	    this.print(node.init, node);
	  }
	}

/***/ },
/* 2707 */
/***/ function(module, exports) {

	/* @flow */

	"use strict";

	exports.__esModule = true;
	exports.TaggedTemplateExpression = TaggedTemplateExpression;
	exports.TemplateElement = TemplateElement;
	exports.TemplateLiteral = TemplateLiteral;

	function TaggedTemplateExpression(node /*: Object*/) {
	  this.print(node.tag, node);
	  this.print(node.quasi, node);
	}

	function TemplateElement(node /*: Object*/) {
	  this._push(node.value.raw);
	}

	function TemplateLiteral(node /*: Object*/) {
	  this.push("`");

	  var quasis = node.quasis;

	  for (var i = 0; i < quasis.length; i++) {
	    this.print(quasis[i], node);

	    if (i + 1 < quasis.length) {
	      this._push("${ ");
	      this.print(node.expressions[i], node);
	      this.push(" }");
	    }
	  }

	  this._push("`");
	}

/***/ },
/* 2708 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;
	exports.NullableTypeAnnotation = NullableTypeAnnotation;
	exports.UpdateExpression = UpdateExpression;
	exports.ObjectExpression = ObjectExpression;
	exports.Binary = Binary;
	exports.BinaryExpression = BinaryExpression;
	exports.SequenceExpression = SequenceExpression;
	exports.YieldExpression = YieldExpression;
	exports.ClassExpression = ClassExpression;
	exports.UnaryLike = UnaryLike;
	exports.FunctionExpression = FunctionExpression;
	exports.ArrowFunctionExpression = ArrowFunctionExpression;
	exports.ConditionalExpression = ConditionalExpression;
	exports.AssignmentExpression = AssignmentExpression;

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	var PRECEDENCE = {
	  "||": 0,
	  "&&": 1,
	  "|": 2,
	  "^": 3,
	  "&": 4,
	  "==": 5,
	  "===": 5,
	  "!=": 5,
	  "!==": 5,
	  "<": 6,
	  ">": 6,
	  "<=": 6,
	  ">=": 6,
	  "in": 6,
	  "instanceof": 6,
	  ">>": 7,
	  "<<": 7,
	  ">>>": 7,
	  "+": 8,
	  "-": 8,
	  "*": 9,
	  "/": 9,
	  "%": 9,
	  "**": 10
	};

	function NullableTypeAnnotation(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  return t.isArrayTypeAnnotation(parent);
	}

	exports.FunctionTypeAnnotation = NullableTypeAnnotation;

	function UpdateExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isMemberExpression(parent) && parent.object === node) {
	    // (foo++).test()
	    return true;
	  }

	  return false;
	}

	function ObjectExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isExpressionStatement(parent)) {
	    // ({ foo: "bar" });
	    return true;
	  }

	  if (t.isMemberExpression(parent) && parent.object === node) {
	    // ({ foo: "bar" }).foo
	    return true;
	  }

	  return false;
	}

	function Binary(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if ((t.isCallExpression(parent) || t.isNewExpression(parent)) && parent.callee === node) {
	    return true;
	  }

	  if (t.isUnaryLike(parent)) {
	    return true;
	  }

	  if (t.isMemberExpression(parent) && parent.object === node) {
	    return true;
	  }

	  if (t.isBinary(parent)) {
	    var parentOp = parent.operator;
	    var parentPos = PRECEDENCE[parentOp];

	    var nodeOp = node.operator;
	    var nodePos = PRECEDENCE[nodeOp];

	    if (parentPos > nodePos) {
	      return true;
	    }

	    // Logical expressions with the same precedence don't need parens.
	    if (parentPos === nodePos && parent.right === node && !t.isLogicalExpression(parent)) {
	      return true;
	    }
	  }

	  return false;
	}

	function BinaryExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (node.operator === "in") {
	    // let i = (1 in []);
	    if (t.isVariableDeclarator(parent)) {
	      return true;
	    }

	    // for ((1 in []);;);
	    if (t.isFor(parent)) {
	      return true;
	    }
	  }

	  return false;
	}

	function SequenceExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isForStatement(parent)) {
	    // Although parentheses wouldn"t hurt around sequence
	    // expressions in the head of for loops, traditional style
	    // dictates that e.g. i++, j++ should not be wrapped with
	    // parentheses.
	    return false;
	  }

	  if (t.isExpressionStatement(parent) && parent.expression === node) {
	    return false;
	  }

	  if (t.isReturnStatement(parent)) {
	    return false;
	  }

	  // Otherwise err on the side of overparenthesization, adding
	  // explicit exceptions above if this proves overzealous.
	  return true;
	}

	function YieldExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  return t.isBinary(parent) || t.isUnaryLike(parent) || t.isCallExpression(parent) || t.isMemberExpression(parent) || t.isNewExpression(parent) || t.isConditionalExpression(parent) || t.isYieldExpression(parent);
	}

	function ClassExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  // (class {});
	  if (t.isExpressionStatement(parent)) {
	    return true;
	  }

	  // export default (class () {});
	  if (t.isExportDeclaration(parent)) {
	    return true;
	  }

	  return false;
	}

	function UnaryLike(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isMemberExpression(parent, { object: node })) {
	    return true;
	  }

	  if (t.isCallExpression(parent, { callee: node }) || t.isNewExpression(parent, { callee: node })) {
	    return true;
	  }

	  return false;
	}

	function FunctionExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  // (function () {});
	  if (t.isExpressionStatement(parent)) {
	    return true;
	  }

	  return ArrowFunctionExpression(node, parent);
	}

	function ArrowFunctionExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  // export default (function () {});
	  if (t.isExportDeclaration(parent)) {
	    return true;
	  }

	  return UnaryLike(node, parent);
	}

	function ConditionalExpression(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isUnaryLike(parent)) {
	    return true;
	  }

	  if (t.isBinary(parent)) {
	    return true;
	  }

	  if (t.isConditionalExpression(parent, { test: node })) {
	    return true;
	  }

	  return UnaryLike(node, parent);
	}

	function AssignmentExpression(node /*: Object*/) /*: boolean*/ {
	  if (t.isObjectPattern(node.left)) {
	    return true;
	  } else {
	    return ConditionalExpression.apply(undefined, arguments);
	  }
	}

/***/ },
/* 2709 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(8)["default"];

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	var _lodashLangIsBoolean = __webpack_require__(1595);

	var _lodashLangIsBoolean2 = _interopRequireDefault(_lodashLangIsBoolean);

	var _lodashCollectionEach = __webpack_require__(705);

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _lodashCollectionMap = __webpack_require__(2831);

	var _lodashCollectionMap2 = _interopRequireDefault(_lodashCollectionMap);

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	/**
	 * Crawl a node to test if it contains a CallExpression, a Function, or a Helper.
	 *
	 * @example
	 * crawl(node)
	 * // { hasCall: false, hasFunction: true, hasHelper: false }
	 */

	function crawl(node) {
	  var state = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  if (t.isMemberExpression(node)) {
	    crawl(node.object, state);
	    if (node.computed) crawl(node.property, state);
	  } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
	    crawl(node.left, state);
	    crawl(node.right, state);
	  } else if (t.isCallExpression(node)) {
	    state.hasCall = true;
	    crawl(node.callee, state);
	  } else if (t.isFunction(node)) {
	    state.hasFunction = true;
	  } else if (t.isIdentifier(node)) {
	    state.hasHelper = state.hasHelper || isHelper(node.callee);
	  }

	  return state;
	}

	/**
	 * Test if a node is or has a helper.
	 */

	function isHelper(node) {
	  if (t.isMemberExpression(node)) {
	    return isHelper(node.object) || isHelper(node.property);
	  } else if (t.isIdentifier(node)) {
	    return node.name === "require" || node.name[0] === "_";
	  } else if (t.isCallExpression(node)) {
	    return isHelper(node.callee);
	  } else if (t.isBinary(node) || t.isAssignmentExpression(node)) {
	    return t.isIdentifier(node.left) && isHelper(node.left) || isHelper(node.right);
	  } else {
	    return false;
	  }
	}

	function isType(node) {
	  return t.isLiteral(node) || t.isObjectExpression(node) || t.isArrayExpression(node) || t.isIdentifier(node) || t.isMemberExpression(node);
	}

	/**
	 * Tests for node types that need whitespace.
	 */

	exports.nodes = {

	  /**
	   * Test if AssignmentExpression needs whitespace.
	   */

	  AssignmentExpression: function AssignmentExpression(node) {
	    var state = crawl(node.right);
	    if (state.hasCall && state.hasHelper || state.hasFunction) {
	      return {
	        before: state.hasFunction,
	        after: true
	      };
	    }
	  },

	  /**
	   * Test if SwitchCase needs whitespace.
	   */

	  SwitchCase: function SwitchCase(node, parent) {
	    return {
	      before: node.consequent.length || parent.cases[0] === node
	    };
	  },

	  /**
	   * Test if LogicalExpression needs whitespace.
	   */

	  LogicalExpression: function LogicalExpression(node) {
	    if (t.isFunction(node.left) || t.isFunction(node.right)) {
	      return {
	        after: true
	      };
	    }
	  },

	  /**
	   * Test if Literal needs whitespace.
	   */

	  Literal: function Literal(node) {
	    if (node.value === "use strict") {
	      return {
	        after: true
	      };
	    }
	  },

	  /**
	   * Test if CallExpression needs whitespace.
	   */

	  CallExpression: function CallExpression(node) {
	    if (t.isFunction(node.callee) || isHelper(node)) {
	      return {
	        before: true,
	        after: true
	      };
	    }
	  },

	  /**
	   * Test if VariableDeclaration needs whitespace.
	   */

	  VariableDeclaration: function VariableDeclaration(node) {
	    for (var i = 0; i < node.declarations.length; i++) {
	      var declar = node.declarations[i];

	      var enabled = isHelper(declar.id) && !isType(declar.init);
	      if (!enabled) {
	        var state = crawl(declar.init);
	        enabled = isHelper(declar.init) && state.hasCall || state.hasFunction;
	      }

	      if (enabled) {
	        return {
	          before: true,
	          after: true
	        };
	      }
	    }
	  },

	  /**
	   * Test if IfStatement needs whitespace.
	   */

	  IfStatement: function IfStatement(node) {
	    if (t.isBlockStatement(node.consequent)) {
	      return {
	        before: true,
	        after: true
	      };
	    }
	  }
	};

	/**
	 * Test if Property or SpreadProperty needs whitespace.
	 */

	exports.nodes.ObjectProperty = exports.nodes.ObjectMethod = exports.nodes.SpreadProperty = function (node, parent) {
	  if (parent.properties[0] === node) {
	    return {
	      before: true
	    };
	  }
	};

	/**
	 * Returns lists from node types that need whitespace.
	 */

	exports.list = {

	  /**
	   * Return VariableDeclaration declarations init properties.
	   */

	  VariableDeclaration: function VariableDeclaration(node) {
	    return _lodashCollectionMap2["default"](node.declarations, "init");
	  },

	  /**
	   * Return VariableDeclaration elements.
	   */

	  ArrayExpression: function ArrayExpression(node) {
	    return node.elements;
	  },

	  /**
	   * Return VariableDeclaration properties.
	   */

	  ObjectExpression: function ObjectExpression(node) {
	    return node.properties;
	  }
	};

	/**
	 * Add whitespace tests for nodes and their aliases.
	 */

	_lodashCollectionEach2["default"]({
	  Function: true,
	  Class: true,
	  Loop: true,
	  LabeledStatement: true,
	  SwitchStatement: true,
	  TryStatement: true
	}, function (amounts, type) {
	  if (_lodashLangIsBoolean2["default"](amounts)) {
	    amounts = { after: amounts, before: amounts };
	  }

	  _lodashCollectionEach2["default"]([type].concat(t.FLIPPED_ALIAS_KEYS[type] || []), function (type) {
	    exports.nodes[type] = function () {
	      return amounts;
	    };
	  });
	});

/***/ },
/* 2710 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	/**
	 * Track current position in code generation.
	 */

	"use strict";

	var _classCallCheck = __webpack_require__(60)["default"];

	exports.__esModule = true;

	var Position = (function () {
	  function Position() {
	    _classCallCheck(this, Position);

	    this.line = 1;
	    this.column = 0;
	  }

	  /**
	   * Push a string to the current position, mantaining the current line and column.
	   */

	  Position.prototype.push = function push(str /*: string*/) /*: void*/ {
	    for (var i = 0; i < str.length; i++) {
	      if (str[i] === "\n") {
	        this.line++;
	        this.column = 0;
	      } else {
	        this.column++;
	      }
	    }
	  };

	  /**
	   * Unshift a string from the current position, mantaining the current line and column.
	   */

	  Position.prototype.unshift = function unshift(str /*: string*/) /*: void*/ {
	    for (var i = 0; i < str.length; i++) {
	      if (str[i] === "\n") {
	        this.line--;
	      } else {
	        this.column--;
	      }
	    }
	  };

	  return Position;
	})();

	exports["default"] = Position;
	module.exports = exports["default"];

/***/ },
/* 2711 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _inherits = __webpack_require__(377)["default"];

	var _classCallCheck = __webpack_require__(60)["default"];

	var _getIterator = __webpack_require__(49)["default"];

	var _Object$assign = __webpack_require__(2724)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;

	var _repeating = __webpack_require__(696);

	var _repeating2 = _interopRequireDefault(_repeating);

	var _buffer = __webpack_require__(2698);

	var _buffer2 = _interopRequireDefault(_buffer);

	var _node = __webpack_require__(1553);

	var _node2 = _interopRequireDefault(_node);

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	var Printer = (function (_Buffer) {
	  _inherits(Printer, _Buffer);

	  function Printer() {
	    _classCallCheck(this, Printer);

	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    _Buffer.call.apply(_Buffer, [this].concat(args));
	    this.insideAux = false;
	    this.printAuxAfterOnNextUserNode = false;
	  }

	  Printer.prototype.print = function print(node, parent) {
	    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    if (!node) return;

	    this._lastPrintedIsEmptyStatement = false;

	    if (parent && parent._compact) {
	      node._compact = true;
	    }

	    var oldInAux = this.insideAux;
	    this.insideAux = !node.loc;

	    var oldConcise = this.format.concise;
	    if (node._compact) {
	      this.format.concise = true;
	    }

	    var printMethod = this[node.type];
	    if (!printMethod) {
	      throw new ReferenceError("unknown node of type " + JSON.stringify(node.type) + " with constructor " + JSON.stringify(node && node.constructor.name));
	    }

	    if (node.loc) this.printAuxAfterComment();
	    this.printAuxBeforeComment(oldInAux);

	    var needsParens = _node2["default"].needsParens(node, parent);
	    if (needsParens) this.push("(");

	    this.printLeadingComments(node, parent);

	    this.catchUp(node);

	    this._printNewline(true, node, parent, opts);

	    if (opts.before) opts.before();

	    this.map.mark(node, "start");

	    this._print(node, parent);

	    // Check again if any of our children may have left an aux comment on the stack
	    if (node.loc) this.printAuxAfterComment();

	    this.printTrailingComments(node, parent);

	    if (needsParens) this.push(")");

	    // end
	    this.map.mark(node, "end");
	    if (opts.after) opts.after();

	    this.format.concise = oldConcise;
	    this.insideAux = oldInAux;

	    this._printNewline(false, node, parent, opts);
	  };

	  Printer.prototype.printAuxBeforeComment = function printAuxBeforeComment(wasInAux) {
	    var comment = this.format.auxiliaryCommentBefore;
	    if (!wasInAux && this.insideAux && !this.printAuxAfterOnNextUserNode) {
	      this.printAuxAfterOnNextUserNode = true;
	      if (comment) this.printComment({
	        type: "CommentBlock",
	        value: comment
	      });
	    }
	  };

	  Printer.prototype.printAuxAfterComment = function printAuxAfterComment() {
	    if (this.printAuxAfterOnNextUserNode) {
	      this.printAuxAfterOnNextUserNode = false;
	      var comment = this.format.auxiliaryCommentAfter;
	      if (comment) this.printComment({
	        type: "CommentBlock",
	        value: comment
	      });
	    }
	  };

	  Printer.prototype.getPossibleRaw = function getPossibleRaw(node) {
	    var extra = node.extra;
	    if (extra && extra.raw != null && extra.rawValue != null && node.value === extra.rawValue) {
	      return extra.raw;
	    }
	  };

	  Printer.prototype._print = function _print(node, parent) {
	    var extra = this.getPossibleRaw(node);
	    if (extra) {
	      this.push("");
	      this._push(extra);
	    } else {
	      var printMethod = this[node.type];
	      printMethod.call(this, node, parent);
	    }
	  };

	  Printer.prototype.printJoin = function printJoin(nodes /*: ?Array*/, parent /*: Object*/) {
	    // istanbul ignore next

	    var _this = this;

	    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    if (!nodes || !nodes.length) return;

	    var len = nodes.length;
	    var node = undefined,
	        i = undefined;

	    if (opts.indent) this.indent();

	    var printOpts = {
	      statement: opts.statement,
	      addNewlines: opts.addNewlines,
	      after: function after() {
	        if (opts.iterator) {
	          opts.iterator(node, i);
	        }

	        if (opts.separator && i < len - 1) {
	          _this.push(opts.separator);
	        }
	      }
	    };

	    for (i = 0; i < nodes.length; i++) {
	      node = nodes[i];
	      this.print(node, parent, printOpts);
	    }

	    if (opts.indent) this.dedent();
	  };

	  Printer.prototype.printAndIndentOnComments = function printAndIndentOnComments(node, parent) {
	    var indent = !!node.leadingComments;
	    if (indent) this.indent();
	    this.print(node, parent);
	    if (indent) this.dedent();
	  };

	  Printer.prototype.printBlock = function printBlock(parent) {
	    var node = parent.body;

	    if (!t.isEmptyStatement(node)) {
	      this.space();
	    }

	    this.print(node, parent);
	  };

	  Printer.prototype.generateComment = function generateComment(comment) {
	    var val = comment.value;
	    if (comment.type === "CommentLine") {
	      val = "//" + val;
	    } else {
	      val = "/*" + val + "*/";
	    }
	    return val;
	  };

	  Printer.prototype.printTrailingComments = function printTrailingComments(node, parent) {
	    this.printComments(this.getComments("trailingComments", node, parent));
	  };

	  Printer.prototype.printLeadingComments = function printLeadingComments(node, parent) {
	    this.printComments(this.getComments("leadingComments", node, parent));
	  };

	  Printer.prototype.printInnerComments = function printInnerComments(node) {
	    var indent = arguments.length <= 1 || arguments[1] === undefined ? true : arguments[1];

	    if (!node.innerComments) return;
	    if (indent) this.indent();
	    this.printComments(node.innerComments);
	    if (indent) this.dedent();
	  };

	  Printer.prototype.printSequence = function printSequence(nodes, parent) {
	    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    opts.statement = true;
	    return this.printJoin(nodes, parent, opts);
	  };

	  Printer.prototype.printList = function printList(items, parent) {
	    var opts = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];

	    if (opts.separator == null) {
	      opts.separator = ",";
	      if (!this.format.compact) opts.separator += " ";
	    }

	    return this.printJoin(items, parent, opts);
	  };

	  Printer.prototype._printNewline = function _printNewline(leading, node, parent, opts) {
	    if (!opts.statement && !_node2["default"].isUserWhitespacable(node, parent)) {
	      return;
	    }

	    var lines = 0;

	    if (node.start != null && !node._ignoreUserWhitespace && this.tokens.length) {
	      // user node
	      if (leading) {
	        lines = this.whitespace.getNewlinesBefore(node);
	      } else {
	        lines = this.whitespace.getNewlinesAfter(node);
	      }
	    } else {
	      // generated node
	      if (!leading) lines++; // always include at least a single line after
	      if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;

	      var needs = _node2["default"].needsWhitespaceAfter;
	      if (leading) needs = _node2["default"].needsWhitespaceBefore;
	      if (needs(node, parent)) lines++;

	      // generated nodes can't add starting file whitespace
	      if (!this.buf) lines = 0;
	    }

	    this.newline(lines);
	  };

	  Printer.prototype.getComments = function getComments(key, node) {
	    return node && node[key] || [];
	  };

	  Printer.prototype.shouldPrintComment = function shouldPrintComment(comment) {
	    if (this.format.shouldPrintComment) {
	      return this.format.shouldPrintComment(comment.value);
	    } else {
	      if (comment.value.indexOf("@license") >= 0 || comment.value.indexOf("@preserve") >= 0) {
	        return true;
	      } else {
	        return this.format.comments;
	      }
	    }
	  };

	  Printer.prototype.printComment = function printComment(comment) {
	    if (!this.shouldPrintComment(comment)) return;

	    if (comment.ignore) return;
	    comment.ignore = true;

	    if (comment.start != null) {
	      if (this.printedCommentStarts[comment.start]) return;
	      this.printedCommentStarts[comment.start] = true;
	    }

	    this.catchUp(comment);

	    // whitespace before
	    this.newline(this.whitespace.getNewlinesBefore(comment));

	    var column = this.position.column;
	    var val = this.generateComment(comment);

	    if (column && !this.isLast(["\n", " ", "[", "{"])) {
	      this._push(" ");
	      column++;
	    }

	    //
	    if (comment.type === "CommentBlock" && this.format.indent.adjustMultilineComment) {
	      var offset = comment.loc && comment.loc.start.column;
	      if (offset) {
	        var newlineRegex = new RegExp("\\n\\s{1," + offset + "}", "g");
	        val = val.replace(newlineRegex, "\n");
	      }

	      var indent = Math.max(this.indentSize(), column);
	      val = val.replace(/\n/g, "\n" + _repeating2["default"](" ", indent));
	    }

	    if (column === 0) {
	      val = this.getIndent() + val;
	    }

	    // force a newline for line comments when retainLines is set in case the next printed node
	    // doesn't catch up
	    if ((this.format.compact || this.format.retainLines) && comment.type === "CommentLine") {
	      val += "\n";
	    }

	    //
	    this._push(val);

	    // whitespace after
	    this.newline(this.whitespace.getNewlinesAfter(comment));
	  };

	  Printer.prototype.printComments = function printComments(comments /*:: ?: Array<Object>*/) {
	    if (!comments || !comments.length) return;

	    for (var _iterator = comments, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var comment = _ref;

	      this.printComment(comment);
	    }
	  };

	  return Printer;
	})(_buffer2["default"]);

	exports["default"] = Printer;
	var _arr = [__webpack_require__(2707), __webpack_require__(2701), __webpack_require__(2706), __webpack_require__(2700), __webpack_require__(2704), __webpack_require__(2705), __webpack_require__(1551), __webpack_require__(2702), __webpack_require__(2699), __webpack_require__(2703)];

	for (var _i2 = 0; _i2 < _arr.length; _i2++) {
	  var generator = _arr[_i2];
	  _Object$assign(Printer.prototype, generator);
	}
	module.exports = exports["default"];

/***/ },
/* 2712 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _classCallCheck = __webpack_require__(60)["default"];

	var _interopRequireDefault = __webpack_require__(8)["default"];

	var _interopRequireWildcard = __webpack_require__(14)["default"];

	exports.__esModule = true;

	var _sourceMap = __webpack_require__(1606);

	var _sourceMap2 = _interopRequireDefault(_sourceMap);

	var _babelTypes = __webpack_require__(31);

	var t = _interopRequireWildcard(_babelTypes);

	/**
	 * Build a sourcemap.
	 */

	var SourceMap = (function () {
	  function SourceMap(position, opts, code) {
	    _classCallCheck(this, SourceMap);

	    this.position = position;
	    this.opts = opts;

	    if (opts.sourceMaps) {
	      this.map = new _sourceMap2["default"].SourceMapGenerator({
	        file: opts.sourceMapTarget,
	        sourceRoot: opts.sourceRoot
	      });

	      this.map.setSourceContent(opts.sourceFileName, code);
	    } else {
	      this.map = null;
	    }
	  }

	  /**
	   * Get the sourcemap.
	   */

	  SourceMap.prototype.get = function get() {
	    var map = this.map;
	    if (map) {
	      return map.toJSON();
	    } else {
	      return map;
	    }
	  };

	  /**
	   * Mark a node's generated position, and add it to the sourcemap.
	   */

	  SourceMap.prototype.mark = function mark(node, type) {
	    var loc = node.loc;
	    if (!loc) return; // no location info

	    var map = this.map;
	    if (!map) return; // no source map

	    if (t.isProgram(node) || t.isFile(node)) return; // illegal mapping nodes

	    var position = this.position;

	    var generated = {
	      line: position.line,
	      column: position.column
	    };

	    var original = loc[type];

	    map.addMapping({
	      source: this.opts.sourceFileName,
	      generated: generated,
	      original: original
	    });
	  };

	  return SourceMap;
	})();

	exports["default"] = SourceMap;
	module.exports = exports["default"];

/***/ },
/* 2713 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Returns `i`th number from `base`, continuing from 0 when `max` is reached.
	 * Useful for shifting `for` loop by a fixed number but going over all items.
	 */

	"use strict";

	var _classCallCheck = __webpack_require__(60)["default"];

	exports.__esModule = true;
	function getLookupIndex(i /*: number*/, base /*: number*/, max /*: number*/) /*: number*/ {
	  i += base;

	  if (i >= max) {
	    i -= max;
	  }

	  return i;
	}

	/**
	 * Get whitespace around tokens.
	 */

	var Whitespace = (function () {
	  function Whitespace(tokens) {
	    _classCallCheck(this, Whitespace);

	    this.tokens = tokens;
	    this.used = {};

	    // Profiling this code shows that while generator passes over it, indexes
	    // returned by `getNewlinesBefore` and `getNewlinesAfter` are always increasing.

	    // We use this implementation detail for an optimization: instead of always
	    // starting to look from `this.tokens[0]`, we will start `for` loops from the
	    // previous successful match. We will enumerate all tokens—but the common
	    // case will be much faster.

	    this._lastFoundIndex = 0;
	  }

	  /**
	   * Count all the newlines before a node.
	   */

	  Whitespace.prototype.getNewlinesBefore = function getNewlinesBefore(node) {
	    var startToken = undefined;
	    var endToken = undefined;
	    var tokens = this.tokens;

	    for (var j = 0; j < tokens.length; j++) {
	      // optimize for forward traversal by shifting for loop index
	      var i = getLookupIndex(j, this._lastFoundIndex, this.tokens.length);
	      var token = tokens[i];

	      // this is the token this node starts with
	      if (node.start === token.start) {
	        startToken = tokens[i - 1];
	        endToken = token;

	        this._lastFoundIndex = i;
	        break;
	      }
	    }

	    return this.getNewlinesBetween(startToken, endToken);
	  };

	  /**
	   * Count all the newlines after a node.
	   */

	  Whitespace.prototype.getNewlinesAfter = function getNewlinesAfter(node) {
	    var startToken = undefined;
	    var endToken = undefined;
	    var tokens = this.tokens;

	    for (var j = 0; j < tokens.length; j++) {
	      // optimize for forward traversal by shifting for loop index
	      var i = getLookupIndex(j, this._lastFoundIndex, this.tokens.length);
	      var token = tokens[i];

	      // this is the token this node ends with
	      if (node.end === token.end) {
	        startToken = token;
	        endToken = tokens[i + 1];
	        if (endToken.type.label === ",") endToken = tokens[i + 2];

	        this._lastFoundIndex = i;
	        break;
	      }
	    }

	    if (endToken && endToken.type.label === "eof") {
	      return 1;
	    } else {
	      var lines = this.getNewlinesBetween(startToken, endToken);
	      if (node.type === "CommentLine" && !lines) {
	        // line comment
	        return 1;
	      } else {
	        return lines;
	      }
	    }
	  };

	  /**
	   * Count all the newlines between two tokens.
	   */

	  Whitespace.prototype.getNewlinesBetween = function getNewlinesBetween(startToken, endToken) {
	    if (!endToken || !endToken.loc) return 0;

	    var start = startToken ? startToken.loc.end.line : 1;
	    var end = endToken.loc.start.line;
	    var lines = 0;

	    for (var line = start; line < end; line++) {
	      if (typeof this.used[line] === "undefined") {
	        this.used[line] = true;
	        lines++;
	      }
	    }

	    return lines;
	  };

	  return Whitespace;
	})();

	exports["default"] = Whitespace;
	module.exports = exports["default"];

/***/ },
/* 2714 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var repeating = __webpack_require__(696);

	// detect either spaces or tabs but not both to properly handle tabs
	// for indentation and spaces for alignment
	var INDENT_RE = /^(?:( )+|\t+)/;

	function getMostUsed(indents) {
		var result = 0;
		var maxUsed = 0;
		var maxWeight = 0;

		for (var n in indents) {
			var indent = indents[n];
			var u = indent[0];
			var w = indent[1];

			if (u > maxUsed || u === maxUsed && w > maxWeight) {
				maxUsed = u;
				maxWeight = w;
				result = +n;
			}
		}

		return result;
	}

	module.exports = function (str) {
		if (typeof str !== 'string') {
			throw new TypeError('Expected a string');
		}

		// used to see if tabs or spaces are the most used
		var tabs = 0;
		var spaces = 0;

		// remember the size of previous line's indentation
		var prev = 0;

		// remember how many indents/unindents as occurred for a given size
		// and how much lines follow a given indentation
		//
		// indents = {
		//    3: [1, 0],
		//    4: [1, 5],
		//    5: [1, 0],
		//   12: [1, 0],
		// }
		var indents = {};

		// pointer to the array of last used indent
		var current;

		// whether the last action was an indent (opposed to an unindent)
		var isIndent;

		str.split(/\n/g).forEach(function (line) {
			if (!line) {
				// ignore empty lines
				return;
			}

			var indent;
			var matches = line.match(INDENT_RE);

			if (!matches) {
				indent = 0;
			} else {
				indent = matches[0].length;

				if (matches[1]) {
					spaces++;
				} else {
					tabs++;
				}
			}

			var diff = indent - prev;
			prev = indent;

			if (diff) {
				// an indent or unindent has been detected

				isIndent = diff > 0;

				current = indents[isIndent ? diff : -diff];

				if (current) {
					current[0]++;
				} else {
					current = indents[diff] = [1, 0];
				}
			} else if (current) {
				// if the last action was an indent, increment the weight
				current[1] += +isIndent;
			}
		});

		var amount = getMostUsed(indents);

		var type;
		var actual;
		if (!amount) {
			type = null;
			actual = '';
		} else if (spaces >= tabs) {
			type = 'space';
			actual = repeating(' ', amount);
		} else {
			type = 'tab';
			actual = repeating('\t', amount);
		}

		return {
			amount: amount,
			type: type,
			indent: actual
		};
	};


/***/ },
/* 2715 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/paulmillr/es6-shim
	// http://people.mozilla.org/~jorendorff/es6-draft.html#sec-number.isinteger
	var isFinite = __webpack_require__(2716);
	module.exports = Number.isInteger || function(val) {
	  return typeof val === "number" &&
	    isFinite(val) &&
	    Math.floor(val) === val;
	};


/***/ },
/* 2716 */
[7814, 2717],
/* 2717 */
2697,
/* 2718 */
[7814, 2719],
/* 2719 */
2697,
/* 2720 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function (str) {
		var tail = str.length;

		while (/[\s\uFEFF\u00A0]/.test(str[tail - 1])) {
			tail--;
		}

		return str.slice(0, tail);
	};


/***/ },
/* 2721 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(8)["default"];

	exports.__esModule = true;

	var _babelTemplate = __webpack_require__(977);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var helpers = {};
	exports["default"] = helpers;

	helpers["typeof"] = _babelTemplate2["default"]("\n  (function (obj) {\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n  });\n");

	helpers.jsx = _babelTemplate2["default"]("\n  (function () {\n    var REACT_ELEMENT_TYPE = (typeof Symbol === \"function\" && Symbol.for && Symbol.for(\"react.element\")) || 0xeac7;\n\n    return function createRawReactElement (type, props, key, children) {\n      var defaultProps = type && type.defaultProps;\n      var childrenLength = arguments.length - 3;\n\n      if (!props && childrenLength !== 0) {\n        // If we're going to assign props.children, we create a new object now\n        // to avoid mutating defaultProps.\n        props = {};\n      }\n      if (props && defaultProps) {\n        for (var propName in defaultProps) {\n          if (props[propName] === void 0) {\n            props[propName] = defaultProps[propName];\n          }\n        }\n      } else if (!props) {\n        props = defaultProps || {};\n      }\n\n      if (childrenLength === 1) {\n        props.children = children;\n      } else if (childrenLength > 1) {\n        var childArray = Array(childrenLength);\n        for (var i = 0; i < childrenLength; i++) {\n          childArray[i] = arguments[i + 3];\n        }\n        props.children = childArray;\n      }\n\n      return {\n        $$typeof: REACT_ELEMENT_TYPE,\n        type: type,\n        key: key === undefined ? null : '' + key,\n        ref: null,\n        props: props,\n        _owner: null,\n      };\n    };\n\n  })()\n");

	helpers.asyncToGenerator = _babelTemplate2["default"]("\n  (function (fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        step(\"next\");\n      });\n    };\n  })\n");

	helpers.classCallCheck = _babelTemplate2["default"]("\n  (function (instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  });\n");

	helpers.createClass = _babelTemplate2["default"]("\n  (function() {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i ++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  })()\n");

	helpers.defineEnumerableProperties = _babelTemplate2["default"]("\n  (function (obj, descs) {\n    for (var key in descs) {\n      var desc = descs[key];\n      desc.configurable = desc.enumerable = true;\n      if (\"value\" in desc) desc.writable = true;\n      Object.defineProperty(obj, key, desc);\n    }\n    return obj;\n  })\n");

	helpers.defaults = _babelTemplate2["default"]("\n  (function (obj, defaults) {\n    var keys = Object.getOwnPropertyNames(defaults);\n    for (var i = 0; i < keys.length; i++) {\n      var key = keys[i];\n      var value = Object.getOwnPropertyDescriptor(defaults, key);\n      if (value && value.configurable && obj[key] === undefined) {\n        Object.defineProperty(obj, key, value);\n      }\n    }\n    return obj;\n  })\n");

	helpers.defineProperty = _babelTemplate2["default"]("\n  (function (obj, key, value) {\n    // Shortcircuit the slow defineProperty path when possible.\n    // We are trying to avoid issues where setters defined on the\n    // prototype cause side effects under the fast path of simple\n    // assignment. By checking for existence of the property with\n    // the in operator, we can optimize most of this overhead away.\n    if (key in obj) {\n      Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n      });\n    } else {\n      obj[key] = value;\n    }\n    return obj;\n  });\n");

	helpers["extends"] = _babelTemplate2["default"]("\n  Object.assign || (function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  })\n");

	helpers.get = _babelTemplate2["default"]("\n  (function get(object, property, receiver) {\n    if (object === null) object = Function.prototype;\n\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent === null) {\n        return undefined;\n      } else {\n        return get(parent, property, receiver);\n      }\n    } else if (\"value\" in desc) {\n      return desc.value;\n    } else {\n      var getter = desc.get;\n\n      if (getter === undefined) {\n        return undefined;\n      }\n\n      return getter.call(receiver);\n    }\n  });\n");

	helpers.inherits = _babelTemplate2["default"]("\n  (function (subClass, superClass) {\n    if (typeof superClass !== \"function\" && superClass !== null) {\n      throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n    }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n      constructor: {\n        value: subClass,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n  })\n");

	helpers["instanceof"] = _babelTemplate2["default"]("\n  (function (left, right) {\n    if (right != null && typeof Symbol !== \"undefined\" && right[Symbol.hasInstance]) {\n      return right[Symbol.hasInstance](left);\n    } else {\n      return left instanceof right;\n    }\n  });\n");

	helpers.interopRequireDefault = _babelTemplate2["default"]("\n  (function (obj) {\n    return obj && obj.__esModule ? obj : { default: obj };\n  })\n");

	helpers.interopRequireWildcard = _babelTemplate2["default"]("\n  (function (obj) {\n    if (obj && obj.__esModule) {\n      return obj;\n    } else {\n      var newObj = {};\n      if (obj != null) {\n        for (var key in obj) {\n          if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n        }\n      }\n      newObj.default = obj;\n      return newObj;\n    }\n  })\n");

	helpers.newArrowCheck = _babelTemplate2["default"]("\n  (function (innerThis, boundThis) {\n    if (innerThis !== boundThis) {\n      throw new TypeError(\"Cannot instantiate an arrow function\");\n    }\n  });\n");

	helpers.objectDestructuringEmpty = _babelTemplate2["default"]("\n  (function (obj) {\n    if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n  });\n");

	helpers.objectWithoutProperties = _babelTemplate2["default"]("\n  (function (obj, keys) {\n    var target = {};\n    for (var i in obj) {\n      if (keys.indexOf(i) >= 0) continue;\n      if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n      target[i] = obj[i];\n    }\n    return target;\n  })\n");

	helpers.possibleConstructorReturn = _babelTemplate2["default"]("\n  (function (self, call) {\n    if (!self) {\n      throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n    }\n    return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n  });\n");

	helpers.selfGlobal = _babelTemplate2["default"]("\n  typeof global === \"undefined\" ? self : global\n");

	helpers.set = _babelTemplate2["default"]("\n  (function set(object, property, value, receiver) {\n    var desc = Object.getOwnPropertyDescriptor(object, property);\n\n    if (desc === undefined) {\n      var parent = Object.getPrototypeOf(object);\n\n      if (parent !== null) {\n        set(parent, property, value, receiver);\n      }\n    } else if (\"value\" in desc && desc.writable) {\n      desc.value = value;\n    } else {\n      var setter = desc.set;\n\n      if (setter !== undefined) {\n        setter.call(receiver, value);\n      }\n    }\n\n    return value;\n  });\n");

	helpers.slicedToArray = _babelTemplate2["default"]("\n  (function () {\n    // Broken out into a separate function to avoid deoptimizations due to the try/catch for the\n    // array iterator case.\n    function sliceIterator(arr, i) {\n      // this is an expanded form of `for...of` that properly supports abrupt completions of\n      // iterators etc. variable names have been minimised to reduce the size of this massive\n      // helper. sometimes spec compliancy is annoying :(\n      //\n      // _n = _iteratorNormalCompletion\n      // _d = _didIteratorError\n      // _e = _iteratorError\n      // _i = _iterator\n      // _s = _step\n\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  })();\n");

	helpers.slicedToArrayLoose = _babelTemplate2["default"]("\n  (function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      var _arr = [];\n      for (var _iterator = arr[Symbol.iterator](), _step; !(_step = _iterator.next()).done;) {\n        _arr.push(_step.value);\n        if (i && _arr.length === i) break;\n      }\n      return _arr;\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  });\n");

	helpers.taggedTemplateLiteral = _babelTemplate2["default"]("\n  (function (strings, raw) {\n    return Object.freeze(Object.defineProperties(strings, {\n        raw: { value: Object.freeze(raw) }\n    }));\n  });\n");

	helpers.taggedTemplateLiteralLoose = _babelTemplate2["default"]("\n  (function (strings, raw) {\n    strings.raw = raw;\n    return strings;\n  });\n");

	helpers.temporalRef = _babelTemplate2["default"]("\n  (function (val, name, undef) {\n    if (val === undef) {\n      throw new ReferenceError(name + \" is not defined - temporal dead zone\");\n    } else {\n      return val;\n    }\n  })\n");

	helpers.temporalUndefined = _babelTemplate2["default"]("\n  ({})\n");

	helpers.toArray = _babelTemplate2["default"]("\n  (function (arr) {\n    return Array.isArray(arr) ? arr : Array.from(arr);\n  });\n");

	helpers.toConsumableArray = _babelTemplate2["default"]("\n  (function (arr) {\n    if (Array.isArray(arr)) {\n      for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];\n      return arr2;\n    } else {\n      return Array.from(arr);\n    }\n  });\n");
	module.exports = exports["default"];

/***/ },
/* 2722 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(2734), __esModule: true };

/***/ },
/* 2723 */
[7817, 2735],
/* 2724 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = { "default": __webpack_require__(2736), __esModule: true };

/***/ },
/* 2725 */
[7819, 2738],
/* 2726 */
[7820, 2739],
/* 2727 */
[7821, 2740],
/* 2728 */
[7822, 2741],
/* 2729 */
[7824, 2743],
/* 2730 */
[7826, 2744],
/* 2731 */
[7827, 2727, 2726, 2725],
/* 2732 */
2107,
/* 2733 */
[7829, 1569, 1568, 2762],
/* 2734 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1567);
	__webpack_require__(1568);
	__webpack_require__(1569);
	__webpack_require__(2764);
	__webpack_require__(2771);
	module.exports = __webpack_require__(144).Map;

/***/ },
/* 2735 */
[7830, 2765],
/* 2736 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(2766);
	module.exports = __webpack_require__(144).Object.assign;

/***/ },
/* 2737 */
[7831, 108],
/* 2738 */
[7832, 108],
/* 2739 */
[7833, 108, 2767],
/* 2740 */
[7834, 108, 2768],
/* 2741 */
[7835, 976, 144],
/* 2742 */
[7836, 2769, 144],
/* 2743 */
[7837, 2770, 144],
/* 2744 */
[7838, 976, 144],
/* 2745 */
[7839, 976, 1567, 144],
/* 2746 */
/***/ function(module, exports) {

	module.exports = function(it){
	  if(typeof it != 'function')throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 2747 */
/***/ function(module, exports) {

	module.exports = function(){ /* empty */ };

/***/ },
/* 2748 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $            = __webpack_require__(108)
	  , hide         = __webpack_require__(545)
	  , redefineAll  = __webpack_require__(1561)
	  , ctx          = __webpack_require__(698)
	  , strictNew    = __webpack_require__(1563)
	  , defined      = __webpack_require__(699)
	  , forOf        = __webpack_require__(970)
	  , $iterDefine  = __webpack_require__(971)
	  , step         = __webpack_require__(1559)
	  , ID           = __webpack_require__(975)('id')
	  , $has         = __webpack_require__(700)
	  , isObject     = __webpack_require__(701)
	  , setSpecies   = __webpack_require__(2759)
	  , DESCRIPTORS  = __webpack_require__(542)
	  , isExtensible = Object.isExtensible || isObject
	  , SIZE         = DESCRIPTORS ? '_s' : 'size'
	  , id           = 0;

	var fastKey = function(it, create){
	  // return primitive with prefix
	  if(!isObject(it))return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if(!$has(it, ID)){
	    // can't set id to frozen object
	    if(!isExtensible(it))return 'F';
	    // not necessary to add id
	    if(!create)return 'E';
	    // add missing object id
	    hide(it, ID, ++id);
	  // return object id with prefix
	  } return 'O' + it[ID];
	};

	var getEntry = function(that, key){
	  // fast case
	  var index = fastKey(key), entry;
	  if(index !== 'F')return that._i[index];
	  // frozen object case
	  for(entry = that._f; entry; entry = entry.n){
	    if(entry.k == key)return entry;
	  }
	};

	module.exports = {
	  getConstructor: function(wrapper, NAME, IS_MAP, ADDER){
	    var C = wrapper(function(that, iterable){
	      strictNew(that, C, NAME);
	      that._i = $.create(null); // index
	      that._f = undefined;      // first entry
	      that._l = undefined;      // last entry
	      that[SIZE] = 0;           // size
	      if(iterable != undefined)forOf(iterable, IS_MAP, that[ADDER], that);
	    });
	    redefineAll(C.prototype, {
	      // 23.1.3.1 Map.prototype.clear()
	      // 23.2.3.2 Set.prototype.clear()
	      clear: function clear(){
	        for(var that = this, data = that._i, entry = that._f; entry; entry = entry.n){
	          entry.r = true;
	          if(entry.p)entry.p = entry.p.n = undefined;
	          delete data[entry.i];
	        }
	        that._f = that._l = undefined;
	        that[SIZE] = 0;
	      },
	      // 23.1.3.3 Map.prototype.delete(key)
	      // 23.2.3.4 Set.prototype.delete(value)
	      'delete': function(key){
	        var that  = this
	          , entry = getEntry(that, key);
	        if(entry){
	          var next = entry.n
	            , prev = entry.p;
	          delete that._i[entry.i];
	          entry.r = true;
	          if(prev)prev.n = next;
	          if(next)next.p = prev;
	          if(that._f == entry)that._f = next;
	          if(that._l == entry)that._l = prev;
	          that[SIZE]--;
	        } return !!entry;
	      },
	      // 23.2.3.6 Set.prototype.forEach(callbackfn, thisArg = undefined)
	      // 23.1.3.5 Map.prototype.forEach(callbackfn, thisArg = undefined)
	      forEach: function forEach(callbackfn /*, that = undefined */){
	        var f = ctx(callbackfn, arguments.length > 1 ? arguments[1] : undefined, 3)
	          , entry;
	        while(entry = entry ? entry.n : this._f){
	          f(entry.v, entry.k, this);
	          // revert to the last existing entry
	          while(entry && entry.r)entry = entry.p;
	        }
	      },
	      // 23.1.3.7 Map.prototype.has(key)
	      // 23.2.3.7 Set.prototype.has(value)
	      has: function has(key){
	        return !!getEntry(this, key);
	      }
	    });
	    if(DESCRIPTORS)$.setDesc(C.prototype, 'size', {
	      get: function(){
	        return defined(this[SIZE]);
	      }
	    });
	    return C;
	  },
	  def: function(that, key, value){
	    var entry = getEntry(that, key)
	      , prev, index;
	    // change existing entry
	    if(entry){
	      entry.v = value;
	    // create new entry
	    } else {
	      that._l = entry = {
	        i: index = fastKey(key, true), // <- index
	        k: key,                        // <- key
	        v: value,                      // <- value
	        p: prev = that._l,             // <- previous entry
	        n: undefined,                  // <- next entry
	        r: false                       // <- removed
	      };
	      if(!that._f)that._f = entry;
	      if(prev)prev.n = entry;
	      that[SIZE]++;
	      // add to index
	      if(index !== 'F')that._i[index] = entry;
	    } return that;
	  },
	  getEntry: getEntry,
	  setStrong: function(C, NAME, IS_MAP){
	    // add .keys, .values, .entries, [@@iterator]
	    // 23.1.3.4, 23.1.3.8, 23.1.3.11, 23.1.3.12, 23.2.3.5, 23.2.3.8, 23.2.3.10, 23.2.3.11
	    $iterDefine(C, NAME, function(iterated, kind){
	      this._t = iterated;  // target
	      this._k = kind;      // kind
	      this._l = undefined; // previous
	    }, function(){
	      var that  = this
	        , kind  = that._k
	        , entry = that._l;
	      // revert to the last existing entry
	      while(entry && entry.r)entry = entry.p;
	      // get next entry
	      if(!that._t || !(that._l = entry = entry ? entry.n : that._t._f)){
	        // or finish the iteration
	        that._t = undefined;
	        return step(1);
	      }
	      // return step by kind
	      if(kind == 'keys'  )return step(0, entry.k);
	      if(kind == 'values')return step(0, entry.v);
	      return step(0, [entry.k, entry.v]);
	    }, IS_MAP ? 'entries' : 'values' , !IS_MAP, true);

	    // add [@@species], 23.1.2.2, 23.2.2.2
	    setSpecies(NAME);
	  }
	};

/***/ },
/* 2749 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var forOf   = __webpack_require__(970)
	  , classof = __webpack_require__(1556);
	module.exports = function(NAME){
	  return function toJSON(){
	    if(classof(this) != NAME)throw TypeError(NAME + "#toJSON isn't generic");
	    var arr = [];
	    forOf(this, false, arr.push, arr);
	    return arr;
	  };
	};

/***/ },
/* 2750 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var $              = __webpack_require__(108)
	  , global         = __webpack_require__(544)
	  , $export        = __webpack_require__(291)
	  , fails          = __webpack_require__(543)
	  , hide           = __webpack_require__(545)
	  , redefineAll    = __webpack_require__(1561)
	  , forOf          = __webpack_require__(970)
	  , strictNew      = __webpack_require__(1563)
	  , isObject       = __webpack_require__(701)
	  , setToStringTag = __webpack_require__(702)
	  , DESCRIPTORS    = __webpack_require__(542);

	module.exports = function(NAME, wrapper, methods, common, IS_MAP, IS_WEAK){
	  var Base  = global[NAME]
	    , C     = Base
	    , ADDER = IS_MAP ? 'set' : 'add'
	    , proto = C && C.prototype
	    , O     = {};
	  if(!DESCRIPTORS || typeof C != 'function' || !(IS_WEAK || proto.forEach && !fails(function(){
	    new C().entries().next();
	  }))){
	    // create collection constructor
	    C = common.getConstructor(wrapper, NAME, IS_MAP, ADDER);
	    redefineAll(C.prototype, methods);
	  } else {
	    C = wrapper(function(target, iterable){
	      strictNew(target, C, NAME);
	      target._c = new Base;
	      if(iterable != undefined)forOf(iterable, IS_MAP, target[ADDER], target);
	    });
	    $.each.call('add,clear,delete,forEach,get,has,set,keys,values,entries'.split(','),function(KEY){
	      var IS_ADDER = KEY == 'add' || KEY == 'set';
	      if(KEY in proto && !(IS_WEAK && KEY == 'clear'))hide(C.prototype, KEY, function(a, b){
	        if(!IS_ADDER && IS_WEAK && !isObject(a))return KEY == 'get' ? undefined : false;
	        var result = this._c[KEY](a === 0 ? 0 : a, b);
	        return IS_ADDER ? this : result;
	      });
	    });
	    if('size' in proto)$.setDesc(C.prototype, 'size', {
	      get: function(){
	        return this._c.size;
	      }
	    });
	  }

	  setToStringTag(C, NAME);

	  O[NAME] = C;
	  $export($export.G + $export.W + $export.F, O);

	  if(!IS_WEAK)common.setStrong(C, NAME, IS_MAP);

	  return C;
	};

/***/ },
/* 2751 */
[7844, 108],
/* 2752 */
/***/ function(module, exports, __webpack_require__) {

	// check on default Array iterator
	var Iterators  = __webpack_require__(546)
	  , ITERATOR   = __webpack_require__(292)('iterator')
	  , ArrayProto = Array.prototype;

	module.exports = function(it){
	  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);
	};

/***/ },
/* 2753 */
[7849, 969],
/* 2754 */
/***/ function(module, exports, __webpack_require__) {

	// call something on iterator step with safe closing on error
	var anObject = __webpack_require__(541);
	module.exports = function(iterator, fn, value, entries){
	  try {
	    return entries ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch(e){
	    var ret = iterator['return'];
	    if(ret !== undefined)anObject(ret.call(iterator));
	    throw e;
	  }
	};

/***/ },
/* 2755 */
[7850, 108, 973, 702, 545, 292],
/* 2756 */
[7852, 108, 547],
/* 2757 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.2.1 Object.assign(target, source, ...)
	var $        = __webpack_require__(108)
	  , toObject = __webpack_require__(1565)
	  , IObject  = __webpack_require__(1558);

	// should work with symbols and should have deterministic property order (V8 bug)
	module.exports = __webpack_require__(543)(function(){
	  var a = Object.assign
	    , A = {}
	    , B = {}
	    , S = Symbol()
	    , K = 'abcdefghijklmnopqrst';
	  A[S] = 7;
	  K.split('').forEach(function(k){ B[k] = k; });
	  return a({}, A)[S] != 7 || Object.keys(a({}, B)).join('') != K;
	}) ? function assign(target, source){ // eslint-disable-line no-unused-vars
	  var T     = toObject(target)
	    , $$    = arguments
	    , $$len = $$.length
	    , index = 1
	    , getKeys    = $.getKeys
	    , getSymbols = $.getSymbols
	    , isEnum     = $.isEnum;
	  while($$len > index){
	    var S      = IObject($$[index++])
	      , keys   = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S)
	      , length = keys.length
	      , j      = 0
	      , key;
	    while(length > j)if(isEnum.call(S, key = keys[j++]))T[key] = S[key];
	  }
	  return T;
	} : Object.assign;

/***/ },
/* 2758 */
[7855, 108, 701, 541, 698],
/* 2759 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var core        = __webpack_require__(144)
	  , $           = __webpack_require__(108)
	  , DESCRIPTORS = __webpack_require__(542)
	  , SPECIES     = __webpack_require__(292)('species');

	module.exports = function(KEY){
	  var C = core[KEY];
	  if(DESCRIPTORS && C && !C[SPECIES])$.setDesc(C, SPECIES, {
	    configurable: true,
	    get: function(){ return this; }
	  });
	};

/***/ },
/* 2760 */
[7858, 1564, 699],
/* 2761 */
/***/ function(module, exports, __webpack_require__) {

	// 7.1.15 ToLength
	var toInteger = __webpack_require__(1564)
	  , min       = Math.min;
	module.exports = function(it){
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 2762 */
[7863, 541, 1566, 144],
/* 2763 */
[7864, 2747, 1559, 546, 547, 971],
/* 2764 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var strong = __webpack_require__(2748);

	// 23.1 Map Objects
	__webpack_require__(2750)('Map', function(get){
	  return function Map(){ return get(this, arguments.length > 0 ? arguments[0] : undefined); };
	}, {
	  // 23.1.3.6 Map.prototype.get(key)
	  get: function get(key){
	    var entry = strong.getEntry(this, key);
	    return entry && entry.v;
	  },
	  // 23.1.3.9 Map.prototype.set(key, value)
	  set: function set(key, value){
	    return strong.def(this, key === 0 ? 0 : key, value);
	  }
	}, strong, true);

/***/ },
/* 2765 */
[7865, 291],
/* 2766 */
/***/ function(module, exports, __webpack_require__) {

	// 19.1.3.1 Object.assign(target, source)
	var $export = __webpack_require__(291);

	$export($export.S + $export.F, 'Object', {assign: __webpack_require__(2757)});

/***/ },
/* 2767 */
[7866, 547, 972],
/* 2768 */
[7867, 972, 1557],
/* 2769 */
[7868, 1565, 972],
/* 2770 */
[7869, 291, 2758],
/* 2771 */
/***/ function(module, exports, __webpack_require__) {

	// https://github.com/DavidBruant/Map-Set.prototype.toJSON
	var $export  = __webpack_require__(291);

	$export($export.P, 'Map', {toJSON: __webpack_require__(2749)('Map')});

/***/ },
/* 2772 */
[7874, 60, 49, 8, 14, 378, 31],
/* 2773 */
[7877, 49, 14, 8, 31, 378],
/* 2774 */
/***/ function(module, exports) {

	// This file contains methods responsible for dealing with comments.

	/**
	 * Share comments amongst siblings.
	 */

	"use strict";

	exports.__esModule = true;
	exports.shareCommentsWithSiblings = shareCommentsWithSiblings;
	exports.addComment = addComment;
	exports.addComments = addComments;

	function shareCommentsWithSiblings() {
	  var node = this.node;
	  if (!node) return;

	  var trailing = node.trailingComments;
	  var leading = node.leadingComments;
	  if (!trailing && !leading) return;

	  var prev = this.getSibling(this.key - 1);
	  var next = this.getSibling(this.key + 1);

	  if (!prev.node) prev = next;
	  if (!next.node) next = prev;

	  prev.addComments("trailing", leading);
	  next.addComments("leading", trailing);
	}

	function addComment(type, content, line /*:: ?*/) {
	  this.addComments(type, [{
	    type: line ? "CommentLine" : "CommentBlock",
	    value: content
	  }]);
	}

	/**
	 * Give node `comments` of the specified `type`.
	 */

	function addComments(type /*: string*/, comments /*: Array*/) {
	  if (!comments) return;

	  var node = this.node;
	  if (!node) return;

	  var key = type + "Comments";

	  if (node[key]) {
	    node[key] = node[key].concat(comments);
	  } else {
	    node[key] = comments;
	  }
	}

/***/ },
/* 2775 */
[7878, 49, 8, 169],
/* 2776 */
[7879, 14, 31],
/* 2777 */
[7880, 49],
/* 2778 */
[7881, 49, 8, 14, 378, 31],
/* 2779 */
[7883, 49, 14, 2781, 31],
/* 2780 */
[7884, 49, 14, 31],
/* 2781 */
[7885, 14, 968, 31, 2780],
/* 2782 */
[7886, 49, 8, 14, 706, 31],
/* 2783 */
[7887, 60, 49, 14, 31],
/* 2784 */
/***/ function(module, exports) {

	// this file contains hooks that handle ancestry cleanup of parent nodes when removing children

	/**
	 * Pre hooks should be used for either rejecting removal or delegating removal
	 */

	"use strict";

	exports.__esModule = true;
	var hooks = [function (self, parent) {
	  if (self.key === "body" && parent.isArrowFunctionExpression()) {
	    self.replaceWith(self.scope.buildUndefinedNode());
	    return true;
	  }
	}, function (self, parent) {
	  var removeParent = false;

	  // while (NODE);
	  // removing the test of a while/switch, we can either just remove it entirely *or* turn the `test` into `true`
	  // unlikely that the latter will ever be what's wanted so we just remove the loop to avoid infinite recursion
	  removeParent = removeParent || self.key === "test" && (parent.isWhile() || parent.isSwitchCase());

	  // export NODE;
	  // just remove a declaration for an export as this is no longer valid
	  removeParent = removeParent || self.key === "declaration" && parent.isExportDeclaration();

	  // label: NODE
	  // stray labeled statement with no body
	  removeParent = removeParent || self.key === "body" && parent.isLabeledStatement();

	  // let NODE;
	  // remove an entire declaration if there are no declarators left
	  removeParent = removeParent || self.listKey === "declarations" && parent.isVariableDeclaration() && parent.node.declarations.length === 1;

	  // NODE;
	  // remove the entire expression statement if there's no expression
	  removeParent = removeParent || self.key === "expression" && parent.isExpressionStatement();

	  if (removeParent) {
	    parent.remove();
	    return true;
	  }
	}, function (self, parent) {
	  if (parent.isSequenceExpression() && parent.node.expressions.length === 1) {
	    // (node, NODE);
	    // we've just removed the second element of a sequence expression so let's turn that sequence
	    // expression into a regular expression
	    parent.replaceWith(parent.node.expressions[0]);
	    return true;
	  }
	}, function (self, parent) {
	  if (parent.isBinary()) {
	    // left + NODE;
	    // NODE + right;
	    // we're in a binary expression, better remove it and replace it with the last expression
	    if (self.key === "left") {
	      parent.replaceWith(parent.node.right);
	    } else {
	      // key === "right"
	      parent.replaceWith(parent.node.left);
	    }
	    return true;
	  }
	}];
	exports.hooks = hooks;

/***/ },
/* 2785 */
[7889, 49, 8, 14, 1571, 2783, 378, 31],
/* 2786 */
[7890, 49, 2784],
/* 2787 */
[7891, 49, 8, 14, 1549, 169, 378, 980, 31],
/* 2788 */
[7894, 60, 8, 14, 1573, 31],
/* 2789 */
[7895, 49, 697, 14, 8, 1572, 290, 31, 710],
/* 2790 */
[7896, 7769],
/* 2791 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright 2013-2015, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * LICENSE file in the root directory of this source tree. An additional grant
	 * of patent rights can be found in the PATENTS file in the same directory.
	 */

	'use strict';

	/**
	 * Use invariant() to assert state which your program assumes to be true.
	 *
	 * Provide sprintf-style format (only %s is supported) and arguments
	 * to provide information about what broke and what you were
	 * expecting.
	 *
	 * The invariant message will be stripped in production, but the invariant
	 * will remain to ensure logic does not differ in production.
	 */

	var invariant = function(condition, format, a, b, c, d, e, f) {
	  if (false) {
	    if (format === undefined) {
	      throw new Error('invariant requires an error message argument');
	    }
	  }

	  if (!condition) {
	    var error;
	    if (format === undefined) {
	      error = new Error(
	        'Minified exception occurred; use the non-minified dev environment ' +
	        'for the full error message and additional helpful warnings.'
	      );
	    } else {
	      var args = [a, b, c, d, e, f];
	      var argIndex = 0;
	      error = new Error(
	        format.replace(/%s/g, function() { return args[argIndex++]; })
	      );
	      error.name = 'Invariant Violation';
	    }

	    error.framesToPop = 1; // we don't care about invariant's own frame
	    throw error;
	  }
	};

	module.exports = invariant;


/***/ },
/* 2792 */
[7813, 2793],
/* 2793 */
[7814, 2794],
/* 2794 */
2697,
/* 2795 */
[7898, 49, 2723, 8, 14, 1598, 1597, 1599, 988, 169, 31],
/* 2796 */
[7899, 14, 8, 31, 979, 293],
/* 2797 */
[7900, 8, 293],
/* 2798 */
[7901, 8, 293],
/* 2799 */
[7902, 8, 293],
/* 2800 */
[7904, 293, 2796, 2797, 2799, 2801, 2802, 2798],
/* 2801 */
[7905, 8, 293],
/* 2802 */
[7906, 8, 293],
/* 2803 */
[7907, 14, 31],
/* 2804 */
[7909, 14, 31],
/* 2805 */
[7911, 49, 8, 14, 1574, 2808, 31, 979],
/* 2806 */
2689,
/* 2807 */
[7810, 1575],
/* 2808 */
[7811, 2806, 1575, 2807],
/* 2809 */
/***/ function(module, exports) {

	'use strict';
	module.exports = function toFastProperties(obj) {
		/*jshint -W027*/
		function f() {}
		f.prototype = obj;
		new f();
		return;
		eval(obj);
	};


/***/ },
/* 2810 */
/***/ function(module, exports) {

	// A second optional argument can be given to further configure
	// the parser process. These options are recognized:

	"use strict";

	exports.__esModule = true;
	exports.getOptions = getOptions;
	var defaultOptions = {
	  // Source type ("script" or "module") for different semantics
	  sourceType: "script",
	  // When enabled, a return at the top level is not considered an
	  // error.
	  allowReturnOutsideFunction: false,
	  // When enabled, import/export statements are not constrained to
	  // appearing at the top of the program.
	  allowImportExportEverywhere: false,
	  // TODO
	  allowSuperOutsideMethod: false,
	  // An array of plugins to enable
	  plugins: [],
	  // TODO
	  strictMode: null
	};

	exports.defaultOptions = defaultOptions;
	// Interpret and default an options object

	function getOptions(opts /*:: ?: Object*/) /*: Object*/ {
	  var options = {};
	  for (var key in defaultOptions) {
	    options[key] = opts && key in opts ? opts[key] : defaultOptions[key];
	  }
	  return options;
	}

/***/ },
/* 2811 */
[7913, 8, 170],
/* 2812 */
[7914, 540, 49, 8, 171, 170, 548],
/* 2813 */
[7916, 8, 704, 170],
/* 2814 */
[7917, 49, 8, 171, 170, 548],
/* 2815 */
[7918, 60, 8, 170, 704],
/* 2816 */
[7919, 540, 49, 8, 171, 170, 429],
/* 2817 */
[7920, 8, 171, 170, 429],
/* 2818 */
[7921, 8, 171, 170],
/* 2819 */
[7922, 8, 2820, 171, 703, 170, 548, 429],
/* 2820 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;
	exports["default"] = {
	  quot: "\"",
	  amp: "&",
	  apos: "'",
	  lt: "<",
	  gt: ">",
	  nbsp: " ",
	  iexcl: "¡",
	  cent: "¢",
	  pound: "£",
	  curren: "¤",
	  yen: "¥",
	  brvbar: "¦",
	  sect: "§",
	  uml: "¨",
	  copy: "©",
	  ordf: "ª",
	  laquo: "«",
	  not: "¬",
	  shy: "­",
	  reg: "®",
	  macr: "¯",
	  deg: "°",
	  plusmn: "±",
	  sup2: "²",
	  sup3: "³",
	  acute: "´",
	  micro: "µ",
	  para: "¶",
	  middot: "·",
	  cedil: "¸",
	  sup1: "¹",
	  ordm: "º",
	  raquo: "»",
	  frac14: "¼",
	  frac12: "½",
	  frac34: "¾",
	  iquest: "¿",
	  Agrave: "À",
	  Aacute: "Á",
	  Acirc: "Â",
	  Atilde: "Ã",
	  Auml: "Ä",
	  Aring: "Å",
	  AElig: "Æ",
	  Ccedil: "Ç",
	  Egrave: "È",
	  Eacute: "É",
	  Ecirc: "Ê",
	  Euml: "Ë",
	  Igrave: "Ì",
	  Iacute: "Í",
	  Icirc: "Î",
	  Iuml: "Ï",
	  ETH: "Ð",
	  Ntilde: "Ñ",
	  Ograve: "Ò",
	  Oacute: "Ó",
	  Ocirc: "Ô",
	  Otilde: "Õ",
	  Ouml: "Ö",
	  times: "×",
	  Oslash: "Ø",
	  Ugrave: "Ù",
	  Uacute: "Ú",
	  Ucirc: "Û",
	  Uuml: "Ü",
	  Yacute: "Ý",
	  THORN: "Þ",
	  szlig: "ß",
	  agrave: "à",
	  aacute: "á",
	  acirc: "â",
	  atilde: "ã",
	  auml: "ä",
	  aring: "å",
	  aelig: "æ",
	  ccedil: "ç",
	  egrave: "è",
	  eacute: "é",
	  ecirc: "ê",
	  euml: "ë",
	  igrave: "ì",
	  iacute: "í",
	  icirc: "î",
	  iuml: "ï",
	  eth: "ð",
	  ntilde: "ñ",
	  ograve: "ò",
	  oacute: "ó",
	  ocirc: "ô",
	  otilde: "õ",
	  ouml: "ö",
	  divide: "÷",
	  oslash: "ø",
	  ugrave: "ù",
	  uacute: "ú",
	  ucirc: "û",
	  uuml: "ü",
	  yacute: "ý",
	  thorn: "þ",
	  yuml: "ÿ",
	  OElig: "Œ",
	  oelig: "œ",
	  Scaron: "Š",
	  scaron: "š",
	  Yuml: "Ÿ",
	  fnof: "ƒ",
	  circ: "ˆ",
	  tilde: "˜",
	  Alpha: "Α",
	  Beta: "Β",
	  Gamma: "Γ",
	  Delta: "Δ",
	  Epsilon: "Ε",
	  Zeta: "Ζ",
	  Eta: "Η",
	  Theta: "Θ",
	  Iota: "Ι",
	  Kappa: "Κ",
	  Lambda: "Λ",
	  Mu: "Μ",
	  Nu: "Ν",
	  Xi: "Ξ",
	  Omicron: "Ο",
	  Pi: "Π",
	  Rho: "Ρ",
	  Sigma: "Σ",
	  Tau: "Τ",
	  Upsilon: "Υ",
	  Phi: "Φ",
	  Chi: "Χ",
	  Psi: "Ψ",
	  Omega: "Ω",
	  alpha: "α",
	  beta: "β",
	  gamma: "γ",
	  delta: "δ",
	  epsilon: "ε",
	  zeta: "ζ",
	  eta: "η",
	  theta: "θ",
	  iota: "ι",
	  kappa: "κ",
	  lambda: "λ",
	  mu: "μ",
	  nu: "ν",
	  xi: "ξ",
	  omicron: "ο",
	  pi: "π",
	  rho: "ρ",
	  sigmaf: "ς",
	  sigma: "σ",
	  tau: "τ",
	  upsilon: "υ",
	  phi: "φ",
	  chi: "χ",
	  psi: "ψ",
	  omega: "ω",
	  thetasym: "ϑ",
	  upsih: "ϒ",
	  piv: "ϖ",
	  ensp: " ",
	  emsp: " ",
	  thinsp: " ",
	  zwnj: "‌",
	  zwj: "‍",
	  lrm: "‎",
	  rlm: "‏",
	  ndash: "–",
	  mdash: "—",
	  lsquo: "‘",
	  rsquo: "’",
	  sbquo: "‚",
	  ldquo: "“",
	  rdquo: "”",
	  bdquo: "„",
	  dagger: "†",
	  Dagger: "‡",
	  bull: "•",
	  hellip: "…",
	  permil: "‰",
	  prime: "′",
	  Prime: "″",
	  lsaquo: "‹",
	  rsaquo: "›",
	  oline: "‾",
	  frasl: "⁄",
	  euro: "€",
	  image: "ℑ",
	  weierp: "℘",
	  real: "ℜ",
	  trade: "™",
	  alefsym: "ℵ",
	  larr: "←",
	  uarr: "↑",
	  rarr: "→",
	  darr: "↓",
	  harr: "↔",
	  crarr: "↵",
	  lArr: "⇐",
	  uArr: "⇑",
	  rArr: "⇒",
	  dArr: "⇓",
	  hArr: "⇔",
	  forall: "∀",
	  part: "∂",
	  exist: "∃",
	  empty: "∅",
	  nabla: "∇",
	  isin: "∈",
	  notin: "∉",
	  ni: "∋",
	  prod: "∏",
	  sum: "∑",
	  minus: "−",
	  lowast: "∗",
	  radic: "√",
	  prop: "∝",
	  infin: "∞",
	  ang: "∠",
	  and: "∧",
	  or: "∨",
	  cap: "∩",
	  cup: "∪",
	  "int": "∫",
	  there4: "∴",
	  sim: "∼",
	  cong: "≅",
	  asymp: "≈",
	  ne: "≠",
	  equiv: "≡",
	  le: "≤",
	  ge: "≥",
	  sub: "⊂",
	  sup: "⊃",
	  nsub: "⊄",
	  sube: "⊆",
	  supe: "⊇",
	  oplus: "⊕",
	  otimes: "⊗",
	  perp: "⊥",
	  sdot: "⋅",
	  lceil: "⌈",
	  rceil: "⌉",
	  lfloor: "⌊",
	  rfloor: "⌋",
	  lang: "〈",
	  rang: "〉",
	  loz: "◊",
	  spades: "♠",
	  clubs: "♣",
	  hearts: "♥",
	  diams: "♦"
	};
	module.exports = exports["default"];

/***/ },
/* 2821 */
[7925, 60, 704, 703, 171],
/* 2822 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {'use strict';
	var fs = __webpack_require__(428);
	var path = __webpack_require__(289);

	var commentRx = /^\s*\/(?:\/|\*)[@#]\s+sourceMappingURL=data:(?:application|text)\/json;(?:charset[:=]\S+;)?base64,(.*)$/mg;
	var mapFileCommentRx =
	  // //# sourceMappingURL=foo.js.map                       /*# sourceMappingURL=foo.js.map */
	  /(?:\/\/[@#][ \t]+sourceMappingURL=([^\s'"]+?)[ \t]*$)|(?:\/\*[@#][ \t]+sourceMappingURL=([^\*]+?)[ \t]*(?:\*\/){1}[ \t]*$)/mg

	function decodeBase64(base64) {
	  return new Buffer(base64, 'base64').toString();
	}

	function stripComment(sm) {
	  return sm.split(',').pop();
	}

	function readFromFileMap(sm, dir) {
	  // NOTE: this will only work on the server since it attempts to read the map file

	  var r = mapFileCommentRx.exec(sm);
	  mapFileCommentRx.lastIndex = 0;

	  // for some odd reason //# .. captures in 1 and /* .. */ in 2
	  var filename = r[1] || r[2];
	  var filepath = path.join(dir, filename);

	  try {
	    return fs.readFileSync(filepath, 'utf8');
	  } catch (e) {
	    throw new Error('An error occurred while trying to read the map file at ' + filepath + '\n' + e);
	  }
	}

	function Converter (sm, opts) {
	  opts = opts || {};

	  if (opts.isFileComment) sm = readFromFileMap(sm, opts.commentFileDir);
	  if (opts.hasComment) sm = stripComment(sm);
	  if (opts.isEncoded) sm = decodeBase64(sm);
	  if (opts.isJSON || opts.isEncoded) sm = JSON.parse(sm);

	  this.sourcemap = sm;
	}

	function convertFromLargeSource(content){
	  var lines = content.split('\n');
	  var line;
	  // find first line which contains a source map starting at end of content
	  for (var i = lines.length - 1; i > 0; i--) {
	    line = lines[i]
	    if (~line.indexOf('sourceMappingURL=data:')) return exports.fromComment(line);
	  }
	}

	Converter.prototype.toJSON = function (space) {
	  return JSON.stringify(this.sourcemap, null, space);
	};

	Converter.prototype.toBase64 = function () {
	  var json = this.toJSON();
	  return new Buffer(json).toString('base64');
	};

	Converter.prototype.toComment = function (options) {
	  var base64 = this.toBase64();
	  var data = 'sourceMappingURL=data:application/json;base64,' + base64;
	  return options && options.multiline ? '/*# ' + data + ' */' : '//# ' + data;
	};

	// returns copy instead of original
	Converter.prototype.toObject = function () {
	  return JSON.parse(this.toJSON());
	};

	Converter.prototype.addProperty = function (key, value) {
	  if (this.sourcemap.hasOwnProperty(key)) throw new Error('property %s already exists on the sourcemap, use set property instead');
	  return this.setProperty(key, value);
	};

	Converter.prototype.setProperty = function (key, value) {
	  this.sourcemap[key] = value;
	  return this;
	};

	Converter.prototype.getProperty = function (key) {
	  return this.sourcemap[key];
	};

	exports.fromObject = function (obj) {
	  return new Converter(obj);
	};

	exports.fromJSON = function (json) {
	  return new Converter(json, { isJSON: true });
	};

	exports.fromBase64 = function (base64) {
	  return new Converter(base64, { isEncoded: true });
	};

	exports.fromComment = function (comment) {
	  comment = comment
	    .replace(/^\/\*/g, '//')
	    .replace(/\*\/$/g, '');

	  return new Converter(comment, { isEncoded: true, hasComment: true });
	};

	exports.fromMapFileComment = function (comment, dir) {
	  return new Converter(comment, { commentFileDir: dir, isFileComment: true, isJSON: true });
	};

	// Finds last sourcemap comment in file or returns null if none was found
	exports.fromSource = function (content, largeSource) {
	  if (largeSource) {
	    var res = convertFromLargeSource(content);
	    return res ? res : null;
	  }

	  var m = content.match(commentRx);
	  commentRx.lastIndex = 0;
	  return m ? exports.fromComment(m.pop()) : null;
	};

	// Finds last sourcemap comment in file or returns null if none was found
	exports.fromMapFileSource = function (content, dir) {
	  var m = content.match(mapFileCommentRx);
	  mapFileCommentRx.lastIndex = 0;
	  return m ? exports.fromMapFileComment(m.pop(), dir) : null;
	};

	exports.removeComments = function (src) {
	  commentRx.lastIndex = 0;
	  return src.replace(commentRx, '');
	};

	exports.removeMapFileComments = function (src) {
	  mapFileCommentRx.lastIndex = 0;
	  return src.replace(mapFileCommentRx, '');
	};

	Object.defineProperty(exports, 'commentRegex', {
	  get: function getCommentRegex () {
	    commentRx.lastIndex = 0;
	    return commentRx;
	  }
	});

	Object.defineProperty(exports, 'mapFileCommentRegex', {
	  get: function getMapFileCommentRegex () {
	    mapFileCommentRx.lastIndex = 0;
	    return mapFileCommentRx;
	  }
	});

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2669).Buffer))

/***/ },
/* 2823 */
[7928, 1577],
/* 2824 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {
	/**
	 * Module dependencies.
	 */

	var tty = __webpack_require__(7803);
	var util = __webpack_require__(50);

	/**
	 * This is the Node.js implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(1577);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;

	/**
	 * Colors.
	 */

	exports.colors = [6, 2, 3, 4, 5, 1];

	/**
	 * The file descriptor to write the `debug()` calls to.
	 * Set the `DEBUG_FD` env variable to override with another value. i.e.:
	 *
	 *   $ DEBUG_FD=3 node script.js 3>debug.log
	 */

	var fd = parseInt(process.env.DEBUG_FD, 10) || 2;
	var stream = 1 === fd ? process.stdout :
	             2 === fd ? process.stderr :
	             createWritableStdioStream(fd);

	/**
	 * Is stdout a TTY? Colored output is enabled when `true`.
	 */

	function useColors() {
	  var debugColors = (process.env.DEBUG_COLORS || '').trim().toLowerCase();
	  if (0 === debugColors.length) {
	    return tty.isatty(fd);
	  } else {
	    return '0' !== debugColors
	        && 'no' !== debugColors
	        && 'false' !== debugColors
	        && 'disabled' !== debugColors;
	  }
	}

	/**
	 * Map %o to `util.inspect()`, since Node doesn't do that out of the box.
	 */

	var inspect = (4 === util.inspect.length ?
	  // node <= 0.8.x
	  function (v, colors) {
	    return util.inspect(v, void 0, void 0, colors);
	  } :
	  // node > 0.8.x
	  function (v, colors) {
	    return util.inspect(v, { colors: colors });
	  }
	);

	exports.formatters.o = function(v) {
	  return inspect(v, this.useColors)
	    .replace(/\s*\n\s*/g, ' ');
	};

	/**
	 * Adds ANSI color escape codes if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;
	  var name = this.namespace;

	  if (useColors) {
	    var c = this.color;

	    args[0] = '  \u001b[3' + c + ';1m' + name + ' '
	      + '\u001b[0m'
	      + args[0] + '\u001b[3' + c + 'm'
	      + ' +' + exports.humanize(this.diff) + '\u001b[0m';
	  } else {
	    args[0] = new Date().toUTCString()
	      + ' ' + name + ' ' + args[0];
	  }
	  return args;
	}

	/**
	 * Invokes `console.error()` with the specified arguments.
	 */

	function log() {
	  return stream.write(util.format.apply(this, arguments) + '\n');
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  if (null == namespaces) {
	    // If you set a process.env field to null or undefined, it gets cast to the
	    // string 'null' or 'undefined'. Just delete instead.
	    delete process.env.DEBUG;
	  } else {
	    process.env.DEBUG = namespaces;
	  }
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  return process.env.DEBUG;
	}

	/**
	 * Copied from `node/src/node.js`.
	 *
	 * XXX: It's lame that node doesn't expose this API out-of-the-box. It also
	 * relies on the undocumented `tty_wrap.guessHandleType()` which is also lame.
	 */

	function createWritableStdioStream (fd) {
	  var stream;
	  var tty_wrap = process.binding('tty_wrap');

	  // Note stream._type is used for test-module-load-list.js

	  switch (tty_wrap.guessHandleType(fd)) {
	    case 'TTY':
	      stream = new tty.WriteStream(fd);
	      stream._type = 'tty';

	      // Hack to have stream not keep the event loop alive.
	      // See https://github.com/joyent/node/issues/1726
	      if (stream._handle && stream._handle.unref) {
	        stream._handle.unref();
	      }
	      break;

	    case 'FILE':
	      var fs = __webpack_require__(428);
	      stream = new fs.SyncWriteStream(fd, { autoClose: false });
	      stream._type = 'fs';
	      break;

	    case 'PIPE':
	    case 'TCP':
	      var net = __webpack_require__(428);
	      stream = new net.Socket({
	        fd: fd,
	        readable: false,
	        writable: true
	      });

	      // FIXME Should probably have an option in net.Socket to create a
	      // stream from an existing fd which is writable only. But for now
	      // we'll just add this hack and set the `readable` member to false.
	      // Test: ./node test/fixtures/echo.js < /etc/passwd
	      stream.readable = false;
	      stream.read = null;
	      stream._type = 'pipe';

	      // FIXME Hack to have stream not keep the event loop alive.
	      // See https://github.com/joyent/node/issues/1726
	      if (stream._handle && stream._handle.unref) {
	        stream._handle.unref();
	      }
	      break;

	    default:
	      // Probably an error on in uv_guess_handle()
	      throw new Error('Implement me. Unknown stream file type!');
	  }

	  // For supporting legacy API we put the FD here.
	  stream.fd = fd;

	  stream._isStdio = true;

	  return stream;
	}

	/**
	 * Enable namespaces listed in `process.env.DEBUG` initially.
	 */

	exports.enable(load());

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 2825 */
/***/ function(module, exports) {

	/**
	 * Helpers.
	 */

	var s = 1000;
	var m = s * 60;
	var h = m * 60;
	var d = h * 24;
	var y = d * 365.25;

	/**
	 * Parse or format the given `val`.
	 *
	 * Options:
	 *
	 *  - `long` verbose formatting [false]
	 *
	 * @param {String|Number} val
	 * @param {Object} options
	 * @return {String|Number}
	 * @api public
	 */

	module.exports = function(val, options){
	  options = options || {};
	  if ('string' == typeof val) return parse(val);
	  return options.long
	    ? long(val)
	    : short(val);
	};

	/**
	 * Parse the given `str` and return milliseconds.
	 *
	 * @param {String} str
	 * @return {Number}
	 * @api private
	 */

	function parse(str) {
	  str = '' + str;
	  if (str.length > 10000) return;
	  var match = /^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);
	  if (!match) return;
	  var n = parseFloat(match[1]);
	  var type = (match[2] || 'ms').toLowerCase();
	  switch (type) {
	    case 'years':
	    case 'year':
	    case 'yrs':
	    case 'yr':
	    case 'y':
	      return n * y;
	    case 'days':
	    case 'day':
	    case 'd':
	      return n * d;
	    case 'hours':
	    case 'hour':
	    case 'hrs':
	    case 'hr':
	    case 'h':
	      return n * h;
	    case 'minutes':
	    case 'minute':
	    case 'mins':
	    case 'min':
	    case 'm':
	      return n * m;
	    case 'seconds':
	    case 'second':
	    case 'secs':
	    case 'sec':
	    case 's':
	      return n * s;
	    case 'milliseconds':
	    case 'millisecond':
	    case 'msecs':
	    case 'msec':
	    case 'ms':
	      return n;
	  }
	}

	/**
	 * Short format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function short(ms) {
	  if (ms >= d) return Math.round(ms / d) + 'd';
	  if (ms >= h) return Math.round(ms / h) + 'h';
	  if (ms >= m) return Math.round(ms / m) + 'm';
	  if (ms >= s) return Math.round(ms / s) + 's';
	  return ms + 'ms';
	}

	/**
	 * Long format for `ms`.
	 *
	 * @param {Number} ms
	 * @return {String}
	 * @api private
	 */

	function long(ms) {
	  return plural(ms, d, 'day')
	    || plural(ms, h, 'hour')
	    || plural(ms, m, 'minute')
	    || plural(ms, s, 'second')
	    || ms + ' ms';
	}

	/**
	 * Pluralization helper.
	 */

	function plural(ms, n, name) {
	  if (ms < n) return;
	  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
	  return Math.ceil(ms / n) + ' ' + name + 's';
	}


/***/ },
/* 2826 */
/***/ function(module, exports, __webpack_require__) {

	// json5.js
	// Modern JSON. See README.md for details.
	//
	// This file is based directly off of Douglas Crockford's json_parse.js:
	// https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js

	var JSON5 = ( true ? exports : {});

	JSON5.parse = (function () {
	    "use strict";

	// This is a function that can parse a JSON5 text, producing a JavaScript
	// data structure. It is a simple, recursive descent parser. It does not use
	// eval or regular expressions, so it can be used as a model for implementing
	// a JSON5 parser in other languages.

	// We are defining the function inside of another function to avoid creating
	// global variables.

	    var at,     // The index of the current character
	        ch,     // The current character
	        escapee = {
	            "'":  "'",
	            '"':  '"',
	            '\\': '\\',
	            '/':  '/',
	            '\n': '',       // Replace escaped newlines in strings w/ empty string
	            b:    '\b',
	            f:    '\f',
	            n:    '\n',
	            r:    '\r',
	            t:    '\t'
	        },
	        ws = [
	            ' ',
	            '\t',
	            '\r',
	            '\n',
	            '\v',
	            '\f',
	            '\xA0',
	            '\uFEFF'
	        ],
	        text,

	        error = function (m) {

	// Call error when something is wrong.

	            var error = new SyntaxError();
	            error.message = m;
	            error.at = at;
	            error.text = text;
	            throw error;
	        },

	        next = function (c) {

	// If a c parameter is provided, verify that it matches the current character.

	            if (c && c !== ch) {
	                error("Expected '" + c + "' instead of '" + ch + "'");
	            }

	// Get the next character. When there are no more characters,
	// return the empty string.

	            ch = text.charAt(at);
	            at += 1;
	            return ch;
	        },

	        peek = function () {

	// Get the next character without consuming it or
	// assigning it to the ch varaible.

	            return text.charAt(at);
	        },

	        identifier = function () {

	// Parse an identifier. Normally, reserved words are disallowed here, but we
	// only use this for unquoted object keys, where reserved words are allowed,
	// so we don't check for those here. References:
	// - http://es5.github.com/#x7.6
	// - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables
	// - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm
	// TODO Identifiers can have Unicode "letters" in them; add support for those.

	            var key = ch;

	            // Identifiers must start with a letter, _ or $.
	            if ((ch !== '_' && ch !== '$') &&
	                    (ch < 'a' || ch > 'z') &&
	                    (ch < 'A' || ch > 'Z')) {
	                error("Bad identifier");
	            }

	            // Subsequent characters can contain digits.
	            while (next() && (
	                    ch === '_' || ch === '$' ||
	                    (ch >= 'a' && ch <= 'z') ||
	                    (ch >= 'A' && ch <= 'Z') ||
	                    (ch >= '0' && ch <= '9'))) {
	                key += ch;
	            }

	            return key;
	        },

	        number = function () {

	// Parse a number value.

	            var number,
	                sign = '',
	                string = '',
	                base = 10;

	            if (ch === '-' || ch === '+') {
	                sign = ch;
	                next(ch);
	            }

	            // support for Infinity (could tweak to allow other words):
	            if (ch === 'I') {
	                number = word();
	                if (typeof number !== 'number' || isNaN(number)) {
	                    error('Unexpected word for number');
	                }
	                return (sign === '-') ? -number : number;
	            }

	            // support for NaN
	            if (ch === 'N' ) {
	              number = word();
	              if (!isNaN(number)) {
	                error('expected word to be NaN');
	              }
	              // ignore sign as -NaN also is NaN
	              return number;
	            }

	            if (ch === '0') {
	                string += ch;
	                next();
	                if (ch === 'x' || ch === 'X') {
	                    string += ch;
	                    next();
	                    base = 16;
	                } else if (ch >= '0' && ch <= '9') {
	                    error('Octal literal');
	                }
	            }

	            switch (base) {
	            case 10:
	                while (ch >= '0' && ch <= '9' ) {
	                    string += ch;
	                    next();
	                }
	                if (ch === '.') {
	                    string += '.';
	                    while (next() && ch >= '0' && ch <= '9') {
	                        string += ch;
	                    }
	                }
	                if (ch === 'e' || ch === 'E') {
	                    string += ch;
	                    next();
	                    if (ch === '-' || ch === '+') {
	                        string += ch;
	                        next();
	                    }
	                    while (ch >= '0' && ch <= '9') {
	                        string += ch;
	                        next();
	                    }
	                }
	                break;
	            case 16:
	                while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {
	                    string += ch;
	                    next();
	                }
	                break;
	            }

	            if(sign === '-') {
	                number = -string;
	            } else {
	                number = +string;
	            }
	            
	            if (!isFinite(number)) {
	                error("Bad number");
	            } else {
	                return number;
	            }
	        },

	        string = function () {

	// Parse a string value.

	            var hex,
	                i,
	                string = '',
	                delim,      // double quote or single quote
	                uffff;

	// When parsing for string values, we must look for ' or " and \ characters.

	            if (ch === '"' || ch === "'") {
	                delim = ch;
	                while (next()) {
	                    if (ch === delim) {
	                        next();
	                        return string;
	                    } else if (ch === '\\') {
	                        next();
	                        if (ch === 'u') {
	                            uffff = 0;
	                            for (i = 0; i < 4; i += 1) {
	                                hex = parseInt(next(), 16);
	                                if (!isFinite(hex)) {
	                                    break;
	                                }
	                                uffff = uffff * 16 + hex;
	                            }
	                            string += String.fromCharCode(uffff);
	                        } else if (ch === '\r') {
	                            if (peek() === '\n') {
	                                next();
	                            }
	                        } else if (typeof escapee[ch] === 'string') {
	                            string += escapee[ch];
	                        } else {
	                            break;
	                        }
	                    } else if (ch === '\n') {
	                        // unescaped newlines are invalid; see:
	                        // https://github.com/aseemk/json5/issues/24
	                        // TODO this feels special-cased; are there other
	                        // invalid unescaped chars?
	                        break;
	                    } else {
	                        string += ch;
	                    }
	                }
	            }
	            error("Bad string");
	        },

	        inlineComment = function () {

	// Skip an inline comment, assuming this is one. The current character should
	// be the second / character in the // pair that begins this inline comment.
	// To finish the inline comment, we look for a newline or the end of the text.

	            if (ch !== '/') {
	                error("Not an inline comment");
	            }

	            do {
	                next();
	                if (ch === '\n' || ch === '\r') {
	                    next();
	                    return;
	                }
	            } while (ch);
	        },

	        blockComment = function () {

	// Skip a block comment, assuming this is one. The current character should be
	// the * character in the /* pair that begins this block comment.
	// To finish the block comment, we look for an ending */ pair of characters,
	// but we also watch for the end of text before the comment is terminated.

	            if (ch !== '*') {
	                error("Not a block comment");
	            }

	            do {
	                next();
	                while (ch === '*') {
	                    next('*');
	                    if (ch === '/') {
	                        next('/');
	                        return;
	                    }
	                }
	            } while (ch);

	            error("Unterminated block comment");
	        },

	        comment = function () {

	// Skip a comment, whether inline or block-level, assuming this is one.
	// Comments always begin with a / character.

	            if (ch !== '/') {
	                error("Not a comment");
	            }

	            next('/');

	            if (ch === '/') {
	                inlineComment();
	            } else if (ch === '*') {
	                blockComment();
	            } else {
	                error("Unrecognized comment");
	            }
	        },

	        white = function () {

	// Skip whitespace and comments.
	// Note that we're detecting comments by only a single / character.
	// This works since regular expressions are not valid JSON(5), but this will
	// break if there are other valid values that begin with a / character!

	            while (ch) {
	                if (ch === '/') {
	                    comment();
	                } else if (ws.indexOf(ch) >= 0) {
	                    next();
	                } else {
	                    return;
	                }
	            }
	        },

	        word = function () {

	// true, false, or null.

	            switch (ch) {
	            case 't':
	                next('t');
	                next('r');
	                next('u');
	                next('e');
	                return true;
	            case 'f':
	                next('f');
	                next('a');
	                next('l');
	                next('s');
	                next('e');
	                return false;
	            case 'n':
	                next('n');
	                next('u');
	                next('l');
	                next('l');
	                return null;
	            case 'I':
	                next('I');
	                next('n');
	                next('f');
	                next('i');
	                next('n');
	                next('i');
	                next('t');
	                next('y');
	                return Infinity;
	            case 'N':
	              next( 'N' );
	              next( 'a' );
	              next( 'N' );
	              return NaN;
	            }
	            error("Unexpected '" + ch + "'");
	        },

	        value,  // Place holder for the value function.

	        array = function () {

	// Parse an array value.

	            var array = [];

	            if (ch === '[') {
	                next('[');
	                white();
	                while (ch) {
	                    if (ch === ']') {
	                        next(']');
	                        return array;   // Potentially empty array
	                    }
	                    // ES5 allows omitting elements in arrays, e.g. [,] and
	                    // [,null]. We don't allow this in JSON5.
	                    if (ch === ',') {
	                        error("Missing array element");
	                    } else {
	                        array.push(value());
	                    }
	                    white();
	                    // If there's no comma after this value, this needs to
	                    // be the end of the array.
	                    if (ch !== ',') {
	                        next(']');
	                        return array;
	                    }
	                    next(',');
	                    white();
	                }
	            }
	            error("Bad array");
	        },

	        object = function () {

	// Parse an object value.

	            var key,
	                object = {};

	            if (ch === '{') {
	                next('{');
	                white();
	                while (ch) {
	                    if (ch === '}') {
	                        next('}');
	                        return object;   // Potentially empty object
	                    }

	                    // Keys can be unquoted. If they are, they need to be
	                    // valid JS identifiers.
	                    if (ch === '"' || ch === "'") {
	                        key = string();
	                    } else {
	                        key = identifier();
	                    }

	                    white();
	                    next(':');
	                    object[key] = value();
	                    white();
	                    // If there's no comma after this pair, this needs to be
	                    // the end of the object.
	                    if (ch !== ',') {
	                        next('}');
	                        return object;
	                    }
	                    next(',');
	                    white();
	                }
	            }
	            error("Bad object");
	        };

	    value = function () {

	// Parse a JSON value. It could be an object, an array, a string, a number,
	// or a word.

	        white();
	        switch (ch) {
	        case '{':
	            return object();
	        case '[':
	            return array();
	        case '"':
	        case "'":
	            return string();
	        case '-':
	        case '+':
	        case '.':
	            return number();
	        default:
	            return ch >= '0' && ch <= '9' ? number() : word();
	        }
	    };

	// Return the json_parse function. It will have access to all of the above
	// functions and variables.

	    return function (source, reviver) {
	        var result;

	        text = String(source);
	        at = 0;
	        ch = ' ';
	        result = value();
	        white();
	        if (ch) {
	            error("Syntax error");
	        }

	// If there is a reviver function, we recursively walk the new structure,
	// passing each name/value pair to the reviver function for possible
	// transformation, starting with a temporary root object that holds the result
	// in an empty key. If there is not a reviver function, we simply return the
	// result.

	        return typeof reviver === 'function' ? (function walk(holder, key) {
	            var k, v, value = holder[key];
	            if (value && typeof value === 'object') {
	                for (k in value) {
	                    if (Object.prototype.hasOwnProperty.call(value, k)) {
	                        v = walk(value, k);
	                        if (v !== undefined) {
	                            value[k] = v;
	                        } else {
	                            delete value[k];
	                        }
	                    }
	                }
	            }
	            return reviver.call(holder, key, value);
	        }({'': result}, '')) : result;
	    };
	}());

	// JSON5 stringify will not quote keys where appropriate
	JSON5.stringify = function (obj, replacer, space) {
	    if (replacer && (typeof(replacer) !== "function" && !isArray(replacer))) {
	        throw new Error('Replacer must be a function or an array');
	    }
	    var getReplacedValueOrUndefined = function(holder, key, isTopLevel) {
	        var value = holder[key];

	        // Replace the value with its toJSON value first, if possible
	        if (value && value.toJSON && typeof value.toJSON === "function") {
	            value = value.toJSON();
	        }

	        // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for
	        // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).
	        if (typeof(replacer) === "function") {
	            return replacer.call(holder, key, value);
	        } else if(replacer) {
	            if (isTopLevel || isArray(holder) || replacer.indexOf(key) >= 0) {
	                return value;
	            } else {
	                return undefined;
	            }
	        } else {
	            return value;
	        }
	    };

	    function isWordChar(char) {
	        return (char >= 'a' && char <= 'z') ||
	            (char >= 'A' && char <= 'Z') ||
	            (char >= '0' && char <= '9') ||
	            char === '_' || char === '$';
	    }

	    function isWordStart(char) {
	        return (char >= 'a' && char <= 'z') ||
	            (char >= 'A' && char <= 'Z') ||
	            char === '_' || char === '$';
	    }

	    function isWord(key) {
	        if (typeof key !== 'string') {
	            return false;
	        }
	        if (!isWordStart(key[0])) {
	            return false;
	        }
	        var i = 1, length = key.length;
	        while (i < length) {
	            if (!isWordChar(key[i])) {
	                return false;
	            }
	            i++;
	        }
	        return true;
	    }

	    // export for use in tests
	    JSON5.isWord = isWord;

	    // polyfills
	    function isArray(obj) {
	        if (Array.isArray) {
	            return Array.isArray(obj);
	        } else {
	            return Object.prototype.toString.call(obj) === '[object Array]';
	        }
	    }

	    function isDate(obj) {
	        return Object.prototype.toString.call(obj) === '[object Date]';
	    }

	    isNaN = isNaN || function(val) {
	        return typeof val === 'number' && val !== val;
	    };

	    var objStack = [];
	    function checkForCircular(obj) {
	        for (var i = 0; i < objStack.length; i++) {
	            if (objStack[i] === obj) {
	                throw new TypeError("Converting circular structure to JSON");
	            }
	        }
	    }

	    function makeIndent(str, num, noNewLine) {
	        if (!str) {
	            return "";
	        }
	        // indentation no more than 10 chars
	        if (str.length > 10) {
	            str = str.substring(0, 10);
	        }

	        var indent = noNewLine ? "" : "\n";
	        for (var i = 0; i < num; i++) {
	            indent += str;
	        }

	        return indent;
	    }

	    var indentStr;
	    if (space) {
	        if (typeof space === "string") {
	            indentStr = space;
	        } else if (typeof space === "number" && space >= 0) {
	            indentStr = makeIndent(" ", space, true);
	        } else {
	            // ignore space parameter
	        }
	    }

	    // Copied from Crokford's implementation of JSON
	    // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195
	    // Begin
	    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	        meta = { // table of character substitutions
	        '\b': '\\b',
	        '\t': '\\t',
	        '\n': '\\n',
	        '\f': '\\f',
	        '\r': '\\r',
	        '"' : '\\"',
	        '\\': '\\\\'
	    };
	    function escapeString(string) {

	// If the string contains no control characters, no quote characters, and no
	// backslash characters, then we can safely slap some quotes around it.
	// Otherwise we must also replace the offending characters with safe escape
	// sequences.
	        escapable.lastIndex = 0;
	        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
	            var c = meta[a];
	            return typeof c === 'string' ?
	                c :
	                '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	        }) + '"' : '"' + string + '"';
	    }
	    // End

	    function internalStringify(holder, key, isTopLevel) {
	        var buffer, res;

	        // Replace the value, if necessary
	        var obj_part = getReplacedValueOrUndefined(holder, key, isTopLevel);

	        if (obj_part && !isDate(obj_part)) {
	            // unbox objects
	            // don't unbox dates, since will turn it into number
	            obj_part = obj_part.valueOf();
	        }
	        switch(typeof obj_part) {
	            case "boolean":
	                return obj_part.toString();

	            case "number":
	                if (isNaN(obj_part) || !isFinite(obj_part)) {
	                    return "null";
	                }
	                return obj_part.toString();

	            case "string":
	                return escapeString(obj_part.toString());

	            case "object":
	                if (obj_part === null) {
	                    return "null";
	                } else if (isArray(obj_part)) {
	                    checkForCircular(obj_part);
	                    buffer = "[";
	                    objStack.push(obj_part);

	                    for (var i = 0; i < obj_part.length; i++) {
	                        res = internalStringify(obj_part, i, false);
	                        buffer += makeIndent(indentStr, objStack.length);
	                        if (res === null || typeof res === "undefined") {
	                            buffer += "null";
	                        } else {
	                            buffer += res;
	                        }
	                        if (i < obj_part.length-1) {
	                            buffer += ",";
	                        } else if (indentStr) {
	                            buffer += "\n";
	                        }
	                    }
	                    objStack.pop();
	                    buffer += makeIndent(indentStr, objStack.length, true) + "]";
	                } else {
	                    checkForCircular(obj_part);
	                    buffer = "{";
	                    var nonEmpty = false;
	                    objStack.push(obj_part);
	                    for (var prop in obj_part) {
	                        if (obj_part.hasOwnProperty(prop)) {
	                            var value = internalStringify(obj_part, prop, false);
	                            isTopLevel = false;
	                            if (typeof value !== "undefined" && value !== null) {
	                                buffer += makeIndent(indentStr, objStack.length);
	                                nonEmpty = true;
	                                var key = isWord(prop) ? prop : escapeString(prop);
	                                buffer += key + ":" + (indentStr ? ' ' : '') + value + ",";
	                            }
	                        }
	                    }
	                    objStack.pop();
	                    if (nonEmpty) {
	                        buffer = buffer.substring(0, buffer.length-1) + makeIndent(indentStr, objStack.length) + "}";
	                    } else {
	                        buffer = '{}';
	                    }
	                }
	                return buffer;
	            default:
	                // functions and undefined should be ignored
	                return undefined;
	        }
	    }

	    // special case...when undefined is used inside of
	    // a compound object/array, return null.
	    // but when top-level, return undefined
	    var topLevelHolder = {"":obj};
	    if (obj === undefined) {
	        return getReplacedValueOrUndefined(topLevelHolder, '', true);
	    }
	    return internalStringify(topLevelHolder, '', true);
	};


/***/ },
/* 2827 */
/***/ function(module, exports) {

	/**
	 * Creates an array with all falsey values removed. The values `false`, `null`,
	 * `0`, `""`, `undefined`, and `NaN` are falsey.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to compact.
	 * @returns {Array} Returns the new array of filtered values.
	 * @example
	 *
	 * _.compact([0, 1, false, 2, '', 3]);
	 * // => [1, 2, 3]
	 */
	function compact(array) {
	  var index = -1,
	      length = array ? array.length : 0,
	      resIndex = -1,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (value) {
	      result[++resIndex] = value;
	    }
	  }
	  return result;
	}

	module.exports = compact;


/***/ },
/* 2828 */
[7930, 707, 2849, 431, 2870],
/* 2829 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(706);


/***/ },
/* 2830 */
[7932, 981, 982, 2859],
/* 2831 */
/***/ function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(2835),
	    baseCallback = __webpack_require__(707),
	    baseMap = __webpack_require__(1589),
	    isArray = __webpack_require__(110);

	/**
	 * Creates an array of values by running each element in `collection` through
	 * `iteratee`. The `iteratee` is bound to `thisArg` and invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	 *
	 * The guarded methods are:
	 * `ary`, `callback`, `chunk`, `clone`, `create`, `curry`, `curryRight`,
	 * `drop`, `dropRight`, `every`, `fill`, `flatten`, `invert`, `max`, `min`,
	 * `parseInt`, `slice`, `sortBy`, `take`, `takeRight`, `template`, `trim`,
	 * `trimLeft`, `trimRight`, `trunc`, `random`, `range`, `sample`, `some`,
	 * `sum`, `uniq`, and `words`
	 *
	 * @static
	 * @memberOf _
	 * @alias collect
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array} Returns the new mapped array.
	 * @example
	 *
	 * function timesThree(n) {
	 *   return n * 3;
	 * }
	 *
	 * _.map([1, 2], timesThree);
	 * // => [3, 6]
	 *
	 * _.map({ 'a': 1, 'b': 2 }, timesThree);
	 * // => [3, 6] (iteration order is not guaranteed)
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * // using the `_.property` callback shorthand
	 * _.map(users, 'user');
	 * // => ['barney', 'fred']
	 */
	function map(collection, iteratee, thisArg) {
	  var func = isArray(collection) ? arrayMap : baseMap;
	  iteratee = baseCallback(iteratee, thisArg, 3);
	  return func(collection, iteratee);
	}

	module.exports = map;


/***/ },
/* 2832 */
/***/ function(module, exports, __webpack_require__) {

	var arraySome = __webpack_require__(1581),
	    baseCallback = __webpack_require__(707),
	    baseSome = __webpack_require__(2847),
	    isArray = __webpack_require__(110),
	    isIterateeCall = __webpack_require__(431);

	/**
	 * Checks if `predicate` returns truthy for **any** element of `collection`.
	 * The function returns as soon as it finds a passing value and does not iterate
	 * over the entire collection. The predicate is bound to `thisArg` and invoked
	 * with three arguments: (value, index|key, collection).
	 *
	 * If a property name is provided for `predicate` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `predicate` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @alias any
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [predicate=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `predicate`.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 * @example
	 *
	 * _.some([null, 0, 'yes', false], Boolean);
	 * // => true
	 *
	 * var users = [
	 *   { 'user': 'barney', 'active': true },
	 *   { 'user': 'fred',   'active': false }
	 * ];
	 *
	 * // using the `_.matches` callback shorthand
	 * _.some(users, { 'user': 'barney', 'active': false });
	 * // => false
	 *
	 * // using the `_.matchesProperty` callback shorthand
	 * _.some(users, 'active', false);
	 * // => true
	 *
	 * // using the `_.property` callback shorthand
	 * _.some(users, 'active');
	 * // => true
	 */
	function some(collection, predicate, thisArg) {
	  var func = isArray(collection) ? arraySome : baseSome;
	  if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
	    predicate = undefined;
	  }
	  if (typeof predicate != 'function' || thisArg !== undefined) {
	    predicate = baseCallback(predicate, thisArg, 3);
	  }
	  return func(collection, predicate);
	}

	module.exports = some;


/***/ },
/* 2833 */
/***/ function(module, exports, __webpack_require__) {

	var baseCallback = __webpack_require__(707),
	    baseMap = __webpack_require__(1589),
	    baseSortBy = __webpack_require__(2848),
	    compareAscending = __webpack_require__(2854),
	    isIterateeCall = __webpack_require__(431);

	/**
	 * Creates an array of elements, sorted in ascending order by the results of
	 * running each element in a collection through `iteratee`. This method performs
	 * a stable sort, that is, it preserves the original sort order of equal elements.
	 * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function|Object|string} [iteratee=_.identity] The function invoked
	 *  per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array} Returns the new sorted array.
	 * @example
	 *
	 * _.sortBy([1, 2, 3], function(n) {
	 *   return Math.sin(n);
	 * });
	 * // => [3, 1, 2]
	 *
	 * _.sortBy([1, 2, 3], function(n) {
	 *   return this.sin(n);
	 * }, Math);
	 * // => [3, 1, 2]
	 *
	 * var users = [
	 *   { 'user': 'fred' },
	 *   { 'user': 'pebbles' },
	 *   { 'user': 'barney' }
	 * ];
	 *
	 * // using the `_.property` callback shorthand
	 * _.pluck(_.sortBy(users, 'user'), 'user');
	 * // => ['barney', 'fred', 'pebbles']
	 */
	function sortBy(collection, iteratee, thisArg) {
	  if (collection == null) {
	    return [];
	  }
	  if (thisArg && isIterateeCall(collection, iteratee, thisArg)) {
	    iteratee = undefined;
	  }
	  var index = -1;
	  iteratee = baseCallback(iteratee, thisArg, 3);

	  var result = baseMap(collection, function(value, key, collection) {
	    return { 'criteria': iteratee(value, key, collection), 'index': ++index, 'value': value };
	  });
	  return baseSortBy(result, compareAscending);
	}

	module.exports = sortBy;


/***/ },
/* 2834 */
[7934, 2853, 708],
/* 2835 */
/***/ function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	module.exports = arrayMap;


/***/ },
/* 2836 */
/***/ function(module, exports) {

	/**
	 * Used by `_.defaults` to customize its `_.assign` use.
	 *
	 * @private
	 * @param {*} objectValue The destination object property value.
	 * @param {*} sourceValue The source object property value.
	 * @returns {*} Returns the value to assign to the destination object.
	 */
	function assignDefaults(objectValue, sourceValue) {
	  return objectValue === undefined ? sourceValue : objectValue;
	}

	module.exports = assignDefaults;


/***/ },
/* 2837 */
[7935, 379],
/* 2838 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `compareAscending` which compares values and
	 * sorts them in ascending order without guaranteeing a stable sort.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {number} Returns the sort order indicator for `value`.
	 */
	function baseCompareAscending(value, other) {
	  if (value !== other) {
	    var valIsNull = value === null,
	        valIsUndef = value === undefined,
	        valIsReflexive = value === value;

	    var othIsNull = other === null,
	        othIsUndef = other === undefined,
	        othIsReflexive = other === other;

	    if ((value > other && !othIsNull) || !valIsReflexive ||
	        (valIsNull && !othIsUndef && othIsReflexive) ||
	        (valIsUndef && othIsReflexive)) {
	      return 1;
	    }
	    if ((value < other && !valIsNull) || !othIsReflexive ||
	        (othIsNull && !valIsUndef && valIsReflexive) ||
	        (othIsUndef && valIsReflexive)) {
	      return -1;
	    }
	  }
	  return 0;
	}

	module.exports = baseCompareAscending;


/***/ },
/* 2839 */
[7941, 1585, 991],
/* 2840 */
[7946, 2860, 2861, 2862, 110, 989],
/* 2841 */
[7947, 1588, 295],
/* 2842 */
[7948, 2841, 2864, 295],
/* 2843 */
[7949, 983, 1588, 1591, 110, 986, 1593, 1578, 295, 987],
/* 2844 */
/***/ function(module, exports, __webpack_require__) {

	var arrayEach = __webpack_require__(981),
	    baseMergeDeep = __webpack_require__(2845),
	    isArray = __webpack_require__(110),
	    isArrayLike = __webpack_require__(430),
	    isObject = __webpack_require__(145),
	    isObjectLike = __webpack_require__(172),
	    isTypedArray = __webpack_require__(989),
	    keys = __webpack_require__(379);

	/**
	 * The base implementation of `_.merge` without support for argument juggling,
	 * multiple sources, and `this` binding `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates values with source counterparts.
	 * @returns {Object} Returns `object`.
	 */
	function baseMerge(object, source, customizer, stackA, stackB) {
	  if (!isObject(object)) {
	    return object;
	  }
	  var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),
	      props = isSrcArr ? undefined : keys(source);

	  arrayEach(props || source, function(srcValue, key) {
	    if (props) {
	      key = srcValue;
	      srcValue = source[key];
	    }
	    if (isObjectLike(srcValue)) {
	      stackA || (stackA = []);
	      stackB || (stackB = []);
	      baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);
	    }
	    else {
	      var value = object[key],
	          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	          isCommon = result === undefined;

	      if (isCommon) {
	        result = srcValue;
	      }
	      if ((result !== undefined || (isSrcArr && !(key in object))) &&
	          (isCommon || (result === result ? (result !== value) : (value === value)))) {
	        object[key] = result;
	      }
	    }
	  });
	  return object;
	}

	module.exports = baseMerge;


/***/ },
/* 2845 */
/***/ function(module, exports, __webpack_require__) {

	var arrayCopy = __webpack_require__(1580),
	    isArguments = __webpack_require__(550),
	    isArray = __webpack_require__(110),
	    isArrayLike = __webpack_require__(430),
	    isPlainObject = __webpack_require__(1598),
	    isTypedArray = __webpack_require__(989),
	    toPlainObject = __webpack_require__(2872);

	/**
	 * A specialized version of `baseMerge` for arrays and objects which performs
	 * deep merges and tracks traversed objects enabling objects with circular
	 * references to be merged.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {string} key The key of the value to merge.
	 * @param {Function} mergeFunc The function to merge values.
	 * @param {Function} [customizer] The function to customize merged values.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates values with source counterparts.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {
	  var length = stackA.length,
	      srcValue = source[key];

	  while (length--) {
	    if (stackA[length] == srcValue) {
	      object[key] = stackB[length];
	      return;
	    }
	  }
	  var value = object[key],
	      result = customizer ? customizer(value, srcValue, key, object, source) : undefined,
	      isCommon = result === undefined;

	  if (isCommon) {
	    result = srcValue;
	    if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {
	      result = isArray(value)
	        ? value
	        : (isArrayLike(value) ? arrayCopy(value) : []);
	    }
	    else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	      result = isArguments(value)
	        ? toPlainObject(value)
	        : (isPlainObject(value) ? value : {});
	    }
	    else {
	      isCommon = false;
	    }
	  }
	  // Add the source value to the stack of traversed objects and associate
	  // it with its merged value.
	  stackA.push(srcValue);
	  stackB.push(result);

	  if (isCommon) {
	    // Recursively merge objects and arrays (susceptible to call stack limits).
	    object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);
	  } else if (result === result ? (result !== value) : (value === value)) {
	    object[key] = result;
	  }
	}

	module.exports = baseMergeDeep;


/***/ },
/* 2846 */
[7950, 983, 987],
/* 2847 */
/***/ function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(982);

	/**
	 * The base implementation of `_.some` without support for callback shorthands
	 * and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function baseSome(collection, predicate) {
	  var result;

	  baseEach(collection, function(value, index, collection) {
	    result = predicate(value, index, collection);
	    return !result;
	  });
	  return !!result;
	}

	module.exports = baseSome;


/***/ },
/* 2848 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.sortBy` which uses `comparer` to define
	 * the sort order of `array` and replaces criteria objects with their
	 * corresponding values.
	 *
	 * @private
	 * @param {Array} array The array to sort.
	 * @param {Function} comparer The function to define sort order.
	 * @returns {Array} Returns `array`.
	 */
	function baseSortBy(array, comparer) {
	  var length = array.length;

	  array.sort(comparer);
	  while (length--) {
	    array[length] = array[length].value;
	  }
	  return array;
	}

	module.exports = baseSortBy;


/***/ },
/* 2849 */
[7951, 1587, 2852, 2857],
/* 2850 */
/***/ function(module, exports) {

	/**
	 * The base implementation of `_.values` and `_.valuesIn` which creates an
	 * array of `object` property values corresponding to the property names
	 * of `props`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} props The property names to get values for.
	 * @returns {Object} Returns the array of property values.
	 */
	function baseValues(object, props) {
	  var index = -1,
	      length = props.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = object[props[index]];
	  }
	  return result;
	}

	module.exports = baseValues;


/***/ },
/* 2851 */
/***/ function(module, exports) {

	/* WEBPACK VAR INJECTION */(function(global) {/** Native method references. */
	var ArrayBuffer = global.ArrayBuffer,
	    Uint8Array = global.Uint8Array;

	/**
	 * Creates a clone of the given array buffer.
	 *
	 * @private
	 * @param {ArrayBuffer} buffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function bufferClone(buffer) {
	  var result = new ArrayBuffer(buffer.byteLength),
	      view = new Uint8Array(result);

	  view.set(new Uint8Array(buffer));
	  return result;
	}

	module.exports = bufferClone;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 2852 */
[7953, 145],
/* 2853 */
[7954, 145],
/* 2854 */
/***/ function(module, exports, __webpack_require__) {

	var baseCompareAscending = __webpack_require__(2838);

	/**
	 * Used by `_.sortBy` to compare transformed elements of a collection and stable
	 * sort them in ascending order.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @returns {number} Returns the sort order indicator for `object`.
	 */
	function compareAscending(object, other) {
	  return baseCompareAscending(object.criteria, other.criteria) || (object.index - other.index);
	}

	module.exports = compareAscending;


/***/ },
/* 2855 */
[7956, 985, 294, 295],
/* 2856 */
[7957, 295],
/* 2857 */
[7958, 2834, 708],
/* 2858 */
[7959, 1579],
/* 2859 */
[7960, 549, 110],
/* 2860 */
[7961, 1581],
/* 2861 */
/***/ function(module, exports) {

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag) {
	  switch (tag) {
	    case boolTag:
	    case dateTag:
	      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
	      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
	      return +object == +other;

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case numberTag:
	      // Treat `NaN` vs. `NaN` as equal.
	      return (object != +object)
	        ? other != +other
	        : object == +other;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings primitives and string
	      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
	      return object == (other + '');
	  }
	  return false;
	}

	module.exports = equalByTag;


/***/ },
/* 2862 */
[7962, 379],
/* 2863 */
/***/ function(module, exports) {

	/** Used to escape characters for inclusion in compiled regexes. */
	var regexpEscapes = {
	  '0': 'x30', '1': 'x31', '2': 'x32', '3': 'x33', '4': 'x34',
	  '5': 'x35', '6': 'x36', '7': 'x37', '8': 'x38', '9': 'x39',
	  'A': 'x41', 'B': 'x42', 'C': 'x43', 'D': 'x44', 'E': 'x45', 'F': 'x46',
	  'a': 'x61', 'b': 'x62', 'c': 'x63', 'd': 'x64', 'e': 'x65', 'f': 'x66',
	  'n': 'x6e', 'r': 'x72', 't': 'x74', 'u': 'x75', 'v': 'x76', 'x': 'x78'
	};

	/** Used to escape characters for inclusion in compiled string literals. */
	var stringEscapes = {
	  '\\': '\\',
	  "'": "'",
	  '\n': 'n',
	  '\r': 'r',
	  '\u2028': 'u2028',
	  '\u2029': 'u2029'
	};

	/**
	 * Used by `_.escapeRegExp` to escape characters for inclusion in compiled regexes.
	 *
	 * @private
	 * @param {string} chr The matched character to escape.
	 * @param {string} leadingChar The capture group for a leading character.
	 * @param {string} whitespaceChar The capture group for a whitespace character.
	 * @returns {string} Returns the escaped character.
	 */
	function escapeRegExpChar(chr, leadingChar, whitespaceChar) {
	  if (leadingChar) {
	    chr = regexpEscapes[chr];
	  } else if (whitespaceChar) {
	    chr = stringEscapes[chr];
	  }
	  return '\\' + chr;
	}

	module.exports = escapeRegExpChar;


/***/ },
/* 2864 */
[7964, 1593, 2875],
/* 2865 */
/***/ function(module, exports) {

	/**
	 * Gets the index at which the first occurrence of `NaN` is found in `array`.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched `NaN`, else `-1`.
	 */
	function indexOfNaN(array, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 0 : -1);

	  while ((fromRight ? index-- : ++index < length)) {
	    var other = array[index];
	    if (other !== other) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = indexOfNaN;


/***/ },
/* 2866 */
/***/ function(module, exports) {

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = new array.constructor(length);

	  // Add array properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	module.exports = initCloneArray;


/***/ },
/* 2867 */
[7966, 2851],
/* 2868 */
/***/ function(module, exports) {

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	  var Ctor = object.constructor;
	  if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {
	    Ctor = Object;
	  }
	  return new Ctor;
	}

	module.exports = initCloneObject;


/***/ },
/* 2869 */
[7971, 550, 110, 709, 294, 991],
/* 2870 */
/***/ function(module, exports) {

	/**
	 * An implementation of `_.uniq` optimized for sorted arrays without support
	 * for callback shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The function invoked per iteration.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function sortedUniq(array, iteratee) {
	  var seen,
	      index = -1,
	      length = array.length,
	      resIndex = -1,
	      result = [];

	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value, index, array) : value;

	    if (!index || seen !== computed) {
	      seen = computed;
	      result[++resIndex] = value;
	    }
	  }
	  return result;
	}

	module.exports = sortedUniq;


/***/ },
/* 2871 */
[7979, 1596, 172],
/* 2872 */
/***/ function(module, exports, __webpack_require__) {

	var baseCopy = __webpack_require__(1584),
	    keysIn = __webpack_require__(991);

	/**
	 * Converts `value` to a plain object flattening inherited enumerable
	 * properties of `value` to own properties of the plain object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {Object} Returns the converted plain object.
	 * @example
	 *
	 * function Foo() {
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.assign({ 'a': 1 }, new Foo);
	 * // => { 'a': 1, 'b': 2 }
	 *
	 * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	 * // => { 'a': 1, 'b': 2, 'c': 3 }
	 */
	function toPlainObject(value) {
	  return baseCopy(value, keysIn(value));
	}

	module.exports = toPlainObject;


/***/ },
/* 2873 */
[7987, 983, 1591, 550, 110, 709, 986, 294, 1578, 987],
/* 2874 */
/***/ function(module, exports, __webpack_require__) {

	var baseMerge = __webpack_require__(2844),
	    createAssigner = __webpack_require__(1592);

	/**
	 * Recursively merges own enumerable properties of the source object(s), that
	 * don't resolve to `undefined` into the destination object. Subsequent sources
	 * overwrite property assignments of previous sources. If `customizer` is
	 * provided it's invoked to produce the merged values of the destination and
	 * source properties. If `customizer` returns `undefined` merging is handled
	 * by the method instead. The `customizer` is bound to `thisArg` and invoked
	 * with five arguments: (objectValue, sourceValue, key, object, source).
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * var users = {
	 *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]
	 * };
	 *
	 * var ages = {
	 *   'data': [{ 'age': 36 }, { 'age': 40 }]
	 * };
	 *
	 * _.merge(users, ages);
	 * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }
	 *
	 * // using a customizer callback
	 * var object = {
	 *   'fruits': ['apple'],
	 *   'vegetables': ['beet']
	 * };
	 *
	 * var other = {
	 *   'fruits': ['banana'],
	 *   'vegetables': ['carrot']
	 * };
	 *
	 * _.merge(object, other, function(a, b) {
	 *   if (_.isArray(a)) {
	 *     return a.concat(b);
	 *   }
	 * });
	 * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }
	 */
	var merge = createAssigner(baseMerge);

	module.exports = merge;


/***/ },
/* 2875 */
[7990, 379, 295],
/* 2876 */
[7991, 2850, 379],
/* 2877 */
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(984),
	    escapeRegExpChar = __webpack_require__(2863);

	/**
	 * Used to match `RegExp` [syntax characters](http://ecma-international.org/ecma-262/6.0/#sec-patterns)
	 * and those outlined by [`EscapeRegExpPattern`](http://ecma-international.org/ecma-262/6.0/#sec-escaperegexppattern).
	 */
	var reRegExpChars = /^[:!,]|[\\^$.*+?()[\]{}|\/]|(^[0-9a-fA-Fnrtuvx])|([\n\r\u2028\u2029])/g,
	    reHasRegExpChars = RegExp(reRegExpChars.source);

	/**
	 * Escapes the `RegExp` special characters "\", "/", "^", "$", ".", "|", "?",
	 * "*", "+", "(", ")", "[", "]", "{" and "}" in `string`.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to escape.
	 * @returns {string} Returns the escaped string.
	 * @example
	 *
	 * _.escapeRegExp('[lodash](https://lodash.com/)');
	 * // => '\[lodash\]\(https:\/\/lodash\.com\/\)'
	 */
	function escapeRegExp(string) {
	  string = baseToString(string);
	  return (string && reHasRegExpChars.test(string))
	    ? string.replace(reRegExpChars, escapeRegExpChar)
	    : (string || '(?:)');
	}

	module.exports = escapeRegExp;


/***/ },
/* 2878 */
/***/ function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(984);

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;

	/**
	 * Checks if `string` starts with the given target string.
	 *
	 * @static
	 * @memberOf _
	 * @category String
	 * @param {string} [string=''] The string to search.
	 * @param {string} [target] The string to search for.
	 * @param {number} [position=0] The position to search from.
	 * @returns {boolean} Returns `true` if `string` starts with `target`, else `false`.
	 * @example
	 *
	 * _.startsWith('abc', 'a');
	 * // => true
	 *
	 * _.startsWith('abc', 'b');
	 * // => false
	 *
	 * _.startsWith('abc', 'b', 1);
	 * // => true
	 */
	function startsWith(string, target, position) {
	  string = baseToString(string);
	  position = position == null
	    ? 0
	    : nativeMin(position < 0 ? 0 : (+position || 0), string.length);

	  return string.lastIndexOf(target, position) == position;
	}

	module.exports = startsWith;


/***/ },
/* 2879 */
[7992, 1590, 2846, 986],
/* 2880 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = minimatch
	minimatch.Minimatch = Minimatch

	var path = { sep: '/' }
	try {
	  path = __webpack_require__(289)
	} catch (er) {}

	var GLOBSTAR = minimatch.GLOBSTAR = Minimatch.GLOBSTAR = {}
	var expand = __webpack_require__(2881)

	// any single thing other than /
	// don't need to escape / when using new RegExp()
	var qmark = '[^/]'

	// * => any number of characters
	var star = qmark + '*?'

	// ** when dots are allowed.  Anything goes, except .. and .
	// not (^ or / followed by one or two dots followed by $ or /),
	// followed by anything, any number of times.
	var twoStarDot = '(?:(?!(?:\\\/|^)(?:\\.{1,2})($|\\\/)).)*?'

	// not a ^ or / followed by a dot,
	// followed by anything, any number of times.
	var twoStarNoDot = '(?:(?!(?:\\\/|^)\\.).)*?'

	// characters that need to be escaped in RegExp.
	var reSpecials = charSet('().*{}+?[]^$\\!')

	// "abc" -> { a:true, b:true, c:true }
	function charSet (s) {
	  return s.split('').reduce(function (set, c) {
	    set[c] = true
	    return set
	  }, {})
	}

	// normalizes slashes.
	var slashSplit = /\/+/

	minimatch.filter = filter
	function filter (pattern, options) {
	  options = options || {}
	  return function (p, i, list) {
	    return minimatch(p, pattern, options)
	  }
	}

	function ext (a, b) {
	  a = a || {}
	  b = b || {}
	  var t = {}
	  Object.keys(b).forEach(function (k) {
	    t[k] = b[k]
	  })
	  Object.keys(a).forEach(function (k) {
	    t[k] = a[k]
	  })
	  return t
	}

	minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return minimatch

	  var orig = minimatch

	  var m = function minimatch (p, pattern, options) {
	    return orig.minimatch(p, pattern, ext(def, options))
	  }

	  m.Minimatch = function Minimatch (pattern, options) {
	    return new orig.Minimatch(pattern, ext(def, options))
	  }

	  return m
	}

	Minimatch.defaults = function (def) {
	  if (!def || !Object.keys(def).length) return Minimatch
	  return minimatch.defaults(def).Minimatch
	}

	function minimatch (p, pattern, options) {
	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required')
	  }

	  if (!options) options = {}

	  // shortcut: comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    return false
	  }

	  // "" only matches ""
	  if (pattern.trim() === '') return p === ''

	  return new Minimatch(pattern, options).match(p)
	}

	function Minimatch (pattern, options) {
	  if (!(this instanceof Minimatch)) {
	    return new Minimatch(pattern, options)
	  }

	  if (typeof pattern !== 'string') {
	    throw new TypeError('glob pattern string required')
	  }

	  if (!options) options = {}
	  pattern = pattern.trim()

	  // windows support: need to use /, not \
	  if (path.sep !== '/') {
	    pattern = pattern.split(path.sep).join('/')
	  }

	  this.options = options
	  this.set = []
	  this.pattern = pattern
	  this.regexp = null
	  this.negate = false
	  this.comment = false
	  this.empty = false

	  // make the set of regexps etc.
	  this.make()
	}

	Minimatch.prototype.debug = function () {}

	Minimatch.prototype.make = make
	function make () {
	  // don't do it more than once.
	  if (this._made) return

	  var pattern = this.pattern
	  var options = this.options

	  // empty patterns and comments match nothing.
	  if (!options.nocomment && pattern.charAt(0) === '#') {
	    this.comment = true
	    return
	  }
	  if (!pattern) {
	    this.empty = true
	    return
	  }

	  // step 1: figure out negation, etc.
	  this.parseNegate()

	  // step 2: expand braces
	  var set = this.globSet = this.braceExpand()

	  if (options.debug) this.debug = console.error

	  this.debug(this.pattern, set)

	  // step 3: now we have a set, so turn each one into a series of path-portion
	  // matching patterns.
	  // These will be regexps, except in the case of "**", which is
	  // set to the GLOBSTAR object for globstar behavior,
	  // and will not contain any / characters
	  set = this.globParts = set.map(function (s) {
	    return s.split(slashSplit)
	  })

	  this.debug(this.pattern, set)

	  // glob --> regexps
	  set = set.map(function (s, si, set) {
	    return s.map(this.parse, this)
	  }, this)

	  this.debug(this.pattern, set)

	  // filter out everything that didn't compile properly.
	  set = set.filter(function (s) {
	    return s.indexOf(false) === -1
	  })

	  this.debug(this.pattern, set)

	  this.set = set
	}

	Minimatch.prototype.parseNegate = parseNegate
	function parseNegate () {
	  var pattern = this.pattern
	  var negate = false
	  var options = this.options
	  var negateOffset = 0

	  if (options.nonegate) return

	  for (var i = 0, l = pattern.length
	    ; i < l && pattern.charAt(i) === '!'
	    ; i++) {
	    negate = !negate
	    negateOffset++
	  }

	  if (negateOffset) this.pattern = pattern.substr(negateOffset)
	  this.negate = negate
	}

	// Brace expansion:
	// a{b,c}d -> abd acd
	// a{b,}c -> abc ac
	// a{0..3}d -> a0d a1d a2d a3d
	// a{b,c{d,e}f}g -> abg acdfg acefg
	// a{b,c}d{e,f}g -> abdeg acdeg abdeg abdfg
	//
	// Invalid sets are not expanded.
	// a{2..}b -> a{2..}b
	// a{b}c -> a{b}c
	minimatch.braceExpand = function (pattern, options) {
	  return braceExpand(pattern, options)
	}

	Minimatch.prototype.braceExpand = braceExpand

	function braceExpand (pattern, options) {
	  if (!options) {
	    if (this instanceof Minimatch) {
	      options = this.options
	    } else {
	      options = {}
	    }
	  }

	  pattern = typeof pattern === 'undefined'
	    ? this.pattern : pattern

	  if (typeof pattern === 'undefined') {
	    throw new Error('undefined pattern')
	  }

	  if (options.nobrace ||
	    !pattern.match(/\{.*\}/)) {
	    // shortcut. no need to expand.
	    return [pattern]
	  }

	  return expand(pattern)
	}

	// parse a component of the expanded set.
	// At this point, no pattern may contain "/" in it
	// so we're going to return a 2d array, where each entry is the full
	// pattern, split on '/', and then turned into a regular expression.
	// A regexp is made at the end which joins each array with an
	// escaped /, and another full one which joins each regexp with |.
	//
	// Following the lead of Bash 4.1, note that "**" only has special meaning
	// when it is the *only* thing in a path portion.  Otherwise, any series
	// of * is equivalent to a single *.  Globstar behavior is enabled by
	// default, and can be disabled by setting options.noglobstar.
	Minimatch.prototype.parse = parse
	var SUBPARSE = {}
	function parse (pattern, isSub) {
	  var options = this.options

	  // shortcuts
	  if (!options.noglobstar && pattern === '**') return GLOBSTAR
	  if (pattern === '') return ''

	  var re = ''
	  var hasMagic = !!options.nocase
	  var escaping = false
	  // ? => one single character
	  var patternListStack = []
	  var negativeLists = []
	  var plType
	  var stateChar
	  var inClass = false
	  var reClassStart = -1
	  var classStart = -1
	  // . and .. never match anything that doesn't start with .,
	  // even when options.dot is set.
	  var patternStart = pattern.charAt(0) === '.' ? '' // anything
	  // not (start or / followed by . or .. followed by / or end)
	  : options.dot ? '(?!(?:^|\\\/)\\.{1,2}(?:$|\\\/))'
	  : '(?!\\.)'
	  var self = this

	  function clearStateChar () {
	    if (stateChar) {
	      // we had some state-tracking character
	      // that wasn't consumed by this pass.
	      switch (stateChar) {
	        case '*':
	          re += star
	          hasMagic = true
	        break
	        case '?':
	          re += qmark
	          hasMagic = true
	        break
	        default:
	          re += '\\' + stateChar
	        break
	      }
	      self.debug('clearStateChar %j %j', stateChar, re)
	      stateChar = false
	    }
	  }

	  for (var i = 0, len = pattern.length, c
	    ; (i < len) && (c = pattern.charAt(i))
	    ; i++) {
	    this.debug('%s\t%s %s %j', pattern, i, re, c)

	    // skip over any that are escaped.
	    if (escaping && reSpecials[c]) {
	      re += '\\' + c
	      escaping = false
	      continue
	    }

	    switch (c) {
	      case '/':
	        // completely not allowed, even escaped.
	        // Should already be path-split by now.
	        return false

	      case '\\':
	        clearStateChar()
	        escaping = true
	      continue

	      // the various stateChar values
	      // for the "extglob" stuff.
	      case '?':
	      case '*':
	      case '+':
	      case '@':
	      case '!':
	        this.debug('%s\t%s %s %j <-- stateChar', pattern, i, re, c)

	        // all of those are literals inside a class, except that
	        // the glob [!a] means [^a] in regexp
	        if (inClass) {
	          this.debug('  in class')
	          if (c === '!' && i === classStart + 1) c = '^'
	          re += c
	          continue
	        }

	        // if we already have a stateChar, then it means
	        // that there was something like ** or +? in there.
	        // Handle the stateChar, then proceed with this one.
	        self.debug('call clearStateChar %j', stateChar)
	        clearStateChar()
	        stateChar = c
	        // if extglob is disabled, then +(asdf|foo) isn't a thing.
	        // just clear the statechar *now*, rather than even diving into
	        // the patternList stuff.
	        if (options.noext) clearStateChar()
	      continue

	      case '(':
	        if (inClass) {
	          re += '('
	          continue
	        }

	        if (!stateChar) {
	          re += '\\('
	          continue
	        }

	        plType = stateChar
	        patternListStack.push({
	          type: plType,
	          start: i - 1,
	          reStart: re.length
	        })
	        // negation is (?:(?!js)[^/]*)
	        re += stateChar === '!' ? '(?:(?!(?:' : '(?:'
	        this.debug('plType %j %j', stateChar, re)
	        stateChar = false
	      continue

	      case ')':
	        if (inClass || !patternListStack.length) {
	          re += '\\)'
	          continue
	        }

	        clearStateChar()
	        hasMagic = true
	        re += ')'
	        var pl = patternListStack.pop()
	        plType = pl.type
	        // negation is (?:(?!js)[^/]*)
	        // The others are (?:<pattern>)<type>
	        switch (plType) {
	          case '!':
	            negativeLists.push(pl)
	            re += ')[^/]*?)'
	            pl.reEnd = re.length
	            break
	          case '?':
	          case '+':
	          case '*':
	            re += plType
	            break
	          case '@': break // the default anyway
	        }
	      continue

	      case '|':
	        if (inClass || !patternListStack.length || escaping) {
	          re += '\\|'
	          escaping = false
	          continue
	        }

	        clearStateChar()
	        re += '|'
	      continue

	      // these are mostly the same in regexp and glob
	      case '[':
	        // swallow any state-tracking char before the [
	        clearStateChar()

	        if (inClass) {
	          re += '\\' + c
	          continue
	        }

	        inClass = true
	        classStart = i
	        reClassStart = re.length
	        re += c
	      continue

	      case ']':
	        //  a right bracket shall lose its special
	        //  meaning and represent itself in
	        //  a bracket expression if it occurs
	        //  first in the list.  -- POSIX.2 2.8.3.2
	        if (i === classStart + 1 || !inClass) {
	          re += '\\' + c
	          escaping = false
	          continue
	        }

	        // handle the case where we left a class open.
	        // "[z-a]" is valid, equivalent to "\[z-a\]"
	        if (inClass) {
	          // split where the last [ was, make sure we don't have
	          // an invalid re. if so, re-walk the contents of the
	          // would-be class to re-translate any characters that
	          // were passed through as-is
	          // TODO: It would probably be faster to determine this
	          // without a try/catch and a new RegExp, but it's tricky
	          // to do safely.  For now, this is safe and works.
	          var cs = pattern.substring(classStart + 1, i)
	          try {
	            RegExp('[' + cs + ']')
	          } catch (er) {
	            // not a valid class!
	            var sp = this.parse(cs, SUBPARSE)
	            re = re.substr(0, reClassStart) + '\\[' + sp[0] + '\\]'
	            hasMagic = hasMagic || sp[1]
	            inClass = false
	            continue
	          }
	        }

	        // finish up the class.
	        hasMagic = true
	        inClass = false
	        re += c
	      continue

	      default:
	        // swallow any state char that wasn't consumed
	        clearStateChar()

	        if (escaping) {
	          // no need
	          escaping = false
	        } else if (reSpecials[c]
	          && !(c === '^' && inClass)) {
	          re += '\\'
	        }

	        re += c

	    } // switch
	  } // for

	  // handle the case where we left a class open.
	  // "[abc" is valid, equivalent to "\[abc"
	  if (inClass) {
	    // split where the last [ was, and escape it
	    // this is a huge pita.  We now have to re-walk
	    // the contents of the would-be class to re-translate
	    // any characters that were passed through as-is
	    cs = pattern.substr(classStart + 1)
	    sp = this.parse(cs, SUBPARSE)
	    re = re.substr(0, reClassStart) + '\\[' + sp[0]
	    hasMagic = hasMagic || sp[1]
	  }

	  // handle the case where we had a +( thing at the *end*
	  // of the pattern.
	  // each pattern list stack adds 3 chars, and we need to go through
	  // and escape any | chars that were passed through as-is for the regexp.
	  // Go through and escape them, taking care not to double-escape any
	  // | chars that were already escaped.
	  for (pl = patternListStack.pop(); pl; pl = patternListStack.pop()) {
	    var tail = re.slice(pl.reStart + 3)
	    // maybe some even number of \, then maybe 1 \, followed by a |
	    tail = tail.replace(/((?:\\{2})*)(\\?)\|/g, function (_, $1, $2) {
	      if (!$2) {
	        // the | isn't already escaped, so escape it.
	        $2 = '\\'
	      }

	      // need to escape all those slashes *again*, without escaping the
	      // one that we need for escaping the | character.  As it works out,
	      // escaping an even number of slashes can be done by simply repeating
	      // it exactly after itself.  That's why this trick works.
	      //
	      // I am sorry that you have to see this.
	      return $1 + $1 + $2 + '|'
	    })

	    this.debug('tail=%j\n   %s', tail, tail)
	    var t = pl.type === '*' ? star
	      : pl.type === '?' ? qmark
	      : '\\' + pl.type

	    hasMagic = true
	    re = re.slice(0, pl.reStart) + t + '\\(' + tail
	  }

	  // handle trailing things that only matter at the very end.
	  clearStateChar()
	  if (escaping) {
	    // trailing \\
	    re += '\\\\'
	  }

	  // only need to apply the nodot start if the re starts with
	  // something that could conceivably capture a dot
	  var addPatternStart = false
	  switch (re.charAt(0)) {
	    case '.':
	    case '[':
	    case '(': addPatternStart = true
	  }

	  // Hack to work around lack of negative lookbehind in JS
	  // A pattern like: *.!(x).!(y|z) needs to ensure that a name
	  // like 'a.xyz.yz' doesn't match.  So, the first negative
	  // lookahead, has to look ALL the way ahead, to the end of
	  // the pattern.
	  for (var n = negativeLists.length - 1; n > -1; n--) {
	    var nl = negativeLists[n]

	    var nlBefore = re.slice(0, nl.reStart)
	    var nlFirst = re.slice(nl.reStart, nl.reEnd - 8)
	    var nlLast = re.slice(nl.reEnd - 8, nl.reEnd)
	    var nlAfter = re.slice(nl.reEnd)

	    nlLast += nlAfter

	    // Handle nested stuff like *(*.js|!(*.json)), where open parens
	    // mean that we should *not* include the ) in the bit that is considered
	    // "after" the negated section.
	    var openParensBefore = nlBefore.split('(').length - 1
	    var cleanAfter = nlAfter
	    for (i = 0; i < openParensBefore; i++) {
	      cleanAfter = cleanAfter.replace(/\)[+*?]?/, '')
	    }
	    nlAfter = cleanAfter

	    var dollar = ''
	    if (nlAfter === '' && isSub !== SUBPARSE) {
	      dollar = '$'
	    }
	    var newRe = nlBefore + nlFirst + nlAfter + dollar + nlLast
	    re = newRe
	  }

	  // if the re is not "" at this point, then we need to make sure
	  // it doesn't match against an empty path part.
	  // Otherwise a/* will match a/, which it should not.
	  if (re !== '' && hasMagic) {
	    re = '(?=.)' + re
	  }

	  if (addPatternStart) {
	    re = patternStart + re
	  }

	  // parsing just a piece of a larger pattern.
	  if (isSub === SUBPARSE) {
	    return [re, hasMagic]
	  }

	  // skip the regexp for non-magical patterns
	  // unescape anything in it, though, so that it'll be
	  // an exact match against a file etc.
	  if (!hasMagic) {
	    return globUnescape(pattern)
	  }

	  var flags = options.nocase ? 'i' : ''
	  var regExp = new RegExp('^' + re + '$', flags)

	  regExp._glob = pattern
	  regExp._src = re

	  return regExp
	}

	minimatch.makeRe = function (pattern, options) {
	  return new Minimatch(pattern, options || {}).makeRe()
	}

	Minimatch.prototype.makeRe = makeRe
	function makeRe () {
	  if (this.regexp || this.regexp === false) return this.regexp

	  // at this point, this.set is a 2d array of partial
	  // pattern strings, or "**".
	  //
	  // It's better to use .match().  This function shouldn't
	  // be used, really, but it's pretty convenient sometimes,
	  // when you just want to work with a regex.
	  var set = this.set

	  if (!set.length) {
	    this.regexp = false
	    return this.regexp
	  }
	  var options = this.options

	  var twoStar = options.noglobstar ? star
	    : options.dot ? twoStarDot
	    : twoStarNoDot
	  var flags = options.nocase ? 'i' : ''

	  var re = set.map(function (pattern) {
	    return pattern.map(function (p) {
	      return (p === GLOBSTAR) ? twoStar
	      : (typeof p === 'string') ? regExpEscape(p)
	      : p._src
	    }).join('\\\/')
	  }).join('|')

	  // must match entire pattern
	  // ending in a * or ** will make it less strict.
	  re = '^(?:' + re + ')$'

	  // can match anything, as long as it's not this.
	  if (this.negate) re = '^(?!' + re + ').*$'

	  try {
	    this.regexp = new RegExp(re, flags)
	  } catch (ex) {
	    this.regexp = false
	  }
	  return this.regexp
	}

	minimatch.match = function (list, pattern, options) {
	  options = options || {}
	  var mm = new Minimatch(pattern, options)
	  list = list.filter(function (f) {
	    return mm.match(f)
	  })
	  if (mm.options.nonull && !list.length) {
	    list.push(pattern)
	  }
	  return list
	}

	Minimatch.prototype.match = match
	function match (f, partial) {
	  this.debug('match', f, this.pattern)
	  // short-circuit in the case of busted things.
	  // comments, etc.
	  if (this.comment) return false
	  if (this.empty) return f === ''

	  if (f === '/' && partial) return true

	  var options = this.options

	  // windows: need to use /, not \
	  if (path.sep !== '/') {
	    f = f.split(path.sep).join('/')
	  }

	  // treat the test path as a set of pathparts.
	  f = f.split(slashSplit)
	  this.debug(this.pattern, 'split', f)

	  // just ONE of the pattern sets in this.set needs to match
	  // in order for it to be valid.  If negating, then just one
	  // match means that we have failed.
	  // Either way, return on the first hit.

	  var set = this.set
	  this.debug(this.pattern, 'set', set)

	  // Find the basename of the path by looking for the last non-empty segment
	  var filename
	  var i
	  for (i = f.length - 1; i >= 0; i--) {
	    filename = f[i]
	    if (filename) break
	  }

	  for (i = 0; i < set.length; i++) {
	    var pattern = set[i]
	    var file = f
	    if (options.matchBase && pattern.length === 1) {
	      file = [filename]
	    }
	    var hit = this.matchOne(file, pattern, partial)
	    if (hit) {
	      if (options.flipNegate) return true
	      return !this.negate
	    }
	  }

	  // didn't get any hits.  this is success if it's a negative
	  // pattern, failure otherwise.
	  if (options.flipNegate) return false
	  return this.negate
	}

	// set partial to true to test if, for example,
	// "/a/b" matches the start of "/*/b/*/d"
	// Partial means, if you run out of file before you run
	// out of pattern, then that's fine, as long as all
	// the parts match.
	Minimatch.prototype.matchOne = function (file, pattern, partial) {
	  var options = this.options

	  this.debug('matchOne',
	    { 'this': this, file: file, pattern: pattern })

	  this.debug('matchOne', file.length, pattern.length)

	  for (var fi = 0,
	      pi = 0,
	      fl = file.length,
	      pl = pattern.length
	      ; (fi < fl) && (pi < pl)
	      ; fi++, pi++) {
	    this.debug('matchOne loop')
	    var p = pattern[pi]
	    var f = file[fi]

	    this.debug(pattern, p, f)

	    // should be impossible.
	    // some invalid regexp stuff in the set.
	    if (p === false) return false

	    if (p === GLOBSTAR) {
	      this.debug('GLOBSTAR', [pattern, p, f])

	      // "**"
	      // a/**/b/**/c would match the following:
	      // a/b/x/y/z/c
	      // a/x/y/z/b/c
	      // a/b/x/b/x/c
	      // a/b/c
	      // To do this, take the rest of the pattern after
	      // the **, and see if it would match the file remainder.
	      // If so, return success.
	      // If not, the ** "swallows" a segment, and try again.
	      // This is recursively awful.
	      //
	      // a/**/b/**/c matching a/b/x/y/z/c
	      // - a matches a
	      // - doublestar
	      //   - matchOne(b/x/y/z/c, b/**/c)
	      //     - b matches b
	      //     - doublestar
	      //       - matchOne(x/y/z/c, c) -> no
	      //       - matchOne(y/z/c, c) -> no
	      //       - matchOne(z/c, c) -> no
	      //       - matchOne(c, c) yes, hit
	      var fr = fi
	      var pr = pi + 1
	      if (pr === pl) {
	        this.debug('** at the end')
	        // a ** at the end will just swallow the rest.
	        // We have found a match.
	        // however, it will not swallow /.x, unless
	        // options.dot is set.
	        // . and .. are *never* matched by **, for explosively
	        // exponential reasons.
	        for (; fi < fl; fi++) {
	          if (file[fi] === '.' || file[fi] === '..' ||
	            (!options.dot && file[fi].charAt(0) === '.')) return false
	        }
	        return true
	      }

	      // ok, let's see if we can swallow whatever we can.
	      while (fr < fl) {
	        var swallowee = file[fr]

	        this.debug('\nglobstar while', file, fr, pattern, pr, swallowee)

	        // XXX remove this slice.  Just pass the start index.
	        if (this.matchOne(file.slice(fr), pattern.slice(pr), partial)) {
	          this.debug('globstar found match!', fr, fl, swallowee)
	          // found a match.
	          return true
	        } else {
	          // can't swallow "." or ".." ever.
	          // can only swallow ".foo" when explicitly asked.
	          if (swallowee === '.' || swallowee === '..' ||
	            (!options.dot && swallowee.charAt(0) === '.')) {
	            this.debug('dot detected!', file, fr, pattern, pr)
	            break
	          }

	          // ** swallows a segment, and continue.
	          this.debug('globstar swallow a segment, and continue')
	          fr++
	        }
	      }

	      // no match was found.
	      // However, in partial mode, we can't say this is necessarily over.
	      // If there's more *pattern* left, then
	      if (partial) {
	        // ran out of file
	        this.debug('\n>>> no match, partial?', file, fr, pattern, pr)
	        if (fr === fl) return true
	      }
	      return false
	    }

	    // something other than **
	    // non-magic patterns just have to match exactly
	    // patterns with magic have been turned into regexps.
	    var hit
	    if (typeof p === 'string') {
	      if (options.nocase) {
	        hit = f.toLowerCase() === p.toLowerCase()
	      } else {
	        hit = f === p
	      }
	      this.debug('string match', p, f, hit)
	    } else {
	      hit = f.match(p)
	      this.debug('pattern match', p, f, hit)
	    }

	    if (!hit) return false
	  }

	  // Note: ending in / means that we'll get a final ""
	  // at the end of the pattern.  This can only match a
	  // corresponding "" at the end of the file.
	  // If the file ends in /, then it can only match a
	  // a pattern that ends in /, unless the pattern just
	  // doesn't have any more for it. But, a/b/ should *not*
	  // match "a/b/*", even though "" matches against the
	  // [^/]*? pattern, except in partial mode, where it might
	  // simply not be reached yet.
	  // However, a/b/ should still satisfy a/*

	  // now either we fell off the end of the pattern, or we're done.
	  if (fi === fl && pi === pl) {
	    // ran out of pattern and filename at the same time.
	    // an exact hit!
	    return true
	  } else if (fi === fl) {
	    // ran out of file, but still had pattern left.
	    // this is ok if we're doing the match as part of
	    // a glob fs traversal.
	    return partial
	  } else if (pi === pl) {
	    // ran out of pattern, still have file left.
	    // this is only acceptable if we're on the very last
	    // empty segment of a file with a trailing slash.
	    // a/* should match a/b/
	    var emptyFileEnd = (fi === fl - 1) && (file[fi] === '')
	    return emptyFileEnd
	  }

	  // should be unreachable.
	  throw new Error('wtf?')
	}

	// replace stuff like \* with *
	function globUnescape (s) {
	  return s.replace(/\\(.)/g, '$1')
	}

	function regExpEscape (s) {
	  return s.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, '\\$&')
	}


/***/ },
/* 2881 */
/***/ function(module, exports, __webpack_require__) {

	var concatMap = __webpack_require__(2883);
	var balanced = __webpack_require__(2882);

	module.exports = expandTop;

	var escSlash = '\0SLASH'+Math.random()+'\0';
	var escOpen = '\0OPEN'+Math.random()+'\0';
	var escClose = '\0CLOSE'+Math.random()+'\0';
	var escComma = '\0COMMA'+Math.random()+'\0';
	var escPeriod = '\0PERIOD'+Math.random()+'\0';

	function numeric(str) {
	  return parseInt(str, 10) == str
	    ? parseInt(str, 10)
	    : str.charCodeAt(0);
	}

	function escapeBraces(str) {
	  return str.split('\\\\').join(escSlash)
	            .split('\\{').join(escOpen)
	            .split('\\}').join(escClose)
	            .split('\\,').join(escComma)
	            .split('\\.').join(escPeriod);
	}

	function unescapeBraces(str) {
	  return str.split(escSlash).join('\\')
	            .split(escOpen).join('{')
	            .split(escClose).join('}')
	            .split(escComma).join(',')
	            .split(escPeriod).join('.');
	}


	// Basically just str.split(","), but handling cases
	// where we have nested braced sections, which should be
	// treated as individual members, like {a,{b,c},d}
	function parseCommaParts(str) {
	  if (!str)
	    return [''];

	  var parts = [];
	  var m = balanced('{', '}', str);

	  if (!m)
	    return str.split(',');

	  var pre = m.pre;
	  var body = m.body;
	  var post = m.post;
	  var p = pre.split(',');

	  p[p.length-1] += '{' + body + '}';
	  var postParts = parseCommaParts(post);
	  if (post.length) {
	    p[p.length-1] += postParts.shift();
	    p.push.apply(p, postParts);
	  }

	  parts.push.apply(parts, p);

	  return parts;
	}

	function expandTop(str) {
	  if (!str)
	    return [];

	  return expand(escapeBraces(str), true).map(unescapeBraces);
	}

	function identity(e) {
	  return e;
	}

	function embrace(str) {
	  return '{' + str + '}';
	}
	function isPadded(el) {
	  return /^-?0\d/.test(el);
	}

	function lte(i, y) {
	  return i <= y;
	}
	function gte(i, y) {
	  return i >= y;
	}

	function expand(str, isTop) {
	  var expansions = [];

	  var m = balanced('{', '}', str);
	  if (!m || /\$$/.test(m.pre)) return [str];

	  var isNumericSequence = /^-?\d+\.\.-?\d+(?:\.\.-?\d+)?$/.test(m.body);
	  var isAlphaSequence = /^[a-zA-Z]\.\.[a-zA-Z](?:\.\.-?\d+)?$/.test(m.body);
	  var isSequence = isNumericSequence || isAlphaSequence;
	  var isOptions = /^(.*,)+(.+)?$/.test(m.body);
	  if (!isSequence && !isOptions) {
	    // {a},b}
	    if (m.post.match(/,.*}/)) {
	      str = m.pre + '{' + m.body + escClose + m.post;
	      return expand(str);
	    }
	    return [str];
	  }

	  var n;
	  if (isSequence) {
	    n = m.body.split(/\.\./);
	  } else {
	    n = parseCommaParts(m.body);
	    if (n.length === 1) {
	      // x{{a,b}}y ==> x{a}y x{b}y
	      n = expand(n[0], false).map(embrace);
	      if (n.length === 1) {
	        var post = m.post.length
	          ? expand(m.post, false)
	          : [''];
	        return post.map(function(p) {
	          return m.pre + n[0] + p;
	        });
	      }
	    }
	  }

	  // at this point, n is the parts, and we know it's not a comma set
	  // with a single entry.

	  // no need to expand pre, since it is guaranteed to be free of brace-sets
	  var pre = m.pre;
	  var post = m.post.length
	    ? expand(m.post, false)
	    : [''];

	  var N;

	  if (isSequence) {
	    var x = numeric(n[0]);
	    var y = numeric(n[1]);
	    var width = Math.max(n[0].length, n[1].length)
	    var incr = n.length == 3
	      ? Math.abs(numeric(n[2]))
	      : 1;
	    var test = lte;
	    var reverse = y < x;
	    if (reverse) {
	      incr *= -1;
	      test = gte;
	    }
	    var pad = n.some(isPadded);

	    N = [];

	    for (var i = x; test(i, y); i += incr) {
	      var c;
	      if (isAlphaSequence) {
	        c = String.fromCharCode(i);
	        if (c === '\\')
	          c = '';
	      } else {
	        c = String(i);
	        if (pad) {
	          var need = width - c.length;
	          if (need > 0) {
	            var z = new Array(need + 1).join('0');
	            if (i < 0)
	              c = '-' + z + c.slice(1);
	            else
	              c = z + c;
	          }
	        }
	      }
	      N.push(c);
	    }
	  } else {
	    N = concatMap(n, function(el) { return expand(el, false) });
	  }

	  for (var j = 0; j < N.length; j++) {
	    for (var k = 0; k < post.length; k++) {
	      var expansion = pre + N[j] + post[k];
	      if (!isTop || isSequence || expansion)
	        expansions.push(expansion);
	    }
	  }

	  return expansions;
	}



/***/ },
/* 2882 */
/***/ function(module, exports) {

	module.exports = balanced;
	function balanced(a, b, str) {
	  var r = range(a, b, str);

	  return r && {
	    start: r[0],
	    end: r[1],
	    pre: str.slice(0, r[0]),
	    body: str.slice(r[0] + a.length, r[1]),
	    post: str.slice(r[1] + b.length)
	  };
	}

	balanced.range = range;
	function range(a, b, str) {
	  var begs, beg, left, right, result;
	  var ai = str.indexOf(a);
	  var bi = str.indexOf(b, ai + 1);
	  var i = ai;

	  if (ai >= 0 && bi > 0) {
	    begs = [];
	    left = str.length;

	    while (i < str.length && i >= 0 && ! result) {
	      if (i == ai) {
	        begs.push(i);
	        ai = str.indexOf(a, i + 1);
	      } else if (begs.length == 1) {
	        result = [ begs.pop(), bi ];
	      } else {
	        beg = begs.pop();
	        if (beg < left) {
	          left = beg;
	          right = bi;
	        }

	        bi = str.indexOf(b, i + 1);
	      }

	      i = ai < bi && ai >= 0 ? ai : bi;
	    }

	    if (begs.length) {
	      result = [ left, right ];
	    }
	  }

	  return result;
	}


/***/ },
/* 2883 */
/***/ function(module, exports) {

	module.exports = function (xs, fn) {
	    var res = [];
	    for (var i = 0; i < xs.length; i++) {
	        var x = fn(xs[i], i);
	        if (isArray(x)) res.push.apply(res, x);
	        else res.push(x);
	    }
	    return res;
	};

	var isArray = Array.isArray || function (xs) {
	    return Object.prototype.toString.call(xs) === '[object Array]';
	};


/***/ },
/* 2884 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	var fs = __webpack_require__(428)

	module.exports = function (pth, cb) {
		var fn = typeof fs.access === 'function' ? fs.access : fs.stat;

		fn(pth, function (err) {
			cb(null, !err);
		});
	};

	module.exports.sync = function (pth) {
		var fn = typeof fs.accessSync === 'function' ? fs.accessSync : fs.statSync;

		try {
			fn(pth);
			return true;
		} catch (err) {
			return false;
		}
	};


/***/ },
/* 2885 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';

	function posix(path) {
		return path.charAt(0) === '/';
	};

	function win32(path) {
		// https://github.com/joyent/node/blob/b3fcc245fb25539909ef1d5eaa01dbf92e168633/lib/path.js#L56
		var splitDeviceRe = /^([a-zA-Z]:|[\\\/]{2}[^\\\/]+[\\\/]+[^\\\/]+)?([\\\/])?([\s\S]*?)$/;
		var result = splitDeviceRe.exec(path);
		var device = result[1] || '';
		var isUnc = !!device && device.charAt(1) !== ':';

		// UNC paths are always absolute
		return !!result[2] || isUnc;
	};

	module.exports = process.platform === 'win32' ? win32 : posix;
	module.exports.posix = posix;
	module.exports.win32 = win32;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 2886 */
/***/ function(module, exports) {

	'use strict';
	module.exports = /^#!.*/;


/***/ },
/* 2887 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

	  /**
	   * Encode an integer in the range of 0 to 63 to a single base 64 digit.
	   */
	  exports.encode = function (number) {
	    if (0 <= number && number < intToCharMap.length) {
	      return intToCharMap[number];
	    }
	    throw new TypeError("Must be between 0 and 63: " + number);
	  };

	  /**
	   * Decode a single base 64 character code digit to an integer. Returns -1 on
	   * failure.
	   */
	  exports.decode = function (charCode) {
	    var bigA = 65;     // 'A'
	    var bigZ = 90;     // 'Z'

	    var littleA = 97;  // 'a'
	    var littleZ = 122; // 'z'

	    var zero = 48;     // '0'
	    var nine = 57;     // '9'

	    var plus = 43;     // '+'
	    var slash = 47;    // '/'

	    var littleOffset = 26;
	    var numberOffset = 52;

	    // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
	    if (bigA <= charCode && charCode <= bigZ) {
	      return (charCode - bigA);
	    }

	    // 26 - 51: abcdefghijklmnopqrstuvwxyz
	    if (littleA <= charCode && charCode <= littleZ) {
	      return (charCode - littleA + littleOffset);
	    }

	    // 52 - 61: 0123456789
	    if (zero <= charCode && charCode <= nine) {
	      return (charCode - zero + numberOffset);
	    }

	    // 62: +
	    if (charCode == plus) {
	      return 62;
	    }

	    // 63: /
	    if (charCode == slash) {
	      return 63;
	    }

	    // Invalid base64 digit.
	    return -1;
	  };
	}


/***/ },
/* 2888 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  exports.GREATEST_LOWER_BOUND = 1;
	  exports.LEAST_UPPER_BOUND = 2;

	  /**
	   * Recursive implementation of binary search.
	   *
	   * @param aLow Indices here and lower do not contain the needle.
	   * @param aHigh Indices here and higher do not contain the needle.
	   * @param aNeedle The element being searched for.
	   * @param aHaystack The non-empty array being searched.
	   * @param aCompare Function which takes two elements and returns -1, 0, or 1.
	   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   */
	  function recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {
	    // This function terminates when one of the following is true:
	    //
	    //   1. We find the exact element we are looking for.
	    //
	    //   2. We did not find the exact element, but we can return the index of
	    //      the next-closest element.
	    //
	    //   3. We did not find the exact element, and there is no next-closest
	    //      element than the one we are searching for, so we return -1.
	    var mid = Math.floor((aHigh - aLow) / 2) + aLow;
	    var cmp = aCompare(aNeedle, aHaystack[mid], true);
	    if (cmp === 0) {
	      // Found the element we are looking for.
	      return mid;
	    }
	    else if (cmp > 0) {
	      // Our needle is greater than aHaystack[mid].
	      if (aHigh - mid > 1) {
	        // The element is in the upper half.
	        return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);
	      }

	      // The exact needle element was not found in this haystack. Determine if
	      // we are in termination case (3) or (2) and return the appropriate thing.
	      if (aBias == exports.LEAST_UPPER_BOUND) {
	        return aHigh < aHaystack.length ? aHigh : -1;
	      } else {
	        return mid;
	      }
	    }
	    else {
	      // Our needle is less than aHaystack[mid].
	      if (mid - aLow > 1) {
	        // The element is in the lower half.
	        return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);
	      }

	      // we are in termination case (3) or (2) and return the appropriate thing.
	      if (aBias == exports.LEAST_UPPER_BOUND) {
	        return mid;
	      } else {
	        return aLow < 0 ? -1 : aLow;
	      }
	    }
	  }

	  /**
	   * This is an implementation of binary search which will always try and return
	   * the index of the closest element if there is no exact hit. This is because
	   * mappings between original and generated line/col pairs are single points,
	   * and there is an implicit region between each of them, so a miss just means
	   * that you aren't on the very start of a region.
	   *
	   * @param aNeedle The element you are looking for.
	   * @param aHaystack The array that is being searched.
	   * @param aCompare A function which takes the needle and an element in the
	   *     array and returns -1, 0, or 1 depending on whether the needle is less
	   *     than, equal to, or greater than the element, respectively.
	   * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or
	   *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.
	   */
	  exports.search = function search(aNeedle, aHaystack, aCompare, aBias) {
	    if (aHaystack.length === 0) {
	      return -1;
	    }

	    var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,
	                                aCompare, aBias || exports.GREATEST_LOWER_BOUND);
	    if (index < 0) {
	      return -1;
	    }

	    // We have found either the exact element, or the next-closest element than
	    // the one we are searching for. However, there may be more than one such
	    // element. Make sure we always return the smallest of these.
	    while (index - 1 >= 0) {
	      if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {
	        break;
	      }
	      --index;
	    }

	    return index;
	  };
	}


/***/ },
/* 2889 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2014 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var util = __webpack_require__(551);

	  /**
	   * Determine whether mappingB is after mappingA with respect to generated
	   * position.
	   */
	  function generatedPositionAfter(mappingA, mappingB) {
	    // Optimized for most common case
	    var lineA = mappingA.generatedLine;
	    var lineB = mappingB.generatedLine;
	    var columnA = mappingA.generatedColumn;
	    var columnB = mappingB.generatedColumn;
	    return lineB > lineA || lineB == lineA && columnB >= columnA ||
	           util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;
	  }

	  /**
	   * A data structure to provide a sorted view of accumulated mappings in a
	   * performance conscious manner. It trades a neglibable overhead in general
	   * case for a large speedup in case of mappings being added in order.
	   */
	  function MappingList() {
	    this._array = [];
	    this._sorted = true;
	    // Serves as infimum
	    this._last = {generatedLine: -1, generatedColumn: 0};
	  }

	  /**
	   * Iterate through internal items. This method takes the same arguments that
	   * `Array.prototype.forEach` takes.
	   *
	   * NOTE: The order of the mappings is NOT guaranteed.
	   */
	  MappingList.prototype.unsortedForEach =
	    function MappingList_forEach(aCallback, aThisArg) {
	      this._array.forEach(aCallback, aThisArg);
	    };

	  /**
	   * Add the given source mapping.
	   *
	   * @param Object aMapping
	   */
	  MappingList.prototype.add = function MappingList_add(aMapping) {
	    if (generatedPositionAfter(this._last, aMapping)) {
	      this._last = aMapping;
	      this._array.push(aMapping);
	    } else {
	      this._sorted = false;
	      this._array.push(aMapping);
	    }
	  };

	  /**
	   * Returns the flat, sorted array of mappings. The mappings are sorted by
	   * generated position.
	   *
	   * WARNING: This method returns internal data without copying, for
	   * performance. The return value must NOT be mutated, and should be treated as
	   * an immutable borrow. If you want to take ownership, you must make your own
	   * copy.
	   */
	  MappingList.prototype.toArray = function MappingList_toArray() {
	    if (!this._sorted) {
	      this._array.sort(util.compareByGeneratedPositionsInflated);
	      this._sorted = true;
	    }
	    return this._array;
	  };

	  exports.MappingList = MappingList;
	}


/***/ },
/* 2890 */
/***/ function(module, exports) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  // It turns out that some (most?) JavaScript engines don't self-host
	  // `Array.prototype.sort`. This makes sense because C++ will likely remain
	  // faster than JS when doing raw CPU-intensive sorting. However, when using a
	  // custom comparator function, calling back and forth between the VM's C++ and
	  // JIT'd JS is rather slow *and* loses JIT type information, resulting in
	  // worse generated code for the comparator function than would be optimal. In
	  // fact, when sorting with a comparator, these costs outweigh the benefits of
	  // sorting in C++. By using our own JS-implemented Quick Sort (below), we get
	  // a ~3500ms mean speed-up in `bench/bench.html`.

	  /**
	   * Swap the elements indexed by `x` and `y` in the array `ary`.
	   *
	   * @param {Array} ary
	   *        The array.
	   * @param {Number} x
	   *        The index of the first item.
	   * @param {Number} y
	   *        The index of the second item.
	   */
	  function swap(ary, x, y) {
	    var temp = ary[x];
	    ary[x] = ary[y];
	    ary[y] = temp;
	  }

	  /**
	   * Returns a random integer within the range `low .. high` inclusive.
	   *
	   * @param {Number} low
	   *        The lower bound on the range.
	   * @param {Number} high
	   *        The upper bound on the range.
	   */
	  function randomIntInRange(low, high) {
	    return Math.round(low + (Math.random() * (high - low)));
	  }

	  /**
	   * The Quick Sort algorithm.
	   *
	   * @param {Array} ary
	   *        An array to sort.
	   * @param {function} comparator
	   *        Function to use to compare two items.
	   * @param {Number} p
	   *        Start index of the array
	   * @param {Number} r
	   *        End index of the array
	   */
	  function doQuickSort(ary, comparator, p, r) {
	    // If our lower bound is less than our upper bound, we (1) partition the
	    // array into two pieces and (2) recurse on each half. If it is not, this is
	    // the empty array and our base case.

	    if (p < r) {
	      // (1) Partitioning.
	      //
	      // The partitioning chooses a pivot between `p` and `r` and moves all
	      // elements that are less than or equal to the pivot to the before it, and
	      // all the elements that are greater than it after it. The effect is that
	      // once partition is done, the pivot is in the exact place it will be when
	      // the array is put in sorted order, and it will not need to be moved
	      // again. This runs in O(n) time.

	      // Always choose a random pivot so that an input array which is reverse
	      // sorted does not cause O(n^2) running time.
	      var pivotIndex = randomIntInRange(p, r);
	      var i = p - 1;

	      swap(ary, pivotIndex, r);
	      var pivot = ary[r];

	      // Immediately after `j` is incremented in this loop, the following hold
	      // true:
	      //
	      //   * Every element in `ary[p .. i]` is less than or equal to the pivot.
	      //
	      //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.
	      for (var j = p; j < r; j++) {
	        if (comparator(ary[j], pivot) <= 0) {
	          i += 1;
	          swap(ary, i, j);
	        }
	      }

	      swap(ary, i + 1, j);
	      var q = i + 1;

	      // (2) Recurse on each half.

	      doQuickSort(ary, comparator, p, q - 1);
	      doQuickSort(ary, comparator, q + 1, r);
	    }
	  }

	  /**
	   * Sort the given array in-place with the given comparator function.
	   *
	   * @param {Array} ary
	   *        An array to sort.
	   * @param {function} comparator
	   *        Function to use to compare two items.
	   */
	  exports.quickSort = function (ary, comparator) {
	    doQuickSort(ary, comparator, 0, ary.length - 1);
	  };
	}


/***/ },
/* 2891 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var util = __webpack_require__(551);
	  var binarySearch = __webpack_require__(2888);
	  var ArraySet = __webpack_require__(1603).ArraySet;
	  var base64VLQ = __webpack_require__(1604);
	  var quickSort = __webpack_require__(2890).quickSort;

	  function SourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    return sourceMap.sections != null
	      ? new IndexedSourceMapConsumer(sourceMap)
	      : new BasicSourceMapConsumer(sourceMap);
	  }

	  SourceMapConsumer.fromSourceMap = function(aSourceMap) {
	    return BasicSourceMapConsumer.fromSourceMap(aSourceMap);
	  }

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  SourceMapConsumer.prototype._version = 3;

	  // `__generatedMappings` and `__originalMappings` are arrays that hold the
	  // parsed mapping coordinates from the source map's "mappings" attribute. They
	  // are lazily instantiated, accessed via the `_generatedMappings` and
	  // `_originalMappings` getters respectively, and we only parse the mappings
	  // and create these arrays once queried for a source location. We jump through
	  // these hoops because there can be many thousands of mappings, and parsing
	  // them is expensive, so we only want to do it if we must.
	  //
	  // Each object in the arrays is of the form:
	  //
	  //     {
	  //       generatedLine: The line number in the generated code,
	  //       generatedColumn: The column number in the generated code,
	  //       source: The path to the original source file that generated this
	  //               chunk of code,
	  //       originalLine: The line number in the original source that
	  //                     corresponds to this chunk of generated code,
	  //       originalColumn: The column number in the original source that
	  //                       corresponds to this chunk of generated code,
	  //       name: The name of the original symbol which generated this chunk of
	  //             code.
	  //     }
	  //
	  // All properties except for `generatedLine` and `generatedColumn` can be
	  // `null`.
	  //
	  // `_generatedMappings` is ordered by the generated positions.
	  //
	  // `_originalMappings` is ordered by the original positions.

	  SourceMapConsumer.prototype.__generatedMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {
	    get: function () {
	      if (!this.__generatedMappings) {
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }

	      return this.__generatedMappings;
	    }
	  });

	  SourceMapConsumer.prototype.__originalMappings = null;
	  Object.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {
	    get: function () {
	      if (!this.__originalMappings) {
	        this._parseMappings(this._mappings, this.sourceRoot);
	      }

	      return this.__originalMappings;
	    }
	  });

	  SourceMapConsumer.prototype._charIsMappingSeparator =
	    function SourceMapConsumer_charIsMappingSeparator(aStr, index) {
	      var c = aStr.charAt(index);
	      return c === ";" || c === ",";
	    };

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  SourceMapConsumer.prototype._parseMappings =
	    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      throw new Error("Subclasses must implement _parseMappings");
	    };

	  SourceMapConsumer.GENERATED_ORDER = 1;
	  SourceMapConsumer.ORIGINAL_ORDER = 2;

	  SourceMapConsumer.GREATEST_LOWER_BOUND = 1;
	  SourceMapConsumer.LEAST_UPPER_BOUND = 2;

	  /**
	   * Iterate over each mapping between an original source/line/column and a
	   * generated line/column in this source map.
	   *
	   * @param Function aCallback
	   *        The function that is called with each mapping.
	   * @param Object aContext
	   *        Optional. If specified, this object will be the value of `this` every
	   *        time that `aCallback` is called.
	   * @param aOrder
	   *        Either `SourceMapConsumer.GENERATED_ORDER` or
	   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to
	   *        iterate over the mappings sorted by the generated file's line/column
	   *        order or the original's source/line/column order, respectively. Defaults to
	   *        `SourceMapConsumer.GENERATED_ORDER`.
	   */
	  SourceMapConsumer.prototype.eachMapping =
	    function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {
	      var context = aContext || null;
	      var order = aOrder || SourceMapConsumer.GENERATED_ORDER;

	      var mappings;
	      switch (order) {
	      case SourceMapConsumer.GENERATED_ORDER:
	        mappings = this._generatedMappings;
	        break;
	      case SourceMapConsumer.ORIGINAL_ORDER:
	        mappings = this._originalMappings;
	        break;
	      default:
	        throw new Error("Unknown order of iteration.");
	      }

	      var sourceRoot = this.sourceRoot;
	      mappings.map(function (mapping) {
	        var source = mapping.source === null ? null : this._sources.at(mapping.source);
	        if (source != null && sourceRoot != null) {
	          source = util.join(sourceRoot, source);
	        }
	        return {
	          source: source,
	          generatedLine: mapping.generatedLine,
	          generatedColumn: mapping.generatedColumn,
	          originalLine: mapping.originalLine,
	          originalColumn: mapping.originalColumn,
	          name: mapping.name === null ? null : this._names.at(mapping.name)
	        };
	      }, this).forEach(aCallback, context);
	    };

	  /**
	   * Returns all generated line and column information for the original source,
	   * line, and column provided. If no column is provided, returns all mappings
	   * corresponding to a either the line we are searching for or the next
	   * closest line that has any mappings. Otherwise, returns all mappings
	   * corresponding to the given line and either the column we are searching for
	   * or the next closest column that has any offsets.
	   *
	   * The only argument is an object with the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: Optional. the column number in the original source.
	   *
	   * and an array of objects is returned, each with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  SourceMapConsumer.prototype.allGeneratedPositionsFor =
	    function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {
	      var line = util.getArg(aArgs, 'line');

	      // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping
	      // returns the index of the closest mapping less than the needle. By
	      // setting needle.originalColumn to 0, we thus find the last mapping for
	      // the given line, provided such a mapping exists.
	      var needle = {
	        source: util.getArg(aArgs, 'source'),
	        originalLine: line,
	        originalColumn: util.getArg(aArgs, 'column', 0)
	      };

	      if (this.sourceRoot != null) {
	        needle.source = util.relative(this.sourceRoot, needle.source);
	      }
	      if (!this._sources.has(needle.source)) {
	        return [];
	      }
	      needle.source = this._sources.indexOf(needle.source);

	      var mappings = [];

	      var index = this._findMapping(needle,
	                                    this._originalMappings,
	                                    "originalLine",
	                                    "originalColumn",
	                                    util.compareByOriginalPositions,
	                                    binarySearch.LEAST_UPPER_BOUND);
	      if (index >= 0) {
	        var mapping = this._originalMappings[index];

	        if (aArgs.column === undefined) {
	          var originalLine = mapping.originalLine;

	          // Iterate until either we run out of mappings, or we run into
	          // a mapping for a different line than the one we found. Since
	          // mappings are sorted, this is guaranteed to find all mappings for
	          // the line we found.
	          while (mapping && mapping.originalLine === originalLine) {
	            mappings.push({
	              line: util.getArg(mapping, 'generatedLine', null),
	              column: util.getArg(mapping, 'generatedColumn', null),
	              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	            });

	            mapping = this._originalMappings[++index];
	          }
	        } else {
	          var originalColumn = mapping.originalColumn;

	          // Iterate until either we run out of mappings, or we run into
	          // a mapping for a different line than the one we were searching for.
	          // Since mappings are sorted, this is guaranteed to find all mappings for
	          // the line we are searching for.
	          while (mapping &&
	                 mapping.originalLine === line &&
	                 mapping.originalColumn == originalColumn) {
	            mappings.push({
	              line: util.getArg(mapping, 'generatedLine', null),
	              column: util.getArg(mapping, 'generatedColumn', null),
	              lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	            });

	            mapping = this._originalMappings[++index];
	          }
	        }
	      }

	      return mappings;
	    };

	  exports.SourceMapConsumer = SourceMapConsumer;

	  /**
	   * A BasicSourceMapConsumer instance represents a parsed source map which we can
	   * query for information about the original file positions by giving it a file
	   * position in the generated source.
	   *
	   * The only parameter is the raw source map (either as a JSON string, or
	   * already parsed to an object). According to the spec, source maps have the
	   * following attributes:
	   *
	   *   - version: Which version of the source map spec this map is following.
	   *   - sources: An array of URLs to the original source files.
	   *   - names: An array of identifiers which can be referrenced by individual mappings.
	   *   - sourceRoot: Optional. The URL root from which all sources are relative.
	   *   - sourcesContent: Optional. An array of contents of the original source files.
	   *   - mappings: A string of base64 VLQs which contain the actual mappings.
	   *   - file: Optional. The generated file this source map is associated with.
	   *
	   * Here is an example source map, taken from the source map spec[0]:
	   *
	   *     {
	   *       version : 3,
	   *       file: "out.js",
	   *       sourceRoot : "",
	   *       sources: ["foo.js", "bar.js"],
	   *       names: ["src", "maps", "are", "fun"],
	   *       mappings: "AA,AB;;ABCDE;"
	   *     }
	   *
	   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#
	   */
	  function BasicSourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    var version = util.getArg(sourceMap, 'version');
	    var sources = util.getArg(sourceMap, 'sources');
	    // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which
	    // requires the array) to play nice here.
	    var names = util.getArg(sourceMap, 'names', []);
	    var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);
	    var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);
	    var mappings = util.getArg(sourceMap, 'mappings');
	    var file = util.getArg(sourceMap, 'file', null);

	    // Once again, Sass deviates from the spec and supplies the version as a
	    // string rather than a number, so we use loose equality checking here.
	    if (version != this._version) {
	      throw new Error('Unsupported version: ' + version);
	    }

	    sources = sources
	      // Some source maps produce relative source paths like "./foo.js" instead of
	      // "foo.js".  Normalize these first so that future comparisons will succeed.
	      // See bugzil.la/1090768.
	      .map(util.normalize)
	      // Always ensure that absolute sources are internally stored relative to
	      // the source root, if the source root is absolute. Not doing this would
	      // be particularly problematic when the source root is a prefix of the
	      // source (valid, but why??). See github issue #199 and bugzil.la/1188982.
	      .map(function (source) {
	        return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)
	          ? util.relative(sourceRoot, source)
	          : source;
	      });

	    // Pass `true` below to allow duplicate names and sources. While source maps
	    // are intended to be compressed and deduplicated, the TypeScript compiler
	    // sometimes generates source maps with duplicates in them. See Github issue
	    // #72 and bugzil.la/889492.
	    this._names = ArraySet.fromArray(names, true);
	    this._sources = ArraySet.fromArray(sources, true);

	    this.sourceRoot = sourceRoot;
	    this.sourcesContent = sourcesContent;
	    this._mappings = mappings;
	    this.file = file;
	  }

	  BasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	  BasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;

	  /**
	   * Create a BasicSourceMapConsumer from a SourceMapGenerator.
	   *
	   * @param SourceMapGenerator aSourceMap
	   *        The source map that will be consumed.
	   * @returns BasicSourceMapConsumer
	   */
	  BasicSourceMapConsumer.fromSourceMap =
	    function SourceMapConsumer_fromSourceMap(aSourceMap) {
	      var smc = Object.create(BasicSourceMapConsumer.prototype);

	      var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);
	      var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);
	      smc.sourceRoot = aSourceMap._sourceRoot;
	      smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),
	                                                              smc.sourceRoot);
	      smc.file = aSourceMap._file;

	      // Because we are modifying the entries (by converting string sources and
	      // names to indices into the sources and names ArraySets), we have to make
	      // a copy of the entry or else bad things happen. Shared mutable state
	      // strikes again! See github issue #191.

	      var generatedMappings = aSourceMap._mappings.toArray().slice();
	      var destGeneratedMappings = smc.__generatedMappings = [];
	      var destOriginalMappings = smc.__originalMappings = [];

	      for (var i = 0, length = generatedMappings.length; i < length; i++) {
	        var srcMapping = generatedMappings[i];
	        var destMapping = new Mapping;
	        destMapping.generatedLine = srcMapping.generatedLine;
	        destMapping.generatedColumn = srcMapping.generatedColumn;

	        if (srcMapping.source) {
	          destMapping.source = sources.indexOf(srcMapping.source);
	          destMapping.originalLine = srcMapping.originalLine;
	          destMapping.originalColumn = srcMapping.originalColumn;

	          if (srcMapping.name) {
	            destMapping.name = names.indexOf(srcMapping.name);
	          }

	          destOriginalMappings.push(destMapping);
	        }

	        destGeneratedMappings.push(destMapping);
	      }

	      quickSort(smc.__originalMappings, util.compareByOriginalPositions);

	      return smc;
	    };

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  BasicSourceMapConsumer.prototype._version = 3;

	  /**
	   * The list of original sources.
	   */
	  Object.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {
	    get: function () {
	      return this._sources.toArray().map(function (s) {
	        return this.sourceRoot != null ? util.join(this.sourceRoot, s) : s;
	      }, this);
	    }
	  });

	  /**
	   * Provide the JIT with a nice shape / hidden class.
	   */
	  function Mapping() {
	    this.generatedLine = 0;
	    this.generatedColumn = 0;
	    this.source = null;
	    this.originalLine = null;
	    this.originalColumn = null;
	    this.name = null;
	  }

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  BasicSourceMapConsumer.prototype._parseMappings =
	    function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      var generatedLine = 1;
	      var previousGeneratedColumn = 0;
	      var previousOriginalLine = 0;
	      var previousOriginalColumn = 0;
	      var previousSource = 0;
	      var previousName = 0;
	      var length = aStr.length;
	      var index = 0;
	      var cachedSegments = {};
	      var temp = {};
	      var originalMappings = [];
	      var generatedMappings = [];
	      var mapping, str, segment, end, value;

	      while (index < length) {
	        if (aStr.charAt(index) === ';') {
	          generatedLine++;
	          index++;
	          previousGeneratedColumn = 0;
	        }
	        else if (aStr.charAt(index) === ',') {
	          index++;
	        }
	        else {
	          mapping = new Mapping();
	          mapping.generatedLine = generatedLine;

	          // Because each offset is encoded relative to the previous one,
	          // many segments often have the same encoding. We can exploit this
	          // fact by caching the parsed variable length fields of each segment,
	          // allowing us to avoid a second parse if we encounter the same
	          // segment again.
	          for (end = index; end < length; end++) {
	            if (this._charIsMappingSeparator(aStr, end)) {
	              break;
	            }
	          }
	          str = aStr.slice(index, end);

	          segment = cachedSegments[str];
	          if (segment) {
	            index += str.length;
	          } else {
	            segment = [];
	            while (index < end) {
	              base64VLQ.decode(aStr, index, temp);
	              value = temp.value;
	              index = temp.rest;
	              segment.push(value);
	            }

	            if (segment.length === 2) {
	              throw new Error('Found a source, but no line and column');
	            }

	            if (segment.length === 3) {
	              throw new Error('Found a source and line, but no column');
	            }

	            cachedSegments[str] = segment;
	          }

	          // Generated column.
	          mapping.generatedColumn = previousGeneratedColumn + segment[0];
	          previousGeneratedColumn = mapping.generatedColumn;

	          if (segment.length > 1) {
	            // Original source.
	            mapping.source = previousSource + segment[1];
	            previousSource += segment[1];

	            // Original line.
	            mapping.originalLine = previousOriginalLine + segment[2];
	            previousOriginalLine = mapping.originalLine;
	            // Lines are stored 0-based
	            mapping.originalLine += 1;

	            // Original column.
	            mapping.originalColumn = previousOriginalColumn + segment[3];
	            previousOriginalColumn = mapping.originalColumn;

	            if (segment.length > 4) {
	              // Original name.
	              mapping.name = previousName + segment[4];
	              previousName += segment[4];
	            }
	          }

	          generatedMappings.push(mapping);
	          if (typeof mapping.originalLine === 'number') {
	            originalMappings.push(mapping);
	          }
	        }
	      }

	      quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);
	      this.__generatedMappings = generatedMappings;

	      quickSort(originalMappings, util.compareByOriginalPositions);
	      this.__originalMappings = originalMappings;
	    };

	  /**
	   * Find the mapping that best matches the hypothetical "needle" mapping that
	   * we are searching for in the given "haystack" of mappings.
	   */
	  BasicSourceMapConsumer.prototype._findMapping =
	    function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,
	                                           aColumnName, aComparator, aBias) {
	      // To return the position we are searching for, we must first find the
	      // mapping for the given position and then return the opposite position it
	      // points to. Because the mappings are sorted, we can use binary search to
	      // find the best mapping.

	      if (aNeedle[aLineName] <= 0) {
	        throw new TypeError('Line must be greater than or equal to 1, got '
	                            + aNeedle[aLineName]);
	      }
	      if (aNeedle[aColumnName] < 0) {
	        throw new TypeError('Column must be greater than or equal to 0, got '
	                            + aNeedle[aColumnName]);
	      }

	      return binarySearch.search(aNeedle, aMappings, aComparator, aBias);
	    };

	  /**
	   * Compute the last column for each generated mapping. The last column is
	   * inclusive.
	   */
	  BasicSourceMapConsumer.prototype.computeColumnSpans =
	    function SourceMapConsumer_computeColumnSpans() {
	      for (var index = 0; index < this._generatedMappings.length; ++index) {
	        var mapping = this._generatedMappings[index];

	        // Mappings do not contain a field for the last generated columnt. We
	        // can come up with an optimistic estimate, however, by assuming that
	        // mappings are contiguous (i.e. given two consecutive mappings, the
	        // first mapping ends where the second one starts).
	        if (index + 1 < this._generatedMappings.length) {
	          var nextMapping = this._generatedMappings[index + 1];

	          if (mapping.generatedLine === nextMapping.generatedLine) {
	            mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;
	            continue;
	          }
	        }

	        // The last mapping for each line spans the entire line.
	        mapping.lastGeneratedColumn = Infinity;
	      }
	    };

	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.
	   *   - column: The column number in the generated source.
	   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.
	   *   - column: The column number in the original source, or null.
	   *   - name: The original identifier, or null.
	   */
	  BasicSourceMapConsumer.prototype.originalPositionFor =
	    function SourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };

	      var index = this._findMapping(
	        needle,
	        this._generatedMappings,
	        "generatedLine",
	        "generatedColumn",
	        util.compareByGeneratedPositionsDeflated,
	        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	      );

	      if (index >= 0) {
	        var mapping = this._generatedMappings[index];

	        if (mapping.generatedLine === needle.generatedLine) {
	          var source = util.getArg(mapping, 'source', null);
	          if (source !== null) {
	            source = this._sources.at(source);
	            if (this.sourceRoot != null) {
	              source = util.join(this.sourceRoot, source);
	            }
	          }
	          var name = util.getArg(mapping, 'name', null);
	          if (name !== null) {
	            name = this._names.at(name);
	          }
	          return {
	            source: source,
	            line: util.getArg(mapping, 'originalLine', null),
	            column: util.getArg(mapping, 'originalColumn', null),
	            name: name
	          };
	        }
	      }

	      return {
	        source: null,
	        line: null,
	        column: null,
	        name: null
	      };
	    };

	  /**
	   * Return true if we have the source content for every source in the source
	   * map, false otherwise.
	   */
	  BasicSourceMapConsumer.prototype.hasContentsOfAllSources =
	    function BasicSourceMapConsumer_hasContentsOfAllSources() {
	      if (!this.sourcesContent) {
	        return false;
	      }
	      return this.sourcesContent.length >= this._sources.size() &&
	        !this.sourcesContent.some(function (sc) { return sc == null; });
	    };

	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * available.
	   */
	  BasicSourceMapConsumer.prototype.sourceContentFor =
	    function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	      if (!this.sourcesContent) {
	        return null;
	      }

	      if (this.sourceRoot != null) {
	        aSource = util.relative(this.sourceRoot, aSource);
	      }

	      if (this._sources.has(aSource)) {
	        return this.sourcesContent[this._sources.indexOf(aSource)];
	      }

	      var url;
	      if (this.sourceRoot != null
	          && (url = util.urlParse(this.sourceRoot))) {
	        // XXX: file:// URIs and absolute paths lead to unexpected behavior for
	        // many users. We can help them out when they expect file:// URIs to
	        // behave like it would if they were running a local HTTP server. See
	        // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.
	        var fileUriAbsPath = aSource.replace(/^file:\/\//, "");
	        if (url.scheme == "file"
	            && this._sources.has(fileUriAbsPath)) {
	          return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]
	        }

	        if ((!url.path || url.path == "/")
	            && this._sources.has("/" + aSource)) {
	          return this.sourcesContent[this._sources.indexOf("/" + aSource)];
	        }
	      }

	      // This function is used recursively from
	      // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we
	      // don't want to throw if we can't find the source - we just want to
	      // return null, so we provide a flag to exit gracefully.
	      if (nullOnMissing) {
	        return null;
	      }
	      else {
	        throw new Error('"' + aSource + '" is not in the SourceMap.');
	      }
	    };

	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: The column number in the original source.
	   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or
	   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the
	   *     closest element that is smaller than or greater than the one we are
	   *     searching for, respectively, if the exact element cannot be found.
	   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  BasicSourceMapConsumer.prototype.generatedPositionFor =
	    function SourceMapConsumer_generatedPositionFor(aArgs) {
	      var source = util.getArg(aArgs, 'source');
	      if (this.sourceRoot != null) {
	        source = util.relative(this.sourceRoot, source);
	      }
	      if (!this._sources.has(source)) {
	        return {
	          line: null,
	          column: null,
	          lastColumn: null
	        };
	      }
	      source = this._sources.indexOf(source);

	      var needle = {
	        source: source,
	        originalLine: util.getArg(aArgs, 'line'),
	        originalColumn: util.getArg(aArgs, 'column')
	      };

	      var index = this._findMapping(
	        needle,
	        this._originalMappings,
	        "originalLine",
	        "originalColumn",
	        util.compareByOriginalPositions,
	        util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)
	      );

	      if (index >= 0) {
	        var mapping = this._originalMappings[index];

	        if (mapping.source === needle.source) {
	          return {
	            line: util.getArg(mapping, 'generatedLine', null),
	            column: util.getArg(mapping, 'generatedColumn', null),
	            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)
	          };
	        }
	      }

	      return {
	        line: null,
	        column: null,
	        lastColumn: null
	      };
	    };

	  exports.BasicSourceMapConsumer = BasicSourceMapConsumer;

	  /**
	   * An IndexedSourceMapConsumer instance represents a parsed source map which
	   * we can query for information. It differs from BasicSourceMapConsumer in
	   * that it takes "indexed" source maps (i.e. ones with a "sections" field) as
	   * input.
	   *
	   * The only parameter is a raw source map (either as a JSON string, or already
	   * parsed to an object). According to the spec for indexed source maps, they
	   * have the following attributes:
	   *
	   *   - version: Which version of the source map spec this map is following.
	   *   - file: Optional. The generated file this source map is associated with.
	   *   - sections: A list of section definitions.
	   *
	   * Each value under the "sections" field has two fields:
	   *   - offset: The offset into the original specified at which this section
	   *       begins to apply, defined as an object with a "line" and "column"
	   *       field.
	   *   - map: A source map definition. This source map could also be indexed,
	   *       but doesn't have to be.
	   *
	   * Instead of the "map" field, it's also possible to have a "url" field
	   * specifying a URL to retrieve a source map from, but that's currently
	   * unsupported.
	   *
	   * Here's an example source map, taken from the source map spec[0], but
	   * modified to omit a section which uses the "url" field.
	   *
	   *  {
	   *    version : 3,
	   *    file: "app.js",
	   *    sections: [{
	   *      offset: {line:100, column:10},
	   *      map: {
	   *        version : 3,
	   *        file: "section.js",
	   *        sources: ["foo.js", "bar.js"],
	   *        names: ["src", "maps", "are", "fun"],
	   *        mappings: "AAAA,E;;ABCDE;"
	   *      }
	   *    }],
	   *  }
	   *
	   * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt
	   */
	  function IndexedSourceMapConsumer(aSourceMap) {
	    var sourceMap = aSourceMap;
	    if (typeof aSourceMap === 'string') {
	      sourceMap = JSON.parse(aSourceMap.replace(/^\)\]\}'/, ''));
	    }

	    var version = util.getArg(sourceMap, 'version');
	    var sections = util.getArg(sourceMap, 'sections');

	    if (version != this._version) {
	      throw new Error('Unsupported version: ' + version);
	    }

	    this._sources = new ArraySet();
	    this._names = new ArraySet();

	    var lastOffset = {
	      line: -1,
	      column: 0
	    };
	    this._sections = sections.map(function (s) {
	      if (s.url) {
	        // The url field will require support for asynchronicity.
	        // See https://github.com/mozilla/source-map/issues/16
	        throw new Error('Support for url field in sections not implemented.');
	      }
	      var offset = util.getArg(s, 'offset');
	      var offsetLine = util.getArg(offset, 'line');
	      var offsetColumn = util.getArg(offset, 'column');

	      if (offsetLine < lastOffset.line ||
	          (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {
	        throw new Error('Section offsets must be ordered and non-overlapping.');
	      }
	      lastOffset = offset;

	      return {
	        generatedOffset: {
	          // The offset fields are 0-based, but we use 1-based indices when
	          // encoding/decoding from VLQ.
	          generatedLine: offsetLine + 1,
	          generatedColumn: offsetColumn + 1
	        },
	        consumer: new SourceMapConsumer(util.getArg(s, 'map'))
	      }
	    });
	  }

	  IndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);
	  IndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;

	  /**
	   * The version of the source mapping spec that we are consuming.
	   */
	  IndexedSourceMapConsumer.prototype._version = 3;

	  /**
	   * The list of original sources.
	   */
	  Object.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {
	    get: function () {
	      var sources = [];
	      for (var i = 0; i < this._sections.length; i++) {
	        for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {
	          sources.push(this._sections[i].consumer.sources[j]);
	        }
	      }
	      return sources;
	    }
	  });

	  /**
	   * Returns the original source, line, and column information for the generated
	   * source's line and column positions provided. The only argument is an object
	   * with the following properties:
	   *
	   *   - line: The line number in the generated source.
	   *   - column: The column number in the generated source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - source: The original source file, or null.
	   *   - line: The line number in the original source, or null.
	   *   - column: The column number in the original source, or null.
	   *   - name: The original identifier, or null.
	   */
	  IndexedSourceMapConsumer.prototype.originalPositionFor =
	    function IndexedSourceMapConsumer_originalPositionFor(aArgs) {
	      var needle = {
	        generatedLine: util.getArg(aArgs, 'line'),
	        generatedColumn: util.getArg(aArgs, 'column')
	      };

	      // Find the section containing the generated position we're trying to map
	      // to an original position.
	      var sectionIndex = binarySearch.search(needle, this._sections,
	        function(needle, section) {
	          var cmp = needle.generatedLine - section.generatedOffset.generatedLine;
	          if (cmp) {
	            return cmp;
	          }

	          return (needle.generatedColumn -
	                  section.generatedOffset.generatedColumn);
	        });
	      var section = this._sections[sectionIndex];

	      if (!section) {
	        return {
	          source: null,
	          line: null,
	          column: null,
	          name: null
	        };
	      }

	      return section.consumer.originalPositionFor({
	        line: needle.generatedLine -
	          (section.generatedOffset.generatedLine - 1),
	        column: needle.generatedColumn -
	          (section.generatedOffset.generatedLine === needle.generatedLine
	           ? section.generatedOffset.generatedColumn - 1
	           : 0),
	        bias: aArgs.bias
	      });
	    };

	  /**
	   * Return true if we have the source content for every source in the source
	   * map, false otherwise.
	   */
	  IndexedSourceMapConsumer.prototype.hasContentsOfAllSources =
	    function IndexedSourceMapConsumer_hasContentsOfAllSources() {
	      return this._sections.every(function (s) {
	        return s.consumer.hasContentsOfAllSources();
	      });
	    };

	  /**
	   * Returns the original source content. The only argument is the url of the
	   * original source file. Returns null if no original source content is
	   * available.
	   */
	  IndexedSourceMapConsumer.prototype.sourceContentFor =
	    function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];

	        var content = section.consumer.sourceContentFor(aSource, true);
	        if (content) {
	          return content;
	        }
	      }
	      if (nullOnMissing) {
	        return null;
	      }
	      else {
	        throw new Error('"' + aSource + '" is not in the SourceMap.');
	      }
	    };

	  /**
	   * Returns the generated line and column information for the original source,
	   * line, and column positions provided. The only argument is an object with
	   * the following properties:
	   *
	   *   - source: The filename of the original source.
	   *   - line: The line number in the original source.
	   *   - column: The column number in the original source.
	   *
	   * and an object is returned with the following properties:
	   *
	   *   - line: The line number in the generated source, or null.
	   *   - column: The column number in the generated source, or null.
	   */
	  IndexedSourceMapConsumer.prototype.generatedPositionFor =
	    function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];

	        // Only consider this section if the requested source is in the list of
	        // sources of the consumer.
	        if (section.consumer.sources.indexOf(util.getArg(aArgs, 'source')) === -1) {
	          continue;
	        }
	        var generatedPosition = section.consumer.generatedPositionFor(aArgs);
	        if (generatedPosition) {
	          var ret = {
	            line: generatedPosition.line +
	              (section.generatedOffset.generatedLine - 1),
	            column: generatedPosition.column +
	              (section.generatedOffset.generatedLine === generatedPosition.line
	               ? section.generatedOffset.generatedColumn - 1
	               : 0)
	          };
	          return ret;
	        }
	      }

	      return {
	        line: null,
	        column: null
	      };
	    };

	  /**
	   * Parse the mappings in a string in to a data structure which we can easily
	   * query (the ordered arrays in the `this.__generatedMappings` and
	   * `this.__originalMappings` properties).
	   */
	  IndexedSourceMapConsumer.prototype._parseMappings =
	    function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {
	      this.__generatedMappings = [];
	      this.__originalMappings = [];
	      for (var i = 0; i < this._sections.length; i++) {
	        var section = this._sections[i];
	        var sectionMappings = section.consumer._generatedMappings;
	        for (var j = 0; j < sectionMappings.length; j++) {
	          var mapping = sectionMappings[j];

	          var source = section.consumer._sources.at(mapping.source);
	          if (section.consumer.sourceRoot !== null) {
	            source = util.join(section.consumer.sourceRoot, source);
	          }
	          this._sources.add(source);
	          source = this._sources.indexOf(source);

	          var name = section.consumer._names.at(mapping.name);
	          this._names.add(name);
	          name = this._names.indexOf(name);

	          // The mappings coming from the consumer for the section have
	          // generated positions relative to the start of the section, so we
	          // need to offset them to be relative to the start of the concatenated
	          // generated file.
	          var adjustedMapping = {
	            source: source,
	            generatedLine: mapping.generatedLine +
	              (section.generatedOffset.generatedLine - 1),
	            generatedColumn: mapping.generatedColumn +
	              (section.generatedOffset.generatedLine === mapping.generatedLine
	              ? section.generatedOffset.generatedColumn - 1
	              : 0),
	            originalLine: mapping.originalLine,
	            originalColumn: mapping.originalColumn,
	            name: name
	          };

	          this.__generatedMappings.push(adjustedMapping);
	          if (typeof adjustedMapping.originalLine === 'number') {
	            this.__originalMappings.push(adjustedMapping);
	          }
	        }
	      }

	      quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);
	      quickSort(this.__originalMappings, util.compareByOriginalPositions);
	    };

	  exports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;
	}


/***/ },
/* 2892 */
/***/ function(module, exports, __webpack_require__) {

	/* -*- Mode: js; js-indent-level: 2; -*- */
	/*
	 * Copyright 2011 Mozilla Foundation and contributors
	 * Licensed under the New BSD license. See LICENSE or:
	 * http://opensource.org/licenses/BSD-3-Clause
	 */
	{
	  var SourceMapGenerator = __webpack_require__(1605).SourceMapGenerator;
	  var util = __webpack_require__(551);

	  // Matches a Windows-style `\r\n` newline or a `\n` newline used by all other
	  // operating systems these days (capturing the result).
	  var REGEX_NEWLINE = /(\r?\n)/;

	  // Newline character code for charCodeAt() comparisons
	  var NEWLINE_CODE = 10;

	  // Private symbol for identifying `SourceNode`s when multiple versions of
	  // the source-map library are loaded. This MUST NOT CHANGE across
	  // versions!
	  var isSourceNode = "$$$isSourceNode$$$";

	  /**
	   * SourceNodes provide a way to abstract over interpolating/concatenating
	   * snippets of generated JavaScript source code while maintaining the line and
	   * column information associated with the original source code.
	   *
	   * @param aLine The original line number.
	   * @param aColumn The original column number.
	   * @param aSource The original source's filename.
	   * @param aChunks Optional. An array of strings which are snippets of
	   *        generated JS, or other SourceNodes.
	   * @param aName The original identifier.
	   */
	  function SourceNode(aLine, aColumn, aSource, aChunks, aName) {
	    this.children = [];
	    this.sourceContents = {};
	    this.line = aLine == null ? null : aLine;
	    this.column = aColumn == null ? null : aColumn;
	    this.source = aSource == null ? null : aSource;
	    this.name = aName == null ? null : aName;
	    this[isSourceNode] = true;
	    if (aChunks != null) this.add(aChunks);
	  }

	  /**
	   * Creates a SourceNode from generated code and a SourceMapConsumer.
	   *
	   * @param aGeneratedCode The generated code
	   * @param aSourceMapConsumer The SourceMap for the generated code
	   * @param aRelativePath Optional. The path that relative sources in the
	   *        SourceMapConsumer should be relative to.
	   */
	  SourceNode.fromStringWithSourceMap =
	    function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {
	      // The SourceNode we want to fill with the generated code
	      // and the SourceMap
	      var node = new SourceNode();

	      // All even indices of this array are one line of the generated code,
	      // while all odd indices are the newlines between two adjacent lines
	      // (since `REGEX_NEWLINE` captures its match).
	      // Processed fragments are removed from this array, by calling `shiftNextLine`.
	      var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);
	      var shiftNextLine = function() {
	        var lineContents = remainingLines.shift();
	        // The last line of a file might not have a newline.
	        var newLine = remainingLines.shift() || "";
	        return lineContents + newLine;
	      };

	      // We need to remember the position of "remainingLines"
	      var lastGeneratedLine = 1, lastGeneratedColumn = 0;

	      // The generate SourceNodes we need a code range.
	      // To extract it current and last mapping is used.
	      // Here we store the last mapping.
	      var lastMapping = null;

	      aSourceMapConsumer.eachMapping(function (mapping) {
	        if (lastMapping !== null) {
	          // We add the code from "lastMapping" to "mapping":
	          // First check if there is a new line in between.
	          if (lastGeneratedLine < mapping.generatedLine) {
	            // Associate first line with "lastMapping"
	            addMappingWithCode(lastMapping, shiftNextLine());
	            lastGeneratedLine++;
	            lastGeneratedColumn = 0;
	            // The remaining code is added without mapping
	          } else {
	            // There is no new line in between.
	            // Associate the code between "lastGeneratedColumn" and
	            // "mapping.generatedColumn" with "lastMapping"
	            var nextLine = remainingLines[0];
	            var code = nextLine.substr(0, mapping.generatedColumn -
	                                          lastGeneratedColumn);
	            remainingLines[0] = nextLine.substr(mapping.generatedColumn -
	                                                lastGeneratedColumn);
	            lastGeneratedColumn = mapping.generatedColumn;
	            addMappingWithCode(lastMapping, code);
	            // No more remaining code, continue
	            lastMapping = mapping;
	            return;
	          }
	        }
	        // We add the generated code until the first mapping
	        // to the SourceNode without any mapping.
	        // Each line is added as separate string.
	        while (lastGeneratedLine < mapping.generatedLine) {
	          node.add(shiftNextLine());
	          lastGeneratedLine++;
	        }
	        if (lastGeneratedColumn < mapping.generatedColumn) {
	          var nextLine = remainingLines[0];
	          node.add(nextLine.substr(0, mapping.generatedColumn));
	          remainingLines[0] = nextLine.substr(mapping.generatedColumn);
	          lastGeneratedColumn = mapping.generatedColumn;
	        }
	        lastMapping = mapping;
	      }, this);
	      // We have processed all mappings.
	      if (remainingLines.length > 0) {
	        if (lastMapping) {
	          // Associate the remaining code in the current line with "lastMapping"
	          addMappingWithCode(lastMapping, shiftNextLine());
	        }
	        // and add the remaining lines without any mapping
	        node.add(remainingLines.join(""));
	      }

	      // Copy sourcesContent into SourceNode
	      aSourceMapConsumer.sources.forEach(function (sourceFile) {
	        var content = aSourceMapConsumer.sourceContentFor(sourceFile);
	        if (content != null) {
	          if (aRelativePath != null) {
	            sourceFile = util.join(aRelativePath, sourceFile);
	          }
	          node.setSourceContent(sourceFile, content);
	        }
	      });

	      return node;

	      function addMappingWithCode(mapping, code) {
	        if (mapping === null || mapping.source === undefined) {
	          node.add(code);
	        } else {
	          var source = aRelativePath
	            ? util.join(aRelativePath, mapping.source)
	            : mapping.source;
	          node.add(new SourceNode(mapping.originalLine,
	                                  mapping.originalColumn,
	                                  source,
	                                  code,
	                                  mapping.name));
	        }
	      }
	    };

	  /**
	   * Add a chunk of generated JS to this source node.
	   *
	   * @param aChunk A string snippet of generated JS code, another instance of
	   *        SourceNode, or an array where each member is one of those things.
	   */
	  SourceNode.prototype.add = function SourceNode_add(aChunk) {
	    if (Array.isArray(aChunk)) {
	      aChunk.forEach(function (chunk) {
	        this.add(chunk);
	      }, this);
	    }
	    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	      if (aChunk) {
	        this.children.push(aChunk);
	      }
	    }
	    else {
	      throw new TypeError(
	        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	      );
	    }
	    return this;
	  };

	  /**
	   * Add a chunk of generated JS to the beginning of this source node.
	   *
	   * @param aChunk A string snippet of generated JS code, another instance of
	   *        SourceNode, or an array where each member is one of those things.
	   */
	  SourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {
	    if (Array.isArray(aChunk)) {
	      for (var i = aChunk.length-1; i >= 0; i--) {
	        this.prepend(aChunk[i]);
	      }
	    }
	    else if (aChunk[isSourceNode] || typeof aChunk === "string") {
	      this.children.unshift(aChunk);
	    }
	    else {
	      throw new TypeError(
	        "Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + aChunk
	      );
	    }
	    return this;
	  };

	  /**
	   * Walk over the tree of JS snippets in this node and its children. The
	   * walking function is called once for each snippet of JS and is passed that
	   * snippet and the its original associated source's line/column location.
	   *
	   * @param aFn The traversal function.
	   */
	  SourceNode.prototype.walk = function SourceNode_walk(aFn) {
	    var chunk;
	    for (var i = 0, len = this.children.length; i < len; i++) {
	      chunk = this.children[i];
	      if (chunk[isSourceNode]) {
	        chunk.walk(aFn);
	      }
	      else {
	        if (chunk !== '') {
	          aFn(chunk, { source: this.source,
	                       line: this.line,
	                       column: this.column,
	                       name: this.name });
	        }
	      }
	    }
	  };

	  /**
	   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between
	   * each of `this.children`.
	   *
	   * @param aSep The separator.
	   */
	  SourceNode.prototype.join = function SourceNode_join(aSep) {
	    var newChildren;
	    var i;
	    var len = this.children.length;
	    if (len > 0) {
	      newChildren = [];
	      for (i = 0; i < len-1; i++) {
	        newChildren.push(this.children[i]);
	        newChildren.push(aSep);
	      }
	      newChildren.push(this.children[i]);
	      this.children = newChildren;
	    }
	    return this;
	  };

	  /**
	   * Call String.prototype.replace on the very right-most source snippet. Useful
	   * for trimming whitespace from the end of a source node, etc.
	   *
	   * @param aPattern The pattern to replace.
	   * @param aReplacement The thing to replace the pattern with.
	   */
	  SourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {
	    var lastChild = this.children[this.children.length - 1];
	    if (lastChild[isSourceNode]) {
	      lastChild.replaceRight(aPattern, aReplacement);
	    }
	    else if (typeof lastChild === 'string') {
	      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);
	    }
	    else {
	      this.children.push(''.replace(aPattern, aReplacement));
	    }
	    return this;
	  };

	  /**
	   * Set the source content for a source file. This will be added to the SourceMapGenerator
	   * in the sourcesContent field.
	   *
	   * @param aSourceFile The filename of the source file
	   * @param aSourceContent The content of the source file
	   */
	  SourceNode.prototype.setSourceContent =
	    function SourceNode_setSourceContent(aSourceFile, aSourceContent) {
	      this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;
	    };

	  /**
	   * Walk over the tree of SourceNodes. The walking function is called for each
	   * source file content and is passed the filename and source content.
	   *
	   * @param aFn The traversal function.
	   */
	  SourceNode.prototype.walkSourceContents =
	    function SourceNode_walkSourceContents(aFn) {
	      for (var i = 0, len = this.children.length; i < len; i++) {
	        if (this.children[i][isSourceNode]) {
	          this.children[i].walkSourceContents(aFn);
	        }
	      }

	      var sources = Object.keys(this.sourceContents);
	      for (var i = 0, len = sources.length; i < len; i++) {
	        aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);
	      }
	    };

	  /**
	   * Return the string representation of this source node. Walks over the tree
	   * and concatenates all the various snippets together to one string.
	   */
	  SourceNode.prototype.toString = function SourceNode_toString() {
	    var str = "";
	    this.walk(function (chunk) {
	      str += chunk;
	    });
	    return str;
	  };

	  /**
	   * Returns the string representation of this source node along with a source
	   * map.
	   */
	  SourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {
	    var generated = {
	      code: "",
	      line: 1,
	      column: 0
	    };
	    var map = new SourceMapGenerator(aArgs);
	    var sourceMappingActive = false;
	    var lastOriginalSource = null;
	    var lastOriginalLine = null;
	    var lastOriginalColumn = null;
	    var lastOriginalName = null;
	    this.walk(function (chunk, original) {
	      generated.code += chunk;
	      if (original.source !== null
	          && original.line !== null
	          && original.column !== null) {
	        if(lastOriginalSource !== original.source
	           || lastOriginalLine !== original.line
	           || lastOriginalColumn !== original.column
	           || lastOriginalName !== original.name) {
	          map.addMapping({
	            source: original.source,
	            original: {
	              line: original.line,
	              column: original.column
	            },
	            generated: {
	              line: generated.line,
	              column: generated.column
	            },
	            name: original.name
	          });
	        }
	        lastOriginalSource = original.source;
	        lastOriginalLine = original.line;
	        lastOriginalColumn = original.column;
	        lastOriginalName = original.name;
	        sourceMappingActive = true;
	      } else if (sourceMappingActive) {
	        map.addMapping({
	          generated: {
	            line: generated.line,
	            column: generated.column
	          }
	        });
	        lastOriginalSource = null;
	        sourceMappingActive = false;
	      }
	      for (var idx = 0, length = chunk.length; idx < length; idx++) {
	        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {
	          generated.line++;
	          generated.column = 0;
	          // Mappings end at eol
	          if (idx + 1 === length) {
	            lastOriginalSource = null;
	            sourceMappingActive = false;
	          } else if (sourceMappingActive) {
	            map.addMapping({
	              source: original.source,
	              original: {
	                line: original.line,
	                column: original.column
	              },
	              generated: {
	                line: generated.line,
	                column: generated.column
	              },
	              name: original.name
	            });
	          }
	        } else {
	          generated.column++;
	        }
	      }
	    });
	    this.walkSourceContents(function (sourceFile, sourceContent) {
	      map.setSourceContent(sourceFile, sourceContent);
	    });

	    return { code: generated.code, map: map };
	  };

	  exports.SourceNode = SourceNode;
	}


/***/ },
/* 2893 */
[7816, 2894],
/* 2894 */
[7829, 2918, 2917, 2915],
/* 2895 */
2746,
/* 2896 */
2747,
/* 2897 */
[7840, 2904],
/* 2898 */
[7841, 1607, 552],
/* 2899 */
[7842, 2895],
/* 2900 */
[7843, 2902],
/* 2901 */
[7845, 994, 993, 2899],
/* 2902 */
543,
/* 2903 */
[7848, 1607],
/* 2904 */
701,
/* 2905 */
[7850, 712, 1611, 1612, 995, 552],
/* 2906 */
1559,
/* 2907 */
1560,
/* 2908 */
[7854, 995],
/* 2909 */
[7857, 994],
/* 2910 */
[7858, 2911, 1608],
/* 2911 */
1564,
/* 2912 */
[7859, 2903, 1608],
/* 2913 */
975,
/* 2914 */
[7862, 2898, 552, 711, 993],
/* 2915 */
[7863, 2897, 2914, 993],
/* 2916 */
[7864, 2896, 2906, 711, 2912, 1610],
/* 2917 */
[7870, 2910, 1610],
/* 2918 */
[7872, 2916, 711],
/* 2919 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    pre: function pre(file) {
	      file.set("helpersNamespace", t.identifier("babelHelpers"));
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2920 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("asyncGenerators");
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2921 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    inherits: __webpack_require__(713)
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 2922 */
[7993, 11, 56, 2923, 1623, 61],
/* 2923 */
[7994, 11, 56, 2924, 1623, 61],
/* 2924 */
[7995, 56, 61],
/* 2925 */
[7912, 11, 173, 2933, 2932, 2930, 2928, 2931, 2929, 2927, 174, 1624, 714, 2934, 2935],
/* 2926 */
2810,
/* 2927 */
[7913, 11, 173],
/* 2928 */
[7914, 381, 62, 11, 174, 173, 553],
/* 2929 */
[7916, 11, 715, 173],
/* 2930 */
[7917, 62, 11, 174, 173, 553],
/* 2931 */
[7918, 106, 11, 173, 715],
/* 2932 */
[7919, 381, 62, 11, 174, 173, 432],
/* 2933 */
[7920, 11, 174, 173, 432],
/* 2934 */
[7921, 11, 174, 173],
/* 2935 */
[7922, 11, 2936, 174, 714, 173, 553, 432],
/* 2936 */
2820,
/* 2937 */
[7925, 106, 715, 714, 174],
/* 2938 */
1578,
/* 2939 */
1580,
/* 2940 */
981,
/* 2941 */
[7936, 2943, 1627],
/* 2942 */
[7938, 2939, 2940, 2941, 2945, 2954, 2955, 2956, 433, 555],
/* 2943 */
1584,
/* 2944 */
[7940, 2952],
/* 2945 */
[7942, 2944, 1627],
/* 2946 */
[7943, 1000],
/* 2947 */
1590,
/* 2948 */
1591,
/* 2949 */
984,
/* 2950 */
[7952, 2965],
/* 2951 */
2851,
/* 2952 */
[7957, 1000],
/* 2953 */
[7963, 2947],
/* 2954 */
2866,
/* 2955 */
[7966, 2951],
/* 2956 */
2868,
/* 2957 */
[7969, 433, 1000],
/* 2958 */
[7971, 1001, 433, 998, 554, 2964],
/* 2959 */
[7973, 2949, 433],
/* 2960 */
[7975, 2942, 2950],
/* 2961 */
[7978, 555],
/* 2962 */
[7979, 2961, 999],
/* 2963 */
[7987, 2946, 2948, 1001, 433, 998, 2957, 554, 2938, 2959],
/* 2964 */
[7989, 1001, 433, 998, 554, 555],
/* 2965 */
1601,
/* 2966 */
[7874, 106, 62, 11, 56, 380, 61],
/* 2967 */
[7877, 62, 56, 11, 61, 380],
/* 2968 */
2774,
/* 2969 */
[7878, 62, 11, 434],
/* 2970 */
[7879, 56, 61],
/* 2971 */
[7880, 62],
/* 2972 */
[7881, 62, 11, 56, 380, 61],
/* 2973 */
[7883, 62, 56, 2975, 61],
/* 2974 */
[7884, 62, 56, 61],
/* 2975 */
[7885, 56, 1660, 61, 2974],
/* 2976 */
[7886, 62, 11, 56, 1004, 61],
/* 2977 */
[7887, 106, 62, 56, 61],
/* 2978 */
2784,
/* 2979 */
[7889, 62, 11, 56, 1629, 2977, 380, 61],
/* 2980 */
[7890, 62, 2978],
/* 2981 */
[7891, 62, 11, 56, 2984, 434, 380, 2999, 61],
/* 2982 */
[7894, 106, 11, 56, 1631, 61],
/* 2983 */
[7895, 62, 1657, 56, 11, 1630, 1003, 61, 3038],
/* 2984 */
[7806, 11, 2997, 1641, 2996, 2995, 2985],
/* 2985 */
[7807, 2987, 2986, 2990, 2988, 2992],
/* 2986 */
2682,
/* 2987 */
2683,
/* 2988 */
[7808, 2989],
/* 2989 */
2685,
/* 2990 */
[7809, 2991],
/* 2991 */
2685,
/* 2992 */
2688,
/* 2993 */
2689,
/* 2994 */
[7810, 1632],
/* 2995 */
[7811, 2993, 1632, 2994],
/* 2996 */
2692,
/* 2997 */
[7812, 2998],
/* 2998 */
2694,
/* 2999 */
[7912, 11, 175, 3007, 3006, 3004, 3002, 3005, 3003, 3001, 176, 1633, 716, 3008, 3009],
/* 3000 */
2810,
/* 3001 */
[7913, 11, 175],
/* 3002 */
[7914, 381, 62, 11, 176, 175, 556],
/* 3003 */
[7916, 11, 717, 175],
/* 3004 */
[7917, 62, 11, 176, 175, 556],
/* 3005 */
[7918, 106, 11, 175, 717],
/* 3006 */
[7919, 381, 62, 11, 176, 175, 435],
/* 3007 */
[7920, 11, 176, 175, 435],
/* 3008 */
[7921, 11, 176, 175],
/* 3009 */
[7922, 11, 3010, 176, 716, 175, 556, 435],
/* 3010 */
2820,
/* 3011 */
[7925, 106, 717, 716, 176],
/* 3012 */
[7928, 3013],
/* 3013 */
[7929, 3014],
/* 3014 */
2825,
/* 3015 */
[7896, 7771],
/* 3016 */
2791,
/* 3017 */
1580,
/* 3018 */
981,
/* 3019 */
2836,
/* 3020 */
[7935, 720],
/* 3021 */
[7938, 3017, 3018, 1635, 3024, 3033, 3034, 3035, 719, 436],
/* 3022 */
1584,
/* 3023 */
[7940, 3030],
/* 3024 */
[7942, 3023, 720],
/* 3025 */
[7944, 3032],
/* 3026 */
1590,
/* 3027 */
2850,
/* 3028 */
2851,
/* 3029 */
[7955, 1636, 1007, 1634],
/* 3030 */
[7957, 3037],
/* 3031 */
[7959, 1634],
/* 3032 */
2865,
/* 3033 */
2866,
/* 3034 */
[7966, 3028],
/* 3035 */
2868,
/* 3036 */
[7971, 1639, 719, 1006, 557, 3043],
/* 3037 */
[7972, 436],
/* 3038 */
[7974, 3021, 1636, 1007],
/* 3039 */
[7978, 436],
/* 3040 */
[7979, 3039, 718],
/* 3041 */
[7983, 718],
/* 3042 */
[7986, 1640, 3019, 3031],
/* 3043 */
[7989, 1639, 719, 1006, 557, 436],
/* 3044 */
[7991, 3027, 720],
/* 3045 */
1601,
/* 3046 */
[7814, 3047],
/* 3047 */
2697,
/* 3048 */
[7898, 62, 3113, 11, 56, 3106, 3105, 3107, 3108, 434, 61],
/* 3049 */
[7899, 56, 11, 61, 1008, 296],
/* 3050 */
[7900, 11, 296],
/* 3051 */
[7901, 11, 296],
/* 3052 */
[7902, 11, 296],
/* 3053 */
[7904, 296, 3049, 3050, 3052, 3054, 3055, 3051],
/* 3054 */
[7905, 11, 296],
/* 3055 */
[7906, 11, 296],
/* 3056 */
[7907, 56, 61],
/* 3057 */
[7909, 56, 61],
/* 3058 */
[7911, 62, 11, 56, 1642, 3061, 61, 1008],
/* 3059 */
2689,
/* 3060 */
[7810, 1643],
/* 3061 */
[7811, 3059, 1643, 3060],
/* 3062 */
2827,
/* 3063 */
1578,
/* 3064 */
[7930, 3071, 3084, 1651, 3101],
/* 3065 */
[7931, 3066],
/* 3066 */
[7932, 1644, 3074, 3091],
/* 3067 */
[7934, 3087, 721],
/* 3068 */
1580,
/* 3069 */
1581,
/* 3070 */
[7936, 3073, 722],
/* 3071 */
[7937, 3079, 3080, 1009, 1656, 3111],
/* 3072 */
[7938, 3068, 1644, 3070, 1646, 3097, 3098, 3099, 299, 146],
/* 3073 */
1584,
/* 3074 */
[7939, 1646, 3088],
/* 3075 */
[7941, 1645, 1655],
/* 3076 */
[7944, 3096],
/* 3077 */
[7946, 3092, 3093, 3094, 299, 3109],
/* 3078 */
[7947, 1648, 298],
/* 3079 */
[7948, 3078, 3095, 298],
/* 3080 */
[7949, 1647, 1648, 3082, 299, 1652, 1653, 3063, 298, 1654],
/* 3081 */
[7950, 1647, 1654],
/* 3082 */
1591,
/* 3083 */
984,
/* 3084 */
[7951, 3076, 3086, 3090],
/* 3085 */
2851,
/* 3086 */
[7953, 146],
/* 3087 */
[7954, 146],
/* 3088 */
[7956, 1650, 437, 298],
/* 3089 */
[7957, 298],
/* 3090 */
[7958, 3067, 721],
/* 3091 */
[7960, 1009, 299],
/* 3092 */
[7961, 3069],
/* 3093 */
2861,
/* 3094 */
[7962, 722],
/* 3095 */
[7964, 1653, 3110],
/* 3096 */
2865,
/* 3097 */
2866,
/* 3098 */
[7966, 3085],
/* 3099 */
2868,
/* 3100 */
[7971, 1012, 299, 1011, 437, 1655],
/* 3101 */
2870,
/* 3102 */
[7974, 3072, 1009, 1651],
/* 3103 */
[7978, 146],
/* 3104 */
[7979, 3103, 297],
/* 3105 */
[7980, 297],
/* 3106 */
[7981, 3075, 1012, 297],
/* 3107 */
[7982, 146],
/* 3108 */
[7983, 297],
/* 3109 */
[7984, 437, 297],
/* 3110 */
[7990, 722, 298],
/* 3111 */
[7992, 1649, 3081, 1652],
/* 3112 */
2809,
/* 3113 */
[7817, 3123],
/* 3114 */
[7819, 3125],
/* 3115 */
[7820, 3126],
/* 3116 */
[7821, 3127],
/* 3117 */
[7822, 3128],
/* 3118 */
[7824, 3130],
/* 3119 */
[7826, 3131],
/* 3120 */
[7827, 3116, 3115, 3114],
/* 3121 */
2107,
/* 3122 */
[7829, 3156, 3155, 3147],
/* 3123 */
[7830, 3149],
/* 3124 */
[7831, 122],
/* 3125 */
[7832, 122],
/* 3126 */
[7833, 122, 3150],
/* 3127 */
[7834, 122, 3151],
/* 3128 */
[7835, 1022, 253],
/* 3129 */
[7836, 3152, 253],
/* 3130 */
[7837, 3153, 253],
/* 3131 */
[7838, 1022, 253],
/* 3132 */
[7839, 1022, 3154, 253],
/* 3133 */
2746,
/* 3134 */
2747,
/* 3135 */
[7841, 1014, 438],
/* 3136 */
[7844, 122],
/* 3137 */
[7848, 1014],
/* 3138 */
[7849, 1014],
/* 3139 */
[7850, 122, 1020, 1021, 1018, 438],
/* 3140 */
1559,
/* 3141 */
[7852, 122, 559],
/* 3142 */
[7855, 122, 1664, 1013, 1661],
/* 3143 */
[7858, 3144, 1015],
/* 3144 */
1564,
/* 3145 */
[7860, 1015],
/* 3146 */
[7862, 3135, 438, 724, 253],
/* 3147 */
[7863, 1013, 3146, 253],
/* 3148 */
[7864, 3134, 3140, 724, 559, 1665],
/* 3149 */
[7865, 558],
/* 3150 */
[7866, 559, 1019],
/* 3151 */
[7867, 1019, 1663],
/* 3152 */
[7868, 3145, 1019],
/* 3153 */
[7869, 558, 3142],
/* 3154 */
428,
/* 3155 */
[7870, 3143, 1665],
/* 3156 */
[7872, 3148, 724],
/* 3157 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(1)["default"];

	exports.__esModule = true;

	var _babelHelperRemapAsyncToGenerator = __webpack_require__(3158);

	var _babelHelperRemapAsyncToGenerator2 = _interopRequireDefault(_babelHelperRemapAsyncToGenerator);

	exports["default"] = function () {
	  return {
	    inherits: __webpack_require__(713),

	    visitor: {
	      Function: function Function(path, state) {
	        if (!path.node.async || path.node.generator) return;

	        _babelHelperRemapAsyncToGenerator2["default"](path, state.addImport(state.opts.module, state.opts.method));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 3158 */
[7993, 1, 19, 3159, 1670, 25],
/* 3159 */
[7994, 1, 19, 3160, 1670, 25],
/* 3160 */
[7995, 19, 25],
/* 3161 */
[7912, 1, 177, 3169, 3168, 3166, 3164, 3167, 3165, 3163, 178, 1671, 725, 3170, 3171],
/* 3162 */
2810,
/* 3163 */
[7913, 1, 177],
/* 3164 */
[7914, 181, 18, 1, 178, 177, 560],
/* 3165 */
[7916, 1, 726, 177],
/* 3166 */
[7917, 18, 1, 178, 177, 560],
/* 3167 */
[7918, 39, 1, 177, 726],
/* 3168 */
[7919, 181, 18, 1, 178, 177, 439],
/* 3169 */
[7920, 1, 178, 177, 439],
/* 3170 */
[7921, 1, 178, 177],
/* 3171 */
[7922, 1, 3172, 178, 725, 177, 560, 439],
/* 3172 */
2820,
/* 3173 */
[7925, 39, 726, 725, 178],
/* 3174 */
1578,
/* 3175 */
1580,
/* 3176 */
981,
/* 3177 */
[7936, 3179, 1674],
/* 3178 */
[7938, 3175, 3176, 3177, 3181, 3190, 3191, 3192, 440, 562],
/* 3179 */
1584,
/* 3180 */
[7940, 3188],
/* 3181 */
[7942, 3180, 1674],
/* 3182 */
[7943, 1025],
/* 3183 */
1590,
/* 3184 */
1591,
/* 3185 */
984,
/* 3186 */
[7952, 3201],
/* 3187 */
2851,
/* 3188 */
[7957, 1025],
/* 3189 */
[7963, 3183],
/* 3190 */
2866,
/* 3191 */
[7966, 3187],
/* 3192 */
2868,
/* 3193 */
[7969, 440, 1025],
/* 3194 */
[7971, 1026, 440, 1023, 561, 3200],
/* 3195 */
[7973, 3185, 440],
/* 3196 */
[7975, 3178, 3186],
/* 3197 */
[7978, 562],
/* 3198 */
[7979, 3197, 1024],
/* 3199 */
[7987, 3182, 3184, 1026, 440, 1023, 3193, 561, 3174, 3195],
/* 3200 */
[7989, 1026, 440, 1023, 561, 562],
/* 3201 */
1601,
/* 3202 */
[7874, 39, 18, 1, 19, 382, 25],
/* 3203 */
[7877, 18, 19, 1, 25, 382],
/* 3204 */
2774,
/* 3205 */
[7878, 18, 1, 563],
/* 3206 */
[7879, 19, 25],
/* 3207 */
[7880, 18],
/* 3208 */
[7881, 18, 1, 19, 382, 25],
/* 3209 */
[7883, 18, 19, 3211, 25],
/* 3210 */
[7884, 18, 19, 25],
/* 3211 */
[7885, 19, 732, 25, 3210],
/* 3212 */
[7886, 18, 1, 19, 1029, 25],
/* 3213 */
[7887, 39, 18, 19, 25],
/* 3214 */
2784,
/* 3215 */
[7889, 18, 1, 19, 1676, 3213, 382, 25],
/* 3216 */
[7890, 18, 3214],
/* 3217 */
[7891, 18, 1, 19, 3220, 563, 382, 3235, 25],
/* 3218 */
[7894, 39, 1, 19, 1678, 25],
/* 3219 */
[7895, 18, 1033, 19, 1, 1677, 1028, 25, 3274],
/* 3220 */
[7806, 1, 3233, 1688, 3232, 3231, 3221],
/* 3221 */
[7807, 3223, 3222, 3226, 3224, 3228],
/* 3222 */
2682,
/* 3223 */
2683,
/* 3224 */
[7808, 3225],
/* 3225 */
2685,
/* 3226 */
[7809, 3227],
/* 3227 */
2685,
/* 3228 */
2688,
/* 3229 */
2689,
/* 3230 */
[7810, 1679],
/* 3231 */
[7811, 3229, 1679, 3230],
/* 3232 */
2692,
/* 3233 */
[7812, 3234],
/* 3234 */
2694,
/* 3235 */
[7912, 1, 179, 3243, 3242, 3240, 3238, 3241, 3239, 3237, 180, 1680, 727, 3244, 3245],
/* 3236 */
2810,
/* 3237 */
[7913, 1, 179],
/* 3238 */
[7914, 181, 18, 1, 180, 179, 564],
/* 3239 */
[7916, 1, 728, 179],
/* 3240 */
[7917, 18, 1, 180, 179, 564],
/* 3241 */
[7918, 39, 1, 179, 728],
/* 3242 */
[7919, 181, 18, 1, 180, 179, 441],
/* 3243 */
[7920, 1, 180, 179, 441],
/* 3244 */
[7921, 1, 180, 179],
/* 3245 */
[7922, 1, 3246, 180, 727, 179, 564, 441],
/* 3246 */
2820,
/* 3247 */
[7925, 39, 728, 727, 180],
/* 3248 */
[7928, 3249],
/* 3249 */
[7929, 3250],
/* 3250 */
2825,
/* 3251 */
[7896, 7772],
/* 3252 */
2791,
/* 3253 */
1580,
/* 3254 */
981,
/* 3255 */
2836,
/* 3256 */
[7935, 731],
/* 3257 */
[7938, 3253, 3254, 1682, 3260, 3269, 3270, 3271, 730, 442],
/* 3258 */
1584,
/* 3259 */
[7940, 3266],
/* 3260 */
[7942, 3259, 731],
/* 3261 */
[7944, 3268],
/* 3262 */
1590,
/* 3263 */
2850,
/* 3264 */
2851,
/* 3265 */
[7955, 1683, 1032, 1681],
/* 3266 */
[7957, 3273],
/* 3267 */
[7959, 1681],
/* 3268 */
2865,
/* 3269 */
2866,
/* 3270 */
[7966, 3264],
/* 3271 */
2868,
/* 3272 */
[7971, 1686, 730, 1031, 565, 3279],
/* 3273 */
[7972, 442],
/* 3274 */
[7974, 3257, 1683, 1032],
/* 3275 */
[7978, 442],
/* 3276 */
[7979, 3275, 729],
/* 3277 */
[7983, 729],
/* 3278 */
[7986, 1687, 3255, 3267],
/* 3279 */
[7989, 1686, 730, 1031, 565, 442],
/* 3280 */
[7991, 3263, 731],
/* 3281 */
1601,
/* 3282 */
[7814, 3283],
/* 3283 */
2697,
/* 3284 */
[7817, 3293],
/* 3285 */
[7819, 3295],
/* 3286 */
[7820, 3296],
/* 3287 */
[7821, 3297],
/* 3288 */
[7824, 3300],
/* 3289 */
[7826, 3301],
/* 3290 */
[7827, 3287, 3286, 3285],
/* 3291 */
2107,
/* 3292 */
[7829, 3326, 3325, 3317],
/* 3293 */
[7830, 3319],
/* 3294 */
[7831, 123],
/* 3295 */
[7832, 123],
/* 3296 */
[7833, 123, 3320],
/* 3297 */
[7834, 123, 3321],
/* 3298 */
[7835, 1045, 254],
/* 3299 */
[7836, 3322, 254],
/* 3300 */
[7837, 3323, 254],
/* 3301 */
[7838, 1045, 254],
/* 3302 */
[7839, 1045, 3324, 254],
/* 3303 */
2746,
/* 3304 */
2747,
/* 3305 */
[7841, 1037, 443],
/* 3306 */
[7844, 123],
/* 3307 */
[7848, 1037],
/* 3308 */
[7849, 1037],
/* 3309 */
[7850, 123, 1043, 1044, 1041, 443],
/* 3310 */
1559,
/* 3311 */
[7852, 123, 567],
/* 3312 */
[7855, 123, 1693, 1036, 1690],
/* 3313 */
[7858, 3314, 1038],
/* 3314 */
1564,
/* 3315 */
[7860, 1038],
/* 3316 */
[7862, 3305, 443, 734, 254],
/* 3317 */
[7863, 1036, 3316, 254],
/* 3318 */
[7864, 3304, 3310, 734, 567, 1694],
/* 3319 */
[7865, 566],
/* 3320 */
[7866, 567, 1042],
/* 3321 */
[7867, 1042, 1692],
/* 3322 */
[7868, 3315, 1042],
/* 3323 */
[7869, 566, 3312],
/* 3324 */
428,
/* 3325 */
[7870, 3313, 1694],
/* 3326 */
[7872, 3318, 734],
/* 3327 */
[7898, 18, 3284, 1, 19, 3436, 3435, 3437, 1721, 568, 25],
/* 3328 */
[7899, 19, 1, 25, 1046, 300],
/* 3329 */
[7900, 1, 300],
/* 3330 */
[7901, 1, 300],
/* 3331 */
[7902, 1, 300],
/* 3332 */
[7904, 300, 3328, 3329, 3331, 3333, 3334, 3330],
/* 3333 */
[7905, 1, 300],
/* 3334 */
[7906, 1, 300],
/* 3335 */
[7907, 19, 25],
/* 3336 */
[7909, 19, 25],
/* 3337 */
[7911, 18, 1, 19, 1699, 1707, 25, 1046],
/* 3338 */
[7874, 39, 18, 1, 19, 383, 25],
/* 3339 */
[7877, 18, 19, 1, 25, 383],
/* 3340 */
2774,
/* 3341 */
[7878, 18, 1, 568],
/* 3342 */
[7879, 19, 25],
/* 3343 */
[7880, 18],
/* 3344 */
[7881, 18, 1, 19, 383, 25],
/* 3345 */
[7883, 18, 19, 3347, 25],
/* 3346 */
[7884, 18, 19, 25],
/* 3347 */
[7885, 19, 732, 25, 3346],
/* 3348 */
[7886, 18, 1, 19, 1049, 25],
/* 3349 */
[7887, 39, 18, 19, 25],
/* 3350 */
2784,
/* 3351 */
[7889, 18, 1, 19, 1701, 3349, 383, 25],
/* 3352 */
[7890, 18, 3350],
/* 3353 */
[7891, 18, 1, 19, 3356, 568, 383, 3368, 25],
/* 3354 */
[7894, 39, 1, 19, 1703, 25],
/* 3355 */
[7895, 18, 1033, 19, 1, 1702, 1048, 25, 1720],
/* 3356 */
[7806, 1, 3366, 1705, 3365, 1707, 3357],
/* 3357 */
[7807, 3359, 3358, 3362, 3360, 3364],
/* 3358 */
2682,
/* 3359 */
2683,
/* 3360 */
[7808, 3361],
/* 3361 */
2685,
/* 3362 */
[7809, 3363],
/* 3363 */
2685,
/* 3364 */
2688,
/* 3365 */
2692,
/* 3366 */
[7812, 3367],
/* 3367 */
2694,
/* 3368 */
[7912, 1, 182, 3376, 3375, 3373, 3371, 3374, 3372, 3370, 183, 1704, 735, 3377, 3378],
/* 3369 */
2810,
/* 3370 */
[7913, 1, 182],
/* 3371 */
[7914, 181, 18, 1, 183, 182, 569],
/* 3372 */
[7916, 1, 736, 182],
/* 3373 */
[7917, 18, 1, 183, 182, 569],
/* 3374 */
[7918, 39, 1, 182, 736],
/* 3375 */
[7919, 181, 18, 1, 183, 182, 444],
/* 3376 */
[7920, 1, 183, 182, 444],
/* 3377 */
[7921, 1, 183, 182],
/* 3378 */
[7922, 1, 3379, 183, 735, 182, 569, 444],
/* 3379 */
2820,
/* 3380 */
[7925, 39, 736, 735, 183],
/* 3381 */
[7928, 3382],
/* 3382 */
[7929, 3383],
/* 3383 */
2825,
/* 3384 */
[7896, 7773],
/* 3385 */
2791,
/* 3386 */
[7814, 3387],
/* 3387 */
2697,
/* 3388 */
2689,
/* 3389 */
[7810, 1706],
/* 3390 */
2827,
/* 3391 */
1578,
/* 3392 */
[7930, 3400, 3412, 739, 3432],
/* 3393 */
[7931, 3394],
/* 3394 */
[7932, 1709, 3403, 3422],
/* 3395 */
[7934, 3416, 738],
/* 3396 */
1580,
/* 3397 */
1581,
/* 3398 */
2836,
/* 3399 */
[7935, 445],
/* 3400 */
[7937, 3407, 3408, 737, 1724, 3442],
/* 3401 */
[7938, 3396, 1709, 1710, 1712, 3428, 3429, 3430, 255, 147],
/* 3402 */
1584,
/* 3403 */
[7939, 1712, 3418],
/* 3404 */
[7941, 1711, 1723],
/* 3405 */
[7946, 3423, 3424, 3425, 255, 3438],
/* 3406 */
[7947, 1715, 302],
/* 3407 */
[7948, 3406, 3426, 302],
/* 3408 */
[7949, 1713, 1715, 3410, 255, 1717, 1718, 3391, 302, 1719],
/* 3409 */
[7950, 1713, 1719],
/* 3410 */
1591,
/* 3411 */
984,
/* 3412 */
[7951, 1714, 3415, 3420],
/* 3413 */
2850,
/* 3414 */
2851,
/* 3415 */
[7953, 147],
/* 3416 */
[7954, 147],
/* 3417 */
[7955, 737, 739, 1708],
/* 3418 */
[7956, 1050, 384, 302],
/* 3419 */
[7957, 302],
/* 3420 */
[7958, 3395, 738],
/* 3421 */
[7959, 1708],
/* 3422 */
[7960, 737, 255],
/* 3423 */
[7961, 3397],
/* 3424 */
2861,
/* 3425 */
[7962, 445],
/* 3426 */
[7964, 1718, 3440],
/* 3427 */
2865,
/* 3428 */
2866,
/* 3429 */
[7966, 3414],
/* 3430 */
2868,
/* 3431 */
[7971, 1053, 255, 1052, 384, 1723],
/* 3432 */
2870,
/* 3433 */
[7978, 147],
/* 3434 */
[7979, 3433, 301],
/* 3435 */
[7980, 301],
/* 3436 */
[7981, 3404, 1053, 301],
/* 3437 */
[7982, 147],
/* 3438 */
[7984, 384, 301],
/* 3439 */
[7986, 1722, 3398, 3421],
/* 3440 */
[7990, 445, 302],
/* 3441 */
[7991, 3413, 445],
/* 3442 */
[7992, 1716, 3409, 1717],
/* 3443 */
2809,
/* 3444 */
[7817, 3455],
/* 3445 */
[7819, 3457],
/* 3446 */
[7820, 3458],
/* 3447 */
[7821, 3459],
/* 3448 */
[7822, 3460],
/* 3449 */
[7824, 3462],
/* 3450 */
[7826, 3463],
/* 3451 */
[7827, 3447, 3446, 3445],
/* 3452 */
[7828, 570, 3449],
/* 3453 */
2107,
/* 3454 */
[7829, 3488, 3487, 3479],
/* 3455 */
[7830, 3481],
/* 3456 */
[7831, 124],
/* 3457 */
[7832, 124],
/* 3458 */
[7833, 124, 3482],
/* 3459 */
[7834, 124, 3483],
/* 3460 */
[7835, 1064, 256],
/* 3461 */
[7836, 3484, 256],
/* 3462 */
[7837, 3485, 256],
/* 3463 */
[7838, 1064, 256],
/* 3464 */
[7839, 1064, 3486, 256],
/* 3465 */
2746,
/* 3466 */
2747,
/* 3467 */
[7841, 1056, 446],
/* 3468 */
[7844, 124],
/* 3469 */
[7848, 1056],
/* 3470 */
[7849, 1056],
/* 3471 */
[7850, 124, 1062, 1063, 1060, 446],
/* 3472 */
1559,
/* 3473 */
[7852, 124, 572],
/* 3474 */
[7855, 124, 1731, 1055, 1728],
/* 3475 */
[7858, 3476, 1057],
/* 3476 */
1564,
/* 3477 */
[7860, 1057],
/* 3478 */
[7862, 3467, 446, 741, 256],
/* 3479 */
[7863, 1055, 3478, 256],
/* 3480 */
[7864, 3466, 3472, 741, 572, 1732],
/* 3481 */
[7865, 571],
/* 3482 */
[7866, 572, 1061],
/* 3483 */
[7867, 1061, 1730],
/* 3484 */
[7868, 3477, 1061],
/* 3485 */
[7869, 571, 3474],
/* 3486 */
428,
/* 3487 */
[7870, 3475, 1732],
/* 3488 */
[7872, 3480, 741],
/* 3489 */
[7873, 1054, 33, 71, 3597, 3605, 447, 1745, 83],
/* 3490 */
[7874, 111, 82, 33, 71, 385, 83],
/* 3491 */
[7877, 82, 71, 33, 83, 385],
/* 3492 */
2774,
/* 3493 */
[7878, 82, 33, 447],
/* 3494 */
[7879, 71, 83],
/* 3495 */
[7880, 82],
/* 3496 */
[7881, 82, 33, 71, 385, 83],
/* 3497 */
[7883, 82, 71, 3499, 83],
/* 3498 */
[7884, 82, 71, 83],
/* 3499 */
[7885, 71, 1727, 83, 3498],
/* 3500 */
[7886, 82, 33, 71, 1068, 83],
/* 3501 */
[7887, 111, 82, 71, 83],
/* 3502 */
2784,
/* 3503 */
[7889, 82, 33, 71, 1738, 3501, 385, 83],
/* 3504 */
[7890, 82, 3502],
/* 3505 */
[7891, 82, 33, 71, 3508, 447, 385, 1745, 83],
/* 3506 */
[7894, 111, 33, 71, 1740, 83],
/* 3507 */
[7895, 82, 1726, 71, 33, 1739, 1066, 83, 1759],
/* 3508 */
[7806, 33, 3521, 1742, 3520, 3519, 3509],
/* 3509 */
[7807, 3511, 3510, 3514, 3512, 3516],
/* 3510 */
2682,
/* 3511 */
2683,
/* 3512 */
[7808, 3513],
/* 3513 */
2685,
/* 3514 */
[7809, 3515],
/* 3515 */
2685,
/* 3516 */
2688,
/* 3517 */
2689,
/* 3518 */
[7810, 1741],
/* 3519 */
[7811, 3517, 1741, 3518],
/* 3520 */
2692,
/* 3521 */
[7812, 3522],
/* 3522 */
2694,
/* 3523 */
[7928, 3524],
/* 3524 */
[7929, 3525],
/* 3525 */
2825,
/* 3526 */
[7896, 7774],
/* 3527 */
2791,
/* 3528 */
[7814, 3529],
/* 3529 */
2697,
/* 3530 */
[7898, 82, 3444, 33, 71, 3601, 3600, 3602, 1760, 447, 83],
/* 3531 */
[7899, 71, 33, 83, 1067, 303],
/* 3532 */
[7900, 33, 303],
/* 3533 */
[7901, 33, 303],
/* 3534 */
[7902, 33, 303],
/* 3535 */
[7904, 303, 3531, 3532, 3534, 3536, 3537, 3533],
/* 3536 */
[7905, 33, 303],
/* 3537 */
[7906, 33, 303],
/* 3538 */
[7907, 71, 83],
/* 3539 */
[7909, 71, 83],
/* 3540 */
[7911, 82, 33, 71, 1743, 3543, 83, 1067],
/* 3541 */
2689,
/* 3542 */
[7810, 1744],
/* 3543 */
[7811, 3541, 1744, 3542],
/* 3544 */
2809,
/* 3545 */
2810,
/* 3546 */
[7913, 33, 184],
/* 3547 */
[7914, 570, 82, 33, 185, 184, 573],
/* 3548 */
[7916, 33, 743, 184],
/* 3549 */
[7917, 82, 33, 185, 184, 573],
/* 3550 */
[7918, 111, 33, 184, 743],
/* 3551 */
[7919, 570, 82, 33, 185, 184, 448],
/* 3552 */
[7920, 33, 185, 184, 448],
/* 3553 */
[7921, 33, 185, 184],
/* 3554 */
[7922, 33, 3555, 185, 742, 184, 573, 448],
/* 3555 */
2820,
/* 3556 */
[7925, 111, 743, 742, 185],
/* 3557 */
2827,
/* 3558 */
[7930, 3566, 3576, 746, 3596],
/* 3559 */
[7931, 3560],
/* 3560 */
[7932, 1749, 3568, 3586],
/* 3561 */
[7934, 3580, 744],
/* 3562 */
1580,
/* 3563 */
1581,
/* 3564 */
2836,
/* 3565 */
[7935, 449],
/* 3566 */
[7937, 3572, 3573, 574, 1763, 3608],
/* 3567 */
1584,
/* 3568 */
[7939, 1753, 3582],
/* 3569 */
[7941, 1752, 1762],
/* 3570 */
[7946, 3587, 3588, 3589, 186, 3603],
/* 3571 */
[7947, 1755, 306],
/* 3572 */
[7948, 3571, 3590, 306],
/* 3573 */
[7949, 1069, 1755, 1757, 186, 1072, 1758, 1747, 306, 1073],
/* 3574 */
[7950, 1069, 1073],
/* 3575 */
984,
/* 3576 */
[7951, 1754, 3579, 3584],
/* 3577 */
2850,
/* 3578 */
2851,
/* 3579 */
[7953, 148],
/* 3580 */
[7954, 148],
/* 3581 */
[7955, 574, 746, 1748],
/* 3582 */
[7956, 1070, 304, 306],
/* 3583 */
[7957, 306],
/* 3584 */
[7958, 3561, 744],
/* 3585 */
[7959, 1748],
/* 3586 */
[7960, 574, 186],
/* 3587 */
[7961, 3563],
/* 3588 */
2861,
/* 3589 */
[7962, 449],
/* 3590 */
[7964, 1758, 3606],
/* 3591 */
2865,
/* 3592 */
2866,
/* 3593 */
[7966, 3578],
/* 3594 */
2868,
/* 3595 */
[7971, 747, 186, 745, 304, 1762],
/* 3596 */
2870,
/* 3597 */
[7975, 1751, 574],
/* 3598 */
[7978, 148],
/* 3599 */
[7979, 3598, 305],
/* 3600 */
[7980, 305],
/* 3601 */
[7981, 3569, 747, 305],
/* 3602 */
[7982, 148],
/* 3603 */
[7984, 304, 305],
/* 3604 */
[7986, 1761, 3564, 3585],
/* 3605 */
[7987, 1069, 1757, 747, 186, 745, 1072, 304, 1747, 1073],
/* 3606 */
[7990, 449, 306],
/* 3607 */
[7991, 3577, 449],
/* 3608 */
[7992, 1756, 3574, 1072],
/* 3609 */
[7816, 3610],
/* 3610 */
[7829, 3634, 3633, 3631],
/* 3611 */
2746,
/* 3612 */
2747,
/* 3613 */
[7840, 3620],
/* 3614 */
[7841, 1765, 575],
/* 3615 */
[7842, 3611],
/* 3616 */
[7843, 3618],
/* 3617 */
[7845, 1075, 1074, 3615],
/* 3618 */
543,
/* 3619 */
[7848, 1765],
/* 3620 */
701,
/* 3621 */
[7850, 749, 1769, 1770, 1076, 575],
/* 3622 */
1559,
/* 3623 */
1560,
/* 3624 */
[7854, 1076],
/* 3625 */
[7857, 1075],
/* 3626 */
[7858, 3627, 1766],
/* 3627 */
1564,
/* 3628 */
[7859, 3619, 1766],
/* 3629 */
975,
/* 3630 */
[7862, 3614, 575, 748, 1074],
/* 3631 */
[7863, 3613, 3630, 1074],
/* 3632 */
[7864, 3612, 3622, 748, 3628, 1768],
/* 3633 */
[7870, 3626, 1768],
/* 3634 */
[7872, 3632, 748],
/* 3635 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(22)["default"];

	var _interopRequireDefault = __webpack_require__(6)["default"];

	var _interopRequireWildcard = __webpack_require__(23)["default"];

	exports.__esModule = true;

	var _babelHelperBindifyDecorators = __webpack_require__(3636);

	var _babelHelperBindifyDecorators2 = _interopRequireDefault(_babelHelperBindifyDecorators);

	var _babelTypes = __webpack_require__(29);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type { NodePath } from "babel-traverse"*/
	exports["default"] = function (classPath) {
	  classPath.assertClass();

	  var memoisedExpressions = [];

	  function maybeMemoise(path) {
	    if (!path.node || path.isPure()) return;

	    var uid = classPath.scope.generateDeclaredUidIdentifier();
	    memoisedExpressions.push(t.assignmentExpression("=", uid, path.node));
	    path.replaceWith(uid);
	  }

	  function memoiseDecorators(paths /*: Array<NodePath>*/) {
	    if (!Array.isArray(paths) || !paths.length) return;

	    // ensure correct evaluation order of decorators
	    paths = paths.reverse();

	    // bind decorators if they're member expressions
	    _babelHelperBindifyDecorators2["default"](paths);

	    for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var path = _ref;

	      maybeMemoise(path);
	    }
	  }

	  maybeMemoise(classPath.get("superClass"));
	  memoiseDecorators(classPath.get("decorators"), true);

	  var methods /*: Array<NodePath>*/ = classPath.get("body.body");
	  for (var _iterator2 = methods, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	    var _ref2;

	    if (_isArray2) {
	      if (_i2 >= _iterator2.length) break;
	      _ref2 = _iterator2[_i2++];
	    } else {
	      _i2 = _iterator2.next();
	      if (_i2.done) break;
	      _ref2 = _i2.value;
	    }

	    var methodPath = _ref2;

	    if (methodPath.is("computed")) {
	      maybeMemoise(methodPath.get("key"));
	    }

	    if (methodPath.has("decorators")) {
	      memoiseDecorators(classPath.get("decorators"));
	    }
	  }

	  if (memoisedExpressions) {
	    classPath.insertBefore(memoisedExpressions.map(function (expr) {
	      return t.expressionStatement(expr);
	    }));
	  }
	};

	module.exports = exports["default"];

/***/ },
/* 3636 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(22)["default"];

	var _interopRequireWildcard = __webpack_require__(23)["default"];

	exports.__esModule = true;
	exports["default"] = bindifyDecorators;

	var _babelTypes = __webpack_require__(29);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type { NodePath } from "babel-traverse"*/
	function bindifyDecorators(decorators /*: Array<NodePath>*/) /*: Array<NodePath>*/ {
	  for (var _iterator = decorators, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var decoratorPath = _ref;

	    var decorator = decoratorPath.node;
	    var expression = decorator.expression;
	    if (!t.isMemberExpression(expression)) continue;

	    var temp = decoratorPath.scope.maybeGenerateMemoised(expression.object);
	    var ref = undefined;

	    var nodes = [];

	    if (temp) {
	      ref = temp;
	      nodes.push(t.assignmentExpression("=", temp, expression.object));
	    } else {
	      ref = expression.object;
	    }

	    nodes.push(t.callExpression(t.memberExpression(t.memberExpression(ref, expression.property, expression.computed), t.identifier("bind")), [ref]));

	    if (nodes.length === 1) {
	      decorator.expression = nodes[0];
	    } else {
	      decorator.expression = t.sequenceExpression(nodes);
	    }
	  }
	}

	module.exports = exports["default"];

/***/ },
/* 3637 */
[7817, 3646],
/* 3638 */
[7819, 3648],
/* 3639 */
[7820, 3649],
/* 3640 */
[7821, 3650],
/* 3641 */
[7824, 3653],
/* 3642 */
[7826, 3654],
/* 3643 */
[7827, 3640, 3639, 3638],
/* 3644 */
2107,
/* 3645 */
[7829, 3679, 3678, 3670],
/* 3646 */
[7830, 3672],
/* 3647 */
[7831, 125],
/* 3648 */
[7832, 125],
/* 3649 */
[7833, 125, 3673],
/* 3650 */
[7834, 125, 3674],
/* 3651 */
[7835, 1088, 258],
/* 3652 */
[7836, 3675, 258],
/* 3653 */
[7837, 3676, 258],
/* 3654 */
[7838, 1088, 258],
/* 3655 */
[7839, 1088, 3677, 258],
/* 3656 */
2746,
/* 3657 */
2747,
/* 3658 */
[7841, 1080, 450],
/* 3659 */
[7844, 125],
/* 3660 */
[7848, 1080],
/* 3661 */
[7849, 1080],
/* 3662 */
[7850, 125, 1086, 1087, 1084, 450],
/* 3663 */
1559,
/* 3664 */
[7852, 125, 577],
/* 3665 */
[7855, 125, 1777, 1079, 1774],
/* 3666 */
[7858, 3667, 1081],
/* 3667 */
1564,
/* 3668 */
[7860, 1081],
/* 3669 */
[7862, 3658, 450, 752, 258],
/* 3670 */
[7863, 1079, 3669, 258],
/* 3671 */
[7864, 3657, 3663, 752, 577, 1778],
/* 3672 */
[7865, 576],
/* 3673 */
[7866, 577, 1085],
/* 3674 */
[7867, 1085, 1776],
/* 3675 */
[7868, 3668, 1085],
/* 3676 */
[7869, 576, 3665],
/* 3677 */
428,
/* 3678 */
[7870, 3666, 1778],
/* 3679 */
[7872, 3671, 752],
/* 3680 */
[7873, 1078, 6, 23, 3759, 3764, 578, 1789, 29],
/* 3681 */
[7874, 63, 22, 6, 23, 386, 29],
/* 3682 */
[7877, 22, 23, 6, 29, 386],
/* 3683 */
2774,
/* 3684 */
[7878, 22, 6, 578],
/* 3685 */
[7879, 23, 29],
/* 3686 */
[7880, 22],
/* 3687 */
[7881, 22, 6, 23, 386, 29],
/* 3688 */
[7883, 22, 23, 3690, 29],
/* 3689 */
[7884, 22, 23, 29],
/* 3690 */
[7885, 23, 750, 29, 3689],
/* 3691 */
[7886, 22, 6, 23, 1091, 29],
/* 3692 */
[7887, 63, 22, 23, 29],
/* 3693 */
2784,
/* 3694 */
[7889, 22, 6, 23, 1784, 3692, 386, 29],
/* 3695 */
[7890, 22, 3693],
/* 3696 */
[7891, 22, 6, 23, 3699, 578, 386, 1789, 29],
/* 3697 */
[7894, 63, 6, 23, 1786, 29],
/* 3698 */
[7895, 22, 1077, 23, 6, 1785, 1090, 29, 3758],
/* 3699 */
[7806, 6, 3712, 1788, 3711, 3710, 3700],
/* 3700 */
[7807, 3702, 3701, 3705, 3703, 3707],
/* 3701 */
2682,
/* 3702 */
2683,
/* 3703 */
[7808, 3704],
/* 3704 */
2685,
/* 3705 */
[7809, 3706],
/* 3706 */
2685,
/* 3707 */
2688,
/* 3708 */
2689,
/* 3709 */
[7810, 1787],
/* 3710 */
[7811, 3708, 1787, 3709],
/* 3711 */
2692,
/* 3712 */
[7812, 3713],
/* 3713 */
2694,
/* 3714 */
[7928, 3715],
/* 3715 */
[7929, 3716],
/* 3716 */
2825,
/* 3717 */
[7896, 7775],
/* 3718 */
2791,
/* 3719 */
[7814, 3720],
/* 3720 */
2697,
/* 3721 */
2810,
/* 3722 */
[7913, 6, 187],
/* 3723 */
[7914, 257, 22, 6, 188, 187, 579],
/* 3724 */
[7916, 6, 754, 187],
/* 3725 */
[7917, 22, 6, 188, 187, 579],
/* 3726 */
[7918, 63, 6, 187, 754],
/* 3727 */
[7919, 257, 22, 6, 188, 187, 451],
/* 3728 */
[7920, 6, 188, 187, 451],
/* 3729 */
[7921, 6, 188, 187],
/* 3730 */
[7922, 6, 3731, 188, 753, 187, 579, 451],
/* 3731 */
2820,
/* 3732 */
[7925, 63, 754, 753, 188],
/* 3733 */
1578,
/* 3734 */
1580,
/* 3735 */
981,
/* 3736 */
2836,
/* 3737 */
[7935, 757],
/* 3738 */
1584,
/* 3739 */
[7940, 3749],
/* 3740 */
[7942, 3739, 757],
/* 3741 */
[7943, 1095],
/* 3742 */
[7944, 3751],
/* 3743 */
1590,
/* 3744 */
1591,
/* 3745 */
984,
/* 3746 */
2850,
/* 3747 */
2851,
/* 3748 */
[7955, 1092, 1094, 1791],
/* 3749 */
[7957, 1095],
/* 3750 */
[7959, 1791],
/* 3751 */
2865,
/* 3752 */
2866,
/* 3753 */
[7966, 3747],
/* 3754 */
2868,
/* 3755 */
[7969, 387, 1095],
/* 3756 */
[7971, 1096, 387, 755, 452, 3765],
/* 3757 */
[7973, 3745, 387],
/* 3758 */
[7974, 1793, 1092, 1094],
/* 3759 */
[7975, 1793, 1092],
/* 3760 */
[7978, 453],
/* 3761 */
[7979, 3760, 756],
/* 3762 */
[7983, 756],
/* 3763 */
[7986, 1796, 3736, 3750],
/* 3764 */
[7987, 3741, 3744, 1096, 387, 755, 3755, 452, 3733, 3757],
/* 3765 */
[7989, 1096, 387, 755, 452, 453],
/* 3766 */
[7991, 3746, 757],
/* 3767 */
1601,
/* 3768 */
[7898, 22, 3637, 6, 23, 3877, 3876, 3878, 1819, 580, 29],
/* 3769 */
[7899, 23, 6, 29, 1097, 307],
/* 3770 */
[7900, 6, 307],
/* 3771 */
[7901, 6, 307],
/* 3772 */
[7902, 6, 307],
/* 3773 */
[7904, 307, 3769, 3770, 3772, 3774, 3775, 3771],
/* 3774 */
[7905, 6, 307],
/* 3775 */
[7906, 6, 307],
/* 3776 */
[7907, 23, 29],
/* 3777 */
[7909, 23, 29],
/* 3778 */
[7911, 22, 6, 23, 1797, 1805, 29, 1097],
/* 3779 */
[7874, 63, 22, 6, 23, 388, 29],
/* 3780 */
[7877, 22, 23, 6, 29, 388],
/* 3781 */
2774,
/* 3782 */
[7878, 22, 6, 580],
/* 3783 */
[7879, 23, 29],
/* 3784 */
[7880, 22],
/* 3785 */
[7881, 22, 6, 23, 388, 29],
/* 3786 */
[7883, 22, 23, 3788, 29],
/* 3787 */
[7884, 22, 23, 29],
/* 3788 */
[7885, 23, 750, 29, 3787],
/* 3789 */
[7886, 22, 6, 23, 1100, 29],
/* 3790 */
[7887, 63, 22, 23, 29],
/* 3791 */
2784,
/* 3792 */
[7889, 22, 6, 23, 1799, 3790, 388, 29],
/* 3793 */
[7890, 22, 3791],
/* 3794 */
[7891, 22, 6, 23, 3797, 580, 388, 3809, 29],
/* 3795 */
[7894, 63, 6, 23, 1801, 29],
/* 3796 */
[7895, 22, 1077, 23, 6, 1800, 1099, 29, 1818],
/* 3797 */
[7806, 6, 3807, 1803, 3806, 1805, 3798],
/* 3798 */
[7807, 3800, 3799, 3803, 3801, 3805],
/* 3799 */
2682,
/* 3800 */
2683,
/* 3801 */
[7808, 3802],
/* 3802 */
2685,
/* 3803 */
[7809, 3804],
/* 3804 */
2685,
/* 3805 */
2688,
/* 3806 */
2692,
/* 3807 */
[7812, 3808],
/* 3808 */
2694,
/* 3809 */
[7912, 6, 189, 3817, 3816, 3814, 3812, 3815, 3813, 3811, 190, 1802, 758, 3818, 3819],
/* 3810 */
2810,
/* 3811 */
[7913, 6, 189],
/* 3812 */
[7914, 257, 22, 6, 190, 189, 581],
/* 3813 */
[7916, 6, 759, 189],
/* 3814 */
[7917, 22, 6, 190, 189, 581],
/* 3815 */
[7918, 63, 6, 189, 759],
/* 3816 */
[7919, 257, 22, 6, 190, 189, 454],
/* 3817 */
[7920, 6, 190, 189, 454],
/* 3818 */
[7921, 6, 190, 189],
/* 3819 */
[7922, 6, 3820, 190, 758, 189, 581, 454],
/* 3820 */
2820,
/* 3821 */
[7925, 63, 759, 758, 190],
/* 3822 */
[7928, 3823],
/* 3823 */
[7929, 3824],
/* 3824 */
2825,
/* 3825 */
[7896, 7776],
/* 3826 */
2791,
/* 3827 */
[7814, 3828],
/* 3828 */
2697,
/* 3829 */
2689,
/* 3830 */
[7810, 1804],
/* 3831 */
2827,
/* 3832 */
1578,
/* 3833 */
[7930, 3841, 3853, 762, 3873],
/* 3834 */
[7931, 3835],
/* 3835 */
[7932, 1807, 3844, 3863],
/* 3836 */
[7934, 3857, 761],
/* 3837 */
1580,
/* 3838 */
1581,
/* 3839 */
2836,
/* 3840 */
[7935, 455],
/* 3841 */
[7937, 3848, 3849, 760, 1822, 3883],
/* 3842 */
[7938, 3837, 1807, 1808, 1810, 3869, 3870, 3871, 259, 149],
/* 3843 */
1584,
/* 3844 */
[7939, 1810, 3859],
/* 3845 */
[7941, 1809, 1821],
/* 3846 */
[7946, 3864, 3865, 3866, 259, 3879],
/* 3847 */
[7947, 1813, 309],
/* 3848 */
[7948, 3847, 3867, 309],
/* 3849 */
[7949, 1811, 1813, 3851, 259, 1815, 1816, 3832, 309, 1817],
/* 3850 */
[7950, 1811, 1817],
/* 3851 */
1591,
/* 3852 */
984,
/* 3853 */
[7951, 1812, 3856, 3861],
/* 3854 */
2850,
/* 3855 */
2851,
/* 3856 */
[7953, 149],
/* 3857 */
[7954, 149],
/* 3858 */
[7955, 760, 762, 1806],
/* 3859 */
[7956, 1101, 389, 309],
/* 3860 */
[7957, 309],
/* 3861 */
[7958, 3836, 761],
/* 3862 */
[7959, 1806],
/* 3863 */
[7960, 760, 259],
/* 3864 */
[7961, 3838],
/* 3865 */
2861,
/* 3866 */
[7962, 455],
/* 3867 */
[7964, 1816, 3881],
/* 3868 */
2865,
/* 3869 */
2866,
/* 3870 */
[7966, 3855],
/* 3871 */
2868,
/* 3872 */
[7971, 1104, 259, 1103, 389, 1821],
/* 3873 */
2870,
/* 3874 */
[7978, 149],
/* 3875 */
[7979, 3874, 308],
/* 3876 */
[7980, 308],
/* 3877 */
[7981, 3845, 1104, 308],
/* 3878 */
[7982, 149],
/* 3879 */
[7984, 389, 308],
/* 3880 */
[7986, 1820, 3839, 3862],
/* 3881 */
[7990, 455, 309],
/* 3882 */
[7991, 3854, 455],
/* 3883 */
[7992, 1814, 3850, 1815],
/* 3884 */
2809,
/* 3885 */
[7816, 3886],
/* 3886 */
[7829, 3910, 3909, 3907],
/* 3887 */
2746,
/* 3888 */
2747,
/* 3889 */
[7840, 3896],
/* 3890 */
[7841, 1824, 582],
/* 3891 */
[7842, 3887],
/* 3892 */
[7843, 3894],
/* 3893 */
[7845, 1108, 1107, 3891],
/* 3894 */
543,
/* 3895 */
[7848, 1824],
/* 3896 */
701,
/* 3897 */
[7850, 764, 1828, 1829, 1109, 582],
/* 3898 */
1559,
/* 3899 */
1560,
/* 3900 */
[7854, 1109],
/* 3901 */
[7857, 1108],
/* 3902 */
[7858, 3903, 1825],
/* 3903 */
1564,
/* 3904 */
[7859, 3895, 1825],
/* 3905 */
975,
/* 3906 */
[7862, 3890, 582, 763, 1107],
/* 3907 */
[7863, 3889, 3906, 1107],
/* 3908 */
[7864, 3888, 3898, 763, 3904, 1827],
/* 3909 */
[7870, 3902, 1827],
/* 3910 */
[7872, 3908, 763],
/* 3911 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(58)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(72);

	var t = _interopRequireWildcard(_babelTypes);

	function getTDZStatus(refPath, bindingPath) {
	  var executionStatus = bindingPath._guessExecutionStatusRelativeTo(refPath);

	  if (executionStatus === "before") {
	    return "inside";
	  } else if (executionStatus === "after") {
	    return "outside";
	  } else {
	    return "maybe";
	  }
	}

	function buildTDZAssert(node, file) {
	  return t.callExpression(file.addHelper("temporalRef"), [node, t.stringLiteral(node.name), file.addHelper("temporalUndefined")]);
	}

	function isReference(node, scope, state) {
	  var declared = state.letReferences[node.name];
	  if (!declared) return false;

	  // declared node is different in this scope
	  return scope.getBindingIdentifier(node.name) === declared;
	}

	var visitor = {
	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    if (!this.file.opts.tdz) return;

	    var node = path.node;
	    var parent = path.parent;
	    var scope = path.scope;

	    if (path.parentPath.isFor({ left: node })) return;
	    if (!isReference(node, scope, state)) return;

	    var bindingPath = scope.getBinding(node.name).path;

	    var status = getTDZStatus(path, bindingPath);
	    if (status === "inside") return;

	    if (status === "maybe") {
	      var assert = buildTDZAssert(node, state.file);

	      // add tdzThis to parent variable declarator so it's exploded
	      bindingPath.parent._tdzThis = true;

	      path.skip();

	      if (path.parentPath.isUpdateExpression()) {
	        if (parent._ignoreBlockScopingTDZ) return;
	        path.parentPath.replaceWith(t.sequenceExpression([assert, parent]));
	      } else {
	        path.replaceWith(assert);
	      }
	    } else if (status === "outside") {
	      path.replaceWith(t.throwStatement(t.inherits(t.newExpression(t.identifier("ReferenceError"), [t.stringLiteral(node.name + " is not defined - temporal dead zone")]), node)));
	    }
	  },

	  AssignmentExpression: {
	    exit: function exit(path, state) {
	      if (!this.file.opts.tdz) return;

	      var node = path.node;

	      if (node._ignoreBlockScopingTDZ) return;

	      var nodes = [];
	      var ids = path.getBindingIdentifiers();

	      for (var _name in ids) {
	        var id = ids[_name];

	        if (isReference(id, path.scope, state)) {
	          nodes.push(buildTDZAssert(id, state.file));
	        }
	      }

	      if (nodes.length) {
	        node._ignoreBlockScopingTDZ = true;
	        nodes.push(node);
	        path.replaceWithMultiple(nodes.map(t.expressionStatement));
	      }
	    }
	  }
	};
	exports.visitor = visitor;

/***/ },
/* 3912 */
[7817, 3922],
/* 3913 */
[7819, 3924],
/* 3914 */
[7820, 3925],
/* 3915 */
[7821, 3926],
/* 3916 */
[7822, 3927],
/* 3917 */
[7824, 3929],
/* 3918 */
[7826, 3930],
/* 3919 */
[7827, 3915, 3914, 3913],
/* 3920 */
2107,
/* 3921 */
[7829, 3955, 3954, 3946],
/* 3922 */
[7830, 3948],
/* 3923 */
[7831, 126],
/* 3924 */
[7832, 126],
/* 3925 */
[7833, 126, 3949],
/* 3926 */
[7834, 126, 3950],
/* 3927 */
[7835, 1121, 260],
/* 3928 */
[7836, 3951, 260],
/* 3929 */
[7837, 3952, 260],
/* 3930 */
[7838, 1121, 260],
/* 3931 */
[7839, 1121, 3953, 260],
/* 3932 */
2746,
/* 3933 */
2747,
/* 3934 */
[7841, 1113, 456],
/* 3935 */
[7844, 126],
/* 3936 */
[7848, 1113],
/* 3937 */
[7849, 1113],
/* 3938 */
[7850, 126, 1119, 1120, 1117, 456],
/* 3939 */
1559,
/* 3940 */
[7852, 126, 584],
/* 3941 */
[7855, 126, 1836, 1112, 1833],
/* 3942 */
[7858, 3943, 1114],
/* 3943 */
1564,
/* 3944 */
[7860, 1114],
/* 3945 */
[7862, 3934, 456, 766, 260],
/* 3946 */
[7863, 1112, 3945, 260],
/* 3947 */
[7864, 3933, 3939, 766, 584, 1837],
/* 3948 */
[7865, 583],
/* 3949 */
[7866, 584, 1118],
/* 3950 */
[7867, 1118, 1835],
/* 3951 */
[7868, 3944, 1118],
/* 3952 */
[7869, 583, 3941],
/* 3953 */
428,
/* 3954 */
[7870, 3942, 1837],
/* 3955 */
[7872, 3947, 766],
/* 3956 */
[7873, 1111, 20, 58, 4078, 4087, 390, 3957, 72],
/* 3957 */
[7912, 20, 191, 3965, 3964, 3962, 3960, 3963, 3961, 3959, 192, 1842, 767, 3966, 3967],
/* 3958 */
2810,
/* 3959 */
[7913, 20, 191],
/* 3960 */
[7914, 310, 64, 20, 192, 191, 585],
/* 3961 */
[7916, 20, 768, 191],
/* 3962 */
[7917, 64, 20, 192, 191, 585],
/* 3963 */
[7918, 105, 20, 191, 768],
/* 3964 */
[7919, 310, 64, 20, 192, 191, 457],
/* 3965 */
[7920, 20, 192, 191, 457],
/* 3966 */
[7921, 20, 192, 191],
/* 3967 */
[7922, 20, 3968, 192, 767, 191, 585, 457],
/* 3968 */
2820,
/* 3969 */
[7925, 105, 768, 767, 192],
/* 3970 */
[7874, 105, 64, 20, 58, 391, 72],
/* 3971 */
[7877, 64, 58, 20, 72, 391],
/* 3972 */
2774,
/* 3973 */
[7878, 64, 20, 390],
/* 3974 */
[7879, 58, 72],
/* 3975 */
[7880, 64],
/* 3976 */
[7881, 64, 20, 58, 391, 72],
/* 3977 */
[7883, 64, 58, 3979, 72],
/* 3978 */
[7884, 64, 58, 72],
/* 3979 */
[7885, 58, 1832, 72, 3978],
/* 3980 */
[7886, 64, 20, 58, 1125, 72],
/* 3981 */
[7887, 105, 64, 58, 72],
/* 3982 */
2784,
/* 3983 */
[7889, 64, 20, 58, 1844, 3981, 391, 72],
/* 3984 */
[7890, 64, 3982],
/* 3985 */
[7891, 64, 20, 58, 3988, 390, 391, 4003, 72],
/* 3986 */
[7894, 105, 20, 58, 1846, 72],
/* 3987 */
[7895, 64, 1830, 58, 20, 1845, 1123, 72, 1864],
/* 3988 */
[7806, 20, 4001, 1849, 4000, 3999, 3989],
/* 3989 */
[7807, 3991, 3990, 3994, 3992, 3996],
/* 3990 */
2682,
/* 3991 */
2683,
/* 3992 */
[7808, 3993],
/* 3993 */
2685,
/* 3994 */
[7809, 3995],
/* 3995 */
2685,
/* 3996 */
2688,
/* 3997 */
2689,
/* 3998 */
[7810, 1847],
/* 3999 */
[7811, 3997, 1847, 3998],
/* 4000 */
2692,
/* 4001 */
[7812, 4002],
/* 4002 */
2694,
/* 4003 */
[7912, 20, 193, 4011, 4010, 4008, 4006, 4009, 4007, 4005, 194, 1848, 769, 4012, 4013],
/* 4004 */
2810,
/* 4005 */
[7913, 20, 193],
/* 4006 */
[7914, 310, 64, 20, 194, 193, 586],
/* 4007 */
[7916, 20, 770, 193],
/* 4008 */
[7917, 64, 20, 194, 193, 586],
/* 4009 */
[7918, 105, 20, 193, 770],
/* 4010 */
[7919, 310, 64, 20, 194, 193, 458],
/* 4011 */
[7920, 20, 194, 193, 458],
/* 4012 */
[7921, 20, 194, 193],
/* 4013 */
[7922, 20, 4014, 194, 769, 193, 586, 458],
/* 4014 */
2820,
/* 4015 */
[7925, 105, 770, 769, 194],
/* 4016 */
[7928, 4017],
/* 4017 */
[7929, 4018],
/* 4018 */
2825,
/* 4019 */
[7896, 7777],
/* 4020 */
2791,
/* 4021 */
[7814, 4022],
/* 4022 */
2697,
/* 4023 */
[7898, 64, 3912, 20, 58, 4082, 4081, 4083, 1865, 390, 72],
/* 4024 */
[7899, 58, 20, 72, 1124, 311],
/* 4025 */
[7900, 20, 311],
/* 4026 */
[7901, 20, 311],
/* 4027 */
[7902, 20, 311],
/* 4028 */
[7904, 311, 4024, 4025, 4027, 4029, 4030, 4026],
/* 4029 */
[7905, 20, 311],
/* 4030 */
[7906, 20, 311],
/* 4031 */
[7907, 58, 72],
/* 4032 */
[7909, 58, 72],
/* 4033 */
[7911, 64, 20, 58, 1850, 4036, 72, 1124],
/* 4034 */
2689,
/* 4035 */
[7810, 1851],
/* 4036 */
[7811, 4034, 1851, 4035],
/* 4037 */
2809,
/* 4038 */
2827,
/* 4039 */
[7930, 4047, 4057, 773, 4077],
/* 4040 */
[7931, 4041],
/* 4041 */
[7932, 1854, 4049, 4067],
/* 4042 */
[7934, 4061, 771],
/* 4043 */
1580,
/* 4044 */
1581,
/* 4045 */
2836,
/* 4046 */
[7935, 459],
/* 4047 */
[7937, 4053, 4054, 587, 1868, 4089],
/* 4048 */
1584,
/* 4049 */
[7939, 1858, 4063],
/* 4050 */
[7941, 1857, 1866],
/* 4051 */
[7946, 4068, 4069, 4070, 195, 4084],
/* 4052 */
[7947, 1860, 314],
/* 4053 */
[7948, 4052, 4071, 314],
/* 4054 */
[7949, 1126, 1860, 1862, 195, 1129, 1863, 1852, 314, 1130],
/* 4055 */
[7950, 1126, 1130],
/* 4056 */
984,
/* 4057 */
[7951, 1859, 4060, 4065],
/* 4058 */
2850,
/* 4059 */
2851,
/* 4060 */
[7953, 150],
/* 4061 */
[7954, 150],
/* 4062 */
[7955, 587, 773, 1853],
/* 4063 */
[7956, 1127, 312, 314],
/* 4064 */
[7957, 314],
/* 4065 */
[7958, 4042, 771],
/* 4066 */
[7959, 1853],
/* 4067 */
[7960, 587, 195],
/* 4068 */
[7961, 4044],
/* 4069 */
2861,
/* 4070 */
[7962, 459],
/* 4071 */
[7964, 1863, 4088],
/* 4072 */
2865,
/* 4073 */
2866,
/* 4074 */
[7966, 4059],
/* 4075 */
2868,
/* 4076 */
[7971, 774, 195, 772, 312, 1866],
/* 4077 */
2870,
/* 4078 */
[7975, 1856, 587],
/* 4079 */
[7978, 150],
/* 4080 */
[7979, 4079, 313],
/* 4081 */
[7980, 313],
/* 4082 */
[7981, 4050, 774, 313],
/* 4083 */
[7982, 150],
/* 4084 */
[7984, 312, 313],
/* 4085 */
[7986, 1131, 4045, 4066],
/* 4086 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1131);


/***/ },
/* 4087 */
[7987, 1126, 1862, 774, 195, 772, 1129, 312, 1852, 1130],
/* 4088 */
[7990, 459, 314],
/* 4089 */
[7992, 1861, 4055, 1129],
/* 4090 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _inherits = __webpack_require__(1137)["default"];

	var _classCallCheck = __webpack_require__(96)["default"];

	var _interopRequireDefault = __webpack_require__(10)["default"];

	var _interopRequireWildcard = __webpack_require__(45)["default"];

	exports.__esModule = true;

	var _babelHelperFunctionName = __webpack_require__(1136);

	var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

	var _vanilla = __webpack_require__(1869);

	var _vanilla2 = _interopRequireDefault(_vanilla);

	var _babelTypes = __webpack_require__(51);

	var t = _interopRequireWildcard(_babelTypes);

	var LooseClassTransformer = (function (_VanillaTransformer) {
	  _inherits(LooseClassTransformer, _VanillaTransformer);

	  function LooseClassTransformer() {
	    _classCallCheck(this, LooseClassTransformer);

	    _VanillaTransformer.apply(this, arguments);
	    this.isLoose = true;
	  }

	  LooseClassTransformer.prototype._processMethod = function _processMethod(node, scope) {
	    if (!node.decorators) {
	      // use assignments instead of define properties for loose classes

	      var classRef = this.classRef;
	      if (!node["static"]) classRef = t.memberExpression(classRef, t.identifier("prototype"));
	      var methodName = t.memberExpression(classRef, node.key, node.computed || t.isLiteral(node.key));

	      var func = t.functionExpression(null, node.params, node.body);
	      var key = t.toComputedKey(node, node.key);
	      if (t.isStringLiteral(key)) {
	        func = _babelHelperFunctionName2["default"]({
	          node: func,
	          id: key,
	          scope: scope
	        });
	      }

	      var expr = t.expressionStatement(t.assignmentExpression("=", methodName, func));
	      t.inheritsComments(expr, node);
	      this.body.push(expr);
	      return true;
	    }
	  };

	  return LooseClassTransformer;
	})(_vanilla2["default"]);

	exports["default"] = LooseClassTransformer;
	module.exports = exports["default"];

/***/ },
/* 4091 */
[7996, 10, 45, 1136, 4093, 4112, 51],
/* 4092 */
1578,
/* 4093 */
[7931, 4094],
/* 4094 */
[7932, 4095, 4096, 4106],
/* 4095 */
981,
/* 4096 */
[7939, 4098, 4104],
/* 4097 */
[7940, 4105],
/* 4098 */
[7942, 4097, 4113],
/* 4099 */
[7943, 775],
/* 4100 */
1590,
/* 4101 */
1591,
/* 4102 */
984,
/* 4103 */
[7952, 4115],
/* 4104 */
[7956, 1870, 460, 775],
/* 4105 */
[7957, 775],
/* 4106 */
[7960, 4103, 461],
/* 4107 */
[7969, 461, 775],
/* 4108 */
[7971, 1135, 461, 1133, 460, 4114],
/* 4109 */
[7973, 4102, 461],
/* 4110 */
[7978, 776],
/* 4111 */
[7979, 4110, 1134],
/* 4112 */
[7987, 4099, 4101, 1135, 461, 1133, 4107, 460, 4092, 4109],
/* 4113 */
[7988, 1871, 1872, 776, 4108],
/* 4114 */
[7989, 1135, 461, 1133, 460, 776],
/* 4115 */
1601,
/* 4116 */
[7995, 45, 51],
/* 4117 */
[7998, 96, 778, 10, 45, 1873, 777, 51],
/* 4118 */
[7817, 4128],
/* 4119 */
[7819, 4130],
/* 4120 */
[7820, 4131],
/* 4121 */
[7821, 4132],
/* 4122 */
[7822, 4133],
/* 4123 */
[7824, 4135],
/* 4124 */
[7826, 4136],
/* 4125 */
[7827, 4121, 4120, 4119],
/* 4126 */
2107,
/* 4127 */
[7829, 4161, 4160, 4152],
/* 4128 */
[7830, 4154],
/* 4129 */
[7831, 127],
/* 4130 */
[7832, 127],
/* 4131 */
[7833, 127, 4155],
/* 4132 */
[7834, 127, 4156],
/* 4133 */
[7835, 1147, 261],
/* 4134 */
[7836, 4157, 261],
/* 4135 */
[7837, 4158, 261],
/* 4136 */
[7838, 1147, 261],
/* 4137 */
[7839, 1147, 4159, 261],
/* 4138 */
2746,
/* 4139 */
2747,
/* 4140 */
[7841, 1139, 462],
/* 4141 */
[7844, 127],
/* 4142 */
[7848, 1139],
/* 4143 */
[7849, 1139],
/* 4144 */
[7850, 127, 1145, 1146, 1143, 462],
/* 4145 */
1559,
/* 4146 */
[7852, 127, 589],
/* 4147 */
[7855, 127, 1879, 1138, 1876],
/* 4148 */
[7858, 4149, 1140],
/* 4149 */
1564,
/* 4150 */
[7860, 1140],
/* 4151 */
[7862, 4140, 462, 780, 261],
/* 4152 */
[7863, 1138, 4151, 261],
/* 4153 */
[7864, 4139, 4145, 780, 589, 1880],
/* 4154 */
[7865, 588],
/* 4155 */
[7866, 589, 1144],
/* 4156 */
[7867, 1144, 1878],
/* 4157 */
[7868, 4150, 1144],
/* 4158 */
[7869, 588, 4147],
/* 4159 */
428,
/* 4160 */
[7870, 4148, 1880],
/* 4161 */
[7872, 4153, 780],
/* 4162 */
[7912, 10, 196, 4170, 4169, 4167, 4165, 4168, 4166, 4164, 197, 1886, 781, 4171, 4172],
/* 4163 */
2810,
/* 4164 */
[7913, 10, 196],
/* 4165 */
[7914, 392, 59, 10, 197, 196, 590],
/* 4166 */
[7916, 10, 782, 196],
/* 4167 */
[7917, 59, 10, 197, 196, 590],
/* 4168 */
[7918, 96, 10, 196, 782],
/* 4169 */
[7919, 392, 59, 10, 197, 196, 463],
/* 4170 */
[7920, 10, 197, 196, 463],
/* 4171 */
[7921, 10, 197, 196],
/* 4172 */
[7922, 10, 4173, 197, 781, 196, 590, 463],
/* 4173 */
2820,
/* 4174 */
[7925, 96, 782, 781, 197],
/* 4175 */
1578,
/* 4176 */
1580,
/* 4177 */
981,
/* 4178 */
[7936, 4180, 1889],
/* 4179 */
[7938, 4176, 4177, 4178, 4182, 4191, 4192, 4193, 464, 592],
/* 4180 */
1584,
/* 4181 */
[7940, 4189],
/* 4182 */
[7942, 4181, 1889],
/* 4183 */
[7943, 1150],
/* 4184 */
1590,
/* 4185 */
1591,
/* 4186 */
984,
/* 4187 */
[7952, 4202],
/* 4188 */
2851,
/* 4189 */
[7957, 1150],
/* 4190 */
[7963, 4184],
/* 4191 */
2866,
/* 4192 */
[7966, 4188],
/* 4193 */
2868,
/* 4194 */
[7969, 464, 1150],
/* 4195 */
[7971, 1151, 464, 1148, 591, 4201],
/* 4196 */
[7973, 4186, 464],
/* 4197 */
[7975, 4179, 4187],
/* 4198 */
[7978, 592],
/* 4199 */
[7979, 4198, 1149],
/* 4200 */
[7987, 4183, 4185, 1151, 464, 1148, 4194, 591, 4175, 4196],
/* 4201 */
[7989, 1151, 464, 1148, 591, 592],
/* 4202 */
1601,
/* 4203 */
[7874, 96, 59, 10, 45, 394, 51],
/* 4204 */
[7877, 59, 45, 10, 51, 394],
/* 4205 */
2774,
/* 4206 */
[7878, 59, 10, 393],
/* 4207 */
[7879, 45, 51],
/* 4208 */
[7880, 59],
/* 4209 */
[7881, 59, 10, 45, 394, 51],
/* 4210 */
[7883, 59, 45, 4212, 51],
/* 4211 */
[7884, 59, 45, 51],
/* 4212 */
[7885, 45, 1875, 51, 4211],
/* 4213 */
[7886, 59, 10, 45, 1153, 51],
/* 4214 */
[7887, 96, 59, 45, 51],
/* 4215 */
2784,
/* 4216 */
[7889, 59, 10, 45, 1891, 4214, 394, 51],
/* 4217 */
[7890, 59, 4215],
/* 4218 */
[7891, 59, 10, 45, 4221, 393, 394, 4236, 51],
/* 4219 */
[7894, 96, 10, 45, 1893, 51],
/* 4220 */
[7895, 59, 1874, 45, 10, 1892, 777, 51, 4275],
/* 4221 */
[7806, 10, 4234, 1903, 4233, 4232, 4222],
/* 4222 */
[7807, 4224, 4223, 4227, 4225, 4229],
/* 4223 */
2682,
/* 4224 */
2683,
/* 4225 */
[7808, 4226],
/* 4226 */
2685,
/* 4227 */
[7809, 4228],
/* 4228 */
2685,
/* 4229 */
2688,
/* 4230 */
2689,
/* 4231 */
[7810, 1894],
/* 4232 */
[7811, 4230, 1894, 4231],
/* 4233 */
2692,
/* 4234 */
[7812, 4235],
/* 4235 */
2694,
/* 4236 */
[7912, 10, 198, 4244, 4243, 4241, 4239, 4242, 4240, 4238, 199, 1895, 783, 4245, 4246],
/* 4237 */
2810,
/* 4238 */
[7913, 10, 198],
/* 4239 */
[7914, 392, 59, 10, 199, 198, 593],
/* 4240 */
[7916, 10, 784, 198],
/* 4241 */
[7917, 59, 10, 199, 198, 593],
/* 4242 */
[7918, 96, 10, 198, 784],
/* 4243 */
[7919, 392, 59, 10, 199, 198, 465],
/* 4244 */
[7920, 10, 199, 198, 465],
/* 4245 */
[7921, 10, 199, 198],
/* 4246 */
[7922, 10, 4247, 199, 783, 198, 593, 465],
/* 4247 */
2820,
/* 4248 */
[7925, 96, 784, 783, 199],
/* 4249 */
[7928, 4250],
/* 4250 */
[7929, 4251],
/* 4251 */
2825,
/* 4252 */
[7896, 7778],
/* 4253 */
2791,
/* 4254 */
1580,
/* 4255 */
981,
/* 4256 */
2836,
/* 4257 */
[7935, 787],
/* 4258 */
[7938, 4254, 4255, 1897, 4261, 4270, 4271, 4272, 786, 466],
/* 4259 */
1584,
/* 4260 */
[7940, 4267],
/* 4261 */
[7942, 4260, 787],
/* 4262 */
[7944, 4269],
/* 4263 */
1590,
/* 4264 */
2850,
/* 4265 */
2851,
/* 4266 */
[7955, 1898, 1156, 1896],
/* 4267 */
[7957, 4274],
/* 4268 */
[7959, 1896],
/* 4269 */
2865,
/* 4270 */
2866,
/* 4271 */
[7966, 4265],
/* 4272 */
2868,
/* 4273 */
[7971, 1901, 786, 1155, 594, 4280],
/* 4274 */
[7972, 466],
/* 4275 */
[7974, 4258, 1898, 1156],
/* 4276 */
[7978, 466],
/* 4277 */
[7979, 4276, 785],
/* 4278 */
[7983, 785],
/* 4279 */
[7986, 1902, 4256, 4268],
/* 4280 */
[7989, 1901, 786, 1155, 594, 466],
/* 4281 */
[7991, 4264, 787],
/* 4282 */
1601,
/* 4283 */
[7814, 4284],
/* 4284 */
2697,
/* 4285 */
[7898, 59, 4118, 10, 45, 4343, 4342, 4344, 4345, 393, 51],
/* 4286 */
[7899, 45, 10, 51, 1157, 315],
/* 4287 */
[7900, 10, 315],
/* 4288 */
[7901, 10, 315],
/* 4289 */
[7902, 10, 315],
/* 4290 */
[7904, 315, 4286, 4287, 4289, 4291, 4292, 4288],
/* 4291 */
[7905, 10, 315],
/* 4292 */
[7906, 10, 315],
/* 4293 */
[7907, 45, 51],
/* 4294 */
[7909, 45, 51],
/* 4295 */
[7911, 59, 10, 45, 1904, 4298, 51, 1157],
/* 4296 */
2689,
/* 4297 */
[7810, 1905],
/* 4298 */
[7811, 4296, 1905, 4297],
/* 4299 */
2827,
/* 4300 */
1578,
/* 4301 */
[7930, 4308, 4321, 1913, 4338],
/* 4302 */
[7931, 4303],
/* 4303 */
[7932, 1906, 4311, 4328],
/* 4304 */
[7934, 4324, 788],
/* 4305 */
1580,
/* 4306 */
1581,
/* 4307 */
[7936, 4310, 789],
/* 4308 */
[7937, 4316, 4317, 1158, 1918, 4348],
/* 4309 */
[7938, 4305, 1906, 4307, 1908, 4334, 4335, 4336, 318, 151],
/* 4310 */
1584,
/* 4311 */
[7939, 1908, 4325],
/* 4312 */
[7941, 1907, 1917],
/* 4313 */
[7944, 4333],
/* 4314 */
[7946, 4329, 4330, 4331, 318, 4346],
/* 4315 */
[7947, 1910, 317],
/* 4316 */
[7948, 4315, 4332, 317],
/* 4317 */
[7949, 1909, 1910, 4319, 318, 1914, 1915, 4300, 317, 1916],
/* 4318 */
[7950, 1909, 1916],
/* 4319 */
1591,
/* 4320 */
984,
/* 4321 */
[7951, 4313, 4323, 4327],
/* 4322 */
2851,
/* 4323 */
[7953, 151],
/* 4324 */
[7954, 151],
/* 4325 */
[7956, 1912, 467, 317],
/* 4326 */
[7957, 317],
/* 4327 */
[7958, 4304, 788],
/* 4328 */
[7960, 1158, 318],
/* 4329 */
[7961, 4306],
/* 4330 */
2861,
/* 4331 */
[7962, 789],
/* 4332 */
[7964, 1915, 4347],
/* 4333 */
2865,
/* 4334 */
2866,
/* 4335 */
[7966, 4322],
/* 4336 */
2868,
/* 4337 */
[7971, 1161, 318, 1160, 467, 1917],
/* 4338 */
2870,
/* 4339 */
[7974, 4309, 1158, 1913],
/* 4340 */
[7978, 151],
/* 4341 */
[7979, 4340, 316],
/* 4342 */
[7980, 316],
/* 4343 */
[7981, 4312, 1161, 316],
/* 4344 */
[7982, 151],
/* 4345 */
[7983, 316],
/* 4346 */
[7984, 467, 316],
/* 4347 */
[7990, 789, 317],
/* 4348 */
[7992, 1911, 4318, 1914],
/* 4349 */
2809,
/* 4350 */
[7816, 4351],
/* 4351 */
[7829, 4375, 4374, 4372],
/* 4352 */
2746,
/* 4353 */
2747,
/* 4354 */
[7840, 4361],
/* 4355 */
[7841, 1919, 595],
/* 4356 */
[7842, 4352],
/* 4357 */
[7843, 4359],
/* 4358 */
[7845, 1164, 1163, 4356],
/* 4359 */
543,
/* 4360 */
[7848, 1919],
/* 4361 */
701,
/* 4362 */
[7850, 791, 1923, 1924, 1165, 595],
/* 4363 */
1559,
/* 4364 */
1560,
/* 4365 */
[7854, 1165],
/* 4366 */
[7857, 1164],
/* 4367 */
[7858, 4368, 1920],
/* 4368 */
1564,
/* 4369 */
[7859, 4360, 1920],
/* 4370 */
975,
/* 4371 */
[7862, 4355, 595, 790, 1163],
/* 4372 */
[7863, 4354, 4371, 1163],
/* 4373 */
[7864, 4353, 4363, 790, 4369, 1922],
/* 4374 */
[7870, 4367, 1922],
/* 4375 */
[7872, 4373, 790],
/* 4376 */
[7816, 4378],
/* 4377 */
39,
/* 4378 */
[7829, 4402, 4401, 4399],
/* 4379 */
2746,
/* 4380 */
2747,
/* 4381 */
[7840, 4388],
/* 4382 */
[7841, 1925, 596],
/* 4383 */
[7842, 4379],
/* 4384 */
[7843, 4386],
/* 4385 */
[7845, 1168, 1167, 4383],
/* 4386 */
543,
/* 4387 */
[7848, 1925],
/* 4388 */
701,
/* 4389 */
[7850, 793, 1929, 1930, 1169, 596],
/* 4390 */
1559,
/* 4391 */
1560,
/* 4392 */
[7854, 1169],
/* 4393 */
[7857, 1168],
/* 4394 */
[7858, 4395, 1926],
/* 4395 */
1564,
/* 4396 */
[7859, 4387, 1926],
/* 4397 */
975,
/* 4398 */
[7862, 4382, 596, 792, 1167],
/* 4399 */
[7863, 4381, 4398, 1167],
/* 4400 */
[7864, 4380, 4390, 792, 4396, 1928],
/* 4401 */
[7870, 4394, 1928],
/* 4402 */
[7872, 4400, 792],
/* 4403 */
[7994, 2, 21, 4404, 4405, 26],
/* 4404 */
[7995, 21, 26],
/* 4405 */
[7873, 1183, 2, 21, 4441, 4444, 600, 4406, 26],
/* 4406 */
[7912, 2, 200, 4414, 4413, 4411, 4409, 4412, 4410, 4408, 201, 1931, 794, 4415, 4416],
/* 4407 */
2810,
/* 4408 */
[7913, 2, 200],
/* 4409 */
[7914, 204, 15, 2, 201, 200, 597],
/* 4410 */
[7916, 2, 795, 200],
/* 4411 */
[7917, 15, 2, 201, 200, 597],
/* 4412 */
[7918, 40, 2, 200, 795],
/* 4413 */
[7919, 204, 15, 2, 201, 200, 468],
/* 4414 */
[7920, 2, 201, 200, 468],
/* 4415 */
[7921, 2, 201, 200],
/* 4416 */
[7922, 2, 4417, 201, 794, 200, 597, 468],
/* 4417 */
2820,
/* 4418 */
[7925, 40, 795, 794, 201],
/* 4419 */
1578,
/* 4420 */
1580,
/* 4421 */
981,
/* 4422 */
[7936, 4424, 1934],
/* 4423 */
[7938, 4420, 4421, 4422, 4426, 4435, 4436, 4437, 469, 599],
/* 4424 */
1584,
/* 4425 */
[7940, 4433],
/* 4426 */
[7942, 4425, 1934],
/* 4427 */
[7943, 1174],
/* 4428 */
1590,
/* 4429 */
1591,
/* 4430 */
984,
/* 4431 */
[7952, 4446],
/* 4432 */
2851,
/* 4433 */
[7957, 1174],
/* 4434 */
[7963, 4428],
/* 4435 */
2866,
/* 4436 */
[7966, 4432],
/* 4437 */
2868,
/* 4438 */
[7969, 469, 1174],
/* 4439 */
[7971, 1175, 469, 1172, 598, 4445],
/* 4440 */
[7973, 4430, 469],
/* 4441 */
[7975, 4423, 4431],
/* 4442 */
[7978, 599],
/* 4443 */
[7979, 4442, 1173],
/* 4444 */
[7987, 4427, 4429, 1175, 469, 1172, 4438, 598, 4419, 4440],
/* 4445 */
[7989, 1175, 469, 1172, 598, 599],
/* 4446 */
1601,
/* 4447 */
[7874, 40, 15, 2, 21, 395, 26],
/* 4448 */
[7877, 15, 21, 2, 26, 395],
/* 4449 */
2774,
/* 4450 */
[7878, 15, 2, 600],
/* 4451 */
[7879, 21, 26],
/* 4452 */
[7880, 15],
/* 4453 */
[7881, 15, 2, 21, 395, 26],
/* 4454 */
[7883, 15, 21, 4456, 26],
/* 4455 */
[7884, 15, 21, 26],
/* 4456 */
[7885, 21, 801, 26, 4455],
/* 4457 */
[7886, 15, 2, 21, 1178, 26],
/* 4458 */
[7887, 40, 15, 21, 26],
/* 4459 */
2784,
/* 4460 */
[7889, 15, 2, 21, 1936, 4458, 395, 26],
/* 4461 */
[7890, 15, 4459],
/* 4462 */
[7891, 15, 2, 21, 4465, 600, 395, 4480, 26],
/* 4463 */
[7894, 40, 2, 21, 1938, 26],
/* 4464 */
[7895, 15, 1182, 21, 2, 1937, 1177, 26, 4519],
/* 4465 */
[7806, 2, 4478, 1948, 4477, 4476, 4466],
/* 4466 */
[7807, 4468, 4467, 4471, 4469, 4473],
/* 4467 */
2682,
/* 4468 */
2683,
/* 4469 */
[7808, 4470],
/* 4470 */
2685,
/* 4471 */
[7809, 4472],
/* 4472 */
2685,
/* 4473 */
2688,
/* 4474 */
2689,
/* 4475 */
[7810, 1939],
/* 4476 */
[7811, 4474, 1939, 4475],
/* 4477 */
2692,
/* 4478 */
[7812, 4479],
/* 4479 */
2694,
/* 4480 */
[7912, 2, 202, 4488, 4487, 4485, 4483, 4486, 4484, 4482, 203, 1940, 796, 4489, 4490],
/* 4481 */
2810,
/* 4482 */
[7913, 2, 202],
/* 4483 */
[7914, 204, 15, 2, 203, 202, 601],
/* 4484 */
[7916, 2, 797, 202],
/* 4485 */
[7917, 15, 2, 203, 202, 601],
/* 4486 */
[7918, 40, 2, 202, 797],
/* 4487 */
[7919, 204, 15, 2, 203, 202, 470],
/* 4488 */
[7920, 2, 203, 202, 470],
/* 4489 */
[7921, 2, 203, 202],
/* 4490 */
[7922, 2, 4491, 203, 796, 202, 601, 470],
/* 4491 */
2820,
/* 4492 */
[7925, 40, 797, 796, 203],
/* 4493 */
[7928, 4494],
/* 4494 */
[7929, 4495],
/* 4495 */
2825,
/* 4496 */
[7896, 7779],
/* 4497 */
2791,
/* 4498 */
1580,
/* 4499 */
981,
/* 4500 */
2836,
/* 4501 */
[7935, 800],
/* 4502 */
[7938, 4498, 4499, 1942, 4505, 4514, 4515, 4516, 799, 471],
/* 4503 */
1584,
/* 4504 */
[7940, 4511],
/* 4505 */
[7942, 4504, 800],
/* 4506 */
[7944, 4513],
/* 4507 */
1590,
/* 4508 */
2850,
/* 4509 */
2851,
/* 4510 */
[7955, 1943, 1181, 1941],
/* 4511 */
[7957, 4518],
/* 4512 */
[7959, 1941],
/* 4513 */
2865,
/* 4514 */
2866,
/* 4515 */
[7966, 4509],
/* 4516 */
2868,
/* 4517 */
[7971, 1946, 799, 1180, 602, 4524],
/* 4518 */
[7972, 471],
/* 4519 */
[7974, 4502, 1943, 1181],
/* 4520 */
[7978, 471],
/* 4521 */
[7979, 4520, 798],
/* 4522 */
[7983, 798],
/* 4523 */
[7986, 1947, 4500, 4512],
/* 4524 */
[7989, 1946, 799, 1180, 602, 471],
/* 4525 */
[7991, 4508, 800],
/* 4526 */
1601,
/* 4527 */
[7814, 4528],
/* 4528 */
2697,
/* 4529 */
[7817, 4538],
/* 4530 */
[7819, 4540],
/* 4531 */
[7820, 4541],
/* 4532 */
[7821, 4542],
/* 4533 */
[7824, 4545],
/* 4534 */
[7826, 4546],
/* 4535 */
[7827, 4532, 4531, 4530],
/* 4536 */
2107,
/* 4537 */
[7829, 4571, 4570, 4562],
/* 4538 */
[7830, 4564],
/* 4539 */
[7831, 128],
/* 4540 */
[7832, 128],
/* 4541 */
[7833, 128, 4565],
/* 4542 */
[7834, 128, 4566],
/* 4543 */
[7835, 1194, 262],
/* 4544 */
[7836, 4567, 262],
/* 4545 */
[7837, 4568, 262],
/* 4546 */
[7838, 1194, 262],
/* 4547 */
[7839, 1194, 4569, 262],
/* 4548 */
2746,
/* 4549 */
2747,
/* 4550 */
[7841, 1186, 472],
/* 4551 */
[7844, 128],
/* 4552 */
[7848, 1186],
/* 4553 */
[7849, 1186],
/* 4554 */
[7850, 128, 1192, 1193, 1190, 472],
/* 4555 */
1559,
/* 4556 */
[7852, 128, 604],
/* 4557 */
[7855, 128, 1953, 1185, 1950],
/* 4558 */
[7858, 4559, 1187],
/* 4559 */
1564,
/* 4560 */
[7860, 1187],
/* 4561 */
[7862, 4550, 472, 803, 262],
/* 4562 */
[7863, 1185, 4561, 262],
/* 4563 */
[7864, 4549, 4555, 803, 604, 1954],
/* 4564 */
[7865, 603],
/* 4565 */
[7866, 604, 1191],
/* 4566 */
[7867, 1191, 1952],
/* 4567 */
[7868, 4560, 1191],
/* 4568 */
[7869, 603, 4557],
/* 4569 */
428,
/* 4570 */
[7870, 4558, 1954],
/* 4571 */
[7872, 4563, 803],
/* 4572 */
[7898, 15, 4529, 2, 21, 4681, 4680, 4682, 1981, 605, 26],
/* 4573 */
[7899, 21, 2, 26, 1195, 319],
/* 4574 */
[7900, 2, 319],
/* 4575 */
[7901, 2, 319],
/* 4576 */
[7902, 2, 319],
/* 4577 */
[7904, 319, 4573, 4574, 4576, 4578, 4579, 4575],
/* 4578 */
[7905, 2, 319],
/* 4579 */
[7906, 2, 319],
/* 4580 */
[7907, 21, 26],
/* 4581 */
[7909, 21, 26],
/* 4582 */
[7911, 15, 2, 21, 1959, 1967, 26, 1195],
/* 4583 */
[7874, 40, 15, 2, 21, 396, 26],
/* 4584 */
[7877, 15, 21, 2, 26, 396],
/* 4585 */
2774,
/* 4586 */
[7878, 15, 2, 605],
/* 4587 */
[7879, 21, 26],
/* 4588 */
[7880, 15],
/* 4589 */
[7881, 15, 2, 21, 396, 26],
/* 4590 */
[7883, 15, 21, 4592, 26],
/* 4591 */
[7884, 15, 21, 26],
/* 4592 */
[7885, 21, 801, 26, 4591],
/* 4593 */
[7886, 15, 2, 21, 1198, 26],
/* 4594 */
[7887, 40, 15, 21, 26],
/* 4595 */
2784,
/* 4596 */
[7889, 15, 2, 21, 1961, 4594, 396, 26],
/* 4597 */
[7890, 15, 4595],
/* 4598 */
[7891, 15, 2, 21, 4601, 605, 396, 4613, 26],
/* 4599 */
[7894, 40, 2, 21, 1963, 26],
/* 4600 */
[7895, 15, 1182, 21, 2, 1962, 1197, 26, 1980],
/* 4601 */
[7806, 2, 4611, 1965, 4610, 1967, 4602],
/* 4602 */
[7807, 4604, 4603, 4607, 4605, 4609],
/* 4603 */
2682,
/* 4604 */
2683,
/* 4605 */
[7808, 4606],
/* 4606 */
2685,
/* 4607 */
[7809, 4608],
/* 4608 */
2685,
/* 4609 */
2688,
/* 4610 */
2692,
/* 4611 */
[7812, 4612],
/* 4612 */
2694,
/* 4613 */
[7912, 2, 205, 4621, 4620, 4618, 4616, 4619, 4617, 4615, 206, 1964, 804, 4622, 4623],
/* 4614 */
2810,
/* 4615 */
[7913, 2, 205],
/* 4616 */
[7914, 204, 15, 2, 206, 205, 606],
/* 4617 */
[7916, 2, 805, 205],
/* 4618 */
[7917, 15, 2, 206, 205, 606],
/* 4619 */
[7918, 40, 2, 205, 805],
/* 4620 */
[7919, 204, 15, 2, 206, 205, 473],
/* 4621 */
[7920, 2, 206, 205, 473],
/* 4622 */
[7921, 2, 206, 205],
/* 4623 */
[7922, 2, 4624, 206, 804, 205, 606, 473],
/* 4624 */
2820,
/* 4625 */
[7925, 40, 805, 804, 206],
/* 4626 */
[7928, 4627],
/* 4627 */
[7929, 4628],
/* 4628 */
2825,
/* 4629 */
[7896, 7780],
/* 4630 */
2791,
/* 4631 */
[7814, 4632],
/* 4632 */
2697,
/* 4633 */
2689,
/* 4634 */
[7810, 1966],
/* 4635 */
2827,
/* 4636 */
1578,
/* 4637 */
[7930, 4645, 4657, 808, 4677],
/* 4638 */
[7931, 4639],
/* 4639 */
[7932, 1969, 4648, 4667],
/* 4640 */
[7934, 4661, 807],
/* 4641 */
1580,
/* 4642 */
1581,
/* 4643 */
2836,
/* 4644 */
[7935, 474],
/* 4645 */
[7937, 4652, 4653, 806, 1984, 4687],
/* 4646 */
[7938, 4641, 1969, 1970, 1972, 4673, 4674, 4675, 263, 152],
/* 4647 */
1584,
/* 4648 */
[7939, 1972, 4663],
/* 4649 */
[7941, 1971, 1983],
/* 4650 */
[7946, 4668, 4669, 4670, 263, 4683],
/* 4651 */
[7947, 1975, 321],
/* 4652 */
[7948, 4651, 4671, 321],
/* 4653 */
[7949, 1973, 1975, 4655, 263, 1977, 1978, 4636, 321, 1979],
/* 4654 */
[7950, 1973, 1979],
/* 4655 */
1591,
/* 4656 */
984,
/* 4657 */
[7951, 1974, 4660, 4665],
/* 4658 */
2850,
/* 4659 */
2851,
/* 4660 */
[7953, 152],
/* 4661 */
[7954, 152],
/* 4662 */
[7955, 806, 808, 1968],
/* 4663 */
[7956, 1199, 397, 321],
/* 4664 */
[7957, 321],
/* 4665 */
[7958, 4640, 807],
/* 4666 */
[7959, 1968],
/* 4667 */
[7960, 806, 263],
/* 4668 */
[7961, 4642],
/* 4669 */
2861,
/* 4670 */
[7962, 474],
/* 4671 */
[7964, 1978, 4685],
/* 4672 */
2865,
/* 4673 */
2866,
/* 4674 */
[7966, 4659],
/* 4675 */
2868,
/* 4676 */
[7971, 1202, 263, 1201, 397, 1983],
/* 4677 */
2870,
/* 4678 */
[7978, 152],
/* 4679 */
[7979, 4678, 320],
/* 4680 */
[7980, 320],
/* 4681 */
[7981, 4649, 1202, 320],
/* 4682 */
[7982, 152],
/* 4683 */
[7984, 397, 320],
/* 4684 */
[7986, 1982, 4643, 4666],
/* 4685 */
[7990, 474, 321],
/* 4686 */
[7991, 4658, 474],
/* 4687 */
[7992, 1976, 4654, 1977],
/* 4688 */
2809,
/* 4689 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      BinaryExpression: function BinaryExpression(path) {
	        var node = path.node;

	        if (node.operator === "instanceof") {
	          path.replaceWith(t.callExpression(this.addHelper("instanceof"), [node.left, node.right]));
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 4690 */
[7817, 4701],
/* 4691 */
[7819, 4703],
/* 4692 */
[7820, 4704],
/* 4693 */
[7821, 4705],
/* 4694 */
[7822, 4706],
/* 4695 */
[7824, 4708],
/* 4696 */
[7826, 4709],
/* 4697 */
[7827, 4693, 4692, 4691],
/* 4698 */
[7828, 475, 4695],
/* 4699 */
2107,
/* 4700 */
[7829, 4734, 4733, 4725],
/* 4701 */
[7830, 4727],
/* 4702 */
[7831, 129],
/* 4703 */
[7832, 129],
/* 4704 */
[7833, 129, 4728],
/* 4705 */
[7834, 129, 4729],
/* 4706 */
[7835, 1213, 264],
/* 4707 */
[7836, 4730, 264],
/* 4708 */
[7837, 4731, 264],
/* 4709 */
[7838, 1213, 264],
/* 4710 */
[7839, 1213, 4732, 264],
/* 4711 */
2746,
/* 4712 */
2747,
/* 4713 */
[7841, 1205, 476],
/* 4714 */
[7844, 129],
/* 4715 */
[7848, 1205],
/* 4716 */
[7849, 1205],
/* 4717 */
[7850, 129, 1211, 1212, 1209, 476],
/* 4718 */
1559,
/* 4719 */
[7852, 129, 608],
/* 4720 */
[7855, 129, 1992, 1204, 1989],
/* 4721 */
[7858, 4722, 1206],
/* 4722 */
1564,
/* 4723 */
[7860, 1206],
/* 4724 */
[7862, 4713, 476, 810, 264],
/* 4725 */
[7863, 1204, 4724, 264],
/* 4726 */
[7864, 4712, 4718, 810, 608, 1993],
/* 4727 */
[7865, 607],
/* 4728 */
[7866, 608, 1210],
/* 4729 */
[7867, 1210, 1991],
/* 4730 */
[7868, 4723, 1210],
/* 4731 */
[7869, 607, 4720],
/* 4732 */
428,
/* 4733 */
[7870, 4721, 1993],
/* 4734 */
[7872, 4726, 810],
/* 4735 */
[7873, 1987, 34, 73, 4843, 4851, 477, 2006, 84],
/* 4736 */
[7874, 112, 97, 34, 73, 398, 84],
/* 4737 */
[7877, 97, 73, 34, 84, 398],
/* 4738 */
2774,
/* 4739 */
[7878, 97, 34, 477],
/* 4740 */
[7879, 73, 84],
/* 4741 */
[7880, 97],
/* 4742 */
[7881, 97, 34, 73, 398, 84],
/* 4743 */
[7883, 97, 73, 4745, 84],
/* 4744 */
[7884, 97, 73, 84],
/* 4745 */
[7885, 73, 1988, 84, 4744],
/* 4746 */
[7886, 97, 34, 73, 1217, 84],
/* 4747 */
[7887, 112, 97, 73, 84],
/* 4748 */
2784,
/* 4749 */
[7889, 97, 34, 73, 1999, 4747, 398, 84],
/* 4750 */
[7890, 97, 4748],
/* 4751 */
[7891, 97, 34, 73, 4754, 477, 398, 2006, 84],
/* 4752 */
[7894, 112, 34, 73, 2001, 84],
/* 4753 */
[7895, 97, 1986, 73, 34, 2000, 1215, 84, 2020],
/* 4754 */
[7806, 34, 4767, 2003, 4766, 4765, 4755],
/* 4755 */
[7807, 4757, 4756, 4760, 4758, 4762],
/* 4756 */
2682,
/* 4757 */
2683,
/* 4758 */
[7808, 4759],
/* 4759 */
2685,
/* 4760 */
[7809, 4761],
/* 4761 */
2685,
/* 4762 */
2688,
/* 4763 */
2689,
/* 4764 */
[7810, 2002],
/* 4765 */
[7811, 4763, 2002, 4764],
/* 4766 */
2692,
/* 4767 */
[7812, 4768],
/* 4768 */
2694,
/* 4769 */
[7928, 4770],
/* 4770 */
[7929, 4771],
/* 4771 */
2825,
/* 4772 */
[7896, 7781],
/* 4773 */
2791,
/* 4774 */
[7814, 4775],
/* 4775 */
2697,
/* 4776 */
[7898, 97, 4690, 34, 73, 4847, 4846, 4848, 2021, 477, 84],
/* 4777 */
[7899, 73, 34, 84, 1216, 322],
/* 4778 */
[7900, 34, 322],
/* 4779 */
[7901, 34, 322],
/* 4780 */
[7902, 34, 322],
/* 4781 */
[7904, 322, 4777, 4778, 4780, 4782, 4783, 4779],
/* 4782 */
[7905, 34, 322],
/* 4783 */
[7906, 34, 322],
/* 4784 */
[7907, 73, 84],
/* 4785 */
[7909, 73, 84],
/* 4786 */
[7911, 97, 34, 73, 2004, 4789, 84, 1216],
/* 4787 */
2689,
/* 4788 */
[7810, 2005],
/* 4789 */
[7811, 4787, 2005, 4788],
/* 4790 */
2809,
/* 4791 */
2810,
/* 4792 */
[7913, 34, 207],
/* 4793 */
[7914, 475, 97, 34, 208, 207, 609],
/* 4794 */
[7916, 34, 812, 207],
/* 4795 */
[7917, 97, 34, 208, 207, 609],
/* 4796 */
[7918, 112, 34, 207, 812],
/* 4797 */
[7919, 475, 97, 34, 208, 207, 478],
/* 4798 */
[7920, 34, 208, 207, 478],
/* 4799 */
[7921, 34, 208, 207],
/* 4800 */
[7922, 34, 4801, 208, 811, 207, 609, 478],
/* 4801 */
2820,
/* 4802 */
[7925, 112, 812, 811, 208],
/* 4803 */
2827,
/* 4804 */
[7930, 4812, 4822, 815, 4842],
/* 4805 */
[7931, 4806],
/* 4806 */
[7932, 2010, 4814, 4832],
/* 4807 */
[7934, 4826, 813],
/* 4808 */
1580,
/* 4809 */
1581,
/* 4810 */
2836,
/* 4811 */
[7935, 479],
/* 4812 */
[7937, 4818, 4819, 610, 2024, 4854],
/* 4813 */
1584,
/* 4814 */
[7939, 2014, 4828],
/* 4815 */
[7941, 2013, 2023],
/* 4816 */
[7946, 4833, 4834, 4835, 209, 4849],
/* 4817 */
[7947, 2016, 325],
/* 4818 */
[7948, 4817, 4836, 325],
/* 4819 */
[7949, 1218, 2016, 2018, 209, 1221, 2019, 2008, 325, 1222],
/* 4820 */
[7950, 1218, 1222],
/* 4821 */
984,
/* 4822 */
[7951, 2015, 4825, 4830],
/* 4823 */
2850,
/* 4824 */
2851,
/* 4825 */
[7953, 153],
/* 4826 */
[7954, 153],
/* 4827 */
[7955, 610, 815, 2009],
/* 4828 */
[7956, 1219, 323, 325],
/* 4829 */
[7957, 325],
/* 4830 */
[7958, 4807, 813],
/* 4831 */
[7959, 2009],
/* 4832 */
[7960, 610, 209],
/* 4833 */
[7961, 4809],
/* 4834 */
2861,
/* 4835 */
[7962, 479],
/* 4836 */
[7964, 2019, 4852],
/* 4837 */
2865,
/* 4838 */
2866,
/* 4839 */
[7966, 4824],
/* 4840 */
2868,
/* 4841 */
[7971, 816, 209, 814, 323, 2023],
/* 4842 */
2870,
/* 4843 */
[7975, 2012, 610],
/* 4844 */
[7978, 153],
/* 4845 */
[7979, 4844, 324],
/* 4846 */
[7980, 324],
/* 4847 */
[7981, 4815, 816, 324],
/* 4848 */
[7982, 153],
/* 4849 */
[7984, 323, 324],
/* 4850 */
[7986, 2022, 4810, 4831],
/* 4851 */
[7987, 1218, 2018, 816, 209, 814, 1221, 323, 2008, 1222],
/* 4852 */
[7990, 479, 325],
/* 4853 */
[7991, 4823, 479],
/* 4854 */
[7992, 2017, 4820, 1221],
/* 4855 */
[7817, 4864],
/* 4856 */
[7819, 4866],
/* 4857 */
[7820, 4867],
/* 4858 */
[7821, 4868],
/* 4859 */
[7824, 4871],
/* 4860 */
[7826, 4872],
/* 4861 */
[7827, 4858, 4857, 4856],
/* 4862 */
2107,
/* 4863 */
[7829, 4897, 4896, 4888],
/* 4864 */
[7830, 4890],
/* 4865 */
[7831, 130],
/* 4866 */
[7832, 130],
/* 4867 */
[7833, 130, 4891],
/* 4868 */
[7834, 130, 4892],
/* 4869 */
[7835, 1233, 266],
/* 4870 */
[7836, 4893, 266],
/* 4871 */
[7837, 4894, 266],
/* 4872 */
[7838, 1233, 266],
/* 4873 */
[7839, 1233, 4895, 266],
/* 4874 */
2746,
/* 4875 */
2747,
/* 4876 */
[7841, 1225, 480],
/* 4877 */
[7844, 130],
/* 4878 */
[7848, 1225],
/* 4879 */
[7849, 1225],
/* 4880 */
[7850, 130, 1231, 1232, 1229, 480],
/* 4881 */
1559,
/* 4882 */
[7852, 130, 612],
/* 4883 */
[7855, 130, 2030, 1224, 2027],
/* 4884 */
[7858, 4885, 1226],
/* 4885 */
1564,
/* 4886 */
[7860, 1226],
/* 4887 */
[7862, 4876, 480, 821, 266],
/* 4888 */
[7863, 1224, 4887, 266],
/* 4889 */
[7864, 4875, 4881, 821, 612, 2031],
/* 4890 */
[7865, 611],
/* 4891 */
[7866, 612, 1230],
/* 4892 */
[7867, 1230, 2029],
/* 4893 */
[7868, 4886, 1230],
/* 4894 */
[7869, 611, 4883],
/* 4895 */
428,
/* 4896 */
[7870, 4884, 2031],
/* 4897 */
[7872, 4889, 821],
/* 4898 */
[7873, 818, 7, 24, 4977, 4982, 613, 2042, 30],
/* 4899 */
[7874, 65, 27, 7, 24, 399, 30],
/* 4900 */
[7877, 27, 24, 7, 30, 399],
/* 4901 */
2774,
/* 4902 */
[7878, 27, 7, 613],
/* 4903 */
[7879, 24, 30],
/* 4904 */
[7880, 27],
/* 4905 */
[7881, 27, 7, 24, 399, 30],
/* 4906 */
[7883, 27, 24, 4908, 30],
/* 4907 */
[7884, 27, 24, 30],
/* 4908 */
[7885, 24, 819, 30, 4907],
/* 4909 */
[7886, 27, 7, 24, 1236, 30],
/* 4910 */
[7887, 65, 27, 24, 30],
/* 4911 */
2784,
/* 4912 */
[7889, 27, 7, 24, 2037, 4910, 399, 30],
/* 4913 */
[7890, 27, 4911],
/* 4914 */
[7891, 27, 7, 24, 4917, 613, 399, 2042, 30],
/* 4915 */
[7894, 65, 7, 24, 2039, 30],
/* 4916 */
[7895, 27, 817, 24, 7, 2038, 1235, 30, 4976],
/* 4917 */
[7806, 7, 4930, 2041, 4929, 4928, 4918],
/* 4918 */
[7807, 4920, 4919, 4923, 4921, 4925],
/* 4919 */
2682,
/* 4920 */
2683,
/* 4921 */
[7808, 4922],
/* 4922 */
2685,
/* 4923 */
[7809, 4924],
/* 4924 */
2685,
/* 4925 */
2688,
/* 4926 */
2689,
/* 4927 */
[7810, 2040],
/* 4928 */
[7811, 4926, 2040, 4927],
/* 4929 */
2692,
/* 4930 */
[7812, 4931],
/* 4931 */
2694,
/* 4932 */
[7928, 4933],
/* 4933 */
[7929, 4934],
/* 4934 */
2825,
/* 4935 */
[7896, 7782],
/* 4936 */
2791,
/* 4937 */
[7814, 4938],
/* 4938 */
2697,
/* 4939 */
2810,
/* 4940 */
[7913, 7, 210],
/* 4941 */
[7914, 265, 27, 7, 211, 210, 614],
/* 4942 */
[7916, 7, 823, 210],
/* 4943 */
[7917, 27, 7, 211, 210, 614],
/* 4944 */
[7918, 65, 7, 210, 823],
/* 4945 */
[7919, 265, 27, 7, 211, 210, 481],
/* 4946 */
[7920, 7, 211, 210, 481],
/* 4947 */
[7921, 7, 211, 210],
/* 4948 */
[7922, 7, 4949, 211, 822, 210, 614, 481],
/* 4949 */
2820,
/* 4950 */
[7925, 65, 823, 822, 211],
/* 4951 */
1578,
/* 4952 */
1580,
/* 4953 */
981,
/* 4954 */
2836,
/* 4955 */
[7935, 826],
/* 4956 */
1584,
/* 4957 */
[7940, 4967],
/* 4958 */
[7942, 4957, 826],
/* 4959 */
[7943, 1240],
/* 4960 */
[7944, 4969],
/* 4961 */
1590,
/* 4962 */
1591,
/* 4963 */
984,
/* 4964 */
2850,
/* 4965 */
2851,
/* 4966 */
[7955, 1237, 1239, 2044],
/* 4967 */
[7957, 1240],
/* 4968 */
[7959, 2044],
/* 4969 */
2865,
/* 4970 */
2866,
/* 4971 */
[7966, 4965],
/* 4972 */
2868,
/* 4973 */
[7969, 400, 1240],
/* 4974 */
[7971, 1241, 400, 824, 482, 4983],
/* 4975 */
[7973, 4963, 400],
/* 4976 */
[7974, 2046, 1237, 1239],
/* 4977 */
[7975, 2046, 1237],
/* 4978 */
[7978, 483],
/* 4979 */
[7979, 4978, 825],
/* 4980 */
[7983, 825],
/* 4981 */
[7986, 2049, 4954, 4968],
/* 4982 */
[7987, 4959, 4962, 1241, 400, 824, 4973, 482, 4951, 4975],
/* 4983 */
[7989, 1241, 400, 824, 482, 483],
/* 4984 */
[7991, 4964, 826],
/* 4985 */
1601,
/* 4986 */
[7898, 27, 4855, 7, 24, 5095, 5094, 5096, 2072, 615, 30],
/* 4987 */
[7899, 24, 7, 30, 1242, 326],
/* 4988 */
[7900, 7, 326],
/* 4989 */
[7901, 7, 326],
/* 4990 */
[7902, 7, 326],
/* 4991 */
[7904, 326, 4987, 4988, 4990, 4992, 4993, 4989],
/* 4992 */
[7905, 7, 326],
/* 4993 */
[7906, 7, 326],
/* 4994 */
[7907, 24, 30],
/* 4995 */
[7909, 24, 30],
/* 4996 */
[7911, 27, 7, 24, 2050, 2058, 30, 1242],
/* 4997 */
[7874, 65, 27, 7, 24, 401, 30],
/* 4998 */
[7877, 27, 24, 7, 30, 401],
/* 4999 */
2774,
/* 5000 */
[7878, 27, 7, 615],
/* 5001 */
[7879, 24, 30],
/* 5002 */
[7880, 27],
/* 5003 */
[7881, 27, 7, 24, 401, 30],
/* 5004 */
[7883, 27, 24, 5006, 30],
/* 5005 */
[7884, 27, 24, 30],
/* 5006 */
[7885, 24, 819, 30, 5005],
/* 5007 */
[7886, 27, 7, 24, 1245, 30],
/* 5008 */
[7887, 65, 27, 24, 30],
/* 5009 */
2784,
/* 5010 */
[7889, 27, 7, 24, 2052, 5008, 401, 30],
/* 5011 */
[7890, 27, 5009],
/* 5012 */
[7891, 27, 7, 24, 5015, 615, 401, 5027, 30],
/* 5013 */
[7894, 65, 7, 24, 2054, 30],
/* 5014 */
[7895, 27, 817, 24, 7, 2053, 1244, 30, 2071],
/* 5015 */
[7806, 7, 5025, 2056, 5024, 2058, 5016],
/* 5016 */
[7807, 5018, 5017, 5021, 5019, 5023],
/* 5017 */
2682,
/* 5018 */
2683,
/* 5019 */
[7808, 5020],
/* 5020 */
2685,
/* 5021 */
[7809, 5022],
/* 5022 */
2685,
/* 5023 */
2688,
/* 5024 */
2692,
/* 5025 */
[7812, 5026],
/* 5026 */
2694,
/* 5027 */
[7912, 7, 212, 5035, 5034, 5032, 5030, 5033, 5031, 5029, 213, 2055, 827, 5036, 5037],
/* 5028 */
2810,
/* 5029 */
[7913, 7, 212],
/* 5030 */
[7914, 265, 27, 7, 213, 212, 616],
/* 5031 */
[7916, 7, 828, 212],
/* 5032 */
[7917, 27, 7, 213, 212, 616],
/* 5033 */
[7918, 65, 7, 212, 828],
/* 5034 */
[7919, 265, 27, 7, 213, 212, 484],
/* 5035 */
[7920, 7, 213, 212, 484],
/* 5036 */
[7921, 7, 213, 212],
/* 5037 */
[7922, 7, 5038, 213, 827, 212, 616, 484],
/* 5038 */
2820,
/* 5039 */
[7925, 65, 828, 827, 213],
/* 5040 */
[7928, 5041],
/* 5041 */
[7929, 5042],
/* 5042 */
2825,
/* 5043 */
[7896, 7783],
/* 5044 */
2791,
/* 5045 */
[7814, 5046],
/* 5046 */
2697,
/* 5047 */
2689,
/* 5048 */
[7810, 2057],
/* 5049 */
2827,
/* 5050 */
1578,
/* 5051 */
[7930, 5059, 5071, 831, 5091],
/* 5052 */
[7931, 5053],
/* 5053 */
[7932, 2060, 5062, 5081],
/* 5054 */
[7934, 5075, 830],
/* 5055 */
1580,
/* 5056 */
1581,
/* 5057 */
2836,
/* 5058 */
[7935, 485],
/* 5059 */
[7937, 5066, 5067, 829, 2075, 5101],
/* 5060 */
[7938, 5055, 2060, 2061, 2063, 5087, 5088, 5089, 267, 154],
/* 5061 */
1584,
/* 5062 */
[7939, 2063, 5077],
/* 5063 */
[7941, 2062, 2074],
/* 5064 */
[7946, 5082, 5083, 5084, 267, 5097],
/* 5065 */
[7947, 2066, 328],
/* 5066 */
[7948, 5065, 5085, 328],
/* 5067 */
[7949, 2064, 2066, 5069, 267, 2068, 2069, 5050, 328, 2070],
/* 5068 */
[7950, 2064, 2070],
/* 5069 */
1591,
/* 5070 */
984,
/* 5071 */
[7951, 2065, 5074, 5079],
/* 5072 */
2850,
/* 5073 */
2851,
/* 5074 */
[7953, 154],
/* 5075 */
[7954, 154],
/* 5076 */
[7955, 829, 831, 2059],
/* 5077 */
[7956, 1246, 402, 328],
/* 5078 */
[7957, 328],
/* 5079 */
[7958, 5054, 830],
/* 5080 */
[7959, 2059],
/* 5081 */
[7960, 829, 267],
/* 5082 */
[7961, 5056],
/* 5083 */
2861,
/* 5084 */
[7962, 485],
/* 5085 */
[7964, 2069, 5099],
/* 5086 */
2865,
/* 5087 */
2866,
/* 5088 */
[7966, 5073],
/* 5089 */
2868,
/* 5090 */
[7971, 1249, 267, 1248, 402, 2074],
/* 5091 */
2870,
/* 5092 */
[7978, 154],
/* 5093 */
[7979, 5092, 327],
/* 5094 */
[7980, 327],
/* 5095 */
[7981, 5063, 1249, 327],
/* 5096 */
[7982, 154],
/* 5097 */
[7984, 402, 327],
/* 5098 */
[7986, 2073, 5057, 5080],
/* 5099 */
[7990, 485, 328],
/* 5100 */
[7991, 5072, 485],
/* 5101 */
[7992, 2067, 5068, 2068],
/* 5102 */
2809,
/* 5103 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _Symbol = __webpack_require__(838)["default"];

	var _getIterator = __webpack_require__(12)["default"];

	var _Object$create = __webpack_require__(216)["default"];

	var _interopRequireDefault = __webpack_require__(4)["default"];

	exports.__esModule = true;

	var _babelHelperHoistVariables = __webpack_require__(5104);

	var _babelHelperHoistVariables2 = _interopRequireDefault(_babelHelperHoistVariables);

	var _babelTemplate = __webpack_require__(5261);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var buildTemplate = _babelTemplate2["default"]("\n  System.register(MODULE_NAME, [SOURCES], function (EXPORT_IDENTIFIER) {\n    BEFORE_BODY;\n    return {\n      setters: [SETTERS],\n      execute: function () {\n        BODY;\n      }\n    };\n  });\n");

	var buildExportAll = _babelTemplate2["default"]("\n  for (var KEY in TARGET) {\n    if (KEY !== \"default\") EXPORT_OBJ[KEY] = TARGET[KEY];\n  }\n");

	exports["default"] = function (_ref7) {
	  var t = _ref7.types;

	  var IGNORE_REASSIGNMENT_SYMBOL = _Symbol();

	  var reassignmentVisitor = {
	    "AssignmentExpression|UpdateExpression": function AssignmentExpressionUpdateExpression(path) {
	      if (path.node[IGNORE_REASSIGNMENT_SYMBOL]) return;
	      path.node[IGNORE_REASSIGNMENT_SYMBOL] = true;

	      var arg = path.get(path.isAssignmentExpression() ? "left" : "argument");
	      if (!arg.isIdentifier()) return;

	      var name = arg.node.name;

	      // redeclared in this scope
	      if (this.scope.getBinding(name) !== path.scope.getBinding(name)) return;

	      var exportedNames = this.exports[name];
	      if (!exportedNames) return;

	      var node = path.node;

	      for (var _iterator = exportedNames, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var exportedName = _ref;

	        node = this.buildCall(exportedName, node).expression;
	      }

	      path.replaceWith(node);
	    }
	  };

	  return {
	    inherits: __webpack_require__(1528),

	    visitor: {
	      Program: {
	        exit: function exit(path) {
	          var exportIdent = path.scope.generateUidIdentifier("export");

	          var exportNames = _Object$create(null);
	          var modules = _Object$create(null);

	          var beforeBody = [];
	          var setters = [];
	          var sources = [];
	          var variableIds = [];

	          function addExportName(key, val) {
	            exportNames[key] = exportNames[key] || [];
	            exportNames[key].push(val);
	          }

	          function pushModule(source, key, specifiers) {
	            var _modules = modules[source] = modules[source] || { imports: [], exports: [] };
	            _modules[key] = _modules[key].concat(specifiers);
	          }

	          function buildExportCall(name, val) {
	            return t.expressionStatement(t.callExpression(exportIdent, [t.stringLiteral(name), val]));
	          }

	          var body /*: Array<Object>*/ = path.get("body");

	          var canHoist = true;
	          for (var _iterator2 = body, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	            var _ref2;

	            if (_isArray2) {
	              if (_i2 >= _iterator2.length) break;
	              _ref2 = _iterator2[_i2++];
	            } else {
	              _i2 = _iterator2.next();
	              if (_i2.done) break;
	              _ref2 = _i2.value;
	            }

	            var _path = _ref2;

	            if (_path.isExportDeclaration()) _path = _path.get("declaration");
	            if (_path.isVariableDeclaration() && _path.node.kind !== "var") {
	              canHoist = false;
	              break;
	            }
	          }

	          for (var _iterator3 = body, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	            var _ref3;

	            if (_isArray3) {
	              if (_i3 >= _iterator3.length) break;
	              _ref3 = _iterator3[_i3++];
	            } else {
	              _i3 = _iterator3.next();
	              if (_i3.done) break;
	              _ref3 = _i3.value;
	            }

	            var _path2 = _ref3;

	            if (canHoist && _path2.isFunctionDeclaration()) {
	              beforeBody.push(_path2.node);
	              _path2.remove();
	            } else if (_path2.isImportDeclaration()) {
	              var source = _path2.node.source.value;
	              pushModule(source, "imports", _path2.node.specifiers);
	              for (var _name in _path2.getBindingIdentifiers()) {
	                _path2.scope.removeBinding(_name);
	                variableIds.push(t.identifier(_name));
	              }
	              _path2.remove();
	            } else if (_path2.isExportAllDeclaration()) {
	              pushModule(_path2.node.source.value, "exports", _path2.node);
	              _path2.remove();
	            } else if (_path2.isExportDefaultDeclaration()) {
	              var declar = _path2.get("declaration");
	              if (declar.isClassDeclaration() || declar.isFunctionDeclaration()) {
	                var id = declar.node.id;
	                var nodes = [];

	                if (id) {
	                  nodes.push(declar.node);
	                  nodes.push(buildExportCall("default", id));
	                  addExportName(id.name, "default");
	                } else {
	                  nodes.push(buildExportCall("default", t.toExpression(declar.node)));
	                }

	                if (!canHoist || declar.isClassDeclaration()) {
	                  _path2.replaceWithMultiple(nodes);
	                } else {
	                  beforeBody = beforeBody.concat(nodes);
	                  _path2.remove();
	                }
	              } else {
	                _path2.replaceWith(buildExportCall("default", declar.node));
	              }
	            } else if (_path2.isExportNamedDeclaration()) {
	              var declar = _path2.get("declaration");

	              if (declar.node) {
	                _path2.replaceWith(declar);

	                var nodes = [];
	                var bindingIdentifiers = undefined;
	                if (_path2.isFunction()) {
	                  // istanbul ignore next

	                  var _bindingIdentifiers;

	                  bindingIdentifiers = (_bindingIdentifiers = {}, _bindingIdentifiers[declar.node.id.name] = declar.node.id, _bindingIdentifiers);
	                } else {
	                  bindingIdentifiers = declar.getBindingIdentifiers();
	                }
	                for (var _name2 in bindingIdentifiers) {
	                  addExportName(_name2, _name2);
	                  nodes.push(buildExportCall(_name2, t.identifier(_name2)));
	                }
	                _path2.insertAfter(nodes);
	              }

	              var specifiers = _path2.node.specifiers;
	              if (specifiers && specifiers.length) {
	                if (_path2.node.source) {
	                  pushModule(_path2.node.source.value, "exports", specifiers);
	                  _path2.remove();
	                } else {
	                  var nodes = [];

	                  for (var _iterator4 = specifiers, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	                    var _ref4;

	                    if (_isArray4) {
	                      if (_i4 >= _iterator4.length) break;
	                      _ref4 = _iterator4[_i4++];
	                    } else {
	                      _i4 = _iterator4.next();
	                      if (_i4.done) break;
	                      _ref4 = _i4.value;
	                    }

	                    var specifier = _ref4;

	                    nodes.push(buildExportCall(specifier.exported.name, specifier.local));
	                    addExportName(specifier.local.name, specifier.exported.name);
	                  }

	                  _path2.replaceWithMultiple(nodes);
	                }
	              }
	            }
	          }

	          for (var source in modules) {
	            var specifiers = modules[source];

	            var setterBody = [];
	            var target = path.scope.generateUidIdentifier(source);

	            for (var _iterator5 = specifiers.imports, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	              var _ref5;

	              if (_isArray5) {
	                if (_i5 >= _iterator5.length) break;
	                _ref5 = _iterator5[_i5++];
	              } else {
	                _i5 = _iterator5.next();
	                if (_i5.done) break;
	                _ref5 = _i5.value;
	              }

	              var specifier = _ref5;

	              if (t.isImportNamespaceSpecifier(specifier)) {
	                setterBody.push(t.expressionStatement(t.assignmentExpression("=", specifier.local, target)));
	              } else if (t.isImportDefaultSpecifier(specifier)) {
	                specifier = t.importSpecifier(specifier.local, t.identifier("default"));
	              }

	              if (t.isImportSpecifier(specifier)) {
	                setterBody.push(t.expressionStatement(t.assignmentExpression("=", specifier.local, t.memberExpression(target, specifier.imported))));
	              }
	            }

	            if (specifiers.exports.length) {
	              var exportObjRef = path.scope.generateUidIdentifier("exportObj");

	              setterBody.push(t.variableDeclaration("var", [t.variableDeclarator(exportObjRef, t.objectExpression([]))]));

	              for (var _iterator6 = specifiers.exports, _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
	                var _ref6;

	                if (_isArray6) {
	                  if (_i6 >= _iterator6.length) break;
	                  _ref6 = _iterator6[_i6++];
	                } else {
	                  _i6 = _iterator6.next();
	                  if (_i6.done) break;
	                  _ref6 = _i6.value;
	                }

	                var node = _ref6;

	                if (t.isExportAllDeclaration(node)) {
	                  setterBody.push(buildExportAll({
	                    KEY: path.scope.generateUidIdentifier("key"),
	                    EXPORT_OBJ: exportObjRef,
	                    TARGET: target
	                  }));
	                } else if (t.isExportSpecifier(node)) {
	                  setterBody.push(t.expressionStatement(t.assignmentExpression("=", t.memberExpression(exportObjRef, node.exported), t.memberExpression(target, node.local))));
	                } else {
	                  // todo
	                }
	              }

	              setterBody.push(t.expressionStatement(t.callExpression(exportIdent, [exportObjRef])));
	            }

	            sources.push(t.stringLiteral(source));
	            setters.push(t.functionExpression(null, [target], t.blockStatement(setterBody)));
	          }

	          var moduleName = this.getModuleName();
	          if (moduleName) moduleName = t.stringLiteral(moduleName);

	          if (canHoist) {
	            _babelHelperHoistVariables2["default"](path, function (id) {
	              return variableIds.push(id);
	            });
	          }

	          if (variableIds.length) {
	            beforeBody.unshift(t.variableDeclaration("var", variableIds.map(function (id) {
	              return t.variableDeclarator(id);
	            })));
	          }

	          path.traverse(reassignmentVisitor, {
	            exports: exportNames,
	            buildCall: buildExportCall,
	            scope: path.scope
	          });

	          path.node.body = [buildTemplate({
	            BEFORE_BODY: beforeBody,
	            MODULE_NAME: moduleName,
	            SETTERS: setters,
	            SOURCES: sources,
	            BODY: path.node.body,
	            EXPORT_IDENTIFIER: exportIdent
	          })];
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 5104 */
[7999, 12, 9, 85],
/* 5105 */
[7898, 12, 2102, 4, 9, 5214, 5213, 5215, 2098, 617, 85],
/* 5106 */
[7899, 9, 4, 85, 1250, 329],
/* 5107 */
[7900, 4, 329],
/* 5108 */
[7901, 4, 329],
/* 5109 */
[7902, 4, 329],
/* 5110 */
[7904, 329, 5106, 5107, 5109, 5111, 5112, 5108],
/* 5111 */
[7905, 4, 329],
/* 5112 */
[7906, 4, 329],
/* 5113 */
[7907, 9, 85],
/* 5114 */
[7909, 9, 85],
/* 5115 */
[7911, 12, 4, 9, 2076, 2084, 85, 1250],
/* 5116 */
[7874, 66, 12, 4, 9, 403, 85],
/* 5117 */
[7877, 12, 9, 4, 85, 403],
/* 5118 */
2774,
/* 5119 */
[7878, 12, 4, 617],
/* 5120 */
[7879, 9, 85],
/* 5121 */
[7880, 12],
/* 5122 */
[7881, 12, 4, 9, 403, 85],
/* 5123 */
[7883, 12, 9, 5125, 85],
/* 5124 */
[7884, 12, 9, 85],
/* 5125 */
[7885, 9, 839, 85, 5124],
/* 5126 */
[7886, 12, 4, 9, 1253, 85],
/* 5127 */
[7887, 66, 12, 9, 85],
/* 5128 */
2784,
/* 5129 */
[7889, 12, 4, 9, 2078, 5127, 403, 85],
/* 5130 */
[7890, 12, 5128],
/* 5131 */
[7891, 12, 4, 9, 5134, 617, 403, 5146, 85],
/* 5132 */
[7894, 66, 4, 9, 2080, 85],
/* 5133 */
[7895, 12, 837, 9, 4, 2079, 1252, 85, 2097],
/* 5134 */
[7806, 4, 5144, 2082, 5143, 2084, 5135],
/* 5135 */
[7807, 5137, 5136, 5140, 5138, 5142],
/* 5136 */
2682,
/* 5137 */
2683,
/* 5138 */
[7808, 5139],
/* 5139 */
2685,
/* 5140 */
[7809, 5141],
/* 5141 */
2685,
/* 5142 */
2688,
/* 5143 */
2692,
/* 5144 */
[7812, 5145],
/* 5145 */
2694,
/* 5146 */
[7912, 4, 214, 5154, 5153, 5151, 5149, 5152, 5150, 5148, 215, 2081, 832, 5155, 5156],
/* 5147 */
2810,
/* 5148 */
[7913, 4, 214],
/* 5149 */
[7914, 216, 12, 4, 215, 214, 618],
/* 5150 */
[7916, 4, 833, 214],
/* 5151 */
[7917, 12, 4, 215, 214, 618],
/* 5152 */
[7918, 66, 4, 214, 833],
/* 5153 */
[7919, 216, 12, 4, 215, 214, 486],
/* 5154 */
[7920, 4, 215, 214, 486],
/* 5155 */
[7921, 4, 215, 214],
/* 5156 */
[7922, 4, 5157, 215, 832, 214, 618, 486],
/* 5157 */
2820,
/* 5158 */
[7925, 66, 833, 832, 215],
/* 5159 */
[7928, 5160],
/* 5160 */
[7929, 5161],
/* 5161 */
2825,
/* 5162 */
[7896, 7784],
/* 5163 */
2791,
/* 5164 */
[7814, 5165],
/* 5165 */
2697,
/* 5166 */
2689,
/* 5167 */
[7810, 2083],
/* 5168 */
2827,
/* 5169 */
1578,
/* 5170 */
[7930, 5178, 5190, 836, 5210],
/* 5171 */
[7931, 5172],
/* 5172 */
[7932, 2086, 5181, 5200],
/* 5173 */
[7934, 5194, 835],
/* 5174 */
1580,
/* 5175 */
1581,
/* 5176 */
2836,
/* 5177 */
[7935, 487],
/* 5178 */
[7937, 5185, 5186, 834, 2101, 5220],
/* 5179 */
[7938, 5174, 2086, 2087, 2089, 5206, 5207, 5208, 268, 155],
/* 5180 */
1584,
/* 5181 */
[7939, 2089, 5196],
/* 5182 */
[7941, 2088, 2100],
/* 5183 */
[7946, 5201, 5202, 5203, 268, 5216],
/* 5184 */
[7947, 2092, 331],
/* 5185 */
[7948, 5184, 5204, 331],
/* 5186 */
[7949, 2090, 2092, 5188, 268, 2094, 2095, 5169, 331, 2096],
/* 5187 */
[7950, 2090, 2096],
/* 5188 */
1591,
/* 5189 */
984,
/* 5190 */
[7951, 2091, 5193, 5198],
/* 5191 */
2850,
/* 5192 */
2851,
/* 5193 */
[7953, 155],
/* 5194 */
[7954, 155],
/* 5195 */
[7955, 834, 836, 2085],
/* 5196 */
[7956, 1254, 404, 331],
/* 5197 */
[7957, 331],
/* 5198 */
[7958, 5173, 835],
/* 5199 */
[7959, 2085],
/* 5200 */
[7960, 834, 268],
/* 5201 */
[7961, 5175],
/* 5202 */
2861,
/* 5203 */
[7962, 487],
/* 5204 */
[7964, 2095, 5218],
/* 5205 */
2865,
/* 5206 */
2866,
/* 5207 */
[7966, 5192],
/* 5208 */
2868,
/* 5209 */
[7971, 1257, 268, 1256, 404, 2100],
/* 5210 */
2870,
/* 5211 */
[7978, 155],
/* 5212 */
[7979, 5211, 330],
/* 5213 */
[7980, 330],
/* 5214 */
[7981, 5182, 1257, 330],
/* 5215 */
[7982, 155],
/* 5216 */
[7984, 404, 330],
/* 5217 */
[7986, 2099, 5176, 5199],
/* 5218 */
[7990, 487, 331],
/* 5219 */
[7991, 5191, 487],
/* 5220 */
[7992, 2093, 5187, 2094],
/* 5221 */
2809,
/* 5222 */
[7819, 5229],
/* 5223 */
[7820, 5230],
/* 5224 */
[7821, 5231],
/* 5225 */
[7824, 5234],
/* 5226 */
[7829, 5260, 5259, 5251],
/* 5227 */
[7830, 5253],
/* 5228 */
[7831, 131],
/* 5229 */
[7832, 131],
/* 5230 */
[7833, 131, 5254],
/* 5231 */
[7834, 131, 5255],
/* 5232 */
[7835, 1267, 269],
/* 5233 */
[7836, 5256, 269],
/* 5234 */
[7837, 5257, 269],
/* 5235 */
[7838, 1267, 269],
/* 5236 */
[7839, 1267, 5258, 269],
/* 5237 */
2746,
/* 5238 */
2747,
/* 5239 */
[7841, 1259, 488],
/* 5240 */
[7844, 131],
/* 5241 */
[7848, 1259],
/* 5242 */
[7849, 1259],
/* 5243 */
[7850, 131, 1265, 1266, 1263, 488],
/* 5244 */
1559,
/* 5245 */
[7852, 131, 620],
/* 5246 */
[7855, 131, 2111, 1258, 2108],
/* 5247 */
[7858, 5248, 1260],
/* 5248 */
1564,
/* 5249 */
[7860, 1260],
/* 5250 */
[7862, 5239, 488, 841, 269],
/* 5251 */
[7863, 1258, 5250, 269],
/* 5252 */
[7864, 5238, 5244, 841, 620, 2112],
/* 5253 */
[7865, 619],
/* 5254 */
[7866, 620, 1264],
/* 5255 */
[7867, 1264, 2110],
/* 5256 */
[7868, 5249, 1264],
/* 5257 */
[7869, 619, 5246],
/* 5258 */
428,
/* 5259 */
[7870, 5247, 2112],
/* 5260 */
[7872, 5252, 841],
/* 5261 */
[7873, 838, 4, 9, 5369, 5377, 489, 2125, 86],
/* 5262 */
[7874, 66, 12, 4, 9, 405, 86],
/* 5263 */
[7877, 12, 9, 4, 86, 405],
/* 5264 */
2774,
/* 5265 */
[7878, 12, 4, 489],
/* 5266 */
[7879, 9, 86],
/* 5267 */
[7880, 12],
/* 5268 */
[7881, 12, 4, 9, 405, 86],
/* 5269 */
[7883, 12, 9, 5271, 86],
/* 5270 */
[7884, 12, 9, 86],
/* 5271 */
[7885, 9, 839, 86, 5270],
/* 5272 */
[7886, 12, 4, 9, 1271, 86],
/* 5273 */
[7887, 66, 12, 9, 86],
/* 5274 */
2784,
/* 5275 */
[7889, 12, 4, 9, 2118, 5273, 405, 86],
/* 5276 */
[7890, 12, 5274],
/* 5277 */
[7891, 12, 4, 9, 5280, 489, 405, 2125, 86],
/* 5278 */
[7894, 66, 4, 9, 2120, 86],
/* 5279 */
[7895, 12, 837, 9, 4, 2119, 1269, 86, 2139],
/* 5280 */
[7806, 4, 5293, 2122, 5292, 5291, 5281],
/* 5281 */
[7807, 5283, 5282, 5286, 5284, 5288],
/* 5282 */
2682,
/* 5283 */
2683,
/* 5284 */
[7808, 5285],
/* 5285 */
2685,
/* 5286 */
[7809, 5287],
/* 5287 */
2685,
/* 5288 */
2688,
/* 5289 */
2689,
/* 5290 */
[7810, 2121],
/* 5291 */
[7811, 5289, 2121, 5290],
/* 5292 */
2692,
/* 5293 */
[7812, 5294],
/* 5294 */
2694,
/* 5295 */
[7928, 5296],
/* 5296 */
[7929, 5297],
/* 5297 */
2825,
/* 5298 */
[7896, 7785],
/* 5299 */
2791,
/* 5300 */
[7814, 5301],
/* 5301 */
2697,
/* 5302 */
[7898, 12, 2102, 4, 9, 5373, 5372, 5374, 2140, 489, 86],
/* 5303 */
[7899, 9, 4, 86, 1270, 332],
/* 5304 */
[7900, 4, 332],
/* 5305 */
[7901, 4, 332],
/* 5306 */
[7902, 4, 332],
/* 5307 */
[7904, 332, 5303, 5304, 5306, 5308, 5309, 5305],
/* 5308 */
[7905, 4, 332],
/* 5309 */
[7906, 4, 332],
/* 5310 */
[7907, 9, 86],
/* 5311 */
[7909, 9, 86],
/* 5312 */
[7911, 12, 4, 9, 2123, 5315, 86, 1270],
/* 5313 */
2689,
/* 5314 */
[7810, 2124],
/* 5315 */
[7811, 5313, 2124, 5314],
/* 5316 */
2809,
/* 5317 */
2810,
/* 5318 */
[7913, 4, 217],
/* 5319 */
[7914, 216, 12, 4, 218, 217, 621],
/* 5320 */
[7916, 4, 843, 217],
/* 5321 */
[7917, 12, 4, 218, 217, 621],
/* 5322 */
[7918, 66, 4, 217, 843],
/* 5323 */
[7919, 216, 12, 4, 218, 217, 490],
/* 5324 */
[7920, 4, 218, 217, 490],
/* 5325 */
[7921, 4, 218, 217],
/* 5326 */
[7922, 4, 5327, 218, 842, 217, 621, 490],
/* 5327 */
2820,
/* 5328 */
[7925, 66, 843, 842, 218],
/* 5329 */
2827,
/* 5330 */
[7930, 5338, 5348, 846, 5368],
/* 5331 */
[7931, 5332],
/* 5332 */
[7932, 2129, 5340, 5358],
/* 5333 */
[7934, 5352, 844],
/* 5334 */
1580,
/* 5335 */
1581,
/* 5336 */
2836,
/* 5337 */
[7935, 491],
/* 5338 */
[7937, 5344, 5345, 622, 2143, 5380],
/* 5339 */
1584,
/* 5340 */
[7939, 2133, 5354],
/* 5341 */
[7941, 2132, 2142],
/* 5342 */
[7946, 5359, 5360, 5361, 219, 5375],
/* 5343 */
[7947, 2135, 335],
/* 5344 */
[7948, 5343, 5362, 335],
/* 5345 */
[7949, 1272, 2135, 2137, 219, 1275, 2138, 2127, 335, 1276],
/* 5346 */
[7950, 1272, 1276],
/* 5347 */
984,
/* 5348 */
[7951, 2134, 5351, 5356],
/* 5349 */
2850,
/* 5350 */
2851,
/* 5351 */
[7953, 156],
/* 5352 */
[7954, 156],
/* 5353 */
[7955, 622, 846, 2128],
/* 5354 */
[7956, 1273, 333, 335],
/* 5355 */
[7957, 335],
/* 5356 */
[7958, 5333, 844],
/* 5357 */
[7959, 2128],
/* 5358 */
[7960, 622, 219],
/* 5359 */
[7961, 5335],
/* 5360 */
2861,
/* 5361 */
[7962, 491],
/* 5362 */
[7964, 2138, 5378],
/* 5363 */
2865,
/* 5364 */
2866,
/* 5365 */
[7966, 5350],
/* 5366 */
2868,
/* 5367 */
[7971, 847, 219, 845, 333, 2142],
/* 5368 */
2870,
/* 5369 */
[7975, 2131, 622],
/* 5370 */
[7978, 156],
/* 5371 */
[7979, 5370, 334],
/* 5372 */
[7980, 334],
/* 5373 */
[7981, 5341, 847, 334],
/* 5374 */
[7982, 156],
/* 5375 */
[7984, 333, 334],
/* 5376 */
[7986, 2141, 5336, 5357],
/* 5377 */
[7987, 1272, 2137, 847, 219, 845, 1275, 333, 2127, 1276],
/* 5378 */
[7990, 491, 335],
/* 5379 */
[7991, 5349, 491],
/* 5380 */
[7992, 2136, 5346, 1275],
/* 5381 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(35)["default"];

	exports.__esModule = true;

	var _path = __webpack_require__(289);

	var _babelTemplate = __webpack_require__(5427);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var buildWrapper = _babelTemplate2["default"]("\n  (function (global, factory) {\n    if (typeof define === \"function\" && define.amd) {\n      define(MODULE_NAME, AMD_ARGUMENTS, factory);\n    } else if (typeof exports !== \"undefined\") {\n      factory(COMMON_ARGUMENTS);\n    } else {\n      var mod = { exports: {} };\n      factory(BROWSER_ARGUMENTS);\n      global.GLOBAL_ARG = mod.exports;\n    }\n  })(this, FUNC);\n");

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  function isValidDefine(path) {
	    if (!path.isExpressionStatement()) return;

	    var expr = path.get("expression");
	    if (!expr.isCallExpression()) return false;
	    if (!expr.get("callee").isIdentifier({ name: "define" })) return false;

	    var args = expr.get("arguments");
	    if (args.length === 3 && !args.shift().isStringLiteral()) return false;
	    if (args.length !== 2) return false;
	    if (!args.shift().isArrayExpression()) return false;
	    if (!args.shift().isFunctionExpression()) return false;

	    return true;
	  }

	  return {
	    inherits: __webpack_require__(1985),

	    visitor: {
	      Program: {
	        exit: function exit(path) {
	          var last = path.get("body").pop();
	          if (!isValidDefine(last)) return;

	          var call = last.node.expression;
	          var args = call.arguments;

	          var moduleName = args.length === 3 ? args.shift() : null;
	          var amdArgs = call.arguments[0];
	          var func = call.arguments[1];

	          var commonArgs = amdArgs.elements.map(function (arg) {
	            if (arg.value === "module" || arg.value === "exports") {
	              return t.identifier(arg.value);
	            } else {
	              return t.callExpression(t.identifier("require"), [arg]);
	            }
	          });

	          var browserArgs = amdArgs.elements.map(function (arg) {
	            if (arg.value === "module") {
	              return t.identifier("mod");
	            } else if (arg.value === "exports") {
	              return t.memberExpression(t.identifier("mod"), t.identifier("exports"));
	            } else {
	              return t.memberExpression(t.identifier("global"), t.identifier(t.toIdentifier(_path.basename(arg.value, _path.extname(arg.value)))));
	            }
	          });

	          var globalArg = t.identifier(t.toIdentifier(moduleName ? moduleName.value : this.file.opts.basename));

	          last.replaceWith(buildWrapper({
	            MODULE_NAME: moduleName,
	            BROWSER_ARGUMENTS: browserArgs,
	            AMD_ARGUMENTS: amdArgs,
	            COMMON_ARGUMENTS: commonArgs,
	            GLOBAL_ARG: globalArg,
	            FUNC: func
	          }));
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 5382 */
[7817, 5393],
/* 5383 */
[7819, 5395],
/* 5384 */
[7820, 5396],
/* 5385 */
[7821, 5397],
/* 5386 */
[7822, 5398],
/* 5387 */
[7824, 5400],
/* 5388 */
[7826, 5401],
/* 5389 */
[7827, 5385, 5384, 5383],
/* 5390 */
[7828, 623, 5387],
/* 5391 */
2107,
/* 5392 */
[7829, 5426, 5425, 5417],
/* 5393 */
[7830, 5419],
/* 5394 */
[7831, 132],
/* 5395 */
[7832, 132],
/* 5396 */
[7833, 132, 5420],
/* 5397 */
[7834, 132, 5421],
/* 5398 */
[7835, 1286, 270],
/* 5399 */
[7836, 5422, 270],
/* 5400 */
[7837, 5423, 270],
/* 5401 */
[7838, 1286, 270],
/* 5402 */
[7839, 1286, 5424, 270],
/* 5403 */
2746,
/* 5404 */
2747,
/* 5405 */
[7841, 1278, 492],
/* 5406 */
[7844, 132],
/* 5407 */
[7848, 1278],
/* 5408 */
[7849, 1278],
/* 5409 */
[7850, 132, 1284, 1285, 1282, 492],
/* 5410 */
1559,
/* 5411 */
[7852, 132, 625],
/* 5412 */
[7855, 132, 2150, 1277, 2147],
/* 5413 */
[7858, 5414, 1279],
/* 5414 */
1564,
/* 5415 */
[7860, 1279],
/* 5416 */
[7862, 5405, 492, 849, 270],
/* 5417 */
[7863, 1277, 5416, 270],
/* 5418 */
[7864, 5404, 5410, 849, 625, 2151],
/* 5419 */
[7865, 624],
/* 5420 */
[7866, 625, 1283],
/* 5421 */
[7867, 1283, 2149],
/* 5422 */
[7868, 5415, 1283],
/* 5423 */
[7869, 624, 5412],
/* 5424 */
428,
/* 5425 */
[7870, 5413, 2151],
/* 5426 */
[7872, 5418, 849],
/* 5427 */
[7873, 2145, 35, 74, 5535, 5543, 493, 2164, 87],
/* 5428 */
[7874, 113, 98, 35, 74, 406, 87],
/* 5429 */
[7877, 98, 74, 35, 87, 406],
/* 5430 */
2774,
/* 5431 */
[7878, 98, 35, 493],
/* 5432 */
[7879, 74, 87],
/* 5433 */
[7880, 98],
/* 5434 */
[7881, 98, 35, 74, 406, 87],
/* 5435 */
[7883, 98, 74, 5437, 87],
/* 5436 */
[7884, 98, 74, 87],
/* 5437 */
[7885, 74, 2146, 87, 5436],
/* 5438 */
[7886, 98, 35, 74, 1290, 87],
/* 5439 */
[7887, 113, 98, 74, 87],
/* 5440 */
2784,
/* 5441 */
[7889, 98, 35, 74, 2157, 5439, 406, 87],
/* 5442 */
[7890, 98, 5440],
/* 5443 */
[7891, 98, 35, 74, 5446, 493, 406, 2164, 87],
/* 5444 */
[7894, 113, 35, 74, 2159, 87],
/* 5445 */
[7895, 98, 2144, 74, 35, 2158, 1288, 87, 2178],
/* 5446 */
[7806, 35, 5459, 2161, 5458, 5457, 5447],
/* 5447 */
[7807, 5449, 5448, 5452, 5450, 5454],
/* 5448 */
2682,
/* 5449 */
2683,
/* 5450 */
[7808, 5451],
/* 5451 */
2685,
/* 5452 */
[7809, 5453],
/* 5453 */
2685,
/* 5454 */
2688,
/* 5455 */
2689,
/* 5456 */
[7810, 2160],
/* 5457 */
[7811, 5455, 2160, 5456],
/* 5458 */
2692,
/* 5459 */
[7812, 5460],
/* 5460 */
2694,
/* 5461 */
[7928, 5462],
/* 5462 */
[7929, 5463],
/* 5463 */
2825,
/* 5464 */
[7896, 7786],
/* 5465 */
2791,
/* 5466 */
[7814, 5467],
/* 5467 */
2697,
/* 5468 */
[7898, 98, 5382, 35, 74, 5539, 5538, 5540, 2179, 493, 87],
/* 5469 */
[7899, 74, 35, 87, 1289, 336],
/* 5470 */
[7900, 35, 336],
/* 5471 */
[7901, 35, 336],
/* 5472 */
[7902, 35, 336],
/* 5473 */
[7904, 336, 5469, 5470, 5472, 5474, 5475, 5471],
/* 5474 */
[7905, 35, 336],
/* 5475 */
[7906, 35, 336],
/* 5476 */
[7907, 74, 87],
/* 5477 */
[7909, 74, 87],
/* 5478 */
[7911, 98, 35, 74, 2162, 5481, 87, 1289],
/* 5479 */
2689,
/* 5480 */
[7810, 2163],
/* 5481 */
[7811, 5479, 2163, 5480],
/* 5482 */
2809,
/* 5483 */
2810,
/* 5484 */
[7913, 35, 220],
/* 5485 */
[7914, 623, 98, 35, 221, 220, 626],
/* 5486 */
[7916, 35, 851, 220],
/* 5487 */
[7917, 98, 35, 221, 220, 626],
/* 5488 */
[7918, 113, 35, 220, 851],
/* 5489 */
[7919, 623, 98, 35, 221, 220, 494],
/* 5490 */
[7920, 35, 221, 220, 494],
/* 5491 */
[7921, 35, 221, 220],
/* 5492 */
[7922, 35, 5493, 221, 850, 220, 626, 494],
/* 5493 */
2820,
/* 5494 */
[7925, 113, 851, 850, 221],
/* 5495 */
2827,
/* 5496 */
[7930, 5504, 5514, 854, 5534],
/* 5497 */
[7931, 5498],
/* 5498 */
[7932, 2168, 5506, 5524],
/* 5499 */
[7934, 5518, 852],
/* 5500 */
1580,
/* 5501 */
1581,
/* 5502 */
2836,
/* 5503 */
[7935, 495],
/* 5504 */
[7937, 5510, 5511, 627, 2182, 5546],
/* 5505 */
1584,
/* 5506 */
[7939, 2172, 5520],
/* 5507 */
[7941, 2171, 2181],
/* 5508 */
[7946, 5525, 5526, 5527, 222, 5541],
/* 5509 */
[7947, 2174, 339],
/* 5510 */
[7948, 5509, 5528, 339],
/* 5511 */
[7949, 1291, 2174, 2176, 222, 1294, 2177, 2166, 339, 1295],
/* 5512 */
[7950, 1291, 1295],
/* 5513 */
984,
/* 5514 */
[7951, 2173, 5517, 5522],
/* 5515 */
2850,
/* 5516 */
2851,
/* 5517 */
[7953, 157],
/* 5518 */
[7954, 157],
/* 5519 */
[7955, 627, 854, 2167],
/* 5520 */
[7956, 1292, 337, 339],
/* 5521 */
[7957, 339],
/* 5522 */
[7958, 5499, 852],
/* 5523 */
[7959, 2167],
/* 5524 */
[7960, 627, 222],
/* 5525 */
[7961, 5501],
/* 5526 */
2861,
/* 5527 */
[7962, 495],
/* 5528 */
[7964, 2177, 5544],
/* 5529 */
2865,
/* 5530 */
2866,
/* 5531 */
[7966, 5516],
/* 5532 */
2868,
/* 5533 */
[7971, 855, 222, 853, 337, 2181],
/* 5534 */
2870,
/* 5535 */
[7975, 2170, 627],
/* 5536 */
[7978, 157],
/* 5537 */
[7979, 5536, 338],
/* 5538 */
[7980, 338],
/* 5539 */
[7981, 5507, 855, 338],
/* 5540 */
[7982, 157],
/* 5541 */
[7984, 337, 338],
/* 5542 */
[7986, 2180, 5502, 5523],
/* 5543 */
[7987, 1291, 2176, 855, 222, 853, 1294, 337, 2166, 1295],
/* 5544 */
[7990, 495, 339],
/* 5545 */
[7991, 5515, 495],
/* 5546 */
[7992, 2175, 5512, 1294],
/* 5547 */
[7998, 109, 1307, 36, 67, 5548, 856, 79],
/* 5548 */
[7997, 67, 79],
/* 5549 */
[7874, 109, 88, 36, 67, 407, 79],
/* 5550 */
[7877, 88, 67, 36, 79, 407],
/* 5551 */
2774,
/* 5552 */
[7878, 88, 36, 628],
/* 5553 */
[7879, 67, 79],
/* 5554 */
[7880, 88],
/* 5555 */
[7881, 88, 36, 67, 407, 79],
/* 5556 */
[7883, 88, 67, 5558, 79],
/* 5557 */
[7884, 88, 67, 79],
/* 5558 */
[7885, 67, 2213, 79, 5557],
/* 5559 */
[7886, 88, 36, 67, 1298, 79],
/* 5560 */
[7887, 109, 88, 67, 79],
/* 5561 */
2784,
/* 5562 */
[7889, 88, 36, 67, 2184, 5560, 407, 79],
/* 5563 */
[7890, 88, 5561],
/* 5564 */
[7891, 88, 36, 67, 5567, 628, 407, 5582, 79],
/* 5565 */
[7894, 109, 36, 67, 2186, 79],
/* 5566 */
[7895, 88, 2212, 67, 36, 2185, 856, 79, 5621],
/* 5567 */
[7806, 36, 5580, 2196, 5579, 5578, 5568],
/* 5568 */
[7807, 5570, 5569, 5573, 5571, 5575],
/* 5569 */
2682,
/* 5570 */
2683,
/* 5571 */
[7808, 5572],
/* 5572 */
2685,
/* 5573 */
[7809, 5574],
/* 5574 */
2685,
/* 5575 */
2688,
/* 5576 */
2689,
/* 5577 */
[7810, 2187],
/* 5578 */
[7811, 5576, 2187, 5577],
/* 5579 */
2692,
/* 5580 */
[7812, 5581],
/* 5581 */
2694,
/* 5582 */
[7912, 36, 223, 5590, 5589, 5587, 5585, 5588, 5586, 5584, 224, 2188, 857, 5591, 5592],
/* 5583 */
2810,
/* 5584 */
[7913, 36, 223],
/* 5585 */
[7914, 631, 88, 36, 224, 223, 629],
/* 5586 */
[7916, 36, 858, 223],
/* 5587 */
[7917, 88, 36, 224, 223, 629],
/* 5588 */
[7918, 109, 36, 223, 858],
/* 5589 */
[7919, 631, 88, 36, 224, 223, 496],
/* 5590 */
[7920, 36, 224, 223, 496],
/* 5591 */
[7921, 36, 224, 223],
/* 5592 */
[7922, 36, 5593, 224, 857, 223, 629, 496],
/* 5593 */
2820,
/* 5594 */
[7925, 109, 858, 857, 224],
/* 5595 */
[7928, 5596],
/* 5596 */
[7929, 5597],
/* 5597 */
2825,
/* 5598 */
[7896, 7787],
/* 5599 */
2791,
/* 5600 */
1580,
/* 5601 */
981,
/* 5602 */
2836,
/* 5603 */
[7935, 861],
/* 5604 */
[7938, 5600, 5601, 2190, 5607, 5616, 5617, 5618, 860, 497],
/* 5605 */
1584,
/* 5606 */
[7940, 5613],
/* 5607 */
[7942, 5606, 861],
/* 5608 */
[7944, 5615],
/* 5609 */
1590,
/* 5610 */
2850,
/* 5611 */
2851,
/* 5612 */
[7955, 2191, 1301, 2189],
/* 5613 */
[7957, 5620],
/* 5614 */
[7959, 2189],
/* 5615 */
2865,
/* 5616 */
2866,
/* 5617 */
[7966, 5611],
/* 5618 */
2868,
/* 5619 */
[7971, 2194, 860, 1300, 630, 5626],
/* 5620 */
[7972, 497],
/* 5621 */
[7974, 5604, 2191, 1301],
/* 5622 */
[7978, 497],
/* 5623 */
[7979, 5622, 859],
/* 5624 */
[7983, 859],
/* 5625 */
[7986, 2195, 5602, 5614],
/* 5626 */
[7989, 2194, 860, 1300, 630, 497],
/* 5627 */
[7991, 5610, 861],
/* 5628 */
1601,
/* 5629 */
[7814, 5630],
/* 5630 */
2697,
/* 5631 */
[7898, 88, 5696, 36, 67, 5689, 5688, 5690, 5691, 628, 79],
/* 5632 */
[7899, 67, 36, 79, 1302, 340],
/* 5633 */
[7900, 36, 340],
/* 5634 */
[7901, 36, 340],
/* 5635 */
[7902, 36, 340],
/* 5636 */
[7904, 340, 5632, 5633, 5635, 5637, 5638, 5634],
/* 5637 */
[7905, 36, 340],
/* 5638 */
[7906, 36, 340],
/* 5639 */
[7907, 67, 79],
/* 5640 */
[7909, 67, 79],
/* 5641 */
[7911, 88, 36, 67, 2197, 5644, 79, 1302],
/* 5642 */
2689,
/* 5643 */
[7810, 2198],
/* 5644 */
[7811, 5642, 2198, 5643],
/* 5645 */
2827,
/* 5646 */
1578,
/* 5647 */
[7930, 5654, 5667, 2206, 5684],
/* 5648 */
[7931, 5649],
/* 5649 */
[7932, 2199, 5657, 5674],
/* 5650 */
[7934, 5670, 862],
/* 5651 */
1580,
/* 5652 */
1581,
/* 5653 */
[7936, 5656, 863],
/* 5654 */
[7937, 5662, 5663, 1303, 2211, 5694],
/* 5655 */
[7938, 5651, 2199, 5653, 2201, 5680, 5681, 5682, 343, 158],
/* 5656 */
1584,
/* 5657 */
[7939, 2201, 5671],
/* 5658 */
[7941, 2200, 2210],
/* 5659 */
[7944, 5679],
/* 5660 */
[7946, 5675, 5676, 5677, 343, 5692],
/* 5661 */
[7947, 2203, 342],
/* 5662 */
[7948, 5661, 5678, 342],
/* 5663 */
[7949, 2202, 2203, 5665, 343, 2207, 2208, 5646, 342, 2209],
/* 5664 */
[7950, 2202, 2209],
/* 5665 */
1591,
/* 5666 */
984,
/* 5667 */
[7951, 5659, 5669, 5673],
/* 5668 */
2851,
/* 5669 */
[7953, 158],
/* 5670 */
[7954, 158],
/* 5671 */
[7956, 2205, 498, 342],
/* 5672 */
[7957, 342],
/* 5673 */
[7958, 5650, 862],
/* 5674 */
[7960, 1303, 343],
/* 5675 */
[7961, 5652],
/* 5676 */
2861,
/* 5677 */
[7962, 863],
/* 5678 */
[7964, 2208, 5693],
/* 5679 */
2865,
/* 5680 */
2866,
/* 5681 */
[7966, 5668],
/* 5682 */
2868,
/* 5683 */
[7971, 1306, 343, 1305, 498, 2210],
/* 5684 */
2870,
/* 5685 */
[7974, 5655, 1303, 2206],
/* 5686 */
[7978, 158],
/* 5687 */
[7979, 5686, 341],
/* 5688 */
[7980, 341],
/* 5689 */
[7981, 5658, 1306, 341],
/* 5690 */
[7982, 158],
/* 5691 */
[7983, 341],
/* 5692 */
[7984, 498, 341],
/* 5693 */
[7990, 863, 342],
/* 5694 */
[7992, 2204, 5664, 2207],
/* 5695 */
2809,
/* 5696 */
[7817, 5707],
/* 5697 */
[7819, 5709],
/* 5698 */
[7820, 5710],
/* 5699 */
[7821, 5711],
/* 5700 */
[7822, 5712],
/* 5701 */
[7824, 5714],
/* 5702 */
[7826, 5715],
/* 5703 */
[7827, 5699, 5698, 5697],
/* 5704 */
[7828, 631, 5701],
/* 5705 */
2107,
/* 5706 */
[7829, 5740, 5739, 5731],
/* 5707 */
[7830, 5733],
/* 5708 */
[7831, 133],
/* 5709 */
[7832, 133],
/* 5710 */
[7833, 133, 5734],
/* 5711 */
[7834, 133, 5735],
/* 5712 */
[7835, 1317, 271],
/* 5713 */
[7836, 5736, 271],
/* 5714 */
[7837, 5737, 271],
/* 5715 */
[7838, 1317, 271],
/* 5716 */
[7839, 1317, 5738, 271],
/* 5717 */
2746,
/* 5718 */
2747,
/* 5719 */
[7841, 1309, 499],
/* 5720 */
[7844, 133],
/* 5721 */
[7848, 1309],
/* 5722 */
[7849, 1309],
/* 5723 */
[7850, 133, 1315, 1316, 1313, 499],
/* 5724 */
1559,
/* 5725 */
[7852, 133, 633],
/* 5726 */
[7855, 133, 2217, 1308, 2214],
/* 5727 */
[7858, 5728, 1310],
/* 5728 */
1564,
/* 5729 */
[7860, 1310],
/* 5730 */
[7862, 5719, 499, 865, 271],
/* 5731 */
[7863, 1308, 5730, 271],
/* 5732 */
[7864, 5718, 5724, 865, 633, 2218],
/* 5733 */
[7865, 632],
/* 5734 */
[7866, 633, 1314],
/* 5735 */
[7867, 1314, 2216],
/* 5736 */
[7868, 5729, 1314],
/* 5737 */
[7869, 632, 5726],
/* 5738 */
428,
/* 5739 */
[7870, 5727, 2218],
/* 5740 */
[7872, 5732, 865],
/* 5741 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(52)["default"];

	var _interopRequireDefault = __webpack_require__(13)["default"];

	var _interopRequireWildcard = __webpack_require__(46)["default"];

	exports.__esModule = true;

	var _babelHelperGetFunctionArity = __webpack_require__(5746);

	var _babelHelperGetFunctionArity2 = _interopRequireDefault(_babelHelperGetFunctionArity);

	var _babelHelperCallDelegate = __webpack_require__(5744);

	var _babelHelperCallDelegate2 = _interopRequireDefault(_babelHelperCallDelegate);

	var _babelTemplate = __webpack_require__(2236);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _babelTypes = __webpack_require__(54);

	var t = _interopRequireWildcard(_babelTypes);

	var buildDefaultParam = _babelTemplate2["default"]("\n  let VARIABLE_NAME =\n    ARGUMENTS.length <= ARGUMENT_KEY || ARGUMENTS[ARGUMENT_KEY] === undefined ?\n      DEFAULT_VALUE\n    :\n      ARGUMENTS[ARGUMENT_KEY];\n");

	var buildDefaultParamAssign = _babelTemplate2["default"]("\n  if (VARIABLE_NAME === undefined) VARIABLE_NAME = DEFAULT_VALUE;\n");

	var buildCutOff = _babelTemplate2["default"]("\n  let $0 = $1[$2];\n");

	function hasDefaults(node) {
	  for (var _iterator = (node.params /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var param = _ref;

	    if (!t.isIdentifier(param)) return true;
	  }
	  return false;
	}

	var iifeVisitor = {
	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    var name = path.node.name;
	    if (name === "eval" || path.scope.hasOwnBinding(name) && path.scope.getOwnBinding(name).kind !== "param") {
	      state.iife = true;
	      path.stop();
	    }
	  },

	  Scope: function Scope(path) {
	    // different bindings
	    path.skip();
	  }
	};

	var visitor = {
	  Function: function Function(path) {
	    var node = path.node;
	    var scope = path.scope;

	    if (!hasDefaults(node)) return;

	    // ensure it's a block, useful for arrow functions
	    path.ensureBlock();

	    var state = {
	      iife: false,
	      scope: scope
	    };

	    var body = [];

	    //
	    var argsIdentifier = t.identifier("arguments");
	    argsIdentifier._shadowedFunctionLiteral = path;

	    // push a default parameter definition
	    function pushDefNode(left, right, i) {
	      var defNode = undefined;
	      if (exceedsLastNonDefault(i) || t.isPattern(left)) {
	        defNode = buildDefaultParam({
	          VARIABLE_NAME: left,
	          DEFAULT_VALUE: right,
	          ARGUMENT_KEY: t.numericLiteral(i),
	          ARGUMENTS: argsIdentifier
	        });
	      } else {
	        defNode = buildDefaultParamAssign({
	          VARIABLE_NAME: left,
	          DEFAULT_VALUE: right
	        });
	      }
	      defNode._blockHoist = node.params.length - i;
	      body.push(defNode);
	    }

	    // check if an index exceeds the functions arity
	    function exceedsLastNonDefault(i) {
	      return i + 1 > lastNonDefaultParam;
	    }

	    //
	    var lastNonDefaultParam = _babelHelperGetFunctionArity2["default"](node);

	    //
	    var params = path.get("params");
	    for (var i = 0; i < params.length; i++) {
	      var param = params[i];

	      if (!param.isAssignmentPattern()) {
	        if (!param.isIdentifier()) {
	          param.traverse(iifeVisitor, state);
	        }

	        continue;
	      }

	      var left = param.get("left");
	      var right = param.get("right");

	      //
	      if (exceedsLastNonDefault(i) || left.isPattern()) {
	        var placeholder = scope.generateUidIdentifier("x");
	        placeholder._isDefaultPlaceholder = true;
	        node.params[i] = placeholder;
	      } else {
	        node.params[i] = left.node;
	      }

	      //
	      if (!state.iife) {
	        if (right.isIdentifier() && scope.hasOwnBinding(right.node.name) && scope.getOwnBinding(right.node.name).kind !== "param") {
	          // the right hand side references a parameter
	          state.iife = true;
	        } else {
	          right.traverse(iifeVisitor, state);
	        }
	      }

	      pushDefNode(left.node, right.node, i);
	    }

	    // add declarations for trailing parameters
	    for (var i = lastNonDefaultParam + 1; i < node.params.length; i++) {
	      var param = node.params[i];
	      if (param._isDefaultPlaceholder) continue;

	      var declar = buildCutOff(param, argsIdentifier, t.numericLiteral(i));
	      declar._blockHoist = node.params.length - i;
	      body.push(declar);
	    }

	    // we need to cut off all trailing parameters
	    node.params = node.params.slice(0, lastNonDefaultParam);

	    if (state.iife) {
	      body.push(_babelHelperCallDelegate2["default"](path, scope));
	      path.set("body", t.blockStatement(body));
	    } else {
	      path.get("body").unshiftContainer("body", body);
	    }
	  }
	};
	exports.visitor = visitor;

/***/ },
/* 5742 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(46)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(54);

	var t = _interopRequireWildcard(_babelTypes);

	var visitor = {
	  Function: function Function(path) {
	    var params /*: Array*/ = path.get("params");

	    for (var i = 0; i < params.length; i++) {
	      var param = params[i];
	      if (param.isArrayPattern() || param.isObjectPattern()) {
	        var uid = path.scope.generateUidIdentifier("ref");

	        var declar = t.variableDeclaration("let", [t.variableDeclarator(param.node, uid)]);
	        declar._blockHoist = params.length - i;

	        path.ensureBlock();
	        path.get("body").unshiftContainer("body", declar);

	        param.replaceWith(uid);
	      }
	    }
	  }
	};
	exports.visitor = visitor;

/***/ },
/* 5743 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(52)["default"];

	var _interopRequireDefault = __webpack_require__(13)["default"];

	var _interopRequireWildcard = __webpack_require__(46)["default"];

	exports.__esModule = true;

	var _babelTemplate = __webpack_require__(2236);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _babelTypes = __webpack_require__(54);

	var t = _interopRequireWildcard(_babelTypes);

	var buildRest = _babelTemplate2["default"]("\n  for (var LEN = ARGUMENTS.length,\n           ARRAY = Array(ARRAY_LEN),\n           KEY = START;\n       KEY < LEN;\n       KEY++) {\n    ARRAY[ARRAY_KEY] = ARGUMENTS[KEY];\n  }\n");

	var memberExpressionOptimisationVisitor = {
	  Scope: function Scope(path, state) {
	    // check if this scope has a local binding that will shadow the rest parameter
	    if (!path.scope.bindingIdentifierEquals(state.name, state.outerBinding)) {
	      path.skip();
	    }
	  },

	  Flow: function Flow(path) {
	    // don't touch reference in type annotations
	    path.skip();
	  },

	  Function: function Function(path, state) {
	    // skip over functions as whatever `arguments` we reference inside will refer
	    // to the wrong function
	    var oldNoOptimise = state.noOptimise;
	    state.noOptimise = true;
	    path.traverse(memberExpressionOptimisationVisitor, state);
	    state.noOptimise = oldNoOptimise;
	    path.skip();
	  },

	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    var node = path.node;

	    // we can't guarantee the purity of arguments
	    if (node.name === "arguments") {
	      state.deopted = true;
	    }

	    // is this a referenced identifier and is it referencing the rest parameter?
	    if (node.name !== state.name) return;

	    if (state.noOptimise) {
	      state.deopted = true;
	    } else {
	      if (path.parentPath.isMemberExpression({ computed: true, object: node })) {
	        // if we know that this member expression is referencing a number then we can safely
	        // optimise it
	        var prop = path.parentPath.get("property");
	        if (prop.isBaseType("number")) {
	          state.candidates.push(path);
	          return;
	        }
	      }

	      // optimise single spread args in calls
	      if (path.parentPath.isSpreadElement() && state.offset === 0) {
	        var call = path.parentPath.parentPath;
	        if (call.isCallExpression() && call.node.arguments.length === 1) {
	          state.candidates.push(path);
	          return;
	        }
	      }

	      state.references.push(path);
	    }
	  },

	  /**
	   * Deopt on use of a binding identifier with the same name as our rest param.
	   *
	   * See https://github.com/babel/babel/issues/2091
	   */

	  BindingIdentifier: function BindingIdentifier(_ref2, state) {
	    var node = _ref2.node;

	    if (node.name === state.name) {
	      state.deopted = true;
	    }
	  }
	};

	function optimiseMemberExpression(parent, offset) {
	  if (offset === 0) return;

	  var newExpr = undefined;
	  var prop = parent.property;

	  if (t.isLiteral(prop)) {
	    prop.value += offset;
	    prop.raw = String(prop.value);
	  } else {
	    // // UnaryExpression, BinaryExpression
	    newExpr = t.binaryExpression("+", prop, t.numericLiteral(offset));
	    parent.property = newExpr;
	  }
	}

	function hasRest(node) {
	  return t.isRestElement(node.params[node.params.length - 1]);
	}

	var visitor = {
	  Function: function Function(path) {
	    var node = path.node;
	    var scope = path.scope;

	    if (!hasRest(node)) return;

	    var restParam = node.params.pop();
	    var rest = restParam.argument;

	    var argsId = t.identifier("arguments");

	    // otherwise `arguments` will be remapped in arrow functions
	    argsId._shadowedFunctionLiteral = path;

	    // support patterns
	    if (t.isPattern(rest)) {
	      var pattern = rest;
	      rest = scope.generateUidIdentifier("ref");

	      var declar = t.variableDeclaration("let", pattern.elements.map(function (elem, index) {
	        var accessExpr = t.memberExpression(rest, t.numericLiteral(index), true);
	        return t.variableDeclarator(elem, accessExpr);
	      }));
	      node.body.body.unshift(declar);
	    }

	    // check and optimise for extremely common cases
	    var state = {
	      references: [],
	      offset: node.params.length,

	      argumentsNode: argsId,
	      outerBinding: scope.getBindingIdentifier(rest.name),

	      // candidate member expressions we could optimise if there are no other references
	      candidates: [],

	      // local rest binding name
	      name: rest.name,

	      // whether any references to the rest parameter were made in a function
	      deopted: false
	    };

	    path.traverse(memberExpressionOptimisationVisitor, state);

	    if (!state.deopted && !state.references.length) {
	      // we only have shorthands and there are no other references
	      if (state.candidates.length) {
	        for (var _iterator = (state.candidates /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var candidate = _ref;

	          candidate.replaceWith(argsId);
	          if (candidate.parentPath.isMemberExpression()) {
	            optimiseMemberExpression(candidate.parent, state.offset);
	          }
	        }
	      }
	      return;
	    } else {
	      state.references = state.references.concat(state.candidates);
	    }

	    // deopt shadowed functions as transforms like regenerator may try touch the allocation loop
	    state.deopted = state.deopted || !!node.shadow;

	    //

	    var start = t.numericLiteral(node.params.length);
	    var key = scope.generateUidIdentifier("key");
	    var len = scope.generateUidIdentifier("len");

	    var arrKey = key;
	    var arrLen = len;
	    if (node.params.length) {
	      // this method has additional params, so we need to subtract
	      // the index of the current argument position from the
	      // position in the array that we want to populate
	      arrKey = t.binaryExpression("-", key, start);

	      // we need to work out the size of the array that we're
	      // going to store all the rest parameters
	      //
	      // we need to add a check to avoid constructing the array
	      // with <0 if there are less arguments than params as it'll
	      // cause an error
	      arrLen = t.conditionalExpression(t.binaryExpression(">", len, start), t.binaryExpression("-", len, start), t.numericLiteral(0));
	    }

	    var loop = buildRest({
	      ARGUMENTS: argsId,
	      ARRAY_KEY: arrKey,
	      ARRAY_LEN: arrLen,
	      START: start,
	      ARRAY: rest,
	      KEY: key,
	      LEN: len
	    });

	    if (state.deopted) {
	      loop._blockHoist = node.params.length + 1;
	      node.body.body.unshift(loop);
	    } else {
	      // perform allocation at the lowest common ancestor of all references
	      loop._blockHoist = 1;

	      var target = path.getEarliestCommonAncestorFrom(state.references).getStatementParent();

	      // don't perform the allocation inside a loop
	      var highestLoop = undefined;
	      target.findParent(function (path) {
	        if (path.isLoop()) {
	          highestLoop = path;
	        } else if (path.isFunction()) {
	          // stop crawling up for functions
	          return true;
	        }
	      });
	      if (highestLoop) target = highestLoop;

	      target.insertBefore(loop);
	    }
	  }
	};
	exports.visitor = visitor;

/***/ },
/* 5744 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(13)["default"];

	var _interopRequireWildcard = __webpack_require__(46)["default"];

	exports.__esModule = true;

	var _babelHelperHoistVariables = __webpack_require__(5745);

	var _babelHelperHoistVariables2 = _interopRequireDefault(_babelHelperHoistVariables);

	var _babelTypes = __webpack_require__(54);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type { NodePath } from "babel-traverse";*/

	var visitor = {
	  enter: function enter(path, state) {
	    if (path.isThisExpression()) {
	      state.foundThis = true;
	    }

	    if (path.isReferencedIdentifier({ name: "arguments" })) {
	      state.foundArguments = true;
	    }
	  },

	  Function: function Function(path) {
	    path.skip();
	  }
	};

	exports["default"] = function (path /*: NodePath*/) {
	  var scope = arguments.length <= 1 || arguments[1] === undefined ? path.scope : arguments[1];
	  return (function () {
	    var node = path.node;

	    var container = t.functionExpression(null, [], node.body, node.generator, node.async);

	    var callee = container;
	    var args = [];

	    // todo: only hoist if necessary
	    _babelHelperHoistVariables2["default"](path, function (id) {
	      return scope.push({ id: id });
	    });

	    var state = {
	      foundThis: false,
	      foundArguments: false
	    };

	    path.traverse(visitor, state);

	    if (state.foundArguments) {
	      callee = t.memberExpression(container, t.identifier("apply"));
	      args = [];

	      if (state.foundThis) {
	        args.push(t.thisExpression());
	      }

	      if (state.foundArguments) {
	        if (!state.foundThis) args.push(t.nullLiteral());
	        args.push(t.identifier("arguments"));
	      }
	    }

	    var call = t.callExpression(callee, args);
	    if (node.generator) call = t.yieldExpression(call, true);

	    return t.returnStatement(call);
	  })();
	};

	module.exports = exports["default"];

/***/ },
/* 5745 */
[7999, 52, 46, 54],
/* 5746 */
[7995, 46, 54],
/* 5747 */
[7817, 5757],
/* 5748 */
[7819, 5759],
/* 5749 */
[7820, 5760],
/* 5750 */
[7821, 5761],
/* 5751 */
[7822, 5762],
/* 5752 */
[7824, 5764],
/* 5753 */
[7826, 5765],
/* 5754 */
[7827, 5750, 5749, 5748],
/* 5755 */
2107,
/* 5756 */
[7829, 5790, 5789, 5781],
/* 5757 */
[7830, 5783],
/* 5758 */
[7831, 134],
/* 5759 */
[7832, 134],
/* 5760 */
[7833, 134, 5784],
/* 5761 */
[7834, 134, 5785],
/* 5762 */
[7835, 1328, 272],
/* 5763 */
[7836, 5786, 272],
/* 5764 */
[7837, 5787, 272],
/* 5765 */
[7838, 1328, 272],
/* 5766 */
[7839, 1328, 5788, 272],
/* 5767 */
2746,
/* 5768 */
2747,
/* 5769 */
[7841, 1320, 500],
/* 5770 */
[7844, 134],
/* 5771 */
[7848, 1320],
/* 5772 */
[7849, 1320],
/* 5773 */
[7850, 134, 1326, 1327, 1324, 500],
/* 5774 */
1559,
/* 5775 */
[7852, 134, 635],
/* 5776 */
[7855, 134, 2230, 1319, 2227],
/* 5777 */
[7858, 5778, 1321],
/* 5778 */
1564,
/* 5779 */
[7860, 1321],
/* 5780 */
[7862, 5769, 500, 867, 272],
/* 5781 */
[7863, 1319, 5780, 272],
/* 5782 */
[7864, 5768, 5774, 867, 635, 2231],
/* 5783 */
[7865, 634],
/* 5784 */
[7866, 635, 1325],
/* 5785 */
[7867, 1325, 2229],
/* 5786 */
[7868, 5779, 1325],
/* 5787 */
[7869, 634, 5776],
/* 5788 */
428,
/* 5789 */
[7870, 5777, 2231],
/* 5790 */
[7872, 5782, 867],
/* 5791 */
[7912, 13, 225, 5799, 5798, 5796, 5794, 5797, 5795, 5793, 226, 2237, 868, 5800, 5801],
/* 5792 */
2810,
/* 5793 */
[7913, 13, 225],
/* 5794 */
[7914, 408, 52, 13, 226, 225, 636],
/* 5795 */
[7916, 13, 869, 225],
/* 5796 */
[7917, 52, 13, 226, 225, 636],
/* 5797 */
[7918, 107, 13, 225, 869],
/* 5798 */
[7919, 408, 52, 13, 226, 225, 501],
/* 5799 */
[7920, 13, 226, 225, 501],
/* 5800 */
[7921, 13, 226, 225],
/* 5801 */
[7922, 13, 5802, 226, 868, 225, 636, 501],
/* 5802 */
2820,
/* 5803 */
[7925, 107, 869, 868, 226],
/* 5804 */
1578,
/* 5805 */
1580,
/* 5806 */
981,
/* 5807 */
[7936, 5809, 2240],
/* 5808 */
[7938, 5805, 5806, 5807, 5811, 5820, 5821, 5822, 502, 638],
/* 5809 */
1584,
/* 5810 */
[7940, 5818],
/* 5811 */
[7942, 5810, 2240],
/* 5812 */
[7943, 1331],
/* 5813 */
1590,
/* 5814 */
1591,
/* 5815 */
984,
/* 5816 */
[7952, 5831],
/* 5817 */
2851,
/* 5818 */
[7957, 1331],
/* 5819 */
[7963, 5813],
/* 5820 */
2866,
/* 5821 */
[7966, 5817],
/* 5822 */
2868,
/* 5823 */
[7969, 502, 1331],
/* 5824 */
[7971, 1332, 502, 1329, 637, 5830],
/* 5825 */
[7973, 5815, 502],
/* 5826 */
[7975, 5808, 5816],
/* 5827 */
[7978, 638],
/* 5828 */
[7979, 5827, 1330],
/* 5829 */
[7987, 5812, 5814, 1332, 502, 1329, 5823, 637, 5804, 5825],
/* 5830 */
[7989, 1332, 502, 1329, 637, 638],
/* 5831 */
1601,
/* 5832 */
[7874, 107, 52, 13, 46, 410, 54],
/* 5833 */
[7877, 52, 46, 13, 54, 410],
/* 5834 */
2774,
/* 5835 */
[7878, 52, 13, 409],
/* 5836 */
[7879, 46, 54],
/* 5837 */
[7880, 52],
/* 5838 */
[7881, 52, 13, 46, 410, 54],
/* 5839 */
[7883, 52, 46, 5841, 54],
/* 5840 */
[7884, 52, 46, 54],
/* 5841 */
[7885, 46, 2226, 54, 5840],
/* 5842 */
[7886, 52, 13, 46, 1335, 54],
/* 5843 */
[7887, 107, 52, 46, 54],
/* 5844 */
2784,
/* 5845 */
[7889, 52, 13, 46, 2242, 5843, 410, 54],
/* 5846 */
[7890, 52, 5844],
/* 5847 */
[7891, 52, 13, 46, 5850, 409, 410, 5865, 54],
/* 5848 */
[7894, 107, 13, 46, 2244, 54],
/* 5849 */
[7895, 52, 2223, 46, 13, 2243, 1334, 54, 5904],
/* 5850 */
[7806, 13, 5863, 2254, 5862, 5861, 5851],
/* 5851 */
[7807, 5853, 5852, 5856, 5854, 5858],
/* 5852 */
2682,
/* 5853 */
2683,
/* 5854 */
[7808, 5855],
/* 5855 */
2685,
/* 5856 */
[7809, 5857],
/* 5857 */
2685,
/* 5858 */
2688,
/* 5859 */
2689,
/* 5860 */
[7810, 2245],
/* 5861 */
[7811, 5859, 2245, 5860],
/* 5862 */
2692,
/* 5863 */
[7812, 5864],
/* 5864 */
2694,
/* 5865 */
[7912, 13, 227, 5873, 5872, 5870, 5868, 5871, 5869, 5867, 228, 2246, 870, 5874, 5875],
/* 5866 */
2810,
/* 5867 */
[7913, 13, 227],
/* 5868 */
[7914, 408, 52, 13, 228, 227, 639],
/* 5869 */
[7916, 13, 871, 227],
/* 5870 */
[7917, 52, 13, 228, 227, 639],
/* 5871 */
[7918, 107, 13, 227, 871],
/* 5872 */
[7919, 408, 52, 13, 228, 227, 503],
/* 5873 */
[7920, 13, 228, 227, 503],
/* 5874 */
[7921, 13, 228, 227],
/* 5875 */
[7922, 13, 5876, 228, 870, 227, 639, 503],
/* 5876 */
2820,
/* 5877 */
[7925, 107, 871, 870, 228],
/* 5878 */
[7928, 5879],
/* 5879 */
[7929, 5880],
/* 5880 */
2825,
/* 5881 */
[7896, 7788],
/* 5882 */
2791,
/* 5883 */
1580,
/* 5884 */
981,
/* 5885 */
2836,
/* 5886 */
[7935, 874],
/* 5887 */
[7938, 5883, 5884, 2248, 5890, 5899, 5900, 5901, 873, 504],
/* 5888 */
1584,
/* 5889 */
[7940, 5896],
/* 5890 */
[7942, 5889, 874],
/* 5891 */
[7944, 5898],
/* 5892 */
1590,
/* 5893 */
2850,
/* 5894 */
2851,
/* 5895 */
[7955, 2249, 1338, 2247],
/* 5896 */
[7957, 5903],
/* 5897 */
[7959, 2247],
/* 5898 */
2865,
/* 5899 */
2866,
/* 5900 */
[7966, 5894],
/* 5901 */
2868,
/* 5902 */
[7971, 2252, 873, 1337, 640, 5909],
/* 5903 */
[7972, 504],
/* 5904 */
[7974, 5887, 2249, 1338],
/* 5905 */
[7978, 504],
/* 5906 */
[7979, 5905, 872],
/* 5907 */
[7983, 872],
/* 5908 */
[7986, 2253, 5885, 5897],
/* 5909 */
[7989, 2252, 873, 1337, 640, 504],
/* 5910 */
[7991, 5893, 874],
/* 5911 */
1601,
/* 5912 */
[7814, 5913],
/* 5913 */
2697,
/* 5914 */
[7898, 52, 5747, 13, 46, 5972, 5971, 5973, 5974, 409, 54],
/* 5915 */
[7899, 46, 13, 54, 1339, 344],
/* 5916 */
[7900, 13, 344],
/* 5917 */
[7901, 13, 344],
/* 5918 */
[7902, 13, 344],
/* 5919 */
[7904, 344, 5915, 5916, 5918, 5920, 5921, 5917],
/* 5920 */
[7905, 13, 344],
/* 5921 */
[7906, 13, 344],
/* 5922 */
[7907, 46, 54],
/* 5923 */
[7909, 46, 54],
/* 5924 */
[7911, 52, 13, 46, 2255, 5927, 54, 1339],
/* 5925 */
2689,
/* 5926 */
[7810, 2256],
/* 5927 */
[7811, 5925, 2256, 5926],
/* 5928 */
2827,
/* 5929 */
1578,
/* 5930 */
[7930, 5937, 5950, 2264, 5967],
/* 5931 */
[7931, 5932],
/* 5932 */
[7932, 2257, 5940, 5957],
/* 5933 */
[7934, 5953, 875],
/* 5934 */
1580,
/* 5935 */
1581,
/* 5936 */
[7936, 5939, 876],
/* 5937 */
[7937, 5945, 5946, 1340, 2269, 5977],
/* 5938 */
[7938, 5934, 2257, 5936, 2259, 5963, 5964, 5965, 347, 159],
/* 5939 */
1584,
/* 5940 */
[7939, 2259, 5954],
/* 5941 */
[7941, 2258, 2268],
/* 5942 */
[7944, 5962],
/* 5943 */
[7946, 5958, 5959, 5960, 347, 5975],
/* 5944 */
[7947, 2261, 346],
/* 5945 */
[7948, 5944, 5961, 346],
/* 5946 */
[7949, 2260, 2261, 5948, 347, 2265, 2266, 5929, 346, 2267],
/* 5947 */
[7950, 2260, 2267],
/* 5948 */
1591,
/* 5949 */
984,
/* 5950 */
[7951, 5942, 5952, 5956],
/* 5951 */
2851,
/* 5952 */
[7953, 159],
/* 5953 */
[7954, 159],
/* 5954 */
[7956, 2263, 505, 346],
/* 5955 */
[7957, 346],
/* 5956 */
[7958, 5933, 875],
/* 5957 */
[7960, 1340, 347],
/* 5958 */
[7961, 5935],
/* 5959 */
2861,
/* 5960 */
[7962, 876],
/* 5961 */
[7964, 2266, 5976],
/* 5962 */
2865,
/* 5963 */
2866,
/* 5964 */
[7966, 5951],
/* 5965 */
2868,
/* 5966 */
[7971, 1343, 347, 1342, 505, 2268],
/* 5967 */
2870,
/* 5968 */
[7974, 5938, 1340, 2264],
/* 5969 */
[7978, 159],
/* 5970 */
[7979, 5969, 345],
/* 5971 */
[7980, 345],
/* 5972 */
[7981, 5941, 1343, 345],
/* 5973 */
[7982, 159],
/* 5974 */
[7983, 345],
/* 5975 */
[7984, 505, 345],
/* 5976 */
[7990, 876, 346],
/* 5977 */
[7992, 2262, 5947, 2265],
/* 5978 */
2809,
/* 5979 */
[7817, 5991],
/* 5980 */
[7819, 5993],
/* 5981 */
[7820, 5994],
/* 5982 */
[7821, 5995],
/* 5983 */
[7822, 5996],
/* 5984 */
[7824, 5998],
/* 5985 */
[7825, 6000],
/* 5986 */
[7826, 5999],
/* 5987 */
[7827, 5982, 5981, 5980],
/* 5988 */
[7828, 641, 5984],
/* 5989 */
2107,
/* 5990 */
[7829, 6024, 6023, 6015],
/* 5991 */
[7830, 6017],
/* 5992 */
[7831, 135],
/* 5993 */
[7832, 135],
/* 5994 */
[7833, 135, 6018],
/* 5995 */
[7834, 135, 6019],
/* 5996 */
[7835, 1354, 273],
/* 5997 */
[7836, 6020, 273],
/* 5998 */
[7837, 6021, 273],
/* 5999 */
[7838, 1354, 273],
/* 6000 */
[7839, 1354, 6022, 273],
/* 6001 */
2746,
/* 6002 */
2747,
/* 6003 */
[7841, 1346, 506],
/* 6004 */
[7844, 135],
/* 6005 */
[7848, 1346],
/* 6006 */
[7849, 1346],
/* 6007 */
[7850, 135, 1352, 1353, 1350, 506],
/* 6008 */
1559,
/* 6009 */
[7852, 135, 643],
/* 6010 */
[7855, 135, 2275, 1345, 2272],
/* 6011 */
[7858, 6012, 1347],
/* 6012 */
1564,
/* 6013 */
[7860, 1347],
/* 6014 */
[7862, 6003, 506, 878, 273],
/* 6015 */
[7863, 1345, 6014, 273],
/* 6016 */
[7864, 6002, 6008, 878, 643, 2276],
/* 6017 */
[7865, 642],
/* 6018 */
[7866, 643, 1351],
/* 6019 */
[7867, 1351, 2274],
/* 6020 */
[7868, 6013, 1351],
/* 6021 */
[7869, 642, 6010],
/* 6022 */
428,
/* 6023 */
[7870, 6011, 2276],
/* 6024 */
[7872, 6016, 878],
/* 6025 */
[7898, 99, 5979, 47, 75, 6134, 6133, 6135, 2303, 644, 89],
/* 6026 */
[7899, 75, 47, 89, 1355, 348],
/* 6027 */
[7900, 47, 348],
/* 6028 */
[7901, 47, 348],
/* 6029 */
[7902, 47, 348],
/* 6030 */
[7904, 348, 6026, 6027, 6029, 6031, 6032, 6028],
/* 6031 */
[7905, 47, 348],
/* 6032 */
[7906, 47, 348],
/* 6033 */
[7907, 75, 89],
/* 6034 */
[7909, 75, 89],
/* 6035 */
[7911, 99, 47, 75, 2281, 2289, 89, 1355],
/* 6036 */
[7874, 114, 99, 47, 75, 411, 89],
/* 6037 */
[7877, 99, 75, 47, 89, 411],
/* 6038 */
2774,
/* 6039 */
[7878, 99, 47, 644],
/* 6040 */
[7879, 75, 89],
/* 6041 */
[7880, 99],
/* 6042 */
[7881, 99, 47, 75, 411, 89],
/* 6043 */
[7883, 99, 75, 6045, 89],
/* 6044 */
[7884, 99, 75, 89],
/* 6045 */
[7885, 75, 2271, 89, 6044],
/* 6046 */
[7886, 99, 47, 75, 1358, 89],
/* 6047 */
[7887, 114, 99, 75, 89],
/* 6048 */
2784,
/* 6049 */
[7889, 99, 47, 75, 2283, 6047, 411, 89],
/* 6050 */
[7890, 99, 6048],
/* 6051 */
[7891, 99, 47, 75, 6054, 644, 411, 6066, 89],
/* 6052 */
[7894, 114, 47, 75, 2285, 89],
/* 6053 */
[7895, 99, 2270, 75, 47, 2284, 1357, 89, 2302],
/* 6054 */
[7806, 47, 6064, 2287, 6063, 2289, 6055],
/* 6055 */
[7807, 6057, 6056, 6060, 6058, 6062],
/* 6056 */
2682,
/* 6057 */
2683,
/* 6058 */
[7808, 6059],
/* 6059 */
2685,
/* 6060 */
[7809, 6061],
/* 6061 */
2685,
/* 6062 */
2688,
/* 6063 */
2692,
/* 6064 */
[7812, 6065],
/* 6065 */
2694,
/* 6066 */
[7912, 47, 229, 6074, 6073, 6071, 6069, 6072, 6070, 6068, 230, 2286, 879, 6075, 6076],
/* 6067 */
2810,
/* 6068 */
[7913, 47, 229],
/* 6069 */
[7914, 641, 99, 47, 230, 229, 645],
/* 6070 */
[7916, 47, 880, 229],
/* 6071 */
[7917, 99, 47, 230, 229, 645],
/* 6072 */
[7918, 114, 47, 229, 880],
/* 6073 */
[7919, 641, 99, 47, 230, 229, 507],
/* 6074 */
[7920, 47, 230, 229, 507],
/* 6075 */
[7921, 47, 230, 229],
/* 6076 */
[7922, 47, 6077, 230, 879, 229, 645, 507],
/* 6077 */
2820,
/* 6078 */
[7925, 114, 880, 879, 230],
/* 6079 */
[7928, 6080],
/* 6080 */
[7929, 6081],
/* 6081 */
2825,
/* 6082 */
[7896, 7789],
/* 6083 */
2791,
/* 6084 */
[7814, 6085],
/* 6085 */
2697,
/* 6086 */
2689,
/* 6087 */
[7810, 2288],
/* 6088 */
2827,
/* 6089 */
1578,
/* 6090 */
[7930, 6098, 6110, 883, 6130],
/* 6091 */
[7931, 6092],
/* 6092 */
[7932, 2291, 6101, 6120],
/* 6093 */
[7934, 6114, 882],
/* 6094 */
1580,
/* 6095 */
1581,
/* 6096 */
2836,
/* 6097 */
[7935, 508],
/* 6098 */
[7937, 6105, 6106, 881, 2306, 6140],
/* 6099 */
[7938, 6094, 2291, 2292, 2294, 6126, 6127, 6128, 274, 160],
/* 6100 */
1584,
/* 6101 */
[7939, 2294, 6116],
/* 6102 */
[7941, 2293, 2305],
/* 6103 */
[7946, 6121, 6122, 6123, 274, 6136],
/* 6104 */
[7947, 2297, 350],
/* 6105 */
[7948, 6104, 6124, 350],
/* 6106 */
[7949, 2295, 2297, 6108, 274, 2299, 2300, 6089, 350, 2301],
/* 6107 */
[7950, 2295, 2301],
/* 6108 */
1591,
/* 6109 */
984,
/* 6110 */
[7951, 2296, 6113, 6118],
/* 6111 */
2850,
/* 6112 */
2851,
/* 6113 */
[7953, 160],
/* 6114 */
[7954, 160],
/* 6115 */
[7955, 881, 883, 2290],
/* 6116 */
[7956, 1359, 412, 350],
/* 6117 */
[7957, 350],
/* 6118 */
[7958, 6093, 882],
/* 6119 */
[7959, 2290],
/* 6120 */
[7960, 881, 274],
/* 6121 */
[7961, 6095],
/* 6122 */
2861,
/* 6123 */
[7962, 508],
/* 6124 */
[7964, 2300, 6138],
/* 6125 */
2865,
/* 6126 */
2866,
/* 6127 */
[7966, 6112],
/* 6128 */
2868,
/* 6129 */
[7971, 1362, 274, 1361, 412, 2305],
/* 6130 */
2870,
/* 6131 */
[7978, 160],
/* 6132 */
[7979, 6131, 349],
/* 6133 */
[7980, 349],
/* 6134 */
[7981, 6102, 1362, 349],
/* 6135 */
[7982, 160],
/* 6136 */
[7984, 412, 349],
/* 6137 */
[7986, 2304, 6096, 6119],
/* 6138 */
[7990, 508, 350],
/* 6139 */
[7991, 6111, 508],
/* 6140 */
[7992, 2298, 6107, 2299],
/* 6141 */
2809,
/* 6142 */
[7816, 6143],
/* 6143 */
[7829, 6167, 6166, 6164],
/* 6144 */
2746,
/* 6145 */
2747,
/* 6146 */
[7840, 6153],
/* 6147 */
[7841, 2307, 646],
/* 6148 */
[7842, 6144],
/* 6149 */
[7843, 6151],
/* 6150 */
[7845, 1365, 1364, 6148],
/* 6151 */
543,
/* 6152 */
[7848, 2307],
/* 6153 */
701,
/* 6154 */
[7850, 885, 2311, 2312, 1366, 646],
/* 6155 */
1559,
/* 6156 */
1560,
/* 6157 */
[7854, 1366],
/* 6158 */
[7857, 1365],
/* 6159 */
[7858, 6160, 2308],
/* 6160 */
1564,
/* 6161 */
[7859, 6152, 2308],
/* 6162 */
975,
/* 6163 */
[7862, 6147, 646, 884, 1364],
/* 6164 */
[7863, 6146, 6163, 1364],
/* 6165 */
[7864, 6145, 6155, 884, 6161, 2310],
/* 6166 */
[7870, 6159, 2310],
/* 6167 */
[7872, 6165, 884],
/* 6168 */
[8000, 41, 68, 6169, 80],
/* 6169 */
[8001, 6170],
/* 6170 */
[7944, 6171],
/* 6171 */
2865,
/* 6172 */
[7817, 6184],
/* 6173 */
[7819, 6186],
/* 6174 */
[7820, 6187],
/* 6175 */
[7821, 6188],
/* 6176 */
[7822, 6189],
/* 6177 */
[7824, 6191],
/* 6178 */
[7825, 6193],
/* 6179 */
[7826, 6192],
/* 6180 */
[7827, 6175, 6174, 6173],
/* 6181 */
[7828, 647, 6177],
/* 6182 */
2107,
/* 6183 */
[7829, 6217, 6216, 6208],
/* 6184 */
[7830, 6210],
/* 6185 */
[7831, 136],
/* 6186 */
[7832, 136],
/* 6187 */
[7833, 136, 6211],
/* 6188 */
[7834, 136, 6212],
/* 6189 */
[7835, 1377, 275],
/* 6190 */
[7836, 6213, 275],
/* 6191 */
[7837, 6214, 275],
/* 6192 */
[7838, 1377, 275],
/* 6193 */
[7839, 1377, 6215, 275],
/* 6194 */
2746,
/* 6195 */
2747,
/* 6196 */
[7841, 1369, 509],
/* 6197 */
[7844, 136],
/* 6198 */
[7848, 1369],
/* 6199 */
[7849, 1369],
/* 6200 */
[7850, 136, 1375, 1376, 1373, 509],
/* 6201 */
1559,
/* 6202 */
[7852, 136, 649],
/* 6203 */
[7855, 136, 2318, 1368, 2315],
/* 6204 */
[7858, 6205, 1370],
/* 6205 */
1564,
/* 6206 */
[7860, 1370],
/* 6207 */
[7862, 6196, 509, 887, 275],
/* 6208 */
[7863, 1368, 6207, 275],
/* 6209 */
[7864, 6195, 6201, 887, 649, 2319],
/* 6210 */
[7865, 648],
/* 6211 */
[7866, 649, 1374],
/* 6212 */
[7867, 1374, 2317],
/* 6213 */
[7868, 6206, 1374],
/* 6214 */
[7869, 648, 6203],
/* 6215 */
428,
/* 6216 */
[7870, 6204, 2319],
/* 6217 */
[7872, 6209, 887],
/* 6218 */
[7898, 100, 6172, 41, 68, 6327, 6326, 6328, 2346, 650, 80],
/* 6219 */
[7899, 68, 41, 80, 1378, 351],
/* 6220 */
[7900, 41, 351],
/* 6221 */
[7901, 41, 351],
/* 6222 */
[7902, 41, 351],
/* 6223 */
[7904, 351, 6219, 6220, 6222, 6224, 6225, 6221],
/* 6224 */
[7905, 41, 351],
/* 6225 */
[7906, 41, 351],
/* 6226 */
[7907, 68, 80],
/* 6227 */
[7909, 68, 80],
/* 6228 */
[7911, 100, 41, 68, 2324, 2332, 80, 1378],
/* 6229 */
[7874, 115, 100, 41, 68, 413, 80],
/* 6230 */
[7877, 100, 68, 41, 80, 413],
/* 6231 */
2774,
/* 6232 */
[7878, 100, 41, 650],
/* 6233 */
[7879, 68, 80],
/* 6234 */
[7880, 100],
/* 6235 */
[7881, 100, 41, 68, 413, 80],
/* 6236 */
[7883, 100, 68, 6238, 80],
/* 6237 */
[7884, 100, 68, 80],
/* 6238 */
[7885, 68, 2314, 80, 6237],
/* 6239 */
[7886, 100, 41, 68, 1381, 80],
/* 6240 */
[7887, 115, 100, 68, 80],
/* 6241 */
2784,
/* 6242 */
[7889, 100, 41, 68, 2326, 6240, 413, 80],
/* 6243 */
[7890, 100, 6241],
/* 6244 */
[7891, 100, 41, 68, 6247, 650, 413, 6259, 80],
/* 6245 */
[7894, 115, 41, 68, 2328, 80],
/* 6246 */
[7895, 100, 2313, 68, 41, 2327, 1380, 80, 2345],
/* 6247 */
[7806, 41, 6257, 2330, 6256, 2332, 6248],
/* 6248 */
[7807, 6250, 6249, 6253, 6251, 6255],
/* 6249 */
2682,
/* 6250 */
2683,
/* 6251 */
[7808, 6252],
/* 6252 */
2685,
/* 6253 */
[7809, 6254],
/* 6254 */
2685,
/* 6255 */
2688,
/* 6256 */
2692,
/* 6257 */
[7812, 6258],
/* 6258 */
2694,
/* 6259 */
[7912, 41, 231, 6267, 6266, 6264, 6262, 6265, 6263, 6261, 232, 2329, 888, 6268, 6269],
/* 6260 */
2810,
/* 6261 */
[7913, 41, 231],
/* 6262 */
[7914, 647, 100, 41, 232, 231, 651],
/* 6263 */
[7916, 41, 889, 231],
/* 6264 */
[7917, 100, 41, 232, 231, 651],
/* 6265 */
[7918, 115, 41, 231, 889],
/* 6266 */
[7919, 647, 100, 41, 232, 231, 510],
/* 6267 */
[7920, 41, 232, 231, 510],
/* 6268 */
[7921, 41, 232, 231],
/* 6269 */
[7922, 41, 6270, 232, 888, 231, 651, 510],
/* 6270 */
2820,
/* 6271 */
[7925, 115, 889, 888, 232],
/* 6272 */
[7928, 6273],
/* 6273 */
[7929, 6274],
/* 6274 */
2825,
/* 6275 */
[7896, 7790],
/* 6276 */
2791,
/* 6277 */
[7814, 6278],
/* 6278 */
2697,
/* 6279 */
2689,
/* 6280 */
[7810, 2331],
/* 6281 */
2827,
/* 6282 */
1578,
/* 6283 */
[7930, 6291, 6303, 892, 6323],
/* 6284 */
[7931, 6285],
/* 6285 */
[7932, 2334, 6294, 6313],
/* 6286 */
[7934, 6307, 891],
/* 6287 */
1580,
/* 6288 */
1581,
/* 6289 */
2836,
/* 6290 */
[7935, 511],
/* 6291 */
[7937, 6298, 6299, 890, 2349, 6333],
/* 6292 */
[7938, 6287, 2334, 2335, 2337, 6319, 6320, 6321, 276, 161],
/* 6293 */
1584,
/* 6294 */
[7939, 2337, 6309],
/* 6295 */
[7941, 2336, 2348],
/* 6296 */
[7946, 6314, 6315, 6316, 276, 6329],
/* 6297 */
[7947, 2340, 353],
/* 6298 */
[7948, 6297, 6317, 353],
/* 6299 */
[7949, 2338, 2340, 6301, 276, 2342, 2343, 6282, 353, 2344],
/* 6300 */
[7950, 2338, 2344],
/* 6301 */
1591,
/* 6302 */
984,
/* 6303 */
[7951, 2339, 6306, 6311],
/* 6304 */
2850,
/* 6305 */
2851,
/* 6306 */
[7953, 161],
/* 6307 */
[7954, 161],
/* 6308 */
[7955, 890, 892, 2333],
/* 6309 */
[7956, 1382, 414, 353],
/* 6310 */
[7957, 353],
/* 6311 */
[7958, 6286, 891],
/* 6312 */
[7959, 2333],
/* 6313 */
[7960, 890, 276],
/* 6314 */
[7961, 6288],
/* 6315 */
2861,
/* 6316 */
[7962, 511],
/* 6317 */
[7964, 2343, 6331],
/* 6318 */
2865,
/* 6319 */
2866,
/* 6320 */
[7966, 6305],
/* 6321 */
2868,
/* 6322 */
[7971, 1385, 276, 1384, 414, 2348],
/* 6323 */
2870,
/* 6324 */
[7978, 161],
/* 6325 */
[7979, 6324, 352],
/* 6326 */
[7980, 352],
/* 6327 */
[7981, 6295, 1385, 352],
/* 6328 */
[7982, 161],
/* 6329 */
[7984, 414, 352],
/* 6330 */
[7986, 2347, 6289, 6312],
/* 6331 */
[7990, 511, 353],
/* 6332 */
[7991, 6304, 511],
/* 6333 */
[7992, 2341, 6300, 2342],
/* 6334 */
2809,
/* 6335 */
[7816, 6336],
/* 6336 */
[7829, 6360, 6359, 6357],
/* 6337 */
2746,
/* 6338 */
2747,
/* 6339 */
[7840, 6346],
/* 6340 */
[7841, 2350, 652],
/* 6341 */
[7842, 6337],
/* 6342 */
[7843, 6344],
/* 6343 */
[7845, 1388, 1387, 6341],
/* 6344 */
543,
/* 6345 */
[7848, 2350],
/* 6346 */
701,
/* 6347 */
[7850, 894, 2354, 2355, 1389, 652],
/* 6348 */
1559,
/* 6349 */
1560,
/* 6350 */
[7854, 1389],
/* 6351 */
[7857, 1388],
/* 6352 */
[7858, 6353, 2351],
/* 6353 */
1564,
/* 6354 */
[7859, 6345, 2351],
/* 6355 */
975,
/* 6356 */
[7862, 6340, 652, 893, 1387],
/* 6357 */
[7863, 6339, 6356, 1387],
/* 6358 */
[7864, 6338, 6348, 893, 6354, 2353],
/* 6359 */
[7870, 6352, 2353],
/* 6360 */
[7872, 6358, 893],
/* 6361 */
[7825, 6362],
/* 6362 */
[7839, 6379, 6378, 2357],
/* 6363 */
2746,
/* 6364 */
[7840, 6373],
/* 6365 */
[7842, 6363],
/* 6366 */
699,
/* 6367 */
[7844, 512],
/* 6368 */
[7845, 895, 2357, 6365],
/* 6369 */
[7846, 1391, 512],
/* 6370 */
[7847, 512, 2361, 2358],
/* 6371 */
[7848, 2356],
/* 6372 */
[7849, 2356],
/* 6373 */
701,
/* 6374 */
[7852, 512, 1391],
/* 6375 */
1560,
/* 6376 */
[7854, 6370],
/* 6377 */
[7856, 512, 2360, 2364],
/* 6378 */
428,
/* 6379 */
[7871, 512, 895, 2360, 2358, 6368, 6376, 2359, 2362, 6377, 2363, 2364, 6374, 6369, 6367, 6372, 6364, 1391, 2361, 6375],
/* 6380 */
[8000, 37, 69, 6447, 90],
/* 6381 */
[7898, 101, 6499, 37, 69, 6492, 6491, 6493, 2386, 653, 90],
/* 6382 */
[7899, 69, 37, 90, 1393, 354],
/* 6383 */
[7900, 37, 354],
/* 6384 */
[7901, 37, 354],
/* 6385 */
[7902, 37, 354],
/* 6386 */
[7904, 354, 6382, 6383, 6385, 6387, 6388, 6384],
/* 6387 */
[7905, 37, 354],
/* 6388 */
[7906, 37, 354],
/* 6389 */
[7907, 69, 90],
/* 6390 */
[7909, 69, 90],
/* 6391 */
[7911, 101, 37, 69, 2365, 2373, 90, 1393],
/* 6392 */
[7874, 116, 101, 37, 69, 415, 90],
/* 6393 */
[7877, 101, 69, 37, 90, 415],
/* 6394 */
2774,
/* 6395 */
[7878, 101, 37, 653],
/* 6396 */
[7879, 69, 90],
/* 6397 */
[7880, 101],
/* 6398 */
[7881, 101, 37, 69, 415, 90],
/* 6399 */
[7883, 101, 69, 6401, 90],
/* 6400 */
[7884, 101, 69, 90],
/* 6401 */
[7885, 69, 2391, 90, 6400],
/* 6402 */
[7886, 101, 37, 69, 1396, 90],
/* 6403 */
[7887, 116, 101, 69, 90],
/* 6404 */
2784,
/* 6405 */
[7889, 101, 37, 69, 2367, 6403, 415, 90],
/* 6406 */
[7890, 101, 6404],
/* 6407 */
[7891, 101, 37, 69, 6410, 653, 415, 6422, 90],
/* 6408 */
[7894, 116, 37, 69, 2369, 90],
/* 6409 */
[7895, 101, 2390, 69, 37, 2368, 1395, 90, 2385],
/* 6410 */
[7806, 37, 6420, 2371, 6419, 2373, 6411],
/* 6411 */
[7807, 6413, 6412, 6416, 6414, 6418],
/* 6412 */
2682,
/* 6413 */
2683,
/* 6414 */
[7808, 6415],
/* 6415 */
2685,
/* 6416 */
[7809, 6417],
/* 6417 */
2685,
/* 6418 */
2688,
/* 6419 */
2692,
/* 6420 */
[7812, 6421],
/* 6421 */
2694,
/* 6422 */
[7912, 37, 233, 6430, 6429, 6427, 6425, 6428, 6426, 6424, 234, 2370, 896, 6431, 6432],
/* 6423 */
2810,
/* 6424 */
[7913, 37, 233],
/* 6425 */
[7914, 655, 101, 37, 234, 233, 654],
/* 6426 */
[7916, 37, 897, 233],
/* 6427 */
[7917, 101, 37, 234, 233, 654],
/* 6428 */
[7918, 116, 37, 233, 897],
/* 6429 */
[7919, 655, 101, 37, 234, 233, 513],
/* 6430 */
[7920, 37, 234, 233, 513],
/* 6431 */
[7921, 37, 234, 233],
/* 6432 */
[7922, 37, 6433, 234, 896, 233, 654, 513],
/* 6433 */
2820,
/* 6434 */
[7925, 116, 897, 896, 234],
/* 6435 */
[7928, 6436],
/* 6436 */
[7929, 6437],
/* 6437 */
2825,
/* 6438 */
[7896, 7791],
/* 6439 */
2791,
/* 6440 */
[7814, 6441],
/* 6441 */
2697,
/* 6442 */
2689,
/* 6443 */
[7810, 2372],
/* 6444 */
2809,
/* 6445 */
2827,
/* 6446 */
1578,
/* 6447 */
[8001, 1397],
/* 6448 */
[7930, 6456, 6468, 900, 6488],
/* 6449 */
[7931, 6450],
/* 6450 */
[7932, 2375, 6459, 6478],
/* 6451 */
[7934, 6472, 899],
/* 6452 */
1580,
/* 6453 */
1581,
/* 6454 */
2836,
/* 6455 */
[7935, 514],
/* 6456 */
[7937, 6463, 6464, 898, 2389, 6498],
/* 6457 */
[7938, 6452, 2375, 2376, 2378, 6484, 6485, 6486, 277, 162],
/* 6458 */
1584,
/* 6459 */
[7939, 2378, 6474],
/* 6460 */
[7941, 2377, 2388],
/* 6461 */
[7946, 6479, 6480, 6481, 277, 6494],
/* 6462 */
[7947, 2380, 356],
/* 6463 */
[7948, 6462, 6482, 356],
/* 6464 */
[7949, 2379, 2380, 6466, 277, 2382, 2383, 6446, 356, 2384],
/* 6465 */
[7950, 2379, 2384],
/* 6466 */
1591,
/* 6467 */
984,
/* 6468 */
[7951, 1397, 6471, 6476],
/* 6469 */
2850,
/* 6470 */
2851,
/* 6471 */
[7953, 162],
/* 6472 */
[7954, 162],
/* 6473 */
[7955, 898, 900, 2374],
/* 6474 */
[7956, 1398, 416, 356],
/* 6475 */
[7957, 356],
/* 6476 */
[7958, 6451, 899],
/* 6477 */
[7959, 2374],
/* 6478 */
[7960, 898, 277],
/* 6479 */
[7961, 6453],
/* 6480 */
2861,
/* 6481 */
[7962, 514],
/* 6482 */
[7964, 2383, 6496],
/* 6483 */
2865,
/* 6484 */
2866,
/* 6485 */
[7966, 6470],
/* 6486 */
2868,
/* 6487 */
[7971, 1401, 277, 1400, 416, 2388],
/* 6488 */
2870,
/* 6489 */
[7978, 162],
/* 6490 */
[7979, 6489, 355],
/* 6491 */
[7980, 355],
/* 6492 */
[7981, 6460, 1401, 355],
/* 6493 */
[7982, 162],
/* 6494 */
[7984, 416, 355],
/* 6495 */
[7986, 2387, 6454, 6477],
/* 6496 */
[7990, 514, 356],
/* 6497 */
[7991, 6469, 514],
/* 6498 */
[7992, 2381, 6465, 2382],
/* 6499 */
[7817, 6511],
/* 6500 */
[7819, 6513],
/* 6501 */
[7820, 6514],
/* 6502 */
[7821, 6515],
/* 6503 */
[7822, 6516],
/* 6504 */
[7824, 6518],
/* 6505 */
[7825, 6520],
/* 6506 */
[7826, 6519],
/* 6507 */
[7827, 6502, 6501, 6500],
/* 6508 */
[7828, 655, 6504],
/* 6509 */
2107,
/* 6510 */
[7829, 6544, 6543, 6535],
/* 6511 */
[7830, 6537],
/* 6512 */
[7831, 137],
/* 6513 */
[7832, 137],
/* 6514 */
[7833, 137, 6538],
/* 6515 */
[7834, 137, 6539],
/* 6516 */
[7835, 1411, 278],
/* 6517 */
[7836, 6540, 278],
/* 6518 */
[7837, 6541, 278],
/* 6519 */
[7838, 1411, 278],
/* 6520 */
[7839, 1411, 6542, 278],
/* 6521 */
2746,
/* 6522 */
2747,
/* 6523 */
[7841, 1403, 515],
/* 6524 */
[7844, 137],
/* 6525 */
[7848, 1403],
/* 6526 */
[7849, 1403],
/* 6527 */
[7850, 137, 1409, 1410, 1407, 515],
/* 6528 */
1559,
/* 6529 */
[7852, 137, 657],
/* 6530 */
[7855, 137, 2395, 1402, 2392],
/* 6531 */
[7858, 6532, 1404],
/* 6532 */
1564,
/* 6533 */
[7860, 1404],
/* 6534 */
[7862, 6523, 515, 902, 278],
/* 6535 */
[7863, 1402, 6534, 278],
/* 6536 */
[7864, 6522, 6528, 902, 657, 2396],
/* 6537 */
[7865, 656],
/* 6538 */
[7866, 657, 1408],
/* 6539 */
[7867, 1408, 2394],
/* 6540 */
[7868, 6533, 1408],
/* 6541 */
[7869, 656, 6530],
/* 6542 */
428,
/* 6543 */
[7870, 6531, 2396],
/* 6544 */
[7872, 6536, 902],
/* 6545 */
/***/ function(module, exports, __webpack_require__) {

	// Generated by `/scripts/character-class-escape-sets.js`. Do not edit.
	var regenerate = __webpack_require__(2401);

	exports.REGULAR = {
		'd': regenerate()
			.addRange(0x30, 0x39),
		'D': regenerate()
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0xFFFF),
		's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF)
			.addRange(0x9, 0xD)
			.addRange(0x2000, 0x200A)
			.addRange(0x2028, 0x2029),
		'S': regenerate()
			.addRange(0x0, 0x8)
			.addRange(0xE, 0x1F)
			.addRange(0x21, 0x9F)
			.addRange(0xA1, 0x167F)
			.addRange(0x1681, 0x180D)
			.addRange(0x180F, 0x1FFF)
			.addRange(0x200B, 0x2027)
			.addRange(0x202A, 0x202E)
			.addRange(0x2030, 0x205E)
			.addRange(0x2060, 0x2FFF)
			.addRange(0x3001, 0xFEFE)
			.addRange(0xFF00, 0xFFFF),
		'w': regenerate(0x5F)
			.addRange(0x30, 0x39)
			.addRange(0x41, 0x5A)
			.addRange(0x61, 0x7A),
		'W': regenerate(0x60)
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x40)
			.addRange(0x5B, 0x5E)
			.addRange(0x7B, 0xFFFF)
	};

	exports.UNICODE = {
		'd': regenerate()
			.addRange(0x30, 0x39),
		'D': regenerate()
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x10FFFF),
		's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF)
			.addRange(0x9, 0xD)
			.addRange(0x2000, 0x200A)
			.addRange(0x2028, 0x2029),
		'S': regenerate()
			.addRange(0x0, 0x8)
			.addRange(0xE, 0x1F)
			.addRange(0x21, 0x9F)
			.addRange(0xA1, 0x167F)
			.addRange(0x1681, 0x180D)
			.addRange(0x180F, 0x1FFF)
			.addRange(0x200B, 0x2027)
			.addRange(0x202A, 0x202E)
			.addRange(0x2030, 0x205E)
			.addRange(0x2060, 0x2FFF)
			.addRange(0x3001, 0xFEFE)
			.addRange(0xFF00, 0x10FFFF),
		'w': regenerate(0x5F)
			.addRange(0x30, 0x39)
			.addRange(0x41, 0x5A)
			.addRange(0x61, 0x7A),
		'W': regenerate(0x60)
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x40)
			.addRange(0x5B, 0x5E)
			.addRange(0x7B, 0x10FFFF)
	};

	exports.UNICODE_IGNORE_CASE = {
		'd': regenerate()
			.addRange(0x30, 0x39),
		'D': regenerate()
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x10FFFF),
		's': regenerate(0x20, 0xA0, 0x1680, 0x180E, 0x202F, 0x205F, 0x3000, 0xFEFF)
			.addRange(0x9, 0xD)
			.addRange(0x2000, 0x200A)
			.addRange(0x2028, 0x2029),
		'S': regenerate()
			.addRange(0x0, 0x8)
			.addRange(0xE, 0x1F)
			.addRange(0x21, 0x9F)
			.addRange(0xA1, 0x167F)
			.addRange(0x1681, 0x180D)
			.addRange(0x180F, 0x1FFF)
			.addRange(0x200B, 0x2027)
			.addRange(0x202A, 0x202E)
			.addRange(0x2030, 0x205E)
			.addRange(0x2060, 0x2FFF)
			.addRange(0x3001, 0xFEFE)
			.addRange(0xFF00, 0x10FFFF),
		'w': regenerate(0x5F, 0x17F, 0x212A)
			.addRange(0x30, 0x39)
			.addRange(0x41, 0x5A)
			.addRange(0x61, 0x7A),
		'W': regenerate(0x4B, 0x53, 0x60)
			.addRange(0x0, 0x2F)
			.addRange(0x3A, 0x40)
			.addRange(0x5B, 0x5E)
			.addRange(0x7B, 0x10FFFF)
	};


/***/ },
/* 6546 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(module, global) {/*!
	 * RegJSGen
	 * Copyright 2014 Benjamin Tan <https://d10.github.io/>
	 * Available under MIT license <http://d10.mit-license.org/>
	 */
	;(function() {
	  'use strict';

	  /** Used to determine if values are of the language type `Object` */
	  var objectTypes = {
	    'function': true,
	    'object': true
	  };

	  /** Used as a reference to the global object */
	  var root = (objectTypes[typeof window] && window) || this;

	  /** Backup possible global object */
	  var oldRoot = root;

	  /** Detect free variable `exports` */
	  var freeExports = objectTypes[typeof exports] && exports;

	  /** Detect free variable `module` */
	  var freeModule = objectTypes[typeof module] && module && !module.nodeType && module;

	  /** Detect free variable `global` from Node.js or Browserified code and use it as `root` */
	  var freeGlobal = freeExports && freeModule && typeof global == 'object' && global;
	  if (freeGlobal && (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal || freeGlobal.self === freeGlobal)) {
	    root = freeGlobal;
	  }

	  /*--------------------------------------------------------------------------*/

	  /*! Based on https://mths.be/fromcodepoint v0.2.0 by @mathias */

	  var stringFromCharCode = String.fromCharCode;
	  var floor = Math.floor;
	  function fromCodePoint() {
	    var MAX_SIZE = 0x4000;
	    var codeUnits = [];
	    var highSurrogate;
	    var lowSurrogate;
	    var index = -1;
	    var length = arguments.length;
	    if (!length) {
	      return '';
	    }
	    var result = '';
	    while (++index < length) {
	      var codePoint = Number(arguments[index]);
	      if (
	        !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
	        codePoint < 0 || // not a valid Unicode code point
	        codePoint > 0x10FFFF || // not a valid Unicode code point
	        floor(codePoint) != codePoint // not an integer
	      ) {
	        throw RangeError('Invalid code point: ' + codePoint);
	      }
	      if (codePoint <= 0xFFFF) {
	        // BMP code point
	        codeUnits.push(codePoint);
	      } else {
	        // Astral code point; split in surrogate halves
	        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
	        codePoint -= 0x10000;
	        highSurrogate = (codePoint >> 10) + 0xD800;
	        lowSurrogate = (codePoint % 0x400) + 0xDC00;
	        codeUnits.push(highSurrogate, lowSurrogate);
	      }
	      if (index + 1 == length || codeUnits.length > MAX_SIZE) {
	        result += stringFromCharCode.apply(null, codeUnits);
	        codeUnits.length = 0;
	      }
	    }
	    return result;
	  }

	  function assertType(type, expected) {
	    if (expected.indexOf('|') == -1) {
	      if (type == expected) {
	        return;
	      }

	      throw Error('Invalid node type: ' + type);
	    }

	    expected = assertType.hasOwnProperty(expected)
	      ? assertType[expected]
	      : (assertType[expected] = RegExp('^(?:' + expected + ')$'));

	    if (expected.test(type)) {
	      return;
	    }

	    throw Error('Invalid node type: ' + type);
	  }

	  /*--------------------------------------------------------------------------*/

	  function generate(node) {
	    var type = node.type;

	    if (generate.hasOwnProperty(type) && typeof generate[type] == 'function') {
	      return generate[type](node);
	    }

	    throw Error('Invalid node type: ' + type);
	  }

	  /*--------------------------------------------------------------------------*/

	  function generateAlternative(node) {
	    assertType(node.type, 'alternative');

	    var terms = node.body,
	        length = terms ? terms.length : 0;

	    if (length == 1) {
	      return generateTerm(terms[0]);
	    } else {
	      var i = -1,
	          result = '';

	      while (++i < length) {
	        result += generateTerm(terms[i]);
	      }

	      return result;
	    }
	  }

	  function generateAnchor(node) {
	    assertType(node.type, 'anchor');

	    switch (node.kind) {
	      case 'start':
	        return '^';
	      case 'end':
	        return '$';
	      case 'boundary':
	        return '\\b';
	      case 'not-boundary':
	        return '\\B';
	      default:
	        throw Error('Invalid assertion');
	    }
	  }

	  function generateAtom(node) {
	    assertType(node.type, 'anchor|characterClass|characterClassEscape|dot|group|reference|value');

	    return generate(node);
	  }

	  function generateCharacterClass(node) {
	    assertType(node.type, 'characterClass');

	    var classRanges = node.body,
	        length = classRanges ? classRanges.length : 0;

	    var i = -1,
	        result = '[';

	    if (node.negative) {
	      result += '^';
	    }

	    while (++i < length) {
	      result += generateClassAtom(classRanges[i]);
	    }

	    result += ']';

	    return result;
	  }

	  function generateCharacterClassEscape(node) {
	    assertType(node.type, 'characterClassEscape');

	    return '\\' + node.value;
	  }

	  function generateCharacterClassRange(node) {
	    assertType(node.type, 'characterClassRange');

	    var min = node.min,
	        max = node.max;

	    if (min.type == 'characterClassRange' || max.type == 'characterClassRange') {
	      throw Error('Invalid character class range');
	    }

	    return generateClassAtom(min) + '-' + generateClassAtom(max);
	  }

	  function generateClassAtom(node) {
	    assertType(node.type, 'anchor|characterClassEscape|characterClassRange|dot|value');

	    return generate(node);
	  }

	  function generateDisjunction(node) {
	    assertType(node.type, 'disjunction');

	    var body = node.body,
	        length = body ? body.length : 0;

	    if (length == 0) {
	      throw Error('No body');
	    } else if (length == 1) {
	      return generate(body[0]);
	    } else {
	      var i = -1,
	          result = '';

	      while (++i < length) {
	        if (i != 0) {
	          result += '|';
	        }
	        result += generate(body[i]);
	      }

	      return result;
	    }
	  }

	  function generateDot(node) {
	    assertType(node.type, 'dot');

	    return '.';
	  }

	  function generateGroup(node) {
	    assertType(node.type, 'group');

	    var result = '(';

	    switch (node.behavior) {
	      case 'normal':
	        break;
	      case 'ignore':
	        result += '?:';
	        break;
	      case 'lookahead':
	        result += '?=';
	        break;
	      case 'negativeLookahead':
	        result += '?!';
	        break;
	      default:
	        throw Error('Invalid behaviour: ' + node.behaviour);
	    }

	    var body = node.body,
	        length = body ? body.length : 0;

	    if (length == 1) {
	      result += generate(body[0]);
	    } else {
	      var i = -1;

	      while (++i < length) {
	        result += generate(body[i]);
	      }
	    }

	    result += ')';

	    return result;
	  }

	  function generateQuantifier(node) {
	    assertType(node.type, 'quantifier');

	    var quantifier = '',
	        min = node.min,
	        max = node.max;

	    switch (max) {
	      case undefined:
	      case null:
	        switch (min) {
	          case 0:
	            quantifier = '*'
	            break;
	          case 1:
	            quantifier = '+';
	            break;
	          default:
	            quantifier = '{' + min + ',}';
	            break;
	        }
	        break;
	      default:
	        if (min == max) {
	          quantifier = '{' + min + '}';
	        }
	        else if (min == 0 && max == 1) {
	          quantifier = '?';
	        } else {
	          quantifier = '{' + min + ',' + max + '}';
	        }
	        break;
	    }

	    if (!node.greedy) {
	      quantifier += '?';
	    }

	    return generateAtom(node.body[0]) + quantifier;
	  }

	  function generateReference(node) {
	    assertType(node.type, 'reference');

	    return '\\' + node.matchIndex;
	  }

	  function generateTerm(node) {
	    assertType(node.type, 'anchor|characterClass|characterClassEscape|empty|group|quantifier|reference|value');

	    return generate(node);
	  }

	  function generateValue(node) {
	    assertType(node.type, 'value');

	    var kind = node.kind,
	        codePoint = node.codePoint;

	    switch (kind) {
	      case 'controlLetter':
	        return '\\c' + fromCodePoint(codePoint + 64);
	      case 'hexadecimalEscape':
	        return '\\x' + ('00' + codePoint.toString(16).toUpperCase()).slice(-2);
	      case 'identifier':
	        return '\\' + fromCodePoint(codePoint);
	      case 'null':
	        return '\\' + codePoint;
	      case 'octal':
	        return '\\' + codePoint.toString(8);
	      case 'singleEscape':
	        switch (codePoint) {
	          case 0x0008:
	            return '\\b';
	          case 0x009:
	            return '\\t';
	          case 0x00A:
	            return '\\n';
	          case 0x00B:
	            return '\\v';
	          case 0x00C:
	            return '\\f';
	          case 0x00D:
	            return '\\r';
	          default:
	            throw Error('Invalid codepoint: ' + codePoint);
	        }
	      case 'symbol':
	        return fromCodePoint(codePoint);
	      case 'unicodeEscape':
	        return '\\u' + ('0000' + codePoint.toString(16).toUpperCase()).slice(-4);
	      case 'unicodeCodePointEscape':
	        return '\\u{' + codePoint.toString(16).toUpperCase() + '}';
	      default:
	        throw Error('Unsupported node kind: ' + kind);
	    }
	  }

	  /*--------------------------------------------------------------------------*/

	  generate.alternative = generateAlternative;
	  generate.anchor = generateAnchor;
	  generate.characterClass = generateCharacterClass;
	  generate.characterClassEscape = generateCharacterClassEscape;
	  generate.characterClassRange = generateCharacterClassRange;
	  generate.disjunction = generateDisjunction;
	  generate.dot = generateDot;
	  generate.group = generateGroup;
	  generate.quantifier = generateQuantifier;
	  generate.reference = generateReference;
	  generate.value = generateValue;

	  /*--------------------------------------------------------------------------*/

	  // export regjsgen
	  // some AMD build optimizers, like r.js, check for condition patterns like the following:
	  if (true) {
	    // define as an anonymous module so, through path mapping, it can be aliased
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return {
	        'generate': generate
	      };
	    }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	  // check for `exports` after `define` in case a build optimizer adds an `exports` object
	  else if (freeExports && freeModule) {
	    // in Narwhal, Node.js, Rhino -require, or RingoJS
	    freeExports.generate = generate;
	  }
	  // in a browser or Rhino
	  else {
	    root.regjsgen = {
	      'generate': generate
	    };
	  }
	}.call(this));

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(55)(module), (function() { return this; }())))

/***/ },
/* 6547 */
/***/ function(module, exports) {

	// regjsparser
	//
	// ==================================================================
	//
	// See ECMA-262 Standard: 15.10.1
	//
	// NOTE: The ECMA-262 standard uses the term "Assertion" for /^/. Here the
	//   term "Anchor" is used.
	//
	// Pattern ::
	//      Disjunction
	//
	// Disjunction ::
	//      Alternative
	//      Alternative | Disjunction
	//
	// Alternative ::
	//      [empty]
	//      Alternative Term
	//
	// Term ::
	//      Anchor
	//      Atom
	//      Atom Quantifier
	//
	// Anchor ::
	//      ^
	//      $
	//      \ b
	//      \ B
	//      ( ? = Disjunction )
	//      ( ? ! Disjunction )
	//
	// Quantifier ::
	//      QuantifierPrefix
	//      QuantifierPrefix ?
	//
	// QuantifierPrefix ::
	//      *
	//      +
	//      ?
	//      { DecimalDigits }
	//      { DecimalDigits , }
	//      { DecimalDigits , DecimalDigits }
	//
	// Atom ::
	//      PatternCharacter
	//      .
	//      \ AtomEscape
	//      CharacterClass
	//      ( Disjunction )
	//      ( ? : Disjunction )
	//
	// PatternCharacter ::
	//      SourceCharacter but not any of: ^ $ \ . * + ? ( ) [ ] { } |
	//
	// AtomEscape ::
	//      DecimalEscape
	//      CharacterEscape
	//      CharacterClassEscape
	//
	// CharacterEscape[U] ::
	//      ControlEscape
	//      c ControlLetter
	//      HexEscapeSequence
	//      RegExpUnicodeEscapeSequence[?U] (ES6)
	//      IdentityEscape[?U]
	//
	// ControlEscape ::
	//      one of f n r t v
	// ControlLetter ::
	//      one of
	//          a b c d e f g h i j k l m n o p q r s t u v w x y z
	//          A B C D E F G H I J K L M N O P Q R S T U V W X Y Z
	//
	// IdentityEscape ::
	//      SourceCharacter but not IdentifierPart
	//      <ZWJ>
	//      <ZWNJ>
	//
	// DecimalEscape ::
	//      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]
	//
	// CharacterClassEscape ::
	//      one of d D s S w W
	//
	// CharacterClass ::
	//      [ [lookahead ∉ {^}] ClassRanges ]
	//      [ ^ ClassRanges ]
	//
	// ClassRanges ::
	//      [empty]
	//      NonemptyClassRanges
	//
	// NonemptyClassRanges ::
	//      ClassAtom
	//      ClassAtom NonemptyClassRangesNoDash
	//      ClassAtom - ClassAtom ClassRanges
	//
	// NonemptyClassRangesNoDash ::
	//      ClassAtom
	//      ClassAtomNoDash NonemptyClassRangesNoDash
	//      ClassAtomNoDash - ClassAtom ClassRanges
	//
	// ClassAtom ::
	//      -
	//      ClassAtomNoDash
	//
	// ClassAtomNoDash ::
	//      SourceCharacter but not one of \ or ] or -
	//      \ ClassEscape
	//
	// ClassEscape ::
	//      DecimalEscape
	//      b
	//      CharacterEscape
	//      CharacterClassEscape

	(function() {

	  function parse(str, flags) {
	    function addRaw(node) {
	      node.raw = str.substring(node.range[0], node.range[1]);
	      return node;
	    }

	    function updateRawStart(node, start) {
	      node.range[0] = start;
	      return addRaw(node);
	    }

	    function createAnchor(kind, rawLength) {
	      return addRaw({
	        type: 'anchor',
	        kind: kind,
	        range: [
	          pos - rawLength,
	          pos
	        ]
	      });
	    }

	    function createValue(kind, codePoint, from, to) {
	      return addRaw({
	        type: 'value',
	        kind: kind,
	        codePoint: codePoint,
	        range: [from, to]
	      });
	    }

	    function createEscaped(kind, codePoint, value, fromOffset) {
	      fromOffset = fromOffset || 0;
	      return createValue(kind, codePoint, pos - (value.length + fromOffset), pos);
	    }

	    function createCharacter(matches) {
	      var _char = matches[0];
	      var first = _char.charCodeAt(0);
	      if (hasUnicodeFlag) {
	        var second;
	        if (_char.length === 1 && first >= 0xD800 && first <= 0xDBFF) {
	          second = lookahead().charCodeAt(0);
	          if (second >= 0xDC00 && second <= 0xDFFF) {
	            // Unicode surrogate pair
	            pos++;
	            return createValue(
	                'symbol',
	                (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000,
	                pos - 2, pos);
	          }
	        }
	      }
	      return createValue('symbol', first, pos - 1, pos);
	    }

	    function createDisjunction(alternatives, from, to) {
	      return addRaw({
	        type: 'disjunction',
	        body: alternatives,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function createDot() {
	      return addRaw({
	        type: 'dot',
	        range: [
	          pos - 1,
	          pos
	        ]
	      });
	    }

	    function createCharacterClassEscape(value) {
	      return addRaw({
	        type: 'characterClassEscape',
	        value: value,
	        range: [
	          pos - 2,
	          pos
	        ]
	      });
	    }

	    function createReference(matchIndex) {
	      return addRaw({
	        type: 'reference',
	        matchIndex: parseInt(matchIndex, 10),
	        range: [
	          pos - 1 - matchIndex.length,
	          pos
	        ]
	      });
	    }

	    function createGroup(behavior, disjunction, from, to) {
	      return addRaw({
	        type: 'group',
	        behavior: behavior,
	        body: disjunction,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function createQuantifier(min, max, from, to) {
	      if (to == null) {
	        from = pos - 1;
	        to = pos;
	      }

	      return addRaw({
	        type: 'quantifier',
	        min: min,
	        max: max,
	        greedy: true,
	        body: null, // set later on
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function createAlternative(terms, from, to) {
	      return addRaw({
	        type: 'alternative',
	        body: terms,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function createCharacterClass(classRanges, negative, from, to) {
	      return addRaw({
	        type: 'characterClass',
	        body: classRanges,
	        negative: negative,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function createClassRange(min, max, from, to) {
	      // See 15.10.2.15:
	      if (min.codePoint > max.codePoint) {
	        bail('invalid range in character class', min.raw + '-' + max.raw, from, to);
	      }

	      return addRaw({
	        type: 'characterClassRange',
	        min: min,
	        max: max,
	        range: [
	          from,
	          to
	        ]
	      });
	    }

	    function flattenBody(body) {
	      if (body.type === 'alternative') {
	        return body.body;
	      } else {
	        return [body];
	      }
	    }

	    function isEmpty(obj) {
	      return obj.type === 'empty';
	    }

	    function incr(amount) {
	      amount = (amount || 1);
	      var res = str.substring(pos, pos + amount);
	      pos += (amount || 1);
	      return res;
	    }

	    function skip(value) {
	      if (!match(value)) {
	        bail('character', value);
	      }
	    }

	    function match(value) {
	      if (str.indexOf(value, pos) === pos) {
	        return incr(value.length);
	      }
	    }

	    function lookahead() {
	      return str[pos];
	    }

	    function current(value) {
	      return str.indexOf(value, pos) === pos;
	    }

	    function next(value) {
	      return str[pos + 1] === value;
	    }

	    function matchReg(regExp) {
	      var subStr = str.substring(pos);
	      var res = subStr.match(regExp);
	      if (res) {
	        res.range = [];
	        res.range[0] = pos;
	        incr(res[0].length);
	        res.range[1] = pos;
	      }
	      return res;
	    }

	    function parseDisjunction() {
	      // Disjunction ::
	      //      Alternative
	      //      Alternative | Disjunction
	      var res = [], from = pos;
	      res.push(parseAlternative());

	      while (match('|')) {
	        res.push(parseAlternative());
	      }

	      if (res.length === 1) {
	        return res[0];
	      }

	      return createDisjunction(res, from, pos);
	    }

	    function parseAlternative() {
	      var res = [], from = pos;
	      var term;

	      // Alternative ::
	      //      [empty]
	      //      Alternative Term
	      while (term = parseTerm()) {
	        res.push(term);
	      }

	      if (res.length === 1) {
	        return res[0];
	      }

	      return createAlternative(res, from, pos);
	    }

	    function parseTerm() {
	      // Term ::
	      //      Anchor
	      //      Atom
	      //      Atom Quantifier

	      if (pos >= str.length || current('|') || current(')')) {
	        return null; /* Means: The term is empty */
	      }

	      var anchor = parseAnchor();

	      if (anchor) {
	        return anchor;
	      }

	      var atom = parseAtom();
	      if (!atom) {
	        bail('Expected atom');
	      }
	      var quantifier = parseQuantifier() || false;
	      if (quantifier) {
	        quantifier.body = flattenBody(atom);
	        // The quantifier contains the atom. Therefore, the beginning of the
	        // quantifier range is given by the beginning of the atom.
	        updateRawStart(quantifier, atom.range[0]);
	        return quantifier;
	      }
	      return atom;
	    }

	    function parseGroup(matchA, typeA, matchB, typeB) {
	      var type = null, from = pos;

	      if (match(matchA)) {
	        type = typeA;
	      } else if (match(matchB)) {
	        type = typeB;
	      } else {
	        return false;
	      }

	      var body = parseDisjunction();
	      if (!body) {
	        bail('Expected disjunction');
	      }
	      skip(')');
	      var group = createGroup(type, flattenBody(body), from, pos);

	      if (type == 'normal') {
	        // Keep track of the number of closed groups. This is required for
	        // parseDecimalEscape(). In case the string is parsed a second time the
	        // value already holds the total count and no incrementation is required.
	        if (firstIteration) {
	          closedCaptureCounter++;
	        }
	      }
	      return group;
	    }

	    function parseAnchor() {
	      // Anchor ::
	      //      ^
	      //      $
	      //      \ b
	      //      \ B
	      //      ( ? = Disjunction )
	      //      ( ? ! Disjunction )
	      var res, from = pos;

	      if (match('^')) {
	        return createAnchor('start', 1 /* rawLength */);
	      } else if (match('$')) {
	        return createAnchor('end', 1 /* rawLength */);
	      } else if (match('\\b')) {
	        return createAnchor('boundary', 2 /* rawLength */);
	      } else if (match('\\B')) {
	        return createAnchor('not-boundary', 2 /* rawLength */);
	      } else {
	        return parseGroup('(?=', 'lookahead', '(?!', 'negativeLookahead');
	      }
	    }

	    function parseQuantifier() {
	      // Quantifier ::
	      //      QuantifierPrefix
	      //      QuantifierPrefix ?
	      //
	      // QuantifierPrefix ::
	      //      *
	      //      +
	      //      ?
	      //      { DecimalDigits }
	      //      { DecimalDigits , }
	      //      { DecimalDigits , DecimalDigits }

	      var res, from = pos;
	      var quantifier;
	      var min, max;

	      if (match('*')) {
	        quantifier = createQuantifier(0);
	      }
	      else if (match('+')) {
	        quantifier = createQuantifier(1);
	      }
	      else if (match('?')) {
	        quantifier = createQuantifier(0, 1);
	      }
	      else if (res = matchReg(/^\{([0-9]+)\}/)) {
	        min = parseInt(res[1], 10);
	        quantifier = createQuantifier(min, min, res.range[0], res.range[1]);
	      }
	      else if (res = matchReg(/^\{([0-9]+),\}/)) {
	        min = parseInt(res[1], 10);
	        quantifier = createQuantifier(min, undefined, res.range[0], res.range[1]);
	      }
	      else if (res = matchReg(/^\{([0-9]+),([0-9]+)\}/)) {
	        min = parseInt(res[1], 10);
	        max = parseInt(res[2], 10);
	        if (min > max) {
	          bail('numbers out of order in {} quantifier', '', from, pos);
	        }
	        quantifier = createQuantifier(min, max, res.range[0], res.range[1]);
	      }

	      if (quantifier) {
	        if (match('?')) {
	          quantifier.greedy = false;
	          quantifier.range[1] += 1;
	        }
	      }

	      return quantifier;
	    }

	    function parseAtom() {
	      // Atom ::
	      //      PatternCharacter
	      //      .
	      //      \ AtomEscape
	      //      CharacterClass
	      //      ( Disjunction )
	      //      ( ? : Disjunction )

	      var res;

	      // jviereck: allow ']', '}' here as well to be compatible with browser's
	      //   implementations: ']'.match(/]/);
	      // if (res = matchReg(/^[^^$\\.*+?()[\]{}|]/)) {
	      if (res = matchReg(/^[^^$\\.*+?(){[|]/)) {
	        //      PatternCharacter
	        return createCharacter(res);
	      }
	      else if (match('.')) {
	        //      .
	        return createDot();
	      }
	      else if (match('\\')) {
	        //      \ AtomEscape
	        res = parseAtomEscape();
	        if (!res) {
	          bail('atomEscape');
	        }
	        return res;
	      }
	      else if (res = parseCharacterClass()) {
	        return res;
	      }
	      else {
	        //      ( Disjunction )
	        //      ( ? : Disjunction )
	        return parseGroup('(?:', 'ignore', '(', 'normal');
	      }
	    }

	    function parseUnicodeSurrogatePairEscape(firstEscape) {
	      if (hasUnicodeFlag) {
	        var first, second;
	        if (firstEscape.kind == 'unicodeEscape' &&
	          (first = firstEscape.codePoint) >= 0xD800 && first <= 0xDBFF &&
	          current('\\') && next('u') ) {
	          var prevPos = pos;
	          pos++;
	          var secondEscape = parseClassEscape();
	          if (secondEscape.kind == 'unicodeEscape' &&
	            (second = secondEscape.codePoint) >= 0xDC00 && second <= 0xDFFF) {
	            // Unicode surrogate pair
	            firstEscape.range[1] = secondEscape.range[1];
	            firstEscape.codePoint = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
	            firstEscape.type = 'value';
	            firstEscape.kind = 'unicodeCodePointEscape';
	            addRaw(firstEscape);
	          }
	          else {
	            pos = prevPos;
	          }
	        }
	      }
	      return firstEscape;
	    }

	    function parseClassEscape() {
	      return parseAtomEscape(true);
	    }

	    function parseAtomEscape(insideCharacterClass) {
	      // AtomEscape ::
	      //      DecimalEscape
	      //      CharacterEscape
	      //      CharacterClassEscape

	      var res, from = pos;

	      res = parseDecimalEscape();
	      if (res) {
	        return res;
	      }

	      // For ClassEscape
	      if (insideCharacterClass) {
	        if (match('b')) {
	          // 15.10.2.19
	          // The production ClassEscape :: b evaluates by returning the
	          // CharSet containing the one character <BS> (Unicode value 0008).
	          return createEscaped('singleEscape', 0x0008, '\\b');
	        } else if (match('B')) {
	          bail('\\B not possible inside of CharacterClass', '', from);
	        }
	      }

	      res = parseCharacterEscape();

	      return res;
	    }


	    function parseDecimalEscape() {
	      // DecimalEscape ::
	      //      DecimalIntegerLiteral [lookahead ∉ DecimalDigit]
	      //      CharacterClassEscape :: one of d D s S w W

	      var res, match;

	      if (res = matchReg(/^(?!0)\d+/)) {
	        match = res[0];
	        var refIdx = parseInt(res[0], 10);
	        if (refIdx <= closedCaptureCounter) {
	          // If the number is smaller than the normal-groups found so
	          // far, then it is a reference...
	          return createReference(res[0]);
	        } else {
	          // ... otherwise it needs to be interpreted as a octal (if the
	          // number is in an octal format). If it is NOT octal format,
	          // then the slash is ignored and the number is matched later
	          // as normal characters.

	          // Recall the negative decision to decide if the input must be parsed
	          // a second time with the total normal-groups.
	          backrefDenied.push(refIdx);

	          // Reset the position again, as maybe only parts of the previous
	          // matched numbers are actual octal numbers. E.g. in '019' only
	          // the '01' should be matched.
	          incr(-res[0].length);
	          if (res = matchReg(/^[0-7]{1,3}/)) {
	            return createEscaped('octal', parseInt(res[0], 8), res[0], 1);
	          } else {
	            // If we end up here, we have a case like /\91/. Then the
	            // first slash is to be ignored and the 9 & 1 to be treated
	            // like ordinary characters. Create a character for the
	            // first number only here - other number-characters
	            // (if available) will be matched later.
	            res = createCharacter(matchReg(/^[89]/));
	            return updateRawStart(res, res.range[0] - 1);
	          }
	        }
	      }
	      // Only allow octal numbers in the following. All matched numbers start
	      // with a zero (if the do not, the previous if-branch is executed).
	      // If the number is not octal format and starts with zero (e.g. `091`)
	      // then only the zeros `0` is treated here and the `91` are ordinary
	      // characters.
	      // Example:
	      //   /\091/.exec('\091')[0].length === 3
	      else if (res = matchReg(/^[0-7]{1,3}/)) {
	        match = res[0];
	        if (/^0{1,3}$/.test(match)) {
	          // If they are all zeros, then only take the first one.
	          return createEscaped('null', 0x0000, '0', match.length + 1);
	        } else {
	          return createEscaped('octal', parseInt(match, 8), match, 1);
	        }
	      } else if (res = matchReg(/^[dDsSwW]/)) {
	        return createCharacterClassEscape(res[0]);
	      }
	      return false;
	    }

	    function parseCharacterEscape() {
	      // CharacterEscape ::
	      //      ControlEscape
	      //      c ControlLetter
	      //      HexEscapeSequence
	      //      UnicodeEscapeSequence
	      //      IdentityEscape

	      var res;
	      if (res = matchReg(/^[fnrtv]/)) {
	        // ControlEscape
	        var codePoint = 0;
	        switch (res[0]) {
	          case 't': codePoint = 0x009; break;
	          case 'n': codePoint = 0x00A; break;
	          case 'v': codePoint = 0x00B; break;
	          case 'f': codePoint = 0x00C; break;
	          case 'r': codePoint = 0x00D; break;
	        }
	        return createEscaped('singleEscape', codePoint, '\\' + res[0]);
	      } else if (res = matchReg(/^c([a-zA-Z])/)) {
	        // c ControlLetter
	        return createEscaped('controlLetter', res[1].charCodeAt(0) % 32, res[1], 2);
	      } else if (res = matchReg(/^x([0-9a-fA-F]{2})/)) {
	        // HexEscapeSequence
	        return createEscaped('hexadecimalEscape', parseInt(res[1], 16), res[1], 2);
	      } else if (res = matchReg(/^u([0-9a-fA-F]{4})/)) {
	        // UnicodeEscapeSequence
	        return parseUnicodeSurrogatePairEscape(
	          createEscaped('unicodeEscape', parseInt(res[1], 16), res[1], 2)
	        );
	      } else if (hasUnicodeFlag && (res = matchReg(/^u\{([0-9a-fA-F]+)\}/))) {
	        // RegExpUnicodeEscapeSequence (ES6 Unicode code point escape)
	        return createEscaped('unicodeCodePointEscape', parseInt(res[1], 16), res[1], 4);
	      } else {
	        // IdentityEscape
	        return parseIdentityEscape();
	      }
	    }

	    // Taken from the Esprima parser.
	    function isIdentifierPart(ch) {
	      // Generated by `tools/generate-identifier-regex.js`.
	      var NonAsciiIdentifierPart = new RegExp('[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19D9\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099\u309A\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]');

	      return (ch === 36) || (ch === 95) ||  // $ (dollar) and _ (underscore)
	        (ch >= 65 && ch <= 90) ||         // A..Z
	        (ch >= 97 && ch <= 122) ||        // a..z
	        (ch >= 48 && ch <= 57) ||         // 0..9
	        (ch === 92) ||                    // \ (backslash)
	        ((ch >= 0x80) && NonAsciiIdentifierPart.test(String.fromCharCode(ch)));
	    }

	    function parseIdentityEscape() {
	      // IdentityEscape ::
	      //      SourceCharacter but not IdentifierPart
	      //      <ZWJ>
	      //      <ZWNJ>

	      var ZWJ = '\u200C';
	      var ZWNJ = '\u200D';

	      var tmp;

	      if (!isIdentifierPart(lookahead())) {
	        tmp = incr();
	        return createEscaped('identifier', tmp.charCodeAt(0), tmp, 1);
	      }

	      if (match(ZWJ)) {
	        // <ZWJ>
	        return createEscaped('identifier', 0x200C, ZWJ);
	      } else if (match(ZWNJ)) {
	        // <ZWNJ>
	        return createEscaped('identifier', 0x200D, ZWNJ);
	      }

	      return null;
	    }

	    function parseCharacterClass() {
	      // CharacterClass ::
	      //      [ [lookahead ∉ {^}] ClassRanges ]
	      //      [ ^ ClassRanges ]

	      var res, from = pos;
	      if (res = matchReg(/^\[\^/)) {
	        res = parseClassRanges();
	        skip(']');
	        return createCharacterClass(res, true, from, pos);
	      } else if (match('[')) {
	        res = parseClassRanges();
	        skip(']');
	        return createCharacterClass(res, false, from, pos);
	      }

	      return null;
	    }

	    function parseClassRanges() {
	      // ClassRanges ::
	      //      [empty]
	      //      NonemptyClassRanges

	      var res;
	      if (current(']')) {
	        // Empty array means nothing insinde of the ClassRange.
	        return [];
	      } else {
	        res = parseNonemptyClassRanges();
	        if (!res) {
	          bail('nonEmptyClassRanges');
	        }
	        return res;
	      }
	    }

	    function parseHelperClassRanges(atom) {
	      var from, to, res;
	      if (current('-') && !next(']')) {
	        // ClassAtom - ClassAtom ClassRanges
	        skip('-');

	        res = parseClassAtom();
	        if (!res) {
	          bail('classAtom');
	        }
	        to = pos;
	        var classRanges = parseClassRanges();
	        if (!classRanges) {
	          bail('classRanges');
	        }
	        from = atom.range[0];
	        if (classRanges.type === 'empty') {
	          return [createClassRange(atom, res, from, to)];
	        }
	        return [createClassRange(atom, res, from, to)].concat(classRanges);
	      }

	      res = parseNonemptyClassRangesNoDash();
	      if (!res) {
	        bail('nonEmptyClassRangesNoDash');
	      }

	      return [atom].concat(res);
	    }

	    function parseNonemptyClassRanges() {
	      // NonemptyClassRanges ::
	      //      ClassAtom
	      //      ClassAtom NonemptyClassRangesNoDash
	      //      ClassAtom - ClassAtom ClassRanges

	      var atom = parseClassAtom();
	      if (!atom) {
	        bail('classAtom');
	      }

	      if (current(']')) {
	        // ClassAtom
	        return [atom];
	      }

	      // ClassAtom NonemptyClassRangesNoDash
	      // ClassAtom - ClassAtom ClassRanges
	      return parseHelperClassRanges(atom);
	    }

	    function parseNonemptyClassRangesNoDash() {
	      // NonemptyClassRangesNoDash ::
	      //      ClassAtom
	      //      ClassAtomNoDash NonemptyClassRangesNoDash
	      //      ClassAtomNoDash - ClassAtom ClassRanges

	      var res = parseClassAtom();
	      if (!res) {
	        bail('classAtom');
	      }
	      if (current(']')) {
	        //      ClassAtom
	        return res;
	      }

	      // ClassAtomNoDash NonemptyClassRangesNoDash
	      // ClassAtomNoDash - ClassAtom ClassRanges
	      return parseHelperClassRanges(res);
	    }

	    function parseClassAtom() {
	      // ClassAtom ::
	      //      -
	      //      ClassAtomNoDash
	      if (match('-')) {
	        return createCharacter('-');
	      } else {
	        return parseClassAtomNoDash();
	      }
	    }

	    function parseClassAtomNoDash() {
	      // ClassAtomNoDash ::
	      //      SourceCharacter but not one of \ or ] or -
	      //      \ ClassEscape

	      var res;
	      if (res = matchReg(/^[^\\\]-]/)) {
	        return createCharacter(res[0]);
	      } else if (match('\\')) {
	        res = parseClassEscape();
	        if (!res) {
	          bail('classEscape');
	        }

	        return parseUnicodeSurrogatePairEscape(res);
	      }
	    }

	    function bail(message, details, from, to) {
	      from = from == null ? pos : from;
	      to = to == null ? from : to;

	      var contextStart = Math.max(0, from - 10);
	      var contextEnd = Math.min(to + 10, str.length);

	      // Output a bit of context and a line pointing to where our error is.
	      //
	      // We are assuming that there are no actual newlines in the content as this is a regular expression.
	      var context = '    ' + str.substring(contextStart, contextEnd);
	      var pointer = '    ' + new Array(from - contextStart + 1).join(' ') + '^';

	      throw SyntaxError(message + ' at position ' + from + (details ? ': ' + details : '') + '\n' + context + '\n' + pointer);
	    }

	    var backrefDenied = [];
	    var closedCaptureCounter = 0;
	    var firstIteration = true;
	    var hasUnicodeFlag = (flags || "").indexOf("u") !== -1;
	    var pos = 0;

	    // Convert the input to a string and treat the empty string special.
	    str = String(str);
	    if (str === '') {
	      str = '(?:)';
	    }

	    var result = parseDisjunction();

	    if (result.range[1] !== str.length) {
	      bail('Could not parse entire input - got stuck', '', result.range[1]);
	    }

	    // The spec requires to interpret the `\2` in `/\2()()/` as backreference.
	    // As the parser collects the number of capture groups as the string is
	    // parsed it is impossible to make these decisions at the point when the
	    // `\2` is handled. In case the local decision turns out to be wrong after
	    // the parsing has finished, the input string is parsed a second time with
	    // the total number of capture groups set.
	    //
	    // SEE: https://github.com/jviereck/regjsparser/issues/70
	    for (var i = 0; i < backrefDenied.length; i++) {
	      if (backrefDenied[i] <= closedCaptureCounter) {
	        // Parse the input a second time.
	        pos = 0;
	        firstIteration = false;
	        return parseDisjunction();
	      }
	    }

	    return result;
	  }

	  var regjsparser = {
	    parse: parse
	  };

	  if (typeof module !== 'undefined' && module.exports) {
	    module.exports = regjsparser;
	  } else {
	    window.regjsparser = regjsparser;
	  }

	}());


/***/ },
/* 6548 */
/***/ function(module, exports, __webpack_require__) {

	var generate = __webpack_require__(6546).generate;
	var parse = __webpack_require__(6547).parse;
	var regenerate = __webpack_require__(2401);
	var iuMappings = __webpack_require__(7792);
	var ESCAPE_SETS = __webpack_require__(6545);

	function getCharacterClassEscapeSet(character) {
		if (unicode) {
			if (ignoreCase) {
				return ESCAPE_SETS.UNICODE_IGNORE_CASE[character];
			}
			return ESCAPE_SETS.UNICODE[character];
		}
		return ESCAPE_SETS.REGULAR[character];
	}

	var object = {};
	var hasOwnProperty = object.hasOwnProperty;
	function has(object, property) {
		return hasOwnProperty.call(object, property);
	}

	// Prepare a Regenerate set containing all code points, used for negative
	// character classes (if any).
	var UNICODE_SET = regenerate().addRange(0x0, 0x10FFFF);
	// Without the `u` flag, the range stops at 0xFFFF.
	// https://mths.be/es6#sec-pattern-semantics
	var BMP_SET = regenerate().addRange(0x0, 0xFFFF);

	// Prepare a Regenerate set containing all code points that are supposed to be
	// matched by `/./u`. https://mths.be/es6#sec-atom
	var DOT_SET_UNICODE = UNICODE_SET.clone() // all Unicode code points
		.remove(
			// minus `LineTerminator`s (https://mths.be/es6#sec-line-terminators):
			0x000A, // Line Feed <LF>
			0x000D, // Carriage Return <CR>
			0x2028, // Line Separator <LS>
			0x2029  // Paragraph Separator <PS>
		);
	// Prepare a Regenerate set containing all code points that are supposed to be
	// matched by `/./` (only BMP code points).
	var DOT_SET = DOT_SET_UNICODE.clone()
		.intersection(BMP_SET);

	// Add a range of code points + any case-folded code points in that range to a
	// set.
	regenerate.prototype.iuAddRange = function(min, max) {
		var $this = this;
		do {
			var folded = caseFold(min);
			if (folded) {
				$this.add(folded);
			}
		} while (++min <= max);
		return $this;
	};

	function assign(target, source) {
		for (var key in source) {
			// Note: `hasOwnProperty` is not needed here.
			target[key] = source[key];
		}
	}

	function update(item, pattern) {
		// TODO: Test if memoizing `pattern` here is worth the effort.
		if (!pattern) {
			return;
		}
		var tree = parse(pattern, '');
		switch (tree.type) {
			case 'characterClass':
			case 'group':
			case 'value':
				// No wrapping needed.
				break;
			default:
				// Wrap the pattern in a non-capturing group.
				tree = wrap(tree, pattern);
		}
		assign(item, tree);
	}

	function wrap(tree, pattern) {
		// Wrap the pattern in a non-capturing group.
		return {
			'type': 'group',
			'behavior': 'ignore',
			'body': [tree],
			'raw': '(?:' + pattern + ')'
		};
	}

	function caseFold(codePoint) {
		return has(iuMappings, codePoint) ? iuMappings[codePoint] : false;
	}

	var ignoreCase = false;
	var unicode = false;
	function processCharacterClass(characterClassItem) {
		var set = regenerate();
		var body = characterClassItem.body.forEach(function(item) {
			switch (item.type) {
				case 'value':
					set.add(item.codePoint);
					if (ignoreCase && unicode) {
						var folded = caseFold(item.codePoint);
						if (folded) {
							set.add(folded);
						}
					}
					break;
				case 'characterClassRange':
					var min = item.min.codePoint;
					var max = item.max.codePoint;
					set.addRange(min, max);
					if (ignoreCase && unicode) {
						set.iuAddRange(min, max);
					}
					break;
				case 'characterClassEscape':
					set.add(getCharacterClassEscapeSet(item.value));
					break;
				// The `default` clause is only here as a safeguard; it should never be
				// reached. Code coverage tools should ignore it.
				/* istanbul ignore next */
				default:
					throw Error('Unknown term type: ' + item.type);
			}
		});
		if (characterClassItem.negative) {
			set = (unicode ? UNICODE_SET : BMP_SET).clone().remove(set);
		}
		update(characterClassItem, set.toString());
		return characterClassItem;
	}

	function processTerm(item) {
		switch (item.type) {
			case 'dot':
				update(
					item,
					(unicode ? DOT_SET_UNICODE : DOT_SET).toString()
				);
				break;
			case 'characterClass':
				item = processCharacterClass(item);
				break;
			case 'characterClassEscape':
				update(
					item,
					getCharacterClassEscapeSet(item.value).toString()
				);
				break;
			case 'alternative':
			case 'disjunction':
			case 'group':
			case 'quantifier':
				item.body = item.body.map(processTerm);
				break;
			case 'value':
				var codePoint = item.codePoint;
				var set = regenerate(codePoint);
				if (ignoreCase && unicode) {
					var folded = caseFold(codePoint);
					if (folded) {
						set.add(folded);
					}
				}
				update(item, set.toString());
				break;
			case 'anchor':
			case 'empty':
			case 'group':
			case 'reference':
				// Nothing to do here.
				break;
			// The `default` clause is only here as a safeguard; it should never be
			// reached. Code coverage tools should ignore it.
			/* istanbul ignore next */
			default:
				throw Error('Unknown term type: ' + item.type);
		}
		return item;
	};

	module.exports = function(pattern, flags) {
		var tree = parse(pattern, flags);
		ignoreCase = flags ? flags.indexOf('i') > -1 : false;
		unicode = flags ? flags.indexOf('u') > -1 : false;
		assign(tree, processTerm(tree));
		return generate(tree);
	};


/***/ },
/* 6549 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      MemberExpression: {
	        exit: function exit(_ref2) {
	          var node = _ref2.node;

	          var prop = node.property;
	          if (!node.computed && t.isIdentifier(prop) && !t.isValidIdentifier(prop.name)) {
	            // foo.default -> foo["default"]
	            node.property = t.stringLiteral(prop.name);
	            node.computed = true;
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6550 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      ObjectProperty: {
	        exit: function exit(_ref2) {
	          var node = _ref2.node;

	          var key = node.key;
	          if (!node.computed && t.isIdentifier(key) && !t.isValidIdentifier(key.name)) {
	            // default: "bar" -> "default": "bar"
	            node.key = t.stringLiteral(key.name);
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6551 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(16)["default"];

	var _interopRequireWildcard = __webpack_require__(17)["default"];

	exports.__esModule = true;

	var _babelHelperDefineMap = __webpack_require__(6552);

	var defineMap = _interopRequireWildcard(_babelHelperDefineMap);

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  return {
	    visitor: {
	      ObjectExpression: function ObjectExpression(path, file) {
	        var node = path.node;

	        var hasAny = false;
	        for (var _iterator = (node.properties /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var prop = _ref;

	          if (prop.kind === "get" || prop.kind === "set") {
	            hasAny = true;
	            break;
	          }
	        }
	        if (!hasAny) return;

	        var mutatorMap = {};

	        node.properties = node.properties.filter(function (prop) {
	          if (!prop.computed && (prop.kind === "get" || prop.kind === "set")) {
	            defineMap.push(mutatorMap, prop, null, file);
	            return false;
	          } else {
	            return true;
	          }
	        });

	        path.replaceWith(t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("defineProperties")), [node, defineMap.toDefineObject(mutatorMap)]));
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6552 */
[7996, 3, 17, 6553, 2420, 2434, 28],
/* 6553 */
[7994, 3, 17, 6554, 6555, 28],
/* 6554 */
[7995, 17, 28],
/* 6555 */
[7873, 1425, 3, 17, 6725, 2434, 659, 6556, 28],
/* 6556 */
[7912, 3, 235, 6564, 6563, 6561, 6559, 6562, 6560, 6558, 236, 2402, 903, 6565, 6566],
/* 6557 */
2810,
/* 6558 */
[7913, 3, 235],
/* 6559 */
[7914, 242, 16, 3, 236, 235, 658],
/* 6560 */
[7916, 3, 904, 235],
/* 6561 */
[7917, 16, 3, 236, 235, 658],
/* 6562 */
[7918, 42, 3, 235, 904],
/* 6563 */
[7919, 242, 16, 3, 236, 235, 516],
/* 6564 */
[7920, 3, 236, 235, 516],
/* 6565 */
[7921, 3, 236, 235],
/* 6566 */
[7922, 3, 6567, 236, 903, 235, 658, 516],
/* 6567 */
2820,
/* 6568 */
[7925, 42, 904, 903, 236],
/* 6569 */
[7874, 42, 16, 3, 17, 417, 28],
/* 6570 */
[7877, 16, 17, 3, 28, 417],
/* 6571 */
2774,
/* 6572 */
[7878, 16, 3, 659],
/* 6573 */
[7879, 17, 28],
/* 6574 */
[7880, 16],
/* 6575 */
[7881, 16, 3, 17, 417, 28],
/* 6576 */
[7883, 16, 17, 6578, 28],
/* 6577 */
[7884, 16, 17, 28],
/* 6578 */
[7885, 17, 913, 28, 6577],
/* 6579 */
[7886, 16, 3, 17, 519, 28],
/* 6580 */
[7887, 42, 16, 17, 28],
/* 6581 */
2784,
/* 6582 */
[7889, 16, 3, 17, 2404, 6580, 417, 28],
/* 6583 */
[7890, 16, 6581],
/* 6584 */
[7891, 16, 3, 17, 6587, 659, 417, 6602, 28],
/* 6585 */
[7894, 42, 3, 17, 2406, 28],
/* 6586 */
[7895, 16, 1424, 17, 3, 2405, 1413, 28, 1422],
/* 6587 */
[7806, 3, 6600, 2409, 6599, 6598, 6588],
/* 6588 */
[7807, 6590, 6589, 6593, 6591, 6595],
/* 6589 */
2682,
/* 6590 */
2683,
/* 6591 */
[7808, 6592],
/* 6592 */
2685,
/* 6593 */
[7809, 6594],
/* 6594 */
2685,
/* 6595 */
2688,
/* 6596 */
2689,
/* 6597 */
[7810, 2407],
/* 6598 */
[7811, 6596, 2407, 6597],
/* 6599 */
2692,
/* 6600 */
[7812, 6601],
/* 6601 */
2694,
/* 6602 */
[7912, 3, 237, 6610, 6609, 6607, 6605, 6608, 6606, 6604, 238, 2408, 905, 6611, 6612],
/* 6603 */
2810,
/* 6604 */
[7913, 3, 237],
/* 6605 */
[7914, 242, 16, 3, 238, 237, 660],
/* 6606 */
[7916, 3, 906, 237],
/* 6607 */
[7917, 16, 3, 238, 237, 660],
/* 6608 */
[7918, 42, 3, 237, 906],
/* 6609 */
[7919, 242, 16, 3, 238, 237, 517],
/* 6610 */
[7920, 3, 238, 237, 517],
/* 6611 */
[7921, 3, 238, 237],
/* 6612 */
[7922, 3, 6613, 238, 905, 237, 660, 517],
/* 6613 */
2820,
/* 6614 */
[7925, 42, 906, 905, 238],
/* 6615 */
[7928, 6616],
/* 6616 */
[7929, 6617],
/* 6617 */
2825,
/* 6618 */
[7896, 7793],
/* 6619 */
2791,
/* 6620 */
[7814, 6621],
/* 6621 */
2697,
/* 6622 */
[7898, 16, 6735, 3, 17, 6729, 6728, 6730, 2432, 661, 28],
/* 6623 */
[7899, 17, 3, 28, 1414, 357],
/* 6624 */
[7900, 3, 357],
/* 6625 */
[7901, 3, 357],
/* 6626 */
[7902, 3, 357],
/* 6627 */
[7904, 357, 6623, 6624, 6626, 6628, 6629, 6625],
/* 6628 */
[7905, 3, 357],
/* 6629 */
[7906, 3, 357],
/* 6630 */
[7907, 17, 28],
/* 6631 */
[7909, 17, 28],
/* 6632 */
[7911, 16, 3, 17, 2410, 2418, 28, 1414],
/* 6633 */
[7874, 42, 16, 3, 17, 418, 28],
/* 6634 */
[7877, 16, 17, 3, 28, 418],
/* 6635 */
2774,
/* 6636 */
[7878, 16, 3, 661],
/* 6637 */
[7879, 17, 28],
/* 6638 */
[7880, 16],
/* 6639 */
[7881, 16, 3, 17, 418, 28],
/* 6640 */
[7883, 16, 17, 6642, 28],
/* 6641 */
[7884, 16, 17, 28],
/* 6642 */
[7885, 17, 913, 28, 6641],
/* 6643 */
[7886, 16, 3, 17, 519, 28],
/* 6644 */
[7887, 42, 16, 17, 28],
/* 6645 */
2784,
/* 6646 */
[7889, 16, 3, 17, 2412, 6644, 418, 28],
/* 6647 */
[7890, 16, 6645],
/* 6648 */
[7891, 16, 3, 17, 6651, 661, 418, 6663, 28],
/* 6649 */
[7894, 42, 3, 17, 2414, 28],
/* 6650 */
[7895, 16, 1424, 17, 3, 2413, 1416, 28, 1422],
/* 6651 */
[7806, 3, 6661, 2416, 6660, 2418, 6652],
/* 6652 */
[7807, 6654, 6653, 6657, 6655, 6659],
/* 6653 */
2682,
/* 6654 */
2683,
/* 6655 */
[7808, 6656],
/* 6656 */
2685,
/* 6657 */
[7809, 6658],
/* 6658 */
2685,
/* 6659 */
2688,
/* 6660 */
2692,
/* 6661 */
[7812, 6662],
/* 6662 */
2694,
/* 6663 */
[7912, 3, 239, 6671, 6670, 6668, 6666, 6669, 6667, 6665, 240, 2415, 907, 6672, 6673],
/* 6664 */
2810,
/* 6665 */
[7913, 3, 239],
/* 6666 */
[7914, 242, 16, 3, 240, 239, 662],
/* 6667 */
[7916, 3, 908, 239],
/* 6668 */
[7917, 16, 3, 240, 239, 662],
/* 6669 */
[7918, 42, 3, 239, 908],
/* 6670 */
[7919, 242, 16, 3, 240, 239, 518],
/* 6671 */
[7920, 3, 240, 239, 518],
/* 6672 */
[7921, 3, 240, 239],
/* 6673 */
[7922, 3, 6674, 240, 907, 239, 662, 518],
/* 6674 */
2820,
/* 6675 */
[7925, 42, 908, 907, 240],
/* 6676 */
[7928, 6677],
/* 6677 */
[7929, 6678],
/* 6678 */
2825,
/* 6679 */
[7896, 7794],
/* 6680 */
2791,
/* 6681 */
[7814, 6682],
/* 6682 */
2697,
/* 6683 */
2689,
/* 6684 */
[7810, 2417],
/* 6685 */
2809,
/* 6686 */
2827,
/* 6687 */
[7930, 6694, 6704, 911, 6724],
/* 6688 */
[7932, 2422, 6696, 6714],
/* 6689 */
[7934, 6708, 909],
/* 6690 */
1580,
/* 6691 */
1581,
/* 6692 */
2836,
/* 6693 */
[7935, 520],
/* 6694 */
[7937, 6700, 6701, 663, 2436, 6734],
/* 6695 */
1584,
/* 6696 */
[7939, 2426, 6710],
/* 6697 */
[7941, 2425, 2435],
/* 6698 */
[7946, 6715, 6716, 6717, 241, 6731],
/* 6699 */
[7947, 2428, 360],
/* 6700 */
[7948, 6699, 6718, 360],
/* 6701 */
[7949, 1417, 2428, 2430, 241, 1420, 2431, 2419, 360, 1421],
/* 6702 */
[7950, 1417, 1421],
/* 6703 */
984,
/* 6704 */
[7951, 2427, 6707, 6712],
/* 6705 */
2850,
/* 6706 */
2851,
/* 6707 */
[7953, 163],
/* 6708 */
[7954, 163],
/* 6709 */
[7955, 663, 911, 2421],
/* 6710 */
[7956, 1418, 358, 360],
/* 6711 */
[7957, 360],
/* 6712 */
[7958, 6689, 909],
/* 6713 */
[7959, 2421],
/* 6714 */
[7960, 663, 241],
/* 6715 */
[7961, 6691],
/* 6716 */
2861,
/* 6717 */
[7962, 520],
/* 6718 */
[7964, 2431, 6732],
/* 6719 */
2865,
/* 6720 */
2866,
/* 6721 */
[7966, 6706],
/* 6722 */
2868,
/* 6723 */
[7971, 912, 241, 910, 358, 2435],
/* 6724 */
2870,
/* 6725 */
[7975, 2424, 663],
/* 6726 */
[7978, 163],
/* 6727 */
[7979, 6726, 359],
/* 6728 */
[7980, 359],
/* 6729 */
[7981, 6697, 912, 359],
/* 6730 */
[7982, 163],
/* 6731 */
[7984, 358, 359],
/* 6732 */
[7990, 520, 360],
/* 6733 */
[7991, 6705, 520],
/* 6734 */
[7992, 2429, 6702, 1420],
/* 6735 */
[7817, 6744],
/* 6736 */
[7819, 6746],
/* 6737 */
[7820, 6747],
/* 6738 */
[7821, 6748],
/* 6739 */
[7824, 6751],
/* 6740 */
[7826, 6752],
/* 6741 */
[7827, 6738, 6737, 6736],
/* 6742 */
2107,
/* 6743 */
[7829, 6777, 6776, 6768],
/* 6744 */
[7830, 6770],
/* 6745 */
[7831, 138],
/* 6746 */
[7832, 138],
/* 6747 */
[7833, 138, 6771],
/* 6748 */
[7834, 138, 6772],
/* 6749 */
[7835, 1436, 279],
/* 6750 */
[7836, 6773, 279],
/* 6751 */
[7837, 6774, 279],
/* 6752 */
[7838, 1436, 279],
/* 6753 */
[7839, 1436, 6775, 279],
/* 6754 */
2746,
/* 6755 */
2747,
/* 6756 */
[7841, 1428, 521],
/* 6757 */
[7844, 138],
/* 6758 */
[7848, 1428],
/* 6759 */
[7849, 1428],
/* 6760 */
[7850, 138, 1434, 1435, 1432, 521],
/* 6761 */
1559,
/* 6762 */
[7852, 138, 665],
/* 6763 */
[7855, 138, 2441, 1427, 2438],
/* 6764 */
[7858, 6765, 1429],
/* 6765 */
1564,
/* 6766 */
[7860, 1429],
/* 6767 */
[7862, 6756, 521, 915, 279],
/* 6768 */
[7863, 1427, 6767, 279],
/* 6769 */
[7864, 6755, 6761, 915, 665, 2442],
/* 6770 */
[7865, 664],
/* 6771 */
[7866, 665, 1433],
/* 6772 */
[7867, 1433, 2440],
/* 6773 */
[7868, 6766, 1433],
/* 6774 */
[7869, 664, 6763],
/* 6775 */
428,
/* 6776 */
[7870, 6764, 2442],
/* 6777 */
[7872, 6769, 915],
/* 6778 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var parse = _ref.parse;
	  var traverse = _ref.traverse;

	  return {
	    visitor: {
	      CallExpression: function CallExpression(path) {
	        if (path.get("callee").isIdentifier({ name: "eval" }) && path.node.arguments.length === 1) {
	          var evaluate = path.get("arguments")[0].evaluate();
	          if (!evaluate.confident) return;

	          var code = evaluate.value;
	          if (typeof code !== "string") return;

	          var ast = parse(code);
	          traverse.removeProperties(ast);
	          return ast.program;
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6779 */
/***/ function(module, exports, __webpack_require__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(38)["default"];

	var _interopRequireWildcard = __webpack_require__(70)["default"];

	exports.__esModule = true;

	var _babelHelperExplodeAssignableExpression = __webpack_require__(6780);

	var _babelHelperExplodeAssignableExpression2 = _interopRequireDefault(_babelHelperExplodeAssignableExpression);

	var _babelTypes = __webpack_require__(81);

	var t = _interopRequireWildcard(_babelTypes);

	exports["default"] = function (opts /*: {
	                                      build: Function;
	                                      operator: string;
	                                    }*/) /*: Object*/ {
	  var visitor = {};

	  function isAssignment(node) {
	    return node.operator === opts.operator + "=";
	  }

	  function buildAssignment(left, right) {
	    return t.assignmentExpression("=", left, right);
	  }

	  visitor.ExpressionStatement = function (path, file) {
	    // hit the `AssignmentExpression` one below
	    if (path.isCompletionRecord()) return;

	    var expr = path.node.expression;
	    if (!isAssignment(expr)) return;

	    var nodes = [];
	    var exploded = _babelHelperExplodeAssignableExpression2["default"](expr.left, nodes, file, path.scope, true);

	    nodes.push(t.expressionStatement(buildAssignment(exploded.ref, opts.build(exploded.uid, expr.right))));

	    path.replaceWithMultiple(nodes);
	  };

	  visitor.AssignmentExpression = function (path, file) {
	    var node = path.node;
	    var scope = path.scope;

	    if (!isAssignment(node)) return;

	    var nodes = [];
	    var exploded = _babelHelperExplodeAssignableExpression2["default"](node.left, nodes, file, scope);
	    nodes.push(buildAssignment(exploded.ref, opts.build(exploded.uid, node.right)));
	    path.replaceWithMultiple(nodes);
	  };

	  visitor.BinaryExpression = function (path) {
	    var node = path.node;

	    if (node.operator === opts.operator) {
	      path.replaceWith(opts.build(node.left, node.right));
	    }
	  };

	  return visitor;
	};

	module.exports = exports["default"];

/***/ },
/* 6780 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(70)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(81);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type { Scope } from "babel-traverse";*/

	function getObjRef(node, nodes, file, scope) {
	  var ref = undefined;
	  if (t.isIdentifier(node)) {
	    if (scope.hasBinding(node.name)) {
	      // this variable is declared in scope so we can be 100% sure
	      // that evaluating it multiple times wont trigger a getter
	      // or something else
	      return node;
	    } else {
	      // could possibly trigger a getter so we need to only evaluate
	      // it once
	      ref = node;
	    }
	  } else if (t.isMemberExpression(node)) {
	    ref = node.object;

	    if (t.isIdentifier(ref) && scope.hasBinding(ref.name)) {
	      // the object reference that we need to save is locally declared
	      // so as per the previous comment we can be 100% sure evaluating
	      // it multiple times will be safe
	      return ref;
	    }
	  } else {
	    throw new Error("We can't explode this node type " + node.type);
	  }

	  var temp = scope.generateUidIdentifierBasedOnNode(ref);
	  nodes.push(t.variableDeclaration("var", [t.variableDeclarator(temp, ref)]));
	  return temp;
	}

	function getPropRef(node, nodes, file, scope) {
	  var prop = node.property;
	  var key = t.toComputedKey(node, prop);
	  if (t.isLiteral(key)) return key;

	  var temp = scope.generateUidIdentifierBasedOnNode(prop);
	  nodes.push(t.variableDeclaration("var", [t.variableDeclarator(temp, prop)]));
	  return temp;
	}

	exports["default"] = function (node /*: Object*/, nodes /*: Array<Object>*/, file, scope /*: Scope*/, allowedSingleIdent /*:: ?: boolean*/) /*: {
	                                                                                                                                              uid: Object;
	                                                                                                                                              ref: Object;
	                                                                                                                                            }*/ {
	  var obj = undefined;
	  if (t.isIdentifier(node) && allowedSingleIdent) {
	    obj = node;
	  } else {
	    obj = getObjRef(node, nodes, file, scope);
	  }

	  var ref = undefined,
	      uid = undefined;

	  if (t.isIdentifier(node)) {
	    ref = node;
	    uid = obj;
	  } else {
	    var prop = getPropRef(node, nodes, file, scope);
	    var computed = node.computed || t.isLiteral(prop);
	    uid = ref = t.memberExpression(obj, prop, computed);
	  }

	  return {
	    uid: uid,
	    ref: ref
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6781 */
[7898, 102, 6898, 38, 70, 6890, 6889, 6891, 2470, 666, 81],
/* 6782 */
[7899, 70, 38, 81, 1437, 361],
/* 6783 */
[7900, 38, 361],
/* 6784 */
[7901, 38, 361],
/* 6785 */
[7902, 38, 361],
/* 6786 */
[7904, 361, 6782, 6783, 6785, 6787, 6788, 6784],
/* 6787 */
[7905, 38, 361],
/* 6788 */
[7906, 38, 361],
/* 6789 */
[7907, 70, 81],
/* 6790 */
[7909, 70, 81],
/* 6791 */
[7911, 102, 38, 70, 2448, 2456, 81, 1437],
/* 6792 */
[7874, 117, 102, 38, 70, 419, 81],
/* 6793 */
[7877, 102, 70, 38, 81, 419],
/* 6794 */
2774,
/* 6795 */
[7878, 102, 38, 666],
/* 6796 */
[7879, 70, 81],
/* 6797 */
[7880, 102],
/* 6798 */
[7881, 102, 38, 70, 419, 81],
/* 6799 */
[7883, 102, 70, 6801, 81],
/* 6800 */
[7884, 102, 70, 81],
/* 6801 */
[7885, 70, 2475, 81, 6800],
/* 6802 */
[7886, 102, 38, 70, 1440, 81],
/* 6803 */
[7887, 117, 102, 70, 81],
/* 6804 */
2784,
/* 6805 */
[7889, 102, 38, 70, 2450, 6803, 419, 81],
/* 6806 */
[7890, 102, 6804],
/* 6807 */
[7891, 102, 38, 70, 6810, 666, 419, 6822, 81],
/* 6808 */
[7894, 117, 38, 70, 2452, 81],
/* 6809 */
[7895, 102, 2474, 70, 38, 2451, 1439, 81, 2469],
/* 6810 */
[7806, 38, 6820, 2454, 6819, 2456, 6811],
/* 6811 */
[7807, 6813, 6812, 6816, 6814, 6818],
/* 6812 */
2682,
/* 6813 */
2683,
/* 6814 */
[7808, 6815],
/* 6815 */
2685,
/* 6816 */
[7809, 6817],
/* 6817 */
2685,
/* 6818 */
2688,
/* 6819 */
2692,
/* 6820 */
[7812, 6821],
/* 6821 */
2694,
/* 6822 */
[7912, 38, 243, 6830, 6829, 6827, 6825, 6828, 6826, 6824, 244, 2453, 916, 6831, 6832],
/* 6823 */
2810,
/* 6824 */
[7913, 38, 243],
/* 6825 */
[7914, 668, 102, 38, 244, 243, 667],
/* 6826 */
[7916, 38, 917, 243],
/* 6827 */
[7917, 102, 38, 244, 243, 667],
/* 6828 */
[7918, 117, 38, 243, 917],
/* 6829 */
[7919, 668, 102, 38, 244, 243, 522],
/* 6830 */
[7920, 38, 244, 243, 522],
/* 6831 */
[7921, 38, 244, 243],
/* 6832 */
[7922, 38, 6833, 244, 916, 243, 667, 522],
/* 6833 */
2820,
/* 6834 */
[7925, 117, 917, 916, 244],
/* 6835 */
[7928, 6836],
/* 6836 */
[7929, 6837],
/* 6837 */
2825,
/* 6838 */
[7896, 7795],
/* 6839 */
2791,
/* 6840 */
[7814, 6841],
/* 6841 */
2697,
/* 6842 */
2689,
/* 6843 */
[7810, 2455],
/* 6844 */
2827,
/* 6845 */
1578,
/* 6846 */
[7930, 6854, 6866, 920, 6886],
/* 6847 */
[7931, 6848],
/* 6848 */
[7932, 2458, 6857, 6876],
/* 6849 */
[7934, 6870, 919],
/* 6850 */
1580,
/* 6851 */
1581,
/* 6852 */
2836,
/* 6853 */
[7935, 523],
/* 6854 */
[7937, 6861, 6862, 918, 2473, 6896],
/* 6855 */
[7938, 6850, 2458, 2459, 2461, 6882, 6883, 6884, 280, 164],
/* 6856 */
1584,
/* 6857 */
[7939, 2461, 6872],
/* 6858 */
[7941, 2460, 2472],
/* 6859 */
[7946, 6877, 6878, 6879, 280, 6892],
/* 6860 */
[7947, 2464, 363],
/* 6861 */
[7948, 6860, 6880, 363],
/* 6862 */
[7949, 2462, 2464, 6864, 280, 2466, 2467, 6845, 363, 2468],
/* 6863 */
[7950, 2462, 2468],
/* 6864 */
1591,
/* 6865 */
984,
/* 6866 */
[7951, 2463, 6869, 6874],
/* 6867 */
2850,
/* 6868 */
2851,
/* 6869 */
[7953, 164],
/* 6870 */
[7954, 164],
/* 6871 */
[7955, 918, 920, 2457],
/* 6872 */
[7956, 1441, 420, 363],
/* 6873 */
[7957, 363],
/* 6874 */
[7958, 6849, 919],
/* 6875 */
[7959, 2457],
/* 6876 */
[7960, 918, 280],
/* 6877 */
[7961, 6851],
/* 6878 */
2861,
/* 6879 */
[7962, 523],
/* 6880 */
[7964, 2467, 6894],
/* 6881 */
2865,
/* 6882 */
2866,
/* 6883 */
[7966, 6868],
/* 6884 */
2868,
/* 6885 */
[7971, 1444, 280, 1443, 420, 2472],
/* 6886 */
2870,
/* 6887 */
[7978, 164],
/* 6888 */
[7979, 6887, 362],
/* 6889 */
[7980, 362],
/* 6890 */
[7981, 6858, 1444, 362],
/* 6891 */
[7982, 164],
/* 6892 */
[7984, 420, 362],
/* 6893 */
[7986, 2471, 6852, 6875],
/* 6894 */
[7990, 523, 363],
/* 6895 */
[7991, 6867, 523],
/* 6896 */
[7992, 2465, 6863, 2466],
/* 6897 */
2809,
/* 6898 */
[7817, 6910],
/* 6899 */
[7819, 6912],
/* 6900 */
[7820, 6913],
/* 6901 */
[7821, 6914],
/* 6902 */
[7822, 6915],
/* 6903 */
[7824, 6917],
/* 6904 */
[7825, 6919],
/* 6905 */
[7826, 6918],
/* 6906 */
[7827, 6901, 6900, 6899],
/* 6907 */
[7828, 668, 6903],
/* 6908 */
2107,
/* 6909 */
[7829, 6943, 6942, 6934],
/* 6910 */
[7830, 6936],
/* 6911 */
[7831, 139],
/* 6912 */
[7832, 139],
/* 6913 */
[7833, 139, 6937],
/* 6914 */
[7834, 139, 6938],
/* 6915 */
[7835, 1454, 281],
/* 6916 */
[7836, 6939, 281],
/* 6917 */
[7837, 6940, 281],
/* 6918 */
[7838, 1454, 281],
/* 6919 */
[7839, 1454, 6941, 281],
/* 6920 */
2746,
/* 6921 */
2747,
/* 6922 */
[7841, 1446, 524],
/* 6923 */
[7844, 139],
/* 6924 */
[7848, 1446],
/* 6925 */
[7849, 1446],
/* 6926 */
[7850, 139, 1452, 1453, 1450, 524],
/* 6927 */
1559,
/* 6928 */
[7852, 139, 670],
/* 6929 */
[7855, 139, 2479, 1445, 2476],
/* 6930 */
[7858, 6931, 1447],
/* 6931 */
1564,
/* 6932 */
[7860, 1447],
/* 6933 */
[7862, 6922, 524, 922, 281],
/* 6934 */
[7863, 1445, 6933, 281],
/* 6935 */
[7864, 6921, 6927, 922, 670, 2480],
/* 6936 */
[7865, 669],
/* 6937 */
[7866, 670, 1451],
/* 6938 */
[7867, 1451, 2478],
/* 6939 */
[7868, 6932, 1451],
/* 6940 */
[7869, 669, 6929],
/* 6941 */
428,
/* 6942 */
[7870, 6930, 2480],
/* 6943 */
[7872, 6935, 922],
/* 6944 */
[7816, 6945],
/* 6945 */
[7829, 6969, 6968, 6966],
/* 6946 */
2746,
/* 6947 */
2747,
/* 6948 */
[7840, 6955],
/* 6949 */
[7841, 2487, 671],
/* 6950 */
[7842, 6946],
/* 6951 */
[7843, 6953],
/* 6952 */
[7845, 1456, 1455, 6950],
/* 6953 */
543,
/* 6954 */
[7848, 2487],
/* 6955 */
701,
/* 6956 */
[7850, 924, 2491, 2492, 1457, 671],
/* 6957 */
1559,
/* 6958 */
1560,
/* 6959 */
[7854, 1457],
/* 6960 */
[7857, 1456],
/* 6961 */
[7858, 6962, 2488],
/* 6962 */
1564,
/* 6963 */
[7859, 6954, 2488],
/* 6964 */
975,
/* 6965 */
[7862, 6949, 671, 923, 1455],
/* 6966 */
[7863, 6948, 6965, 1455],
/* 6967 */
[7864, 6947, 6957, 923, 6963, 2490],
/* 6968 */
[7870, 6961, 2490],
/* 6969 */
[7872, 6967, 923],
/* 6970 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      MemberExpression: function MemberExpression(path) {
	        if (path.get("object").matchesPattern("process.env")) {
	          var key = path.toComputedKey();
	          if (t.isStringLiteral(key)) {
	            path.replaceWith(t.valueToNode(process.env[key.value]));
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 6971 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      FunctionExpression: {
	        exit: function exit(path) {
	          var node = path.node;

	          if (!node.id) return;
	          node._ignoreUserWhitespace = true;

	          path.replaceWith(t.callExpression(t.functionExpression(null, [], t.blockStatement([t.toStatement(node), t.returnStatement(node.id)])), []));
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6972 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      MemberExpression: {
	        exit: function exit(_ref2) {
	          var node = _ref2.node;

	          var prop = node.property;
	          if (node.computed && t.isLiteral(prop) && t.isValidIdentifier(prop.value)) {
	            // foo["bar"] => foo.bar
	            node.property = t.identifier(prop.value);
	            node.computed = false;
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6973 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    visitor: {
	      VariableDeclaration: function VariableDeclaration(path) {
	        if (!path.inList) return;

	        var node = path.node;

	        while (true) {
	          var sibling = path.getSibling(path.key + 1);
	          if (!sibling.isVariableDeclaration({ kind: node.kind })) break;

	          node.declarations = node.declarations.concat(sibling.node.declarations);
	          sibling.remove();
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6974 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      Literal: function Literal(path) {
	        if (typeof path.node.value === "boolean") {
	          path.replaceWith(t.unaryExpression("!", t.numericLiteral(+!path.node.value), true));
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6975 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      MemberExpression: function MemberExpression(path) {
	        if (path.matchesPattern("process.env.NODE_ENV")) {
	          path.replaceWith(t.valueToNode(("production")));

	          if (path.parentPath.isBinaryExpression()) {
	            var evaluated = path.parentPath.evaluate();
	            if (evaluated.confident) {
	              path.parentPath.replaceWith(t.valueToNode(evaluated.value));
	            }
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6976 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    visitor: {
	      CallExpression: function CallExpression(path, file) {
	        if (path.get("callee").matchesPattern("Object.assign")) {
	          path.node.callee = file.addHelper("extends");
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 6977 */
[7816, 6978],
/* 6978 */
[7829, 7002, 7001, 6999],
/* 6979 */
2746,
/* 6980 */
2747,
/* 6981 */
[7840, 6988],
/* 6982 */
[7841, 2495, 672],
/* 6983 */
[7842, 6979],
/* 6984 */
[7843, 6986],
/* 6985 */
[7845, 1459, 1458, 6983],
/* 6986 */
543,
/* 6987 */
[7848, 2495],
/* 6988 */
701,
/* 6989 */
[7850, 926, 2499, 2500, 1460, 672],
/* 6990 */
1559,
/* 6991 */
1560,
/* 6992 */
[7854, 1460],
/* 6993 */
[7857, 1459],
/* 6994 */
[7858, 6995, 2496],
/* 6995 */
1564,
/* 6996 */
[7859, 6987, 2496],
/* 6997 */
975,
/* 6998 */
[7862, 6982, 672, 925, 1458],
/* 6999 */
[7863, 6981, 6998, 1458],
/* 7000 */
[7864, 6980, 6990, 925, 6996, 2498],
/* 7001 */
[7870, 6994, 2498],
/* 7002 */
[7872, 7000, 925],
/* 7003 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    visitor: {
	      CallExpression: function CallExpression(path, file) {
	        if (path.get("callee").matchesPattern("Object.setPrototypeOf")) {
	          path.node.callee = file.addHelper("defaults");
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 7004 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      ObjectProperty: {
	        exit: function exit(_ref2) {
	          var node = _ref2.node;

	          var key = node.key;
	          if (t.isLiteral(key) && t.isValidIdentifier(key.value)) {
	            // "foo": "bar" -> foo: "bar"
	            node.key = t.identifier(key.value);
	            node.computed = false;
	          }
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 7005 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(7006)["default"];

	var _interopRequireDefault = __webpack_require__(7007)["default"];

	exports.__esModule = true;

	var _lodashArrayPull = __webpack_require__(7033);

	var _lodashArrayPull2 = _interopRequireDefault(_lodashArrayPull);

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  function isProtoKey(node) {
	    return t.isLiteral(t.toComputedKey(node, node.key), { value: "__proto__" });
	  }

	  function isProtoAssignmentExpression(node) {
	    var left = node.left;
	    return t.isMemberExpression(left) && t.isLiteral(t.toComputedKey(left, left.property), { value: "__proto__" });
	  }

	  function buildDefaultsCallExpression(expr, ref, file) {
	    return t.expressionStatement(t.callExpression(file.addHelper("defaults"), [ref, expr.right]));
	  }

	  return {
	    visitor: {
	      AssignmentExpression: function AssignmentExpression(path, file) {
	        if (!isProtoAssignmentExpression(path.node)) return;

	        var nodes = [];
	        var left = path.node.left.object;
	        var temp = path.scope.maybeGenerateMemoised(left);

	        if (temp) nodes.push(t.expressionStatement(t.assignmentExpression("=", temp, left)));
	        nodes.push(buildDefaultsCallExpression(path.node, temp || left, file));
	        if (temp) nodes.push(temp);

	        path.replaceWithMultiple(nodes);
	      },

	      ExpressionStatement: function ExpressionStatement(path, file) {
	        var expr = path.node.expression;
	        if (!t.isAssignmentExpression(expr, { operator: "=" })) return;

	        if (isProtoAssignmentExpression(expr)) {
	          path.replaceWith(buildDefaultsCallExpression(expr, expr.left.object, file));
	        }
	      },

	      ObjectExpression: function ObjectExpression(path, file) {
	        var proto = undefined;
	        var node = path.node;

	        for (var _iterator = (node.properties /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var prop = _ref;

	          if (isProtoKey(prop)) {
	            proto = prop.value;
	            _lodashArrayPull2["default"](node.properties, prop);
	          }
	        }

	        if (proto) {
	          var args = [t.objectExpression([]), proto];
	          if (node.properties.length) args.push(node);
	          path.replaceWith(t.callExpression(file.addHelper("extends"), args));
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 7006 */
[7816, 7008],
/* 7007 */
1,
/* 7008 */
[7829, 7032, 7031, 7029],
/* 7009 */
2746,
/* 7010 */
2747,
/* 7011 */
[7840, 7018],
/* 7012 */
[7841, 2501, 673],
/* 7013 */
[7842, 7009],
/* 7014 */
[7843, 7016],
/* 7015 */
[7845, 1462, 1461, 7013],
/* 7016 */
543,
/* 7017 */
[7848, 2501],
/* 7018 */
701,
/* 7019 */
[7850, 928, 2505, 2506, 1463, 673],
/* 7020 */
1559,
/* 7021 */
1560,
/* 7022 */
[7854, 1463],
/* 7023 */
[7857, 1462],
/* 7024 */
[7858, 7025, 2502],
/* 7025 */
1564,
/* 7026 */
[7859, 7017, 2502],
/* 7027 */
975,
/* 7028 */
[7862, 7012, 673, 927, 1461],
/* 7029 */
[7863, 7011, 7028, 1461],
/* 7030 */
[7864, 7010, 7020, 927, 7026, 2504],
/* 7031 */
[7870, 7024, 2504],
/* 7032 */
[7872, 7030, 927],
/* 7033 */
[8001, 7034],
/* 7034 */
[7944, 7035],
/* 7035 */
2865,
/* 7036 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  var immutabilityVisitor = {
	    enter: function enter(path, state) {
	      var stop = function stop() {
	        state.isImmutable = false;
	        path.stop();
	      };

	      if (path.isJSXClosingElement()) {
	        path.skip();
	        return;
	      }

	      if (path.isJSXIdentifier({ name: "ref" }) && path.parentPath.isJSXAttribute({ name: path.node })) {
	        return stop();
	      }

	      if (path.isJSXIdentifier() || path.isIdentifier() || path.isJSXMemberExpression()) {
	        return;
	      }

	      if (!path.isImmutable()) stop();
	    }
	  };

	  return {
	    visitor: {
	      JSXElement: function JSXElement(path) {
	        if (path.node._hoisted) return;

	        var state = { isImmutable: true };
	        path.traverse(immutabilityVisitor, state);

	        if (state.isImmutable) {
	          path.hoist();
	        } else {
	          path.node._hoisted = true;
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 7037 */
1,
/* 7038 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _getIterator = __webpack_require__(7039)["default"];

	exports.__esModule = true;

	exports["default"] = function (_ref2) {
	  var t = _ref2.types;

	  function hasRefOrSpread(attrs) {
	    for (var i = 0; i < attrs.length; i++) {
	      var attr = attrs[i];
	      if (t.isJSXSpreadAttribute(attr)) return true;
	      if (isJSXAttributeOfName(attr, "ref")) return true;
	    }
	    return false;
	  }

	  function isJSXAttributeOfName(attr, name) {
	    return t.isJSXAttribute(attr) && t.isJSXIdentifier(attr.name, { name: name });
	  }

	  function getAttributeValue(attr) {
	    var value = attr.value;
	    if (!value) return t.identifier("true");
	    if (t.isJSXExpressionContainer(value)) value = value.expression;
	    return value;
	  }

	  return {
	    visitor: {
	      JSXElement: function JSXElement(path, file) {
	        var node = path.node;

	        // filter
	        var open = node.openingElement;
	        if (hasRefOrSpread(open.attributes)) return;

	        // init
	        var props = t.objectExpression([]);
	        var key = null;
	        var type = open.name;

	        if (t.isJSXIdentifier(type) && t.react.isCompatTag(type.name)) {
	          type = t.stringLiteral(type.name);
	        }

	        function pushProp(objProps, key, value) {
	          objProps.push(t.objectProperty(key, value));
	        }

	        // props
	        for (var _iterator = (open.attributes /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var attr = _ref;

	          if (isJSXAttributeOfName(attr, "key")) {
	            key = getAttributeValue(attr);
	          } else {
	            var _name = attr.name.name;
	            var propertyKey = t.isValidIdentifier(_name) ? t.identifier(_name) : t.stringLiteral(_name);
	            pushProp(props.properties, propertyKey, getAttributeValue(attr));
	          }
	        }

	        var args = [type, props];
	        if (key || node.children.length) {
	          var children = t.react.buildChildren(node);
	          args.push.apply(args, [key || t.unaryExpression("void", t.numericLiteral(0), true)].concat(children));
	        }

	        var el = t.callExpression(file.addHelper("jsx"), args);
	        path.replaceWith(el);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 7039 */
[7816, 7040],
/* 7040 */
[7829, 7064, 7063, 7061],
/* 7041 */
2746,
/* 7042 */
2747,
/* 7043 */
[7840, 7050],
/* 7044 */
[7841, 2508, 674],
/* 7045 */
[7842, 7041],
/* 7046 */
[7843, 7048],
/* 7047 */
[7845, 1465, 1464, 7045],
/* 7048 */
543,
/* 7049 */
[7848, 2508],
/* 7050 */
701,
/* 7051 */
[7850, 930, 2512, 2513, 1466, 674],
/* 7052 */
1559,
/* 7053 */
1560,
/* 7054 */
[7854, 1466],
/* 7055 */
[7857, 1465],
/* 7056 */
[7858, 7057, 2509],
/* 7057 */
1564,
/* 7058 */
[7859, 7049, 2509],
/* 7059 */
975,
/* 7060 */
[7862, 7044, 674, 929, 1464],
/* 7061 */
[7863, 7043, 7060, 1464],
/* 7062 */
[7864, 7042, 7052, 929, 7058, 2511],
/* 7063 */
[7870, 7056, 2511],
/* 7064 */
[7872, 7062, 929],
/* 7065 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    manipulateOptions: function manipulateOptions(opts, parserOpts) {
	      parserOpts.plugins.push("jsx");
	    },

	    visitor: __webpack_require__(7066)({
	      pre: function pre(state) {
	        state.callee = state.tagExpr;
	      },

	      post: function post(state) {
	        if (t.react.isCompatTag(state.tagName)) {
	          state.call = t.callExpression(t.memberExpression(t.memberExpression(t.identifier("React"), t.identifier("DOM")), state.tagExpr, t.isLiteral(state.tagExpr)), state.args);
	        }
	      }
	    })
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 7066 */
[8002, 43, 76, 1470, 91],
/* 7067 */
[7898, 103, 7184, 43, 76, 7177, 7176, 7178, 2535, 675, 91],
/* 7068 */
[7899, 76, 43, 91, 1467, 364],
/* 7069 */
[7900, 43, 364],
/* 7070 */
[7901, 43, 364],
/* 7071 */
[7902, 43, 364],
/* 7072 */
[7904, 364, 7068, 7069, 7071, 7073, 7074, 7070],
/* 7073 */
[7905, 43, 364],
/* 7074 */
[7906, 43, 364],
/* 7075 */
[7907, 76, 91],
/* 7076 */
[7909, 76, 91],
/* 7077 */
[7911, 103, 43, 76, 2514, 1470, 91, 1467],
/* 7078 */
[7874, 118, 103, 43, 76, 421, 91],
/* 7079 */
[7877, 103, 76, 43, 91, 421],
/* 7080 */
2774,
/* 7081 */
[7878, 103, 43, 675],
/* 7082 */
[7879, 76, 91],
/* 7083 */
[7880, 103],
/* 7084 */
[7881, 103, 43, 76, 421, 91],
/* 7085 */
[7883, 103, 76, 7087, 91],
/* 7086 */
[7884, 103, 76, 91],
/* 7087 */
[7885, 76, 2540, 91, 7086],
/* 7088 */
[7886, 103, 43, 76, 1471, 91],
/* 7089 */
[7887, 118, 103, 76, 91],
/* 7090 */
2784,
/* 7091 */
[7889, 103, 43, 76, 2516, 7089, 421, 91],
/* 7092 */
[7890, 103, 7090],
/* 7093 */
[7891, 103, 43, 76, 7096, 675, 421, 7108, 91],
/* 7094 */
[7894, 118, 43, 76, 2518, 91],
/* 7095 */
[7895, 103, 2539, 76, 43, 2517, 1469, 91, 2534],
/* 7096 */
[7806, 43, 7106, 2520, 7105, 1470, 7097],
/* 7097 */
[7807, 7099, 7098, 7102, 7100, 7104],
/* 7098 */
2682,
/* 7099 */
2683,
/* 7100 */
[7808, 7101],
/* 7101 */
2685,
/* 7102 */
[7809, 7103],
/* 7103 */
2685,
/* 7104 */
2688,
/* 7105 */
2692,
/* 7106 */
[7812, 7107],
/* 7107 */
2694,
/* 7108 */
[7912, 43, 245, 7116, 7115, 7113, 7111, 7114, 7112, 7110, 246, 2519, 931, 7117, 7118],
/* 7109 */
2810,
/* 7110 */
[7913, 43, 245],
/* 7111 */
[7914, 677, 103, 43, 246, 245, 676],
/* 7112 */
[7916, 43, 932, 245],
/* 7113 */
[7917, 103, 43, 246, 245, 676],
/* 7114 */
[7918, 118, 43, 245, 932],
/* 7115 */
[7919, 677, 103, 43, 246, 245, 525],
/* 7116 */
[7920, 43, 246, 245, 525],
/* 7117 */
[7921, 43, 246, 245],
/* 7118 */
[7922, 43, 7119, 246, 931, 245, 676, 525],
/* 7119 */
2820,
/* 7120 */
[7925, 118, 932, 931, 246],
/* 7121 */
[7928, 7122],
/* 7122 */
[7929, 7123],
/* 7123 */
2825,
/* 7124 */
[7896, 7796],
/* 7125 */
2791,
/* 7126 */
[7814, 7127],
/* 7127 */
2697,
/* 7128 */
2809,
/* 7129 */
2689,
/* 7130 */
[7810, 2521],
/* 7131 */
2827,
/* 7132 */
1578,
/* 7133 */
[7930, 7141, 7153, 935, 7173],
/* 7134 */
[7931, 7135],
/* 7135 */
[7932, 2523, 7144, 7163],
/* 7136 */
[7934, 7157, 934],
/* 7137 */
1580,
/* 7138 */
1581,
/* 7139 */
2836,
/* 7140 */
[7935, 526],
/* 7141 */
[7937, 7148, 7149, 933, 2538, 7183],
/* 7142 */
[7938, 7137, 2523, 2524, 2526, 7169, 7170, 7171, 282, 165],
/* 7143 */
1584,
/* 7144 */
[7939, 2526, 7159],
/* 7145 */
[7941, 2525, 2537],
/* 7146 */
[7946, 7164, 7165, 7166, 282, 7179],
/* 7147 */
[7947, 2529, 366],
/* 7148 */
[7948, 7147, 7167, 366],
/* 7149 */
[7949, 2527, 2529, 7151, 282, 2531, 2532, 7132, 366, 2533],
/* 7150 */
[7950, 2527, 2533],
/* 7151 */
1591,
/* 7152 */
984,
/* 7153 */
[7951, 2528, 7156, 7161],
/* 7154 */
2850,
/* 7155 */
2851,
/* 7156 */
[7953, 165],
/* 7157 */
[7954, 165],
/* 7158 */
[7955, 933, 935, 2522],
/* 7159 */
[7956, 1472, 422, 366],
/* 7160 */
[7957, 366],
/* 7161 */
[7958, 7136, 934],
/* 7162 */
[7959, 2522],
/* 7163 */
[7960, 933, 282],
/* 7164 */
[7961, 7138],
/* 7165 */
2861,
/* 7166 */
[7962, 526],
/* 7167 */
[7964, 2532, 7181],
/* 7168 */
2865,
/* 7169 */
2866,
/* 7170 */
[7966, 7155],
/* 7171 */
2868,
/* 7172 */
[7971, 1475, 282, 1474, 422, 2537],
/* 7173 */
2870,
/* 7174 */
[7978, 165],
/* 7175 */
[7979, 7174, 365],
/* 7176 */
[7980, 365],
/* 7177 */
[7981, 7145, 1475, 365],
/* 7178 */
[7982, 165],
/* 7179 */
[7984, 422, 365],
/* 7180 */
[7986, 2536, 7139, 7162],
/* 7181 */
[7990, 526, 366],
/* 7182 */
[7991, 7154, 526],
/* 7183 */
[7992, 2530, 7150, 2531],
/* 7184 */
[7817, 7196],
/* 7185 */
[7819, 7198],
/* 7186 */
[7820, 7199],
/* 7187 */
[7821, 7200],
/* 7188 */
[7822, 7201],
/* 7189 */
[7824, 7203],
/* 7190 */
[7825, 7205],
/* 7191 */
[7826, 7204],
/* 7192 */
[7827, 7187, 7186, 7185],
/* 7193 */
[7828, 677, 7189],
/* 7194 */
2107,
/* 7195 */
[7829, 7229, 7228, 7220],
/* 7196 */
[7830, 7222],
/* 7197 */
[7831, 140],
/* 7198 */
[7832, 140],
/* 7199 */
[7833, 140, 7223],
/* 7200 */
[7834, 140, 7224],
/* 7201 */
[7835, 1485, 283],
/* 7202 */
[7836, 7225, 283],
/* 7203 */
[7837, 7226, 283],
/* 7204 */
[7838, 1485, 283],
/* 7205 */
[7839, 1485, 7227, 283],
/* 7206 */
2746,
/* 7207 */
2747,
/* 7208 */
[7841, 1477, 527],
/* 7209 */
[7844, 140],
/* 7210 */
[7848, 1477],
/* 7211 */
[7849, 1477],
/* 7212 */
[7850, 140, 1483, 1484, 1481, 527],
/* 7213 */
1559,
/* 7214 */
[7852, 140, 679],
/* 7215 */
[7855, 140, 2544, 1476, 2541],
/* 7216 */
[7858, 7217, 1478],
/* 7217 */
1564,
/* 7218 */
[7860, 1478],
/* 7219 */
[7862, 7208, 527, 937, 283],
/* 7220 */
[7863, 1476, 7219, 283],
/* 7221 */
[7864, 7207, 7213, 937, 679, 2545],
/* 7222 */
[7865, 678],
/* 7223 */
[7866, 679, 1482],
/* 7224 */
[7867, 1482, 2543],
/* 7225 */
[7868, 7218, 1482],
/* 7226 */
[7869, 678, 7215],
/* 7227 */
428,
/* 7228 */
[7870, 7216, 2545],
/* 7229 */
[7872, 7221, 937],
/* 7230 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(__dirname) {
	/**
	* This adds {fileName, lineNumber} annotations to React component definitions
	* and to jsx tag literals.
	*
	*
	* == JSX Literals ==
	*
	* <sometag />
	*
	* becomes:
	*
	* <sometag __source={{fileName: 'this/file.js', lineNumber: 10}}/>
	*/

	"use strict";

	var _interopRequireDefault = __webpack_require__(7231)["default"];

	exports.__esModule = true;

	var _path = __webpack_require__(289);

	var _path2 = _interopRequireDefault(_path);

	var TRACE_ID = "__source";

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  function makeTrace(fileName, lineNumber) {
	    var fileNameLiteral = fileName != null ? t.stringLiteral(fileName) : t.nullLiteral();
	    var fileLineLiteral = lineNumber != null ? t.numericLiteral(lineNumber) : t.nullLiteral();
	    var fileNameProperty = t.objectProperty(t.identifier("fileName"), fileNameLiteral);
	    var lineNumberProperty = t.objectProperty(t.identifier("lineNumber"), fileLineLiteral);
	    return t.objectExpression([fileNameProperty, lineNumberProperty]);
	  }

	  var visitor = {
	    JSXOpeningElement: function JSXOpeningElement(node, state) {
	      var id = t.jSXIdentifier(TRACE_ID);
	      var fileName = state.file.log.filename !== "unknown" ? _path2["default"].relative(__dirname, state.file.log.filename) : null;
	      var trace = makeTrace(fileName, node.container.openingElement.loc.start.line);

	      node.container.openingElement.attributes.push(t.jSXAttribute(id, t.jSXExpressionContainer(trace)));
	    }
	  };

	  return {
	    visitor: visitor
	  };
	};

	module.exports = exports["default"];
	/* WEBPACK VAR INJECTION */}.call(exports, "/"))

/***/ },
/* 7231 */
1,
/* 7232 */
[8002, 44, 77, 1489, 92],
/* 7233 */
[7898, 93, 7350, 44, 77, 7343, 7342, 7344, 2572, 680, 92],
/* 7234 */
[7899, 77, 44, 92, 1486, 367],
/* 7235 */
[7900, 44, 367],
/* 7236 */
[7901, 44, 367],
/* 7237 */
[7902, 44, 367],
/* 7238 */
[7904, 367, 7234, 7235, 7237, 7239, 7240, 7236],
/* 7239 */
[7905, 44, 367],
/* 7240 */
[7906, 44, 367],
/* 7241 */
[7907, 77, 92],
/* 7242 */
[7909, 77, 92],
/* 7243 */
[7911, 93, 44, 77, 2551, 1489, 92, 1486],
/* 7244 */
[7874, 119, 93, 44, 77, 423, 92],
/* 7245 */
[7877, 93, 77, 44, 92, 423],
/* 7246 */
2774,
/* 7247 */
[7878, 93, 44, 680],
/* 7248 */
[7879, 77, 92],
/* 7249 */
[7880, 93],
/* 7250 */
[7881, 93, 44, 77, 423, 92],
/* 7251 */
[7883, 93, 77, 7253, 92],
/* 7252 */
[7884, 93, 77, 92],
/* 7253 */
[7885, 77, 2577, 92, 7252],
/* 7254 */
[7886, 93, 44, 77, 1490, 92],
/* 7255 */
[7887, 119, 93, 77, 92],
/* 7256 */
2784,
/* 7257 */
[7889, 93, 44, 77, 2553, 7255, 423, 92],
/* 7258 */
[7890, 93, 7256],
/* 7259 */
[7891, 93, 44, 77, 7262, 680, 423, 7274, 92],
/* 7260 */
[7894, 119, 44, 77, 2555, 92],
/* 7261 */
[7895, 93, 2576, 77, 44, 2554, 1488, 92, 2571],
/* 7262 */
[7806, 44, 7272, 2557, 7271, 1489, 7263],
/* 7263 */
[7807, 7265, 7264, 7268, 7266, 7270],
/* 7264 */
2682,
/* 7265 */
2683,
/* 7266 */
[7808, 7267],
/* 7267 */
2685,
/* 7268 */
[7809, 7269],
/* 7269 */
2685,
/* 7270 */
2688,
/* 7271 */
2692,
/* 7272 */
[7812, 7273],
/* 7273 */
2694,
/* 7274 */
[7912, 44, 247, 7282, 7281, 7279, 7277, 7280, 7278, 7276, 248, 2556, 938, 7283, 7284],
/* 7275 */
2810,
/* 7276 */
[7913, 44, 247],
/* 7277 */
[7914, 682, 93, 44, 248, 247, 681],
/* 7278 */
[7916, 44, 939, 247],
/* 7279 */
[7917, 93, 44, 248, 247, 681],
/* 7280 */
[7918, 119, 44, 247, 939],
/* 7281 */
[7919, 682, 93, 44, 248, 247, 528],
/* 7282 */
[7920, 44, 248, 247, 528],
/* 7283 */
[7921, 44, 248, 247],
/* 7284 */
[7922, 44, 7285, 248, 938, 247, 681, 528],
/* 7285 */
2820,
/* 7286 */
[7925, 119, 939, 938, 248],
/* 7287 */
[7928, 7288],
/* 7288 */
[7929, 7289],
/* 7289 */
2825,
/* 7290 */
[7896, 7797],
/* 7291 */
2791,
/* 7292 */
[7814, 7293],
/* 7293 */
2697,
/* 7294 */
2809,
/* 7295 */
2689,
/* 7296 */
[7810, 2558],
/* 7297 */
2827,
/* 7298 */
1578,
/* 7299 */
[7930, 7307, 7319, 942, 7339],
/* 7300 */
[7931, 7301],
/* 7301 */
[7932, 2560, 7310, 7329],
/* 7302 */
[7934, 7323, 941],
/* 7303 */
1580,
/* 7304 */
1581,
/* 7305 */
2836,
/* 7306 */
[7935, 529],
/* 7307 */
[7937, 7314, 7315, 940, 2575, 7349],
/* 7308 */
[7938, 7303, 2560, 2561, 2563, 7335, 7336, 7337, 284, 166],
/* 7309 */
1584,
/* 7310 */
[7939, 2563, 7325],
/* 7311 */
[7941, 2562, 2574],
/* 7312 */
[7946, 7330, 7331, 7332, 284, 7345],
/* 7313 */
[7947, 2566, 369],
/* 7314 */
[7948, 7313, 7333, 369],
/* 7315 */
[7949, 2564, 2566, 7317, 284, 2568, 2569, 7298, 369, 2570],
/* 7316 */
[7950, 2564, 2570],
/* 7317 */
1591,
/* 7318 */
984,
/* 7319 */
[7951, 2565, 7322, 7327],
/* 7320 */
2850,
/* 7321 */
2851,
/* 7322 */
[7953, 166],
/* 7323 */
[7954, 166],
/* 7324 */
[7955, 940, 942, 2559],
/* 7325 */
[7956, 1491, 424, 369],
/* 7326 */
[7957, 369],
/* 7327 */
[7958, 7302, 941],
/* 7328 */
[7959, 2559],
/* 7329 */
[7960, 940, 284],
/* 7330 */
[7961, 7304],
/* 7331 */
2861,
/* 7332 */
[7962, 529],
/* 7333 */
[7964, 2569, 7347],
/* 7334 */
2865,
/* 7335 */
2866,
/* 7336 */
[7966, 7321],
/* 7337 */
2868,
/* 7338 */
[7971, 1494, 284, 1493, 424, 2574],
/* 7339 */
2870,
/* 7340 */
[7978, 166],
/* 7341 */
[7979, 7340, 368],
/* 7342 */
[7980, 368],
/* 7343 */
[7981, 7311, 1494, 368],
/* 7344 */
[7982, 166],
/* 7345 */
[7984, 424, 368],
/* 7346 */
[7986, 2573, 7305, 7328],
/* 7347 */
[7990, 529, 369],
/* 7348 */
[7991, 7320, 529],
/* 7349 */
[7992, 2567, 7316, 2568],
/* 7350 */
[7817, 7362],
/* 7351 */
[7819, 7364],
/* 7352 */
[7820, 7365],
/* 7353 */
[7821, 7366],
/* 7354 */
[7822, 7367],
/* 7355 */
[7824, 7369],
/* 7356 */
[7825, 7371],
/* 7357 */
[7826, 7370],
/* 7358 */
[7827, 7353, 7352, 7351],
/* 7359 */
[7828, 682, 7355],
/* 7360 */
2107,
/* 7361 */
[7829, 7395, 7394, 7386],
/* 7362 */
[7830, 7388],
/* 7363 */
[7831, 141],
/* 7364 */
[7832, 141],
/* 7365 */
[7833, 141, 7389],
/* 7366 */
[7834, 141, 7390],
/* 7367 */
[7835, 1504, 285],
/* 7368 */
[7836, 7391, 285],
/* 7369 */
[7837, 7392, 285],
/* 7370 */
[7838, 1504, 285],
/* 7371 */
[7839, 1504, 7393, 285],
/* 7372 */
2746,
/* 7373 */
2747,
/* 7374 */
[7841, 1496, 530],
/* 7375 */
[7844, 141],
/* 7376 */
[7848, 1496],
/* 7377 */
[7849, 1496],
/* 7378 */
[7850, 141, 1502, 1503, 1500, 530],
/* 7379 */
1559,
/* 7380 */
[7852, 141, 684],
/* 7381 */
[7855, 141, 2581, 1495, 2578],
/* 7382 */
[7858, 7383, 1497],
/* 7383 */
1564,
/* 7384 */
[7860, 1497],
/* 7385 */
[7862, 7374, 530, 944, 285],
/* 7386 */
[7863, 1495, 7385, 285],
/* 7387 */
[7864, 7373, 7379, 944, 684, 2582],
/* 7388 */
[7865, 683],
/* 7389 */
[7866, 684, 1501],
/* 7390 */
[7867, 1501, 2580],
/* 7391 */
[7868, 7384, 1501],
/* 7392 */
[7869, 683, 7381],
/* 7393 */
428,
/* 7394 */
[7870, 7382, 2582],
/* 7395 */
[7872, 7387, 944],
/* 7396 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	"use strict";

	var _Object$keys = __webpack_require__(1506)["default"];

	var _interopRequireWildcard = __webpack_require__(53)["default"];

	var _babelTypes = __webpack_require__(57);

	var t = _interopRequireWildcard(_babelTypes);

	var hasOwn = Object.prototype.hasOwnProperty;

	// The hoist function takes a FunctionExpression or FunctionDeclaration
	// and replaces any Declaration nodes in its body with assignments, then
	// returns a VariableDeclaration containing just the names of the removed
	// declarations.
	exports.hoist = function (funPath) {
	  t.assertFunction(funPath.node);

	  var vars = {};

	  function varDeclToExpr(vdec, includeIdentifiers) {
	    t.assertVariableDeclaration(vdec);
	    // TODO assert.equal(vdec.kind, "var");
	    var exprs = [];

	    vdec.declarations.forEach(function (dec) {
	      vars[dec.id.name] = dec.id;

	      if (dec.init) {
	        exprs.push(t.assignmentExpression("=", dec.id, dec.init));
	      } else if (includeIdentifiers) {
	        exprs.push(dec.id);
	      }
	    });

	    if (exprs.length === 0) return null;

	    if (exprs.length === 1) return exprs[0];

	    return t.sequenceExpression(exprs);
	  }

	  funPath.get("body").traverse({
	    VariableDeclaration: {
	      exit: function exit(path) {
	        var expr = varDeclToExpr(path.node, false);
	        if (expr === null) {
	          path.remove();
	        } else {
	          // We don't need to traverse this expression any further because
	          // there can't be any new declarations inside an expression.
	          path.replaceWith(t.expressionStatement(expr));
	        }

	        // Since the original node has been either removed or replaced,
	        // avoid traversing it any further.
	        path.skip();
	      }
	    },

	    ForStatement: function ForStatement(path) {
	      var init = path.node.init;
	      if (t.isVariableDeclaration(init)) {
	        path.get("init").replaceWith(varDeclToExpr(init, false));
	      }
	    },

	    ForXStatement: function ForXStatement(path) {
	      var left = path.get("left");
	      if (left.isVariableDeclaration()) {
	        left.replaceWith(varDeclToExpr(left.node, true));
	      }
	    },

	    FunctionDeclaration: function FunctionDeclaration(path) {
	      var node = path.node;
	      vars[node.id.name] = node.id;

	      var assignment = t.expressionStatement(t.assignmentExpression("=", node.id, t.functionExpression(node.id, node.params, node.body, node.generator, node.expression)));

	      if (path.parentPath.isBlockStatement()) {
	        // Insert the assignment form before the first statement in the
	        // enclosing block.
	        path.parentPath.unshiftContainer("body", assignment);

	        // Remove the function declaration now that we've inserted the
	        // equivalent assignment form at the beginning of the block.
	        path.remove();
	      } else {
	        // If the parent node is not a block statement, then we can just
	        // replace the declaration with the equivalent assignment form
	        // without worrying about hoisting it.
	        path.replaceWith(assignment);
	      }

	      // Don't hoist variables out of inner functions.
	      path.skip();
	    },

	    FunctionExpression: function FunctionExpression(path) {
	      // Don't descend into nested function expressions.
	      path.skip();
	    }
	  });

	  var paramNames = {};
	  funPath.get("params").forEach(function (paramPath) {
	    var param = paramPath.node;
	    if (t.isIdentifier(param)) {
	      paramNames[param.name] = param;
	    } else {
	      // Variables declared by destructuring parameter patterns will be
	      // harmlessly re-declared.
	    }
	  });

	  var declarations = [];

	  _Object$keys(vars).forEach(function (name) {
	    if (!hasOwn.call(paramNames, name)) {
	      declarations.push(t.variableDeclarator(vars[name], null));
	    }
	  });

	  if (declarations.length === 0) {
	    return null; // Be sure to handle this case!
	  }

	  return t.variableDeclaration("var", declarations);
	};

/***/ },
/* 7397 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	"use strict";

	var _interopRequireDefault = __webpack_require__(32)["default"];

	var _interopRequireWildcard = __webpack_require__(53)["default"];

	var _assert = __webpack_require__(961);

	var _assert2 = _interopRequireDefault(_assert);

	var _babelTypes = __webpack_require__(57);

	var t = _interopRequireWildcard(_babelTypes);

	var _util = __webpack_require__(50);

	function Entry() {
	  _assert2["default"].ok(this instanceof Entry);
	}

	function FunctionEntry(returnLoc) {
	  Entry.call(this);
	  t.assertLiteral(returnLoc);
	  this.returnLoc = returnLoc;
	}

	_util.inherits(FunctionEntry, Entry);
	exports.FunctionEntry = FunctionEntry;

	function LoopEntry(breakLoc, continueLoc, label) {
	  Entry.call(this);

	  t.assertLiteral(breakLoc);
	  t.assertLiteral(continueLoc);

	  if (label) {
	    t.assertIdentifier(label);
	  } else {
	    label = null;
	  }

	  this.breakLoc = breakLoc;
	  this.continueLoc = continueLoc;
	  this.label = label;
	}

	_util.inherits(LoopEntry, Entry);
	exports.LoopEntry = LoopEntry;

	function SwitchEntry(breakLoc) {
	  Entry.call(this);
	  t.assertLiteral(breakLoc);
	  this.breakLoc = breakLoc;
	}

	_util.inherits(SwitchEntry, Entry);
	exports.SwitchEntry = SwitchEntry;

	function TryEntry(firstLoc, catchEntry, finallyEntry) {
	  Entry.call(this);

	  t.assertLiteral(firstLoc);

	  if (catchEntry) {
	    _assert2["default"].ok(catchEntry instanceof CatchEntry);
	  } else {
	    catchEntry = null;
	  }

	  if (finallyEntry) {
	    _assert2["default"].ok(finallyEntry instanceof FinallyEntry);
	  } else {
	    finallyEntry = null;
	  }

	  // Have to have one or the other (or both).
	  _assert2["default"].ok(catchEntry || finallyEntry);

	  this.firstLoc = firstLoc;
	  this.catchEntry = catchEntry;
	  this.finallyEntry = finallyEntry;
	}

	_util.inherits(TryEntry, Entry);
	exports.TryEntry = TryEntry;

	function CatchEntry(firstLoc, paramId) {
	  Entry.call(this);

	  t.assertLiteral(firstLoc);
	  t.assertIdentifier(paramId);

	  this.firstLoc = firstLoc;
	  this.paramId = paramId;
	}

	_util.inherits(CatchEntry, Entry);
	exports.CatchEntry = CatchEntry;

	function FinallyEntry(firstLoc, afterLoc) {
	  Entry.call(this);
	  t.assertLiteral(firstLoc);
	  t.assertLiteral(afterLoc);
	  this.firstLoc = firstLoc;
	  this.afterLoc = afterLoc;
	}

	_util.inherits(FinallyEntry, Entry);
	exports.FinallyEntry = FinallyEntry;

	function LabeledEntry(breakLoc, label) {
	  Entry.call(this);

	  t.assertLiteral(breakLoc);
	  t.assertIdentifier(label);

	  this.breakLoc = breakLoc;
	  this.label = label;
	}

	_util.inherits(LabeledEntry, Entry);
	exports.LabeledEntry = LabeledEntry;

	function LeapManager(emitter) {
	  _assert2["default"].ok(this instanceof LeapManager);

	  var Emitter = __webpack_require__(2587).Emitter;
	  _assert2["default"].ok(emitter instanceof Emitter);

	  this.emitter = emitter;
	  this.entryStack = [new FunctionEntry(emitter.finalLoc)];
	}

	var LMp = LeapManager.prototype;
	exports.LeapManager = LeapManager;

	LMp.withEntry = function (entry, callback) {
	  _assert2["default"].ok(entry instanceof Entry);
	  this.entryStack.push(entry);
	  try {
	    callback.call(this.emitter);
	  } finally {
	    var popped = this.entryStack.pop();
	    _assert2["default"].strictEqual(popped, entry);
	  }
	};

	LMp._findLeapLocation = function (property, label) {
	  for (var i = this.entryStack.length - 1; i >= 0; --i) {
	    var entry = this.entryStack[i];
	    var loc = entry[property];
	    if (loc) {
	      if (label) {
	        if (entry.label && entry.label.name === label.name) {
	          return loc;
	        }
	      } else if (entry instanceof LabeledEntry) {
	        // Ignore LabeledEntry entries unless we are actually breaking to
	        // a label.
	      } else {
	          return loc;
	        }
	    }
	  }

	  return null;
	};

	LMp.getBreakLoc = function (label) {
	  return this._findLeapLocation("breakLoc", label);
	};

	LMp.getContinueLoc = function (label) {
	  return this._findLeapLocation("continueLoc", label);
	};

/***/ },
/* 7398 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	"use strict";

	var _interopRequireDefault = __webpack_require__(32)["default"];

	var _interopRequireWildcard = __webpack_require__(53)["default"];

	var _assert = __webpack_require__(961);

	var _assert2 = _interopRequireDefault(_assert);

	var _babelTypes = __webpack_require__(57);

	var t = _interopRequireWildcard(_babelTypes);

	var m = __webpack_require__(2628).makeAccessor();

	var hasOwn = Object.prototype.hasOwnProperty;

	function makePredicate(propertyName, knownTypes) {
	  function onlyChildren(node) {
	    t.assertNode(node);

	    // Assume no side effects until we find out otherwise.
	    var result = false;

	    function check(child) {
	      if (result) {
	        // Do nothing.
	      } else if (Array.isArray(child)) {
	          child.some(check);
	        } else if (t.isNode(child)) {
	          _assert2["default"].strictEqual(result, false);
	          result = predicate(child);
	        }
	      return result;
	    }

	    var keys = t.VISITOR_KEYS[node.type];
	    if (keys) {
	      for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        var child = node[key];
	        check(child);
	      }
	    }

	    return result;
	  }

	  function predicate(node) {
	    t.assertNode(node);

	    var meta = m(node);
	    if (hasOwn.call(meta, propertyName)) return meta[propertyName];

	    // Certain types are "opaque," which means they have no side
	    // effects or leaps and we don't care about their subexpressions.
	    if (hasOwn.call(opaqueTypes, node.type)) return meta[propertyName] = false;

	    if (hasOwn.call(knownTypes, node.type)) return meta[propertyName] = true;

	    return meta[propertyName] = onlyChildren(node);
	  }

	  predicate.onlyChildren = onlyChildren;

	  return predicate;
	}

	var opaqueTypes = {
	  FunctionExpression: true
	};

	// These types potentially have side effects regardless of what side
	// effects their subexpressions have.
	var sideEffectTypes = {
	  CallExpression: true, // Anything could happen!
	  ForInStatement: true, // Modifies the key variable.
	  UnaryExpression: true, // Think delete.
	  BinaryExpression: true, // Might invoke .toString() or .valueOf().
	  AssignmentExpression: true, // Side-effecting by definition.
	  UpdateExpression: true, // Updates are essentially assignments.
	  NewExpression: true // Similar to CallExpression.
	};

	// These types are the direct cause of all leaps in control flow.
	var leapTypes = {
	  YieldExpression: true,
	  BreakStatement: true,
	  ContinueStatement: true,
	  ReturnStatement: true,
	  ThrowStatement: true
	};

	// All leap types are also side effect types.
	for (var type in leapTypes) {
	  if (hasOwn.call(leapTypes, type)) {
	    sideEffectTypes[type] = leapTypes[type];
	  }
	}

	exports.hasSideEffects = makePredicate("hasSideEffects", sideEffectTypes);
	exports.containsLeap = makePredicate("containsLeap", leapTypes);

/***/ },
/* 7399 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Copyright (c) 2014, Facebook, Inc.
	 * All rights reserved.
	 *
	 * This source code is licensed under the BSD-style license found in the
	 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
	 * additional grant of patent rights can be found in the PATENTS file in
	 * the same directory.
	 */

	"use strict";

	var _interopRequireDefault = __webpack_require__(32)["default"];

	var _interopRequireWildcard = __webpack_require__(53)["default"];

	var _assert = __webpack_require__(961);

	var _assert2 = _interopRequireDefault(_assert);

	var _babelTypes = __webpack_require__(57);

	var t = _interopRequireWildcard(_babelTypes);

	var _hoist = __webpack_require__(7396);

	var _emit = __webpack_require__(2587);

	var _util = __webpack_require__(2588);

	var util = _interopRequireWildcard(_util);

	var getMarkInfo = __webpack_require__(2628).makeAccessor();

	exports.visitor = {
	  Function: {
	    exit: function exit(path, state) {
	      var node = path.node;

	      if (node.generator) {
	        if (node.async) {
	          // Async generator
	          if (state.opts.asyncGenerators === false) return;
	        } else {
	          // Plain generator
	          if (state.opts.generators === false) return;
	        }
	      } else if (node.async) {
	        // Async function
	        if (state.opts.async === false) return;
	      } else {
	        // Not a generator or async function.
	        return;
	      }

	      var contextId = path.scope.generateUidIdentifier("context");
	      var argsId = path.scope.generateUidIdentifier("args");

	      path.ensureBlock();
	      var bodyBlockPath = path.get("body");

	      if (node.async) {
	        bodyBlockPath.traverse(awaitVisitor);
	      }

	      bodyBlockPath.traverse(functionSentVisitor, {
	        context: contextId
	      });

	      var outerBody = [];
	      var innerBody = [];

	      bodyBlockPath.get("body").forEach(function (childPath) {
	        var node = childPath.node;
	        if (node && node._blockHoist != null) {
	          outerBody.push(node);
	        } else {
	          innerBody.push(node);
	        }
	      });

	      if (outerBody.length > 0) {
	        // Only replace the inner body if we actually hoisted any statements
	        // to the outer body.
	        bodyBlockPath.node.body = innerBody;
	      }

	      var outerFnExpr = getOuterFnExpr(path);
	      // Note that getOuterFnExpr has the side-effect of ensuring that the
	      // function has a name (so node.id will always be an Identifier), even
	      // if a temporary name has to be synthesized.
	      t.assertIdentifier(node.id);
	      var innerFnId = t.identifier(node.id.name + "$");

	      // Turn all declarations into vars, and replace the original
	      // declarations with equivalent assignment expressions.
	      var vars = _hoist.hoist(path);

	      var didRenameArguments = renameArguments(path, argsId);
	      if (didRenameArguments) {
	        vars = vars || t.variableDeclaration("var", []);
	        vars.declarations.push(t.variableDeclarator(argsId, t.identifier("arguments")));
	      }

	      var emitter = new _emit.Emitter(contextId);
	      emitter.explode(path.get("body"));

	      if (vars && vars.declarations.length > 0) {
	        outerBody.push(vars);
	      }

	      var wrapArgs = [emitter.getContextFunction(innerFnId),
	      // Async functions that are not generators don't care about the
	      // outer function because they don't need it to be marked and don't
	      // inherit from its .prototype.
	      node.generator ? outerFnExpr : t.nullLiteral(), t.thisExpression()];

	      var tryLocsList = emitter.getTryLocsList();
	      if (tryLocsList) {
	        wrapArgs.push(tryLocsList);
	      }

	      var wrapCall = t.callExpression(util.runtimeProperty(node.async ? "async" : "wrap"), wrapArgs);

	      outerBody.push(t.returnStatement(wrapCall));
	      node.body = t.blockStatement(outerBody);

	      var wasGeneratorFunction = node.generator;
	      if (wasGeneratorFunction) {
	        node.generator = false;
	      }

	      if (node.async) {
	        node.async = false;
	      }

	      if (wasGeneratorFunction && t.isExpression(node)) {
	        path.replaceWith(t.callExpression(util.runtimeProperty("mark"), [node]));
	      }
	    }
	  }
	};

	// Given a NodePath for a Function, return an Expression node that can be
	// used to refer reliably to the function object from inside the function.
	// This expression is essentially a replacement for arguments.callee, with
	// the key advantage that it works in strict mode.
	function getOuterFnExpr(funPath) {
	  var node = funPath.node;
	  t.assertFunction(node);

	  if (!node.id) {
	    // Default-exported function declarations, and function expressions may not
	    // have a name to reference, so we explicitly add one.
	    node.id = funPath.scope.parent.generateUidIdentifier("callee");
	  }

	  if (node.generator && // Non-generator functions don't need to be marked.
	  t.isFunctionDeclaration(node)) {
	    var pp = funPath.findParent(function (path) {
	      return path.isProgram() || path.isBlockStatement();
	    });

	    if (!pp) {
	      return node.id;
	    }

	    var markDecl = getRuntimeMarkDecl(pp);
	    var markedArray = markDecl.declarations[0].id;
	    var funDeclIdArray = markDecl.declarations[0].init.callee.object;
	    t.assertArrayExpression(funDeclIdArray);

	    var index = funDeclIdArray.elements.length;
	    funDeclIdArray.elements.push(node.id);

	    return t.memberExpression(markedArray, t.numericLiteral(index), true);
	  }

	  return node.id;
	}

	function getRuntimeMarkDecl(blockPath) {
	  var block = blockPath.node;
	  _assert2["default"].ok(Array.isArray(block.body));

	  var info = getMarkInfo(block);
	  if (info.decl) {
	    return info.decl;
	  }

	  info.decl = t.variableDeclaration("var", [t.variableDeclarator(blockPath.scope.generateUidIdentifier("marked"), t.callExpression(t.memberExpression(t.arrayExpression([]), t.identifier("map"), false), [util.runtimeProperty("mark")]))]);

	  blockPath.unshiftContainer("body", info.decl);

	  return info.decl;
	}

	function renameArguments(funcPath, argsId) {
	  var state = {
	    didRenameArguments: false,
	    argsId: argsId
	  };

	  funcPath.traverse(argumentsVisitor, state);

	  // If the traversal replaced any arguments references, then we need to
	  // alias the outer function's arguments binding (be it the implicit
	  // arguments object or some other parameter or variable) to the variable
	  // named by argsId.
	  return state.didRenameArguments;
	}

	var argumentsVisitor = {
	  "FunctionExpression|FunctionDeclaration": function FunctionExpressionFunctionDeclaration(path) {
	    path.skip();
	  },

	  Identifier: function Identifier(path, state) {
	    if (path.node.name === "arguments" && util.isReference(path)) {
	      path.replaceWith(state.argsId);
	      state.didRenameArguments = true;
	    }
	  }
	};

	var functionSentVisitor = {
	  MetaProperty: function MetaProperty(path) {
	    var node = path.node;

	    if (node.meta.name === "function" && node.property.name === "sent") {
	      path.replaceWith(t.memberExpression(this.context, t.identifier("_sent")));
	    }
	  }
	};

	var awaitVisitor = {
	  Function: function Function(path) {
	    path.skip(); // Don't descend into nested function scopes.
	  },

	  AwaitExpression: function AwaitExpression(path) {
	    // Convert await and await* expressions to yield expressions.
	    var argument = path.node.argument;

	    // Transforming `await x` to `yield regeneratorRuntime.awrap(x)`
	    // causes the argument to be wrapped in such a way that the runtime
	    // can distinguish between awaited and merely yielded values.
	    path.replaceWith(t.yieldExpression(t.callExpression(util.runtimeProperty("awrap"), [argument]), false));
	  }
	};

/***/ },
/* 7400 */
[7817, 7412],
/* 7401 */
[7819, 7414],
/* 7402 */
[7820, 7415],
/* 7403 */
[7821, 7416],
/* 7404 */
[7822, 7417],
/* 7405 */
[7824, 7419],
/* 7406 */
[7825, 7421],
/* 7407 */
[7826, 7420],
/* 7408 */
[7827, 7403, 7402, 7401],
/* 7409 */
[7828, 685, 7405],
/* 7410 */
2107,
/* 7411 */
[7829, 7445, 7444, 7436],
/* 7412 */
[7830, 7438],
/* 7413 */
[7831, 142],
/* 7414 */
[7832, 142],
/* 7415 */
[7833, 142, 7439],
/* 7416 */
[7834, 142, 7440],
/* 7417 */
[7835, 1516, 286],
/* 7418 */
[7836, 7441, 286],
/* 7419 */
[7837, 7442, 286],
/* 7420 */
[7838, 1516, 286],
/* 7421 */
[7839, 1516, 7443, 286],
/* 7422 */
2746,
/* 7423 */
2747,
/* 7424 */
[7841, 1508, 531],
/* 7425 */
[7844, 142],
/* 7426 */
[7848, 1508],
/* 7427 */
[7849, 1508],
/* 7428 */
[7850, 142, 1514, 1515, 1512, 531],
/* 7429 */
1559,
/* 7430 */
[7852, 142, 687],
/* 7431 */
[7855, 142, 2593, 1507, 2590],
/* 7432 */
[7858, 7433, 1509],
/* 7433 */
1564,
/* 7434 */
[7860, 1509],
/* 7435 */
[7862, 7424, 531, 946, 286],
/* 7436 */
[7863, 1507, 7435, 286],
/* 7437 */
[7864, 7423, 7429, 946, 687, 2594],
/* 7438 */
[7865, 686],
/* 7439 */
[7866, 687, 1513],
/* 7440 */
[7867, 1513, 2592],
/* 7441 */
[7868, 7434, 1513],
/* 7442 */
[7869, 686, 7431],
/* 7443 */
428,
/* 7444 */
[7870, 7432, 2594],
/* 7445 */
[7872, 7437, 946],
/* 7446 */
[7874, 120, 104, 32, 53, 425, 57],
/* 7447 */
[7877, 104, 53, 32, 57, 425],
/* 7448 */
2774,
/* 7449 */
[7878, 104, 32, 688],
/* 7450 */
[7879, 53, 57],
/* 7451 */
[7880, 104],
/* 7452 */
[7881, 104, 32, 53, 425, 57],
/* 7453 */
[7883, 104, 53, 7455, 57],
/* 7454 */
[7884, 104, 53, 57],
/* 7455 */
[7885, 53, 2589, 57, 7454],
/* 7456 */
[7886, 104, 32, 53, 1519, 57],
/* 7457 */
[7887, 120, 104, 53, 57],
/* 7458 */
2784,
/* 7459 */
[7889, 104, 32, 53, 2600, 7457, 425, 57],
/* 7460 */
[7890, 104, 7458],
/* 7461 */
[7891, 104, 32, 53, 7464, 688, 425, 7580, 57],
/* 7462 */
[7894, 120, 32, 53, 2602, 57],
/* 7463 */
[7895, 104, 1506, 53, 32, 2601, 1518, 57, 7505],
/* 7464 */
[7806, 32, 7477, 2611, 7476, 7475, 7465],
/* 7465 */
[7807, 7467, 7466, 7470, 7468, 7472],
/* 7466 */
2682,
/* 7467 */
2683,
/* 7468 */
[7808, 7469],
/* 7469 */
2685,
/* 7470 */
[7809, 7471],
/* 7471 */
2685,
/* 7472 */
2688,
/* 7473 */
2689,
/* 7474 */
[7810, 2603],
/* 7475 */
[7811, 7473, 2603, 7474],
/* 7476 */
2692,
/* 7477 */
[7812, 7478],
/* 7478 */
2694,
/* 7479 */
[7928, 7480],
/* 7480 */
[7929, 7481],
/* 7481 */
2825,
/* 7482 */
[7896, 7798],
/* 7483 */
2791,
/* 7484 */
1580,
/* 7485 */
981,
/* 7486 */
2836,
/* 7487 */
[7935, 949],
/* 7488 */
[7938, 7484, 7485, 2605, 7491, 7500, 7501, 7502, 948, 532],
/* 7489 */
1584,
/* 7490 */
[7940, 7497],
/* 7491 */
[7942, 7490, 949],
/* 7492 */
[7944, 7499],
/* 7493 */
1590,
/* 7494 */
2850,
/* 7495 */
2851,
/* 7496 */
[7955, 2606, 1522, 2604],
/* 7497 */
[7957, 7504],
/* 7498 */
[7959, 2604],
/* 7499 */
2865,
/* 7500 */
2866,
/* 7501 */
[7966, 7495],
/* 7502 */
2868,
/* 7503 */
[7971, 2609, 948, 1521, 689, 7510],
/* 7504 */
[7972, 532],
/* 7505 */
[7974, 7488, 2606, 1522],
/* 7506 */
[7978, 532],
/* 7507 */
[7979, 7506, 947],
/* 7508 */
[7983, 947],
/* 7509 */
[7986, 2610, 7486, 7498],
/* 7510 */
[7989, 2609, 948, 1521, 689, 532],
/* 7511 */
[7991, 7494, 949],
/* 7512 */
1601,
/* 7513 */
[7814, 7514],
/* 7514 */
2697,
/* 7515 */
[7898, 104, 7400, 32, 53, 7573, 7572, 7574, 7575, 688, 57],
/* 7516 */
[7899, 53, 32, 57, 1523, 370],
/* 7517 */
[7900, 32, 370],
/* 7518 */
[7901, 32, 370],
/* 7519 */
[7902, 32, 370],
/* 7520 */
[7904, 370, 7516, 7517, 7519, 7521, 7522, 7518],
/* 7521 */
[7905, 32, 370],
/* 7522 */
[7906, 32, 370],
/* 7523 */
[7907, 53, 57],
/* 7524 */
[7909, 53, 57],
/* 7525 */
[7911, 104, 32, 53, 2612, 7528, 57, 1523],
/* 7526 */
2689,
/* 7527 */
[7810, 2613],
/* 7528 */
[7811, 7526, 2613, 7527],
/* 7529 */
2827,
/* 7530 */
1578,
/* 7531 */
[7930, 7538, 7551, 2621, 7568],
/* 7532 */
[7931, 7533],
/* 7533 */
[7932, 2614, 7541, 7558],
/* 7534 */
[7934, 7554, 950],
/* 7535 */
1580,
/* 7536 */
1581,
/* 7537 */
[7936, 7540, 951],
/* 7538 */
[7937, 7546, 7547, 1524, 2626, 7578],
/* 7539 */
[7938, 7535, 2614, 7537, 2616, 7564, 7565, 7566, 373, 167],
/* 7540 */
1584,
/* 7541 */
[7939, 2616, 7555],
/* 7542 */
[7941, 2615, 2625],
/* 7543 */
[7944, 7563],
/* 7544 */
[7946, 7559, 7560, 7561, 373, 7576],
/* 7545 */
[7947, 2618, 372],
/* 7546 */
[7948, 7545, 7562, 372],
/* 7547 */
[7949, 2617, 2618, 7549, 373, 2622, 2623, 7530, 372, 2624],
/* 7548 */
[7950, 2617, 2624],
/* 7549 */
1591,
/* 7550 */
984,
/* 7551 */
[7951, 7543, 7553, 7557],
/* 7552 */
2851,
/* 7553 */
[7953, 167],
/* 7554 */
[7954, 167],
/* 7555 */
[7956, 2620, 533, 372],
/* 7556 */
[7957, 372],
/* 7557 */
[7958, 7534, 950],
/* 7558 */
[7960, 1524, 373],
/* 7559 */
[7961, 7536],
/* 7560 */
2861,
/* 7561 */
[7962, 951],
/* 7562 */
[7964, 2623, 7577],
/* 7563 */
2865,
/* 7564 */
2866,
/* 7565 */
[7966, 7552],
/* 7566 */
2868,
/* 7567 */
[7971, 1527, 373, 1526, 533, 2625],
/* 7568 */
2870,
/* 7569 */
[7974, 7539, 1524, 2621],
/* 7570 */
[7978, 167],
/* 7571 */
[7979, 7570, 371],
/* 7572 */
[7980, 371],
/* 7573 */
[7981, 7542, 1527, 371],
/* 7574 */
[7982, 167],
/* 7575 */
[7983, 371],
/* 7576 */
[7984, 533, 371],
/* 7577 */
[7990, 951, 372],
/* 7578 */
[7992, 2619, 7548, 2622],
/* 7579 */
2809,
/* 7580 */
[7912, 32, 249, 7588, 7587, 7585, 7583, 7586, 7584, 7582, 250, 2627, 952, 7589, 7590],
/* 7581 */
2810,
/* 7582 */
[7913, 32, 249],
/* 7583 */
[7914, 685, 104, 32, 250, 249, 690],
/* 7584 */
[7916, 32, 953, 249],
/* 7585 */
[7917, 104, 32, 250, 249, 690],
/* 7586 */
[7918, 120, 32, 249, 953],
/* 7587 */
[7919, 685, 104, 32, 250, 249, 534],
/* 7588 */
[7920, 32, 250, 249, 534],
/* 7589 */
[7921, 32, 250, 249],
/* 7590 */
[7922, 32, 7591, 250, 952, 249, 690, 534],
/* 7591 */
2820,
/* 7592 */
[7925, 120, 953, 952, 250],
/* 7593 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    visitor: {
	      CallExpression: function CallExpression(path) {
	        if (path.get("callee").matchesPattern("console", true)) {
	          path.remove();
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 7594 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    visitor: {
	      DebuggerStatement: function DebuggerStatement(path) {
	        path.remove();
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 7595 */
/***/ function(module, exports) {

	"use strict";

	module.exports = {
	  builtins: {
	    Symbol: "symbol",
	    Promise: "promise",
	    Map: "map",
	    WeakMap: "weak-map",
	    Set: "set",
	    WeakSet: "weak-set",
	    setImmediate: "set-immediate",
	    clearImmediate: "clear-immediate"
	  },

	  methods: {
	    Array: {
	      concat: "array/concat",
	      copyWithin: "array/copy-within",
	      entries: "array/entries",
	      every: "array/every",
	      fill: "array/fill",
	      filter: "array/filter",
	      findIndex: "array/find-index",
	      find: "array/find",
	      forEach: "array/for-each",
	      from: "array/from",
	      includes: "array/includes",
	      indexOf: "array/index-of",
	      join: "array/join",
	      keys: "array/keys",
	      lastIndexOf: "array/last-index-of",
	      map: "array/map",
	      of: "array/of",
	      pop: "array/pop",
	      push: "array/push",
	      reduceRight: "array/reduce-right",
	      reduce: "array/reduce",
	      reverse: "array/reverse",
	      shift: "array/shift",
	      slice: "array/slice",
	      some: "array/some",
	      sort: "array/sort",
	      splice: "array/splice",
	      unshift: "array/unshift",
	      values: "array/values"
	    },

	    JSON: {
	      stringify: "json/stringify"
	    },

	    Object: {
	      assign: "object/assign",
	      create: "object/create",
	      defineProperties: "object/define-properties",
	      defineProperty: "object/define-property",
	      entries: "object/entries",
	      freeze: "object/freeze",
	      getOwnPropertyDescriptor: "object/get-own-property-descriptor",
	      getOwnPropertyDescriptors: "object/get-own-property-descriptors",
	      getOwnPropertyNames: "object/get-own-property-names",
	      getOwnPropertySymbols: "object/get-own-property-symbols",
	      getPrototypeOf: "object/get-prototype-of",
	      isExtensible: "object/is-extensible",
	      isFrozen: "object/is-frozen",
	      isSealed: "object/is-sealed",
	      is: "object/is",
	      keys: "object/keys",
	      preventExtensions: "object/prevent-extensions",
	      seal: "object/seal",
	      setPrototypeOf: "object/set-prototype-of",
	      values: "object/values"
	    },

	    RegExp: {
	      escape: "regexp/escape"
	    },

	    Math: {
	      acosh: "math/acosh",
	      asinh: "math/asinh",
	      atanh: "math/atanh",
	      cbrt: "math/cbrt",
	      clz32: "math/clz32",
	      cosh: "math/cosh",
	      expm1: "math/expm1",
	      fround: "math/fround",
	      hypot: "math/hypot",
	      imul: "math/imul",
	      log10: "math/log10",
	      log1p: "math/log1p",
	      log2: "math/log2",
	      sign: "math/sign",
	      sinh: "math/sinh",
	      tanh: "math/tanh",
	      trunc: "math/trunc"
	    },

	    Symbol: {
	      "for": "symbol/for",
	      hasInstance: "symbol/has-instance",
	      isConcatSpreadable: "symbol/is-concat-spreadable",
	      iterator: "symbol/iterator",
	      keyFor: "symbol/key-for",
	      match: "symbol/match",
	      replace: "symbol/replace",
	      search: "symbol/search",
	      species: "symbol/species",
	      split: "symbol/split",
	      toPrimitive: "symbol/to-primitive",
	      toStringTag: "symbol/to-string-tag",
	      unscopables: "symbol/unscopables"
	    },

	    String: {
	      at: "string/at",
	      codePointAt: "string/code-point-at",
	      endsWith: "string/ends-with",
	      fromCodePoint: "string/from-code-point",
	      includes: "string/includes",
	      padLeft: "string/pad-left",
	      padRight: "string/pad-right",
	      raw: "string/raw",
	      repeat: "string/repeat",
	      startsWith: "string/starts-with",
	      trim: "string/trim",
	      trimLeft: "string/trim-left",
	      trimRight: "string/trim-right"
	    },

	    Number: {
	      EPSILON: "number/epsilon",
	      isFinite: "number/is-finite",
	      isInteger: "number/is-integer",
	      isNaN: "number/is-nan",
	      isSafeInteger: "number/is-safe-integer",
	      MAX_SAFE_INTEGER: "number/max-safe-integer",
	      MIN_SAFE_INTEGER: "number/min-safe-integer",
	      parseFloat: "number/parse-float",
	      parseInt: "number/parse-int"
	    },

	    Reflect: {
	      apply: "reflect/apply",
	      construct: "reflect/construct",
	      defineProperty: "reflect/define-property",
	      deleteProperty: "reflect/delete-property",
	      enumerate: "reflect/enumerate",
	      getOwnPropertyDescriptor: "reflect/get-own-property-descriptor",
	      getPrototypeOf: "reflect/get-prototype-of",
	      get: "reflect/get",
	      has: "reflect/has",
	      isExtensible: "reflect/is-extensible",
	      ownKeys: "reflect/own-keys",
	      preventExtensions: "reflect/prevent-extensions",
	      setPrototypeOf: "reflect/set-prototype-of",
	      set: "reflect/set"
	    }
	  }
	};

/***/ },
/* 7596 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(7597)["default"];

	exports.__esModule = true;

	var _definitions = __webpack_require__(7595);

	var _definitions2 = _interopRequireDefault(_definitions);

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  var RUNTIME_MODULE_NAME = "babel-runtime";

	  function has(obj, key) {
	    return Object.prototype.hasOwnProperty.call(obj, key);
	  }

	  var HELPER_BLACKLIST = ["interopRequireWildcard", "interopRequireDefault"];

	  return {
	    pre: function pre(file) {
	      file.set("helperGenerator", function (name) {
	        if (HELPER_BLACKLIST.indexOf(name) < 0) {
	          return file.addImport(RUNTIME_MODULE_NAME + "/helpers/" + name, "default", name);
	        }
	      });

	      this.setDynamic("regeneratorIdentifier", function () {
	        return file.addImport(RUNTIME_MODULE_NAME + "/regenerator", "default", "regeneratorRuntime");
	      });
	    },

	    visitor: {
	      ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	        if (state.opts.regenerator === false) return;

	        var node = path.node;
	        var parent = path.parent;
	        var scope = path.scope;

	        if (node.name === "regeneratorRuntime") {
	          path.replaceWith(state.get("regeneratorIdentifier"));
	          return;
	        }

	        if (t.isMemberExpression(parent)) return;
	        if (!has(_definitions2["default"].builtins, node.name)) return;
	        if (scope.getBindingIdentifier(node.name)) return;

	        // Symbol() -> _core.Symbol(); new Promise -> new _core.Promise
	        path.replaceWith(state.addImport(RUNTIME_MODULE_NAME + "/core-js/" + _definitions2["default"].builtins[node.name], "default", node.name));
	      },

	      // arr[Symbol.iterator]() -> _core.$for.getIterator(arr)
	      CallExpression: function CallExpression(path, state) {
	        if (state.opts.polyfill === false) return;

	        // we can't compile this
	        if (path.node.arguments.length) return;

	        var callee = path.node.callee;
	        if (!t.isMemberExpression(callee)) return;
	        if (!callee.computed) return;
	        if (!path.get("callee.property").matchesPattern("Symbol.iterator")) return;

	        path.replaceWith(t.callExpression(state.addImport(RUNTIME_MODULE_NAME + "/core-js/get-iterator", "default", "getIterator"), [callee.object]));
	      },

	      // Symbol.iterator in arr -> core.$for.isIterable(arr)
	      BinaryExpression: function BinaryExpression(path, state) {
	        if (state.opts.polyfill === false) return;

	        if (path.node.operator !== "in") return;
	        if (!path.get("left").matchesPattern("Symbol.iterator")) return;

	        path.replaceWith(t.callExpression(state.addImport(RUNTIME_MODULE_NAME + "/core-js/is-iterable", "default", "isIterable"), [path.node.right]));
	      },

	      // Array.from -> _core.Array.from
	      MemberExpression: {
	        enter: function enter(path, state) {
	          if (state.opts.polyfill === false) return;
	          if (!path.isReferenced()) return;

	          var node = path.node;

	          var obj = node.object;
	          var prop = node.property;

	          if (!t.isReferenced(obj, node)) return;
	          if (node.computed) return;
	          if (!has(_definitions2["default"].methods, obj.name)) return;

	          var methods = _definitions2["default"].methods[obj.name];
	          if (!has(methods, prop.name)) return;

	          // doesn't reference the global
	          if (path.scope.getBindingIdentifier(obj.name)) return;

	          // special case Object.defineProperty to not use core-js when using string keys
	          if (obj.name === "Object" && prop.name === "defineProperty" && path.parentPath.isCallExpression()) {
	            var call = path.parentPath.node;
	            if (call.arguments.length === 3 && t.isLiteral(call.arguments[1])) return;
	          }

	          path.replaceWith(state.addImport(RUNTIME_MODULE_NAME + "/core-js/" + methods[prop.name], "default", obj.name + "$" + prop.name));
	        },

	        exit: function exit(path, state) {
	          if (state.opts.polyfill === false) return;
	          if (!path.isReferenced()) return;

	          var node = path.node;

	          var obj = node.object;

	          if (!has(_definitions2["default"].builtins, obj.name)) return;
	          if (path.scope.getBindingIdentifier(obj.name)) return;

	          path.replaceWith(t.memberExpression(state.addImport(RUNTIME_MODULE_NAME + "/core-js/" + _definitions2["default"].builtins[obj.name], "default", obj.name), node.property, node.computed));
	        }
	      }
	    }
	  };
	};

	exports.definitions = _definitions2["default"];

/***/ },
/* 7597 */
1,
/* 7598 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function () {
	  return {
	    visitor: {
	      BinaryExpression: function BinaryExpression(path) {
	        var node = path.node;

	        var op = node.operator;
	        if (op !== "===" && op !== "!==") return;

	        var left = path.get("left");
	        var right = path.get("right");
	        if (left.baseTypeStrictlyMatches(right)) {
	          node.operator = node.operator.slice(0, -1);
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 7599 */
[7817, 7611],
/* 7600 */
[7819, 7613],
/* 7601 */
[7820, 7614],
/* 7602 */
[7821, 7615],
/* 7603 */
[7822, 7616],
/* 7604 */
[7824, 7618],
/* 7605 */
[7825, 7620],
/* 7606 */
[7826, 7619],
/* 7607 */
[7827, 7602, 7601, 7600],
/* 7608 */
[7828, 691, 7604],
/* 7609 */
2107,
/* 7610 */
[7829, 7644, 7643, 7635],
/* 7611 */
[7830, 7637],
/* 7612 */
[7831, 143],
/* 7613 */
[7832, 143],
/* 7614 */
[7833, 143, 7638],
/* 7615 */
[7834, 143, 7639],
/* 7616 */
[7835, 1538, 287],
/* 7617 */
[7836, 7640, 287],
/* 7618 */
[7837, 7641, 287],
/* 7619 */
[7838, 1538, 287],
/* 7620 */
[7839, 1538, 7642, 287],
/* 7621 */
2746,
/* 7622 */
2747,
/* 7623 */
[7841, 1530, 535],
/* 7624 */
[7844, 143],
/* 7625 */
[7848, 1530],
/* 7626 */
[7849, 1530],
/* 7627 */
[7850, 143, 1536, 1537, 1534, 535],
/* 7628 */
1559,
/* 7629 */
[7852, 143, 693],
/* 7630 */
[7855, 143, 2634, 1529, 2631],
/* 7631 */
[7858, 7632, 1531],
/* 7632 */
1564,
/* 7633 */
[7860, 1531],
/* 7634 */
[7862, 7623, 535, 955, 287],
/* 7635 */
[7863, 1529, 7634, 287],
/* 7636 */
[7864, 7622, 7628, 955, 693, 2635],
/* 7637 */
[7865, 692],
/* 7638 */
[7866, 693, 1535],
/* 7639 */
[7867, 1535, 2633],
/* 7640 */
[7868, 7633, 1535],
/* 7641 */
[7869, 692, 7630],
/* 7642 */
428,
/* 7643 */
[7870, 7631, 2635],
/* 7644 */
[7872, 7636, 955],
/* 7645 */
[7898, 94, 7599, 48, 78, 7754, 7753, 7755, 2662, 694, 95],
/* 7646 */
[7899, 78, 48, 95, 1539, 374],
/* 7647 */
[7900, 48, 374],
/* 7648 */
[7901, 48, 374],
/* 7649 */
[7902, 48, 374],
/* 7650 */
[7904, 374, 7646, 7647, 7649, 7651, 7652, 7648],
/* 7651 */
[7905, 48, 374],
/* 7652 */
[7906, 48, 374],
/* 7653 */
[7907, 78, 95],
/* 7654 */
[7909, 78, 95],
/* 7655 */
[7911, 94, 48, 78, 2640, 2648, 95, 1539],
/* 7656 */
[7874, 121, 94, 48, 78, 426, 95],
/* 7657 */
[7877, 94, 78, 48, 95, 426],
/* 7658 */
2774,
/* 7659 */
[7878, 94, 48, 694],
/* 7660 */
[7879, 78, 95],
/* 7661 */
[7880, 94],
/* 7662 */
[7881, 94, 48, 78, 426, 95],
/* 7663 */
[7883, 94, 78, 7665, 95],
/* 7664 */
[7884, 94, 78, 95],
/* 7665 */
[7885, 78, 2630, 95, 7664],
/* 7666 */
[7886, 94, 48, 78, 1542, 95],
/* 7667 */
[7887, 121, 94, 78, 95],
/* 7668 */
2784,
/* 7669 */
[7889, 94, 48, 78, 2642, 7667, 426, 95],
/* 7670 */
[7890, 94, 7668],
/* 7671 */
[7891, 94, 48, 78, 7674, 694, 426, 7686, 95],
/* 7672 */
[7894, 121, 48, 78, 2644, 95],
/* 7673 */
[7895, 94, 2629, 78, 48, 2643, 1541, 95, 2661],
/* 7674 */
[7806, 48, 7684, 2646, 7683, 2648, 7675],
/* 7675 */
[7807, 7677, 7676, 7680, 7678, 7682],
/* 7676 */
2682,
/* 7677 */
2683,
/* 7678 */
[7808, 7679],
/* 7679 */
2685,
/* 7680 */
[7809, 7681],
/* 7681 */
2685,
/* 7682 */
2688,
/* 7683 */
2692,
/* 7684 */
[7812, 7685],
/* 7685 */
2694,
/* 7686 */
[7912, 48, 251, 7694, 7693, 7691, 7689, 7692, 7690, 7688, 252, 2645, 956, 7695, 7696],
/* 7687 */
2810,
/* 7688 */
[7913, 48, 251],
/* 7689 */
[7914, 691, 94, 48, 252, 251, 695],
/* 7690 */
[7916, 48, 957, 251],
/* 7691 */
[7917, 94, 48, 252, 251, 695],
/* 7692 */
[7918, 121, 48, 251, 957],
/* 7693 */
[7919, 691, 94, 48, 252, 251, 536],
/* 7694 */
[7920, 48, 252, 251, 536],
/* 7695 */
[7921, 48, 252, 251],
/* 7696 */
[7922, 48, 7697, 252, 956, 251, 695, 536],
/* 7697 */
2820,
/* 7698 */
[7925, 121, 957, 956, 252],
/* 7699 */
[7928, 7700],
/* 7700 */
[7929, 7701],
/* 7701 */
2825,
/* 7702 */
[7896, 7799],
/* 7703 */
2791,
/* 7704 */
[7814, 7705],
/* 7705 */
2697,
/* 7706 */
2689,
/* 7707 */
[7810, 2647],
/* 7708 */
2827,
/* 7709 */
1578,
/* 7710 */
[7930, 7718, 7730, 960, 7750],
/* 7711 */
[7931, 7712],
/* 7712 */
[7932, 2650, 7721, 7740],
/* 7713 */
[7934, 7734, 959],
/* 7714 */
1580,
/* 7715 */
1581,
/* 7716 */
2836,
/* 7717 */
[7935, 537],
/* 7718 */
[7937, 7725, 7726, 958, 2665, 7760],
/* 7719 */
[7938, 7714, 2650, 2651, 2653, 7746, 7747, 7748, 288, 168],
/* 7720 */
1584,
/* 7721 */
[7939, 2653, 7736],
/* 7722 */
[7941, 2652, 2664],
/* 7723 */
[7946, 7741, 7742, 7743, 288, 7756],
/* 7724 */
[7947, 2656, 376],
/* 7725 */
[7948, 7724, 7744, 376],
/* 7726 */
[7949, 2654, 2656, 7728, 288, 2658, 2659, 7709, 376, 2660],
/* 7727 */
[7950, 2654, 2660],
/* 7728 */
1591,
/* 7729 */
984,
/* 7730 */
[7951, 2655, 7733, 7738],
/* 7731 */
2850,
/* 7732 */
2851,
/* 7733 */
[7953, 168],
/* 7734 */
[7954, 168],
/* 7735 */
[7955, 958, 960, 2649],
/* 7736 */
[7956, 1543, 427, 376],
/* 7737 */
[7957, 376],
/* 7738 */
[7958, 7713, 959],
/* 7739 */
[7959, 2649],
/* 7740 */
[7960, 958, 288],
/* 7741 */
[7961, 7715],
/* 7742 */
2861,
/* 7743 */
[7962, 537],
/* 7744 */
[7964, 2659, 7758],
/* 7745 */
2865,
/* 7746 */
2866,
/* 7747 */
[7966, 7732],
/* 7748 */
2868,
/* 7749 */
[7971, 1546, 288, 1545, 427, 2664],
/* 7750 */
2870,
/* 7751 */
[7978, 168],
/* 7752 */
[7979, 7751, 375],
/* 7753 */
[7980, 375],
/* 7754 */
[7981, 7722, 1546, 375],
/* 7755 */
[7982, 168],
/* 7756 */
[7984, 427, 375],
/* 7757 */
[7986, 2663, 7716, 7739],
/* 7758 */
[7990, 537, 376],
/* 7759 */
[7991, 7731, 537],
/* 7760 */
[7992, 2657, 7727, 2658],
/* 7761 */
2809,
/* 7762 */
/***/ function(module, exports) {

	"use strict";

	exports.__esModule = true;

	exports["default"] = function (_ref) {
	  var t = _ref.types;

	  return {
	    visitor: {
	      ReferencedIdentifier: function ReferencedIdentifier(path) {
	        if (path.node.name === "undefined") {
	          path.replaceWith(t.unaryExpression("void", t.numericLiteral(0), true));
	        }
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 7763 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(7764)["default"];

	exports.__esModule = true;

	var _leven = __webpack_require__(7765);

	var _leven2 = _interopRequireDefault(_leven);

	exports["default"] = function (_ref) {
	  var messages = _ref.messages;

	  return {
	    visitor: {
	      ReferencedIdentifier: function ReferencedIdentifier(path) {
	        var node = path.node;
	        var scope = path.scope;

	        var binding = scope.getBinding(node.name);
	        if (binding && binding.kind === "type" && !path.parentPath.isFlow()) {
	          throw path.buildCodeFrameError(messages.get("undeclaredVariableType", node.name), ReferenceError);
	        }

	        if (scope.hasBinding(node.name)) return;

	        // get the closest declaration to offer as a suggestion
	        // the variable name may have just been mistyped

	        var bindings = scope.getAllBindings();

	        var closest = undefined;
	        var shortest = -1;

	        for (var _name in bindings) {
	          var distance = _leven2["default"](node.name, _name);
	          if (distance <= 0 || distance > 3) continue;
	          if (distance <= shortest) continue;

	          closest = _name;
	          shortest = distance;
	        }

	        var msg = undefined;
	        if (closest) {
	          msg = messages.get("undeclaredVariableSuggestion", node.name, closest);
	        } else {
	          msg = messages.get("undeclaredVariable", node.name);
	        }

	        //

	        throw path.buildCodeFrameError(msg, ReferenceError);
	      }
	    }
	  };
	};

	module.exports = exports["default"];

/***/ },
/* 7764 */
1,
/* 7765 */
/***/ function(module, exports) {

	'use strict';
	var arr = [];
	var charCodeCache = [];

	module.exports = function (a, b) {
		if (a === b) {
			return 0;
		}

		var aLen = a.length;
		var bLen = b.length;

		if (aLen === 0) {
			return bLen;
		}

		if (bLen === 0) {
			return aLen;
		}

		var bCharCode;
		var ret;
		var tmp;
		var tmp2;
		var i = 0;
		var j = 0;

		while (i < aLen) {
			charCodeCache[i] = a.charCodeAt(i);
			arr[i] = ++i;
		}

		while (j < bLen) {
			bCharCode = b.charCodeAt(j);
			tmp = j++;
			ret = j;

			for (i = 0; i < aLen; i++) {
				tmp2 = bCharCode === charCodeCache[i] ? tmp : tmp + 1;
				tmp = arr[i];
				ret = arr[i] = tmp > ret ? tmp2 > ret ? ret + 1 : tmp2 : tmp2 > tmp ? tmp + 1 : tmp2;
			}
		}

		return ret;
	};


/***/ },
/* 7766 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  plugins: [
	    __webpack_require__(1386),
	    __webpack_require__(1203),
	    __webpack_require__(1171),
	    __webpack_require__(1105),
	    __webpack_require__(1106),
	    __webpack_require__(1132),
	    __webpack_require__(1296),
	    __webpack_require__(1344),
	    __webpack_require__(1162),
	    __webpack_require__(1170),
	    __webpack_require__(1367),
	    __webpack_require__(1392),
	    __webpack_require__(992),
	    __webpack_require__(1363),
	    __webpack_require__(1318),
	    __webpack_require__(1166),
	    __webpack_require__(1110),
	    __webpack_require__(1390),
	    __webpack_require__(1223),
	    [__webpack_require__(1505), { async: false, asyncGenerators: false }],
	  ]
	};


/***/ },
/* 7767 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  plugins: [
	    __webpack_require__(2550),
	    __webpack_require__(2486),
	    __webpack_require__(996),
	    __webpack_require__(997),
	    __webpack_require__(2507),
	  ],
	  /*env: {
	    development: {
	      plugins: [
	        require("babel-plugin-transform-react-jsx-source")
	      ]
	    }
	  }*/
	};


/***/ },
/* 7768 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	  presets: [
	    __webpack_require__(2666)
	  ],
	  plugins: [
	    __webpack_require__(1823),
	    __webpack_require__(2493)
	  ]
	};


/***/ },
/* 7769 */
/***/ function(module, exports) {

	module.exports = {
		"builtin": {
			"Array": false,
			"ArrayBuffer": false,
			"Boolean": false,
			"constructor": false,
			"DataView": false,
			"Date": false,
			"decodeURI": false,
			"decodeURIComponent": false,
			"encodeURI": false,
			"encodeURIComponent": false,
			"Error": false,
			"escape": false,
			"eval": false,
			"EvalError": false,
			"Float32Array": false,
			"Float64Array": false,
			"Function": false,
			"hasOwnProperty": false,
			"Infinity": false,
			"Int16Array": false,
			"Int32Array": false,
			"Int8Array": false,
			"isFinite": false,
			"isNaN": false,
			"isPrototypeOf": false,
			"JSON": false,
			"Map": false,
			"Math": false,
			"NaN": false,
			"Number": false,
			"Object": false,
			"parseFloat": false,
			"parseInt": false,
			"Promise": false,
			"propertyIsEnumerable": false,
			"Proxy": false,
			"RangeError": false,
			"ReferenceError": false,
			"Reflect": false,
			"RegExp": false,
			"Set": false,
			"String": false,
			"Symbol": false,
			"SyntaxError": false,
			"System": false,
			"toLocaleString": false,
			"toString": false,
			"TypeError": false,
			"Uint16Array": false,
			"Uint32Array": false,
			"Uint8Array": false,
			"Uint8ClampedArray": false,
			"undefined": false,
			"unescape": false,
			"URIError": false,
			"valueOf": false,
			"WeakMap": false,
			"WeakSet": false
		},
		"es5": {
			"Array": false,
			"Boolean": false,
			"constructor": false,
			"Date": false,
			"decodeURI": false,
			"decodeURIComponent": false,
			"encodeURI": false,
			"encodeURIComponent": false,
			"Error": false,
			"escape": false,
			"eval": false,
			"EvalError": false,
			"Float32Array": false,
			"Float64Array": false,
			"Function": false,
			"hasOwnProperty": false,
			"Infinity": false,
			"isFinite": false,
			"isNaN": false,
			"isPrototypeOf": false,
			"JSON": false,
			"Math": false,
			"NaN": false,
			"Number": false,
			"Object": false,
			"parseFloat": false,
			"parseInt": false,
			"propertyIsEnumerable": false,
			"RangeError": false,
			"ReferenceError": false,
			"RegExp": false,
			"String": false,
			"SyntaxError": false,
			"toLocaleString": false,
			"toString": false,
			"TypeError": false,
			"undefined": false,
			"unescape": false,
			"URIError": false,
			"valueOf": false
		},
		"es6": {
			"Array": false,
			"ArrayBuffer": false,
			"Boolean": false,
			"constructor": false,
			"DataView": false,
			"Date": false,
			"decodeURI": false,
			"decodeURIComponent": false,
			"encodeURI": false,
			"encodeURIComponent": false,
			"Error": false,
			"escape": false,
			"eval": false,
			"EvalError": false,
			"Float32Array": false,
			"Float64Array": false,
			"Function": false,
			"hasOwnProperty": false,
			"Infinity": false,
			"Int16Array": false,
			"Int32Array": false,
			"Int8Array": false,
			"isFinite": false,
			"isNaN": false,
			"isPrototypeOf": false,
			"JSON": false,
			"Map": false,
			"Math": false,
			"NaN": false,
			"Number": false,
			"Object": false,
			"parseFloat": false,
			"parseInt": false,
			"Promise": false,
			"propertyIsEnumerable": false,
			"Proxy": false,
			"RangeError": false,
			"ReferenceError": false,
			"Reflect": false,
			"RegExp": false,
			"Set": false,
			"String": false,
			"Symbol": false,
			"SyntaxError": false,
			"System": false,
			"toLocaleString": false,
			"toString": false,
			"TypeError": false,
			"Uint16Array": false,
			"Uint32Array": false,
			"Uint8Array": false,
			"Uint8ClampedArray": false,
			"undefined": false,
			"unescape": false,
			"URIError": false,
			"valueOf": false,
			"WeakMap": false,
			"WeakSet": false
		},
		"browser": {
			"addEventListener": false,
			"alert": false,
			"AnalyserNode": false,
			"AnimationEvent": false,
			"applicationCache": false,
			"ApplicationCache": false,
			"ApplicationCacheErrorEvent": false,
			"atob": false,
			"Attr": false,
			"Audio": false,
			"AudioBuffer": false,
			"AudioBufferSourceNode": false,
			"AudioContext": false,
			"AudioDestinationNode": false,
			"AudioListener": false,
			"AudioNode": false,
			"AudioParam": false,
			"AudioProcessingEvent": false,
			"AutocompleteErrorEvent": false,
			"BarProp": false,
			"BatteryManager": false,
			"BeforeUnloadEvent": false,
			"BiquadFilterNode": false,
			"Blob": false,
			"blur": false,
			"btoa": false,
			"Cache": false,
			"caches": false,
			"CacheStorage": false,
			"cancelAnimationFrame": false,
			"CanvasGradient": false,
			"CanvasPattern": false,
			"CanvasRenderingContext2D": false,
			"CDATASection": false,
			"ChannelMergerNode": false,
			"ChannelSplitterNode": false,
			"CharacterData": false,
			"clearInterval": false,
			"clearTimeout": false,
			"clientInformation": false,
			"ClientRect": false,
			"ClientRectList": false,
			"ClipboardEvent": false,
			"close": false,
			"closed": false,
			"CloseEvent": false,
			"Comment": false,
			"CompositionEvent": false,
			"confirm": false,
			"console": false,
			"ConvolverNode": false,
			"crypto": false,
			"Crypto": false,
			"CryptoKey": false,
			"CSS": false,
			"CSSFontFaceRule": false,
			"CSSImportRule": false,
			"CSSKeyframeRule": false,
			"CSSKeyframesRule": false,
			"CSSMediaRule": false,
			"CSSPageRule": false,
			"CSSRule": false,
			"CSSRuleList": false,
			"CSSStyleDeclaration": false,
			"CSSStyleRule": false,
			"CSSStyleSheet": false,
			"CSSSupportsRule": false,
			"CSSUnknownRule": false,
			"CSSViewportRule": false,
			"CustomEvent": false,
			"DataTransfer": false,
			"DataTransferItem": false,
			"DataTransferItemList": false,
			"Debug": false,
			"defaultStatus": false,
			"defaultstatus": false,
			"DelayNode": false,
			"DeviceMotionEvent": false,
			"DeviceOrientationEvent": false,
			"devicePixelRatio": false,
			"dispatchEvent": false,
			"document": false,
			"Document": false,
			"DocumentFragment": false,
			"DocumentType": false,
			"DOMError": false,
			"DOMException": false,
			"DOMImplementation": false,
			"DOMParser": false,
			"DOMSettableTokenList": false,
			"DOMStringList": false,
			"DOMStringMap": false,
			"DOMTokenList": false,
			"DragEvent": false,
			"DynamicsCompressorNode": false,
			"Element": false,
			"ElementTimeControl": false,
			"ErrorEvent": false,
			"event": false,
			"Event": false,
			"EventSource": false,
			"EventTarget": false,
			"external": false,
			"fetch": false,
			"File": false,
			"FileError": false,
			"FileList": false,
			"FileReader": false,
			"find": false,
			"focus": false,
			"FocusEvent": false,
			"FontFace": false,
			"FormData": false,
			"frameElement": false,
			"frames": false,
			"GainNode": false,
			"Gamepad": false,
			"GamepadButton": false,
			"GamepadEvent": false,
			"getComputedStyle": false,
			"getSelection": false,
			"HashChangeEvent": false,
			"Headers": false,
			"history": false,
			"History": false,
			"HTMLAllCollection": false,
			"HTMLAnchorElement": false,
			"HTMLAppletElement": false,
			"HTMLAreaElement": false,
			"HTMLAudioElement": false,
			"HTMLBaseElement": false,
			"HTMLBlockquoteElement": false,
			"HTMLBodyElement": false,
			"HTMLBRElement": false,
			"HTMLButtonElement": false,
			"HTMLCanvasElement": false,
			"HTMLCollection": false,
			"HTMLContentElement": false,
			"HTMLDataListElement": false,
			"HTMLDetailsElement": false,
			"HTMLDialogElement": false,
			"HTMLDirectoryElement": false,
			"HTMLDivElement": false,
			"HTMLDListElement": false,
			"HTMLDocument": false,
			"HTMLElement": false,
			"HTMLEmbedElement": false,
			"HTMLFieldSetElement": false,
			"HTMLFontElement": false,
			"HTMLFormControlsCollection": false,
			"HTMLFormElement": false,
			"HTMLFrameElement": false,
			"HTMLFrameSetElement": false,
			"HTMLHeadElement": false,
			"HTMLHeadingElement": false,
			"HTMLHRElement": false,
			"HTMLHtmlElement": false,
			"HTMLIFrameElement": false,
			"HTMLImageElement": false,
			"HTMLInputElement": false,
			"HTMLIsIndexElement": false,
			"HTMLKeygenElement": false,
			"HTMLLabelElement": false,
			"HTMLLayerElement": false,
			"HTMLLegendElement": false,
			"HTMLLIElement": false,
			"HTMLLinkElement": false,
			"HTMLMapElement": false,
			"HTMLMarqueeElement": false,
			"HTMLMediaElement": false,
			"HTMLMenuElement": false,
			"HTMLMetaElement": false,
			"HTMLMeterElement": false,
			"HTMLModElement": false,
			"HTMLObjectElement": false,
			"HTMLOListElement": false,
			"HTMLOptGroupElement": false,
			"HTMLOptionElement": false,
			"HTMLOptionsCollection": false,
			"HTMLOutputElement": false,
			"HTMLParagraphElement": false,
			"HTMLParamElement": false,
			"HTMLPictureElement": false,
			"HTMLPreElement": false,
			"HTMLProgressElement": false,
			"HTMLQuoteElement": false,
			"HTMLScriptElement": false,
			"HTMLSelectElement": false,
			"HTMLShadowElement": false,
			"HTMLSourceElement": false,
			"HTMLSpanElement": false,
			"HTMLStyleElement": false,
			"HTMLTableCaptionElement": false,
			"HTMLTableCellElement": false,
			"HTMLTableColElement": false,
			"HTMLTableElement": false,
			"HTMLTableRowElement": false,
			"HTMLTableSectionElement": false,
			"HTMLTemplateElement": false,
			"HTMLTextAreaElement": false,
			"HTMLTitleElement": false,
			"HTMLTrackElement": false,
			"HTMLUListElement": false,
			"HTMLUnknownElement": false,
			"HTMLVideoElement": false,
			"IDBCursor": false,
			"IDBCursorWithValue": false,
			"IDBDatabase": false,
			"IDBEnvironment": false,
			"IDBFactory": false,
			"IDBIndex": false,
			"IDBKeyRange": false,
			"IDBObjectStore": false,
			"IDBOpenDBRequest": false,
			"IDBRequest": false,
			"IDBTransaction": false,
			"IDBVersionChangeEvent": false,
			"Image": false,
			"ImageBitmap": false,
			"ImageData": false,
			"indexedDB": false,
			"innerHeight": false,
			"innerWidth": false,
			"InputEvent": false,
			"InputMethodContext": false,
			"Intl": false,
			"KeyboardEvent": false,
			"length": false,
			"localStorage": false,
			"location": false,
			"Location": false,
			"locationbar": false,
			"matchMedia": false,
			"MediaElementAudioSourceNode": false,
			"MediaEncryptedEvent": false,
			"MediaError": false,
			"MediaKeyError": false,
			"MediaKeyEvent": false,
			"MediaKeyMessageEvent": false,
			"MediaKeys": false,
			"MediaKeySession": false,
			"MediaKeyStatusMap": false,
			"MediaKeySystemAccess": false,
			"MediaList": false,
			"MediaQueryList": false,
			"MediaQueryListEvent": false,
			"MediaSource": false,
			"MediaStreamAudioDestinationNode": false,
			"MediaStreamAudioSourceNode": false,
			"MediaStreamEvent": false,
			"MediaStreamTrack": false,
			"menubar": false,
			"MessageChannel": false,
			"MessageEvent": false,
			"MessagePort": false,
			"MIDIAccess": false,
			"MIDIConnectionEvent": false,
			"MIDIInput": false,
			"MIDIInputMap": false,
			"MIDIMessageEvent": false,
			"MIDIOutput": false,
			"MIDIOutputMap": false,
			"MIDIPort": false,
			"MimeType": false,
			"MimeTypeArray": false,
			"MouseEvent": false,
			"moveBy": false,
			"moveTo": false,
			"MutationEvent": false,
			"MutationObserver": false,
			"MutationRecord": false,
			"name": false,
			"NamedNodeMap": false,
			"navigator": false,
			"Navigator": false,
			"Node": false,
			"NodeFilter": false,
			"NodeIterator": false,
			"NodeList": false,
			"Notification": false,
			"OfflineAudioCompletionEvent": false,
			"OfflineAudioContext": false,
			"offscreenBuffering": false,
			"onbeforeunload": true,
			"onblur": true,
			"onerror": true,
			"onfocus": true,
			"onload": true,
			"onresize": true,
			"onunload": true,
			"open": false,
			"openDatabase": false,
			"opener": false,
			"opera": false,
			"Option": false,
			"OscillatorNode": false,
			"outerHeight": false,
			"outerWidth": false,
			"PageTransitionEvent": false,
			"pageXOffset": false,
			"pageYOffset": false,
			"parent": false,
			"Path2D": false,
			"performance": false,
			"Performance": false,
			"PerformanceEntry": false,
			"PerformanceMark": false,
			"PerformanceMeasure": false,
			"PerformanceNavigation": false,
			"PerformanceResourceTiming": false,
			"PerformanceTiming": false,
			"PeriodicWave": false,
			"Permissions": false,
			"PermissionStatus": false,
			"personalbar": false,
			"Plugin": false,
			"PluginArray": false,
			"PopStateEvent": false,
			"postMessage": false,
			"print": false,
			"ProcessingInstruction": false,
			"ProgressEvent": false,
			"prompt": false,
			"PushManager": false,
			"PushSubscription": false,
			"RadioNodeList": false,
			"Range": false,
			"ReadableByteStream": false,
			"ReadableStream": false,
			"removeEventListener": false,
			"Request": false,
			"requestAnimationFrame": false,
			"resizeBy": false,
			"resizeTo": false,
			"Response": false,
			"RTCIceCandidate": false,
			"RTCSessionDescription": false,
			"screen": false,
			"Screen": false,
			"screenLeft": false,
			"ScreenOrientation": false,
			"screenTop": false,
			"screenX": false,
			"screenY": false,
			"ScriptProcessorNode": false,
			"scroll": false,
			"scrollbars": false,
			"scrollBy": false,
			"scrollTo": false,
			"scrollX": false,
			"scrollY": false,
			"SecurityPolicyViolationEvent": false,
			"Selection": false,
			"self": false,
			"ServiceWorker": false,
			"ServiceWorkerContainer": false,
			"ServiceWorkerRegistration": false,
			"sessionStorage": false,
			"setInterval": false,
			"setTimeout": false,
			"ShadowRoot": false,
			"SharedWorker": false,
			"showModalDialog": false,
			"speechSynthesis": false,
			"SpeechSynthesisEvent": false,
			"SpeechSynthesisUtterance": false,
			"status": false,
			"statusbar": false,
			"stop": false,
			"Storage": false,
			"StorageEvent": false,
			"styleMedia": false,
			"StyleSheet": false,
			"StyleSheetList": false,
			"SubtleCrypto": false,
			"SVGAElement": false,
			"SVGAltGlyphDefElement": false,
			"SVGAltGlyphElement": false,
			"SVGAltGlyphItemElement": false,
			"SVGAngle": false,
			"SVGAnimateColorElement": false,
			"SVGAnimatedAngle": false,
			"SVGAnimatedBoolean": false,
			"SVGAnimatedEnumeration": false,
			"SVGAnimatedInteger": false,
			"SVGAnimatedLength": false,
			"SVGAnimatedLengthList": false,
			"SVGAnimatedNumber": false,
			"SVGAnimatedNumberList": false,
			"SVGAnimatedPathData": false,
			"SVGAnimatedPoints": false,
			"SVGAnimatedPreserveAspectRatio": false,
			"SVGAnimatedRect": false,
			"SVGAnimatedString": false,
			"SVGAnimatedTransformList": false,
			"SVGAnimateElement": false,
			"SVGAnimateMotionElement": false,
			"SVGAnimateTransformElement": false,
			"SVGAnimationElement": false,
			"SVGCircleElement": false,
			"SVGClipPathElement": false,
			"SVGColor": false,
			"SVGColorProfileElement": false,
			"SVGColorProfileRule": false,
			"SVGComponentTransferFunctionElement": false,
			"SVGCSSRule": false,
			"SVGCursorElement": false,
			"SVGDefsElement": false,
			"SVGDescElement": false,
			"SVGDiscardElement": false,
			"SVGDocument": false,
			"SVGElement": false,
			"SVGElementInstance": false,
			"SVGElementInstanceList": false,
			"SVGEllipseElement": false,
			"SVGEvent": false,
			"SVGExternalResourcesRequired": false,
			"SVGFEBlendElement": false,
			"SVGFEColorMatrixElement": false,
			"SVGFEComponentTransferElement": false,
			"SVGFECompositeElement": false,
			"SVGFEConvolveMatrixElement": false,
			"SVGFEDiffuseLightingElement": false,
			"SVGFEDisplacementMapElement": false,
			"SVGFEDistantLightElement": false,
			"SVGFEDropShadowElement": false,
			"SVGFEFloodElement": false,
			"SVGFEFuncAElement": false,
			"SVGFEFuncBElement": false,
			"SVGFEFuncGElement": false,
			"SVGFEFuncRElement": false,
			"SVGFEGaussianBlurElement": false,
			"SVGFEImageElement": false,
			"SVGFEMergeElement": false,
			"SVGFEMergeNodeElement": false,
			"SVGFEMorphologyElement": false,
			"SVGFEOffsetElement": false,
			"SVGFEPointLightElement": false,
			"SVGFESpecularLightingElement": false,
			"SVGFESpotLightElement": false,
			"SVGFETileElement": false,
			"SVGFETurbulenceElement": false,
			"SVGFilterElement": false,
			"SVGFilterPrimitiveStandardAttributes": false,
			"SVGFitToViewBox": false,
			"SVGFontElement": false,
			"SVGFontFaceElement": false,
			"SVGFontFaceFormatElement": false,
			"SVGFontFaceNameElement": false,
			"SVGFontFaceSrcElement": false,
			"SVGFontFaceUriElement": false,
			"SVGForeignObjectElement": false,
			"SVGGElement": false,
			"SVGGeometryElement": false,
			"SVGGlyphElement": false,
			"SVGGlyphRefElement": false,
			"SVGGradientElement": false,
			"SVGGraphicsElement": false,
			"SVGHKernElement": false,
			"SVGICCColor": false,
			"SVGImageElement": false,
			"SVGLangSpace": false,
			"SVGLength": false,
			"SVGLengthList": false,
			"SVGLinearGradientElement": false,
			"SVGLineElement": false,
			"SVGLocatable": false,
			"SVGMarkerElement": false,
			"SVGMaskElement": false,
			"SVGMatrix": false,
			"SVGMetadataElement": false,
			"SVGMissingGlyphElement": false,
			"SVGMPathElement": false,
			"SVGNumber": false,
			"SVGNumberList": false,
			"SVGPaint": false,
			"SVGPathElement": false,
			"SVGPathSeg": false,
			"SVGPathSegArcAbs": false,
			"SVGPathSegArcRel": false,
			"SVGPathSegClosePath": false,
			"SVGPathSegCurvetoCubicAbs": false,
			"SVGPathSegCurvetoCubicRel": false,
			"SVGPathSegCurvetoCubicSmoothAbs": false,
			"SVGPathSegCurvetoCubicSmoothRel": false,
			"SVGPathSegCurvetoQuadraticAbs": false,
			"SVGPathSegCurvetoQuadraticRel": false,
			"SVGPathSegCurvetoQuadraticSmoothAbs": false,
			"SVGPathSegCurvetoQuadraticSmoothRel": false,
			"SVGPathSegLinetoAbs": false,
			"SVGPathSegLinetoHorizontalAbs": false,
			"SVGPathSegLinetoHorizontalRel": false,
			"SVGPathSegLinetoRel": false,
			"SVGPathSegLinetoVerticalAbs": false,
			"SVGPathSegLinetoVerticalRel": false,
			"SVGPathSegList": false,
			"SVGPathSegMovetoAbs": false,
			"SVGPathSegMovetoRel": false,
			"SVGPatternElement": false,
			"SVGPoint": false,
			"SVGPointList": false,
			"SVGPolygonElement": false,
			"SVGPolylineElement": false,
			"SVGPreserveAspectRatio": false,
			"SVGRadialGradientElement": false,
			"SVGRect": false,
			"SVGRectElement": false,
			"SVGRenderingIntent": false,
			"SVGScriptElement": false,
			"SVGSetElement": false,
			"SVGStopElement": false,
			"SVGStringList": false,
			"SVGStylable": false,
			"SVGStyleElement": false,
			"SVGSVGElement": false,
			"SVGSwitchElement": false,
			"SVGSymbolElement": false,
			"SVGTests": false,
			"SVGTextContentElement": false,
			"SVGTextElement": false,
			"SVGTextPathElement": false,
			"SVGTextPositioningElement": false,
			"SVGTitleElement": false,
			"SVGTransform": false,
			"SVGTransformable": false,
			"SVGTransformList": false,
			"SVGTRefElement": false,
			"SVGTSpanElement": false,
			"SVGUnitTypes": false,
			"SVGURIReference": false,
			"SVGUseElement": false,
			"SVGViewElement": false,
			"SVGViewSpec": false,
			"SVGVKernElement": false,
			"SVGZoomAndPan": false,
			"SVGZoomEvent": false,
			"Text": false,
			"TextDecoder": false,
			"TextEncoder": false,
			"TextEvent": false,
			"TextMetrics": false,
			"TextTrack": false,
			"TextTrackCue": false,
			"TextTrackCueList": false,
			"TextTrackList": false,
			"TimeEvent": false,
			"TimeRanges": false,
			"toolbar": false,
			"top": false,
			"Touch": false,
			"TouchEvent": false,
			"TouchList": false,
			"TrackEvent": false,
			"TransitionEvent": false,
			"TreeWalker": false,
			"UIEvent": false,
			"URL": false,
			"ValidityState": false,
			"VTTCue": false,
			"WaveShaperNode": false,
			"WebGLActiveInfo": false,
			"WebGLBuffer": false,
			"WebGLContextEvent": false,
			"WebGLFramebuffer": false,
			"WebGLProgram": false,
			"WebGLRenderbuffer": false,
			"WebGLRenderingContext": false,
			"WebGLShader": false,
			"WebGLShaderPrecisionFormat": false,
			"WebGLTexture": false,
			"WebGLUniformLocation": false,
			"WebSocket": false,
			"WheelEvent": false,
			"window": false,
			"Window": false,
			"Worker": false,
			"XDomainRequest": false,
			"XMLDocument": false,
			"XMLHttpRequest": false,
			"XMLHttpRequestEventTarget": false,
			"XMLHttpRequestProgressEvent": false,
			"XMLHttpRequestUpload": false,
			"XMLSerializer": false,
			"XPathEvaluator": false,
			"XPathException": false,
			"XPathExpression": false,
			"XPathNamespace": false,
			"XPathNSResolver": false,
			"XPathResult": false,
			"XSLTProcessor": false
		},
		"worker": {
			"applicationCache": false,
			"atob": false,
			"BroadcastChannel": false,
			"btoa": false,
			"Cache": false,
			"caches": false,
			"clearInterval": false,
			"clearTimeout": false,
			"close": true,
			"console": false,
			"fetch": false,
			"FileReaderSync": false,
			"FormData": false,
			"Headers": false,
			"IDBCursor": false,
			"IDBCursorWithValue": false,
			"IDBDatabase": false,
			"IDBFactory": false,
			"IDBIndex": false,
			"IDBKeyRange": false,
			"IDBObjectStore": false,
			"IDBOpenDBRequest": false,
			"IDBRequest": false,
			"IDBTransaction": false,
			"IDBVersionChangeEvent": false,
			"ImageData": false,
			"importScripts": true,
			"indexedDB": false,
			"location": false,
			"MessageChannel": false,
			"MessagePort": false,
			"name": false,
			"navigator": false,
			"Notification": false,
			"onclose": true,
			"onconnect": true,
			"onerror": true,
			"onlanguagechange": true,
			"onmessage": true,
			"onoffline": true,
			"ononline": true,
			"onrejectionhandled": true,
			"onunhandledrejection": true,
			"performance": false,
			"Performance": false,
			"PerformanceEntry": false,
			"PerformanceMark": false,
			"PerformanceMeasure": false,
			"PerformanceNavigation": false,
			"PerformanceResourceTiming": false,
			"PerformanceTiming": false,
			"postMessage": true,
			"Promise": false,
			"Request": false,
			"Response": false,
			"self": true,
			"ServiceWorkerRegistration": false,
			"setInterval": false,
			"setTimeout": false,
			"TextDecoder": false,
			"TextEncoder": false,
			"URL": false,
			"WebSocket": false,
			"Worker": false,
			"XMLHttpRequest": false
		},
		"node": {
			"__dirname": false,
			"__filename": false,
			"arguments": false,
			"Buffer": false,
			"clearImmediate": false,
			"clearInterval": false,
			"clearTimeout": false,
			"console": false,
			"exports": true,
			"GLOBAL": false,
			"global": false,
			"module": false,
			"process": false,
			"require": false,
			"root": false,
			"setImmediate": false,
			"setInterval": false,
			"setTimeout": false
		},
		"commonjs": {
			"exports": true,
			"module": false,
			"require": false
		},
		"amd": {
			"define": false,
			"require": false
		},
		"mocha": {
			"after": false,
			"afterEach": false,
			"before": false,
			"beforeEach": false,
			"context": false,
			"describe": false,
			"it": false,
			"mocha": false,
			"setup": false,
			"specify": false,
			"suite": false,
			"suiteSetup": false,
			"suiteTeardown": false,
			"teardown": false,
			"test": false,
			"xcontext": false,
			"xdescribe": false,
			"xit": false,
			"xspecify": false
		},
		"jasmine": {
			"afterAll": false,
			"afterEach": false,
			"beforeAll": false,
			"beforeEach": false,
			"describe": false,
			"expect": false,
			"fail": false,
			"fdescribe": false,
			"fit": false,
			"it": false,
			"jasmine": false,
			"pending": false,
			"runs": false,
			"spyOn": false,
			"waits": false,
			"waitsFor": false,
			"xdescribe": false,
			"xit": false
		},
		"jest": {
			"afterEach": false,
			"beforeEach": false,
			"describe": false,
			"expect": false,
			"it": false,
			"jest": false,
			"pit": false,
			"require": false,
			"xdescribe": false,
			"xit": false
		},
		"qunit": {
			"asyncTest": false,
			"deepEqual": false,
			"equal": false,
			"expect": false,
			"module": false,
			"notDeepEqual": false,
			"notEqual": false,
			"notOk": false,
			"notPropEqual": false,
			"notStrictEqual": false,
			"ok": false,
			"propEqual": false,
			"QUnit": false,
			"raises": false,
			"start": false,
			"stop": false,
			"strictEqual": false,
			"test": false,
			"throws": false
		},
		"phantomjs": {
			"console": true,
			"exports": true,
			"phantom": true,
			"require": true,
			"WebPage": true
		},
		"couch": {
			"emit": false,
			"exports": false,
			"getRow": false,
			"log": false,
			"module": false,
			"provides": false,
			"require": false,
			"respond": false,
			"send": false,
			"start": false,
			"sum": false
		},
		"rhino": {
			"defineClass": false,
			"deserialize": false,
			"gc": false,
			"help": false,
			"importClass": false,
			"importPackage": false,
			"java": false,
			"load": false,
			"loadClass": false,
			"Packages": false,
			"print": false,
			"quit": false,
			"readFile": false,
			"readUrl": false,
			"runCommand": false,
			"seal": false,
			"serialize": false,
			"spawn": false,
			"sync": false,
			"toint32": false,
			"version": false
		},
		"nashorn": {
			"__DIR__": false,
			"__FILE__": false,
			"__LINE__": false,
			"com": false,
			"edu": false,
			"exit": false,
			"Java": false,
			"java": false,
			"javafx": false,
			"JavaImporter": false,
			"javax": false,
			"JSAdapter": false,
			"load": false,
			"loadWithNewGlobal": false,
			"org": false,
			"Packages": false,
			"print": false,
			"quit": false
		},
		"wsh": {
			"ActiveXObject": true,
			"Enumerator": true,
			"GetObject": true,
			"ScriptEngine": true,
			"ScriptEngineBuildVersion": true,
			"ScriptEngineMajorVersion": true,
			"ScriptEngineMinorVersion": true,
			"VBArray": true,
			"WScript": true,
			"WSH": true,
			"XDomainRequest": true
		},
		"jquery": {
			"$": false,
			"jQuery": false
		},
		"yui": {
			"Y": false,
			"YUI": false,
			"YUI_config": false
		},
		"shelljs": {
			"cat": false,
			"cd": false,
			"chmod": false,
			"config": false,
			"cp": false,
			"dirs": false,
			"echo": false,
			"env": false,
			"error": false,
			"exec": false,
			"exit": false,
			"find": false,
			"grep": false,
			"ls": false,
			"ln": false,
			"mkdir": false,
			"mv": false,
			"popd": false,
			"pushd": false,
			"pwd": false,
			"rm": false,
			"sed": false,
			"target": false,
			"tempdir": false,
			"test": false,
			"which": false
		},
		"prototypejs": {
			"$": false,
			"$$": false,
			"$A": false,
			"$break": false,
			"$continue": false,
			"$F": false,
			"$H": false,
			"$R": false,
			"$w": false,
			"Abstract": false,
			"Ajax": false,
			"Autocompleter": false,
			"Builder": false,
			"Class": false,
			"Control": false,
			"Draggable": false,
			"Draggables": false,
			"Droppables": false,
			"Effect": false,
			"Element": false,
			"Enumerable": false,
			"Event": false,
			"Field": false,
			"Form": false,
			"Hash": false,
			"Insertion": false,
			"ObjectRange": false,
			"PeriodicalExecuter": false,
			"Position": false,
			"Prototype": false,
			"Scriptaculous": false,
			"Selector": false,
			"Sortable": false,
			"SortableObserver": false,
			"Sound": false,
			"Template": false,
			"Toggle": false,
			"Try": false
		},
		"meteor": {
			"$": false,
			"_": false,
			"Accounts": false,
			"App": false,
			"Assets": false,
			"Blaze": false,
			"check": false,
			"Cordova": false,
			"DDP": false,
			"DDPServer": false,
			"Deps": false,
			"EJSON": false,
			"Email": false,
			"HTTP": false,
			"Log": false,
			"Match": false,
			"Meteor": false,
			"Mongo": false,
			"MongoInternals": false,
			"Npm": false,
			"Package": false,
			"Plugin": false,
			"process": false,
			"Random": false,
			"ReactiveDict": false,
			"ReactiveVar": false,
			"Router": false,
			"Session": false,
			"share": false,
			"Spacebars": false,
			"Template": false,
			"Tinytest": false,
			"Tracker": false,
			"UI": false,
			"Utils": false,
			"WebApp": false,
			"WebAppInternals": false
		},
		"mongo": {
			"_isWindows": false,
			"_rand": false,
			"BulkWriteResult": false,
			"cat": false,
			"cd": false,
			"connect": false,
			"db": false,
			"getHostName": false,
			"getMemInfo": false,
			"hostname": false,
			"listFiles": false,
			"load": false,
			"ls": false,
			"md5sumFile": false,
			"mkdir": false,
			"Mongo": false,
			"ObjectId": false,
			"PlanCache": false,
			"print": false,
			"printjson": false,
			"pwd": false,
			"quit": false,
			"removeFile": false,
			"rs": false,
			"sh": false,
			"UUID": false,
			"version": false,
			"WriteResult": false
		},
		"applescript": {
			"$": false,
			"Application": false,
			"Automation": false,
			"console": false,
			"delay": false,
			"Library": false,
			"ObjC": false,
			"ObjectSpecifier": false,
			"Path": false,
			"Progress": false,
			"Ref": false
		},
		"serviceworker": {
			"caches": false,
			"Cache": false,
			"CacheStorage": false,
			"Client": false,
			"clients": false,
			"Clients": false,
			"ExtendableEvent": false,
			"ExtendableMessageEvent": false,
			"FetchEvent": false,
			"importScripts": false,
			"registration": false,
			"self": false,
			"ServiceWorker": false,
			"ServiceWorkerContainer": false,
			"ServiceWorkerGlobalScope": false,
			"ServiceWorkerMessageEvent": false,
			"ServiceWorkerRegistration": false,
			"skipWaiting": false,
			"WindowClient": false
		},
		"embertest": {
			"andThen": false,
			"click": false,
			"currentPath": false,
			"currentRouteName": false,
			"currentURL": false,
			"fillIn": false,
			"find": false,
			"keyEvent": false,
			"triggerEvent": false,
			"visit": false
		},
		"protractor": {
			"$": false,
			"$$": false,
			"browser": false,
			"By": false,
			"by": false,
			"DartObject": false,
			"element": false,
			"protractor": false
		},
		"shared-node-browser": {
			"clearInterval": false,
			"clearTimeout": false,
			"console": false,
			"setInterval": false,
			"setTimeout": false
		},
		"webextensions": {
			"browser": false,
			"chrome": false,
			"opr": false
		}
	};

/***/ },
/* 7770 */
/***/ function(module, exports) {

	module.exports = {
		"name": "babel-core",
		"version": "6.3.13",
		"description": "Babel compiler core.",
		"author": {
			"name": "Sebastian McKenzie",
			"email": "sebmck@gmail.com"
		},
		"homepage": "https://babeljs.io/",
		"license": "MIT",
		"repository": {
			"type": "git",
			"url": "https://github.com/babel/babel/tree/master/packages/babel-core"
		},
		"keywords": [
			"6to5",
			"babel",
			"classes",
			"const",
			"es6",
			"harmony",
			"let",
			"modules",
			"transpile",
			"transpiler",
			"var"
		],
		"scripts": {
			"bench": "make bench",
			"test": "make test"
		},
		"dependencies": {
			"babel-code-frame": "^6.3.13",
			"babel-generator": "^6.3.13",
			"babel-helpers": "^6.3.13",
			"babel-messages": "^6.3.13",
			"babel-template": "^6.3.13",
			"babel-runtime": "^5.0.0",
			"babel-register": "^6.3.13",
			"babel-traverse": "^6.3.13",
			"babel-types": "^6.3.13",
			"babylon": "^6.3.13",
			"convert-source-map": "^1.1.0",
			"debug": "^2.1.1",
			"json5": "^0.4.0",
			"lodash": "^3.10.0",
			"minimatch": "^2.0.3",
			"path-exists": "^1.0.0",
			"path-is-absolute": "^1.0.0",
			"private": "^0.1.6",
			"shebang-regex": "^1.0.0",
			"slash": "^1.0.0",
			"source-map": "^0.5.0"
		},
		"devDependencies": {
			"babel-helper-fixtures": "^6.3.13",
			"babel-helper-transform-fixture-test-runner": "^6.3.13",
			"babel-polyfill": "^6.3.13"
		},
		"_id": "babel-core@6.3.13",
		"_shasum": "fb46e5f43ef91cefae69736da5a20ff542961e07",
		"_from": "babel-core@>=6.3.13 <7.0.0",
		"_npmVersion": "3.3.10",
		"_nodeVersion": "4.1.0",
		"_npmUser": {
			"name": "sebmck",
			"email": "sebmck@gmail.com"
		},
		"dist": {
			"shasum": "fb46e5f43ef91cefae69736da5a20ff542961e07",
			"tarball": "http://registry.npmjs.org/babel-core/-/babel-core-6.3.13.tgz"
		},
		"maintainers": [
			{
				"name": "amasad",
				"email": "amjad.masad@gmail.com"
			},
			{
				"name": "hzoo",
				"email": "hi@henryzoo.com"
			},
			{
				"name": "jmm",
				"email": "npm-public@jessemccarthy.net"
			},
			{
				"name": "loganfsmyth",
				"email": "loganfsmyth@gmail.com"
			},
			{
				"name": "sebmck",
				"email": "sebmck@gmail.com"
			},
			{
				"name": "thejameskyle",
				"email": "me@thejameskyle.com"
			}
		],
		"directories": {},
		"_resolved": "https://registry.npmjs.org/babel-core/-/babel-core-6.3.13.tgz",
		"readme": "ERROR: No README data found!"
	};

/***/ },
/* 7771 */
7769,
/* 7772 */
7769,
/* 7773 */
7769,
/* 7774 */
7769,
/* 7775 */
7769,
/* 7776 */
7769,
/* 7777 */
7769,
/* 7778 */
7769,
/* 7779 */
7769,
/* 7780 */
7769,
/* 7781 */
7769,
/* 7782 */
7769,
/* 7783 */
7769,
/* 7784 */
7769,
/* 7785 */
7769,
/* 7786 */
7769,
/* 7787 */
7769,
/* 7788 */
7769,
/* 7789 */
7769,
/* 7790 */
7769,
/* 7791 */
7769,
/* 7792 */
/***/ function(module, exports) {

	module.exports = {
		"75": 8490,
		"83": 383,
		"107": 8490,
		"115": 383,
		"181": 924,
		"197": 8491,
		"383": 83,
		"452": 453,
		"453": 452,
		"455": 456,
		"456": 455,
		"458": 459,
		"459": 458,
		"497": 498,
		"498": 497,
		"837": 8126,
		"914": 976,
		"917": 1013,
		"920": 1012,
		"921": 8126,
		"922": 1008,
		"924": 181,
		"928": 982,
		"929": 1009,
		"931": 962,
		"934": 981,
		"937": 8486,
		"962": 931,
		"976": 914,
		"977": 1012,
		"981": 934,
		"982": 928,
		"1008": 922,
		"1009": 929,
		"1012": [
			920,
			977
		],
		"1013": 917,
		"7776": 7835,
		"7835": 7776,
		"8126": [
			837,
			921
		],
		"8486": 937,
		"8490": 75,
		"8491": 197,
		"66560": 66600,
		"66561": 66601,
		"66562": 66602,
		"66563": 66603,
		"66564": 66604,
		"66565": 66605,
		"66566": 66606,
		"66567": 66607,
		"66568": 66608,
		"66569": 66609,
		"66570": 66610,
		"66571": 66611,
		"66572": 66612,
		"66573": 66613,
		"66574": 66614,
		"66575": 66615,
		"66576": 66616,
		"66577": 66617,
		"66578": 66618,
		"66579": 66619,
		"66580": 66620,
		"66581": 66621,
		"66582": 66622,
		"66583": 66623,
		"66584": 66624,
		"66585": 66625,
		"66586": 66626,
		"66587": 66627,
		"66588": 66628,
		"66589": 66629,
		"66590": 66630,
		"66591": 66631,
		"66592": 66632,
		"66593": 66633,
		"66594": 66634,
		"66595": 66635,
		"66596": 66636,
		"66597": 66637,
		"66598": 66638,
		"66599": 66639,
		"66600": 66560,
		"66601": 66561,
		"66602": 66562,
		"66603": 66563,
		"66604": 66564,
		"66605": 66565,
		"66606": 66566,
		"66607": 66567,
		"66608": 66568,
		"66609": 66569,
		"66610": 66570,
		"66611": 66571,
		"66612": 66572,
		"66613": 66573,
		"66614": 66574,
		"66615": 66575,
		"66616": 66576,
		"66617": 66577,
		"66618": 66578,
		"66619": 66579,
		"66620": 66580,
		"66621": 66581,
		"66622": 66582,
		"66623": 66583,
		"66624": 66584,
		"66625": 66585,
		"66626": 66586,
		"66627": 66587,
		"66628": 66588,
		"66629": 66589,
		"66630": 66590,
		"66631": 66591,
		"66632": 66592,
		"66633": 66593,
		"66634": 66594,
		"66635": 66595,
		"66636": 66596,
		"66637": 66597,
		"66638": 66598,
		"66639": 66599,
		"68736": 68800,
		"68737": 68801,
		"68738": 68802,
		"68739": 68803,
		"68740": 68804,
		"68741": 68805,
		"68742": 68806,
		"68743": 68807,
		"68744": 68808,
		"68745": 68809,
		"68746": 68810,
		"68747": 68811,
		"68748": 68812,
		"68749": 68813,
		"68750": 68814,
		"68751": 68815,
		"68752": 68816,
		"68753": 68817,
		"68754": 68818,
		"68755": 68819,
		"68756": 68820,
		"68757": 68821,
		"68758": 68822,
		"68759": 68823,
		"68760": 68824,
		"68761": 68825,
		"68762": 68826,
		"68763": 68827,
		"68764": 68828,
		"68765": 68829,
		"68766": 68830,
		"68767": 68831,
		"68768": 68832,
		"68769": 68833,
		"68770": 68834,
		"68771": 68835,
		"68772": 68836,
		"68773": 68837,
		"68774": 68838,
		"68775": 68839,
		"68776": 68840,
		"68777": 68841,
		"68778": 68842,
		"68779": 68843,
		"68780": 68844,
		"68781": 68845,
		"68782": 68846,
		"68783": 68847,
		"68784": 68848,
		"68785": 68849,
		"68786": 68850,
		"68800": 68736,
		"68801": 68737,
		"68802": 68738,
		"68803": 68739,
		"68804": 68740,
		"68805": 68741,
		"68806": 68742,
		"68807": 68743,
		"68808": 68744,
		"68809": 68745,
		"68810": 68746,
		"68811": 68747,
		"68812": 68748,
		"68813": 68749,
		"68814": 68750,
		"68815": 68751,
		"68816": 68752,
		"68817": 68753,
		"68818": 68754,
		"68819": 68755,
		"68820": 68756,
		"68821": 68757,
		"68822": 68758,
		"68823": 68759,
		"68824": 68760,
		"68825": 68761,
		"68826": 68762,
		"68827": 68763,
		"68828": 68764,
		"68829": 68765,
		"68830": 68766,
		"68831": 68767,
		"68832": 68768,
		"68833": 68769,
		"68834": 68770,
		"68835": 68771,
		"68836": 68772,
		"68837": 68773,
		"68838": 68774,
		"68839": 68775,
		"68840": 68776,
		"68841": 68777,
		"68842": 68778,
		"68843": 68779,
		"68844": 68780,
		"68845": 68781,
		"68846": 68782,
		"68847": 68783,
		"68848": 68784,
		"68849": 68785,
		"68850": 68786,
		"71840": 71872,
		"71841": 71873,
		"71842": 71874,
		"71843": 71875,
		"71844": 71876,
		"71845": 71877,
		"71846": 71878,
		"71847": 71879,
		"71848": 71880,
		"71849": 71881,
		"71850": 71882,
		"71851": 71883,
		"71852": 71884,
		"71853": 71885,
		"71854": 71886,
		"71855": 71887,
		"71856": 71888,
		"71857": 71889,
		"71858": 71890,
		"71859": 71891,
		"71860": 71892,
		"71861": 71893,
		"71862": 71894,
		"71863": 71895,
		"71864": 71896,
		"71865": 71897,
		"71866": 71898,
		"71867": 71899,
		"71868": 71900,
		"71869": 71901,
		"71870": 71902,
		"71871": 71903,
		"71872": 71840,
		"71873": 71841,
		"71874": 71842,
		"71875": 71843,
		"71876": 71844,
		"71877": 71845,
		"71878": 71846,
		"71879": 71847,
		"71880": 71848,
		"71881": 71849,
		"71882": 71850,
		"71883": 71851,
		"71884": 71852,
		"71885": 71853,
		"71886": 71854,
		"71887": 71855,
		"71888": 71856,
		"71889": 71857,
		"71890": 71858,
		"71891": 71859,
		"71892": 71860,
		"71893": 71861,
		"71894": 71862,
		"71895": 71863,
		"71896": 71864,
		"71897": 71865,
		"71898": 71866,
		"71899": 71867,
		"71900": 71868,
		"71901": 71869,
		"71902": 71870,
		"71903": 71871
	};

/***/ },
/* 7793 */
7769,
/* 7794 */
7769,
/* 7795 */
7769,
/* 7796 */
7769,
/* 7797 */
7769,
/* 7798 */
7769,
/* 7799 */
7769,
/* 7800 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

	;(function (exports) {
		'use strict';

	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array

		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
		var PLUS_URL_SAFE = '-'.charCodeAt(0)
		var SLASH_URL_SAFE = '_'.charCodeAt(0)

		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS ||
			    code === PLUS_URL_SAFE)
				return 62 // '+'
			if (code === SLASH ||
			    code === SLASH_URL_SAFE)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}

		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr

			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}

			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)

			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length

			var L = 0

			function push (v) {
				arr[L++] = v
			}

			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}

			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}

			return arr
		}

		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length

			function encode (num) {
				return lookup.charAt(num)
			}

			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}

			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}

			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}

			return output
		}

		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}( false ? (this.base64js = {}) : exports))


/***/ },
/* 7801 */
/***/ function(module, exports) {

	exports.read = function (buffer, offset, isLE, mLen, nBytes) {
	  var e, m
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var nBits = -7
	  var i = isLE ? (nBytes - 1) : 0
	  var d = isLE ? -1 : 1
	  var s = buffer[offset + i]

	  i += d

	  e = s & ((1 << (-nBits)) - 1)
	  s >>= (-nBits)
	  nBits += eLen
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  m = e & ((1 << (-nBits)) - 1)
	  e >>= (-nBits)
	  nBits += mLen
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

	  if (e === 0) {
	    e = 1 - eBias
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity)
	  } else {
	    m = m + Math.pow(2, mLen)
	    e = e - eBias
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
	}

	exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c
	  var eLen = nBytes * 8 - mLen - 1
	  var eMax = (1 << eLen) - 1
	  var eBias = eMax >> 1
	  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
	  var i = isLE ? 0 : (nBytes - 1)
	  var d = isLE ? 1 : -1
	  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

	  value = Math.abs(value)

	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0
	    e = eMax
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2)
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--
	      c *= 2
	    }
	    if (e + eBias >= 1) {
	      value += rt / c
	    } else {
	      value += rt * Math.pow(2, 1 - eBias)
	    }
	    if (value * c >= 2) {
	      e++
	      c /= 2
	    }

	    if (e + eBias >= eMax) {
	      m = 0
	      e = eMax
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen)
	      e = e + eBias
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
	      e = 0
	    }
	  }

	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

	  e = (e << mLen) | m
	  eLen += mLen
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

	  buffer[offset + i - d] |= s * 128
	}


/***/ },
/* 7802 */
/***/ function(module, exports) {

	module.exports = Array.isArray || function (arr) {
	  return Object.prototype.toString.call(arr) == '[object Array]';
	};


/***/ },
/* 7803 */
/***/ function(module, exports) {

	exports.isatty = function () { return false; };

	function ReadStream() {
	  throw new Error('tty.ReadStream is not implemented');
	}
	exports.ReadStream = ReadStream;

	function WriteStream() {
	  throw new Error('tty.ReadStream is not implemented');
	}
	exports.WriteStream = WriteStream;


/***/ },
/* 7804 */
/***/ function(module, exports) {

	if (typeof Object.create === 'function') {
	  // implementation from standard node.js 'util' module
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    ctor.prototype = Object.create(superCtor.prototype, {
	      constructor: {
	        value: ctor,
	        enumerable: false,
	        writable: true,
	        configurable: true
	      }
	    });
	  };
	} else {
	  // old school shim for old browsers
	  module.exports = function inherits(ctor, superCtor) {
	    ctor.super_ = superCtor
	    var TempCtor = function () {}
	    TempCtor.prototype = superCtor.prototype
	    ctor.prototype = new TempCtor()
	    ctor.prototype.constructor = ctor
	  }
	}


/***/ },
/* 7805 */
/***/ function(module, exports) {

	module.exports = function isBuffer(arg) {
	  return arg && typeof arg === 'object'
	    && typeof arg.copy === 'function'
	    && typeof arg.fill === 'function'
	    && typeof arg.readUInt8 === 'function';
	}

/***/ },
/* 7806 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	var _lineNumbers = __webpack_require__(__webpack_module_template_argument_1__);

	var _lineNumbers2 = _interopRequireDefault(_lineNumbers);

	var _repeating = __webpack_require__(__webpack_module_template_argument_2__);

	var _repeating2 = _interopRequireDefault(_repeating);

	var _jsTokens = __webpack_require__(__webpack_module_template_argument_3__);

	var _jsTokens2 = _interopRequireDefault(_jsTokens);

	var _esutils = __webpack_require__(__webpack_module_template_argument_4__);

	var _esutils2 = _interopRequireDefault(_esutils);

	var _chalk = __webpack_require__(__webpack_module_template_argument_5__);

	var _chalk2 = _interopRequireDefault(_chalk);

	/**
	 * Chalk styles for token types.
	 */

	var defs = {
	  string: _chalk2["default"].red,
	  punctuator: _chalk2["default"].bold,
	  curly: _chalk2["default"].green,
	  parens: _chalk2["default"].blue.bold,
	  square: _chalk2["default"].yellow,
	  keyword: _chalk2["default"].cyan,
	  number: _chalk2["default"].magenta,
	  regex: _chalk2["default"].magenta,
	  comment: _chalk2["default"].grey,
	  invalid: _chalk2["default"].inverse
	};

	/**
	 * RegExp to test for newlines in terminal.
	 */

	var NEWLINE = /\r\n|[\n\r\u2028\u2029]/;

	/**
	 * Get the type of token, specifying punctuator type.
	 */

	function getTokenType(match) {
	  var token = _jsTokens2["default"].matchToToken(match);
	  if (token.type === "name" && _esutils2["default"].keyword.isReservedWordES6(token.value)) {
	    return "keyword";
	  }

	  if (token.type === "punctuator") {
	    switch (token.value) {
	      case "{":
	      case "}":
	        return "curly";
	      case "(":
	      case ")":
	        return "parens";
	      case "[":
	      case "]":
	        return "square";
	    }
	  }

	  return token.type;
	}

	/**
	 * Highlight `text`.
	 */

	function highlight(text /*: string*/) {
	  return text.replace(_jsTokens2["default"], function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    var type = getTokenType(args);
	    var colorize = defs[type];
	    if (colorize) {
	      return args[0].split(NEWLINE).map(function (str) {
	        return colorize(str);
	      }).join("\n");
	    } else {
	      return args[0];
	    }
	  });
	}

	/**
	 * Create a code frame, adding line numbers, code highlighting, and pointing to a given position.
	 */

	exports["default"] = function (rawLines /*: string*/, lineNumber /*: number*/, colNumber /*: number*/) /*: string*/ {
	  var opts /*: Object*/ = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

	  colNumber = Math.max(colNumber, 0);

	  var highlighted = opts.highlightCode && _chalk2["default"].supportsColor;
	  if (highlighted) rawLines = highlight(rawLines);

	  var lines = rawLines.split(NEWLINE);
	  var start = Math.max(lineNumber - 3, 0);
	  var end = Math.min(lines.length, lineNumber + 3);

	  if (!lineNumber && !colNumber) {
	    start = 0;
	    end = lines.length;
	  }

	  var frame = _lineNumbers2["default"](lines.slice(start, end), {
	    start: start + 1,
	    before: "  ",
	    after: " | ",
	    transform: function transform(params) {
	      if (params.number !== lineNumber) {
	        return;
	      }

	      if (colNumber) {
	        params.line += "\n" + params.before + _repeating2["default"](" ", params.width) + params.after + _repeating2["default"](" ", colNumber - 1) + "^";
	      }

	      params.before = params.before.replace(/^./, ">");
	    }
	  }).join("\n");

	  if (highlighted) {
	    return _chalk2["default"].reset(frame);
	  } else {
	    return frame;
	  }
	};

	module.exports = exports["default"];

/***/ },
/* 7807 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	/* WEBPACK VAR INJECTION */(function(process) {'use strict';
	var escapeStringRegexp = __webpack_require__(__webpack_module_template_argument_0__);
	var ansiStyles = __webpack_require__(__webpack_module_template_argument_1__);
	var stripAnsi = __webpack_require__(__webpack_module_template_argument_2__);
	var hasAnsi = __webpack_require__(__webpack_module_template_argument_3__);
	var supportsColor = __webpack_require__(__webpack_module_template_argument_4__);
	var defineProps = Object.defineProperties;
	var isSimpleWindowsTerm = process.platform === 'win32' && !/^xterm/i.test(process.env.TERM);

	function Chalk(options) {
		// detect mode if not set manually
		this.enabled = !options || options.enabled === undefined ? supportsColor : options.enabled;
	}

	// use bright blue on Windows as the normal blue color is illegible
	if (isSimpleWindowsTerm) {
		ansiStyles.blue.open = '\u001b[94m';
	}

	var styles = (function () {
		var ret = {};

		Object.keys(ansiStyles).forEach(function (key) {
			ansiStyles[key].closeRe = new RegExp(escapeStringRegexp(ansiStyles[key].close), 'g');

			ret[key] = {
				get: function () {
					return build.call(this, this._styles.concat(key));
				}
			};
		});

		return ret;
	})();

	var proto = defineProps(function chalk() {}, styles);

	function build(_styles) {
		var builder = function () {
			return applyStyle.apply(builder, arguments);
		};

		builder._styles = _styles;
		builder.enabled = this.enabled;
		// __proto__ is used because we must return a function, but there is
		// no way to create a function with a different prototype.
		/* eslint-disable no-proto */
		builder.__proto__ = proto;

		return builder;
	}

	function applyStyle() {
		// support varags, but simply cast to string in case there's only one arg
		var args = arguments;
		var argsLen = args.length;
		var str = argsLen !== 0 && String(arguments[0]);

		if (argsLen > 1) {
			// don't slice `arguments`, it prevents v8 optimizations
			for (var a = 1; a < argsLen; a++) {
				str += ' ' + args[a];
			}
		}

		if (!this.enabled || !str) {
			return str;
		}

		var nestedStyles = this._styles;
		var i = nestedStyles.length;

		// Turns out that on Windows dimmed gray text becomes invisible in cmd.exe,
		// see https://github.com/chalk/chalk/issues/58
		// If we're on Windows and we're dealing with a gray color, temporarily make 'dim' a noop.
		var originalDim = ansiStyles.dim.open;
		if (isSimpleWindowsTerm && (nestedStyles.indexOf('gray') !== -1 || nestedStyles.indexOf('grey') !== -1)) {
			ansiStyles.dim.open = '';
		}

		while (i--) {
			var code = ansiStyles[nestedStyles[i]];

			// Replace any instances already present with a re-opening code
			// otherwise only the part of the string until said closing code
			// will be colored, and the rest will simply be 'plain'.
			str = code.open + str.replace(code.closeRe, code.open) + code.close;
		}

		// Reset the original 'dim' if we changed it to work around the Windows dimmed gray issue.
		ansiStyles.dim.open = originalDim;

		return str;
	}

	function init() {
		var ret = {};

		Object.keys(styles).forEach(function (name) {
			ret[name] = {
				get: function () {
					return build.call(this, [name]);
				}
			};
		});

		return ret;
	}

	defineProps(Chalk.prototype, init());

	module.exports = new Chalk();
	module.exports.styles = ansiStyles;
	module.exports.hasColor = hasAnsi;
	module.exports.stripColor = stripAnsi;
	module.exports.supportsColor = supportsColor;

	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(5)))

/***/ },
/* 7808 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';
	var ansiRegex = __webpack_require__(__webpack_module_template_argument_0__);
	var re = new RegExp(ansiRegex().source); // remove the `g` flag
	module.exports = re.test.bind(re);


/***/ },
/* 7809 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';
	var ansiRegex = __webpack_require__(__webpack_module_template_argument_0__)();

	module.exports = function (str) {
		return typeof str === 'string' ? str.replace(ansiRegex, '') : str;
	};


/***/ },
/* 7810 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	/*
	  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/

	(function () {
	    'use strict';

	    var code = __webpack_require__(__webpack_module_template_argument_0__);

	    function isStrictModeReservedWordES6(id) {
	        switch (id) {
	        case 'implements':
	        case 'interface':
	        case 'package':
	        case 'private':
	        case 'protected':
	        case 'public':
	        case 'static':
	        case 'let':
	            return true;
	        default:
	            return false;
	        }
	    }

	    function isKeywordES5(id, strict) {
	        // yield should not be treated as keyword under non-strict mode.
	        if (!strict && id === 'yield') {
	            return false;
	        }
	        return isKeywordES6(id, strict);
	    }

	    function isKeywordES6(id, strict) {
	        if (strict && isStrictModeReservedWordES6(id)) {
	            return true;
	        }

	        switch (id.length) {
	        case 2:
	            return (id === 'if') || (id === 'in') || (id === 'do');
	        case 3:
	            return (id === 'var') || (id === 'for') || (id === 'new') || (id === 'try');
	        case 4:
	            return (id === 'this') || (id === 'else') || (id === 'case') ||
	                (id === 'void') || (id === 'with') || (id === 'enum');
	        case 5:
	            return (id === 'while') || (id === 'break') || (id === 'catch') ||
	                (id === 'throw') || (id === 'const') || (id === 'yield') ||
	                (id === 'class') || (id === 'super');
	        case 6:
	            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
	                (id === 'switch') || (id === 'export') || (id === 'import');
	        case 7:
	            return (id === 'default') || (id === 'finally') || (id === 'extends');
	        case 8:
	            return (id === 'function') || (id === 'continue') || (id === 'debugger');
	        case 10:
	            return (id === 'instanceof');
	        default:
	            return false;
	        }
	    }

	    function isReservedWordES5(id, strict) {
	        return id === 'null' || id === 'true' || id === 'false' || isKeywordES5(id, strict);
	    }

	    function isReservedWordES6(id, strict) {
	        return id === 'null' || id === 'true' || id === 'false' || isKeywordES6(id, strict);
	    }

	    function isRestrictedWord(id) {
	        return id === 'eval' || id === 'arguments';
	    }

	    function isIdentifierNameES5(id) {
	        var i, iz, ch;

	        if (id.length === 0) { return false; }

	        ch = id.charCodeAt(0);
	        if (!code.isIdentifierStartES5(ch)) {
	            return false;
	        }

	        for (i = 1, iz = id.length; i < iz; ++i) {
	            ch = id.charCodeAt(i);
	            if (!code.isIdentifierPartES5(ch)) {
	                return false;
	            }
	        }
	        return true;
	    }

	    function decodeUtf16(lead, trail) {
	        return (lead - 0xD800) * 0x400 + (trail - 0xDC00) + 0x10000;
	    }

	    function isIdentifierNameES6(id) {
	        var i, iz, ch, lowCh, check;

	        if (id.length === 0) { return false; }

	        check = code.isIdentifierStartES6;
	        for (i = 0, iz = id.length; i < iz; ++i) {
	            ch = id.charCodeAt(i);
	            if (0xD800 <= ch && ch <= 0xDBFF) {
	                ++i;
	                if (i >= iz) { return false; }
	                lowCh = id.charCodeAt(i);
	                if (!(0xDC00 <= lowCh && lowCh <= 0xDFFF)) {
	                    return false;
	                }
	                ch = decodeUtf16(ch, lowCh);
	            }
	            if (!check(ch)) {
	                return false;
	            }
	            check = code.isIdentifierPartES6;
	        }
	        return true;
	    }

	    function isIdentifierES5(id, strict) {
	        return isIdentifierNameES5(id) && !isReservedWordES5(id, strict);
	    }

	    function isIdentifierES6(id, strict) {
	        return isIdentifierNameES6(id) && !isReservedWordES6(id, strict);
	    }

	    module.exports = {
	        isKeywordES5: isKeywordES5,
	        isKeywordES6: isKeywordES6,
	        isReservedWordES5: isReservedWordES5,
	        isReservedWordES6: isReservedWordES6,
	        isRestrictedWord: isRestrictedWord,
	        isIdentifierNameES5: isIdentifierNameES5,
	        isIdentifierNameES6: isIdentifierNameES6,
	        isIdentifierES5: isIdentifierES5,
	        isIdentifierES6: isIdentifierES6
	    };
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 7811 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	/*
	  Copyright (C) 2013 Yusuke Suzuki <utatane.tea@gmail.com>

	  Redistribution and use in source and binary forms, with or without
	  modification, are permitted provided that the following conditions are met:

	    * Redistributions of source code must retain the above copyright
	      notice, this list of conditions and the following disclaimer.
	    * Redistributions in binary form must reproduce the above copyright
	      notice, this list of conditions and the following disclaimer in the
	      documentation and/or other materials provided with the distribution.

	  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	*/


	(function () {
	    'use strict';

	    exports.ast = __webpack_require__(__webpack_module_template_argument_0__);
	    exports.code = __webpack_require__(__webpack_module_template_argument_1__);
	    exports.keyword = __webpack_require__(__webpack_module_template_argument_2__);
	}());
	/* vim: set sw=4 ts=4 et tw=80 : */


/***/ },
/* 7812 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// Copyright 2014, 2015 Simon Lydell
	// X11 (“MIT”) Licensed. (See LICENSE.)

	var leftPad = __webpack_require__(__webpack_module_template_argument_0__)

	function get(options, key, defaultValue) {
	  return (key in options ? options[key] : defaultValue)
	}

	function lineNumbers(code, options) {
	  var getOption = get.bind(null, options || {})
	  var transform = getOption("transform", Function.prototype)
	  var padding   = getOption("padding", " ")
	  var before    = getOption("before", " ")
	  var after     = getOption("after", " | ")
	  var start     = getOption("start", 1)
	  var isArray   = Array.isArray(code)
	  var lines     = (isArray ? code : code.split("\n"))
	  var end       = start + lines.length - 1
	  var width     = String(end).length
	  var numbered  = lines.map(function(line, index) {
	    var number  = start + index
	    var params  = {before: before, number: number, width: width, after: after,
	                   line: line}
	    transform(params)
	    return params.before + leftPad(params.number, width, padding) +
	           params.after + params.line
	  })
	  return (isArray ? numbered : numbered.join("\n"))
	}

	module.exports = lineNumbers


/***/ },
/* 7813 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';
	var isFinite = __webpack_require__(__webpack_module_template_argument_0__);

	module.exports = function (str, n) {
		if (typeof str !== 'string') {
			throw new TypeError('Expected a string as the first argument');
		}

		if (n < 0 || !isFinite(n)) {
			throw new TypeError('Expected a finite positive number');
		}

		var ret = '';

		do {
			if (n & 1) {
				ret += str;
			}

			str += str;
		} while (n = n >> 1);

		return ret;
	};


/***/ },
/* 7814 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	'use strict';
	var numberIsNan = __webpack_require__(__webpack_module_template_argument_0__);

	module.exports = Number.isFinite || function (val) {
		return !(typeof val !== 'number' || numberIsNan(val) || val === Infinity || val === -Infinity);
	};


/***/ },
/* 7815 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	exports.get = get;
	exports.parseArgs = parseArgs;

	var _util = __webpack_require__(50);

	var util = _interopRequireWildcard(_util);

	/**
	 * Mapping of messages to be used in Babel.
	 * Messages can include $0-style placeholders.
	 */

	var MESSAGES = {
	  tailCallReassignmentDeopt: "Function reference has been reassigned, so it will probably be dereferenced, therefore we can't optimise this with confidence",
	  classesIllegalBareSuper: "Illegal use of bare super",
	  classesIllegalSuperCall: "Direct super call is illegal in non-constructor, use super.$1() instead",
	  scopeDuplicateDeclaration: "Duplicate declaration $1",
	  settersNoRest: "Setters aren't allowed to have a rest",
	  noAssignmentsInForHead: "No assignments allowed in for-in/of head",
	  expectedMemberExpressionOrIdentifier: "Expected type MemberExpression or Identifier",
	  invalidParentForThisNode: "We don't know how to handle this node within the current parent - please open an issue",
	  readOnly: "$1 is read-only",
	  unknownForHead: "Unknown node type $1 in ForStatement",
	  didYouMean: "Did you mean $1?",
	  codeGeneratorDeopt: "Note: The code generator has deoptimised the styling of $1 as it exceeds the max of $2.",
	  missingTemplatesDirectory: "no templates directory - this is most likely the result of a broken `npm publish`. Please report to https://github.com/babel/babel/issues",
	  unsupportedOutputType: "Unsupported output type $1",
	  illegalMethodName: "Illegal method name $1",
	  lostTrackNodePath: "We lost track of this node's position, likely because the AST was directly manipulated",

	  modulesIllegalExportName: "Illegal export $1",
	  modulesDuplicateDeclarations: "Duplicate module declarations with the same source but in different scopes",

	  undeclaredVariable: "Reference to undeclared variable $1",
	  undeclaredVariableType: "Referencing a type alias outside of a type annotation",
	  undeclaredVariableSuggestion: "Reference to undeclared variable $1 - did you mean $2?",

	  traverseNeedsParent: "You must pass a scope and parentPath unless traversing a Program/File got a $1 node",
	  traverseVerifyRootFunction: "You passed `traverse()` a function when it expected a visitor object, are you sure you didn't mean `{ enter: Function }`?",
	  traverseVerifyVisitorProperty: "You passed `traverse()` a visitor object with the property $1 that has the invalid property $2",
	  traverseVerifyNodeType: "You gave us a visitor for the node type $1 but it's not a valid type",

	  pluginNotObject: "Plugin $2 specified in $1 was expected to return an object when invoked but returned $3",
	  pluginNotFunction: "Plugin $2 specified in $1 was expected to return a function but returned $3",
	  pluginUnknown: "Unknown plugin $1 specified in $2 at $3, attempted to resolve relative to $4",
	  pluginInvalidProperty: "Plugin $2 specified in $1 provided an invalid property of $3"
	};

	exports.MESSAGES = MESSAGES;
	/**
	 * Get a message with $0 placeholders replaced by arguments.
	 */

	function get(key /*: string*/) /*: string*/ {
	  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	    args[_key - 1] = arguments[_key];
	  }

	  var msg = MESSAGES[key];
	  if (!msg) throw new ReferenceError("Unknown message " + JSON.stringify(key));

	  // stringify args
	  args = parseArgs(args);

	  // replace $0 placeholders with args
	  return msg.replace(/\$(\d+)/g, function (str, i) {
	    return args[i - 1];
	  });
	}

	/**
	 * Stingify arguments to be used inside messages.
	 */

	function parseArgs(args /*: Array<any>*/) /*: Array<string>*/ {
	  return args.map(function (val) {
	    if (val != null && val.inspect) {
	      return val.inspect();
	    } else {
	      try {
	        return JSON.stringify(val) || val + "";
	      } catch (e) {
	        return util.inspect(val);
	      }
	    }
	  });
	}

/***/ },
/* 7816 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7817 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7818 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7819 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7820 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7821 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7822 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7823 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7824 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7825 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7826 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = { "default": __webpack_require__(__webpack_module_template_argument_0__), __esModule: true };

/***/ },
/* 7827 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	"use strict";

	var _Object$getOwnPropertyNames = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _Object$getOwnPropertyDescriptor = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _Object$defineProperty = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports["default"] = function (obj, defaults) {
	  var keys = _Object$getOwnPropertyNames(defaults);

	  for (var i = 0; i < keys.length; i++) {
	    var key = keys[i];

	    var value = _Object$getOwnPropertyDescriptor(defaults, key);

	    if (value && value.configurable && obj[key] === undefined) {
	      _Object$defineProperty(obj, key, value);
	    }
	  }

	  return obj;
	};

	exports.__esModule = true;

/***/ },
/* 7828 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	"use strict";

	var _Object$create = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _Object$setPrototypeOf = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports["default"] = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
	  }

	  subClass.prototype = _Object$create(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _Object$setPrototypeOf ? _Object$setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
	};

	exports.__esModule = true;

/***/ },
/* 7829 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	__webpack_require__(__webpack_module_template_argument_1__);
	module.exports = __webpack_require__(__webpack_module_template_argument_2__);

/***/ },
/* 7830 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	module.exports = 0x1fffffffffffff;

/***/ },
/* 7831 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var $ = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = function create(P, D){
	  return $.create(P, D);
	};

/***/ },
/* 7832 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var $ = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = function defineProperty(it, key, desc){
	  return $.setDesc(it, key, desc);
	};

/***/ },
/* 7833 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var $ = __webpack_require__(__webpack_module_template_argument_0__);
	__webpack_require__(__webpack_module_template_argument_1__);
	module.exports = function getOwnPropertyDescriptor(it, key){
	  return $.getDesc(it, key);
	};

/***/ },
/* 7834 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var $ = __webpack_require__(__webpack_module_template_argument_0__);
	__webpack_require__(__webpack_module_template_argument_1__);
	module.exports = function getOwnPropertyNames(it){
	  return $.getNames(it);
	};

/***/ },
/* 7835 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	module.exports = __webpack_require__(__webpack_module_template_argument_1__).Object.getOwnPropertySymbols;

/***/ },
/* 7836 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	module.exports = __webpack_require__(__webpack_module_template_argument_1__).Object.keys;

/***/ },
/* 7837 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	module.exports = __webpack_require__(__webpack_module_template_argument_1__).Object.setPrototypeOf;

/***/ },
/* 7838 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	module.exports = __webpack_require__(__webpack_module_template_argument_1__).Symbol['for'];

/***/ },
/* 7839 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	__webpack_require__(__webpack_module_template_argument_1__);
	module.exports = __webpack_require__(__webpack_module_template_argument_2__).Symbol;

/***/ },
/* 7840 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObject = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = function(it){
	  if(!isObject(it))throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 7841 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// getting tag from 19.1.3.6 Object.prototype.toString()
	var cof = __webpack_require__(__webpack_module_template_argument_0__)
	  , TAG = __webpack_require__(__webpack_module_template_argument_1__)('toStringTag')
	  // ES3 wrong here
	  , ARG = cof(function(){ return arguments; }()) == 'Arguments';

	module.exports = function(it){
	  var O, T, B;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (T = (O = Object(it))[TAG]) == 'string' ? T
	    // builtinTag case
	    : ARG ? cof(O)
	    // ES3 arguments fallback
	    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;
	};

/***/ },
/* 7842 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// optional / simple context binding
	var aFunction = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = function(fn, that, length){
	  aFunction(fn);
	  if(that === undefined)return fn;
	  switch(length){
	    case 1: return function(a){
	      return fn.call(that, a);
	    };
	    case 2: return function(a, b){
	      return fn.call(that, a, b);
	    };
	    case 3: return function(a, b, c){
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function(/* ...args */){
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 7843 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(__webpack_module_template_argument_0__)(function(){
	  return Object.defineProperty({}, 'a', {get: function(){ return 7; }}).a != 7;
	});

/***/ },
/* 7844 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// all enumerable object keys, includes symbols
	var $ = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = function(it){
	  var keys       = $.getKeys(it)
	    , getSymbols = $.getSymbols;
	  if(getSymbols){
	    var symbols = getSymbols(it)
	      , isEnum  = $.isEnum
	      , i       = 0
	      , key;
	    while(symbols.length > i)if(isEnum.call(it, key = symbols[i++]))keys.push(key);
	  }
	  return keys;
	};

/***/ },
/* 7845 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var global    = __webpack_require__(__webpack_module_template_argument_0__)
	  , core      = __webpack_require__(__webpack_module_template_argument_1__)
	  , ctx       = __webpack_require__(__webpack_module_template_argument_2__)
	  , PROTOTYPE = 'prototype';

	var $export = function(type, name, source){
	  var IS_FORCED = type & $export.F
	    , IS_GLOBAL = type & $export.G
	    , IS_STATIC = type & $export.S
	    , IS_PROTO  = type & $export.P
	    , IS_BIND   = type & $export.B
	    , IS_WRAP   = type & $export.W
	    , exports   = IS_GLOBAL ? core : core[name] || (core[name] = {})
	    , target    = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE]
	    , key, own, out;
	  if(IS_GLOBAL)source = name;
	  for(key in source){
	    // contains in native
	    own = !IS_FORCED && target && key in target;
	    if(own && key in exports)continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? (function(C){
	      var F = function(param){
	        return this instanceof C ? new C(param) : C(param);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	    // make static versions for prototype methods
	    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    if(IS_PROTO)(exports[PROTOTYPE] || (exports[PROTOTYPE] = {}))[key] = out;
	  }
	};
	// type bitmap
	$export.F = 1;  // forced
	$export.G = 2;  // global
	$export.S = 4;  // static
	$export.P = 8;  // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	module.exports = $export;

/***/ },
/* 7846 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(__webpack_module_template_argument_0__)
	  , getNames  = __webpack_require__(__webpack_module_template_argument_1__).getNames
	  , toString  = {}.toString;

	var windowNames = typeof window == 'object' && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function(it){
	  try {
	    return getNames(it);
	  } catch(e){
	    return windowNames.slice();
	  }
	};

	module.exports.get = function getOwnPropertyNames(it){
	  if(windowNames && toString.call(it) == '[object Window]')return getWindowNames(it);
	  return getNames(toIObject(it));
	};

/***/ },
/* 7847 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var $          = __webpack_require__(__webpack_module_template_argument_0__)
	  , createDesc = __webpack_require__(__webpack_module_template_argument_1__);
	module.exports = __webpack_require__(__webpack_module_template_argument_2__) ? function(object, key, value){
	  return $.setDesc(object, key, createDesc(1, value));
	} : function(object, key, value){
	  object[key] = value;
	  return object;
	};

/***/ },
/* 7848 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function(it){
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 7849 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = Array.isArray || function(arg){
	  return cof(arg) == 'Array';
	};

/***/ },
/* 7850 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	'use strict';
	var $              = __webpack_require__(__webpack_module_template_argument_0__)
	  , descriptor     = __webpack_require__(__webpack_module_template_argument_1__)
	  , setToStringTag = __webpack_require__(__webpack_module_template_argument_2__)
	  , IteratorPrototype = {};

	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(__webpack_module_template_argument_3__)(IteratorPrototype, __webpack_require__(__webpack_module_template_argument_4__)('iterator'), function(){ return this; });

	module.exports = function(Constructor, NAME, next){
	  Constructor.prototype = $.create(IteratorPrototype, {next: descriptor(1, next)});
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 7851 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__) {

	'use strict';
	var LIBRARY        = __webpack_require__(__webpack_module_template_argument_0__)
	  , $export        = __webpack_require__(__webpack_module_template_argument_1__)
	  , redefine       = __webpack_require__(__webpack_module_template_argument_2__)
	  , hide           = __webpack_require__(__webpack_module_template_argument_3__)
	  , has            = __webpack_require__(__webpack_module_template_argument_4__)
	  , Iterators      = __webpack_require__(__webpack_module_template_argument_5__)
	  , $iterCreate    = __webpack_require__(__webpack_module_template_argument_6__)
	  , setToStringTag = __webpack_require__(__webpack_module_template_argument_7__)
	  , getProto       = __webpack_require__(__webpack_module_template_argument_8__).getProto
	  , ITERATOR       = __webpack_require__(__webpack_module_template_argument_9__)('iterator')
	  , BUGGY          = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	  , FF_ITERATOR    = '@@iterator'
	  , KEYS           = 'keys'
	  , VALUES         = 'values';

	var returnThis = function(){ return this; };

	module.exports = function(Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED){
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function(kind){
	    if(!BUGGY && kind in proto)return proto[kind];
	    switch(kind){
	      case KEYS: return function keys(){ return new Constructor(this, kind); };
	      case VALUES: return function values(){ return new Constructor(this, kind); };
	    } return function entries(){ return new Constructor(this, kind); };
	  };
	  var TAG        = NAME + ' Iterator'
	    , DEF_VALUES = DEFAULT == VALUES
	    , VALUES_BUG = false
	    , proto      = Base.prototype
	    , $native    = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT]
	    , $default   = $native || getMethod(DEFAULT)
	    , methods, key;
	  // Fix native
	  if($native){
	    var IteratorPrototype = getProto($default.call(new Base));
	    // Set @@toStringTag to native iterators
	    setToStringTag(IteratorPrototype, TAG, true);
	    // FF fix
	    if(!LIBRARY && has(proto, FF_ITERATOR))hide(IteratorPrototype, ITERATOR, returnThis);
	    // fix Array#{values, @@iterator}.name in V8 / FF
	    if(DEF_VALUES && $native.name !== VALUES){
	      VALUES_BUG = true;
	      $default = function values(){ return $native.call(this); };
	    }
	  }
	  // Define iterator
	  if((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])){
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG]  = returnThis;
	  if(DEFAULT){
	    methods = {
	      values:  DEF_VALUES  ? $default : getMethod(VALUES),
	      keys:    IS_SET      ? $default : getMethod(KEYS),
	      entries: !DEF_VALUES ? $default : getMethod('entries')
	    };
	    if(FORCED)for(key in methods){
	      if(!(key in proto))redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 7852 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var $         = __webpack_require__(__webpack_module_template_argument_0__)
	  , toIObject = __webpack_require__(__webpack_module_template_argument_1__);
	module.exports = function(object, el){
	  var O      = toIObject(object)
	    , keys   = $.getKeys(O)
	    , length = keys.length
	    , index  = 0
	    , key;
	  while(length > index)if(O[key = keys[index++]] === el)return key;
	};

/***/ },
/* 7853 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	// most Object methods by ES6 should accept primitives
	var $export = __webpack_require__(__webpack_module_template_argument_0__)
	  , core    = __webpack_require__(__webpack_module_template_argument_1__)
	  , fails   = __webpack_require__(__webpack_module_template_argument_2__);
	module.exports = function(KEY, exec){
	  var fn  = (core.Object || {})[KEY] || Object[KEY]
	    , exp = {};
	  exp[KEY] = exec(fn);
	  $export($export.S + $export.F * fails(function(){ fn(1); }), 'Object', exp);
	};

/***/ },
/* 7854 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = __webpack_require__(__webpack_module_template_argument_0__);

/***/ },
/* 7855 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var getDesc  = __webpack_require__(__webpack_module_template_argument_0__).getDesc
	  , isObject = __webpack_require__(__webpack_module_template_argument_1__)
	  , anObject = __webpack_require__(__webpack_module_template_argument_2__);
	var check = function(O, proto){
	  anObject(O);
	  if(!isObject(proto) && proto !== null)throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	    function(test, buggy, set){
	      try {
	        set = __webpack_require__(__webpack_module_template_argument_3__)(Function.call, getDesc(Object.prototype, '__proto__').set, 2);
	        set(test, []);
	        buggy = !(test instanceof Array);
	      } catch(e){ buggy = true; }
	      return function setPrototypeOf(O, proto){
	        check(O, proto);
	        if(buggy)O.__proto__ = proto;
	        else set(O, proto);
	        return O;
	      };
	    }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 7856 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var def = __webpack_require__(__webpack_module_template_argument_0__).setDesc
	  , has = __webpack_require__(__webpack_module_template_argument_1__)
	  , TAG = __webpack_require__(__webpack_module_template_argument_2__)('toStringTag');

	module.exports = function(it, tag, stat){
	  if(it && !has(it = stat ? it : it.prototype, TAG))def(it, TAG, {configurable: true, value: tag});
	};

/***/ },
/* 7857 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var global = __webpack_require__(__webpack_module_template_argument_0__)
	  , SHARED = '__core-js_shared__'
	  , store  = global[SHARED] || (global[SHARED] = {});
	module.exports = function(key){
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 7858 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var toInteger = __webpack_require__(__webpack_module_template_argument_0__)
	  , defined   = __webpack_require__(__webpack_module_template_argument_1__);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function(TO_STRING){
	  return function(that, pos){
	    var s = String(defined(that))
	      , i = toInteger(pos)
	      , l = s.length
	      , a, b;
	    if(i < 0 || i >= l)return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff
	      ? TO_STRING ? s.charAt(i) : a
	      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 7859 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(__webpack_module_template_argument_0__)
	  , defined = __webpack_require__(__webpack_module_template_argument_1__);
	module.exports = function(it){
	  return IObject(defined(it));
	};

/***/ },
/* 7860 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(__webpack_module_template_argument_0__);
	module.exports = function(it){
	  return Object(defined(it));
	};

/***/ },
/* 7861 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var store  = __webpack_require__(__webpack_module_template_argument_0__)('wks')
	  , uid    = __webpack_require__(__webpack_module_template_argument_1__)
	  , Symbol = __webpack_require__(__webpack_module_template_argument_2__).Symbol;
	module.exports = function(name){
	  return store[name] || (store[name] =
	    Symbol && Symbol[name] || (Symbol || uid)('Symbol.' + name));
	};

/***/ },
/* 7862 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	var classof   = __webpack_require__(__webpack_module_template_argument_0__)
	  , ITERATOR  = __webpack_require__(__webpack_module_template_argument_1__)('iterator')
	  , Iterators = __webpack_require__(__webpack_module_template_argument_2__);
	module.exports = __webpack_require__(__webpack_module_template_argument_3__).getIteratorMethod = function(it){
	  if(it != undefined)return it[ITERATOR]
	    || it['@@iterator']
	    || Iterators[classof(it)];
	};

/***/ },
/* 7863 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var anObject = __webpack_require__(__webpack_module_template_argument_0__)
	  , get      = __webpack_require__(__webpack_module_template_argument_1__);
	module.exports = __webpack_require__(__webpack_module_template_argument_2__).getIterator = function(it){
	  var iterFn = get(it);
	  if(typeof iterFn != 'function')throw TypeError(it + ' is not iterable!');
	  return anObject(iterFn.call(it));
	};

/***/ },
/* 7864 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	'use strict';
	var addToUnscopables = __webpack_require__(__webpack_module_template_argument_0__)
	  , step             = __webpack_require__(__webpack_module_template_argument_1__)
	  , Iterators        = __webpack_require__(__webpack_module_template_argument_2__)
	  , toIObject        = __webpack_require__(__webpack_module_template_argument_3__);

	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(__webpack_module_template_argument_4__)(Array, 'Array', function(iterated, kind){
	  this._t = toIObject(iterated); // target
	  this._i = 0;                   // next index
	  this._k = kind;                // kind
	// 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , kind  = this._k
	    , index = this._i++;
	  if(!O || index >= O.length){
	    this._t = undefined;
	    return step(1);
	  }
	  if(kind == 'keys'  )return step(0, index);
	  if(kind == 'values')return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;

	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 7865 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// 20.1.2.6 Number.MAX_SAFE_INTEGER
	var $export = __webpack_require__(__webpack_module_template_argument_0__);

	$export($export.S, 'Number', {MAX_SAFE_INTEGER: 0x1fffffffffffff});

/***/ },
/* 7866 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	var toIObject = __webpack_require__(__webpack_module_template_argument_0__);

	__webpack_require__(__webpack_module_template_argument_1__)('getOwnPropertyDescriptor', function($getOwnPropertyDescriptor){
	  return function getOwnPropertyDescriptor(it, key){
	    return $getOwnPropertyDescriptor(toIObject(it), key);
	  };
	});

/***/ },
/* 7867 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// 19.1.2.7 Object.getOwnPropertyNames(O)
	__webpack_require__(__webpack_module_template_argument_0__)('getOwnPropertyNames', function(){
	  return __webpack_require__(__webpack_module_template_argument_1__).get;
	});

/***/ },
/* 7868 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// 19.1.2.14 Object.keys(O)
	var toObject = __webpack_require__(__webpack_module_template_argument_0__);

	__webpack_require__(__webpack_module_template_argument_1__)('keys', function($keys){
	  return function keys(it){
	    return $keys(toObject(it));
	  };
	});

/***/ },
/* 7869 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(__webpack_module_template_argument_0__);
	$export($export.S, 'Object', {setPrototypeOf: __webpack_require__(__webpack_module_template_argument_1__).set});

/***/ },
/* 7870 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	'use strict';
	var $at  = __webpack_require__(__webpack_module_template_argument_0__)(true);

	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(__webpack_module_template_argument_1__)(String, 'String', function(iterated){
	  this._t = String(iterated); // target
	  this._i = 0;                // next index
	// 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function(){
	  var O     = this._t
	    , index = this._i
	    , point;
	  if(index >= O.length)return {value: undefined, done: true};
	  point = $at(O, index);
	  this._i += point.length;
	  return {value: point, done: false};
	});

/***/ },
/* 7871 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__, __webpack_module_template_argument_10__, __webpack_module_template_argument_11__, __webpack_module_template_argument_12__, __webpack_module_template_argument_13__, __webpack_module_template_argument_14__, __webpack_module_template_argument_15__, __webpack_module_template_argument_16__, __webpack_module_template_argument_17__, __webpack_module_template_argument_18__) {

	'use strict';
	// ECMAScript 6 symbols shim
	var $              = __webpack_require__(__webpack_module_template_argument_0__)
	  , global         = __webpack_require__(__webpack_module_template_argument_1__)
	  , has            = __webpack_require__(__webpack_module_template_argument_2__)
	  , DESCRIPTORS    = __webpack_require__(__webpack_module_template_argument_3__)
	  , $export        = __webpack_require__(__webpack_module_template_argument_4__)
	  , redefine       = __webpack_require__(__webpack_module_template_argument_5__)
	  , $fails         = __webpack_require__(__webpack_module_template_argument_6__)
	  , shared         = __webpack_require__(__webpack_module_template_argument_7__)
	  , setToStringTag = __webpack_require__(__webpack_module_template_argument_8__)
	  , uid            = __webpack_require__(__webpack_module_template_argument_9__)
	  , wks            = __webpack_require__(__webpack_module_template_argument_10__)
	  , keyOf          = __webpack_require__(__webpack_module_template_argument_11__)
	  , $names         = __webpack_require__(__webpack_module_template_argument_12__)
	  , enumKeys       = __webpack_require__(__webpack_module_template_argument_13__)
	  , isArray        = __webpack_require__(__webpack_module_template_argument_14__)
	  , anObject       = __webpack_require__(__webpack_module_template_argument_15__)
	  , toIObject      = __webpack_require__(__webpack_module_template_argument_16__)
	  , createDesc     = __webpack_require__(__webpack_module_template_argument_17__)
	  , getDesc        = $.getDesc
	  , setDesc        = $.setDesc
	  , _create        = $.create
	  , getNames       = $names.get
	  , $Symbol        = global.Symbol
	  , $JSON          = global.JSON
	  , _stringify     = $JSON && $JSON.stringify
	  , setter         = false
	  , HIDDEN         = wks('_hidden')
	  , isEnum         = $.isEnum
	  , SymbolRegistry = shared('symbol-registry')
	  , AllSymbols     = shared('symbols')
	  , useNative      = typeof $Symbol == 'function'
	  , ObjectProto    = Object.prototype;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function(){
	  return _create(setDesc({}, 'a', {
	    get: function(){ return setDesc(this, 'a', {value: 7}).a; }
	  })).a != 7;
	}) ? function(it, key, D){
	  var protoDesc = getDesc(ObjectProto, key);
	  if(protoDesc)delete ObjectProto[key];
	  setDesc(it, key, D);
	  if(protoDesc && it !== ObjectProto)setDesc(ObjectProto, key, protoDesc);
	} : setDesc;

	var wrap = function(tag){
	  var sym = AllSymbols[tag] = _create($Symbol.prototype);
	  sym._k = tag;
	  DESCRIPTORS && setter && setSymbolDesc(ObjectProto, tag, {
	    configurable: true,
	    set: function(value){
	      if(has(this, HIDDEN) && has(this[HIDDEN], tag))this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    }
	  });
	  return sym;
	};

	var isSymbol = function(it){
	  return typeof it == 'symbol';
	};

	var $defineProperty = function defineProperty(it, key, D){
	  if(D && has(AllSymbols, key)){
	    if(!D.enumerable){
	      if(!has(it, HIDDEN))setDesc(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if(has(it, HIDDEN) && it[HIDDEN][key])it[HIDDEN][key] = false;
	      D = _create(D, {enumerable: createDesc(0, false)});
	    } return setSymbolDesc(it, key, D);
	  } return setDesc(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P){
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P))
	    , i    = 0
	    , l = keys.length
	    , key;
	  while(l > i)$defineProperty(it, key = keys[i++], P[key]);
	  return it;
	};
	var $create = function create(it, P){
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key){
	  var E = isEnum.call(this, key);
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key]
	    ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key){
	  var D = getDesc(it = toIObject(it), key);
	  if(D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key]))D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it){
	  var names  = getNames(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(!has(AllSymbols, key = names[i++]) && key != HIDDEN)result.push(key);
	  return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it){
	  var names  = getNames(toIObject(it))
	    , result = []
	    , i      = 0
	    , key;
	  while(names.length > i)if(has(AllSymbols, key = names[i++]))result.push(AllSymbols[key]);
	  return result;
	};
	var $stringify = function stringify(it){
	  if(it === undefined || isSymbol(it))return; // IE8 returns string on undefined
	  var args = [it]
	    , i    = 1
	    , $$   = arguments
	    , replacer, $replacer;
	  while($$.length > i)args.push($$[i++]);
	  replacer = args[1];
	  if(typeof replacer == 'function')$replacer = replacer;
	  if($replacer || !isArray(replacer))replacer = function(key, value){
	    if($replacer)value = $replacer.call(this, key, value);
	    if(!isSymbol(value))return value;
	  };
	  args[1] = replacer;
	  return _stringify.apply($JSON, args);
	};
	var buggyJSON = $fails(function(){
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({a: S}) != '{}' || _stringify(Object(S)) != '{}';
	});

	// 19.4.1.1 Symbol([description])
	if(!useNative){
	  $Symbol = function Symbol(){
	    if(isSymbol(this))throw TypeError('Symbol is not a constructor');
	    return wrap(uid(arguments.length > 0 ? arguments[0] : undefined));
	  };
	  redefine($Symbol.prototype, 'toString', function toString(){
	    return this._k;
	  });

	  isSymbol = function(it){
	    return it instanceof $Symbol;
	  };

	  $.create     = $create;
	  $.isEnum     = $propertyIsEnumerable;
	  $.getDesc    = $getOwnPropertyDescriptor;
	  $.setDesc    = $defineProperty;
	  $.setDescs   = $defineProperties;
	  $.getNames   = $names.get = $getOwnPropertyNames;
	  $.getSymbols = $getOwnPropertySymbols;

	  if(DESCRIPTORS && !__webpack_require__(__webpack_module_template_argument_18__)){
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	}

	var symbolStatics = {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function(key){
	    return has(SymbolRegistry, key += '')
	      ? SymbolRegistry[key]
	      : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key){
	    return keyOf(SymbolRegistry, key);
	  },
	  useSetter: function(){ setter = true; },
	  useSimple: function(){ setter = false; }
	};
	// 19.4.2.2 Symbol.hasInstance
	// 19.4.2.3 Symbol.isConcatSpreadable
	// 19.4.2.4 Symbol.iterator
	// 19.4.2.6 Symbol.match
	// 19.4.2.8 Symbol.replace
	// 19.4.2.9 Symbol.search
	// 19.4.2.10 Symbol.species
	// 19.4.2.11 Symbol.split
	// 19.4.2.12 Symbol.toPrimitive
	// 19.4.2.13 Symbol.toStringTag
	// 19.4.2.14 Symbol.unscopables
	$.each.call((
	  'hasInstance,isConcatSpreadable,iterator,match,replace,search,' +
	  'species,split,toPrimitive,toStringTag,unscopables'
	).split(','), function(it){
	  var sym = wks(it);
	  symbolStatics[it] = useNative ? sym : wrap(sym);
	});

	setter = true;

	$export($export.G + $export.W, {Symbol: $Symbol});

	$export($export.S, 'Symbol', symbolStatics);

	$export($export.S + $export.F * !useNative, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!useNative || buggyJSON), 'JSON', {stringify: $stringify});

	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 7872 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	__webpack_require__(__webpack_module_template_argument_0__);
	var Iterators = __webpack_require__(__webpack_module_template_argument_1__);
	Iterators.NodeList = Iterators.HTMLCollection = Iterators.Array;

/***/ },
/* 7873 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__) {

	"use strict";

	var _Symbol = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;

	var _lodashLangCloneDeep = __webpack_require__(__webpack_module_template_argument_3__);

	var _lodashLangCloneDeep2 = _interopRequireDefault(_lodashLangCloneDeep);

	var _lodashObjectHas = __webpack_require__(__webpack_module_template_argument_4__);

	var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);

	var _babelTraverse = __webpack_require__(__webpack_module_template_argument_5__);

	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

	var _babylon = __webpack_require__(__webpack_module_template_argument_6__);

	var babylon = _interopRequireWildcard(_babylon);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_7__);

	var t = _interopRequireWildcard(_babelTypes);

	var FROM_TEMPLATE = "_fromTemplate"; //Symbol(); // todo: probably wont get copied over
	var TEMPLATE_SKIP = _Symbol();

	exports["default"] = function (code /*: string*/) /*: Function*/ {
	  // since we lazy parse the template, we get the current stack so we have the
	  // original stack to append if it errors when parsing
	  var stack = undefined;
	  try {
	    // error stack gets populated in IE only on throw (https://msdn.microsoft.com/en-us/library/hh699850(v=vs.94).aspx)
	    throw new Error();
	  } catch (error) {
	    stack = error.stack.split("\n").slice(1).join("\n");
	  }

	  var _getAst = function getAst() {
	    var ast = undefined;

	    try {
	      ast = babylon.parse(code, {
	        allowReturnOutsideFunction: true,
	        allowSuperOutsideMethod: true
	      });

	      ast = _babelTraverse2["default"].removeProperties(ast);

	      _babelTraverse2["default"].cheap(ast, function (node) {
	        node[FROM_TEMPLATE] = true;
	      });
	    } catch (err) {
	      err.stack = err.stack + "from\n" + stack;
	      throw err;
	    }

	    _getAst = function () {
	      return ast;
	    };

	    return ast;
	  };

	  return function () {
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	      args[_key] = arguments[_key];
	    }

	    return useTemplate(_getAst(), args);
	  };
	};

	function useTemplate(ast, nodes /*:: ?: Array<Object>*/) {
	  ast = _lodashLangCloneDeep2["default"](ast);
	  var _ast = ast;
	  var program = _ast.program;

	  if (nodes.length) {
	    _babelTraverse2["default"](ast, templateVisitor, null, nodes);
	  }

	  if (program.body.length > 1) {
	    return program.body;
	  } else {
	    return program.body[0];
	  }
	}

	var templateVisitor = {
	  // 360
	  noScope: true,

	  enter: function enter(path, args) {
	    var node = path.node;

	    if (node[TEMPLATE_SKIP]) return path.skip();

	    if (t.isExpressionStatement(node)) {
	      node = node.expression;
	    }

	    var replacement = undefined;

	    if (t.isIdentifier(node) && node[FROM_TEMPLATE]) {
	      if (_lodashObjectHas2["default"](args[0], node.name)) {
	        replacement = args[0][node.name];
	      } else if (node.name[0] === "$") {
	        var i = +node.name.slice(1);
	        if (args[i]) replacement = args[i];
	      }
	    }

	    if (replacement === null) {
	      path.remove();
	    }

	    if (replacement) {
	      replacement[TEMPLATE_SKIP] = true;
	      path.replaceInline(replacement);
	    }
	  },

	  exit: function exit(_ref) {
	    var node = _ref.node;

	    _babelTraverse2["default"].clearNode(node);
	  }
	};
	module.exports = exports["default"];

/***/ },
/* 7874 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _getIterator = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	exports.__esModule = true;

	var _path = __webpack_require__(__webpack_module_template_argument_4__);

	var _path2 = _interopRequireDefault(_path);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_5__);

	var t = _interopRequireWildcard(_babelTypes);

	var testing = ("production") === "test";

	var TraversalContext = (function () {
	  function TraversalContext(scope, opts, state, parentPath) {
	    _classCallCheck(this, TraversalContext);

	    this.parentPath = parentPath;
	    this.scope = scope;
	    this.state = state;
	    this.opts = opts;
	  }

	  /**
	   * This method does a simple check to determine whether or not we really need to attempt
	   * visit a node. This will prevent us from constructing a NodePath.
	   */

	  TraversalContext.prototype.shouldVisit = function shouldVisit(node) /*: boolean*/ {
	    var opts = this.opts;
	    if (opts.enter || opts.exit) return true;

	    // check if we have a visitor for this node
	    if (opts[node.type]) return true;

	    // check if we're going to traverse into this node
	    var keys /*: ?Array<string>*/ = t.VISITOR_KEYS[node.type];
	    if (!keys || !keys.length) return false;

	    // we need to traverse into this node so ensure that it has children to traverse into!
	    for (var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var key = _ref;

	      if (node[key]) return true;
	    }

	    return false;
	  };

	  TraversalContext.prototype.create = function create(node, obj, key, listKey) /*: NodePath*/ {
	    return _path2["default"].get({
	      parentPath: this.parentPath,
	      parent: node,
	      container: obj,
	      key: key,
	      listKey: listKey
	    });
	  };

	  TraversalContext.prototype.maybeQueue = function maybeQueue(path, notPriority /*:: ?: boolean*/) {
	    if (this.trap) {
	      throw new Error("Infinite cycle detected");
	    }

	    if (this.queue) {
	      if (notPriority) {
	        this.queue.push(path);
	      } else {
	        this.priorityQueue.push(path);
	      }
	    }
	  };

	  TraversalContext.prototype.visitMultiple = function visitMultiple(container, parent, listKey) {
	    // nothing to traverse!
	    if (container.length === 0) return false;

	    var queue = [];

	    // build up initial queue
	    for (var key = 0; key < container.length; key++) {
	      var node = container[key];
	      if (node && this.shouldVisit(node)) {
	        queue.push(this.create(parent, container, key, listKey));
	      }
	    }

	    return this.visitQueue(queue);
	  };

	  TraversalContext.prototype.visitSingle = function visitSingle(node, key) /*: boolean*/ {
	    if (this.shouldVisit(node[key])) {
	      return this.visitQueue([this.create(node, node, key)]);
	    } else {
	      return false;
	    }
	  };

	  TraversalContext.prototype.visitQueue = function visitQueue(queue /*: Array<NodePath>*/) {
	    // set queue
	    this.queue = queue;
	    this.priorityQueue = [];

	    var visited = [];
	    var stop = false;

	    // visit the queue
	    for (var _iterator2 = queue, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var path = _ref2;

	      path.resync();
	      path.pushContext(this);

	      if (testing && queue.length >= 1000) {
	        this.trap = true;
	      }

	      // ensure we don't visit the same node twice
	      if (visited.indexOf(path.node) >= 0) continue;
	      visited.push(path.node);

	      if (path.visit()) {
	        stop = true;
	        break;
	      }

	      if (this.priorityQueue.length) {
	        stop = this.visitQueue(this.priorityQueue);
	        this.priorityQueue = [];
	        this.queue = queue;
	        if (stop) break;
	      }
	    }

	    // clear queue
	    for (var _iterator3 = queue, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;

	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }

	      var path = _ref3;

	      path.popContext();
	    }

	    // clear queue
	    this.queue = null;

	    return stop;
	  };

	  TraversalContext.prototype.visit = function visit(node, key) {
	    var nodes = node[key];
	    if (!nodes) return false;

	    if (Array.isArray(nodes)) {
	      return this.visitMultiple(nodes, node, key);
	    } else {
	      return this.visitSingle(node, key);
	    }
	  };

	  return TraversalContext;
	})();

	exports["default"] = TraversalContext;
	module.exports = exports["default"];

/***/ },
/* 7875 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	var Hub = function Hub(file, options) {
	  _classCallCheck(this, Hub);

	  this.file = file;
	  this.options = options;
	};

	exports["default"] = Hub;
	module.exports = exports["default"];

/***/ },
/* 7876 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__, __webpack_module_template_argument_10__, __webpack_module_template_argument_11__, __webpack_module_template_argument_12__, __webpack_module_template_argument_13__, __webpack_module_template_argument_14__, __webpack_module_template_argument_15__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _Object$getOwnPropertySymbols = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	var _interopRequire = __webpack_require__(__webpack_module_template_argument_4__)["default"];

	exports.__esModule = true;
	exports["default"] = traverse;

	var _context = __webpack_require__(__webpack_module_template_argument_5__);

	var _context2 = _interopRequireDefault(_context);

	var _visitors = __webpack_require__(__webpack_module_template_argument_6__);

	var visitors = _interopRequireWildcard(_visitors);

	var _babelMessages = __webpack_require__(__webpack_module_template_argument_7__);

	var messages = _interopRequireWildcard(_babelMessages);

	var _lodashCollectionIncludes = __webpack_require__(__webpack_module_template_argument_8__);

	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_9__);

	var t = _interopRequireWildcard(_babelTypes);

	var _path = __webpack_require__(__webpack_module_template_argument_10__);

	exports.NodePath = _interopRequire(_path);

	var _scope = __webpack_require__(__webpack_module_template_argument_11__);

	exports.Scope = _interopRequire(_scope);

	var _hub = __webpack_require__(__webpack_module_template_argument_12__);

	exports.Hub = _interopRequire(_hub);
	exports.visitors = visitors;

	function traverse(parent /*: Object | Array<Object>*/, opts /*:: ?: Object*/, scope /*:: ?: Object*/, state /*: Object*/, parentPath /*: Object*/) {
	  if (!parent) return;
	  if (!opts) opts = {};

	  if (!opts.noScope && !scope) {
	    if (parent.type !== "Program" && parent.type !== "File") {
	      throw new Error(messages.get("traverseNeedsParent", parent.type));
	    }
	  }

	  visitors.explode(opts);

	  traverse.node(parent, opts, scope, state, parentPath);
	}

	traverse.visitors = visitors;
	traverse.verify = visitors.verify;
	traverse.explode = visitors.explode;

	traverse.NodePath = __webpack_require__(__webpack_module_template_argument_13__);
	traverse.Scope = __webpack_require__(__webpack_module_template_argument_14__);
	traverse.Hub = __webpack_require__(__webpack_module_template_argument_15__);

	traverse.cheap = function (node, enter) {
	  if (!node) return;

	  var keys = t.VISITOR_KEYS[node.type];
	  if (!keys) return;

	  enter(node);

	  for (var _iterator = keys, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var key = _ref;

	    var subNode = node[key];

	    if (Array.isArray(subNode)) {
	      for (var _iterator2 = subNode, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	        var _ref2;

	        if (_isArray2) {
	          if (_i2 >= _iterator2.length) break;
	          _ref2 = _iterator2[_i2++];
	        } else {
	          _i2 = _iterator2.next();
	          if (_i2.done) break;
	          _ref2 = _i2.value;
	        }

	        var _node = _ref2;

	        traverse.cheap(_node, enter);
	      }
	    } else {
	      traverse.cheap(subNode, enter);
	    }
	  }
	};

	traverse.node = function (node /*: Object*/, opts /*: Object*/, scope /*: Object*/, state /*: Object*/, parentPath /*: Object*/, skipKeys /*:: ?*/) {
	  var keys /*: Array*/ = t.VISITOR_KEYS[node.type];
	  if (!keys) return;

	  var context = new _context2["default"](scope, opts, state, parentPath);
	  for (var _iterator3 = keys, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	    var _ref3;

	    if (_isArray3) {
	      if (_i3 >= _iterator3.length) break;
	      _ref3 = _iterator3[_i3++];
	    } else {
	      _i3 = _iterator3.next();
	      if (_i3.done) break;
	      _ref3 = _i3.value;
	    }

	    var key = _ref3;

	    if (skipKeys && skipKeys[key]) continue;
	    if (context.visit(node, key)) return;
	  }
	};

	var CLEAR_KEYS /*: Array*/ = t.COMMENT_KEYS.concat(["tokens", "comments", "start", "end", "loc", "raw", "rawValue"]);

	traverse.clearNode = function (node) {
	  for (var _iterator4 = CLEAR_KEYS, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;

	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }

	    var key = _ref4;

	    if (node[key] != null) node[key] = undefined;
	  }

	  for (var key in node) {
	    if (key[0] === "_" && node[key] != null) node[key] = undefined;
	  }

	  var syms /*: Array<Symbol>*/ = _Object$getOwnPropertySymbols(node);
	  for (var _iterator5 = syms, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	    var _ref5;

	    if (_isArray5) {
	      if (_i5 >= _iterator5.length) break;
	      _ref5 = _iterator5[_i5++];
	    } else {
	      _i5 = _iterator5.next();
	      if (_i5.done) break;
	      _ref5 = _i5.value;
	    }

	    var sym = _ref5;

	    node[sym] = null;
	  }
	};

	traverse.removeProperties = function (tree) {
	  traverse.cheap(tree, traverse.clearNode);
	  return tree;
	};

	function hasBlacklistedType(path, state) {
	  if (path.node.type === state.type) {
	    state.has = true;
	    path.skip();
	  }
	}

	traverse.hasType = function (tree /*: Object*/, scope /*: Object*/, type /*: Object*/, blacklistTypes /*: Array<string>*/) /*: boolean*/ {
	  // the node we're searching in is blacklisted
	  if (_lodashCollectionIncludes2["default"](blacklistTypes, tree.type)) return false;

	  // the type we're looking for is the same as the passed node
	  if (tree.type === type) return true;

	  var state = {
	    has: false,
	    type: type
	  };

	  traverse(tree, {
	    blacklist: blacklistTypes,
	    enter: hasBlacklistedType
	  }, scope, state);

	  return state.has;
	};

/***/ },
/* 7877 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	// This file contains that retrieve or validate anything related to the current paths ancestry.

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;
	exports.findParent = findParent;
	exports.find = find;
	exports.getFunctionParent = getFunctionParent;
	exports.getStatementParent = getStatementParent;
	exports.getEarliestCommonAncestorFrom = getEarliestCommonAncestorFrom;
	exports.getDeepestCommonAncestorFrom = getDeepestCommonAncestorFrom;
	exports.getAncestry = getAncestry;
	exports.inType = inType;
	exports.inShadow = inShadow;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_3__);

	var t = _interopRequireWildcard(_babelTypes);

	var _index = __webpack_require__(__webpack_module_template_argument_4__);

	var _index2 = _interopRequireDefault(_index);

	/**
	 * Call the provided `callback` with the `NodePath`s of all the parents.
	 * When the `callback` returns a truthy value, we return that node path.
	 */

	function findParent(callback) {
	  var path = this;
	  while (path = path.parentPath) {
	    if (callback(path)) return path;
	  }
	  return null;
	}

	/**
	 * Description
	 */

	function find(callback) {
	  var path = this;
	  do {
	    if (callback(path)) return path;
	  } while (path = path.parentPath);
	  return null;
	}

	/**
	 * Get the parent function of the current path.
	 */

	function getFunctionParent() {
	  return this.findParent(function (path) {
	    return path.isFunction() || path.isProgram();
	  });
	}

	/**
	 * Walk up the tree until we hit a parent node path in a list.
	 */

	function getStatementParent() {
	  var path = this;
	  do {
	    if (Array.isArray(path.container)) {
	      return path;
	    }
	  } while (path = path.parentPath);
	}

	/**
	 * Get the deepest common ancestor and then from it, get the earliest relationship path
	 * to that ancestor.
	 *
	 * Earliest is defined as being "before" all the other nodes in terms of list container
	 * position and visiting key.
	 */

	function getEarliestCommonAncestorFrom(paths /*: Array<NodePath>*/) /*: NodePath*/ {
	  return this.getDeepestCommonAncestorFrom(paths, function (deepest, i, ancestries) {
	    var earliest = undefined;
	    var keys = t.VISITOR_KEYS[deepest.type];

	    for (var _iterator = (ancestries /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var ancestry = _ref;

	      var path = ancestry[i + 1];

	      // first path
	      if (!earliest) {
	        earliest = path;
	        continue;
	      }

	      // handle containers
	      if (path.listKey && earliest.listKey === path.listKey) {
	        // we're in the same container so check if we're earlier
	        if (path.key < earliest.key) {
	          earliest = path;
	          continue;
	        }
	      }

	      // handle keys
	      var earliestKeyIndex = keys.indexOf(earliest.parentKey);
	      var currentKeyIndex = keys.indexOf(path.parentKey);
	      if (earliestKeyIndex > currentKeyIndex) {
	        // key appears before so it's earlier
	        earliest = path;
	      }
	    }

	    return earliest;
	  });
	}

	/**
	 * Get the earliest path in the tree where the provided `paths` intersect.
	 *
	 * TODO: Possible optimisation target.
	 */

	function getDeepestCommonAncestorFrom(paths /*: Array<NodePath>*/, filter /*:: ?: Function*/) /*: NodePath*/ {
	  // istanbul ignore next

	  var _this = this;

	  if (!paths.length) {
	    return this;
	  }

	  if (paths.length === 1) {
	    return paths[0];
	  }

	  // minimum depth of the tree so we know the highest node
	  var minDepth = Infinity;

	  // last common ancestor
	  var lastCommonIndex = undefined,
	      lastCommon = undefined;

	  // get the ancestors of the path, breaking when the parent exceeds ourselves
	  var ancestries = paths.map(function (path) {
	    var ancestry = [];

	    do {
	      ancestry.unshift(path);
	    } while ((path = path.parentPath) && path !== _this);

	    // save min depth to avoid going too far in
	    if (ancestry.length < minDepth) {
	      minDepth = ancestry.length;
	    }

	    return ancestry;
	  });

	  // get the first ancestry so we have a seed to assess all other ancestries with
	  var first = ancestries[0];

	  // check ancestor equality
	  depthLoop: for (var i = 0; i < minDepth; i++) {
	    var shouldMatch = first[i];

	    for (var _iterator2 = (ancestries /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var ancestry = _ref2;

	      if (ancestry[i] !== shouldMatch) {
	        // we've hit a snag
	        break depthLoop;
	      }
	    }

	    // next iteration may break so store these so they can be returned
	    lastCommonIndex = i;
	    lastCommon = shouldMatch;
	  }

	  if (lastCommon) {
	    if (filter) {
	      return filter(lastCommon, lastCommonIndex, ancestries);
	    } else {
	      return lastCommon;
	    }
	  } else {
	    throw new Error("Couldn't find intersection");
	  }
	}

	/**
	 * Build an array of node paths containing the entire ancestry of the current node path.
	 *
	 * NOTE: The current node path is included in this.
	 */

	function getAncestry() {
	  var path = this;
	  var paths = [];
	  do {
	    paths.push(path);
	  } while (path = path.parentPath);
	  return paths;
	}

	function inType() {
	  var path = this;
	  while (path) {
	    for (var _iterator3 = (arguments /*: Array*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;

	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }

	      var type = _ref3;

	      if (path.node.type === type) return true;
	    }
	    path = path.parentPath;
	  }

	  return false;
	}

	/**
	 * Check if we're inside a shadowed function.
	 */

	function inShadow(key /*:: ?*/) {
	  var path = this;
	  do {
	    if (path.isFunction()) {
	      var shadow = path.node.shadow;
	      if (shadow) {
	        // this is because sometimes we may have a `shadow` value of:
	        //
	        //   { this: false }
	        //
	        // we need to catch this case if `inShadow` has been passed a `key`
	        if (!key || shadow[key] !== false) {
	          return path;
	        }
	      } else if (path.isArrowFunctionExpression()) {
	        return path;
	      }

	      // normal function, we've found our function context
	      return null;
	    }
	  } while (path = path.parentPath);
	  return null;
	}

/***/ },
/* 7878 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	// This file contains methods responsible for maintaining a TraversalContext.

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;
	exports.call = call;
	exports._call = _call;
	exports.isBlacklisted = isBlacklisted;
	exports.visit = visit;
	exports.skip = skip;
	exports.skipKey = skipKey;
	exports.stop = stop;
	exports.setScope = setScope;
	exports.setContext = setContext;
	exports.resync = resync;
	exports._resyncParent = _resyncParent;
	exports._resyncKey = _resyncKey;
	exports._resyncList = _resyncList;
	exports._resyncRemoved = _resyncRemoved;
	exports.popContext = popContext;
	exports.pushContext = pushContext;
	exports.setup = setup;
	exports.setKey = setKey;
	exports.requeue = requeue;

	var _index = __webpack_require__(__webpack_module_template_argument_2__);

	var _index2 = _interopRequireDefault(_index);

	function call(key) /*: boolean*/ {
	  var opts = this.opts;

	  this.debug(function () {
	    return key;
	  });

	  if (this.node) {
	    if (this._call(opts[key])) return true;
	  }

	  if (this.node) {
	    return this._call(opts[this.node.type] && opts[this.node.type][key]);
	  }

	  return false;
	}

	function _call(fns /*:: ?: Array<Function>*/) /*: boolean*/ {
	  if (!fns) return false;

	  for (var _iterator = fns, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var fn = _ref;

	    if (!fn) continue;

	    var node = this.node;
	    if (!node) return true;

	    var ret = fn.call(this.state, this, this.state);
	    if (ret) throw new Error("Unexpected return value from visitor method " + fn);

	    // node has been replaced, it will have been requeued
	    if (this.node !== node) return true;

	    if (this.shouldStop || this.shouldSkip || this.removed) return true;
	  }

	  return false;
	}

	function isBlacklisted() /*: boolean*/ {
	  var blacklist = this.opts.blacklist;
	  return blacklist && blacklist.indexOf(this.node.type) > -1;
	}

	function visit() /*: boolean*/ {
	  if (!this.node) {
	    return false;
	  }

	  if (this.isBlacklisted()) {
	    return false;
	  }

	  if (this.opts.shouldSkip && this.opts.shouldSkip(this)) {
	    return false;
	  }

	  if (this.call("enter") || this.shouldSkip) {
	    this.debug(function () {
	      return "Skip...";
	    });
	    return this.shouldStop;
	  }

	  this.debug(function () {
	    return "Recursing into...";
	  });
	  _index2["default"].node(this.node, this.opts, this.scope, this.state, this, this.skipKeys);

	  this.call("exit");

	  return this.shouldStop;
	}

	function skip() {
	  this.shouldSkip = true;
	}

	function skipKey(key) {
	  this.skipKeys[key] = true;
	}

	function stop() {
	  this.shouldStop = true;
	  this.shouldSkip = true;
	}

	function setScope() {
	  if (this.opts && this.opts.noScope) return;

	  var target = this.context && this.context.scope;

	  if (!target) {
	    var path = this.parentPath;
	    while (path && !target) {
	      if (path.opts && path.opts.noScope) return;

	      target = path.scope;
	      path = path.parentPath;
	    }
	  }

	  this.scope = this.getScope(target);
	  if (this.scope) this.scope.init();
	}

	function setContext(context) {
	  this.shouldSkip = false;
	  this.shouldStop = false;
	  this.removed = false;
	  this.skipKeys = {};

	  if (context) {
	    this.context = context;
	    this.state = context.state;
	    this.opts = context.opts;
	  }

	  this.setScope();

	  return this;
	}

	/**
	 * Here we resync the node paths `key` and `container`. If they've changed according
	 * to what we have stored internally then we attempt to resync by crawling and looking
	 * for the new values.
	 */

	function resync() {
	  if (this.removed) return;

	  this._resyncParent();
	  this._resyncList();
	  this._resyncKey();
	  //this._resyncRemoved();
	}

	function _resyncParent() {
	  if (this.parentPath) {
	    this.parent = this.parentPath.node;
	  }
	}

	function _resyncKey() {
	  if (!this.container) return;

	  if (this.node === this.container[this.key]) return;

	  // grrr, path key is out of sync. this is likely due to a modification to the AST
	  // not done through our path APIs

	  if (Array.isArray(this.container)) {
	    for (var i = 0; i < this.container.length; i++) {
	      if (this.container[i] === this.node) {
	        return this.setKey(i);
	      }
	    }
	  } else {
	    for (var key in this.container) {
	      if (this.container[key] === this.node) {
	        return this.setKey(key);
	      }
	    }
	  }

	  // ¯\_(ツ)_/¯ who knows where it's gone lol
	  this.key = null;
	}

	function _resyncList() {
	  if (!this.parent || !this.inList) return;

	  var newContainer = this.parent[this.listKey];
	  if (this.container === newContainer) return;

	  // container is out of sync. this is likely the result of it being reassigned
	  this.container = newContainer || null;
	}

	function _resyncRemoved() {
	  if (this.key == null || !this.container || this.container[this.key] !== this.node) {
	    this._markRemoved();
	  }
	}

	function popContext() {
	  this.contexts.pop();
	  this.setContext(this.contexts[this.contexts.length - 1]);
	}

	function pushContext(context) {
	  this.contexts.push(context);
	  this.setContext(context);
	}

	function setup(parentPath, container, listKey, key) {
	  this.inList = !!listKey;
	  this.listKey = listKey;
	  this.parentKey = listKey || key;
	  this.container = container;

	  this.parentPath = parentPath || this.parentPath;
	  this.setKey(key);
	}

	function setKey(key) {
	  this.key = key;
	  this.node = this.container[this.key];
	  this.type = this.node && this.node.type;
	}

	function requeue() {
	  var path = arguments.length <= 0 || arguments[0] === undefined ? this : arguments[0];

	  if (path.removed) return;

	  for (var _iterator2 = this.contexts, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	    var _ref2;

	    if (_isArray2) {
	      if (_i2 >= _iterator2.length) break;
	      _ref2 = _iterator2[_i2++];
	    } else {
	      _i2 = _iterator2.next();
	      if (_i2.done) break;
	      _ref2 = _i2.value;
	    }

	    var context = _ref2;

	    context.maybeQueue(path);
	  }
	}

/***/ },
/* 7879 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// This file contains methods that convert the path node into another node or some other type of data.

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	exports.toComputedKey = toComputedKey;
	exports.ensureBlock = ensureBlock;
	exports.arrowFunctionToShadowed = arrowFunctionToShadowed;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_1__);

	var t = _interopRequireWildcard(_babelTypes);

	function toComputedKey() /*: Object*/ {
	  var node = this.node;

	  var key = undefined;
	  if (this.isMemberExpression()) {
	    key = node.property;
	  } else if (this.isProperty() || this.isMethod()) {
	    key = node.key;
	  } else {
	    throw new ReferenceError("todo");
	  }

	  if (!node.computed) {
	    if (t.isIdentifier(key)) key = t.stringLiteral(key.name);
	  }

	  return key;
	}

	function ensureBlock() {
	  return t.ensureBlock(this.node);
	}

	function arrowFunctionToShadowed() {
	  // todo: maybe error
	  if (!this.isArrowFunctionExpression()) return;

	  this.ensureBlock();

	  var node = this.node;

	  node.expression = false;
	  node.type = "FunctionExpression";
	  node.shadow = node.shadow || true;
	}

/***/ },
/* 7880 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	/* WEBPACK VAR INJECTION */(function(global) {"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	exports.evaluateTruthy = evaluateTruthy;
	exports.evaluate = evaluate;

	// This file contains Babels metainterpreter that can evaluate static code.

	/* eslint eqeqeq: 0 */

	/*:: import type NodePath from "./index";*/var VALID_CALLEES = ["String", "Number", "Math"];
	var INVALID_METHODS = ["random"];

	/**
	 * Walk the input `node` and statically evaluate if it's truthy.
	 *
	 * Returning `true` when we're sure that the expression will evaluate to a
	 * truthy value, `false` if we're sure that it will evaluate to a falsy
	 * value and `undefined` if we aren't sure. Because of this please do not
	 * rely on coercion when using this method and check with === if it's false.
	 *
	 * For example do:
	 *
	 *   if (t.evaluateTruthy(node) === false) falsyLogic();
	 *
	 * **AND NOT**
	 *
	 *   if (!t.evaluateTruthy(node)) falsyLogic();
	 *
	 */

	function evaluateTruthy() /*: boolean*/ {
	  var res = this.evaluate();
	  if (res.confident) return !!res.value;
	}

	/**
	 * Walk the input `node` and statically evaluate it.
	 *
	 * Returns an object in the form `{ confident, value }`. `confident` indicates
	 * whether or not we had to drop out of evaluating the expression because of
	 * hitting an unknown node that we couldn't confidently find the value of.
	 *
	 * Example:
	 *
	 *   t.evaluate(parse("5 + 5")) // { confident: true, value: 10 }
	 *   t.evaluate(parse("!true")) // { confident: true, value: false }
	 *   t.evaluate(parse("foo + foo")) // { confident: false, value: undefined }
	 *
	 */

	function evaluate() /*: { confident: boolean; value: any }*/ {
	  var confident = true;
	  var deoptPath /*: ?NodePath*/ = undefined;

	  function deopt(path) {
	    if (!confident) return;
	    deoptPath = path;
	    confident = false;
	  }

	  var value = evaluate(this);
	  if (!confident) value = undefined;
	  return {
	    confident: confident,
	    deopt: deoptPath,
	    value: value
	  };

	  function evaluate(path) {
	    if (!confident) return;

	    var node = path.node;

	    if (path.isSequenceExpression()) {
	      var exprs = path.get("expressions");
	      return evaluate(exprs[exprs.length - 1]);
	    }

	    if (path.isStringLiteral() || path.isNumericLiteral() || path.isBooleanLiteral()) {
	      return node.value;
	    }

	    if (path.isNullLiteral()) {
	      return null;
	    }

	    if (path.isTemplateLiteral()) {
	      var str = "";

	      var i = 0;
	      var exprs = path.get("expressions");

	      for (var _iterator = (node.quasis /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var elem = _ref;

	        // not confident, evaluated an expression we don't like
	        if (!confident) break;

	        // add on cooked element
	        str += elem.value.cooked;

	        // add on interpolated expression if it's present
	        var expr = exprs[i++];
	        if (expr) str += String(evaluate(expr));
	      }

	      if (confident) return str;
	    }

	    if (path.isConditionalExpression()) {
	      if (evaluate(path.get("test"))) {
	        return evaluate(path.get("consequent"));
	      } else {
	        return evaluate(path.get("alternate"));
	      }
	    }

	    if (path.isExpressionWrapper()) {
	      // TypeCastExpression, ExpressionStatement etc
	      return evaluate(path.get("expression"));
	    }

	    // "foo".length
	    if (path.isMemberExpression() && !path.parentPath.isCallExpression({ callee: node })) {
	      var property = path.get("property");
	      var object = path.get("object");

	      if (object.isLiteral() && property.isIdentifier()) {
	        var _value = object.node.value;
	        var type = typeof _value;
	        if (type === "number" || type === "string") {
	          return _value[property.node.name];
	        }
	      }
	    }

	    if (path.isReferencedIdentifier()) {
	      var binding = path.scope.getBinding(node.name);
	      if (binding && binding.hasValue) {
	        return binding.value;
	      } else {
	        if (node.name === "undefined") {
	          return undefined;
	        } else if (node.name === "Infinity") {
	          return Infinity;
	        } else if (node.name === "NaN") {
	          return NaN;
	        }

	        var resolved = path.resolve();
	        if (resolved === path) {
	          return deopt(path);
	        } else {
	          return evaluate(resolved);
	        }
	      }
	    }

	    if (path.isUnaryExpression({ prefix: true })) {
	      if (node.operator === "void") {
	        // we don't need to evaluate the argument to know what this will return
	        return undefined;
	      }

	      var argument = path.get("argument");
	      if (node.operator === "typeof" && (argument.isFunction() || argument.isClass())) {
	        return "function";
	      }

	      var arg = evaluate(argument);
	      switch (node.operator) {
	        case "!":
	          return !arg;
	        case "+":
	          return +arg;
	        case "-":
	          return -arg;
	        case "~":
	          return ~arg;
	        case "typeof":
	          return typeof arg;
	      }
	    }

	    if (path.isArrayExpression()) {
	      var arr = [];
	      var elems /*: Array<NodePath>*/ = path.get("elements");
	      for (var _iterator2 = elems, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	        var _ref2;

	        if (_isArray2) {
	          if (_i2 >= _iterator2.length) break;
	          _ref2 = _iterator2[_i2++];
	        } else {
	          _i2 = _iterator2.next();
	          if (_i2.done) break;
	          _ref2 = _i2.value;
	        }

	        var elem = _ref2;

	        elem = elem.evaluate();

	        if (elem.confident) {
	          arr.push(elem.value);
	        } else {
	          return deopt(elem);
	        }
	      }
	      return arr;
	    }

	    if (path.isObjectExpression()) {
	      // todo
	    }

	    if (path.isLogicalExpression()) {
	      // If we are confident that one side of an && is false, or one side of
	      // an || is true, we can be confident about the entire expression
	      var wasConfident = confident;
	      var left = evaluate(path.get("left"));
	      var leftConfident = confident;
	      confident = wasConfident;
	      var right = evaluate(path.get("right"));
	      var rightConfident = confident;
	      var uncertain = leftConfident !== rightConfident;
	      confident = leftConfident && rightConfident;

	      switch (node.operator) {
	        case "||":
	          if ((left || right) && uncertain) {
	            confident = true;
	          }
	          return left || right;
	        case "&&":
	          if (!left && leftConfident || !right && rightConfident) {
	            confident = true;
	          }
	          return left && right;
	      }
	    }

	    if (path.isBinaryExpression()) {
	      var left = evaluate(path.get("left"));
	      var right = evaluate(path.get("right"));

	      switch (node.operator) {
	        case "-":
	          return left - right;
	        case "+":
	          return left + right;
	        case "/":
	          return left / right;
	        case "*":
	          return left * right;
	        case "%":
	          return left % right;
	        case "**":
	          return Math.pow(left, right);
	        case "<":
	          return left < right;
	        case ">":
	          return left > right;
	        case "<=":
	          return left <= right;
	        case ">=":
	          return left >= right;
	        case "==":
	          return left == right;
	        case "!=":
	          return left != right;
	        case "===":
	          return left === right;
	        case "!==":
	          return left !== right;
	        case "|":
	          return left | right;
	        case "&":
	          return left & right;
	        case "^":
	          return left ^ right;
	        case "<<":
	          return left << right;
	        case ">>":
	          return left >> right;
	        case ">>>":
	          return left >>> right;
	      }
	    }

	    if (path.isCallExpression()) {
	      var callee = path.get("callee");
	      var context = undefined;
	      var func = undefined;

	      // Number(1);
	      if (callee.isIdentifier() && !path.scope.getBinding(callee.node.name, true) && VALID_CALLEES.indexOf(callee.node.name) >= 0) {
	        func = global[node.callee.name];
	      }

	      if (callee.isMemberExpression()) {
	        var object = callee.get("object");
	        var property = callee.get("property");

	        // Math.min(1, 2)
	        if (object.isIdentifier() && property.isIdentifier() && VALID_CALLEES.indexOf(object.node.name) >= 0 && INVALID_METHODS.indexOf(property.node.name) < 0) {
	          context = global[object.node.name];
	          func = context[property.node.name];
	        }

	        // "abc".charCodeAt(4)
	        if (object.isLiteral() && property.isIdentifier()) {
	          var type = typeof object.node.value;
	          if (type === "string" || type === "number") {
	            context = object.node.value;
	            func = context[property.node.name];
	          }
	        }
	      }

	      if (func) {
	        var args = path.get("arguments").map(evaluate);
	        if (!confident) return;

	        return func.apply(context, args);
	      }
	    }

	    deopt(path);
	  }
	}
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 7881 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	// This file contains methods responsible for dealing with/retrieving children or siblings.

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;
	exports.getStatementParent = getStatementParent;
	exports.getOpposite = getOpposite;
	exports.getCompletionRecords = getCompletionRecords;
	exports.getSibling = getSibling;
	exports.get = get;
	exports._getKey = _getKey;
	exports._getPattern = _getPattern;
	exports.getBindingIdentifiers = getBindingIdentifiers;
	exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;

	var _index = __webpack_require__(__webpack_module_template_argument_3__);

	var _index2 = _interopRequireDefault(_index);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_4__);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type TraversalContext from "../index";*/
	function getStatementParent() /*: ?NodePath*/ {
	  var path = this;

	  do {
	    if (!path.parentPath || Array.isArray(path.container) && path.isStatement()) {
	      break;
	    } else {
	      path = path.parentPath;
	    }
	  } while (path);

	  if (path && (path.isProgram() || path.isFile())) {
	    throw new Error("File/Program node, we can't possibly find a statement parent to this");
	  }

	  return path;
	}

	function getOpposite() {
	  if (this.key === "left") {
	    return this.getSibling("right");
	  } else if (this.key === "right") {
	    return this.getSibling("left");
	  }
	}

	function getCompletionRecords() /*: Array*/ {
	  var paths = [];

	  var add = function add(path) {
	    if (path) paths = paths.concat(path.getCompletionRecords());
	  };

	  if (this.isIfStatement()) {
	    add(this.get("consequent"));
	    add(this.get("alternate"));
	  } else if (this.isDoExpression() || this.isFor() || this.isWhile()) {
	    add(this.get("body"));
	  } else if (this.isProgram() || this.isBlockStatement()) {
	    add(this.get("body").pop());
	  } else if (this.isFunction()) {
	    return this.get("body").getCompletionRecords();
	  } else if (this.isTryStatement()) {
	    add(this.get("block"));
	    add(this.get("handler"));
	    add(this.get("finalizer"));
	  } else {
	    paths.push(this);
	  }

	  return paths;
	}

	function getSibling(key) {
	  return _index2["default"].get({
	    parentPath: this.parentPath,
	    parent: this.parent,
	    container: this.container,
	    listKey: this.listKey,
	    key: key
	  });
	}

	function get(key /*: string*/, context /*:: ?: boolean | TraversalContext*/) /*: NodePath*/ {
	  if (context === true) context = this.context;
	  var parts = key.split(".");
	  if (parts.length === 1) {
	    // "foo"
	    return this._getKey(key, context);
	  } else {
	    // "foo.bar"
	    return this._getPattern(parts, context);
	  }
	}

	function _getKey(key, context /*:: ?*/) {
	  // istanbul ignore next

	  var _this = this;

	  var node = this.node;
	  var container = node[key];

	  if (Array.isArray(container)) {
	    // requested a container so give them all the paths
	    return container.map(function (_, i) {
	      return _index2["default"].get({
	        listKey: key,
	        parentPath: _this,
	        parent: node,
	        container: container,
	        key: i
	      }).setContext(context);
	    });
	  } else {
	    return _index2["default"].get({
	      parentPath: this,
	      parent: node,
	      container: node,
	      key: key
	    }).setContext(context);
	  }
	}

	function _getPattern(parts, context) {
	  var path = this;
	  for (var _iterator = (parts /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var part = _ref;

	    if (part === ".") {
	      path = path.parentPath;
	    } else {
	      if (Array.isArray(path)) {
	        path = path[part];
	      } else {
	        path = path.get(part, context);
	      }
	    }
	  }
	  return path;
	}

	function getBindingIdentifiers(duplicates /*:: ?*/) {
	  return t.getBindingIdentifiers(this.node, duplicates);
	}

	function getOuterBindingIdentifiers(duplicates /*:: ?*/) {
	  return t.getOuterBindingIdentifiers(this.node, duplicates);
	}

/***/ },
/* 7882 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__, __webpack_module_template_argument_10__, __webpack_module_template_argument_11__, __webpack_module_template_argument_12__, __webpack_module_template_argument_13__, __webpack_module_template_argument_14__, __webpack_module_template_argument_15__, __webpack_module_template_argument_16__, __webpack_module_template_argument_17__, __webpack_module_template_argument_18__, __webpack_module_template_argument_19__, __webpack_module_template_argument_20__, __webpack_module_template_argument_21__, __webpack_module_template_argument_22__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _getIterator = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	exports.__esModule = true;

	var _libVirtualTypes = __webpack_require__(__webpack_module_template_argument_4__);

	var virtualTypes = _interopRequireWildcard(_libVirtualTypes);

	var _debug2 = __webpack_require__(__webpack_module_template_argument_5__);

	var _debug3 = _interopRequireDefault(_debug2);

	var _constants = __webpack_require__(__webpack_module_template_argument_6__);

	var _invariant = __webpack_require__(__webpack_module_template_argument_7__);

	var _invariant2 = _interopRequireDefault(_invariant);

	var _index = __webpack_require__(__webpack_module_template_argument_8__);

	var _index2 = _interopRequireDefault(_index);

	var _lodashObjectAssign = __webpack_require__(__webpack_module_template_argument_9__);

	var _lodashObjectAssign2 = _interopRequireDefault(_lodashObjectAssign);

	var _scope = __webpack_require__(__webpack_module_template_argument_10__);

	var _scope2 = _interopRequireDefault(_scope);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_11__);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type Hub from "../hub";*/
	/*:: import type TraversalContext from "../context";*/

	var _debug = _debug3["default"]("babel");

	var NodePath = (function () {
	  function NodePath(hub /*: Hub*/, parent /*: Object*/) {
	    _classCallCheck(this, NodePath);

	    this.parent = parent;
	    this.hub = hub;
	    this.contexts = [];
	    this.data = {};
	    this.shouldSkip = false;
	    this.shouldStop = false;
	    this.removed = false;
	    this.state = null;
	    this.opts = null;
	    this.skipKeys = null;
	    this.parentPath = null;
	    this.context = null;
	    this.container = null;
	    this.listKey = null;
	    this.inList = false;
	    this.parentKey = null;
	    this.key = null;
	    this.node = null;
	    this.scope = null;
	    this.type = null;
	    this.typeAnnotation = null;
	  }

	  NodePath.get = function get(_ref2) /*: NodePath*/ {
	    var hub = _ref2.hub;
	    var parentPath = _ref2.parentPath;
	    var parent = _ref2.parent;
	    var container = _ref2.container;
	    var listKey = _ref2.listKey;
	    var key = _ref2.key;

	    if (!hub && parentPath) {
	      hub = parentPath.hub;
	    }

	    _invariant2["default"](parent, "To get a node path the parent needs to exist");

	    var targetNode = container[key];

	    var paths = parent[_constants.PATH_CACHE_KEY] = parent[_constants.PATH_CACHE_KEY] || [];
	    var path = undefined;

	    for (var i = 0; i < paths.length; i++) {
	      var pathCheck = paths[i];
	      if (pathCheck.node === targetNode) {
	        path = pathCheck;
	        break;
	      }
	    }

	    if (path && !(path instanceof NodePath)) {
	      if (path.constructor.name === "NodePath") {
	        // we're going to absolutley thrash the tree and allocate way too many node paths
	        // than is necessary but there's no way around this as the node module resolution
	        // algorithm is ridiculous
	        path = null;
	      } else {
	        // badly deserialised probably
	        throw new Error("We found a path that isn't a NodePath instance. Possiblly due to bad serialisation.");
	      }
	    }

	    if (!path) {
	      path = new NodePath(hub, parent);
	      paths.push(path);
	    }

	    path.setup(parentPath, container, listKey, key);

	    return path;
	  };

	  NodePath.prototype.getScope = function getScope(scope /*: Scope*/) {
	    var ourScope = scope;

	    // we're entering a new scope so let's construct it!
	    if (this.isScope()) {
	      ourScope = new _scope2["default"](this, scope);
	    }

	    return ourScope;
	  };

	  NodePath.prototype.setData = function setData(key /*: string*/, val /*: any*/) /*: any*/ {
	    return this.data[key] = val;
	  };

	  NodePath.prototype.getData = function getData(key /*: string*/, def /*:: ?: any*/) /*: any*/ {
	    var val = this.data[key];
	    if (!val && def) val = this.data[key] = def;
	    return val;
	  };

	  NodePath.prototype.buildCodeFrameError = function buildCodeFrameError(msg /*: string*/) /*: Error*/ {
	    var Error /*: typeof Error*/ = arguments.length <= 1 || arguments[1] === undefined ? SyntaxError : arguments[1];

	    return this.hub.file.buildCodeFrameError(this.node, msg, Error);
	  };

	  NodePath.prototype.traverse = function traverse(visitor /*: Object*/, state /*:: ?: any*/) {
	    _index2["default"](this.node, visitor, this.scope, state, this);
	  };

	  NodePath.prototype.mark = function mark(type /*: string*/, message /*: string*/) {
	    this.hub.file.metadata.marked.push({
	      type: type,
	      message: message,
	      loc: this.node.loc
	    });
	  };

	  NodePath.prototype.set = function set(key /*: string*/, node /*: Object*/) {
	    t.validate(this.node, key, node);
	    this.node[key] = node;
	  };

	  NodePath.prototype.getPathLocation = function getPathLocation() /*: string*/ {
	    var parts = [];
	    var path = this;
	    do {
	      var key = path.key;
	      if (path.inList) key = path.listKey + "[" + key + "]";
	      parts.unshift(key);
	    } while (path = path.parentPath);
	    return parts.join(".");
	  };

	  NodePath.prototype.debug = function debug(buildMessage /*: Function*/) {
	    if (!_debug.enabled) return;
	    _debug(this.getPathLocation() + " " + this.type + ": " + buildMessage());
	  };

	  return NodePath;
	})();

	exports["default"] = NodePath;

	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_12__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_13__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_14__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_15__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_16__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_17__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_18__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_19__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_20__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_21__));
	_lodashObjectAssign2["default"](NodePath.prototype, __webpack_require__(__webpack_module_template_argument_22__));

	var _loop = function () {
	  if (_isArray) {
	    if (_i >= _iterator.length) return "break";
	    _ref = _iterator[_i++];
	  } else {
	    _i = _iterator.next();
	    if (_i.done) return "break";
	    _ref = _i.value;
	  }

	  var type = _ref;

	  var typeKey = "is" + type;
	  NodePath.prototype[typeKey] = function (opts) {
	    return t[typeKey](this.node, opts);
	  };

	  NodePath.prototype["assert" + type] = function (opts) {
	    if (!this[typeKey](opts)) {
	      throw new TypeError("Expected node path of type " + type);
	    }
	  };
	};

	for (var _iterator = (t.TYPES /*: Array<string>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	  var _ref;

	  var _ret = _loop();

	  // istanbul ignore next
	  if (_ret === "break") break;
	}

	var _loop2 = function (type) {
	  if (type[0] === "_") return "continue";
	  if (t.TYPES.indexOf(type) < 0) t.TYPES.push(type);

	  var virtualType = virtualTypes[type];

	  NodePath.prototype["is" + type] = function (opts) {
	    return virtualType.checkPath(this, opts);
	  };
	};

	for (var type in virtualTypes) {
	  var _ret2 = _loop2(type);

	  // istanbul ignore next
	  if (_ret2 === "continue") continue;
	}
	module.exports = exports["default"];

/***/ },
/* 7883 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;
	exports.getTypeAnnotation = getTypeAnnotation;
	exports._getTypeAnnotation = _getTypeAnnotation;
	exports.isBaseType = isBaseType;
	exports.couldBeBaseType = couldBeBaseType;
	exports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;
	exports.isGenericType = isGenericType;

	var _inferers = __webpack_require__(__webpack_module_template_argument_2__);

	var inferers = _interopRequireWildcard(_inferers);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_3__);

	var t = _interopRequireWildcard(_babelTypes);

	/**
	 * Infer the type of the current `NodePath`.
	 */

	/*:: import type NodePath from "./index";*/
	function getTypeAnnotation() /*: Object*/ {
	  if (this.typeAnnotation) return this.typeAnnotation;

	  var type = this._getTypeAnnotation() || t.anyTypeAnnotation();
	  if (t.isTypeAnnotation(type)) type = type.typeAnnotation;
	  return this.typeAnnotation = type;
	}

	/**
	 * todo: split up this method
	 */

	function _getTypeAnnotation() /*: ?Object*/ {
	  var node = this.node;

	  if (!node) {
	    // handle initializerless variables, add in checks for loop initializers too
	    if (this.key === "init" && this.parentPath.isVariableDeclarator()) {
	      var declar = this.parentPath.parentPath;
	      var declarParent = declar.parentPath;

	      // for (let NODE in bar) {}
	      if (declar.key === "left" && declarParent.isForInStatement()) {
	        return t.stringTypeAnnotation();
	      }

	      // for (let NODE of bar) {}
	      if (declar.key === "left" && declarParent.isForOfStatement()) {
	        return t.anyTypeAnnotation();
	      }

	      return t.voidTypeAnnotation();
	    } else {
	      return;
	    }
	  }

	  if (node.typeAnnotation) {
	    return node.typeAnnotation;
	  }

	  var inferer = inferers[node.type];
	  if (inferer) {
	    return inferer.call(this, node);
	  }

	  inferer = inferers[this.parentPath.type];
	  if (inferer && inferer.validParent) {
	    return this.parentPath.getTypeAnnotation();
	  }
	}

	function isBaseType(baseName /*: string*/, soft /*:: ?: boolean*/) /*: boolean*/ {
	  return _isBaseType(baseName, this.getTypeAnnotation(), soft);
	}

	function _isBaseType(baseName /*: string*/, type, /*:: ?*/soft /*:: ?*/) /*: boolean*/ {
	  if (baseName === "string") {
	    return t.isStringTypeAnnotation(type);
	  } else if (baseName === "number") {
	    return t.isNumberTypeAnnotation(type);
	  } else if (baseName === "boolean") {
	    return t.isBooleanTypeAnnotation(type);
	  } else if (baseName === "any") {
	    return t.isAnyTypeAnnotation(type);
	  } else if (baseName === "mixed") {
	    return t.isMixedTypeAnnotation(type);
	  } else if (baseName === "void") {
	    return t.isVoidTypeAnnotation(type);
	  } else {
	    if (soft) {
	      return false;
	    } else {
	      throw new Error("Unknown base type " + baseName);
	    }
	  }
	}

	function couldBeBaseType(name /*: string*/) /*: boolean*/ {
	  var type = this.getTypeAnnotation();
	  if (t.isAnyTypeAnnotation(type)) return true;

	  if (t.isUnionTypeAnnotation(type)) {
	    for (var _iterator = (type.types /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var type2 = _ref;

	      if (t.isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {
	        return true;
	      }
	    }
	    return false;
	  } else {
	    return _isBaseType(name, type, true);
	  }
	}

	function baseTypeStrictlyMatches(right /*: NodePath*/) {
	  var left = this.getTypeAnnotation();
	  right = right.getTypeAnnotation();

	  if (!t.isAnyTypeAnnotation(left) && t.isFlowBaseAnnotation(left)) {
	    return right.type === left.type;
	  }
	}

	function isGenericType(genericName /*: string*/) /*: boolean*/ {
	  var type = this.getTypeAnnotation();
	  return t.isGenericTypeAnnotation(type) && t.isIdentifier(type.id, { name: genericName });
	}

/***/ },
/* 7884 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_2__);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type NodePath from "../index";*/
	exports["default"] = function (node /*: Object*/) {
	  if (!this.isReferenced()) return;

	  // check if a binding exists of this value and if so then return a union type of all
	  // possible types that the binding could be
	  var binding = this.scope.getBinding(node.name);
	  if (binding) {
	    if (binding.identifier.typeAnnotation) {
	      return binding.identifier.typeAnnotation;
	    } else {
	      return getTypeAnnotationBindingConstantViolations(this, node.name);
	    }
	  }

	  // built-in values
	  if (node.name === "undefined") {
	    return t.voidTypeAnnotation();
	  } else if (node.name === "NaN" || node.name === "Infinity") {
	    return t.numberTypeAnnotation();
	  } else if (node.name === "arguments") {
	    // todo
	  }
	};

	function getTypeAnnotationBindingConstantViolations(path, name) {
	  var binding = path.scope.getBinding(name);

	  var types = [];
	  path.typeAnnotation = t.unionTypeAnnotation(types);

	  var functionConstantViolations = [];
	  var constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);

	  var testType = getConditionalAnnotation(path, name);
	  if (testType) {
	    (function () {
	      var testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);

	      // remove constant violations observed before the IfStatement
	      constantViolations = constantViolations.filter(function (path) {
	        return testConstantViolations.indexOf(path) < 0;
	      });

	      // clear current types and add in observed test type
	      types.push(testType.typeAnnotation);
	    })();
	  }

	  if (constantViolations.length) {
	    // pick one constant from each scope which will represent the last possible
	    // control flow path that it could've taken/been
	    var rawConstantViolations = constantViolations.reverse();
	    var visitedScopes = [];
	    constantViolations = [];
	    for (var _iterator = (rawConstantViolations /*: Array<NodePath>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var violation = _ref;

	      var violationScope = violation.scope;
	      if (visitedScopes.indexOf(violationScope) >= 0) continue;

	      visitedScopes.push(violationScope);
	      constantViolations.push(violation);

	      if (violationScope === path.scope) {
	        constantViolations = [violation];
	        break;
	      }
	    }

	    // add back on function constant violations since we can't track calls
	    constantViolations = constantViolations.concat(functionConstantViolations);

	    // push on inferred types of violated paths
	    for (var _iterator2 = (constantViolations /*: Array<NodePath>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var violation = _ref2;

	      types.push(violation.getTypeAnnotation());
	    }
	  }

	  if (types.length) {
	    return t.createUnionTypeAnnotation(types);
	  }
	}

	function getConstantViolationsBefore(binding, path, functions) {
	  var violations = binding.constantViolations.slice();
	  violations.unshift(binding.path);
	  return violations.filter(function (violation) {
	    violation = violation.resolve();
	    var status = violation._guessExecutionStatusRelativeTo(path);
	    if (functions && status === "function") functions.push(violation);
	    return status === "before";
	  });
	}

	function inferAnnotationFromBinaryExpression(name, path) {
	  var operator = path.node.operator;

	  var right = path.get("right").resolve();
	  var left = path.get("left").resolve();

	  var target = undefined;
	  if (left.isIdentifier({ name: name })) {
	    target = right;
	  } else if (right.isIdentifier({ name: name })) {
	    target = left;
	  }
	  if (target) {
	    if (operator === "===") {
	      return target.getTypeAnnotation();
	    } else if (t.BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
	      return t.numberTypeAnnotation();
	    } else {
	      return;
	    }
	  } else {
	    if (operator !== "===") return;
	  }

	  //
	  var typeofPath = undefined;
	  var typePath = undefined;
	  if (left.isUnaryExpression({ operator: "typeof" })) {
	    typeofPath = left;
	    typePath = right;
	  } else if (right.isUnaryExpression({ operator: "typeof" })) {
	    typeofPath = right;
	    typePath = left;
	  }
	  if (!typePath && !typeofPath) return;

	  // ensure that the type path is a Literal
	  typePath = typePath.resolve();
	  if (!typePath.isLiteral()) return;

	  // and that it's a string so we can infer it
	  var typeValue = typePath.node.value;
	  if (typeof typeValue !== "string") return;

	  // and that the argument of the typeof path references us!
	  if (!typeofPath.get("argument").isIdentifier({ name: name })) return;

	  // turn type value into a type annotation
	  return t.createTypeAnnotationBasedOnTypeof(typePath.node.value);
	}

	function getParentConditionalPath(path) {
	  var parentPath = undefined;
	  while (parentPath = path.parentPath) {
	    if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {
	      if (path.key === "test") {
	        return;
	      } else {
	        return parentPath;
	      }
	    } else {
	      path = parentPath;
	    }
	  }
	}

	function getConditionalAnnotation(path, name) {
	  var ifStatement = getParentConditionalPath(path);
	  if (!ifStatement) return;

	  var test = ifStatement.get("test");
	  var paths = [test];
	  var types = [];

	  do {
	    var _path = paths.shift().resolve();

	    if (_path.isLogicalExpression()) {
	      paths.push(_path.get("left"));
	      paths.push(_path.get("right"));
	    }

	    if (_path.isBinaryExpression()) {
	      var type = inferAnnotationFromBinaryExpression(name, _path);
	      if (type) types.push(type);
	    }
	  } while (paths.length);

	  if (types.length) {
	    return {
	      typeAnnotation: t.createUnionTypeAnnotation(types),
	      ifStatement: ifStatement
	    };
	  } else {
	    return getConditionalAnnotation(ifStatement, name);
	  }
	}
	module.exports = exports["default"];

/***/ },
/* 7885 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequire = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;
	exports.VariableDeclarator = VariableDeclarator;
	exports.TypeCastExpression = TypeCastExpression;
	exports.NewExpression = NewExpression;
	exports.TemplateLiteral = TemplateLiteral;
	exports.UnaryExpression = UnaryExpression;
	exports.BinaryExpression = BinaryExpression;
	exports.LogicalExpression = LogicalExpression;
	exports.ConditionalExpression = ConditionalExpression;
	exports.SequenceExpression = SequenceExpression;
	exports.AssignmentExpression = AssignmentExpression;
	exports.UpdateExpression = UpdateExpression;
	exports.StringLiteral = StringLiteral;
	exports.NumericLiteral = NumericLiteral;
	exports.BooleanLiteral = BooleanLiteral;
	exports.NullLiteral = NullLiteral;
	exports.RegExpLiteral = RegExpLiteral;
	exports.ObjectExpression = ObjectExpression;
	exports.ArrayExpression = ArrayExpression;
	exports.RestElement = RestElement;
	exports.CallExpression = CallExpression;
	exports.TaggedTemplateExpression = TaggedTemplateExpression;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_2__);

	var t = _interopRequireWildcard(_babelTypes);

	var _infererReference = __webpack_require__(__webpack_module_template_argument_3__);

	exports.Identifier = _interopRequire(_infererReference);

	function VariableDeclarator() {
	  var id = this.get("id");

	  if (id.isIdentifier()) {
	    return this.get("init").getTypeAnnotation();
	  } else {
	    return;
	  }
	}

	function TypeCastExpression(node) {
	  return node.typeAnnotation;
	}

	TypeCastExpression.validParent = true;

	function NewExpression(node) {
	  if (this.get("callee").isIdentifier()) {
	    // only resolve identifier callee
	    return t.genericTypeAnnotation(node.callee);
	  }
	}

	function TemplateLiteral() {
	  return t.stringTypeAnnotation();
	}

	function UnaryExpression(node) {
	  var operator = node.operator;

	  if (operator === "void") {
	    return t.voidTypeAnnotation();
	  } else if (t.NUMBER_UNARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.numberTypeAnnotation();
	  } else if (t.STRING_UNARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.stringTypeAnnotation();
	  } else if (t.BOOLEAN_UNARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.booleanTypeAnnotation();
	  }
	}

	function BinaryExpression(node) {
	  var operator = node.operator;

	  if (t.NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.numberTypeAnnotation();
	  } else if (t.BOOLEAN_BINARY_OPERATORS.indexOf(operator) >= 0) {
	    return t.booleanTypeAnnotation();
	  } else if (operator === "+") {
	    var right = this.get("right");
	    var left = this.get("left");

	    if (left.isBaseType("number") && right.isBaseType("number")) {
	      // both numbers so this will be a number
	      return t.numberTypeAnnotation();
	    } else if (left.isBaseType("string") || right.isBaseType("string")) {
	      // one is a string so the result will be a string
	      return t.stringTypeAnnotation();
	    }

	    // unsure if left and right are strings or numbers so stay on the safe side
	    return t.unionTypeAnnotation([t.stringTypeAnnotation(), t.numberTypeAnnotation()]);
	  }
	}

	function LogicalExpression() {
	  return t.createUnionTypeAnnotation([this.get("left").getTypeAnnotation(), this.get("right").getTypeAnnotation()]);
	}

	function ConditionalExpression() {
	  return t.createUnionTypeAnnotation([this.get("consequent").getTypeAnnotation(), this.get("alternate").getTypeAnnotation()]);
	}

	function SequenceExpression() {
	  return this.get("expressions").pop().getTypeAnnotation();
	}

	function AssignmentExpression() {
	  return this.get("right").getTypeAnnotation();
	}

	function UpdateExpression(node) {
	  var operator = node.operator;
	  if (operator === "++" || operator === "--") {
	    return t.numberTypeAnnotation();
	  }
	}

	function StringLiteral() {
	  return t.stringTypeAnnotation();
	}

	function NumericLiteral() {
	  return t.numberTypeAnnotation();
	}

	function BooleanLiteral() {
	  return t.booleanTypeAnnotation();
	}

	function NullLiteral() {
	  return t.voidTypeAnnotation();
	}

	function RegExpLiteral() {
	  return t.genericTypeAnnotation(t.identifier("RegExp"));
	}

	function ObjectExpression() {
	  return t.genericTypeAnnotation(t.identifier("Object"));
	}

	function ArrayExpression() {
	  return t.genericTypeAnnotation(t.identifier("Array"));
	}

	function RestElement() {
	  return ArrayExpression();
	}

	RestElement.validParent = true;

	function Func() {
	  return t.genericTypeAnnotation(t.identifier("Function"));
	}

	exports.Function = Func;
	exports.Class = Func;

	function CallExpression() {
	  return resolveCall(this.get("callee"));
	}

	function TaggedTemplateExpression() {
	  return resolveCall(this.get("tag"));
	}

	function resolveCall(callee) {
	  callee = callee.resolve();

	  if (callee.isFunction()) {
	    if (callee.is("async")) {
	      if (callee.is("generator")) {
	        return t.genericTypeAnnotation(t.identifier("AsyncIterator"));
	      } else {
	        return t.genericTypeAnnotation(t.identifier("Promise"));
	      }
	    } else {
	      if (callee.node.returnType) {
	        return callee.node.returnType;
	      } else {
	        // todo: get union type of all return arguments
	      }
	    }
	  }
	}

/***/ },
/* 7886 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	// This file contains methods responsible for introspecting the current path for certain values.

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;
	exports.matchesPattern = matchesPattern;
	exports.has = has;
	exports.isStatic = isStatic;
	exports.isnt = isnt;
	exports.equals = equals;
	exports.isNodeType = isNodeType;
	exports.canHaveVariableDeclarationOrExpression = canHaveVariableDeclarationOrExpression;
	exports.isCompletionRecord = isCompletionRecord;
	exports.isStatementOrBlock = isStatementOrBlock;
	exports.referencesImport = referencesImport;
	exports.getSource = getSource;
	exports.willIMaybeExecuteBefore = willIMaybeExecuteBefore;
	exports._guessExecutionStatusRelativeTo = _guessExecutionStatusRelativeTo;
	exports._guessExecutionStatusRelativeToDifferentFunctions = _guessExecutionStatusRelativeToDifferentFunctions;
	exports.resolve = resolve;
	exports._resolve = _resolve;

	var _lodashCollectionIncludes = __webpack_require__(__webpack_module_template_argument_3__);

	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_4__);

	var t = _interopRequireWildcard(_babelTypes);

	/**
	 * Match the current node if it matches the provided `pattern`.
	 *
	 * For example, given the match `React.createClass` it would match the
	 * parsed nodes of `React.createClass` and `React["createClass"]`.
	 */

	/*:: import type NodePath from "./index";*/
	function matchesPattern(pattern /*: string*/, allowPartial /*:: ?: boolean*/) /*: boolean*/ {
	  // not a member expression
	  if (!this.isMemberExpression()) return false;

	  var parts = pattern.split(".");
	  var search = [this.node];
	  var i = 0;

	  function matches(name) {
	    var part = parts[i];
	    return part === "*" || name === part;
	  }

	  while (search.length) {
	    var node = search.shift();

	    if (allowPartial && i === parts.length) {
	      return true;
	    }

	    if (t.isIdentifier(node)) {
	      // this part doesn't match
	      if (!matches(node.name)) return false;
	    } else if (t.isLiteral(node)) {
	      // this part doesn't match
	      if (!matches(node.value)) return false;
	    } else if (t.isMemberExpression(node)) {
	      if (node.computed && !t.isLiteral(node.property)) {
	        // we can't deal with this
	        return false;
	      } else {
	        search.unshift(node.property);
	        search.unshift(node.object);
	        continue;
	      }
	    } else if (t.isThisExpression(node)) {
	      if (!matches("this")) return false;
	    } else {
	      // we can't deal with this
	      return false;
	    }

	    // too many parts
	    if (++i > parts.length) {
	      return false;
	    }
	  }

	  return i === parts.length;
	}

	/**
	 * Check whether we have the input `key`. If the `key` references an array then we check
	 * if the array has any items, otherwise we just check if it's falsy.
	 */

	function has(key) /*: boolean*/ {
	  var val = this.node && this.node[key];
	  if (val && Array.isArray(val)) {
	    return !!val.length;
	  } else {
	    return !!val;
	  }
	}

	/**
	 * Description
	 */

	function isStatic() {
	  return this.scope.isStatic(this.node);
	}

	/**
	 * Alias of `has`.
	 */

	var is = has;

	exports.is = is;
	/**
	 * Opposite of `has`.
	 */

	function isnt(key) /*: boolean*/ {
	  return !this.has(key);
	}

	/**
	 * Check whether the path node `key` strict equals `value`.
	 */

	function equals(key, value) /*: boolean*/ {
	  return this.node[key] === value;
	}

	/**
	 * Check the type against our stored internal type of the node. This is handy when a node has
	 * been removed yet we still internally know the type and need it to calculate node replacement.
	 */

	function isNodeType(type /*: string*/) /*: boolean*/ {
	  return t.isType(this.type, type);
	}

	/**
	 * This checks whether or now we're in one of the following positions:
	 *
	 *   for (KEY in right);
	 *   for (KEY;;);
	 *
	 * This is because these spots allow VariableDeclarations AND normal expressions so we need
	 * to tell the path replacement that it's ok to replace this with an expression.
	 */

	function canHaveVariableDeclarationOrExpression() {
	  return (this.key === "init" || this.key === "left") && this.parentPath.isFor();
	}

	/**
	 * Check whether the current path references a completion record
	 */

	function isCompletionRecord(allowInsideFunction /*:: ?*/) {
	  var path = this;
	  var first = true;

	  do {
	    var container = path.container;

	    // we're in a function so can't be a completion record
	    if (path.isFunction() && !first) {
	      return !!allowInsideFunction;
	    }

	    first = false;

	    // check to see if we're the last item in the container and if we are
	    // we're a completion record!
	    if (Array.isArray(container) && path.key !== container.length - 1) {
	      return false;
	    }
	  } while ((path = path.parentPath) && !path.isProgram());

	  return true;
	}

	/**
	 * Check whether or not the current `key` allows either a single statement or block statement
	 * so we can explode it if necessary.
	 */

	function isStatementOrBlock() {
	  if (this.parentPath.isLabeledStatement() || t.isBlockStatement(this.container)) {
	    return false;
	  } else {
	    return _lodashCollectionIncludes2["default"](t.STATEMENT_OR_BLOCK_KEYS, this.key);
	  }
	}

	/**
	 * Check if the currently assigned path references the `importName` of `moduleSource`.
	 */

	function referencesImport(moduleSource, importName) {
	  if (!this.isReferencedIdentifier()) return false;

	  var binding = this.scope.getBinding(this.node.name);
	  if (!binding || binding.kind !== "module") return false;

	  var path = binding.path;
	  var parent = path.parentPath;
	  if (!parent.isImportDeclaration()) return false;

	  // check moduleSource
	  if (parent.node.source.value === moduleSource) {
	    if (!importName) return true;
	  } else {
	    return false;
	  }

	  if (path.isImportDefaultSpecifier() && importName === "default") {
	    return true;
	  }

	  if (path.isImportNamespaceSpecifier() && importName === "*") {
	    return true;
	  }

	  if (path.isImportSpecifier() && path.node.imported.name === importName) {
	    return true;
	  }

	  return false;
	}

	/**
	 * Get the source code associated with this node.
	 */

	function getSource() {
	  var node = this.node;
	  if (node.end) {
	    return this.hub.file.code.slice(node.start, node.end);
	  } else {
	    return "";
	  }
	}

	function willIMaybeExecuteBefore(target) {
	  return this._guessExecutionStatusRelativeTo(target) !== "after";
	}

	/**
	 * Given a `target` check the execution status of it relative to the current path.
	 *
	 * "Execution status" simply refers to where or not we **think** this will execuete
	 * before or after the input `target` element.
	 */

	function _guessExecutionStatusRelativeTo(target) {
	  // check if the two paths are in different functions, we can't track execution of these
	  var targetFuncParent = target.scope.getFunctionParent();
	  var selfFuncParent = this.scope.getFunctionParent();

	  if (targetFuncParent !== selfFuncParent) {
	    var _status = this._guessExecutionStatusRelativeToDifferentFunctions(targetFuncParent);
	    if (_status) {
	      return _status;
	    } else {
	      target = targetFuncParent.path;
	    }
	  }

	  var targetPaths = target.getAncestry();
	  if (targetPaths.indexOf(this) >= 0) return "after";

	  var selfPaths = this.getAncestry();

	  // get ancestor where the branches intersect
	  var commonPath = undefined;
	  var targetIndex = undefined;
	  var selfIndex = undefined;
	  for (selfIndex = 0; selfIndex < selfPaths.length; selfIndex++) {
	    var selfPath = selfPaths[selfIndex];
	    targetIndex = targetPaths.indexOf(selfPath);
	    if (targetIndex >= 0) {
	      commonPath = selfPath;
	      break;
	    }
	  }
	  if (!commonPath) {
	    return "before";
	  }

	  // get the relationship paths that associate these nodes to their common ancestor
	  var targetRelationship = targetPaths[targetIndex - 1];
	  var selfRelationship = selfPaths[selfIndex - 1];
	  if (!targetRelationship || !selfRelationship) {
	    return "before";
	  }

	  // container list so let's see which one is after the other
	  if (targetRelationship.listKey && targetRelationship.container === selfRelationship.container) {
	    return targetRelationship.key > selfRelationship.key ? "before" : "after";
	  }

	  // otherwise we're associated by a parent node, check which key comes before the other
	  var targetKeyPosition = t.VISITOR_KEYS[targetRelationship.type].indexOf(targetRelationship.key);
	  var selfKeyPosition = t.VISITOR_KEYS[selfRelationship.type].indexOf(selfRelationship.key);
	  return targetKeyPosition > selfKeyPosition ? "before" : "after";
	}

	function _guessExecutionStatusRelativeToDifferentFunctions(targetFuncParent) {
	  var targetFuncPath = targetFuncParent.path;
	  if (!targetFuncPath.isFunctionDeclaration()) return;

	  // so we're in a completely different function, if this is a function declaration
	  // then we can be a bit smarter and handle cases where the function is either
	  // a. not called at all (part of an export)
	  // b. called directly
	  var binding = targetFuncPath.scope.getBinding(targetFuncPath.node.id.name);

	  // no references!
	  if (!binding.references) return "before";

	  var referencePaths /*: Array<NodePath>*/ = binding.referencePaths;

	  // verify that all of the references are calls
	  for (var _iterator = referencePaths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var path = _ref;

	    if (path.key !== "callee" || !path.parentPath.isCallExpression()) {
	      return;
	    }
	  }

	  var allStatus = undefined;

	  // verify that all the calls have the same execution status
	  for (var _iterator2 = referencePaths, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	    var _ref2;

	    if (_isArray2) {
	      if (_i2 >= _iterator2.length) break;
	      _ref2 = _iterator2[_i2++];
	    } else {
	      _i2 = _iterator2.next();
	      if (_i2.done) break;
	      _ref2 = _i2.value;
	    }

	    var path = _ref2;

	    // if a reference is a child of the function we're checking against then we can
	    // safelty ignore it
	    var childOfFunction = !!path.find(function (path) {
	      return path.node === targetFuncPath.node;
	    });
	    if (childOfFunction) continue;

	    var _status2 = this._guessExecutionStatusRelativeTo(path);

	    if (allStatus) {
	      if (allStatus !== _status2) return;
	    } else {
	      allStatus = _status2;
	    }
	  }

	  return allStatus;
	}

	/**
	 * Resolve a "pointer" `NodePath` to it's absolute path.
	 */

	function resolve(dangerous, resolved) {
	  return this._resolve(dangerous, resolved) || this;
	}

	function _resolve(dangerous, /*:: ?*/resolved /*:: ?*/) /*: ?NodePath*/ {
	  // detect infinite recursion
	  // todo: possibly have a max length on this just to be safe
	  if (resolved && resolved.indexOf(this) >= 0) return;

	  // we store all the paths we've "resolved" in this array to prevent infinite recursion
	  resolved = resolved || [];
	  resolved.push(this);

	  if (this.isVariableDeclarator()) {
	    if (this.get("id").isIdentifier()) {
	      return this.get("init").resolve(dangerous, resolved);
	    } else {
	      // otherwise it's a request for a pattern and that's a bit more tricky
	    }
	  } else if (this.isReferencedIdentifier()) {
	      var binding = this.scope.getBinding(this.node.name);
	      if (!binding) return;

	      // reassigned so we can't really resolve it
	      if (!binding.constant) return;

	      // todo - lookup module in dependency graph
	      if (binding.kind === "module") return;

	      if (binding.path !== this) {
	        return binding.path.resolve(dangerous, resolved);
	      }
	    } else if (this.isTypeCastExpression()) {
	      return this.get("expression").resolve(dangerous, resolved);
	    } else if (dangerous && this.isMemberExpression()) {
	      // this is dangerous, as non-direct target assignments will mutate it's state
	      // making this resolution inaccurate

	      var targetKey = this.toComputedKey();
	      if (!t.isLiteral(targetKey)) return;

	      var targetName = targetKey.value;

	      var target = this.get("object").resolve(dangerous, resolved);

	      if (target.isObjectExpression()) {
	        var props = target.get("properties");
	        for (var _iterator3 = (props /*: Array*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	          var _ref3;

	          if (_isArray3) {
	            if (_i3 >= _iterator3.length) break;
	            _ref3 = _iterator3[_i3++];
	          } else {
	            _i3 = _iterator3.next();
	            if (_i3.done) break;
	            _ref3 = _i3.value;
	          }

	          var prop = _ref3;

	          if (!prop.isProperty()) continue;

	          var key = prop.get("key");

	          // { foo: obj }
	          var match = prop.isnt("computed") && key.isIdentifier({ name: targetName });

	          // { "foo": "obj" } or { ["foo"]: "obj" }
	          match = match || key.isLiteral({ value: targetName });

	          if (match) return prop.get("value").resolve(dangerous, resolved);
	        }
	      } else if (target.isArrayExpression() && !isNaN(+targetName)) {
	        var elems = target.get("elements");
	        var elem = elems[targetName];
	        if (elem) return elem.resolve(dangerous, resolved);
	      }
	    }
	}

/***/ },
/* 7887 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _getIterator = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_3__);

	var t = _interopRequireWildcard(_babelTypes);

	var referenceVisitor = {
	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    if (path.isJSXIdentifier() && _babelTypes.react.isCompatTag(path.node.name)) {
	      return;
	    }

	    // direct references that we need to track to hoist this to the highest scope we can
	    var binding = path.scope.getBinding(path.node.name);
	    if (!binding) return;

	    // this binding isn't accessible from the parent scope so we can safely ignore it
	    // eg. it's in a closure etc
	    if (binding !== state.scope.getBinding(path.node.name)) return;

	    if (binding.constant) {
	      state.bindings[path.node.name] = binding;
	    } else {
	      for (var _iterator = (binding.constantViolations /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var violationPath = _ref;

	        state.breakOnScopePaths = state.breakOnScopePaths.concat(violationPath.getAncestry());
	      }
	    }
	  }
	};

	var PathHoister = (function () {
	  function PathHoister(path, scope) {
	    _classCallCheck(this, PathHoister);

	    this.breakOnScopePaths = [];
	    this.bindings = {};
	    this.scopes = [];
	    this.scope = scope;
	    this.path = path;
	  }

	  PathHoister.prototype.isCompatibleScope = function isCompatibleScope(scope) {
	    for (var key in this.bindings) {
	      var binding = this.bindings[key];
	      if (!scope.bindingIdentifierEquals(key, binding.identifier)) {
	        return false;
	      }
	    }

	    return true;
	  };

	  PathHoister.prototype.getCompatibleScopes = function getCompatibleScopes() {
	    var scope = this.path.scope;
	    do {
	      if (this.isCompatibleScope(scope)) {
	        this.scopes.push(scope);
	      } else {
	        break;
	      }

	      if (this.breakOnScopePaths.indexOf(scope.path) >= 0) {
	        break;
	      }
	    } while (scope = scope.parent);
	  };

	  PathHoister.prototype.getAttachmentPath = function getAttachmentPath() {
	    var scopes = this.scopes;

	    var scope = scopes.pop();
	    if (!scope) return;

	    if (scope.path.isFunction()) {
	      if (this.hasOwnParamBindings(scope)) {
	        // should ignore this scope since it's ourselves
	        if (this.scope === scope) return;

	        // needs to be attached to the body
	        return scope.path.get("body").get("body")[0];
	      } else {
	        // doesn't need to be be attached to this scope
	        return this.getNextScopeStatementParent();
	      }
	    } else if (scope.path.isProgram()) {
	      return this.getNextScopeStatementParent();
	    }
	  };

	  PathHoister.prototype.getNextScopeStatementParent = function getNextScopeStatementParent() {
	    var scope = this.scopes.pop();
	    if (scope) return scope.path.getStatementParent();
	  };

	  PathHoister.prototype.hasOwnParamBindings = function hasOwnParamBindings(scope) {
	    for (var _name in this.bindings) {
	      if (!scope.hasOwnBinding(_name)) continue;

	      var binding = this.bindings[_name];
	      if (binding.kind === "param") return true;
	    }
	    return false;
	  };

	  PathHoister.prototype.run = function run() {
	    var node = this.path.node;
	    if (node._hoisted) return;
	    node._hoisted = true;

	    this.path.traverse(referenceVisitor, this);

	    this.getCompatibleScopes();

	    var attachTo = this.getAttachmentPath();
	    if (!attachTo) return;

	    // don't bother hoisting to the same function as this will cause multiple branches to be evaluated more than once leading to a bad optimisation
	    if (attachTo.getFunctionParent() === this.path.getFunctionParent()) return;

	    var uid = attachTo.scope.generateUidIdentifier("ref");

	    attachTo.insertBefore([t.variableDeclaration("var", [t.variableDeclarator(uid, this.path.node)])]);

	    var parent = this.path.parentPath;

	    if (parent.isJSXElement() && this.path.container === parent.node.children) {
	      // turning the `span` in `<div><span /></div>` to an expression so we need to wrap it with
	      // an expression container
	      uid = t.JSXExpressionContainer(uid);
	    }

	    this.path.replaceWith(uid);
	  };

	  return PathHoister;
	})();

	exports["default"] = PathHoister;
	module.exports = exports["default"];

/***/ },
/* 7888 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_1__);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type NodePath from "../index";*/var ReferencedIdentifier = {
	  types: ["Identifier", "JSXIdentifier"],
	  checkPath: function checkPath(_ref /*: NodePath*/, opts /*:: ?: Object*/) /*: boolean*/ {
	    var node = _ref.node;
	    var parent = _ref.parent;

	    if (!t.isIdentifier(node, opts)) {
	      if (t.isJSXIdentifier(node, opts)) {
	        if (_babelTypes.react.isCompatTag(node.name)) return false;
	      } else {
	        // not a JSXIdentifier or an Identifier
	        return false;
	      }
	    }

	    // check if node is referenced
	    return t.isReferenced(node, parent);
	  }
	};

	exports.ReferencedIdentifier = ReferencedIdentifier;
	var ReferencedMemberExpression = {
	  types: ["MemberExpression"],
	  checkPath: function checkPath(_ref2) {
	    var node = _ref2.node;
	    var parent = _ref2.parent;

	    return t.isMemberExpression(node) && t.isReferenced(node, parent);
	  }
	};

	exports.ReferencedMemberExpression = ReferencedMemberExpression;
	var BindingIdentifier = {
	  types: ["Identifier"],
	  checkPath: function checkPath(_ref3 /*: NodePath*/) /*: boolean*/ {
	    var node = _ref3.node;
	    var parent = _ref3.parent;

	    return t.isIdentifier(node) && t.isBinding(node, parent);
	  }
	};

	exports.BindingIdentifier = BindingIdentifier;
	var Statement = {
	  types: ["Statement"],
	  checkPath: function checkPath(_ref4 /*: NodePath*/) /*: boolean*/ {
	    var node = _ref4.node;
	    var parent = _ref4.parent;

	    if (t.isStatement(node)) {
	      if (t.isVariableDeclaration(node)) {
	        if (t.isForXStatement(parent, { left: node })) return false;
	        if (t.isForStatement(parent, { init: node })) return false;
	      }

	      return true;
	    } else {
	      return false;
	    }
	  }
	};

	exports.Statement = Statement;
	var Expression = {
	  types: ["Expression"],
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    if (path.isIdentifier()) {
	      return path.isReferencedIdentifier();
	    } else {
	      return t.isExpression(path.node);
	    }
	  }
	};

	exports.Expression = Expression;
	var Scope = {
	  types: ["Scopable"],
	  checkPath: function checkPath(path) {
	    return t.isScope(path.node, path.parent);
	  }
	};

	exports.Scope = Scope;
	var Referenced = {
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    return t.isReferenced(path.node, path.parent);
	  }
	};

	exports.Referenced = Referenced;
	var BlockScoped = {
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    return t.isBlockScoped(path.node);
	  }
	};

	exports.BlockScoped = BlockScoped;
	var Var = {
	  types: ["VariableDeclaration"],
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    return t.isVar(path.node);
	  }
	};

	exports.Var = Var;
	var User = {
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    return path.node && !!path.node.loc;
	  }
	};

	exports.User = User;
	var Generated = {
	  checkPath: function checkPath(path /*: NodePath*/) /*: boolean*/ {
	    return !path.isUser();
	  }
	};

	exports.Generated = Generated;
	var Pure = {
	  checkPath: function checkPath(path /*: NodePath*/, opts /*:: ?*/) /*: boolean*/ {
	    return path.scope.isPure(path.node, opts);
	  }
	};

	exports.Pure = Pure;
	var Flow = {
	  types: ["Flow", "ImportDeclaration", "ExportDeclaration"],
	  checkPath: function checkPath(_ref5 /*: NodePath*/) /*: boolean*/ {
	    var node = _ref5.node;

	    if (t.isFlow(node)) {
	      return true;
	    } else if (t.isImportDeclaration(node)) {
	      return node.importKind === "type" || node.importKind === "typeof";
	    } else if (t.isExportDeclaration(node)) {
	      return node.exportKind === "type";
	    } else {
	      return false;
	    }
	  }
	};
	exports.Flow = Flow;

/***/ },
/* 7889 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__) {

	// This file contains methods that modify the path/node in some ways.

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;
	exports.insertBefore = insertBefore;
	exports._containerInsert = _containerInsert;
	exports._containerInsertBefore = _containerInsertBefore;
	exports._containerInsertAfter = _containerInsertAfter;
	exports._maybePopFromStatements = _maybePopFromStatements;
	exports.insertAfter = insertAfter;
	exports.updateSiblingKeys = updateSiblingKeys;
	exports._verifyNodeList = _verifyNodeList;
	exports.unshiftContainer = unshiftContainer;
	exports.pushContainer = pushContainer;
	exports.hoist = hoist;

	var _constants = __webpack_require__(__webpack_module_template_argument_3__);

	var _libHoister = __webpack_require__(__webpack_module_template_argument_4__);

	var _libHoister2 = _interopRequireDefault(_libHoister);

	var _index = __webpack_require__(__webpack_module_template_argument_5__);

	var _index2 = _interopRequireDefault(_index);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_6__);

	var t = _interopRequireWildcard(_babelTypes);

	/**
	 * Insert the provided nodes before the current one.
	 */

	function insertBefore(nodes) {
	  this._assertUnremoved();

	  nodes = this._verifyNodeList(nodes);

	  if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
	    return this.parentPath.insertBefore(nodes);
	  } else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
	    if (this.node) nodes.push(this.node);
	    this.replaceExpressionWithStatements(nodes);
	  } else {
	    this._maybePopFromStatements(nodes);
	    if (Array.isArray(this.container)) {
	      return this._containerInsertBefore(nodes);
	    } else if (this.isStatementOrBlock()) {
	      if (this.node) nodes.push(this.node);
	      this._replaceWith(t.blockStatement(nodes));
	    } else {
	      throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
	    }
	  }

	  return [this];
	}

	function _containerInsert(from, nodes) {
	  this.updateSiblingKeys(from, nodes.length);

	  var paths = [];

	  for (var i = 0; i < nodes.length; i++) {
	    var to = from + i;
	    var node = nodes[i];
	    this.container.splice(to, 0, node);

	    if (this.context) {
	      var _path = this.context.create(this.parent, this.container, to, this.listKey);
	      paths.push(_path);
	    } else {
	      paths.push(_index2["default"].get({
	        parentPath: this,
	        parent: node,
	        container: this.container,
	        listKey: this.listKey,
	        key: to
	      }));
	    }
	  }

	  var contexts = this.contexts;
	  var path = this;
	  while (!contexts.length) {
	    path = path.parentPath;
	    contexts = path.contexts;
	  }

	  for (var _iterator = paths, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var _path2 = _ref;

	    _path2.setScope();
	    _path2.debug(function () {
	      return "Inserted.";
	    });

	    for (var _iterator2 = contexts, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var context = _ref2;

	      context.maybeQueue(_path2, true);
	    }
	  }

	  return paths;
	}

	function _containerInsertBefore(nodes) {
	  return this._containerInsert(this.key, nodes);
	}

	function _containerInsertAfter(nodes) {
	  return this._containerInsert(this.key + 1, nodes);
	}

	function _maybePopFromStatements(nodes) {
	  var last = nodes[nodes.length - 1];
	  var isIdentifier = t.isIdentifier(last) || t.isExpressionStatement(last) && t.isIdentifier(last.expression);

	  if (isIdentifier && !this.isCompletionRecord()) {
	    nodes.pop();
	  }
	}

	/**
	 * Insert the provided nodes after the current one. When inserting nodes after an
	 * expression, ensure that the completion record is correct by pushing the current node.
	 */

	function insertAfter(nodes) {
	  this._assertUnremoved();

	  nodes = this._verifyNodeList(nodes);

	  if (this.parentPath.isExpressionStatement() || this.parentPath.isLabeledStatement()) {
	    return this.parentPath.insertAfter(nodes);
	  } else if (this.isNodeType("Expression") || this.parentPath.isForStatement() && this.key === "init") {
	    if (this.node) {
	      var temp = this.scope.generateDeclaredUidIdentifier();
	      nodes.unshift(t.expressionStatement(t.assignmentExpression("=", temp, this.node)));
	      nodes.push(t.expressionStatement(temp));
	    }
	    this.replaceExpressionWithStatements(nodes);
	  } else {
	    this._maybePopFromStatements(nodes);
	    if (Array.isArray(this.container)) {
	      return this._containerInsertAfter(nodes);
	    } else if (this.isStatementOrBlock()) {
	      if (this.node) nodes.unshift(this.node);
	      this._replaceWith(t.blockStatement(nodes));
	    } else {
	      throw new Error("We don't know what to do with this node type. We were previously a Statement but we can't fit in here?");
	    }
	  }

	  return [this];
	}

	/**
	 * Update all sibling node paths after `fromIndex` by `incrementBy`.
	 */

	function updateSiblingKeys(fromIndex, incrementBy) {
	  if (!this.parent) return;

	  var paths = this.parent[_constants.PATH_CACHE_KEY];
	  for (var i = 0; i < paths.length; i++) {
	    var path = paths[i];
	    if (path.key >= fromIndex) {
	      path.key += incrementBy;
	    }
	  }
	}

	function _verifyNodeList(nodes) {
	  if (!nodes) {
	    return [];
	  }

	  if (nodes.constructor !== Array) {
	    nodes = [nodes];
	  }

	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    var msg = undefined;

	    if (!node) {
	      msg = "has falsy node";
	    } else if (typeof node !== "object") {
	      msg = "contains a non-object node";
	    } else if (!node.type) {
	      msg = "without a type";
	    } else if (node instanceof _index2["default"]) {
	      msg = "has a NodePath when it expected a raw object";
	    }

	    if (msg) {
	      var type = Array.isArray(node) ? "array" : typeof node;
	      throw new Error("Node list " + msg + " with the index of " + i + " and type of " + type);
	    }
	  }

	  return nodes;
	}

	function unshiftContainer(listKey, nodes) {
	  this._assertUnremoved();

	  nodes = this._verifyNodeList(nodes);

	  // get the first path and insert our nodes before it, if it doesn't exist then it
	  // doesn't matter, our nodes will be inserted anyway
	  var path = _index2["default"].get({
	    parentPath: this,
	    parent: this.node,
	    container: this.node[listKey],
	    listKey: listKey,
	    key: 0
	  });

	  return path.insertBefore(nodes);
	}

	function pushContainer(listKey, nodes) {
	  this._assertUnremoved();

	  nodes = this._verifyNodeList(nodes);

	  // get an invisible path that represents the last node + 1 and replace it with our
	  // nodes, effectively inlining it

	  var container = this.node[listKey];
	  var path = _index2["default"].get({
	    parentPath: this,
	    parent: this.node,
	    container: container,
	    listKey: listKey,
	    key: container.length
	  });

	  return path.replaceWithMultiple(nodes);
	}

	/**
	 * Hoist the current node to the highest scope possible and return a UID
	 * referencing it.
	 */

	function hoist() {
	  var scope = arguments.length <= 0 || arguments[0] === undefined ? this.scope : arguments[0];

	  var hoister = new _libHoister2["default"](this, scope);
	  return hoister.run();
	}

/***/ },
/* 7890 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	// This file contains methods responsible for removing a node.

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	exports.remove = remove;
	exports._callRemovalHooks = _callRemovalHooks;
	exports._remove = _remove;
	exports._markRemoved = _markRemoved;
	exports._assertUnremoved = _assertUnremoved;

	var _libRemovalHooks = __webpack_require__(__webpack_module_template_argument_1__);

	function remove() {
	  this._assertUnremoved();

	  this.resync();

	  if (this._callRemovalHooks()) {
	    this._markRemoved();
	    return;
	  }

	  this.shareCommentsWithSiblings();
	  this._remove();
	  this._markRemoved();
	}

	function _callRemovalHooks() {
	  for (var _iterator = (_libRemovalHooks.hooks /*: Array<Function>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var fn = _ref;

	    if (fn(this, this.parentPath)) return true;
	  }
	}

	function _remove() {
	  if (Array.isArray(this.container)) {
	    this.container.splice(this.key, 1);
	    this.updateSiblingKeys(this.key, -1);
	  } else {
	    this._replaceWith(null);
	  }
	}

	function _markRemoved() {
	  this.shouldSkip = true;
	  this.removed = true;
	  this.node = null;
	}

	function _assertUnremoved() {
	  if (this.removed) {
	    throw this.buildCodeFrameError("NodePath has been removed so is read-only.");
	  }
	}

/***/ },
/* 7891 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__) {

	// This file contains methods responsible for replacing a node with another.

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;
	exports.replaceWithMultiple = replaceWithMultiple;
	exports.replaceWithSourceString = replaceWithSourceString;
	exports.replaceWith = replaceWith;
	exports._replaceWith = _replaceWith;
	exports.replaceExpressionWithStatements = replaceExpressionWithStatements;
	exports.replaceInline = replaceInline;

	var _babelCodeFrame = __webpack_require__(__webpack_module_template_argument_3__);

	var _babelCodeFrame2 = _interopRequireDefault(_babelCodeFrame);

	var _index = __webpack_require__(__webpack_module_template_argument_4__);

	var _index2 = _interopRequireDefault(_index);

	var _index3 = __webpack_require__(__webpack_module_template_argument_5__);

	var _index4 = _interopRequireDefault(_index3);

	var _babylon = __webpack_require__(__webpack_module_template_argument_6__);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_7__);

	var t = _interopRequireWildcard(_babelTypes);

	var hoistVariablesVisitor = {
	  Function: function Function(path) {
	    path.skip();
	  },

	  VariableDeclaration: function VariableDeclaration(path) {
	    if (path.node.kind !== "var") return;

	    var bindings = path.getBindingIdentifiers();
	    for (var key in bindings) {
	      path.scope.push({ id: bindings[key] });
	    }

	    var exprs = [];

	    for (var _iterator = (path.node.declarations /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var declar = _ref;

	      if (declar.init) {
	        exprs.push(t.expressionStatement(t.assignmentExpression("=", declar.id, declar.init)));
	      }
	    }

	    path.replaceWithMultiple(exprs);
	  }
	};

	/**
	 * Replace a node with an array of multiple. This method performs the following steps:
	 *
	 *  - Inherit the comments of first provided node with that of the current node.
	 *  - Insert the provided nodes after the current node.
	 *  - Remove the current node.
	 */

	function replaceWithMultiple(nodes /*: Array<Object>*/) {
	  this.resync();

	  nodes = this._verifyNodeList(nodes);
	  t.inheritLeadingComments(nodes[0], this.node);
	  t.inheritTrailingComments(nodes[nodes.length - 1], this.node);
	  this.node = this.container[this.key] = null;
	  this.insertAfter(nodes);

	  if (this.node) {
	    this.requeue();
	  } else {
	    this.remove();
	  }
	}

	/**
	 * Parse a string as an expression and replace the current node with the result.
	 *
	 * NOTE: This is typically not a good idea to use. Building source strings when
	 * transforming ASTs is an antipattern and SHOULD NOT be encouraged. Even if it's
	 * easier to use, your transforms will be extremely brittle.
	 */

	function replaceWithSourceString(replacement) {
	  this.resync();

	  try {
	    replacement = "(" + replacement + ")";
	    replacement = _babylon.parse(replacement);
	  } catch (err) {
	    var loc = err.loc;
	    if (loc) {
	      err.message += " - make sure this is an expression.";
	      err.message += "\n" + _babelCodeFrame2["default"](replacement, loc.line, loc.column + 1);
	    }
	    throw err;
	  }

	  replacement = replacement.program.body[0].expression;
	  _index2["default"].removeProperties(replacement);
	  return this.replaceWith(replacement);
	}

	/**
	 * Replace the current node with another.
	 */

	function replaceWith(replacement) {
	  this.resync();

	  if (this.removed) {
	    throw new Error("You can't replace this node, we've already removed it");
	  }

	  if (replacement instanceof _index4["default"]) {
	    replacement = replacement.node;
	  }

	  if (!replacement) {
	    throw new Error("You passed `path.replaceWith()` a falsy node, use `path.remove()` instead");
	  }

	  if (this.node === replacement) {
	    return;
	  }

	  if (this.isProgram() && !t.isProgram(replacement)) {
	    throw new Error("You can only replace a Program root node with another Program node");
	  }

	  if (Array.isArray(replacement)) {
	    throw new Error("Don't use `path.replaceWith()` with an array of nodes, use `path.replaceWithMultiple()`");
	  }

	  if (typeof replacement === "string") {
	    throw new Error("Don't use `path.replaceWith()` with a source string, use `path.replaceWithSourceString()`");
	  }

	  // replacing a statement with an expression so wrap it in an expression statement
	  if (this.isNodeType("Statement") && t.isExpression(replacement) && !this.canHaveVariableDeclarationOrExpression()) {
	    replacement = t.expressionStatement(replacement);
	  }

	  // replacing an expression with a statement so let's explode it
	  if (this.isNodeType("Expression") && t.isStatement(replacement)) {
	    return this.replaceExpressionWithStatements([replacement]);
	  }

	  var oldNode = this.node;
	  if (oldNode) {
	    t.inheritsComments(replacement, oldNode);
	    t.removeComments(oldNode);
	  }

	  // replace the node
	  this._replaceWith(replacement);
	  this.type = replacement.type;

	  // potentially create new scope
	  this.setScope();

	  // requeue for visiting
	  this.requeue();
	}

	/**
	 * Description
	 */

	function _replaceWith(node) {
	  if (!this.container) {
	    throw new ReferenceError("Container is falsy");
	  }

	  if (this.inList) {
	    t.validate(this.parent, this.key, [node]);
	  } else {
	    t.validate(this.parent, this.key, node);
	  }

	  this.debug(function () {
	    return "Replace with " + (node && node.type);
	  });

	  this.node = this.container[this.key] = node;
	}

	/**
	 * This method takes an array of statements nodes and then explodes it
	 * into expressions. This method retains completion records which is
	 * extremely important to retain original semantics.
	 */

	function replaceExpressionWithStatements(nodes /*: Array<Object>*/) {
	  this.resync();

	  var toSequenceExpression = t.toSequenceExpression(nodes, this.scope);

	  if (t.isSequenceExpression(toSequenceExpression)) {
	    var exprs = toSequenceExpression.expressions;

	    if (exprs.length >= 2 && this.parentPath.isExpressionStatement()) {
	      this._maybePopFromStatements(exprs);
	    }

	    // could be just one element due to the previous maybe popping
	    if (exprs.length === 1) {
	      this.replaceWith(exprs[0]);
	    } else {
	      this.replaceWith(toSequenceExpression);
	    }
	  } else if (toSequenceExpression) {
	    this.replaceWith(toSequenceExpression);
	  } else {
	    var container = t.functionExpression(null, [], t.blockStatement(nodes));
	    container.shadow = true;

	    this.replaceWith(t.callExpression(container, []));
	    this.traverse(hoistVariablesVisitor);

	    // add implicit returns to all ending expression statements
	    var completionRecords /*: Array<NodePath>*/ = this.get("callee").getCompletionRecords();
	    for (var _iterator2 = completionRecords, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var path = _ref2;

	      if (!path.isExpressionStatement()) continue;

	      var loop = path.findParent(function (path) {
	        return path.isLoop();
	      });
	      if (loop) {
	        var callee = this.get("callee");

	        var uid = callee.scope.generateDeclaredUidIdentifier("ret");
	        callee.get("body").pushContainer("body", t.returnStatement(uid));

	        path.get("expression").replaceWith(t.assignmentExpression("=", uid, path.node.expression));
	      } else {
	        path.replaceWith(t.returnStatement(path.node.expression));
	      }
	    }

	    return this.node;
	  }
	}

	function replaceInline(nodes /*: Object | Array<Object>*/) {
	  this.resync();

	  if (Array.isArray(nodes)) {
	    if (Array.isArray(this.container)) {
	      nodes = this._verifyNodeList(nodes);
	      this._containerInsertAfter(nodes);
	      return this.remove();
	    } else {
	      return this.replaceWithMultiple(nodes);
	    }
	  } else {
	    return this.replaceWith(nodes);
	  }
	}

/***/ },
/* 7892 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	/**
	 * This class is responsible for a binding inside of a scope.
	 *
	 * It tracks the following:
	 *
	 *  * Node path.
	 *  * Amount of times referenced by other nodes.
	 *  * Paths to nodes that reassign or modify this binding.
	 *  * The kind of binding. (Is it a parameter, declaration etc)
	 */

	/*:: import type NodePath from "../path";*/
	var Binding = (function () {
	  function Binding(_ref) {
	    var existing = _ref.existing;
	    var identifier = _ref.identifier;
	    var scope = _ref.scope;
	    var path = _ref.path;
	    var kind = _ref.kind;

	    _classCallCheck(this, Binding);

	    this.identifier = identifier;
	    this.scope = scope;
	    this.path = path;
	    this.kind = kind;

	    this.constantViolations = [];
	    this.constant = true;

	    this.referencePaths = [];
	    this.referenced = false;
	    this.references = 0;

	    this.clearValue();

	    if (existing) {
	      this.constantViolations = [].concat(existing.path, existing.constantViolations, this.constantViolations);
	    }
	  }

	  Binding.prototype.deoptValue = function deoptValue() {
	    this.clearValue();
	    this.hasDeoptedValue = true;
	  };

	  Binding.prototype.setValue = function setValue(value /*: any*/) {
	    if (this.hasDeoptedValue) return;
	    this.hasValue = true;
	    this.value = value;
	  };

	  Binding.prototype.clearValue = function clearValue() {
	    this.hasDeoptedValue = false;
	    this.hasValue = false;
	    this.value = null;
	  };

	  /**
	   * Register a constant violation with the provided `path`.
	   */

	  Binding.prototype.reassign = function reassign(path /*: Object*/) {
	    this.constant = false;
	    this.constantViolations.push(path);
	  };

	  /**
	   * Increment the amount of references to this binding.
	   */

	  Binding.prototype.reference = function reference(path /*: NodePath*/) {
	    this.referenced = true;
	    this.references++;
	    this.referencePaths.push(path);
	  };

	  /**
	   * Decrement the amount of references to this binding.
	   */

	  Binding.prototype.dereference = function dereference() {
	    this.references--;
	    this.referenced = !!this.references;
	  };

	  return Binding;
	})();

	exports["default"] = Binding;
	module.exports = exports["default"];

/***/ },
/* 7893 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__, __webpack_module_template_argument_10__, __webpack_module_template_argument_11__, __webpack_module_template_argument_12__, __webpack_module_template_argument_13__, __webpack_module_template_argument_14__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _Symbol = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _getIterator = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _Object$create = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_4__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_5__)["default"];

	exports.__esModule = true;

	var _lodashCollectionIncludes = __webpack_require__(__webpack_module_template_argument_6__);

	var _lodashCollectionIncludes2 = _interopRequireDefault(_lodashCollectionIncludes);

	var _repeating = __webpack_require__(__webpack_module_template_argument_7__);

	var _repeating2 = _interopRequireDefault(_repeating);

	var _libRenamer = __webpack_require__(__webpack_module_template_argument_8__);

	var _libRenamer2 = _interopRequireDefault(_libRenamer);

	var _index = __webpack_require__(__webpack_module_template_argument_9__);

	var _index2 = _interopRequireDefault(_index);

	var _lodashObjectDefaults = __webpack_require__(__webpack_module_template_argument_10__);

	var _lodashObjectDefaults2 = _interopRequireDefault(_lodashObjectDefaults);

	var _babelMessages = __webpack_require__(__webpack_module_template_argument_11__);

	var messages = _interopRequireWildcard(_babelMessages);

	var _binding = __webpack_require__(__webpack_module_template_argument_12__);

	var _binding2 = _interopRequireDefault(_binding);

	var _globals = __webpack_require__(__webpack_module_template_argument_13__);

	var _globals2 = _interopRequireDefault(_globals);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_14__);

	var t = _interopRequireWildcard(_babelTypes);

	//

	/*:: import type NodePath from "../path";*/var CACHE_SINGLE_KEY = _Symbol();
	var CACHE_MULTIPLE_KEY = _Symbol();

	/**
	 * To avoid creating a new Scope instance for each traversal, we maintain a cache on the
	 * node itself containing all scopes it has been associated with.
	 *
	 * We also optimise for the case of there being only a single scope associated with a node.
	 */

	function getCache(node, parentScope, self) {
	  var singleCache = node[CACHE_SINGLE_KEY];

	  if (singleCache) {
	    // we've only ever associated one scope with this node so let's check it
	    if (matchesParent(singleCache, parentScope)) {
	      return singleCache;
	    }
	  } else if (!node[CACHE_MULTIPLE_KEY]) {
	    // no scope has ever been associated with this node
	    node[CACHE_SINGLE_KEY] = self;
	    return;
	  }

	  // looks like we have either a single scope association that was never matched or
	  // multiple assocations, let's find the right one!
	  return getCacheMultiple(node, parentScope, self, singleCache);
	}

	function matchesParent(scope, parentScope) {
	  if (scope.parent === parentScope) {
	    return true;
	  }
	}

	function getCacheMultiple(node, parentScope, self, singleCache) {
	  var scopes /*: Array<Scope>*/ = node[CACHE_MULTIPLE_KEY] = node[CACHE_MULTIPLE_KEY] || [];

	  if (singleCache) {
	    // we have a scope assocation miss so push it onto our scopes
	    scopes.push(singleCache);
	    node[CACHE_SINGLE_KEY] = null;
	  }

	  // loop through and check each scope to see if it matches our parent
	  for (var _iterator = scopes, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var scope = _ref;

	    if (matchesParent(scope, parentScope)) return scope;
	  }

	  scopes.push(self);
	}

	//

	var collectorVisitor = {
	  For: function For(path) {
	    for (var _iterator2 = (t.FOR_INIT_KEYS /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var key = _ref2;

	      var declar = path.get(key);
	      if (declar.isVar()) path.scope.getFunctionParent().registerBinding("var", declar);
	    }
	  },

	  Declaration: function Declaration(path) {
	    // delegate block scope handling to the `blockVariableVisitor`
	    if (path.isBlockScoped()) return;

	    // this will be hit again once we traverse into it after this iteration
	    if (path.isExportDeclaration() && path.get("declaration").isDeclaration()) return;

	    // we've ran into a declaration!
	    path.scope.getFunctionParent().registerDeclaration(path);
	  },

	  ReferencedIdentifier: function ReferencedIdentifier(path, state) {
	    state.references.push(path);
	  },

	  ForXStatement: function ForXStatement(path, state) {
	    var left = path.get("left");
	    if (left.isPattern() || left.isIdentifier()) {
	      state.constantViolations.push(left);
	    }
	  },

	  ExportDeclaration: {
	    exit: function exit(_ref20) {
	      var node = _ref20.node;
	      var scope = _ref20.scope;

	      var declar = node.declaration;
	      if (t.isClassDeclaration(declar) || t.isFunctionDeclaration(declar)) {
	        var _id = declar.id;
	        if (!_id) return;

	        var binding = scope.getBinding(_id.name);
	        if (binding) binding.reference();
	      } else if (t.isVariableDeclaration(declar)) {
	        for (var _iterator3 = (declar.declarations /*: Array<Object>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	          var _ref3;

	          if (_isArray3) {
	            if (_i3 >= _iterator3.length) break;
	            _ref3 = _iterator3[_i3++];
	          } else {
	            _i3 = _iterator3.next();
	            if (_i3.done) break;
	            _ref3 = _i3.value;
	          }

	          var decl = _ref3;

	          var ids = t.getBindingIdentifiers(decl);
	          for (var _name in ids) {
	            var binding = scope.getBinding(_name);
	            if (binding) binding.reference();
	          }
	        }
	      }
	    }
	  },

	  LabeledStatement: function LabeledStatement(path) {
	    path.scope.getProgramParent().addGlobal(path.node);
	    path.scope.getBlockParent().registerDeclaration(path);
	  },

	  AssignmentExpression: function AssignmentExpression(path, state) {
	    state.assignments.push(path);
	  },

	  UpdateExpression: function UpdateExpression(path, state) {
	    state.constantViolations.push(path.get("argument"));
	  },

	  UnaryExpression: function UnaryExpression(path, state) {
	    if (path.node.operator === "delete") {
	      state.constantViolations.push(path.get("argument"));
	    }
	  },

	  BlockScoped: function BlockScoped(path) {
	    var scope = path.scope;
	    if (scope.path === path) scope = scope.parent;
	    scope.getBlockParent().registerDeclaration(path);
	  },

	  ClassDeclaration: function ClassDeclaration(path) {
	    var id = path.node.id;
	    if (!id) return;

	    var name = id.name;
	    path.scope.bindings[name] = path.scope.getBinding(name);
	  },

	  Block: function Block(path) {
	    var paths = path.get("body");
	    for (var _iterator4 = (paths /*: Array*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	      var _ref4;

	      if (_isArray4) {
	        if (_i4 >= _iterator4.length) break;
	        _ref4 = _iterator4[_i4++];
	      } else {
	        _i4 = _iterator4.next();
	        if (_i4.done) break;
	        _ref4 = _i4.value;
	      }

	      var bodyPath = _ref4;

	      if (bodyPath.isFunctionDeclaration()) {
	        path.scope.getBlockParent().registerDeclaration(bodyPath);
	      }
	    }
	  }
	};

	var uid = 0;

	var Scope = (function () {

	  /**
	   * This searches the current "scope" and collects all references/bindings
	   * within.
	   */

	  function Scope(path /*: NodePath*/, parentScope /*:: ?: Scope*/) {
	    _classCallCheck(this, Scope);

	    if (parentScope && parentScope.block === path.node) {
	      return parentScope;
	    }

	    var cached = getCache(path.node, parentScope, this);
	    if (cached) return cached;

	    this.uid = uid++;
	    this.parent = parentScope;
	    this.hub = path.hub;

	    this.parentBlock = path.parent;
	    this.block = path.node;
	    this.path = path;
	  }

	  /**
	   * Globals.
	   */

	  /**
	   * Traverse node with current scope and path.
	   */

	  Scope.prototype.traverse = function traverse(node /*: Object*/, opts /*: Object*/, state /*:: ?*/) {
	    _index2["default"](node, opts, this, state, this.path);
	  };

	  /**
	   * Generate a unique identifier and add it to the current scope.
	   */

	  Scope.prototype.generateDeclaredUidIdentifier = function generateDeclaredUidIdentifier() {
	    var name /*: string*/ = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];

	    var id = this.generateUidIdentifier(name);
	    this.push({ id: id });
	    return id;
	  };

	  /**
	   * Generate a unique identifier.
	   */

	  Scope.prototype.generateUidIdentifier = function generateUidIdentifier() {
	    var name /*: string*/ = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];

	    return t.identifier(this.generateUid(name));
	  };

	  /**
	   * Generate a unique `_id1` binding.
	   */

	  Scope.prototype.generateUid = function generateUid() {
	    var name /*: string*/ = arguments.length <= 0 || arguments[0] === undefined ? "temp" : arguments[0];

	    name = t.toIdentifier(name).replace(/^_+/, "").replace(/[0-9]+$/g, "");

	    var uid = undefined;
	    var i = 0;
	    do {
	      uid = this._generateUid(name, i);
	      i++;
	    } while (this.hasBinding(uid) || this.hasGlobal(uid) || this.hasReference(uid));

	    var program = this.getProgramParent();
	    program.references[uid] = true;
	    program.uids[uid] = true;

	    return uid;
	  };

	  /**
	   * Generate an `_id1`.
	   */

	  Scope.prototype._generateUid = function _generateUid(name, i) {
	    var id = name;
	    if (i > 1) id += i;
	    return "_" + id;
	  };

	  /**
	   * Generate a unique identifier based on a node.
	   */

	  Scope.prototype.generateUidIdentifierBasedOnNode = function generateUidIdentifierBasedOnNode(parent /*: Object*/, defaultName /*:: ?: String*/) /*:  Object*/ {
	    var node = parent;

	    if (t.isAssignmentExpression(parent)) {
	      node = parent.left;
	    } else if (t.isVariableDeclarator(parent)) {
	      node = parent.id;
	    } else if (t.isObjectProperty(node) || t.isObjectMethod(node)) {
	      node = node.key;
	    }

	    var parts = [];

	    var add = function add(node) {
	      if (t.isModuleDeclaration(node)) {
	        if (node.source) {
	          add(node.source);
	        } else if (node.specifiers && node.specifiers.length) {
	          for (var _iterator5 = (node.specifiers /*: Array*/), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	            var _ref5;

	            if (_isArray5) {
	              if (_i5 >= _iterator5.length) break;
	              _ref5 = _iterator5[_i5++];
	            } else {
	              _i5 = _iterator5.next();
	              if (_i5.done) break;
	              _ref5 = _i5.value;
	            }

	            var specifier = _ref5;

	            add(specifier);
	          }
	        } else if (node.declaration) {
	          add(node.declaration);
	        }
	      } else if (t.isModuleSpecifier(node)) {
	        add(node.local);
	      } else if (t.isMemberExpression(node)) {
	        add(node.object);
	        add(node.property);
	      } else if (t.isIdentifier(node)) {
	        parts.push(node.name);
	      } else if (t.isLiteral(node)) {
	        parts.push(node.value);
	      } else if (t.isCallExpression(node)) {
	        add(node.callee);
	      } else if (t.isObjectExpression(node) || t.isObjectPattern(node)) {
	        for (var _iterator6 = (node.properties /*: Array*/), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
	          var _ref6;

	          if (_isArray6) {
	            if (_i6 >= _iterator6.length) break;
	            _ref6 = _iterator6[_i6++];
	          } else {
	            _i6 = _iterator6.next();
	            if (_i6.done) break;
	            _ref6 = _i6.value;
	          }

	          var prop = _ref6;

	          add(prop.key || prop.argument);
	        }
	      }
	    };

	    add(node);

	    var id = parts.join("$");
	    id = id.replace(/^_/, "") || defaultName || "ref";

	    return this.generateUidIdentifier(id.slice(0, 20));
	  };

	  /**
	   * Determine whether evaluating the specific input `node` is a consequenceless reference. ie.
	   * evaluating it wont result in potentially arbitrary code from being ran. The following are
	   * whitelisted and determined not to cause side effects:
	   *
	   *  - `this` expressions
	   *  - `super` expressions
	   *  - Bound identifiers
	   */

	  Scope.prototype.isStatic = function isStatic(node /*: Object*/) /*: boolean*/ {
	    if (t.isThisExpression(node) || t.isSuper(node)) {
	      return true;
	    }

	    if (t.isIdentifier(node)) {
	      var binding = this.getBinding(node.name);
	      if (binding) {
	        return binding.constant;
	      } else {
	        return this.hasBinding(node.name);
	      }
	    }

	    return false;
	  };

	  /**
	   * Possibly generate a memoised identifier if it is not static and has consequences.
	   */

	  Scope.prototype.maybeGenerateMemoised = function maybeGenerateMemoised(node /*: Object*/, dontPush /*:: ?: boolean*/) /*: ?Object*/ {
	    if (this.isStatic(node)) {
	      return null;
	    } else {
	      var _id2 = this.generateUidIdentifierBasedOnNode(node);
	      if (!dontPush) this.push({ id: _id2 });
	      return _id2;
	    }
	  };

	  Scope.prototype.checkBlockScopedCollisions = function checkBlockScopedCollisions(local, kind /*: string*/, name /*: string*/, id /*: Object*/) {
	    // ignore parameters
	    if (kind === "param") return;

	    // ignore hoisted functions if there's also a local let
	    if (kind === "hoisted" && local.kind === "let") return;

	    var duplicate = false;

	    // don't allow duplicate bindings to exist alongside
	    if (!duplicate) duplicate = kind === "let" || local.kind === "let" || local.kind === "const" || local.kind === "module";

	    // don't allow a local of param with a kind of let
	    if (!duplicate) duplicate = local.kind === "param" && (kind === "let" || kind === "const");

	    if (duplicate) {
	      throw this.hub.file.buildCodeFrameError(id, messages.get("scopeDuplicateDeclaration", name), TypeError);
	    }
	  };

	  Scope.prototype.rename = function rename(oldName /*: string*/, newName /*: string*/, block /*:: ?*/) {
	    var binding = this.getBinding(oldName);
	    if (binding) {
	      newName = newName || this.generateUidIdentifier(oldName).name;
	      return new _libRenamer2["default"](binding, oldName, newName).rename(block);
	    }
	  };

	  Scope.prototype._renameFromMap = function _renameFromMap(map, oldName, newName, value) {
	    if (map[oldName]) {
	      map[newName] = value;
	      map[oldName] = null;
	    }
	  };

	  Scope.prototype.dump = function dump() {
	    var sep = _repeating2["default"]("-", 60);
	    console.log(sep);
	    var scope = this;
	    do {
	      console.log("#", scope.block.type);
	      for (var _name2 in scope.bindings) {
	        var binding = scope.bindings[_name2];
	        console.log(" -", _name2, {
	          constant: binding.constant,
	          references: binding.references,
	          violations: binding.constantViolations.length,
	          kind: binding.kind
	        });
	      }
	    } while (scope = scope.parent);
	    console.log(sep);
	  };

	  Scope.prototype.toArray = function toArray(node /*: Object*/, i /*:: ?: number*/) {
	    var file = this.hub.file;

	    if (t.isIdentifier(node)) {
	      var binding = this.getBinding(node.name);
	      if (binding && binding.constant && binding.path.isGenericType("Array")) return node;
	    }

	    if (t.isArrayExpression(node)) {
	      return node;
	    }

	    if (t.isIdentifier(node, { name: "arguments" })) {
	      return t.callExpression(t.memberExpression(t.memberExpression(t.memberExpression(t.identifier("Array"), t.identifier("prototype")), t.identifier("slice")), t.identifier("call")), [node]);
	    }

	    var helperName = "toArray";
	    var args = [node];
	    if (i === true) {
	      helperName = "toConsumableArray";
	    } else if (i) {
	      args.push(t.numericLiteral(i));
	      helperName = "slicedToArray";
	      // TODO if (this.hub.file.isLoose("es6.forOf")) helperName += "-loose";
	    }
	    return t.callExpression(file.addHelper(helperName), args);
	  };

	  Scope.prototype.registerDeclaration = function registerDeclaration(path /*: NodePath*/) {
	    if (path.isLabeledStatement()) {
	      this.registerBinding("label", path);
	    } else if (path.isFunctionDeclaration()) {
	      this.registerBinding("hoisted", path.get("id"), path);
	    } else if (path.isVariableDeclaration()) {
	      var declarations = path.get("declarations");
	      for (var _iterator7 = (declarations /*: Array*/), _isArray7 = Array.isArray(_iterator7), _i7 = 0, _iterator7 = _isArray7 ? _iterator7 : _getIterator(_iterator7);;) {
	        var _ref7;

	        if (_isArray7) {
	          if (_i7 >= _iterator7.length) break;
	          _ref7 = _iterator7[_i7++];
	        } else {
	          _i7 = _iterator7.next();
	          if (_i7.done) break;
	          _ref7 = _i7.value;
	        }

	        var declar = _ref7;

	        this.registerBinding(path.node.kind, declar);
	      }
	    } else if (path.isClassDeclaration()) {
	      this.registerBinding("let", path);
	    } else if (path.isImportDeclaration()) {
	      var specifiers = path.get("specifiers");
	      for (var _iterator8 = (specifiers /*: Array*/), _isArray8 = Array.isArray(_iterator8), _i8 = 0, _iterator8 = _isArray8 ? _iterator8 : _getIterator(_iterator8);;) {
	        var _ref8;

	        if (_isArray8) {
	          if (_i8 >= _iterator8.length) break;
	          _ref8 = _iterator8[_i8++];
	        } else {
	          _i8 = _iterator8.next();
	          if (_i8.done) break;
	          _ref8 = _i8.value;
	        }

	        var specifier = _ref8;

	        this.registerBinding("module", specifier);
	      }
	    } else if (path.isExportDeclaration()) {
	      var declar = path.get("declaration");
	      if (declar.isClassDeclaration() || declar.isFunctionDeclaration() || declar.isVariableDeclaration()) {
	        this.registerDeclaration(declar);
	      }
	    } else {
	      this.registerBinding("unknown", path);
	    }
	  };

	  Scope.prototype.buildUndefinedNode = function buildUndefinedNode() {
	    if (this.hasBinding("undefined")) {
	      return t.unaryExpression("void", t.numericLiteral(0), true);
	    } else {
	      return t.identifier("undefined");
	    }
	  };

	  Scope.prototype.registerConstantViolation = function registerConstantViolation(path /*: NodePath*/) {
	    var ids = path.getBindingIdentifiers();
	    for (var _name3 in ids) {
	      var binding = this.getBinding(_name3);
	      if (binding) binding.reassign(path);
	    }
	  };

	  Scope.prototype.registerBinding = function registerBinding(kind /*: string*/, path /*: NodePath*/) {
	    var bindingPath = arguments.length <= 2 || arguments[2] === undefined ? path : arguments[2];
	    return (function () {
	      if (!kind) throw new ReferenceError("no `kind`");

	      if (path.isVariableDeclaration()) {
	        var declarators /*: Array<NodePath>*/ = path.get("declarations");
	        for (var _iterator9 = declarators, _isArray9 = Array.isArray(_iterator9), _i9 = 0, _iterator9 = _isArray9 ? _iterator9 : _getIterator(_iterator9);;) {
	          var _ref9;

	          if (_isArray9) {
	            if (_i9 >= _iterator9.length) break;
	            _ref9 = _iterator9[_i9++];
	          } else {
	            _i9 = _iterator9.next();
	            if (_i9.done) break;
	            _ref9 = _i9.value;
	          }

	          var declar = _ref9;

	          this.registerBinding(kind, declar);
	        }
	        return;
	      }

	      var parent = this.getProgramParent();
	      var ids = path.getBindingIdentifiers(true);

	      for (var _name4 in ids) {
	        for (var _iterator10 = (ids[_name4] /*: Array<Object>*/), _isArray10 = Array.isArray(_iterator10), _i10 = 0, _iterator10 = _isArray10 ? _iterator10 : _getIterator(_iterator10);;) {
	          var _ref10;

	          if (_isArray10) {
	            if (_i10 >= _iterator10.length) break;
	            _ref10 = _iterator10[_i10++];
	          } else {
	            _i10 = _iterator10.next();
	            if (_i10.done) break;
	            _ref10 = _i10.value;
	          }

	          var _id3 = _ref10;

	          var local = this.getOwnBinding(_name4);
	          if (local) {
	            // same identifier so continue safely as we're likely trying to register it
	            // multiple times
	            if (local.identifier === _id3) continue;

	            this.checkBlockScopedCollisions(local, kind, _name4, _id3);
	          }

	          parent.references[_name4] = true;

	          this.bindings[_name4] = new _binding2["default"]({
	            identifier: _id3,
	            existing: local,
	            scope: this,
	            path: bindingPath,
	            kind: kind
	          });
	        }
	      }
	    }).apply(this, arguments);
	  };

	  Scope.prototype.addGlobal = function addGlobal(node /*: Object*/) {
	    this.globals[node.name] = node;
	  };

	  Scope.prototype.hasUid = function hasUid(name) /*: boolean*/ {
	    var scope = this;

	    do {
	      if (scope.uids[name]) return true;
	    } while (scope = scope.parent);

	    return false;
	  };

	  Scope.prototype.hasGlobal = function hasGlobal(name /*: string*/) /*: boolean*/ {
	    var scope = this;

	    do {
	      if (scope.globals[name]) return true;
	    } while (scope = scope.parent);

	    return false;
	  };

	  Scope.prototype.hasReference = function hasReference(name /*: string*/) /*: boolean*/ {
	    var scope = this;

	    do {
	      if (scope.references[name]) return true;
	    } while (scope = scope.parent);

	    return false;
	  };

	  Scope.prototype.isPure = function isPure(node, constantsOnly /*:: ?: boolean*/) {
	    if (t.isIdentifier(node)) {
	      var binding = this.getBinding(node.name);
	      if (!binding) return false;
	      if (constantsOnly) return binding.constant;
	      return true;
	    } else if (t.isClass(node)) {
	      if (node.superClass && !this.isPure(node.superClass, constantsOnly)) return false;
	      return this.isPure(node.body, constantsOnly);
	    } else if (t.isClassBody(node)) {
	      for (var _iterator11 = node.body, _isArray11 = Array.isArray(_iterator11), _i11 = 0, _iterator11 = _isArray11 ? _iterator11 : _getIterator(_iterator11);;) {
	        var _ref11;

	        if (_isArray11) {
	          if (_i11 >= _iterator11.length) break;
	          _ref11 = _iterator11[_i11++];
	        } else {
	          _i11 = _iterator11.next();
	          if (_i11.done) break;
	          _ref11 = _i11.value;
	        }

	        var method = _ref11;

	        if (!this.isPure(method, constantsOnly)) return false;
	      }
	      return true;
	    } else if (t.isBinary(node)) {
	      return this.isPure(node.left, constantsOnly) && this.isPure(node.right, constantsOnly);
	    } else if (t.isArrayExpression(node)) {
	      for (var _iterator12 = (node.elements /*: Array<Object>*/), _isArray12 = Array.isArray(_iterator12), _i12 = 0, _iterator12 = _isArray12 ? _iterator12 : _getIterator(_iterator12);;) {
	        var _ref12;

	        if (_isArray12) {
	          if (_i12 >= _iterator12.length) break;
	          _ref12 = _iterator12[_i12++];
	        } else {
	          _i12 = _iterator12.next();
	          if (_i12.done) break;
	          _ref12 = _i12.value;
	        }

	        var elem = _ref12;

	        if (!this.isPure(elem, constantsOnly)) return false;
	      }
	      return true;
	    } else if (t.isObjectExpression(node)) {
	      for (var _iterator13 = (node.properties /*: Array<Object>*/), _isArray13 = Array.isArray(_iterator13), _i13 = 0, _iterator13 = _isArray13 ? _iterator13 : _getIterator(_iterator13);;) {
	        var _ref13;

	        if (_isArray13) {
	          if (_i13 >= _iterator13.length) break;
	          _ref13 = _iterator13[_i13++];
	        } else {
	          _i13 = _iterator13.next();
	          if (_i13.done) break;
	          _ref13 = _i13.value;
	        }

	        var prop = _ref13;

	        if (!this.isPure(prop, constantsOnly)) return false;
	      }
	      return true;
	    } else if (t.isClassMethod(node)) {
	      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
	      if (node.kind === "get" || node.kind === "set") return false;
	      return true;
	    } else if (t.isClassProperty(node)) {
	      if (node.computed && !this.isPure(node.key, constantsOnly)) return false;
	      return this.isPure(node.value, constantsOnly);
	    } else {
	      return t.isPureish(node);
	    }
	  };

	  /**
	   * Set some arbitrary data on the current scope.
	   */

	  Scope.prototype.setData = function setData(key, val) {
	    return this.data[key] = val;
	  };

	  /**
	   * Recursively walk up scope tree looking for the data `key`.
	   */

	  Scope.prototype.getData = function getData(key) {
	    var scope = this;
	    do {
	      var data = scope.data[key];
	      if (data != null) return data;
	    } while (scope = scope.parent);
	  };

	  /**
	   * Recursively walk up scope tree looking for the data `key` and if it exists,
	   * remove it.
	   */

	  Scope.prototype.removeData = function removeData(key) {
	    var scope = this;
	    do {
	      var data = scope.data[key];
	      if (data != null) scope.data[key] = null;
	    } while (scope = scope.parent);
	  };

	  Scope.prototype.init = function init() {
	    if (!this.references) this.crawl();
	  };

	  Scope.prototype.crawl = function crawl() {
	    var path = this.path;

	    //

	    this.references = _Object$create(null);
	    this.bindings = _Object$create(null);
	    this.globals = _Object$create(null);
	    this.uids = _Object$create(null);
	    this.data = _Object$create(null);

	    // ForStatement - left, init

	    if (path.isLoop()) {
	      for (var _iterator14 = (t.FOR_INIT_KEYS /*: Array<string>*/), _isArray14 = Array.isArray(_iterator14), _i14 = 0, _iterator14 = _isArray14 ? _iterator14 : _getIterator(_iterator14);;) {
	        var _ref14;

	        if (_isArray14) {
	          if (_i14 >= _iterator14.length) break;
	          _ref14 = _iterator14[_i14++];
	        } else {
	          _i14 = _iterator14.next();
	          if (_i14.done) break;
	          _ref14 = _i14.value;
	        }

	        var key = _ref14;

	        var node = path.get(key);
	        if (node.isBlockScoped()) this.registerBinding(node.node.kind, node);
	      }
	    }

	    // FunctionExpression - id

	    if (path.isFunctionExpression() && path.has("id")) {
	      this.registerBinding("local", path.get("id"), path);
	    }

	    // Class

	    if (path.isClassExpression() && path.has("id")) {
	      this.registerBinding("local", path);
	    }

	    // Function - params, rest

	    if (path.isFunction()) {
	      var params /*: Array<NodePath>*/ = path.get("params");
	      for (var _iterator15 = params, _isArray15 = Array.isArray(_iterator15), _i15 = 0, _iterator15 = _isArray15 ? _iterator15 : _getIterator(_iterator15);;) {
	        var _ref15;

	        if (_isArray15) {
	          if (_i15 >= _iterator15.length) break;
	          _ref15 = _iterator15[_i15++];
	        } else {
	          _i15 = _iterator15.next();
	          if (_i15.done) break;
	          _ref15 = _i15.value;
	        }

	        var param = _ref15;

	        this.registerBinding("param", param);
	      }
	    }

	    // CatchClause - param

	    if (path.isCatchClause()) {
	      this.registerBinding("let", path);
	    }

	    // Program

	    var parent = this.getProgramParent();
	    if (parent.crawling) return;

	    var state = {
	      references: [],
	      constantViolations: [],
	      assignments: []
	    };

	    this.crawling = true;
	    path.traverse(collectorVisitor, state);
	    this.crawling = false;

	    // register assignments
	    for (var _iterator16 = state.assignments, _isArray16 = Array.isArray(_iterator16), _i16 = 0, _iterator16 = _isArray16 ? _iterator16 : _getIterator(_iterator16);;) {
	      var _ref16;

	      if (_isArray16) {
	        if (_i16 >= _iterator16.length) break;
	        _ref16 = _iterator16[_i16++];
	      } else {
	        _i16 = _iterator16.next();
	        if (_i16.done) break;
	        _ref16 = _i16.value;
	      }

	      var _path = _ref16;

	      // register undeclared bindings as globals
	      var ids = _path.getBindingIdentifiers();
	      var programParent = undefined;
	      for (var _name5 in ids) {
	        if (_path.scope.getBinding(_name5)) continue;

	        programParent = programParent || _path.scope.getProgramParent();
	        programParent.addGlobal(ids[_name5]);
	      }

	      // register as constant violation
	      _path.scope.registerConstantViolation(_path);
	    }

	    // register references
	    for (var _iterator17 = state.references, _isArray17 = Array.isArray(_iterator17), _i17 = 0, _iterator17 = _isArray17 ? _iterator17 : _getIterator(_iterator17);;) {
	      var _ref17;

	      if (_isArray17) {
	        if (_i17 >= _iterator17.length) break;
	        _ref17 = _iterator17[_i17++];
	      } else {
	        _i17 = _iterator17.next();
	        if (_i17.done) break;
	        _ref17 = _i17.value;
	      }

	      var ref = _ref17;

	      var binding = ref.scope.getBinding(ref.node.name);
	      if (binding) {
	        binding.reference(ref);
	      } else {
	        ref.scope.getProgramParent().addGlobal(ref.node);
	      }
	    }

	    // register constant violations
	    for (var _iterator18 = state.constantViolations, _isArray18 = Array.isArray(_iterator18), _i18 = 0, _iterator18 = _isArray18 ? _iterator18 : _getIterator(_iterator18);;) {
	      var _ref18;

	      if (_isArray18) {
	        if (_i18 >= _iterator18.length) break;
	        _ref18 = _iterator18[_i18++];
	      } else {
	        _i18 = _iterator18.next();
	        if (_i18.done) break;
	        _ref18 = _i18.value;
	      }

	      var _path2 = _ref18;

	      _path2.scope.registerConstantViolation(_path2);
	    }
	  };

	  Scope.prototype.push = function push(opts /*: {
	                                                id: Object;
	                                                init: ?Object;
	                                                unique: ?boolean;
	                                                _blockHoist: ?number;
	                                                kind: "var" | "let";
	                                              }*/) {
	    var path = this.path;

	    if (!path.isBlockStatement() && !path.isProgram()) {
	      path = this.getBlockParent().path;
	    }

	    if (path.isSwitchStatement()) {
	      path = this.getFunctionParent().path;
	    }

	    if (path.isLoop() || path.isCatchClause() || path.isFunction()) {
	      t.ensureBlock(path.node);
	      path = path.get("body");
	    }

	    var unique = opts.unique;
	    var kind = opts.kind || "var";
	    var blockHoist = opts._blockHoist == null ? 2 : opts._blockHoist;

	    var dataKey = "declaration:" + kind + ":" + blockHoist;
	    var declarPath = !unique && path.getData(dataKey);

	    if (!declarPath) {
	      var declar = t.variableDeclaration(kind, []);
	      declar._generated = true;
	      declar._blockHoist = blockHoist;

	      var _path$unshiftContainer = path.unshiftContainer("body", [declar]);

	      declarPath = _path$unshiftContainer[0];

	      if (!unique) path.setData(dataKey, declarPath);
	    }

	    var declarator = t.variableDeclarator(opts.id, opts.init);
	    declarPath.node.declarations.push(declarator);
	    this.registerBinding(kind, declarPath.get("declarations").pop());
	  };

	  /**
	   * Walk up to the top of the scope tree and get the `Program`.
	   */

	  Scope.prototype.getProgramParent = function getProgramParent() {
	    var scope = this;
	    do {
	      if (scope.path.isProgram()) {
	        return scope;
	      }
	    } while (scope = scope.parent);
	    throw new Error("We couldn't find a Function or Program...");
	  };

	  /**
	   * Walk up the scope tree until we hit either a Function or reach the
	   * very top and hit Program.
	   */

	  Scope.prototype.getFunctionParent = function getFunctionParent() {
	    var scope = this;
	    do {
	      if (scope.path.isFunctionParent()) {
	        return scope;
	      }
	    } while (scope = scope.parent);
	    throw new Error("We couldn't find a Function or Program...");
	  };

	  /**
	   * Walk up the scope tree until we hit either a BlockStatement/Loop/Program/Function/Switch or reach the
	   * very top and hit Program.
	   */

	  Scope.prototype.getBlockParent = function getBlockParent() {
	    var scope = this;
	    do {
	      if (scope.path.isBlockParent()) {
	        return scope;
	      }
	    } while (scope = scope.parent);
	    throw new Error("We couldn't find a BlockStatement, For, Switch, Function, Loop or Program...");
	  };

	  /**
	   * Walks the scope tree and gathers **all** bindings.
	   */

	  Scope.prototype.getAllBindings = function getAllBindings() /*: Object*/ {
	    var ids = _Object$create(null);

	    var scope = this;
	    do {
	      _lodashObjectDefaults2["default"](ids, scope.bindings);
	      scope = scope.parent;
	    } while (scope);

	    return ids;
	  };

	  /**
	   * Walks the scope tree and gathers all declarations of `kind`.
	   */

	  Scope.prototype.getAllBindingsOfKind = function getAllBindingsOfKind() /*: Object*/ {
	    var ids = _Object$create(null);

	    for (var _iterator19 = (arguments /*: Array*/), _isArray19 = Array.isArray(_iterator19), _i19 = 0, _iterator19 = _isArray19 ? _iterator19 : _getIterator(_iterator19);;) {
	      var _ref19;

	      if (_isArray19) {
	        if (_i19 >= _iterator19.length) break;
	        _ref19 = _iterator19[_i19++];
	      } else {
	        _i19 = _iterator19.next();
	        if (_i19.done) break;
	        _ref19 = _i19.value;
	      }

	      var kind = _ref19;

	      var scope = this;
	      do {
	        for (var _name6 in scope.bindings) {
	          var binding = scope.bindings[_name6];
	          if (binding.kind === kind) ids[_name6] = binding;
	        }
	        scope = scope.parent;
	      } while (scope);
	    }

	    return ids;
	  };

	  Scope.prototype.bindingIdentifierEquals = function bindingIdentifierEquals(name /*: string*/, node /*: Object*/) /*: boolean*/ {
	    return this.getBindingIdentifier(name) === node;
	  };

	  Scope.prototype.getBinding = function getBinding(name /*: string*/) {
	    var scope = this;

	    do {
	      var binding = scope.getOwnBinding(name);
	      if (binding) return binding;
	    } while (scope = scope.parent);
	  };

	  Scope.prototype.getOwnBinding = function getOwnBinding(name /*: string*/) {
	    return this.bindings[name];
	  };

	  Scope.prototype.getBindingIdentifier = function getBindingIdentifier(name /*: string*/) {
	    var info = this.getBinding(name);
	    return info && info.identifier;
	  };

	  Scope.prototype.getOwnBindingIdentifier = function getOwnBindingIdentifier(name /*: string*/) {
	    var binding = this.bindings[name];
	    return binding && binding.identifier;
	  };

	  Scope.prototype.hasOwnBinding = function hasOwnBinding(name /*: string*/) {
	    return !!this.getOwnBinding(name);
	  };

	  Scope.prototype.hasBinding = function hasBinding(name /*: string*/, noGlobals /*:: ?*/) {
	    if (!name) return false;
	    if (this.hasOwnBinding(name)) return true;
	    if (this.parentHasBinding(name, noGlobals)) return true;
	    if (this.hasUid(name)) return true;
	    if (!noGlobals && _lodashCollectionIncludes2["default"](Scope.globals, name)) return true;
	    if (!noGlobals && _lodashCollectionIncludes2["default"](Scope.contextVariables, name)) return true;
	    return false;
	  };

	  Scope.prototype.parentHasBinding = function parentHasBinding(name /*: string*/, noGlobals /*:: ?*/) {
	    return this.parent && this.parent.hasBinding(name, noGlobals);
	  };

	  /**
	   * Move a binding of `name` to another `scope`.
	   */

	  Scope.prototype.moveBindingTo = function moveBindingTo(name, scope) {
	    var info = this.getBinding(name);
	    if (info) {
	      info.scope.removeOwnBinding(name);
	      info.scope = scope;
	      scope.bindings[name] = info;
	    }
	  };

	  Scope.prototype.removeOwnBinding = function removeOwnBinding(name /*: string*/) {
	    delete this.bindings[name];
	  };

	  Scope.prototype.removeBinding = function removeBinding(name /*: string*/) {
	    // clear literal binding
	    var info = this.getBinding(name);
	    if (info) {
	      info.scope.removeOwnBinding(name);
	    }

	    // clear uids with this name - https://github.com/babel/babel/issues/2101
	    var scope = this;
	    do {
	      if (scope.uids[name]) {
	        scope.uids[name] = false;
	      }
	    } while (scope = scope.parent);
	  };

	  return Scope;
	})();

	exports["default"] = Scope;
	module.exports = exports["default"];

	/**
	 * Variables available in current context.
	 */

/***/ },
/* 7894 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;

	var _binding = __webpack_require__(__webpack_module_template_argument_3__);

	var _binding2 = _interopRequireDefault(_binding);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_4__);

	var t = _interopRequireWildcard(_babelTypes);

	var renameVisitor = {
	  ReferencedIdentifier: function ReferencedIdentifier(_ref, state) {
	    var node = _ref.node;

	    if (node.name === state.oldName) {
	      node.name = state.newName;
	    }
	  },

	  Scope: function Scope(path, state) {
	    if (!path.scope.bindingIdentifierEquals(state.oldName, state.binding.identifier)) {
	      path.skip();
	    }
	  },

	  "AssignmentExpression|Declaration": function AssignmentExpressionDeclaration(path, state) {
	    var ids = path.getBindingIdentifiers();

	    for (var _name in ids) {
	      if (_name === state.oldName) ids[_name].name = state.newName;
	    }
	  }
	};

	var Renamer = (function () {
	  function Renamer(binding /*: Binding*/, oldName /*: string*/, newName /*: string*/) {
	    _classCallCheck(this, Renamer);

	    this.newName = newName;
	    this.oldName = oldName;
	    this.binding = binding;
	  }

	  Renamer.prototype.maybeConvertFromExportDeclaration = function maybeConvertFromExportDeclaration(parentDeclar) {
	    var exportDeclar = parentDeclar.parentPath.isExportDeclaration() && parentDeclar.parentPath;
	    if (!exportDeclar) return;

	    // build specifiers that point back to this export declaration
	    var isDefault = exportDeclar.isExportDefaultDeclaration();
	    var bindingIdentifiers = parentDeclar.getOuterBindingIdentifiers();
	    var specifiers = [];

	    for (var _name2 in bindingIdentifiers) {
	      var localName = _name2 === this.oldName ? this.newName : _name2;
	      var exportedName = isDefault ? "default" : _name2;
	      specifiers.push(t.exportSpecifier(t.identifier(localName), t.identifier(exportedName)));
	    }

	    var aliasDeclar = t.exportNamedDeclaration(null, specifiers);

	    // hoist to the top if it's a function
	    if (parentDeclar.isFunctionDeclaration()) {
	      aliasDeclar._blockHoist = 3;
	    }

	    exportDeclar.insertAfter(aliasDeclar);
	    exportDeclar.replaceWith(parentDeclar.node);
	  };

	  Renamer.prototype.maybeConvertFromClassFunctionDeclaration = function maybeConvertFromClassFunctionDeclaration(path) {
	    return; // TODO

	    // retain the `name` of a class/function declaration

	    if (!path.isFunctionDeclaration() && !path.isClassDeclaration()) return;
	    if (this.binding.kind !== "hoisted") return;

	    path.node.id = t.identifier(this.oldName);
	    path.node._blockHoist = 3;

	    path.replaceWith(t.variableDeclaration("let", [t.variableDeclarator(t.identifier(this.newName), t.toExpression(path.node))]));
	  };

	  Renamer.prototype.maybeConvertFromClassFunctionExpression = function maybeConvertFromClassFunctionExpression(path) {
	    return; // TODO

	    // retain the `name` of a class/function expression

	    if (!path.isFunctionExpression() && !path.isClassExpression()) return;
	    if (this.binding.kind !== "local") return;

	    path.node.id = t.identifier(this.oldName);

	    this.binding.scope.parent.push({
	      id: t.identifier(this.newName)
	    });

	    path.replaceWith(t.assignmentExpression("=", t.identifier(this.newName), path.node));
	  };

	  Renamer.prototype.rename = function rename(block /*:: ?*/) {
	    var binding = this.binding;
	    var oldName = this.oldName;
	    var newName = this.newName;
	    var scope = binding.scope;
	    var path = binding.path;

	    var parentDeclar = path.find(function (path) {
	      return path.isDeclaration() || path.isFunctionExpression();
	    });
	    if (parentDeclar) {
	      this.maybeConvertFromExportDeclaration(parentDeclar);
	    }

	    scope.traverse(block || scope.block, renameVisitor, this);

	    if (!block) {
	      scope.removeOwnBinding(oldName);
	      scope.bindings[newName] = binding;
	      this.binding.identifier.name = newName;
	    }

	    if (binding.type === "hoisted") {
	      // https://github.com/babel/babel/issues/2435
	      // todo: hoist and convert function to a let
	    }

	    if (parentDeclar) {
	      this.maybeConvertFromClassFunctionDeclaration(parentDeclar);
	      this.maybeConvertFromClassFunctionExpression(parentDeclar);
	    }
	  };

	  return Renamer;
	})();

	exports["default"] = Renamer;
	module.exports = exports["default"];

/***/ },
/* 7895 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _Object$keys = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	exports.__esModule = true;
	exports.explode = explode;
	exports.verify = verify;
	exports.merge = merge;

	var _pathLibVirtualTypes = __webpack_require__(__webpack_module_template_argument_4__);

	var virtualTypes = _interopRequireWildcard(_pathLibVirtualTypes);

	var _babelMessages = __webpack_require__(__webpack_module_template_argument_5__);

	var messages = _interopRequireWildcard(_babelMessages);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_6__);

	var t = _interopRequireWildcard(_babelTypes);

	var _lodashLangClone = __webpack_require__(__webpack_module_template_argument_7__);

	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);

	function explode(visitor) {
	  if (visitor._exploded) return visitor;
	  visitor._exploded = true;

	  // normalise pipes
	  for (var nodeType in visitor) {
	    if (shouldIgnoreKey(nodeType)) continue;

	    var parts /*: Array<string>*/ = nodeType.split("|");
	    if (parts.length === 1) continue;

	    var fns = visitor[nodeType];
	    delete visitor[nodeType];

	    for (var _iterator = parts, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var part = _ref;

	      visitor[part] = fns;
	    }
	  }

	  // verify data structure
	  verify(visitor);

	  // make sure there's no __esModule type since this is because we're using loose mode
	  // and it sets __esModule to be enumerable on all modules :(
	  delete visitor.__esModule;

	  // ensure visitors are objects
	  ensureEntranceObjects(visitor);

	  // ensure enter/exit callbacks are arrays
	  ensureCallbackArrays(visitor);

	  // add type wrappers
	  for (var _iterator2 = (_Object$keys(visitor) /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	    var _ref2;

	    if (_isArray2) {
	      if (_i2 >= _iterator2.length) break;
	      _ref2 = _iterator2[_i2++];
	    } else {
	      _i2 = _iterator2.next();
	      if (_i2.done) break;
	      _ref2 = _i2.value;
	    }

	    var nodeType = _ref2;

	    if (shouldIgnoreKey(nodeType)) continue;

	    var wrapper = virtualTypes[nodeType];
	    if (!wrapper) continue;

	    // wrap all the functions
	    var fns = visitor[nodeType];
	    for (var type in fns) {
	      fns[type] = wrapCheck(wrapper, fns[type]);
	    }

	    // clear it from the visitor
	    delete visitor[nodeType];

	    if (wrapper.types) {
	      for (var _iterator3 = (wrapper.types /*: Array<string>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	        var _ref3;

	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }

	        var type = _ref3;

	        // merge the visitor if necessary or just put it back in
	        if (visitor[type]) {
	          mergePair(visitor[type], fns);
	        } else {
	          visitor[type] = fns;
	        }
	      }
	    } else {
	      mergePair(visitor, fns);
	    }
	  }

	  // add aliases
	  for (var nodeType in visitor) {
	    if (shouldIgnoreKey(nodeType)) continue;

	    var fns = visitor[nodeType];

	    var aliases /*: ?Array<string>*/ = t.FLIPPED_ALIAS_KEYS[nodeType];

	    var deprecratedKey = t.DEPRECATED_KEYS[nodeType];
	    if (deprecratedKey) {
	      console.trace("Visitor defined for " + nodeType + " but it has been renamed to " + deprecratedKey);
	      aliases = [deprecratedKey];
	    }

	    if (!aliases) continue;

	    // clear it from the visitor
	    delete visitor[nodeType];

	    for (var _iterator4 = aliases, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	      var _ref4;

	      if (_isArray4) {
	        if (_i4 >= _iterator4.length) break;
	        _ref4 = _iterator4[_i4++];
	      } else {
	        _i4 = _iterator4.next();
	        if (_i4.done) break;
	        _ref4 = _i4.value;
	      }

	      var alias = _ref4;

	      var existing = visitor[alias];
	      if (existing) {
	        mergePair(existing, fns);
	      } else {
	        visitor[alias] = _lodashLangClone2["default"](fns);
	      }
	    }
	  }

	  for (var nodeType in visitor) {
	    if (shouldIgnoreKey(nodeType)) continue;

	    ensureCallbackArrays(visitor[nodeType]);
	  }

	  return visitor;
	}

	function verify(visitor) {
	  if (visitor._verified) return;

	  if (typeof visitor === "function") {
	    throw new Error(messages.get("traverseVerifyRootFunction"));
	  }

	  for (var nodeType in visitor) {
	    if (nodeType === "enter" || nodeType === "exit") {
	      validateVisitorMethods(nodeType, visitor[nodeType]);
	    }

	    if (shouldIgnoreKey(nodeType)) continue;

	    if (t.TYPES.indexOf(nodeType) < 0) {
	      throw new Error(messages.get("traverseVerifyNodeType", nodeType));
	    }

	    var visitors = visitor[nodeType];
	    if (typeof visitors === "object") {
	      for (var visitorKey in visitors) {
	        if (visitorKey === "enter" || visitorKey === "exit") {
	          // verify that it just contains functions
	          validateVisitorMethods(nodeType + "." + visitorKey, visitors[visitorKey]);
	        } else {
	          throw new Error(messages.get("traverseVerifyVisitorProperty", nodeType, visitorKey));
	        }
	      }
	    }
	  }

	  visitor._verified = true;
	}

	function validateVisitorMethods(path, val) {
	  var fns = [].concat(val);
	  for (var _iterator5 = fns, _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	    var _ref5;

	    if (_isArray5) {
	      if (_i5 >= _iterator5.length) break;
	      _ref5 = _iterator5[_i5++];
	    } else {
	      _i5 = _iterator5.next();
	      if (_i5.done) break;
	      _ref5 = _i5.value;
	    }

	    var fn = _ref5;

	    if (typeof fn !== "function") {
	      throw new TypeError("Non-function found defined in " + path + " with type " + typeof fn);
	    }
	  }
	}

	function merge(visitors /*: Array*/) {
	  var states /*: Array*/ = arguments.length <= 1 || arguments[1] === undefined ? [] : arguments[1];

	  var rootVisitor = {};

	  for (var i = 0; i < visitors.length; i++) {
	    var visitor = visitors[i];
	    var state = states[i];

	    explode(visitor);

	    for (var type in visitor) {
	      var visitorType = visitor[type];

	      // if we have state then overload the callbacks to take it
	      if (state) visitorType = wrapWithState(visitorType, state);

	      var nodeVisitor = rootVisitor[type] = rootVisitor[type] || {};
	      mergePair(nodeVisitor, visitorType);
	    }
	  }

	  return rootVisitor;
	}

	function wrapWithState(oldVisitor, state) {
	  var newVisitor = {};

	  for (var key in oldVisitor) {
	    var fns = oldVisitor[key];

	    // not an enter/exit array of callbacks
	    if (!Array.isArray(fns)) continue;

	    fns = fns.map(function (fn) {
	      var newFn = function newFn(path) {
	        return fn.call(state, path, state);
	      };
	      newFn.toString = function () {
	        return fn.toString();
	      };
	      return newFn;
	    });

	    newVisitor[key] = fns;
	  }

	  return newVisitor;
	}

	function ensureEntranceObjects(obj) {
	  for (var key in obj) {
	    if (shouldIgnoreKey(key)) continue;

	    var fns = obj[key];
	    if (typeof fns === "function") {
	      obj[key] = { enter: fns };
	    }
	  }
	}

	function ensureCallbackArrays(obj) {
	  if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];
	  if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];
	}

	function wrapCheck(wrapper, fn) {
	  var newFn = function newFn(path) {
	    if (wrapper.checkPath(path)) {
	      return fn.apply(this, arguments);
	    }
	  };
	  newFn.toString = function () {
	    return fn.toString();
	  };
	  return newFn;
	}

	function shouldIgnoreKey(key) {
	  // internal/hidden key
	  if (key[0] === "_") return true;

	  // ignore function keys
	  if (key === "enter" || key === "exit" || key === "shouldSkip") return true;

	  // ignore other options
	  if (key === "blacklist" || key === "noScope" || key === "skipKeys") return true;

	  return false;
	}

	function mergePair(dest, src) {
	  for (var key in src) {
	    dest[key] = [].concat(dest[key] || [], src[key]);
	  }
	}

/***/ },
/* 7896 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = __webpack_require__(__webpack_module_template_argument_0__);


/***/ },
/* 7897 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	"use strict";

	var _Symbol$for = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	var STATEMENT_OR_BLOCK_KEYS = ["consequent", "body", "alternate"];
	exports.STATEMENT_OR_BLOCK_KEYS = STATEMENT_OR_BLOCK_KEYS;
	var FLATTENABLE_KEYS = ["body", "expressions"];
	exports.FLATTENABLE_KEYS = FLATTENABLE_KEYS;
	var FOR_INIT_KEYS = ["left", "init"];
	exports.FOR_INIT_KEYS = FOR_INIT_KEYS;
	var COMMENT_KEYS = ["leadingComments", "trailingComments", "innerComments"];

	exports.COMMENT_KEYS = COMMENT_KEYS;
	var LOGICAL_OPERATORS = ["||", "&&"];
	exports.LOGICAL_OPERATORS = LOGICAL_OPERATORS;
	var UPDATE_OPERATORS = ["++", "--"];

	exports.UPDATE_OPERATORS = UPDATE_OPERATORS;
	var BOOLEAN_NUMBER_BINARY_OPERATORS = [">", "<", ">=", "<="];
	exports.BOOLEAN_NUMBER_BINARY_OPERATORS = BOOLEAN_NUMBER_BINARY_OPERATORS;
	var EQUALITY_BINARY_OPERATORS = ["==", "===", "!=", "!=="];
	exports.EQUALITY_BINARY_OPERATORS = EQUALITY_BINARY_OPERATORS;
	var COMPARISON_BINARY_OPERATORS = [].concat(EQUALITY_BINARY_OPERATORS, ["in", "instanceof"]);
	exports.COMPARISON_BINARY_OPERATORS = COMPARISON_BINARY_OPERATORS;
	var BOOLEAN_BINARY_OPERATORS = [].concat(COMPARISON_BINARY_OPERATORS, BOOLEAN_NUMBER_BINARY_OPERATORS);
	exports.BOOLEAN_BINARY_OPERATORS = BOOLEAN_BINARY_OPERATORS;
	var NUMBER_BINARY_OPERATORS = ["-", "/", "%", "*", "**", "&", "|", ">>", ">>>", "<<", "^"];
	exports.NUMBER_BINARY_OPERATORS = NUMBER_BINARY_OPERATORS;
	var BINARY_OPERATORS = ["+"].concat(NUMBER_BINARY_OPERATORS, BOOLEAN_BINARY_OPERATORS);

	exports.BINARY_OPERATORS = BINARY_OPERATORS;
	var BOOLEAN_UNARY_OPERATORS = ["delete", "!"];
	exports.BOOLEAN_UNARY_OPERATORS = BOOLEAN_UNARY_OPERATORS;
	var NUMBER_UNARY_OPERATORS = ["+", "-", "++", "--", "~"];
	exports.NUMBER_UNARY_OPERATORS = NUMBER_UNARY_OPERATORS;
	var STRING_UNARY_OPERATORS = ["typeof"];
	exports.STRING_UNARY_OPERATORS = STRING_UNARY_OPERATORS;
	var UNARY_OPERATORS = ["void"].concat(BOOLEAN_UNARY_OPERATORS, NUMBER_UNARY_OPERATORS, STRING_UNARY_OPERATORS);

	exports.UNARY_OPERATORS = UNARY_OPERATORS;
	var INHERIT_KEYS = {
	  optional: ["typeAnnotation", "typeParameters", "returnType"],
	  force: ["start", "loc", "end"]
	};

	exports.INHERIT_KEYS = INHERIT_KEYS;
	var BLOCK_SCOPED_SYMBOL = _Symbol$for("var used to be block scoped");
	exports.BLOCK_SCOPED_SYMBOL = BLOCK_SCOPED_SYMBOL;

/***/ },
/* 7898 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _Number$MAX_SAFE_INTEGER = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	exports.__esModule = true;
	exports.toComputedKey = toComputedKey;
	exports.toSequenceExpression = toSequenceExpression;
	exports.toKeyAlias = toKeyAlias;
	exports.toIdentifier = toIdentifier;
	exports.toBindingIdentifierName = toBindingIdentifierName;
	exports.toStatement = toStatement;
	exports.toExpression = toExpression;
	exports.toBlock = toBlock;
	exports.valueToNode = valueToNode;

	var _lodashLangIsPlainObject = __webpack_require__(__webpack_module_template_argument_4__);

	var _lodashLangIsPlainObject2 = _interopRequireDefault(_lodashLangIsPlainObject);

	var _lodashLangIsNumber = __webpack_require__(__webpack_module_template_argument_5__);

	var _lodashLangIsNumber2 = _interopRequireDefault(_lodashLangIsNumber);

	var _lodashLangIsRegExp = __webpack_require__(__webpack_module_template_argument_6__);

	var _lodashLangIsRegExp2 = _interopRequireDefault(_lodashLangIsRegExp);

	var _lodashLangIsString = __webpack_require__(__webpack_module_template_argument_7__);

	var _lodashLangIsString2 = _interopRequireDefault(_lodashLangIsString);

	var _babelTraverse = __webpack_require__(__webpack_module_template_argument_8__);

	var _babelTraverse2 = _interopRequireDefault(_babelTraverse);

	var _index = __webpack_require__(__webpack_module_template_argument_9__);

	var t = _interopRequireWildcard(_index);

	/*:: import type { Scope } from "babel-traverse";*/
	function toComputedKey(node /*: Object*/) /*: Object*/ {
	  var key /*: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? node.key || node.property : arguments[1];
	  return (function () {
	    if (!node.computed) {
	      if (t.isIdentifier(key)) key = t.stringLiteral(key.name);
	    }
	    return key;
	  })();
	}

	/**
	 * Turn an array of statement `nodes` into a `SequenceExpression`.
	 *
	 * Variable declarations are turned into simple assignments and their
	 * declarations hoisted to the top of the current scope.
	 *
	 * Expression statements are just resolved to their expression.
	 */

	function toSequenceExpression(nodes /*: Array<Object>*/, scope /*: Scope*/) /*: ?Object*/ {
	  if (!nodes || !nodes.length) return;

	  var declars = [];
	  var bailed = false;

	  var result = convert(nodes);
	  if (bailed) return;

	  for (var i = 0; i < declars.length; i++) {
	    scope.push(declars[i]);
	  }

	  return result;

	  function convert(nodes) {
	    var ensureLastUndefined = false;
	    var exprs = [];

	    for (var _iterator = (nodes /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var node = _ref;

	      if (t.isExpression(node)) {
	        exprs.push(node);
	      } else if (t.isExpressionStatement(node)) {
	        exprs.push(node.expression);
	      } else if (t.isVariableDeclaration(node)) {
	        if (node.kind !== "var") return bailed = true; // bailed

	        for (var _iterator2 = (node.declarations /*: Array*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	          var _ref2;

	          if (_isArray2) {
	            if (_i2 >= _iterator2.length) break;
	            _ref2 = _iterator2[_i2++];
	          } else {
	            _i2 = _iterator2.next();
	            if (_i2.done) break;
	            _ref2 = _i2.value;
	          }

	          var declar = _ref2;

	          var bindings = t.getBindingIdentifiers(declar);
	          for (var key in bindings) {
	            declars.push({
	              kind: node.kind,
	              id: bindings[key]
	            });
	          }

	          if (declar.init) {
	            exprs.push(t.assignmentExpression("=", declar.id, declar.init));
	          }
	        }

	        ensureLastUndefined = true;
	        continue;
	      } else if (t.isIfStatement(node)) {
	        var consequent = node.consequent ? convert([node.consequent]) : scope.buildUndefinedNode();
	        var alternate = node.alternate ? convert([node.alternate]) : scope.buildUndefinedNode();
	        if (!consequent || !alternate) return bailed = true;

	        exprs.push(t.conditionalExpression(node.test, consequent, alternate));
	      } else if (t.isBlockStatement(node)) {
	        exprs.push(convert(node.body));
	      } else if (t.isEmptyStatement(node)) {
	        // empty statement so ensure the last item is undefined if we're last
	        ensureLastUndefined = true;
	        continue;
	      } else {
	        // bailed, we can't turn this statement into an expression
	        return bailed = true;
	      }

	      ensureLastUndefined = false;
	    }

	    if (ensureLastUndefined || exprs.length === 0) {
	      exprs.push(scope.buildUndefinedNode());
	    }

	    //

	    if (exprs.length === 1) {
	      return exprs[0];
	    } else {
	      return t.sequenceExpression(exprs);
	    }
	  }
	}

	function toKeyAlias(node /*: Object*/) /*: string*/ {
	  var key /*: Object*/ = arguments.length <= 1 || arguments[1] === undefined ? node.key : arguments[1];
	  return (function () {
	    var alias = undefined;

	    if (node.kind === "method") {
	      return toKeyAlias.increment() + "";
	    } else if (t.isIdentifier(key)) {
	      alias = key.name;
	    } else if (t.isStringLiteral(key)) {
	      alias = JSON.stringify(key.value);
	    } else {
	      alias = JSON.stringify(_babelTraverse2["default"].removeProperties(t.cloneDeep(key)));
	    }

	    if (node.computed) {
	      alias = "[" + alias + "]";
	    }

	    if (node["static"]) {
	      alias = "static:" + alias;
	    }

	    return alias;
	  })();
	}

	toKeyAlias.uid = 0;

	toKeyAlias.increment = function () {
	  if (toKeyAlias.uid >= _Number$MAX_SAFE_INTEGER) {
	    return toKeyAlias.uid = 0;
	  } else {
	    return toKeyAlias.uid++;
	  }
	};

	function toIdentifier(name /*: string*/) /*: string*/ {
	  name = name + "";

	  // replace all non-valid identifiers with dashes
	  name = name.replace(/[^a-zA-Z0-9$_]/g, "-");

	  // remove all dashes and numbers from start of name
	  name = name.replace(/^[-0-9]+/, "");

	  // camel case
	  name = name.replace(/[-\s]+(.)?/g, function (match, c) {
	    return c ? c.toUpperCase() : "";
	  });

	  if (!t.isValidIdentifier(name)) {
	    name = "_" + name;
	  }

	  return name || "_";
	}

	function toBindingIdentifierName(name /*: string*/) /*: string*/ {
	  name = toIdentifier(name);
	  if (name === "eval" || name === "arguments") name = "_" + name;
	  return name;
	}

	/**
	 * [Please add a description.]
	 * @returns {Object|Boolean}
	 */

	function toStatement(node /*: Object*/, ignore /*:: ?: boolean*/) {
	  if (t.isStatement(node)) {
	    return node;
	  }

	  var mustHaveId = false;
	  var newType = undefined;

	  if (t.isClass(node)) {
	    mustHaveId = true;
	    newType = "ClassDeclaration";
	  } else if (t.isFunction(node)) {
	    mustHaveId = true;
	    newType = "FunctionDeclaration";
	  } else if (t.isAssignmentExpression(node)) {
	    return t.expressionStatement(node);
	  }

	  if (mustHaveId && !node.id) {
	    newType = false;
	  }

	  if (!newType) {
	    if (ignore) {
	      return false;
	    } else {
	      throw new Error("cannot turn " + node.type + " to a statement");
	    }
	  }

	  node.type = newType;

	  return node;
	}

	function toExpression(node /*: Object*/) /*: Object*/ {
	  if (t.isExpressionStatement(node)) {
	    node = node.expression;
	  }

	  if (t.isClass(node)) {
	    node.type = "ClassExpression";
	  } else if (t.isFunction(node)) {
	    node.type = "FunctionExpression";
	  }

	  if (t.isExpression(node)) {
	    return node;
	  } else {
	    throw new Error("cannot turn " + node.type + " to an expression");
	  }
	}

	function toBlock(node, parent /*: Object*/) /*: Object*/ {
	  if (t.isBlockStatement(node)) {
	    return node;
	  }

	  if (t.isEmptyStatement(node)) {
	    node = [];
	  }

	  if (!Array.isArray(node)) {
	    if (!t.isStatement(node)) {
	      if (t.isFunction(parent)) {
	        node = t.returnStatement(node);
	      } else {
	        node = t.expressionStatement(node);
	      }
	    }

	    node = [node];
	  }

	  return t.blockStatement(node);
	}

	function valueToNode(value /*: any*/) /*: Object*/ {
	  // undefined
	  if (value === undefined) {
	    return t.identifier("undefined");
	  }

	  // boolean
	  if (value === true || value === false) {
	    return t.booleanLiteral(value);
	  }

	  // null
	  if (value === null) {
	    return t.nullLiteral();
	  }

	  // strings
	  if (_lodashLangIsString2["default"](value)) {
	    return t.stringLiteral(value);
	  }

	  // numbers
	  if (_lodashLangIsNumber2["default"](value)) {
	    return t.numericLiteral(value);
	  }

	  // regexes
	  if (_lodashLangIsRegExp2["default"](value)) {
	    var pattern = value.source;
	    var flags = value.toString().match(/\/([a-z]+|)$/)[1];
	    return t.regExpLiteral(pattern, flags);
	  }

	  // array
	  if (Array.isArray(value)) {
	    return t.arrayExpression(value.map(t.valueToNode));
	  }

	  // object
	  if (_lodashLangIsPlainObject2["default"](value)) {
	    var props = [];
	    for (var key in value) {
	      var nodeKey = undefined;
	      if (t.isValidIdentifier(key)) {
	        nodeKey = t.identifier(key);
	      } else {
	        nodeKey = t.stringLiteral(key);
	      }
	      props.push(t.objectProperty(nodeKey, t.valueToNode(value[key])));
	    }
	    return t.objectExpression(props);
	  }

	  throw new Error("don't know how to turn this value into a node");
	}

/***/ },
/* 7899 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _index = __webpack_require__(__webpack_module_template_argument_2__);

	var t = _interopRequireWildcard(_index);

	var _constants = __webpack_require__(__webpack_module_template_argument_3__);

	var _index2 = __webpack_require__(__webpack_module_template_argument_4__);

	var _index3 = _interopRequireDefault(_index2);

	_index3["default"]("ArrayExpression", {
	  fields: {
	    elements: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeOrValueType("null", "Expression", "SpreadElement")))
	    }
	  },
	  visitor: ["elements"],
	  aliases: ["Expression"]
	});

	_index3["default"]("AssignmentExpression", {
	  fields: {
	    operator: {
	      validate: _index2.assertValueType("string")
	    },
	    left: {
	      validate: _index2.assertNodeType("LVal")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Expression"]
	});

	_index3["default"]("BinaryExpression", {
	  builder: ["operator", "left", "right"],
	  fields: {
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.BINARY_OPERATORS)
	    },
	    left: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"]
	});

	_index3["default"]("Directive", {
	  visitor: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertNodeType("DirectiveLiteral")
	    }
	  }
	});

	_index3["default"]("DirectiveLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("string")
	    }
	  }
	});

	_index3["default"]("BlockStatement", {
	  builder: ["body", "directives"],
	  visitor: ["directives", "body"],
	  fields: {
	    directives: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Directive"))),
	      "default": []
	    },
	    body: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block", "Statement"]
	});

	_index3["default"]("BreakStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});

	_index3["default"]("CallExpression", {
	  visitor: ["callee", "arguments"],
	  fields: {
	    callee: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    arguments: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression", "SpreadElement")))
	    }
	  },
	  aliases: ["Expression"]
	});

	_index3["default"]("CatchClause", {
	  visitor: ["param", "body"],
	  fields: {
	    param: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  },
	  aliases: ["Scopable"]
	});

	_index3["default"]("ConditionalExpression", {
	  visitor: ["test", "consequent", "alternate"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    consequent: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    alternate: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  aliases: ["Expression", "Conditional"]
	});

	_index3["default"]("ContinueStatement", {
	  visitor: ["label"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    }
	  },
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"]
	});

	_index3["default"]("DebuggerStatement", {
	  aliases: ["Statement"]
	});

	_index3["default"]("DoWhileStatement", {
	  visitor: ["test", "body"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  },
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"]
	});

	_index3["default"]("EmptyStatement", {
	  aliases: ["Statement"]
	});

	_index3["default"]("ExpressionStatement", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  },
	  aliases: ["Statement", "ExpressionWrapper"]
	});

	_index3["default"]("File", {
	  builder: ["program", "comments", "tokens"],
	  visitor: ["program"],
	  fields: {
	    program: {
	      validate: _index2.assertNodeType("Program")
	    }
	  }
	});

	_index3["default"]("ForInStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: _index2.assertNodeType("VariableDeclaration", "LVal")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});

	_index3["default"]("ForStatement", {
	  visitor: ["init", "test", "update", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop"],
	  fields: {
	    init: {
	      validate: _index2.assertNodeType("VariableDeclaration", "Expression"),
	      optional: true
	    },
	    test: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    update: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});

	_index3["default"]("FunctionDeclaration", {
	  builder: ["id", "params", "body", "generator", "async"],
	  visitor: ["id", "params", "body", "returnType", "typeParameters"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    params: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Statement", "Pureish", "Declaration"]
	});

	_index3["default"]("FunctionExpression", {
	  inherits: "FunctionDeclaration",
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("Identifier"),
	      optional: true
	    },
	    params: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  }
	});

	_index3["default"]("Identifier", {
	  builder: ["name"],
	  visitor: ["typeAnnotation"],
	  aliases: ["Expression", "LVal"],
	  fields: {
	    name: {
	      validate: function validate(node, key, val) {
	        if (!t.isValidIdentifier(val)) {
	          // todo
	        }
	      }
	    }
	  }
	});

	_index3["default"]("IfStatement", {
	  visitor: ["test", "consequent", "alternate"],
	  aliases: ["Statement", "Conditional"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    consequent: {
	      validate: _index2.assertNodeType("Statement")
	    },
	    alternate: {
	      optional: true,
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});

	_index3["default"]("LabeledStatement", {
	  visitor: ["label", "body"],
	  aliases: ["Statement"],
	  fields: {
	    label: {
	      validate: _index2.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index2.assertNodeType("Statement")
	    }
	  }
	});

	_index3["default"]("StringLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("string")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});

	_index3["default"]("NumericLiteral", {
	  builder: ["value"],
	  deprecatedAlias: "NumberLiteral",
	  fields: {
	    value: {
	      validate: _index2.assertValueType("number")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});

	_index3["default"]("NullLiteral", {
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});

	_index3["default"]("BooleanLiteral", {
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  aliases: ["Expression", "Pureish", "Literal", "Immutable"]
	});

	_index3["default"]("RegExpLiteral", {
	  builder: ["pattern", "flags"],
	  deprecatedAlias: "RegexLiteral",
	  aliases: ["Expression", "Literal"],
	  fields: {
	    pattern: {
	      validate: _index2.assertValueType("string")
	    },
	    flags: {
	      validate: _index2.assertValueType("string"),
	      "default": ""
	    }
	  }
	});

	_index3["default"]("LogicalExpression", {
	  builder: ["operator", "left", "right"],
	  visitor: ["left", "right"],
	  aliases: ["Binary", "Expression"],
	  fields: {
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.LOGICAL_OPERATORS)
	    },
	    left: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    right: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});

	_index3["default"]("MemberExpression", {
	  builder: ["object", "property", "computed"],
	  visitor: ["object", "property"],
	  aliases: ["Expression", "LVal"],
	  fields: {
	    object: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    property: {
	      validate: function validate(node, key, val) {
	        var expectedType = node.computed ? "Expression" : "Identifier";
	        _index2.assertNodeType(expectedType)(node, key, val);
	      }
	    },
	    computed: {
	      "default": false
	    }
	  }
	});

	_index3["default"]("NewExpression", {
	  visitor: ["callee", "arguments"],
	  aliases: ["Expression"],
	  fields: {
	    callee: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    arguments: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression", "SpreadElement")))
	    }
	  }
	});

	_index3["default"]("Program", {
	  visitor: ["directives", "body"],
	  builder: ["body", "directives"],
	  fields: {
	    directives: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Directive"))),
	      "default": []
	    },
	    body: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  },
	  aliases: ["Scopable", "BlockParent", "Block", "FunctionParent"]
	});

	_index3["default"]("ObjectExpression", {
	  visitor: ["properties"],
	  aliases: ["Expression"],
	  fields: {
	    properties: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("ObjectMethod", "ObjectProperty", "SpreadProperty")))
	    }
	  }
	});

	_index3["default"]("ObjectMethod", {
	  builder: ["kind", "key", "params", "body", "computed"],
	  fields: {
	    kind: {
	      validate: _index2.chain(_index2.assertValueType("string"), _index2.assertOneOf("method", "get", "set")),
	      "default": "method"
	    },
	    computed: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    decorators: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Decorator")))
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index2.assertValueType("boolean")
	    }
	  },
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  aliases: ["UserWhitespacable", "Function", "Scopable", "BlockParent", "FunctionParent", "Method", "ObjectMember"]
	});

	_index3["default"]("ObjectProperty", {
	  builder: ["key", "value", "computed", "shorthand", "decorators"],
	  fields: {
	    computed: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index2.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    value: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    shorthand: {
	      validate: _index2.assertValueType("boolean"),
	      "default": false
	    },
	    decorators: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Decorator"))),
	      optional: true
	    }
	  },
	  visitor: ["key", "value", "decorators"],
	  aliases: ["UserWhitespacable", "Property", "ObjectMember"]
	});

	_index3["default"]("RestElement", {
	  visitor: ["argument", "typeAnnotation"],
	  aliases: ["LVal"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("LVal")
	    }
	  }
	});

	_index3["default"]("ReturnStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    }
	  }
	});

	_index3["default"]("SequenceExpression", {
	  visitor: ["expressions"],
	  fields: {
	    expressions: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Expression")))
	    }
	  },
	  aliases: ["Expression"]
	});

	_index3["default"]("SwitchCase", {
	  visitor: ["test", "consequent"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression"),
	      optional: true
	    },
	    consequent: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("Statement")))
	    }
	  }
	});

	_index3["default"]("SwitchStatement", {
	  visitor: ["discriminant", "cases"],
	  aliases: ["Statement", "BlockParent", "Scopable"],
	  fields: {
	    discriminant: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    cases: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("SwitchCase")))
	    }
	  }
	});

	_index3["default"]("ThisExpression", {
	  aliases: ["Expression"]
	});

	_index3["default"]("ThrowStatement", {
	  visitor: ["argument"],
	  aliases: ["Statement", "Terminatorless", "CompletionStatement"],
	  fields: {
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});

	// todo: at least handler or finalizer should be set to be valid
	_index3["default"]("TryStatement", {
	  visitor: ["block", "handler", "finalizer"],
	  aliases: ["Statement"],
	  fields: {
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    },
	    handler: {
	      optional: true,
	      handler: _index2.assertNodeType("BlockStatement")
	    },
	    finalizer: {
	      optional: true,
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  }
	});

	_index3["default"]("UnaryExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      "default": false
	    },
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.UNARY_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["UnaryLike", "Expression"]
	});

	_index3["default"]("UpdateExpression", {
	  builder: ["operator", "argument", "prefix"],
	  fields: {
	    prefix: {
	      "default": false
	    },
	    argument: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    operator: {
	      validate: _index2.assertOneOf.apply(undefined, _constants.UPDATE_OPERATORS)
	    }
	  },
	  visitor: ["argument"],
	  aliases: ["Expression"]
	});

	_index3["default"]("VariableDeclaration", {
	  builder: ["kind", "declarations"],
	  visitor: ["declarations"],
	  aliases: ["Statement", "Declaration"],
	  fields: {
	    kind: {
	      validate: _index2.chain(_index2.assertValueType("string"), _index2.assertOneOf("var", "let", "const"))
	    },
	    declarations: {
	      validate: _index2.chain(_index2.assertValueType("array"), _index2.assertEach(_index2.assertNodeType("VariableDeclarator")))
	    }
	  }
	});

	_index3["default"]("VariableDeclarator", {
	  visitor: ["id", "init"],
	  fields: {
	    id: {
	      validate: _index2.assertNodeType("LVal")
	    },
	    init: {
	      optional: true,
	      validate: _index2.assertNodeType("Expression")
	    }
	  }
	});

	_index3["default"]("WhileStatement", {
	  visitor: ["test", "body"],
	  aliases: ["Statement", "BlockParent", "Loop", "While", "Scopable"],
	  fields: {
	    test: {
	      validate: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement", "Statement")
	    }
	  }
	});

	_index3["default"]("WithStatement", {
	  visitor: ["object", "body"],
	  aliases: ["Statement"],
	  fields: {
	    object: {
	      object: _index2.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index2.assertNodeType("BlockStatement")
	    }
	  }
	});

/***/ },
/* 7900 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _index = __webpack_require__(__webpack_module_template_argument_1__);

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("AssignmentPattern", {
	  visitor: ["left", "right"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    left: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    right: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

	_index2["default"]("ArrayPattern", {
	  visitor: ["elements", "typeAnnotation"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    elements: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Expression")))
	    }
	  }
	});

	_index2["default"]("ArrowFunctionExpression", {
	  builder: ["params", "body", "async"],
	  visitor: ["params", "body", "returnType"],
	  aliases: ["Scopable", "Function", "BlockParent", "FunctionParent", "Expression", "Pureish"],
	  fields: {
	    params: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index.assertNodeType("BlockStatement", "Expression")
	    },
	    async: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    }
	  }
	});

	_index2["default"]("ClassBody", {
	  visitor: ["body"],
	  fields: {
	    body: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ClassMethod", "ClassProperty")))
	    }
	  }
	});

	_index2["default"]("ClassDeclaration", {
	  builder: ["id", "superClass", "body", "decorators"],
	  visitor: ["id", "body", "superClass", "typeParameters", "superTypeParameters", "implements", "decorators"],
	  aliases: ["Scopable", "Class", "Statement", "Declaration", "Pureish"],
	  fields: {
	    id: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index.assertNodeType("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    },
	    decorators: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Decorator")))
	    }
	  }
	});

	_index2["default"]("ClassExpression", {
	  inherits: "ClassDeclaration",
	  aliases: ["Scopable", "Class", "Expression", "Pureish"],
	  fields: {
	    id: {
	      optional: true,
	      validate: _index.assertNodeType("Identifier")
	    },
	    body: {
	      validate: _index.assertNodeType("ClassBody")
	    },
	    superClass: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    },
	    decorators: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Decorator")))
	    }
	  }
	});

	_index2["default"]("ExportAllDeclaration", {
	  visitor: ["source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    source: {
	      validate: _index.assertNodeType("StringLiteral")
	    }
	  }
	});

	_index2["default"]("ExportDefaultDeclaration", {
	  visitor: ["declaration"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      validate: _index.assertNodeType("FunctionDeclaration", "ClassDeclaration", "Expression")
	    }
	  }
	});

	_index2["default"]("ExportNamedDeclaration", {
	  visitor: ["declaration", "specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration", "ExportDeclaration"],
	  fields: {
	    declaration: {
	      validate: _index.assertNodeType("Declaration"),
	      optional: true
	    },
	    specifiers: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ExportSpecifier")))
	    },
	    source: {
	      validate: _index.assertNodeType("StringLiteral"),
	      optional: true
	    }
	  }
	});

	_index2["default"]("ExportSpecifier", {
	  visitor: ["local", "exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    imported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});

	_index2["default"]("ForOfStatement", {
	  visitor: ["left", "right", "body"],
	  aliases: ["Scopable", "Statement", "For", "BlockParent", "Loop", "ForXStatement"],
	  fields: {
	    left: {
	      validate: _index.assertNodeType("VariableDeclaration", "LVal")
	    },
	    right: {
	      validate: _index.assertNodeType("Expression")
	    },
	    body: {
	      validate: _index.assertNodeType("Statement")
	    }
	  }
	});

	_index2["default"]("ImportDeclaration", {
	  visitor: ["specifiers", "source"],
	  aliases: ["Statement", "Declaration", "ModuleDeclaration"],
	  fields: {
	    specifiers: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("ImportSpecifier", "ImportDefaultSpecifier", "ImportNamespaceSpecifier")))
	    },
	    source: {
	      validate: _index.assertNodeType("StringLiteral")
	    }
	  }
	});

	_index2["default"]("ImportDefaultSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});

	_index2["default"]("ImportNamespaceSpecifier", {
	  visitor: ["local"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});

	_index2["default"]("ImportSpecifier", {
	  visitor: ["local", "imported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    local: {
	      validate: _index.assertNodeType("Identifier")
	    },
	    imported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});

	_index2["default"]("MetaProperty", {
	  visitor: ["meta", "property"],
	  aliases: ["Expression"],
	  fields: {
	    // todo: limit to new.target
	    meta: {
	      validate: _index.assertValueType("string")
	    },
	    property: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});

	_index2["default"]("ClassMethod", {
	  aliases: ["Function", "Scopable", "BlockParent", "FunctionParent", "Method"],
	  builder: ["kind", "key", "params", "body", "computed", "static"],
	  visitor: ["key", "params", "body", "decorators", "returnType", "typeParameters"],
	  fields: {
	    kind: {
	      validate: _index.chain(_index.assertValueType("string"), _index.assertOneOf("get", "set", "method", "constructor")),
	      "default": "method"
	    },
	    computed: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    "static": {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    key: {
	      validate: function validate(node, key, val) {
	        var expectedTypes = node.computed ? ["Expression"] : ["Identifier", "StringLiteral", "NumericLiteral"];
	        _index.assertNodeType.apply(undefined, expectedTypes)(node, key, val);
	      }
	    },
	    params: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("LVal")))
	    },
	    body: {
	      validate: _index.assertNodeType("BlockStatement")
	    },
	    generator: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    async: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    }
	  }
	});

	_index2["default"]("ObjectPattern", {
	  visitor: ["properties", "typeAnnotation"],
	  aliases: ["Pattern", "LVal"],
	  fields: {
	    properties: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("RestProperty", "Property")))
	    }
	  }
	});

	_index2["default"]("SpreadElement", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

	_index2["default"]("Super", {
	  aliases: ["Expression"]
	});

	_index2["default"]("TaggedTemplateExpression", {
	  visitor: ["tag", "quasi"],
	  aliases: ["Expression"],
	  fields: {
	    tag: {
	      validate: _index.assertNodeType("Expression")
	    },
	    quasi: {
	      validate: _index.assertNodeType("TemplateLiteral")
	    }
	  }
	});

	_index2["default"]("TemplateElement", {
	  builder: ["value", "tail"],
	  fields: {
	    value: {
	      // todo: flatten `raw` into main node
	    },
	    tail: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    }
	  }
	});

	_index2["default"]("TemplateLiteral", {
	  visitor: ["quasis", "expressions"],
	  aliases: ["Expression", "Literal"],
	  fields: {
	    quasis: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("TemplateElement")))
	    },
	    expressions: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("Expression")))
	    }
	  }
	});

	_index2["default"]("YieldExpression", {
	  builder: ["argument", "delegate"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    delegate: {
	      validate: _index.assertValueType("boolean"),
	      "default": false
	    },
	    argument: {
	      optional: true,
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },
/* 7901 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _index = __webpack_require__(__webpack_module_template_argument_1__);

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("AwaitExpression", {
	  builder: ["argument"],
	  visitor: ["argument"],
	  aliases: ["Expression", "Terminatorless"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

	_index2["default"]("BindExpression", {
	  visitor: ["object", "callee"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("Decorator", {
	  visitor: ["expression"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

	_index2["default"]("DoExpression", {
	  visitor: ["body"],
	  aliases: ["Expression"],
	  fields: {
	    body: {
	      validate: _index.assertNodeType("BlockStatement")
	    }
	  }
	});

	_index2["default"]("ExportDefaultSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});

	_index2["default"]("ExportNamespaceSpecifier", {
	  visitor: ["exported"],
	  aliases: ["ModuleSpecifier"],
	  fields: {
	    exported: {
	      validate: _index.assertNodeType("Identifier")
	    }
	  }
	});

	_index2["default"]("RestProperty", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("LVal")
	    }
	  }
	});

	_index2["default"]("SpreadProperty", {
	  visitor: ["argument"],
	  aliases: ["UnaryLike"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },
/* 7902 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _index = __webpack_require__(__webpack_module_template_argument_1__);

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("AnyTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("ArrayTypeAnnotation", {
	  visitor: ["elementType"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("BooleanTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("BooleanLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {}
	});

	_index2["default"]("NullLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {}
	});

	_index2["default"]("ClassImplements", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("ClassProperty", {
	  visitor: ["key", "value", "typeAnnotation", "decorators"],
	  aliases: ["Flow", "Property"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("DeclareClass", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("DeclareFunction", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("DeclareModule", {
	  visitor: ["id", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("DeclareVariable", {
	  visitor: ["id"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("ExistentialTypeParam", {
	  aliases: ["Flow"]
	});

	_index2["default"]("FunctionTypeAnnotation", {
	  visitor: ["typeParameters", "params", "rest", "returnType"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("FunctionTypeParam", {
	  visitor: ["name", "typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("GenericTypeAnnotation", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("InterfaceExtends", {
	  visitor: ["id", "typeParameters"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("InterfaceDeclaration", {
	  visitor: ["id", "typeParameters", "extends", "body"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("IntersectionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("MixedTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"]
	});

	_index2["default"]("NullableTypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("NumericLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("NumberTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("StringLiteralTypeAnnotation", {
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("StringTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("TupleTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("TypeofTypeAnnotation", {
	  visitor: ["argument"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("TypeAlias", {
	  visitor: ["id", "typeParameters", "right"],
	  aliases: ["Flow", "FlowDeclaration", "Statement", "Declaration"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("TypeAnnotation", {
	  visitor: ["typeAnnotation"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("TypeCastExpression", {
	  visitor: ["expression", "typeAnnotation"],
	  aliases: ["Flow", "ExpressionWrapper", "Expression"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("TypeParameterDeclaration", {
	  visitor: ["params"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("TypeParameterInstantiation", {
	  visitor: ["params"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("ObjectTypeAnnotation", {
	  visitor: ["properties", "indexers", "callProperties"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("ObjectTypeCallProperty", {
	  visitor: ["value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("ObjectTypeIndexer", {
	  visitor: ["id", "key", "value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("ObjectTypeProperty", {
	  visitor: ["key", "value"],
	  aliases: ["Flow", "UserWhitespacable"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("QualifiedTypeIdentifier", {
	  visitor: ["id", "qualification"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("UnionTypeAnnotation", {
	  visitor: ["types"],
	  aliases: ["Flow"],
	  fields: {
	    // todo
	  }
	});

	_index2["default"]("VoidTypeAnnotation", {
	  aliases: ["Flow", "FlowBaseAnnotation"],
	  fields: {
	    // todo
	  }
	});

/***/ },
/* 7903 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;
	exports.assertEach = assertEach;
	exports.assertOneOf = assertOneOf;
	exports.assertNodeType = assertNodeType;
	exports.assertNodeOrValueType = assertNodeOrValueType;
	exports.assertValueType = assertValueType;
	exports.chain = chain;
	exports["default"] = defineType;

	var _index = __webpack_require__(__webpack_module_template_argument_2__);

	var t = _interopRequireWildcard(_index);

	var VISITOR_KEYS = {};
	exports.VISITOR_KEYS = VISITOR_KEYS;
	var ALIAS_KEYS = {};
	exports.ALIAS_KEYS = ALIAS_KEYS;
	var NODE_FIELDS = {};
	exports.NODE_FIELDS = NODE_FIELDS;
	var BUILDER_KEYS = {};
	exports.BUILDER_KEYS = BUILDER_KEYS;
	var DEPRECATED_KEYS = {};

	exports.DEPRECATED_KEYS = DEPRECATED_KEYS;
	function getType(val) {
	  if (Array.isArray(val)) {
	    return "array";
	  } else if (val === null) {
	    return "null";
	  } else if (val === undefined) {
	    return "undefined";
	  } else {
	    return typeof val;
	  }
	}

	function assertEach(callback /*: Function*/) /*: Function*/ {
	  return function (node, key, val) {
	    if (!Array.isArray(val)) return;

	    for (var i = 0; i < val.length; i++) {
	      callback(node, key + "[" + i + "]", val[i]);
	    }
	  };
	}

	function assertOneOf() /*: Function*/ {
	  for (var _len = arguments.length, vals = Array(_len), _key = 0; _key < _len; _key++) {
	    vals[_key] = arguments[_key];
	  }

	  function validate(node, key, val) {
	    if (vals.indexOf(val) < 0) {
	      throw new TypeError("Property " + key + " expected value to be one of " + JSON.stringify(vals) + " but got " + JSON.stringify(val));
	    }
	  }

	  validate.oneOf = vals;

	  return validate;
	}

	function assertNodeType() /*: Function*/ {
	  for (var _len2 = arguments.length, types = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	    types[_key2] = arguments[_key2];
	  }

	  function validate(node, key, val) {
	    var valid = false;

	    for (var _iterator = types, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var type = _ref;

	      if (t.is(type, val)) {
	        valid = true;
	        break;
	      }
	    }

	    if (!valid) {
	      throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + JSON.stringify(types) + " but instead got " + JSON.stringify(val && val.type));
	    }
	  }

	  validate.oneOfNodeTypes = types;

	  return validate;
	}

	function assertNodeOrValueType() /*: Function*/ {
	  for (var _len3 = arguments.length, types = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
	    types[_key3] = arguments[_key3];
	  }

	  function validate(node, key, val) {
	    var valid = false;

	    for (var _iterator2 = types, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var type = _ref2;

	      if (getType(val) === type || t.is(type, val)) {
	        valid = true;
	        break;
	      }
	    }

	    if (!valid) {
	      throw new TypeError("Property " + key + " of " + node.type + " expected node to be of a type " + JSON.stringify(types) + " but instead got " + JSON.stringify(val && val.type));
	    }
	  }

	  validate.oneOfNodeOrValueTypes = types;

	  return validate;
	}

	function assertValueType(type /*: string*/) /*: Function*/ {
	  function validate(node, key, val) {
	    var valid = getType(val) === type;

	    if (!valid) {
	      throw new TypeError("Property " + key + " expected type of " + type + " but got " + getType(val));
	    }
	  }

	  validate.type = type;

	  return validate;
	}

	function chain() /*: Function*/ {
	  for (var _len4 = arguments.length, fns = Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
	    fns[_key4] = arguments[_key4];
	  }

	  return function () {
	    for (var _iterator3 = fns, _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	      var _ref3;

	      if (_isArray3) {
	        if (_i3 >= _iterator3.length) break;
	        _ref3 = _iterator3[_i3++];
	      } else {
	        _i3 = _iterator3.next();
	        if (_i3.done) break;
	        _ref3 = _i3.value;
	      }

	      var fn = _ref3;

	      fn.apply(undefined, arguments);
	    }
	  };
	}

	function defineType(type /*: string*/) {
	  var opts /*: {
	               fields?: Object;
	               visitor?: Array<string>;
	               aliases?: Array<string>;
	               builder?: Array<string>;
	               inherits?: string;
	             }*/ = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  var inherits = opts.inherits && store[opts.inherits] || {};

	  opts.fields = opts.fields || inherits.fields || {};
	  opts.visitor = opts.visitor || inherits.visitor || [];
	  opts.aliases = opts.aliases || inherits.aliases || [];
	  opts.builder = opts.builder || inherits.builder || opts.visitor || [];

	  if (opts.deprecatedAlias) {
	    DEPRECATED_KEYS[opts.deprecatedAlias] = type;
	  }

	  // ensure all field keys are represented in `fields`
	  for (var _iterator4 = (opts.visitor.concat(opts.builder) /*: Array<string>*/), _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;

	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }

	    var key = _ref4;

	    opts.fields[key] = opts.fields[key] || {};
	  }

	  for (var key in opts.fields) {
	    var field = opts.fields[key];

	    if (field["default"] === undefined) {
	      field["default"] = null;
	    } else if (!field.validate) {
	      field.validate = assertValueType(getType(field["default"]));
	    }
	  }

	  VISITOR_KEYS[type] = opts.visitor;
	  BUILDER_KEYS[type] = opts.builder;
	  NODE_FIELDS[type] = opts.fields;
	  ALIAS_KEYS[type] = opts.aliases;

	  store[type] = opts;
	}

	var store = {};

/***/ },
/* 7904 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__) {

	"use strict";

	__webpack_require__(__webpack_module_template_argument_0__);

	__webpack_require__(__webpack_module_template_argument_1__);

	__webpack_require__(__webpack_module_template_argument_2__);

	__webpack_require__(__webpack_module_template_argument_3__);

	__webpack_require__(__webpack_module_template_argument_4__);

	__webpack_require__(__webpack_module_template_argument_5__);

	__webpack_require__(__webpack_module_template_argument_6__);

/***/ },
/* 7905 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _index = __webpack_require__(__webpack_module_template_argument_1__);

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("JSXAttribute", {
	  visitor: ["name", "value"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXNamespacedName")
	    },
	    value: {
	      optional: true,
	      validate: _index.assertNodeType("JSXElement", "StringLiteral", "JSXExpressionContainer")
	    }
	  }
	});

	_index2["default"]("JSXClosingElement", {
	  visitor: ["name"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXMemberExpression")
	    }
	  }
	});

	_index2["default"]("JSXElement", {
	  builder: ["openingElement", "closingElement", "children", "selfClosing"],
	  visitor: ["openingElement", "children", "closingElement"],
	  aliases: ["JSX", "Immutable", "Expression"],
	  fields: {
	    openingElement: {
	      validate: _index.assertNodeType("JSXOpeningElement")
	    },
	    closingElement: {
	      optional: true,
	      validate: _index.assertNodeType("JSXClosingElement")
	    },
	    children: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("StringLiteral", "JSXExpressionContainer", "JSXElement")))
	    }
	  }
	});

	_index2["default"]("JSXEmptyExpression", {
	  aliases: ["JSX", "Expression"]
	});

	_index2["default"]("JSXExpressionContainer", {
	  visitor: ["expression"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

	_index2["default"]("JSXIdentifier", {
	  builder: ["name"],
	  aliases: ["JSX", "Expression"],
	  fields: {
	    name: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});

	_index2["default"]("JSXMemberExpression", {
	  visitor: ["object", "property"],
	  aliases: ["JSX", "Expression"],
	  fields: {
	    object: {
	      validate: _index.assertNodeType("JSXMemberExpression", "JSXIdentifier")
	    },
	    property: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    }
	  }
	});

	_index2["default"]("JSXNamespacedName", {
	  visitor: ["namespace", "name"],
	  aliases: ["JSX"],
	  fields: {
	    namespace: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    },
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier")
	    }
	  }
	});

	_index2["default"]("JSXOpeningElement", {
	  builder: ["name", "attributes", "selfClosing"],
	  visitor: ["name", "attributes"],
	  aliases: ["JSX", "Immutable"],
	  fields: {
	    name: {
	      validate: _index.assertNodeType("JSXIdentifier", "JSXMemberExpression")
	    },
	    selfClosing: {
	      "default": false,
	      validate: _index.assertValueType("boolean")
	    },
	    attributes: {
	      validate: _index.chain(_index.assertValueType("array"), _index.assertEach(_index.assertNodeType("JSXAttribute", "JSXSpreadAttribute")))
	    }
	  }
	});

	_index2["default"]("JSXSpreadAttribute", {
	  visitor: ["argument"],
	  aliases: ["JSX"],
	  fields: {
	    argument: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

	_index2["default"]("JSXText", {
	  aliases: ["JSX"],
	  builder: ["value"],
	  fields: {
	    value: {
	      validate: _index.assertValueType("string")
	    }
	  }
	});

/***/ },
/* 7906 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _index = __webpack_require__(__webpack_module_template_argument_1__);

	var _index2 = _interopRequireDefault(_index);

	_index2["default"]("Noop", {
	  visitor: []
	});

	_index2["default"]("ParenthesizedExpression", {
	  visitor: ["expression"],
	  aliases: ["Expression", "ExpressionWrapper"],
	  fields: {
	    expression: {
	      validate: _index.assertNodeType("Expression")
	    }
	  }
	});

/***/ },
/* 7907 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	exports.createUnionTypeAnnotation = createUnionTypeAnnotation;
	exports.removeTypeDuplicates = removeTypeDuplicates;
	exports.createTypeAnnotationBasedOnTypeof = createTypeAnnotationBasedOnTypeof;

	var _index = __webpack_require__(__webpack_module_template_argument_1__);

	var t = _interopRequireWildcard(_index);

	/**
	 * Takes an array of `types` and flattens them, removing duplicates and
	 * returns a `UnionTypeAnnotation` node containg them.
	 */

	function createUnionTypeAnnotation(types /*: Array<Object>*/) {
	  var flattened = removeTypeDuplicates(types);

	  if (flattened.length === 1) {
	    return flattened[0];
	  } else {
	    return t.unionTypeAnnotation(flattened);
	  }
	}

	/**
	 * Dedupe type annotations.
	 */

	function removeTypeDuplicates(nodes /*: Array<Object>*/) {
	  var generics = {};
	  var bases = {};

	  // store union type groups to circular references
	  var typeGroups = [];

	  var types = [];

	  for (var i = 0; i < nodes.length; i++) {
	    var node = nodes[i];
	    if (!node) continue;

	    // detect duplicates
	    if (types.indexOf(node) >= 0) {
	      continue;
	    }

	    // this type matches anything
	    if (t.isAnyTypeAnnotation(node)) {
	      return [node];
	    }

	    //
	    if (t.isFlowBaseAnnotation(node)) {
	      bases[node.type] = node;
	      continue;
	    }

	    //
	    if (t.isUnionTypeAnnotation(node)) {
	      if (typeGroups.indexOf(node.types) < 0) {
	        nodes = nodes.concat(node.types);
	        typeGroups.push(node.types);
	      }
	      continue;
	    }

	    // find a matching generic type and merge and deduplicate the type parameters
	    if (t.isGenericTypeAnnotation(node)) {
	      var _name = node.id.name;

	      if (generics[_name]) {
	        var existing = generics[_name];
	        if (existing.typeParameters) {
	          if (node.typeParameters) {
	            existing.typeParameters.params = removeTypeDuplicates(existing.typeParameters.params.concat(node.typeParameters.params));
	          }
	        } else {
	          existing = node.typeParameters;
	        }
	      } else {
	        generics[_name] = node;
	      }

	      continue;
	    }

	    types.push(node);
	  }

	  // add back in bases
	  for (var type in bases) {
	    types.push(bases[type]);
	  }

	  // add back in generics
	  for (var _name2 in generics) {
	    types.push(generics[_name2]);
	  }

	  return types;
	}

	/**
	 * Create a type anotation based on typeof expression.
	 */

	function createTypeAnnotationBasedOnTypeof(type /*: string*/) {
	  if (type === "string") {
	    return t.stringTypeAnnotation();
	  } else if (type === "number") {
	    return t.numberTypeAnnotation();
	  } else if (type === "undefined") {
	    return t.voidTypeAnnotation();
	  } else if (type === "boolean") {
	    return t.booleanTypeAnnotation();
	  } else if (type === "function") {
	    return t.genericTypeAnnotation(t.identifier("Function"));
	  } else if (type === "object") {
	    return t.genericTypeAnnotation(t.identifier("Object"));
	  } else if (type === "symbol") {
	    return t.genericTypeAnnotation(t.identifier("Symbol"));
	  } else {
	    throw new Error("Invalid typeof value");
	  }
	}

/***/ },
/* 7908 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__, __webpack_module_template_argument_10__, __webpack_module_template_argument_11__, __webpack_module_template_argument_12__, __webpack_module_template_argument_13__, __webpack_module_template_argument_14__, __webpack_module_template_argument_15__, __webpack_module_template_argument_16__, __webpack_module_template_argument_17__, __webpack_module_template_argument_18__) {

	"use strict";

	var _Object$keys = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _getIterator = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	var _defaults = __webpack_require__(__webpack_module_template_argument_4__)["default"];

	var _interopExportWildcard = __webpack_require__(__webpack_module_template_argument_5__)["default"];

	exports.__esModule = true;
	exports.is = is;
	exports.isType = isType;
	exports.validate = validate;
	exports.shallowEqual = shallowEqual;
	exports.appendToMemberExpression = appendToMemberExpression;
	exports.prependToMemberExpression = prependToMemberExpression;
	exports.ensureBlock = ensureBlock;
	exports.clone = clone;
	exports.cloneDeep = cloneDeep;
	exports.buildMatchMemberExpression = buildMatchMemberExpression;
	exports.removeComments = removeComments;
	exports.inheritsComments = inheritsComments;
	exports.inheritTrailingComments = inheritTrailingComments;
	exports.inheritLeadingComments = inheritLeadingComments;
	exports.inheritInnerComments = inheritInnerComments;
	exports.inherits = inherits;
	exports.assertNode = assertNode;
	exports.isNode = isNode;

	var _toFastProperties = __webpack_require__(__webpack_module_template_argument_6__);

	var _toFastProperties2 = _interopRequireDefault(_toFastProperties);

	var _lodashArrayCompact = __webpack_require__(__webpack_module_template_argument_7__);

	var _lodashArrayCompact2 = _interopRequireDefault(_lodashArrayCompact);

	var _lodashLangClone = __webpack_require__(__webpack_module_template_argument_8__);

	var _lodashLangClone2 = _interopRequireDefault(_lodashLangClone);

	var _lodashCollectionEach = __webpack_require__(__webpack_module_template_argument_9__);

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _lodashArrayUniq = __webpack_require__(__webpack_module_template_argument_10__);

	var _lodashArrayUniq2 = _interopRequireDefault(_lodashArrayUniq);

	__webpack_require__(__webpack_module_template_argument_11__);

	var _definitions = __webpack_require__(__webpack_module_template_argument_12__);

	var _react2 = __webpack_require__(__webpack_module_template_argument_13__);

	var _react = _interopRequireWildcard(_react2);

	var t = exports;

	/**
	 * Registers `is[Type]` and `assert[Type]` generated functions for a given `type`.
	 * Pass `skipAliasCheck` to force it to directly compare `node.type` with `type`.
	 */

	function registerType(type /*: string*/) {
	  var is = t["is" + type] = function (node, opts) {
	    return t.is(type, node, opts);
	  };

	  t["assert" + type] = function (node, opts) {
	    opts = opts || {};
	    if (!is(node, opts)) {
	      throw new Error("Expected type " + JSON.stringify(type) + " with option " + JSON.stringify(opts));
	    }
	  };
	}

	//

	var _constants = __webpack_require__(__webpack_module_template_argument_14__);

	_defaults(exports, _interopExportWildcard(_constants, _defaults));

	exports.VISITOR_KEYS = _definitions.VISITOR_KEYS;
	exports.ALIAS_KEYS = _definitions.ALIAS_KEYS;
	exports.NODE_FIELDS = _definitions.NODE_FIELDS;
	exports.BUILDER_KEYS = _definitions.BUILDER_KEYS;
	exports.DEPRECATED_KEYS = _definitions.DEPRECATED_KEYS;
	exports.react = _react;

	/**
	 * Registers `is[Type]` and `assert[Type]` for all types.
	 */

	for (var type in t.VISITOR_KEYS) {
	  registerType(type);
	}

	/**
	 * Flip `ALIAS_KEYS` for faster access in the reverse direction.
	 */

	t.FLIPPED_ALIAS_KEYS = {};

	_lodashCollectionEach2["default"](t.ALIAS_KEYS, function (aliases, type) {
	  _lodashCollectionEach2["default"](aliases, function (alias) {
	    var types = t.FLIPPED_ALIAS_KEYS[alias] = t.FLIPPED_ALIAS_KEYS[alias] || [];
	    types.push(type);
	  });
	});

	/**
	 * Registers `is[Alias]` and `assert[Alias]` functions for all aliases.
	 */

	_lodashCollectionEach2["default"](t.FLIPPED_ALIAS_KEYS, function (types, type) {
	  t[type.toUpperCase() + "_TYPES"] = types;
	  registerType(type);
	});

	var TYPES = _Object$keys(t.VISITOR_KEYS).concat(_Object$keys(t.FLIPPED_ALIAS_KEYS)).concat(_Object$keys(t.DEPRECATED_KEYS));

	exports.TYPES = TYPES;
	/**
	 * Returns whether `node` is of given `type`.
	 *
	 * For better performance, use this instead of `is[Type]` when `type` is unknown.
	 * Optionally, pass `skipAliasCheck` to directly compare `node.type` with `type`.
	 */

	function is(type /*: string*/, node /*: Object*/, opts /*:: ?: Object*/) /*: boolean*/ {
	  if (!node) return false;

	  var matches = isType(node.type, type);
	  if (!matches) return false;

	  if (typeof opts === "undefined") {
	    return true;
	  } else {
	    return t.shallowEqual(node, opts);
	  }
	}

	/**
	 * Test if a `nodeType` is a `targetType` or if `targetType` is an alias of `nodeType`.
	 */

	function isType(nodeType /*: string*/, targetType /*: string*/) /*: boolean*/ {
	  if (nodeType === targetType) return true;

	  var aliases /*: ?Array<string>*/ = t.FLIPPED_ALIAS_KEYS[targetType];
	  if (aliases) {
	    if (aliases[0] === nodeType) return true;

	    for (var _iterator = aliases, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var alias = _ref;

	      if (nodeType === alias) return true;
	    }
	  }

	  return false;
	}

	/**
	 * Description
	 */

	_lodashCollectionEach2["default"](t.BUILDER_KEYS, function (keys, type) {
	  function builder() {
	    if (arguments.length > keys.length) {
	      throw new Error("t." + type + ": Too many arguments passed. Received " + arguments.length + " but can receive no more than " + keys.length);
	    }

	    var node = {};
	    node.type = type;

	    var i = 0;

	    for (var _iterator2 = (keys /*: Array<string>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i2 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i2++];
	      } else {
	        _i2 = _iterator2.next();
	        if (_i2.done) break;
	        _ref2 = _i2.value;
	      }

	      var key = _ref2;

	      var field = t.NODE_FIELDS[type][key];

	      var arg = arguments[i++];
	      if (arg === undefined) arg = _lodashLangClone2["default"](field["default"]);

	      node[key] = arg;
	    }

	    for (var key in node) {
	      validate(node, key, node[key]);
	    }

	    return node;
	  }

	  t[type] = builder;
	  t[type[0].toLowerCase() + type.slice(1)] = builder;
	});

	/**
	 * Description
	 */

	var _loop = function (type) {
	  var proxy = function proxy(fn) {
	    return function () {
	      console.trace("The node type " + type + " has been renamed to " + newType);
	      return fn.apply(this, arguments);
	    };
	  };

	  var newType = t.DEPRECATED_KEYS[type];

	  t[type] = t[type[0].toLowerCase() + type.slice(1)] = proxy(t[newType]);
	  t["is" + type] = proxy(t["is" + newType]);
	  t["assert" + type] = proxy(t["assert" + newType]);
	};

	for (var type in t.DEPRECATED_KEYS) {
	  _loop(type);
	}

	/**
	 * Description
	 */

	function validate(node /*:: ?: Object*/, key /*: string*/, val /*: any*/) {
	  if (!node) return;

	  var fields = t.NODE_FIELDS[node.type];
	  if (!fields) return;

	  var field = fields[key];
	  if (!field || !field.validate) return;
	  if (field.optional && val == null) return;

	  field.validate(node, key, val);
	}

	/**
	 * Test if an object is shallowly equal.
	 */

	function shallowEqual(actual /*: Object*/, expected /*: Object*/) /*: boolean*/ {
	  var keys = _Object$keys(expected);

	  for (var _iterator3 = (keys /*: Array<string>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	    var _ref3;

	    if (_isArray3) {
	      if (_i3 >= _iterator3.length) break;
	      _ref3 = _iterator3[_i3++];
	    } else {
	      _i3 = _iterator3.next();
	      if (_i3.done) break;
	      _ref3 = _i3.value;
	    }

	    var key = _ref3;

	    if (actual[key] !== expected[key]) {
	      return false;
	    }
	  }

	  return true;
	}

	/**
	 * Append a node to a member expression.
	 */

	function appendToMemberExpression(member /*: Object*/, append /*: Object*/, computed /*:: ?: boolean*/) /*: Object*/ {
	  member.object = t.memberExpression(member.object, member.property, member.computed);
	  member.property = append;
	  member.computed = !!computed;
	  return member;
	}

	/**
	 * Prepend a node to a member expression.
	 */

	function prependToMemberExpression(member /*: Object*/, prepend /*: Object*/) /*: Object*/ {
	  member.object = t.memberExpression(prepend, member.object);
	  return member;
	}

	/**
	 * Ensure the `key` (defaults to "body") of a `node` is a block.
	 * Casting it to a block if it is not.
	 */

	function ensureBlock(node /*: Object*/) /*: Object*/ {
	  var key /*: string*/ = arguments.length <= 1 || arguments[1] === undefined ? "body" : arguments[1];

	  return node[key] = t.toBlock(node[key], node);
	}

	/**
	 * Create a shallow clone of a `node` excluding `_private` properties.
	 */

	function clone(node /*: Object*/) /*: Object*/ {
	  var newNode = {};
	  for (var key in node) {
	    if (key[0] === "_") continue;
	    newNode[key] = node[key];
	  }
	  return newNode;
	}

	/**
	 * Create a deep clone of a `node` and all of it's child nodes
	 * exluding `_private` properties.
	 */

	function cloneDeep(node /*: Object*/) /*: Object*/ {
	  var newNode = {};

	  for (var key in node) {
	    if (key[0] === "_") continue;

	    var val = node[key];

	    if (val) {
	      if (val.type) {
	        val = t.cloneDeep(val);
	      } else if (Array.isArray(val)) {
	        val = val.map(t.cloneDeep);
	      }
	    }

	    newNode[key] = val;
	  }

	  return newNode;
	}

	/**
	 * Build a function that when called will return whether or not the
	 * input `node` `MemberExpression` matches the input `match`.
	 *
	 * For example, given the match `React.createClass` it would match the
	 * parsed nodes of `React.createClass` and `React["createClass"]`.
	 */

	function buildMatchMemberExpression(match /*:string*/, allowPartial /*:: ?: boolean*/) /*: Function*/ {
	  var parts = match.split(".");

	  return function (member) {
	    // not a member expression
	    if (!t.isMemberExpression(member)) return false;

	    var search = [member];
	    var i = 0;

	    while (search.length) {
	      var node = search.shift();

	      if (allowPartial && i === parts.length) {
	        return true;
	      }

	      if (t.isIdentifier(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.name) return false;
	      } else if (t.isStringLiteral(node)) {
	        // this part doesn't match
	        if (parts[i] !== node.value) return false;
	      } else if (t.isMemberExpression(node)) {
	        if (node.computed && !t.isStringLiteral(node.property)) {
	          // we can't deal with this
	          return false;
	        } else {
	          search.push(node.object);
	          search.push(node.property);
	          continue;
	        }
	      } else {
	        // we can't deal with this
	        return false;
	      }

	      // too many parts
	      if (++i > parts.length) {
	        return false;
	      }
	    }

	    return true;
	  };
	}

	/**
	 * Remove comment properties from a node.
	 */

	function removeComments(node /*: Object*/) /*: Object*/ {
	  for (var _iterator4 = t.COMMENT_KEYS, _isArray4 = Array.isArray(_iterator4), _i4 = 0, _iterator4 = _isArray4 ? _iterator4 : _getIterator(_iterator4);;) {
	    var _ref4;

	    if (_isArray4) {
	      if (_i4 >= _iterator4.length) break;
	      _ref4 = _iterator4[_i4++];
	    } else {
	      _i4 = _iterator4.next();
	      if (_i4.done) break;
	      _ref4 = _i4.value;
	    }

	    var key = _ref4;

	    delete node[key];
	  }
	  return node;
	}

	/**
	 * Inherit all unique comments from `parent` node to `child` node.
	 */

	function inheritsComments(child /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  inheritTrailingComments(child, parent);
	  inheritLeadingComments(child, parent);
	  inheritInnerComments(child, parent);
	  return child;
	}

	function inheritTrailingComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("trailingComments", child, parent);
	}

	function inheritLeadingComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("leadingComments", child, parent);
	}

	function inheritInnerComments(child /*: Object*/, parent /*: Object*/) {
	  _inheritComments("innerComments", child, parent);
	}

	function _inheritComments(key, child, parent) {
	  if (child && parent) {
	    child[key] = _lodashArrayUniq2["default"](_lodashArrayCompact2["default"]([].concat(child[key], parent[key])));
	  }
	}

	/**
	 * Inherit all contextual properties from `parent` node to `child` node.
	 */

	function inherits(child /*: Object*/, parent /*: Object*/) /*: Object*/ {
	  if (!child || !parent) return child;

	  // optionally inherit specific properties if not null
	  for (var _iterator5 = (t.INHERIT_KEYS.optional /*: Array<string>*/), _isArray5 = Array.isArray(_iterator5), _i5 = 0, _iterator5 = _isArray5 ? _iterator5 : _getIterator(_iterator5);;) {
	    var _ref5;

	    if (_isArray5) {
	      if (_i5 >= _iterator5.length) break;
	      _ref5 = _iterator5[_i5++];
	    } else {
	      _i5 = _iterator5.next();
	      if (_i5.done) break;
	      _ref5 = _i5.value;
	    }

	    var key = _ref5;

	    if (child[key] == null) {
	      child[key] = parent[key];
	    }
	  }

	  // force inherit "private" properties
	  for (var key in parent) {
	    if (key[0] === "_") child[key] = parent[key];
	  }

	  // force inherit select properties
	  for (var _iterator6 = (t.INHERIT_KEYS.force /*: Array<string>*/), _isArray6 = Array.isArray(_iterator6), _i6 = 0, _iterator6 = _isArray6 ? _iterator6 : _getIterator(_iterator6);;) {
	    var _ref6;

	    if (_isArray6) {
	      if (_i6 >= _iterator6.length) break;
	      _ref6 = _iterator6[_i6++];
	    } else {
	      _i6 = _iterator6.next();
	      if (_i6.done) break;
	      _ref6 = _i6.value;
	    }

	    var key = _ref6;

	    child[key] = parent[key];
	  }

	  t.inheritsComments(child, parent);

	  return child;
	}

	/**
	 * TODO
	 */

	function assertNode(node /*:: ?*/) {
	  if (!isNode(node)) {
	    throw new TypeError("Not a valid node " + (node && node.type));
	  }
	}

	/**
	 * TODO
	 */

	function isNode(node /*:: ?*/) /*: boolean*/ {
	  return !!(node && _definitions.VISITOR_KEYS[node.type]);
	}

	// Optimize property access.
	_toFastProperties2["default"](t);
	_toFastProperties2["default"](t.VISITOR_KEYS);

	//

	var _retrievers = __webpack_require__(__webpack_module_template_argument_15__);

	_defaults(exports, _interopExportWildcard(_retrievers, _defaults));

	var _validators = __webpack_require__(__webpack_module_template_argument_16__);

	_defaults(exports, _interopExportWildcard(_validators, _defaults));

	var _converters = __webpack_require__(__webpack_module_template_argument_17__);

	_defaults(exports, _interopExportWildcard(_converters, _defaults));

	var _flow = __webpack_require__(__webpack_module_template_argument_18__);

	_defaults(exports, _interopExportWildcard(_flow, _defaults));

/***/ },
/* 7909 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* @flow */

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	exports.isCompatTag = isCompatTag;
	exports.buildChildren = buildChildren;

	var _index = __webpack_require__(__webpack_module_template_argument_1__);

	var t = _interopRequireWildcard(_index);

	var isReactComponent = t.buildMatchMemberExpression("React.Component");

	exports.isReactComponent = isReactComponent;

	function isCompatTag(tagName /*:: ?: string*/) /*: boolean*/ {
	  return !!tagName && /^[a-z]|\-/.test(tagName);
	}

	function cleanJSXElementLiteralChild(child /*: { value: string }*/, args /*: Array<Object>*/) {
	  var lines = child.value.split(/\r\n|\n|\r/);

	  var lastNonEmptyLine = 0;

	  for (var i = 0; i < lines.length; i++) {
	    if (lines[i].match(/[^ \t]/)) {
	      lastNonEmptyLine = i;
	    }
	  }

	  var str = "";

	  for (var i = 0; i < lines.length; i++) {
	    var line = lines[i];

	    var isFirstLine = i === 0;
	    var isLastLine = i === lines.length - 1;
	    var isLastNonEmptyLine = i === lastNonEmptyLine;

	    // replace rendered whitespace tabs with spaces
	    var trimmedLine = line.replace(/\t/g, " ");

	    // trim whitespace touching a newline
	    if (!isFirstLine) {
	      trimmedLine = trimmedLine.replace(/^[ ]+/, "");
	    }

	    // trim whitespace touching an endline
	    if (!isLastLine) {
	      trimmedLine = trimmedLine.replace(/[ ]+$/, "");
	    }

	    if (trimmedLine) {
	      if (!isLastNonEmptyLine) {
	        trimmedLine += " ";
	      }

	      str += trimmedLine;
	    }
	  }

	  if (str) args.push(t.stringLiteral(str));
	}

	function buildChildren(node /*: Object*/) /*: Array<Object>*/ {
	  var elems = [];

	  for (var i = 0; i < node.children.length; i++) {
	    var child = node.children[i];

	    if (t.isJSXText(child)) {
	      cleanJSXElementLiteralChild(child, elems);
	      continue;
	    }

	    if (t.isJSXExpressionContainer(child)) child = child.expression;
	    if (t.isJSXEmptyExpression(child)) continue;

	    elems.push(child);
	  }

	  return elems;
	}

/***/ },
/* 7910 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	/* @flow */

	"use strict";

	var _Object$create = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;
	exports.getBindingIdentifiers = getBindingIdentifiers;
	exports.getOuterBindingIdentifiers = getOuterBindingIdentifiers;

	var _index = __webpack_require__(__webpack_module_template_argument_2__);

	var t = _interopRequireWildcard(_index);

	/**
	 * Return a list of binding identifiers associated with the input `node`.
	 */

	function getBindingIdentifiers(node /*: Object*/, duplicates /*:: ?: boolean*/, outerOnly /*:: ?: boolean*/) /*: Object*/ {
	  var search = [].concat(node);
	  var ids = _Object$create(null);

	  while (search.length) {
	    var id = search.shift();
	    if (!id) continue;

	    var keys = t.getBindingIdentifiers.keys[id.type];

	    if (t.isIdentifier(id)) {
	      if (duplicates) {
	        var _ids = ids[id.name] = ids[id.name] || [];
	        _ids.push(id);
	      } else {
	        ids[id.name] = id;
	      }
	      continue;
	    }

	    if (t.isExportDeclaration(id)) {
	      if (t.isDeclaration(node.declaration)) {
	        search.push(node.declaration);
	      }
	      continue;
	    }

	    if (outerOnly) {
	      if (t.isFunctionDeclaration(id)) {
	        search.push(id.id);
	        continue;
	      }

	      if (t.isFunctionExpression(id)) {
	        continue;
	      }
	    }

	    if (keys) {
	      for (var i = 0; i < keys.length; i++) {
	        var key = keys[i];
	        if (id[key]) {
	          search = search.concat(id[key]);
	        }
	      }
	    }
	  }

	  return ids;
	}

	/**
	 * Mapping of types to their identifier keys.
	 */

	getBindingIdentifiers.keys = {
	  DeclareClass: ["id"],
	  DeclareFunction: ["id"],
	  DeclareModule: ["id"],
	  DeclareVariable: ["id"],
	  InterfaceDeclaration: ["id"],
	  TypeAlias: ["id"],

	  CatchClause: ["param"],
	  LabeledStatement: ["label"],
	  UnaryExpression: ["argument"],
	  AssignmentExpression: ["left"],

	  ImportSpecifier: ["local"],
	  ImportNamespaceSpecifier: ["local"],
	  ImportDefaultSpecifier: ["local"],
	  ImportDeclaration: ["specifiers"],

	  ExportSpecifier: ["exported"],
	  ExportNamespaceSpecifier: ["exported"],
	  ExportDefaultSpecifier: ["exported"],

	  FunctionDeclaration: ["id", "params"],
	  FunctionExpression: ["id", "params"],

	  ClassDeclaration: ["id"],
	  ClassExpression: ["id"],

	  RestElement: ["argument"],
	  UpdateExpression: ["argument"],

	  SpreadProperty: ["argument"],
	  ObjectProperty: ["value"],

	  AssignmentPattern: ["left"],
	  ArrayPattern: ["elements"],
	  ObjectPattern: ["properties"],

	  VariableDeclaration: ["declarations"],
	  VariableDeclarator: ["id"]
	};

	function getOuterBindingIdentifiers(node /*: Object*/, duplicates /*:: ?: boolean*/) /*: Object*/ {
	  return getBindingIdentifiers(node, duplicates, true);
	}

/***/ },
/* 7911 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	exports.__esModule = true;
	exports.isBinding = isBinding;
	exports.isReferenced = isReferenced;
	exports.isValidIdentifier = isValidIdentifier;
	exports.isLet = isLet;
	exports.isBlockScoped = isBlockScoped;
	exports.isVar = isVar;
	exports.isSpecifierDefault = isSpecifierDefault;
	exports.isScope = isScope;
	exports.isImmutable = isImmutable;

	var _retrievers = __webpack_require__(__webpack_module_template_argument_3__);

	var _esutils = __webpack_require__(__webpack_module_template_argument_4__);

	var _esutils2 = _interopRequireDefault(_esutils);

	var _index = __webpack_require__(__webpack_module_template_argument_5__);

	var t = _interopRequireWildcard(_index);

	var _constants = __webpack_require__(__webpack_module_template_argument_6__);

	/**
	 * Check if the input `node` is a binding identifier.
	 */

	function isBinding(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  var keys = _retrievers.getBindingIdentifiers.keys[parent.type];
	  if (keys) {
	    for (var i = 0; i < keys.length; i++) {
	      var key = keys[i];
	      var val = parent[key];
	      if (Array.isArray(val)) {
	        if (val.indexOf(node) >= 0) return true;
	      } else {
	        if (val === node) return true;
	      }
	    }
	  }

	  return false;
	}

	/**
	 * Check if the input `node` is a reference to a bound variable.
	 */

	function isReferenced(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  switch (parent.type) {
	    // yes: PARENT[NODE]
	    // yes: NODE.child
	    // no: parent.NODE
	    case "MemberExpression":
	    case "JSXMemberExpression":
	    case "BindExpression":
	      if (parent.property === node && parent.computed) {
	        return true;
	      } else if (parent.object === node) {
	        return true;
	      } else {
	        return false;
	      }

	    // no: new.NODE
	    // no: NODE.target
	    case "MetaProperty":
	      return false;

	    // yes: { [NODE]: "" }
	    // yes: { NODE }
	    // no: { NODE: "" }
	    case "ObjectProperty":
	      if (parent.key === node) {
	        return parent.computed;
	      }

	    // no: let NODE = init;
	    // yes: let id = NODE;
	    case "VariableDeclarator":
	      return parent.id !== node;

	    // no: function NODE() {}
	    // no: function foo(NODE) {}
	    case "ArrowFunctionExpression":
	    case "FunctionDeclaration":
	    case "FunctionExpression":
	      for (var _iterator = (parent.params /*: Array*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	        var _ref;

	        if (_isArray) {
	          if (_i >= _iterator.length) break;
	          _ref = _iterator[_i++];
	        } else {
	          _i = _iterator.next();
	          if (_i.done) break;
	          _ref = _i.value;
	        }

	        var param = _ref;

	        if (param === node) return false;
	      }

	      return parent.id !== node;

	    // no: export { foo as NODE };
	    // yes: export { NODE as foo };
	    // no: export { NODE as foo } from "foo";
	    case "ExportSpecifier":
	      if (parent.source) {
	        return false;
	      } else {
	        return parent.local === node;
	      }

	    // no: export NODE from "foo";
	    // no: export * as NODE from "foo";
	    case "ExportNamespaceSpecifier":
	    case "ExportDefaultSpecifier":
	      return false;

	    // no: <div NODE="foo" />
	    case "JSXAttribute":
	      return parent.name !== node;

	    // no: class { NODE = value; }
	    // yes: class { key = NODE; }
	    case "ClassProperty":
	      return parent.value === node;

	    // no: import NODE from "foo";
	    // no: import * as NODE from "foo";
	    // no: import { NODE as foo } from "foo";
	    // no: import { foo as NODE } from "foo";
	    // no: import NODE from "bar";
	    case "ImportDefaultSpecifier":
	    case "ImportNamespaceSpecifier":
	    case "ImportSpecifier":
	      return false;

	    // no: class NODE {}
	    case "ClassDeclaration":
	    case "ClassExpression":
	      return parent.id !== node;

	    // yes: class { [NODE](){} }
	    case "ClassMethod":
	    case "ObjectMethod":
	      return parent.key === node && parent.computed;

	    // no: NODE: for (;;) {}
	    case "LabeledStatement":
	      return false;

	    // no: try {} catch (NODE) {}
	    case "CatchClause":
	      return parent.param !== node;

	    // no: function foo(...NODE) {}
	    case "RestElement":
	      return false;

	    // yes: left = NODE;
	    // no: NODE = right;
	    case "AssignmentExpression":
	      return parent.right === node;

	    // no: [NODE = foo] = [];
	    // yes: [foo = NODE] = [];
	    case "AssignmentPattern":
	      return parent.right === node;

	    // no: [NODE] = [];
	    // no: ({ NODE }) = [];
	    case "ObjectPattern":
	    case "ArrayPattern":
	      return false;
	  }

	  return true;
	}

	/**
	 * Check if the input `name` is a valid identifier name
	 * and isn't a reserved word.
	 */

	function isValidIdentifier(name /*: string*/) /*: boolean*/ {
	  if (typeof name !== "string" || _esutils2["default"].keyword.isReservedWordES6(name, true)) {
	    return false;
	  } else {
	    return _esutils2["default"].keyword.isIdentifierNameES6(name);
	  }
	}

	/**
	 * Check if the input `node` is a `let` variable declaration.
	 */

	function isLet(node /*: Object*/) /*: boolean*/ {
	  return t.isVariableDeclaration(node) && (node.kind !== "var" || node[_constants.BLOCK_SCOPED_SYMBOL]);
	}

	/**
	 * Check if the input `node` is block scoped.
	 */

	function isBlockScoped(node /*: Object*/) /*: boolean*/ {
	  return t.isFunctionDeclaration(node) || t.isClassDeclaration(node) || t.isLet(node);
	}

	/**
	 * Check if the input `node` is a variable declaration.
	 */

	function isVar(node /*: Object*/) /*: boolean*/ {
	  return t.isVariableDeclaration(node, { kind: "var" }) && !node[_constants.BLOCK_SCOPED_SYMBOL];
	}

	/**
	 * Check if the input `specifier` is a `default` import or export.
	 */

	function isSpecifierDefault(specifier /*: Object*/) /*: boolean*/ {
	  return t.isImportDefaultSpecifier(specifier) || t.isIdentifier(specifier.imported || specifier.exported, { name: "default" });
	}

	/**
	 * Check if the input `node` is a scope.
	 */

	function isScope(node /*: Object*/, parent /*: Object*/) /*: boolean*/ {
	  if (t.isBlockStatement(node) && t.isFunction(parent, { body: node })) {
	    return false;
	  }

	  return t.isScopable(node);
	}

	/**
	 * Check if the input `node` is definitely immutable.
	 */

	function isImmutable(node /*: Object*/) /*: boolean*/ {
	  if (t.isType(node.type, "Immutable")) return true;

	  if (t.isIdentifier(node)) {
	    if (node.name === "undefined") {
	      // immutable!
	      return true;
	    } else {
	      // no idea...
	      return false;
	    }
	  }

	  return false;
	}

/***/ },
/* 7912 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__, __webpack_module_template_argument_9__, __webpack_module_template_argument_10__, __webpack_module_template_argument_11__, __webpack_module_template_argument_12__, __webpack_module_template_argument_13__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	exports.parse = parse;

	var _parser = __webpack_require__(__webpack_module_template_argument_1__);

	var _parser2 = _interopRequireDefault(_parser);

	__webpack_require__(__webpack_module_template_argument_2__);

	__webpack_require__(__webpack_module_template_argument_3__);

	__webpack_require__(__webpack_module_template_argument_4__);

	__webpack_require__(__webpack_module_template_argument_5__);

	__webpack_require__(__webpack_module_template_argument_6__);

	__webpack_require__(__webpack_module_template_argument_7__);

	__webpack_require__(__webpack_module_template_argument_8__);

	var _tokenizerTypes = __webpack_require__(__webpack_module_template_argument_9__);

	__webpack_require__(__webpack_module_template_argument_10__);

	__webpack_require__(__webpack_module_template_argument_11__);

	var _pluginsFlow = __webpack_require__(__webpack_module_template_argument_12__);

	var _pluginsFlow2 = _interopRequireDefault(_pluginsFlow);

	var _pluginsJsx = __webpack_require__(__webpack_module_template_argument_13__);

	var _pluginsJsx2 = _interopRequireDefault(_pluginsJsx);

	_parser.plugins.flow = _pluginsFlow2["default"];
	_parser.plugins.jsx = _pluginsJsx2["default"];

	function parse(input, options) {
	  return new _parser2["default"](options, input).parse();
	}

	exports.tokTypes = _tokenizerTypes.types;

/***/ },
/* 7913 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* @flow */

	/**
	 * Based on the comment attachment algorithm used in espree and estraverse.
	 *
	 * Redistribution and use in source and binary forms, with or without
	 * modification, are permitted provided that the following conditions are met:
	 *
	 * * Redistributions of source code must retain the above copyright
	 *   notice, this list of conditions and the following disclaimer.
	 * * Redistributions in binary form must reproduce the above copyright
	 *   notice, this list of conditions and the following disclaimer in the
	 *   documentation and/or other materials provided with the distribution.
	 *
	 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
	 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
	 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
	 * ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
	 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
	 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
	 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
	 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
	 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
	 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
	 */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _index = __webpack_require__(__webpack_module_template_argument_1__);

	var _index2 = _interopRequireDefault(_index);

	function last(stack) {
	  return stack[stack.length - 1];
	}

	var pp = _index2["default"].prototype;

	pp.addComment = function (comment) {
	  this.state.trailingComments.push(comment);
	  this.state.leadingComments.push(comment);
	};

	pp.processComment = function (node) {
	  if (node.type === "Program" && node.body.length > 0) return;

	  var stack = this.state.commentStack;

	  var lastChild = undefined,
	      trailingComments = undefined,
	      i = undefined;

	  if (this.state.trailingComments.length > 0) {
	    // If the first comment in trailingComments comes after the
	    // current node, then we're good - all comments in the array will
	    // come after the node and so it's safe to add them as official
	    // trailingComments.
	    if (this.state.trailingComments[0].start >= node.end) {
	      trailingComments = this.state.trailingComments;
	      this.state.trailingComments = [];
	    } else {
	      // Otherwise, if the first comment doesn't come after the
	      // current node, that means we have a mix of leading and trailing
	      // comments in the array and that leadingComments contains the
	      // same items as trailingComments. Reset trailingComments to
	      // zero items and we'll handle this by evaluating leadingComments
	      // later.
	      this.state.trailingComments.length = 0;
	    }
	  } else {
	    var lastInStack = last(stack);
	    if (stack.length > 0 && lastInStack.trailingComments && lastInStack.trailingComments[0].start >= node.end) {
	      trailingComments = lastInStack.trailingComments;
	      lastInStack.trailingComments = null;
	    }
	  }

	  // Eating the stack.
	  while (stack.length > 0 && last(stack).start >= node.start) {
	    lastChild = stack.pop();
	  }

	  if (lastChild) {
	    if (lastChild.leadingComments) {
	      if (lastChild !== node && last(lastChild.leadingComments).end <= node.start) {
	        node.leadingComments = lastChild.leadingComments;
	        lastChild.leadingComments = null;
	      } else {
	        // A leading comment for an anonymous class had been stolen by its first ClassMethod,
	        // so this takes back the leading comment.
	        // See also: https://github.com/eslint/espree/issues/158
	        for (i = lastChild.leadingComments.length - 2; i >= 0; --i) {
	          if (lastChild.leadingComments[i].end <= node.start) {
	            node.leadingComments = lastChild.leadingComments.splice(0, i + 1);
	            break;
	          }
	        }
	      }
	    }
	  } else if (this.state.leadingComments.length > 0) {
	    if (last(this.state.leadingComments).end <= node.start) {
	      node.leadingComments = this.state.leadingComments;
	      this.state.leadingComments = [];
	    } else {
	      // https://github.com/eslint/espree/issues/2
	      //
	      // In special cases, such as return (without a value) and
	      // debugger, all comments will end up as leadingComments and
	      // will otherwise be eliminated. This step runs when the
	      // commentStack is empty and there are comments left
	      // in leadingComments.
	      //
	      // This loop figures out the stopping point between the actual
	      // leading and trailing comments by finding the location of the
	      // first comment that comes after the given node.
	      for (i = 0; i < this.state.leadingComments.length; i++) {
	        if (this.state.leadingComments[i].end > node.start) {
	          break;
	        }
	      }

	      // Split the array based on the location of the first comment
	      // that comes after the node. Keep in mind that this could
	      // result in an empty array, and if so, the array must be
	      // deleted.
	      node.leadingComments = this.state.leadingComments.slice(0, i);
	      if (node.leadingComments.length === 0) {
	        node.leadingComments = null;
	      }

	      // Similarly, trailing comments are attached later. The variable
	      // must be reset to null if there are no trailing comments.
	      trailingComments = this.state.leadingComments.slice(i);
	      if (trailingComments.length === 0) {
	        trailingComments = null;
	      }
	    }
	  }

	  if (trailingComments) {
	    if (trailingComments.length && trailingComments[0].start >= node.start && last(trailingComments).end <= node.end) {
	      node.innerComments = trailingComments;
	    } else {
	      node.trailingComments = trailingComments;
	    }
	  }

	  stack.push(node);
	};

/***/ },
/* 7914 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__) {

	// A recursive descent parser operates by defining functions for all
	// syntactic elements, and recursively calling those, each function
	// advancing the input stream and returning an AST node. Precedence
	// of constructs (for example, the fact that `!x[1]` means `!(x[1])`
	// instead of `(!x)[1]` is handled by the fact that the parser
	// function that parses unary prefix operators is called first, and
	// in turn calls the function that parses `[]` subscripts — that
	// way, it'll receive the node for `x[1]` already parsed, and wraps
	// *that* in the unary operator node.
	//
	// Acorn uses an [operator precedence parser][opp] to handle binary
	// operator precedence, because it is much more compact than using
	// the technique outlined above, which uses different, nesting
	// functions to specify precedence, for all of the ten binary
	// precedence levels that JavaScript defines.
	//
	// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser

	"use strict";

	var _Object$create = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _getIterator = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _tokenizerTypes = __webpack_require__(__webpack_module_template_argument_3__);

	var _index = __webpack_require__(__webpack_module_template_argument_4__);

	var _index2 = _interopRequireDefault(_index);

	var _utilIdentifier = __webpack_require__(__webpack_module_template_argument_5__);

	var pp = _index2["default"].prototype;

	// Check if property name clashes with already added.
	// Object/class getters and setters are not allowed to clash —
	// either with each other or with an init property — and in
	// strict mode, init properties are also not allowed to be repeated.

	pp.checkPropClash = function (prop, propHash) {
	  if (prop.computed) return;

	  var key = prop.key;
	  var name = undefined;
	  switch (key.type) {
	    case "Identifier":
	      name = key.name;
	      break;

	    case "StringLiteral":
	    case "NumericLiteral":
	      name = String(key.value);
	      break;

	    default:
	      return;
	  }

	  if (name === "__proto__" && prop.kind === "init") {
	    if (propHash.proto) this.raise(key.start, "Redefinition of __proto__ property");
	    propHash.proto = true;
	  }
	};

	// ### Expression parsing

	// These nest, from the most general expression type at the top to
	// 'atomic', nondivisible expression types at the bottom. Most of
	// the functions will simply let the function (s) below them parse,
	// and, *if* the syntactic construct they handle is present, wrap
	// the AST node that the inner parser gave them in another node.

	// Parse a full expression. The optional arguments are used to
	// forbid the `in` operator (in for loops initalization expressions)
	// and provide reference for storing '=' operator inside shorthand
	// property assignment in contexts where both object expression
	// and object pattern might appear (so it's possible to raise
	// delayed syntax error at correct position).

	pp.parseExpression = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseMaybeAssign(noIn, refShorthandDefaultPos);
	  if (this.match(_tokenizerTypes.types.comma)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.expressions = [expr];
	    while (this.eat(_tokenizerTypes.types.comma)) {
	      node.expressions.push(this.parseMaybeAssign(noIn, refShorthandDefaultPos));
	    }
	    this.toReferencedList(node.expressions);
	    return this.finishNode(node, "SequenceExpression");
	  }
	  return expr;
	};

	// Parse an assignment expression. This includes applications of
	// operators like `+=`.

	pp.parseMaybeAssign = function (noIn, refShorthandDefaultPos, afterLeftParse) {
	  if (this.match(_tokenizerTypes.types._yield) && this.state.inGenerator) {
	    return this.parseYield();
	  }

	  var failOnShorthandAssign = undefined;
	  if (refShorthandDefaultPos) {
	    failOnShorthandAssign = false;
	  } else {
	    refShorthandDefaultPos = { start: 0 };
	    failOnShorthandAssign = true;
	  }

	  var startPos = this.state.start;
	  var startLoc = this.state.startLoc;

	  if (this.match(_tokenizerTypes.types.parenL) || this.match(_tokenizerTypes.types.name)) {
	    this.state.potentialArrowAt = this.state.start;
	  }

	  var left = this.parseMaybeConditional(noIn, refShorthandDefaultPos);
	  if (afterLeftParse) left = afterLeftParse.call(this, left, startPos, startLoc);
	  if (this.state.type.isAssign) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.state.value;
	    node.left = this.match(_tokenizerTypes.types.eq) ? this.toAssignable(left) : left;
	    refShorthandDefaultPos.start = 0; // reset because shorthand default was used correctly

	    this.checkLVal(left);

	    if (left.extra && left.extra.parenthesized) {
	      var errorMsg = undefined;
	      if (left.type === "ObjectPattern") {
	        errorMsg = "`({a}) = 0` use `({a} = 0)`";
	      } else if (left.type === "ArrayPattern") {
	        errorMsg = "`([a]) = 0` use `([a] = 0)`";
	      }
	      if (errorMsg) {
	        this.raise(left.start, "You're trying to assign to a parenthesized expression, eg. instead of " + errorMsg);
	      }
	    }

	    this.next();
	    node.right = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "AssignmentExpression");
	  } else if (failOnShorthandAssign && refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }

	  return left;
	};

	// Parse a ternary conditional (`?:`) operator.

	pp.parseMaybeConditional = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprOps(noIn, refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  if (this.eat(_tokenizerTypes.types.question)) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.test = expr;
	    node.consequent = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.colon);
	    node.alternate = this.parseMaybeAssign(noIn);
	    return this.finishNode(node, "ConditionalExpression");
	  }
	  return expr;
	};

	// Start the precedence parser.

	pp.parseExprOps = function (noIn, refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseMaybeUnary(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	    return expr;
	  } else {
	    return this.parseExprOp(expr, startPos, startLoc, -1, noIn);
	  }
	};

	// Parse binary operators with the operator precedence parsing
	// algorithm. `left` is the left-hand side of the operator.
	// `minPrec` provides context that allows the function to stop and
	// defer further parser to one of its callers when it encounters an
	// operator that has a lower precedence than the set it is parsing.

	pp.parseExprOp = function (left, leftStartPos, leftStartLoc, minPrec, noIn) {
	  var prec = this.state.type.binop;
	  if (prec != null && (!noIn || !this.match(_tokenizerTypes.types._in))) {
	    if (prec > minPrec) {
	      var node = this.startNodeAt(leftStartPos, leftStartLoc);
	      node.left = left;
	      node.operator = this.state.value;

	      if (node.operator === "**" && left.type === "UnaryExpression" && left.extra && !left.extra.parenthesizedArgument) {
	        this.raise(left.argument.start, "Illegal expression. Wrap left hand side or entire exponentiation in parentheses.");
	      }

	      var op = this.state.type;
	      this.next();

	      var startPos = this.state.start;
	      var startLoc = this.state.startLoc;
	      node.right = this.parseExprOp(this.parseMaybeUnary(), startPos, startLoc, op.rightAssociative ? prec - 1 : prec, noIn);

	      this.finishNode(node, op === _tokenizerTypes.types.logicalOR || op === _tokenizerTypes.types.logicalAND ? "LogicalExpression" : "BinaryExpression");
	      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec, noIn);
	    }
	  }
	  return left;
	};

	// Parse unary operators, both prefix and postfix.

	pp.parseMaybeUnary = function (refShorthandDefaultPos) {
	  if (this.state.type.prefix) {
	    var node = this.startNode();
	    var update = this.match(_tokenizerTypes.types.incDec);
	    node.operator = this.state.value;
	    node.prefix = true;
	    this.next();

	    var argType = this.state.type;
	    this.addExtra(node, "parenthesizedArgument", argType === _tokenizerTypes.types.parenL);
	    node.argument = this.parseMaybeUnary();

	    if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	      this.unexpected(refShorthandDefaultPos.start);
	    }

	    if (update) {
	      this.checkLVal(node.argument);
	    } else if (this.state.strict && node.operator === "delete" && node.argument.type === "Identifier") {
	      this.raise(node.start, "Deleting local variable in strict mode");
	    }

	    return this.finishNode(node, update ? "UpdateExpression" : "UnaryExpression");
	  }

	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var expr = this.parseExprSubscripts(refShorthandDefaultPos);
	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) return expr;
	  while (this.state.type.postfix && !this.canInsertSemicolon()) {
	    var node = this.startNodeAt(startPos, startLoc);
	    node.operator = this.state.value;
	    node.prefix = false;
	    node.argument = expr;
	    this.checkLVal(expr);
	    this.next();
	    expr = this.finishNode(node, "UpdateExpression");
	  }
	  return expr;
	};

	// Parse call, dot, and `[]`-subscript expressions.

	pp.parseExprSubscripts = function (refShorthandDefaultPos) {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var potentialArrowAt = this.state.potentialArrowAt;
	  var expr = this.parseExprAtom(refShorthandDefaultPos);

	  if (expr.type === "ArrowFunctionExpression" && expr.start === potentialArrowAt) {
	    return expr;
	  }

	  if (refShorthandDefaultPos && refShorthandDefaultPos.start) {
	    return expr;
	  }

	  return this.parseSubscripts(expr, startPos, startLoc);
	};

	pp.parseSubscripts = function (base, startPos, startLoc, noCalls) {
	  for (;;) {
	    if (!noCalls && this.eat(_tokenizerTypes.types.doubleColon)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.callee = this.parseNoCallExpr();
	      return this.parseSubscripts(this.finishNode(node, "BindExpression"), startPos, startLoc, noCalls);
	    } else if (this.eat(_tokenizerTypes.types.dot)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseIdentifier(true);
	      node.computed = false;
	      base = this.finishNode(node, "MemberExpression");
	    } else if (this.eat(_tokenizerTypes.types.bracketL)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.object = base;
	      node.property = this.parseExpression();
	      node.computed = true;
	      this.expect(_tokenizerTypes.types.bracketR);
	      base = this.finishNode(node, "MemberExpression");
	    } else if (!noCalls && this.match(_tokenizerTypes.types.parenL)) {
	      var possibleAsync = this.state.potentialArrowAt === base.start && base.type === "Identifier" && base.name === "async" && !this.canInsertSemicolon();
	      this.next();

	      var node = this.startNodeAt(startPos, startLoc);
	      node.callee = base;
	      node.arguments = this.parseCallExpressionArguments(_tokenizerTypes.types.parenR, this.hasPlugin("trailingFunctionCommas"), possibleAsync);
	      base = this.finishNode(node, "CallExpression");

	      if (possibleAsync && this.shouldParseAsyncArrow()) {
	        return this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);
	      } else {
	        this.toReferencedList(node.arguments);
	      }
	    } else if (this.match(_tokenizerTypes.types.backQuote)) {
	      var node = this.startNodeAt(startPos, startLoc);
	      node.tag = base;
	      node.quasi = this.parseTemplate();
	      base = this.finishNode(node, "TaggedTemplateExpression");
	    } else {
	      return base;
	    }
	  }
	};

	pp.parseCallExpressionArguments = function (close, allowTrailingComma, possibleAsyncArrow) {
	  var innerParenStart = undefined;

	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (allowTrailingComma && this.eat(close)) break;
	    }

	    // we need to make sure that if this is an async arrow functions, that we don't allow inner parens inside the params
	    if (this.match(_tokenizerTypes.types.parenL) && !innerParenStart) {
	      innerParenStart = this.state.start;
	    }

	    elts.push(this.parseExprListItem());
	  }

	  // we found an async arrow function so let's not allow any inner parens
	  if (possibleAsyncArrow && innerParenStart && this.shouldParseAsyncArrow()) {
	    this.unexpected();
	  }

	  return elts;
	};

	pp.shouldParseAsyncArrow = function () {
	  return this.match(_tokenizerTypes.types.arrow);
	};

	pp.parseAsyncArrowFromCallExpression = function (node, call) {
	  if (!this.hasPlugin("asyncFunctions")) this.unexpected();
	  this.expect(_tokenizerTypes.types.arrow);
	  return this.parseArrowExpression(node, call.arguments, true);
	};

	// Parse a no-call expression (like argument of `new` or `::` operators).

	pp.parseNoCallExpr = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);
	};

	// Parse an atomic expression — either a single token that is an
	// expression, an expression started by a keyword like `function` or
	// `new`, or an expression wrapped in punctuation like `()`, `[]`,
	// or `{}`.

	pp.parseExprAtom = function (refShorthandDefaultPos) {
	  var node = undefined,
	      canBeArrow = this.state.potentialArrowAt === this.state.start;
	  switch (this.state.type) {
	    case _tokenizerTypes.types._super:
	      if (!this.state.inMethod && !this.options.allowSuperOutsideMethod) {
	        this.raise(this.state.start, "'super' outside of function or class");
	      }

	      node = this.startNode();
	      this.next();
	      if (!this.match(_tokenizerTypes.types.parenL) && !this.match(_tokenizerTypes.types.bracketL) && !this.match(_tokenizerTypes.types.dot)) {
	        this.unexpected();
	      }
	      if (this.match(_tokenizerTypes.types.parenL) && this.state.inMethod !== "constructor" && !this.options.allowSuperOutsideMethod) {
	        this.raise(node.start, "super() outside of class constructor");
	      }
	      return this.finishNode(node, "Super");

	    case _tokenizerTypes.types._this:
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, "ThisExpression");

	    case _tokenizerTypes.types._yield:
	      if (this.state.inGenerator) this.unexpected();

	    case _tokenizerTypes.types.name:
	      node = this.startNode();
	      var allowAwait = this.hasPlugin("asyncFunctions") && this.state.value === "await" && this.state.inAsync;
	      var allowYield = this.shouldAllowYieldIdentifier();
	      var id = this.parseIdentifier(allowAwait || allowYield);

	      if (this.hasPlugin("asyncFunctions")) {
	        if (id.name === "await") {
	          if (this.state.inAsync || this.inModule) {
	            return this.parseAwait(node);
	          }
	        } else if (id.name === "async" && this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
	          this.next();
	          return this.parseFunction(node, false, false, true);
	        } else if (canBeArrow && id.name === "async" && this.match(_tokenizerTypes.types.name)) {
	          var params = [this.parseIdentifier()];
	          this.expect(_tokenizerTypes.types.arrow);
	          // let foo = bar => {};
	          return this.parseArrowExpression(node, params, true);
	        }
	      }

	      if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
	        return this.parseArrowExpression(node, [id]);
	      }

	      return id;

	    case _tokenizerTypes.types._do:
	      if (this.hasPlugin("doExpressions")) {
	        var _node = this.startNode();
	        this.next();
	        var oldInFunction = this.state.inFunction;
	        var oldLabels = this.state.labels;
	        this.state.labels = [];
	        this.state.inFunction = false;
	        _node.body = this.parseBlock(false, true);
	        this.state.inFunction = oldInFunction;
	        this.state.labels = oldLabels;
	        return this.finishNode(_node, "DoExpression");
	      }

	    case _tokenizerTypes.types.regexp:
	      var value = this.state.value;
	      node = this.parseLiteral(value.value, "RegExpLiteral");
	      node.pattern = value.pattern;
	      node.flags = value.flags;
	      return node;

	    case _tokenizerTypes.types.num:
	      return this.parseLiteral(this.state.value, "NumericLiteral");

	    case _tokenizerTypes.types.string:
	      return this.parseLiteral(this.state.value, "StringLiteral");

	    case _tokenizerTypes.types._null:
	      node = this.startNode();
	      this.next();
	      return this.finishNode(node, "NullLiteral");

	    case _tokenizerTypes.types._true:case _tokenizerTypes.types._false:
	      node = this.startNode();
	      node.value = this.match(_tokenizerTypes.types._true);
	      this.next();
	      return this.finishNode(node, "BooleanLiteral");

	    case _tokenizerTypes.types.parenL:
	      return this.parseParenAndDistinguishExpression(null, null, canBeArrow);

	    case _tokenizerTypes.types.bracketL:
	      node = this.startNode();
	      this.next();
	      node.elements = this.parseExprList(_tokenizerTypes.types.bracketR, true, true, refShorthandDefaultPos);
	      this.toReferencedList(node.elements);
	      return this.finishNode(node, "ArrayExpression");

	    case _tokenizerTypes.types.braceL:
	      return this.parseObj(false, refShorthandDefaultPos);

	    case _tokenizerTypes.types._function:
	      return this.parseFunctionExpression();

	    case _tokenizerTypes.types.at:
	      this.parseDecorators();

	    case _tokenizerTypes.types._class:
	      node = this.startNode();
	      this.takeDecorators(node);
	      return this.parseClass(node, false);

	    case _tokenizerTypes.types._new:
	      return this.parseNew();

	    case _tokenizerTypes.types.backQuote:
	      return this.parseTemplate();

	    case _tokenizerTypes.types.doubleColon:
	      node = this.startNode();
	      this.next();
	      node.object = null;
	      var callee = node.callee = this.parseNoCallExpr();
	      if (callee.type === "MemberExpression") {
	        return this.finishNode(node, "BindExpression");
	      } else {
	        this.raise(callee.start, "Binding should be performed on object property.");
	      }

	    default:
	      this.unexpected();
	  }
	};

	pp.parseFunctionExpression = function () {
	  var node = this.startNode();
	  var meta = this.parseIdentifier(true);
	  if (this.state.inGenerator && this.eat(_tokenizerTypes.types.dot) && this.hasPlugin("functionSent")) {
	    return this.parseMetaProperty(node, meta, "sent");
	  } else {
	    return this.parseFunction(node, false);
	  }
	};

	pp.parseMetaProperty = function (node, meta, propertyName) {
	  node.meta = meta;
	  node.property = this.parseIdentifier(true);

	  if (node.property.name !== propertyName) {
	    this.raise(node.property.start, "The only valid meta property for new is " + meta.name + "." + propertyName);
	  }

	  return this.finishNode(node, "MetaProperty");
	};

	pp.parseLiteral = function (value, type) {
	  var node = this.startNode();
	  this.addExtra(node, "rawValue", value);
	  this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
	  node.value = value;
	  this.next();
	  return this.finishNode(node, type);
	};

	pp.parseParenExpression = function () {
	  this.expect(_tokenizerTypes.types.parenL);
	  var val = this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  return val;
	};

	pp.parseParenAndDistinguishExpression = function (startPos, startLoc, canBeArrow, isAsync) {
	  startPos = startPos || this.state.start;
	  startLoc = startLoc || this.state.startLoc;

	  var val = undefined;
	  this.next();

	  var innerStartPos = this.state.start,
	      innerStartLoc = this.state.startLoc;
	  var exprList = [],
	      first = true;
	  var refShorthandDefaultPos = { start: 0 },
	      spreadStart = undefined,
	      optionalCommaStart = undefined;
	  while (!this.match(_tokenizerTypes.types.parenR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.match(_tokenizerTypes.types.parenR) && this.hasPlugin("trailingFunctionCommas")) {
	        optionalCommaStart = this.state.start;
	        break;
	      }
	    }

	    if (this.match(_tokenizerTypes.types.ellipsis)) {
	      var spreadNodeStartPos = this.state.start,
	          spreadNodeStartLoc = this.state.startLoc;
	      spreadStart = this.state.start;
	      exprList.push(this.parseParenItem(this.parseRest(), spreadNodeStartLoc, spreadNodeStartPos));
	      break;
	    } else {
	      exprList.push(this.parseMaybeAssign(false, refShorthandDefaultPos, this.parseParenItem));
	    }
	  }

	  var innerEndPos = this.state.start;
	  var innerEndLoc = this.state.startLoc;
	  this.expect(_tokenizerTypes.types.parenR);

	  if (canBeArrow && !this.canInsertSemicolon() && this.eat(_tokenizerTypes.types.arrow)) {
	    for (var _i = 0; _i < exprList.length; _i++) {
	      var param = exprList[_i];
	      if (param.extra && param.extra.parenthesized) this.unexpected(param.extra.parenStart);
	    }

	    return this.parseArrowExpression(this.startNodeAt(startPos, startLoc), exprList, isAsync);
	  }

	  if (!exprList.length) {
	    if (isAsync) {
	      return;
	    } else {
	      this.unexpected(this.state.lastTokStart);
	    }
	  }
	  if (optionalCommaStart) this.unexpected(optionalCommaStart);
	  if (spreadStart) this.unexpected(spreadStart);
	  if (refShorthandDefaultPos.start) this.unexpected(refShorthandDefaultPos.start);

	  if (exprList.length > 1) {
	    val = this.startNodeAt(innerStartPos, innerStartLoc);
	    val.expressions = exprList;
	    this.toReferencedList(val.expressions);
	    this.finishNodeAt(val, "SequenceExpression", innerEndPos, innerEndLoc);
	  } else {
	    val = exprList[0];
	  }

	  this.addExtra(val, "parenthesized", true);
	  this.addExtra(val, "parenStart", startPos);

	  return val;
	};

	pp.parseParenItem = function (node) {
	  return node;
	};

	// New's precedence is slightly tricky. It must allow its argument
	// to be a `[]` or dot subscript expression, but not a call — at
	// least, not without wrapping it in parentheses. Thus, it uses the

	pp.parseNew = function () {
	  var node = this.startNode();
	  var meta = this.parseIdentifier(true);

	  if (this.eat(_tokenizerTypes.types.dot)) {
	    return this.parseMetaProperty(node, meta, "target");
	  }

	  node.callee = this.parseNoCallExpr();

	  if (this.eat(_tokenizerTypes.types.parenL)) {
	    node.arguments = this.parseExprList(_tokenizerTypes.types.parenR, this.hasPlugin("trailingFunctionCommas"));
	    this.toReferencedList(node.arguments);
	  } else {
	    node.arguments = [];
	  }

	  return this.finishNode(node, "NewExpression");
	};

	// Parse template expression.

	pp.parseTemplateElement = function () {
	  var elem = this.startNode();
	  elem.value = {
	    raw: this.input.slice(this.state.start, this.state.end).replace(/\r\n?/g, "\n"),
	    cooked: this.state.value
	  };
	  this.next();
	  elem.tail = this.match(_tokenizerTypes.types.backQuote);
	  return this.finishNode(elem, "TemplateElement");
	};

	pp.parseTemplate = function () {
	  var node = this.startNode();
	  this.next();
	  node.expressions = [];
	  var curElt = this.parseTemplateElement();
	  node.quasis = [curElt];
	  while (!curElt.tail) {
	    this.expect(_tokenizerTypes.types.dollarBraceL);
	    node.expressions.push(this.parseExpression());
	    this.expect(_tokenizerTypes.types.braceR);
	    node.quasis.push(curElt = this.parseTemplateElement());
	  }
	  this.next();
	  return this.finishNode(node, "TemplateLiteral");
	};

	// Parse an object literal or binding pattern.

	pp.parseObj = function (isPattern, refShorthandDefaultPos) {
	  var decorators = [];
	  var propHash = _Object$create(null);
	  var first = true;
	  var node = this.startNode();

	  node.properties = [];
	  this.next();

	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }

	    while (this.match(_tokenizerTypes.types.at)) {
	      decorators.push(this.parseDecorator());
	    }

	    var prop = this.startNode(),
	        isGenerator = false,
	        isAsync = false,
	        startPos = undefined,
	        startLoc = undefined;
	    if (decorators.length) {
	      prop.decorators = decorators;
	      decorators = [];
	    }

	    if (this.hasPlugin("objectRestSpread") && this.match(_tokenizerTypes.types.ellipsis)) {
	      prop = this.parseSpread();
	      prop.type = isPattern ? "RestProperty" : "SpreadProperty";
	      node.properties.push(prop);
	      continue;
	    }

	    prop.method = false;
	    prop.shorthand = false;

	    if (isPattern || refShorthandDefaultPos) {
	      startPos = this.state.start;
	      startLoc = this.state.startLoc;
	    }

	    if (!isPattern) {
	      isGenerator = this.eat(_tokenizerTypes.types.star);
	    }

	    if (!isPattern && this.hasPlugin("asyncFunctions") && this.isContextual("async")) {
	      if (isGenerator) this.unexpected();

	      var asyncId = this.parseIdentifier();
	      if (this.match(_tokenizerTypes.types.colon) || this.match(_tokenizerTypes.types.parenL) || this.match(_tokenizerTypes.types.braceR)) {
	        prop.key = asyncId;
	      } else {
	        isAsync = true;
	        if (this.hasPlugin("asyncGenerators")) isGenerator = this.eat(_tokenizerTypes.types.star);
	        this.parsePropertyName(prop);
	      }
	    } else {
	      this.parsePropertyName(prop);
	    }

	    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos);
	    this.checkPropClash(prop, propHash);

	    if (prop.shorthand) {
	      this.addExtra(prop, "shorthand", true);
	    }

	    node.properties.push(prop);
	  }

	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no property");
	  }

	  return this.finishNode(node, isPattern ? "ObjectPattern" : "ObjectExpression");
	};

	pp.parseObjPropValue = function (prop, startPos, startLoc, isGenerator, isAsync, isPattern, refShorthandDefaultPos) {
	  if (isAsync || isGenerator || this.match(_tokenizerTypes.types.parenL)) {
	    if (isPattern) this.unexpected();
	    prop.kind = "method";
	    prop.method = true;
	    this.parseMethod(prop, isGenerator, isAsync);
	    return this.finishNode(prop, "ObjectMethod");
	  }

	  if (this.eat(_tokenizerTypes.types.colon)) {
	    prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssign(false, refShorthandDefaultPos);
	    return this.finishNode(prop, "ObjectProperty");
	  }

	  if (!prop.computed && prop.key.type === "Identifier" && (prop.key.name === "get" || prop.key.name === "set") && !this.match(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR)) {
	    if (isGenerator || isAsync || isPattern) this.unexpected();
	    prop.kind = prop.key.name;
	    this.parsePropertyName(prop);
	    this.parseMethod(prop, false);
	    var paramCount = prop.kind === "get" ? 0 : 1;
	    if (prop.params.length !== paramCount) {
	      var start = prop.start;
	      if (prop.kind === "get") {
	        this.raise(start, "getter should have no params");
	      } else {
	        this.raise(start, "setter should have exactly one param");
	      }
	    }
	    return this.finishNode(prop, "ObjectMethod");
	  }

	  if (!prop.computed && prop.key.type === "Identifier") {
	    if (isPattern) {
	      var illegalBinding = this.isKeyword(prop.key.name);
	      if (!illegalBinding && this.state.strict) {
	        illegalBinding = _utilIdentifier.reservedWords.strictBind(prop.key.name) || _utilIdentifier.reservedWords.strict(prop.key.name);
	      }
	      if (illegalBinding) {
	        this.raise(prop.key.start, "Binding " + prop.key.name);
	      }
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else if (this.match(_tokenizerTypes.types.eq) && refShorthandDefaultPos) {
	      if (!refShorthandDefaultPos.start) {
	        refShorthandDefaultPos.start = this.state.start;
	      }
	      prop.value = this.parseMaybeDefault(startPos, startLoc, prop.key.__clone());
	    } else {
	      prop.value = prop.key.__clone();
	    }
	    prop.shorthand = true;
	    return this.finishNode(prop, "ObjectProperty");
	  }

	  this.unexpected();
	};

	pp.parsePropertyName = function (prop) {
	  if (this.eat(_tokenizerTypes.types.bracketL)) {
	    prop.computed = true;
	    prop.key = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.bracketR);
	    return prop.key;
	  } else {
	    prop.computed = false;
	    return prop.key = this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
	  }
	};

	// Initialize empty function node.

	pp.initFunction = function (node, isAsync) {
	  node.id = null;
	  node.generator = false;
	  node.expression = false;
	  if (this.hasPlugin("asyncFunctions")) {
	    node.async = !!isAsync;
	  }
	};

	// Parse object or class method.

	pp.parseMethod = function (node, isGenerator, isAsync) {
	  var oldInMethod = this.state.inMethod;
	  this.state.inMethod = node.kind || true;
	  this.initFunction(node, isAsync);
	  this.expect(_tokenizerTypes.types.parenL);
	  node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.hasPlugin("trailingFunctionCommas"));
	  node.generator = isGenerator;
	  this.parseFunctionBody(node);
	  this.state.inMethod = oldInMethod;
	  return node;
	};

	// Parse arrow function expression with given parameters.

	pp.parseArrowExpression = function (node, params, isAsync) {
	  this.initFunction(node, isAsync);
	  node.params = this.toAssignableList(params, true);
	  this.parseFunctionBody(node, true);
	  return this.finishNode(node, "ArrowFunctionExpression");
	};

	// Parse function body and check parameters.

	pp.parseFunctionBody = function (node, allowExpression) {
	  var isExpression = allowExpression && !this.match(_tokenizerTypes.types.braceL);

	  var oldInAsync = this.state.inAsync;
	  this.state.inAsync = node.async;
	  if (isExpression) {
	    node.body = this.parseMaybeAssign();
	    node.expression = true;
	  } else {
	    // Start a new scope with regard to labels and the `inFunction`
	    // flag (restore them to their old value afterwards).
	    var oldInFunc = this.state.inFunction,
	        oldInGen = this.state.inGenerator,
	        oldLabels = this.state.labels;
	    this.state.inFunction = true;this.state.inGenerator = node.generator;this.state.labels = [];
	    node.body = this.parseBlock(true);
	    node.expression = false;
	    this.state.inFunction = oldInFunc;this.state.inGenerator = oldInGen;this.state.labels = oldLabels;
	  }
	  this.state.inAsync = oldInAsync;

	  // If this is a strict mode function, verify that argument names
	  // are not repeated, and it does not try to bind the words `eval`
	  // or `arguments`.
	  var checkLVal = this.state.strict;
	  var checkLValStrict = false;
	  var isStrict = false;

	  // arrow function
	  if (allowExpression) checkLVal = true;

	  // normal function
	  if (!isExpression && node.body.directives.length) {
	    for (var _iterator = (node.body.directives /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i2 >= _iterator.length) break;
	        _ref = _iterator[_i2++];
	      } else {
	        _i2 = _iterator.next();
	        if (_i2.done) break;
	        _ref = _i2.value;
	      }

	      var directive = _ref;

	      if (directive.value.value === "use strict") {
	        isStrict = true;
	        checkLVal = true;
	        checkLValStrict = true;
	        break;
	      }
	    }
	  }

	  //
	  if (isStrict && node.id && node.id.type === "Identifier" && node.id.name === "yield") {
	    this.raise(node.id.start, "Binding yield in strict mode");
	  }

	  if (checkLVal) {
	    var nameHash = _Object$create(null);
	    var oldStrict = this.state.strict;
	    if (checkLValStrict) this.state.strict = true;
	    if (node.id) {
	      this.checkLVal(node.id, true);
	    }
	    for (var _iterator2 = (node.params /*: Array<Object>*/), _isArray2 = Array.isArray(_iterator2), _i3 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	      var _ref2;

	      if (_isArray2) {
	        if (_i3 >= _iterator2.length) break;
	        _ref2 = _iterator2[_i3++];
	      } else {
	        _i3 = _iterator2.next();
	        if (_i3.done) break;
	        _ref2 = _i3.value;
	      }

	      var param = _ref2;

	      this.checkLVal(param, true, nameHash);
	    }
	    this.state.strict = oldStrict;
	  }
	};

	// Parses a comma-separated list of expressions, and returns them as
	// an array. `close` is the token type that ends the list, and
	// `allowEmpty` can be turned on to allow subsequent commas with
	// nothing in between them to be parsed as `null` (which is needed
	// for array literals).

	pp.parseExprList = function (close, allowTrailingComma, allowEmpty, refShorthandDefaultPos) {
	  var elts = [],
	      first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (allowTrailingComma && this.eat(close)) break;
	    }

	    elts.push(this.parseExprListItem(allowEmpty, refShorthandDefaultPos));
	  }
	  return elts;
	};

	pp.parseExprListItem = function (allowEmpty, refShorthandDefaultPos) {
	  var elt = undefined;
	  if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
	    elt = null;
	  } else if (this.match(_tokenizerTypes.types.ellipsis)) {
	    elt = this.parseSpread(refShorthandDefaultPos);
	  } else {
	    elt = this.parseMaybeAssign(false, refShorthandDefaultPos);
	  }
	  return elt;
	};

	// Parse the next token as an identifier. If `liberal` is true (used
	// when parsing properties), it will also convert keywords into
	// identifiers.

	pp.parseIdentifier = function (liberal) {
	  var node = this.startNode();

	  if (this.match(_tokenizerTypes.types.name)) {
	    if (!liberal && this.state.strict && _utilIdentifier.reservedWords.strict(this.state.value)) {
	      this.raise(this.state.start, "The keyword '" + this.state.value + "' is reserved");
	    }

	    node.name = this.state.value;
	  } else if (liberal && this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }

	  if (!liberal && node.name === "await" && this.state.inAsync) {
	    this.raise(node.start, "invalid use of await inside of an async function");
	  }

	  this.next();
	  return this.finishNode(node, "Identifier");
	};

	// Parses await expression inside async function.

	pp.parseAwait = function (node) {
	  if (!this.state.inAsync) {
	    this.unexpected();
	  }
	  if (this.isLineTerminator()) {
	    this.unexpected();
	  }
	  node.all = this.eat(_tokenizerTypes.types.star);
	  node.argument = this.parseMaybeUnary();
	  return this.finishNode(node, "AwaitExpression");
	};

	// Parses yield expression inside generator.

	pp.parseYield = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(_tokenizerTypes.types.semi) || this.canInsertSemicolon() || !this.match(_tokenizerTypes.types.star) && !this.state.type.startsExpr) {
	    node.delegate = false;
	    node.argument = null;
	  } else {
	    node.delegate = this.eat(_tokenizerTypes.types.star);
	    node.argument = this.parseMaybeAssign();
	  }
	  return this.finishNode(node, "YieldExpression");
	};

/***/ },
/* 7915 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__) {

	"use strict";

	var _inherits = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _getIterator = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	exports.__esModule = true;

	var _utilIdentifier = __webpack_require__(__webpack_module_template_argument_4__);

	var _options = __webpack_require__(__webpack_module_template_argument_5__);

	var _tokenizer = __webpack_require__(__webpack_module_template_argument_6__);

	var _tokenizer2 = _interopRequireDefault(_tokenizer);

	var plugins = {};

	exports.plugins = plugins;

	var Parser = (function (_Tokenizer) {
	  _inherits(Parser, _Tokenizer);

	  function Parser(options, input /*: string*/) {
	    _classCallCheck(this, Parser);

	    options = _options.getOptions(options);
	    _Tokenizer.call(this, options, input);

	    this.options = options;
	    this.inModule = this.options.sourceType === "module";
	    this.isReservedWord = _utilIdentifier.reservedWords[6];
	    this.input = input;
	    this.plugins = this.loadPlugins(this.options.plugins);

	    // If enabled, skip leading hashbang line.
	    if (this.state.pos === 0 && this.input[0] === "#" && this.input[1] === "!") {
	      this.skipLineComment(2);
	    }
	  }

	  Parser.prototype.hasPlugin = function hasPlugin(name /*: string*/) /*: boolean*/ {
	    return !!(this.plugins["*"] || this.plugins[name]);
	  };

	  Parser.prototype.extend = function extend(name /*: string*/, f /*: Function*/) {
	    this[name] = f(this[name]);
	  };

	  Parser.prototype.loadPlugins = function loadPlugins(plugins /*: Array<string>*/) {
	    var pluginMap = {};

	    if (plugins.indexOf("flow") >= 0) {
	      // ensure flow plugin loads last
	      plugins.splice(plugins.indexOf("flow"), 1);
	      plugins.push("flow");
	    }

	    for (var _iterator = plugins, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var _name = _ref;

	      pluginMap[_name] = true;

	      var plugin = exports.plugins[_name];
	      if (plugin) plugin(this);
	    }

	    return pluginMap;
	  };

	  Parser.prototype.parse = function parse() /*: {
	                                                type: "File",
	                                                program: {
	                                                  type: "Program",
	                                                  body: Array<Object>
	                                                }
	                                              }*/ {
	    var file = this.startNode();
	    var program = this.startNode();
	    this.nextToken();
	    return this.parseTopLevel(file, program);
	  };

	  return Parser;
	})(_tokenizer2["default"]);

	exports["default"] = Parser;

/***/ },
/* 7916 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _utilLocation = __webpack_require__(__webpack_module_template_argument_1__);

	var _index = __webpack_require__(__webpack_module_template_argument_2__);

	var _index2 = _interopRequireDefault(_index);

	var pp = _index2["default"].prototype;

	// This function is used to raise exceptions on parse errors. It
	// takes an offset integer (into the current `input`) to indicate
	// the location of the error, attaches the position to the end
	// of the error message, and then raises a `SyntaxError` with that
	// message.

	pp.raise = function (pos, message) {
	  var loc = _utilLocation.getLineInfo(this.input, pos);
	  message += " (" + loc.line + ":" + loc.column + ")";
	  var err = new SyntaxError(message);
	  err.pos = pos;
	  err.loc = loc;
	  throw err;
	};

/***/ },
/* 7917 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _tokenizerTypes = __webpack_require__(__webpack_module_template_argument_2__);

	var _index = __webpack_require__(__webpack_module_template_argument_3__);

	var _index2 = _interopRequireDefault(_index);

	var _utilIdentifier = __webpack_require__(__webpack_module_template_argument_4__);

	var pp = _index2["default"].prototype;

	// Convert existing expression atom to assignable pattern
	// if possible.

	pp.toAssignable = function (node, isBinding) {
	  if (node) {
	    switch (node.type) {
	      case "Identifier":
	      case "ObjectPattern":
	      case "ArrayPattern":
	      case "AssignmentPattern":
	        break;

	      case "ObjectExpression":
	        node.type = "ObjectPattern";
	        for (var _iterator = (node.properties /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	          var _ref;

	          if (_isArray) {
	            if (_i >= _iterator.length) break;
	            _ref = _iterator[_i++];
	          } else {
	            _i = _iterator.next();
	            if (_i.done) break;
	            _ref = _i.value;
	          }

	          var prop = _ref;

	          if (prop.type === "ObjectMethod") {
	            if (prop.kind === "get" || prop.kind === "set") {
	              this.raise(prop.key.start, "Object pattern can't contain getter or setter");
	            } else {
	              this.raise(prop.key.start, "Object pattern can't contain methods");
	            }
	          } else {
	            this.toAssignable(prop, isBinding);
	          }
	        }
	        break;

	      case "ObjectProperty":
	        this.toAssignable(node.value, isBinding);
	        break;

	      case "SpreadProperty":
	        node.type = "RestProperty";
	        break;

	      case "ArrayExpression":
	        node.type = "ArrayPattern";
	        this.toAssignableList(node.elements, isBinding);
	        break;

	      case "AssignmentExpression":
	        if (node.operator === "=") {
	          node.type = "AssignmentPattern";
	          delete node.operator;
	        } else {
	          this.raise(node.left.end, "Only '=' operator can be used for specifying default value.");
	        }
	        break;

	      case "MemberExpression":
	        if (!isBinding) break;

	      default:
	        this.raise(node.start, "Assigning to rvalue");
	    }
	  }
	  return node;
	};

	// Convert list of expression atoms to binding list.

	pp.toAssignableList = function (exprList, isBinding) {
	  var end = exprList.length;
	  if (end) {
	    var last = exprList[end - 1];
	    if (last && last.type === "RestElement") {
	      --end;
	    } else if (last && last.type === "SpreadElement") {
	      last.type = "RestElement";
	      var arg = last.argument;
	      this.toAssignable(arg, isBinding);
	      if (arg.type !== "Identifier" && arg.type !== "MemberExpression" && arg.type !== "ArrayPattern") {
	        this.unexpected(arg.start);
	      }
	      --end;
	    }
	  }
	  for (var i = 0; i < end; i++) {
	    var elt = exprList[i];
	    if (elt) this.toAssignable(elt, isBinding);
	  }
	  return exprList;
	};

	// Convert list of expression atoms to a list of

	pp.toReferencedList = function (exprList) {
	  return exprList;
	};

	// Parses spread element.

	pp.parseSpread = function (refShorthandDefaultPos) {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseMaybeAssign(refShorthandDefaultPos);
	  return this.finishNode(node, "SpreadElement");
	};

	pp.parseRest = function () {
	  var node = this.startNode();
	  this.next();
	  node.argument = this.parseBindingIdentifier();
	  return this.finishNode(node, "RestElement");
	};

	pp.shouldAllowYieldIdentifier = function () {
	  return this.match(_tokenizerTypes.types._yield) && !this.state.strict && !this.state.inGenerator;
	};

	pp.parseBindingIdentifier = function () {
	  return this.parseIdentifier(this.shouldAllowYieldIdentifier());
	};

	// Parses lvalue (assignable) atom.

	pp.parseBindingAtom = function () {
	  switch (this.state.type) {
	    case _tokenizerTypes.types._yield:
	      if (this.state.strict || this.state.inGenerator) this.unexpected();

	    case _tokenizerTypes.types.name:
	      return this.parseIdentifier(true);

	    case _tokenizerTypes.types.bracketL:
	      var node = this.startNode();
	      this.next();
	      node.elements = this.parseBindingList(_tokenizerTypes.types.bracketR, true, true);
	      return this.finishNode(node, "ArrayPattern");

	    case _tokenizerTypes.types.braceL:
	      return this.parseObj(true);

	    default:
	      this.unexpected();
	  }
	};

	pp.parseBindingList = function (close, allowEmpty, allowTrailingComma) {
	  var elts = [];
	  var first = true;
	  while (!this.eat(close)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	    if (allowEmpty && this.match(_tokenizerTypes.types.comma)) {
	      elts.push(null);
	    } else if (allowTrailingComma && this.eat(close)) {
	      break;
	    } else if (this.match(_tokenizerTypes.types.ellipsis)) {
	      elts.push(this.parseAssignableListItemTypes(this.parseRest()));
	      this.expect(close);
	      break;
	    } else {
	      var left = this.parseMaybeDefault();
	      this.parseAssignableListItemTypes(left);
	      elts.push(this.parseMaybeDefault(null, null, left));
	    }
	  }
	  return elts;
	};

	pp.parseAssignableListItemTypes = function (param) {
	  return param;
	};

	// Parses assignment pattern around given atom if possible.

	pp.parseMaybeDefault = function (startPos, startLoc, left) {
	  startLoc = startLoc || this.state.startLoc;
	  startPos = startPos || this.state.start;
	  left = left || this.parseBindingAtom();
	  if (!this.eat(_tokenizerTypes.types.eq)) return left;

	  var node = this.startNodeAt(startPos, startLoc);
	  node.left = left;
	  node.right = this.parseMaybeAssign();
	  return this.finishNode(node, "AssignmentPattern");
	};

	// Verify that a node is an lval — something that can be assigned
	// to.

	pp.checkLVal = function (expr, isBinding, checkClashes) {
	  switch (expr.type) {
	    case "Identifier":
	      if (this.state.strict && (_utilIdentifier.reservedWords.strictBind(expr.name) || _utilIdentifier.reservedWords.strict(expr.name))) {
	        this.raise(expr.start, (isBinding ? "Binding " : "Assigning to ") + expr.name + " in strict mode");
	      }

	      if (checkClashes) {
	        // we need to prefix this with an underscore for the cases where we have a key of
	        // `__proto__`. there's a bug in old V8 where the following wouldn't work:
	        //
	        //   > var obj = Object.create(null);
	        //   undefined
	        //   > obj.__proto__
	        //   null
	        //   > obj.__proto__ = true;
	        //   true
	        //   > obj.__proto__
	        //   null
	        var key = "_" + expr.name;

	        if (checkClashes[key]) {
	          this.raise(expr.start, "Argument name clash in strict mode");
	        } else {
	          checkClashes[key] = true;
	        }
	      }
	      break;

	    case "MemberExpression":
	      if (isBinding) this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " member expression");
	      break;

	    case "ObjectPattern":
	      for (var _iterator2 = (expr.properties /*: Array<Object>*/), _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _getIterator(_iterator2);;) {
	        var _ref2;

	        if (_isArray2) {
	          if (_i2 >= _iterator2.length) break;
	          _ref2 = _iterator2[_i2++];
	        } else {
	          _i2 = _iterator2.next();
	          if (_i2.done) break;
	          _ref2 = _i2.value;
	        }

	        var prop = _ref2;

	        if (prop.type === "ObjectProperty") prop = prop.value;
	        this.checkLVal(prop, isBinding, checkClashes);
	      }
	      break;

	    case "ArrayPattern":
	      for (var _iterator3 = (expr.elements /*: Array<Object>*/), _isArray3 = Array.isArray(_iterator3), _i3 = 0, _iterator3 = _isArray3 ? _iterator3 : _getIterator(_iterator3);;) {
	        var _ref3;

	        if (_isArray3) {
	          if (_i3 >= _iterator3.length) break;
	          _ref3 = _iterator3[_i3++];
	        } else {
	          _i3 = _iterator3.next();
	          if (_i3.done) break;
	          _ref3 = _i3.value;
	        }

	        var elem = _ref3;

	        if (elem) this.checkLVal(elem, isBinding, checkClashes);
	      }
	      break;

	    case "AssignmentPattern":
	      this.checkLVal(expr.left, isBinding, checkClashes);
	      break;

	    case "RestProperty":
	    case "RestElement":
	      this.checkLVal(expr.argument, isBinding, checkClashes);
	      break;

	    default:
	      this.raise(expr.start, (isBinding ? "Binding" : "Assigning to") + " rvalue");
	  }
	};

/***/ },
/* 7918 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _index = __webpack_require__(__webpack_module_template_argument_2__);

	var _index2 = _interopRequireDefault(_index);

	var _utilLocation = __webpack_require__(__webpack_module_template_argument_3__);

	// Start an AST node, attaching a start offset.

	var pp = _index2["default"].prototype;

	var Node = (function () {
	  function Node(pos /*:: ?: number*/, loc /*:: ?: SourceLocation*/) {
	    _classCallCheck(this, Node);

	    this.type = "";
	    this.start = pos;
	    this.end = 0;
	    this.loc = new _utilLocation.SourceLocation(loc);
	  }

	  Node.prototype.__clone = function __clone() /*: Node*/ {
	    var node2 = new Node();
	    for (var key in this) {
	      node2[key] = this[key];
	    }return node2;
	  };

	  return Node;
	})();

	pp.startNode = function () {
	  return new Node(this.state.start, this.state.startLoc);
	};

	pp.startNodeAt = function (pos, loc) {
	  return new Node(pos, loc);
	};

	function finishNodeAt(node, type, pos, loc) {
	  node.type = type;
	  node.end = pos;
	  node.loc.end = loc;
	  this.processComment(node);
	  return node;
	}

	// Finish an AST node, adding `type` and `end` properties.

	pp.finishNode = function (node, type) {
	  return finishNodeAt.call(this, node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);
	};

	// Finish node at given position

	pp.finishNodeAt = function (node, type, pos, loc) {
	  return finishNodeAt.call(this, node, type, pos, loc);
	};

/***/ },
/* 7919 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__) {

	"use strict";

	var _Object$create = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _getIterator = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _tokenizerTypes = __webpack_require__(__webpack_module_template_argument_3__);

	var _index = __webpack_require__(__webpack_module_template_argument_4__);

	var _index2 = _interopRequireDefault(_index);

	var _utilWhitespace = __webpack_require__(__webpack_module_template_argument_5__);

	var pp = _index2["default"].prototype;

	// ### Statement parsing

	// Parse a program. Initializes the parser, reads any number of
	// statements, and wraps them in a Program node.  Optionally takes a
	// `program` argument.  If present, the statements will be appended
	// to its body instead of creating a new node.

	pp.parseTopLevel = function (file, program) {
	  program.sourceType = this.options.sourceType;

	  this.parseBlockBody(program, true, true, _tokenizerTypes.types.eof);

	  file.program = this.finishNode(program, "Program");
	  file.comments = this.state.comments;
	  file.tokens = this.state.tokens;

	  return this.finishNode(file, "File");
	};

	var loopLabel = { kind: "loop" },
	    switchLabel = { kind: "switch" };

	// TODO

	pp.parseDirective = function () {
	  var directiveLiteral = this.startNode();
	  var directive = this.startNode();

	  var raw = this.input.slice(this.state.start, this.state.end);
	  var val = directiveLiteral.value = raw.slice(1, -1); // remove quotes

	  this.addExtra(directiveLiteral, "raw", raw);
	  this.addExtra(directiveLiteral, "rawValue", val);

	  this.next();

	  directive.value = this.finishNode(directiveLiteral, "DirectiveLiteral");

	  this.semicolon();
	  return this.finishNode(directive, "Directive");
	};

	// Parse a single statement.
	//
	// If expecting a statement and finding a slash operator, parse a
	// regular expression literal. This is to handle cases like
	// `if (foo) /blah/.exec(foo)`, where looking at the previous token
	// does not help.

	pp.parseStatement = function (declaration, topLevel) {
	  if (this.match(_tokenizerTypes.types.at)) {
	    this.parseDecorators(true);
	  }

	  var starttype = this.state.type,
	      node = this.startNode();

	  // Most types of statements are recognized by the keyword they
	  // start with. Many are trivial to parse, some require a bit of
	  // complexity.

	  switch (starttype) {
	    case _tokenizerTypes.types._break:case _tokenizerTypes.types._continue:
	      return this.parseBreakContinueStatement(node, starttype.keyword);
	    case _tokenizerTypes.types._debugger:
	      return this.parseDebuggerStatement(node);
	    case _tokenizerTypes.types._do:
	      return this.parseDoStatement(node);
	    case _tokenizerTypes.types._for:
	      return this.parseForStatement(node);
	    case _tokenizerTypes.types._function:
	      if (!declaration) this.unexpected();
	      return this.parseFunctionStatement(node);

	    case _tokenizerTypes.types._class:
	      if (!declaration) this.unexpected();
	      this.takeDecorators(node);
	      return this.parseClass(node, true);

	    case _tokenizerTypes.types._if:
	      return this.parseIfStatement(node);
	    case _tokenizerTypes.types._return:
	      return this.parseReturnStatement(node);
	    case _tokenizerTypes.types._switch:
	      return this.parseSwitchStatement(node);
	    case _tokenizerTypes.types._throw:
	      return this.parseThrowStatement(node);
	    case _tokenizerTypes.types._try:
	      return this.parseTryStatement(node);

	    case _tokenizerTypes.types._let:
	    case _tokenizerTypes.types._const:
	      if (!declaration) this.unexpected(); // NOTE: falls through to _var

	    case _tokenizerTypes.types._var:
	      return this.parseVarStatement(node, starttype);

	    case _tokenizerTypes.types._while:
	      return this.parseWhileStatement(node);
	    case _tokenizerTypes.types._with:
	      return this.parseWithStatement(node);
	    case _tokenizerTypes.types.braceL:
	      return this.parseBlock();
	    case _tokenizerTypes.types.semi:
	      return this.parseEmptyStatement(node);
	    case _tokenizerTypes.types._export:
	    case _tokenizerTypes.types._import:
	      if (!this.options.allowImportExportEverywhere) {
	        if (!topLevel) {
	          this.raise(this.state.start, "'import' and 'export' may only appear at the top level");
	        }

	        if (!this.inModule) {
	          this.raise(this.state.start, "'import' and 'export' may appear only with 'sourceType: module'");
	        }
	      }
	      return starttype === _tokenizerTypes.types._import ? this.parseImport(node) : this.parseExport(node);

	    case _tokenizerTypes.types.name:
	      if (this.hasPlugin("asyncFunctions") && this.state.value === "async") {
	        // peek ahead and see if next token is a function
	        var state = this.state.clone();
	        this.next();
	        if (this.match(_tokenizerTypes.types._function) && !this.canInsertSemicolon()) {
	          this.expect(_tokenizerTypes.types._function);
	          return this.parseFunction(node, true, false, true);
	        } else {
	          this.state = state;
	        }
	      }
	  }

	  // If the statement does not start with a statement keyword or a
	  // brace, it's an ExpressionStatement or LabeledStatement. We
	  // simply start parsing an expression, and afterwards, if the
	  // next token is a colon and the expression was a simple
	  // Identifier node, we switch to interpreting it as a label.
	  var maybeName = this.state.value;
	  var expr = this.parseExpression();

	  if (starttype === _tokenizerTypes.types.name && expr.type === "Identifier" && this.eat(_tokenizerTypes.types.colon)) {
	    return this.parseLabeledStatement(node, maybeName, expr);
	  } else {
	    return this.parseExpressionStatement(node, expr);
	  }
	};

	pp.takeDecorators = function (node) {
	  if (this.state.decorators.length) {
	    node.decorators = this.state.decorators;
	    this.state.decorators = [];
	  }
	};

	pp.parseDecorators = function (allowExport) {
	  while (this.match(_tokenizerTypes.types.at)) {
	    this.state.decorators.push(this.parseDecorator());
	  }

	  if (allowExport && this.match(_tokenizerTypes.types._export)) {
	    return;
	  }

	  if (!this.match(_tokenizerTypes.types._class)) {
	    this.raise(this.state.start, "Leading decorators must be attached to a class declaration");
	  }
	};

	pp.parseDecorator = function () {
	  if (!this.hasPlugin("decorators")) {
	    this.unexpected();
	  }
	  var node = this.startNode();
	  this.next();
	  node.expression = this.parseMaybeAssign();
	  return this.finishNode(node, "Decorator");
	};

	pp.parseBreakContinueStatement = function (node, keyword) {
	  var isBreak = keyword === "break";
	  this.next();

	  if (this.isLineTerminator()) {
	    node.label = null;
	  } else if (!this.match(_tokenizerTypes.types.name)) {
	    this.unexpected();
	  } else {
	    node.label = this.parseIdentifier();
	    this.semicolon();
	  }

	  // Verify that there is an actual destination to break or
	  // continue to.
	  var i = undefined;
	  for (i = 0; i < this.state.labels.length; ++i) {
	    var lab = this.state.labels[i];
	    if (node.label == null || lab.name === node.label.name) {
	      if (lab.kind != null && (isBreak || lab.kind === "loop")) break;
	      if (node.label && isBreak) break;
	    }
	  }
	  if (i === this.state.labels.length) this.raise(node.start, "Unsyntactic " + keyword);
	  return this.finishNode(node, isBreak ? "BreakStatement" : "ContinueStatement");
	};

	pp.parseDebuggerStatement = function (node) {
	  this.next();
	  this.semicolon();
	  return this.finishNode(node, "DebuggerStatement");
	};

	pp.parseDoStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  this.expect(_tokenizerTypes.types._while);
	  node.test = this.parseParenExpression();
	  this.eat(_tokenizerTypes.types.semi);
	  return this.finishNode(node, "DoWhileStatement");
	};

	// Disambiguating between a `for` and a `for`/`in` or `for`/`of`
	// loop is non-trivial. Basically, we have to parse the init `var`
	// statement or expression, disallowing the `in` operator (see
	// the second parameter to `parseExpression`), and then check
	// whether the next token is `in` or `of`. When there is no init
	// part (semicolon immediately after the opening parenthesis), it
	// is a regular `for` loop.

	pp.parseForStatement = function (node) {
	  this.next();
	  this.state.labels.push(loopLabel);
	  this.expect(_tokenizerTypes.types.parenL);

	  if (this.match(_tokenizerTypes.types.semi)) {
	    return this.parseFor(node, null);
	  }

	  if (this.match(_tokenizerTypes.types._var) || this.match(_tokenizerTypes.types._let) || this.match(_tokenizerTypes.types._const)) {
	    var _init = this.startNode(),
	        varKind = this.state.type;
	    this.next();
	    this.parseVar(_init, true, varKind);
	    this.finishNode(_init, "VariableDeclaration");

	    if (this.match(_tokenizerTypes.types._in) || this.isContextual("of")) {
	      if (_init.declarations.length === 1 && !_init.declarations[0].init) {
	        return this.parseForIn(node, _init);
	      }
	    }

	    return this.parseFor(node, _init);
	  }

	  var refShorthandDefaultPos = { start: 0 };
	  var init = this.parseExpression(true, refShorthandDefaultPos);
	  if (this.match(_tokenizerTypes.types._in) || this.isContextual("of")) {
	    this.toAssignable(init);
	    this.checkLVal(init);
	    return this.parseForIn(node, init);
	  } else if (refShorthandDefaultPos.start) {
	    this.unexpected(refShorthandDefaultPos.start);
	  }
	  return this.parseFor(node, init);
	};

	pp.parseFunctionStatement = function (node) {
	  this.next();
	  return this.parseFunction(node, true);
	};

	pp.parseIfStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  node.consequent = this.parseStatement(false);
	  node.alternate = this.eat(_tokenizerTypes.types._else) ? this.parseStatement(false) : null;
	  return this.finishNode(node, "IfStatement");
	};

	pp.parseReturnStatement = function (node) {
	  if (!this.state.inFunction && !this.options.allowReturnOutsideFunction) {
	    this.raise(this.state.start, "'return' outside of function");
	  }

	  this.next();

	  // In `return` (and `break`/`continue`), the keywords with
	  // optional arguments, we eagerly look for a semicolon or the
	  // possibility to insert one.

	  if (this.isLineTerminator()) {
	    node.argument = null;
	  } else {
	    node.argument = this.parseExpression();
	    this.semicolon();
	  }

	  return this.finishNode(node, "ReturnStatement");
	};

	pp.parseSwitchStatement = function (node) {
	  this.next();
	  node.discriminant = this.parseParenExpression();
	  node.cases = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  this.state.labels.push(switchLabel);

	  // Statements under must be grouped (by label) in SwitchCase
	  // nodes. `cur` is used to keep the node that we are currently
	  // adding statements to.

	  var cur = undefined;
	  for (var sawDefault = undefined; !this.match(_tokenizerTypes.types.braceR);) {
	    if (this.match(_tokenizerTypes.types._case) || this.match(_tokenizerTypes.types._default)) {
	      var isCase = this.match(_tokenizerTypes.types._case);
	      if (cur) this.finishNode(cur, "SwitchCase");
	      node.cases.push(cur = this.startNode());
	      cur.consequent = [];
	      this.next();
	      if (isCase) {
	        cur.test = this.parseExpression();
	      } else {
	        if (sawDefault) this.raise(this.state.lastTokStart, "Multiple default clauses");
	        sawDefault = true;
	        cur.test = null;
	      }
	      this.expect(_tokenizerTypes.types.colon);
	    } else {
	      if (cur) {
	        cur.consequent.push(this.parseStatement(true));
	      } else {
	        this.unexpected();
	      }
	    }
	  }
	  if (cur) this.finishNode(cur, "SwitchCase");
	  this.next(); // Closing brace
	  this.state.labels.pop();
	  return this.finishNode(node, "SwitchStatement");
	};

	pp.parseThrowStatement = function (node) {
	  this.next();
	  if (_utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start))) this.raise(this.state.lastTokEnd, "Illegal newline after throw");
	  node.argument = this.parseExpression();
	  this.semicolon();
	  return this.finishNode(node, "ThrowStatement");
	};

	// Reused empty array added for node fields that are always empty.

	var empty = [];

	pp.parseTryStatement = function (node) {
	  this.next();

	  node.block = this.parseBlock();
	  node.handler = null;

	  if (this.match(_tokenizerTypes.types._catch)) {
	    var clause = this.startNode();
	    this.next();

	    this.expect(_tokenizerTypes.types.parenL);
	    clause.param = this.parseBindingAtom();
	    this.checkLVal(clause.param, true, _Object$create(null));
	    this.expect(_tokenizerTypes.types.parenR);

	    clause.body = this.parseBlock();
	    node.handler = this.finishNode(clause, "CatchClause");
	  }

	  node.guardedHandlers = empty;
	  node.finalizer = this.eat(_tokenizerTypes.types._finally) ? this.parseBlock() : null;

	  if (!node.handler && !node.finalizer) {
	    this.raise(node.start, "Missing catch or finally clause");
	  }

	  return this.finishNode(node, "TryStatement");
	};

	pp.parseVarStatement = function (node, kind) {
	  this.next();
	  this.parseVar(node, false, kind);
	  this.semicolon();
	  return this.finishNode(node, "VariableDeclaration");
	};

	pp.parseWhileStatement = function (node) {
	  this.next();
	  node.test = this.parseParenExpression();
	  this.state.labels.push(loopLabel);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "WhileStatement");
	};

	pp.parseWithStatement = function (node) {
	  if (this.state.strict) this.raise(this.state.start, "'with' in strict mode");
	  this.next();
	  node.object = this.parseParenExpression();
	  node.body = this.parseStatement(false);
	  return this.finishNode(node, "WithStatement");
	};

	pp.parseEmptyStatement = function (node) {
	  this.next();
	  return this.finishNode(node, "EmptyStatement");
	};

	pp.parseLabeledStatement = function (node, maybeName, expr) {
	  for (var _iterator = (this.state.labels /*: Array<Object>*/), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	    var _ref;

	    if (_isArray) {
	      if (_i >= _iterator.length) break;
	      _ref = _iterator[_i++];
	    } else {
	      _i = _iterator.next();
	      if (_i.done) break;
	      _ref = _i.value;
	    }

	    var label = _ref;

	    if (label.name === maybeName) {
	      this.raise(expr.start, "Label '" + maybeName + "' is already declared");
	    }
	  }

	  var kind = this.state.type.isLoop ? "loop" : this.match(_tokenizerTypes.types._switch) ? "switch" : null;
	  for (var i = this.state.labels.length - 1; i >= 0; i--) {
	    var label = this.state.labels[i];
	    if (label.statementStart === node.start) {
	      label.statementStart = this.state.start;
	      label.kind = kind;
	    } else {
	      break;
	    }
	  }

	  this.state.labels.push({ name: maybeName, kind: kind, statementStart: this.state.start });
	  node.body = this.parseStatement(true);
	  this.state.labels.pop();
	  node.label = expr;
	  return this.finishNode(node, "LabeledStatement");
	};

	pp.parseExpressionStatement = function (node, expr) {
	  node.expression = expr;
	  this.semicolon();
	  return this.finishNode(node, "ExpressionStatement");
	};

	// Parse a semicolon-enclosed block of statements, handling `"use
	// strict"` declarations when `allowStrict` is true (used for
	// function bodies).

	pp.parseBlock = function (allowDirectives /*:: ?*/) {
	  var node = this.startNode();
	  this.expect(_tokenizerTypes.types.braceL);
	  this.parseBlockBody(node, allowDirectives, false, _tokenizerTypes.types.braceR);
	  return this.finishNode(node, "BlockStatement");
	};

	// TODO

	pp.parseBlockBody = function (node, allowDirectives, topLevel, end) {
	  node.body = [];
	  node.directives = [];

	  var parsedNonDirective = false;
	  var oldStrict = undefined;
	  var octalPosition = undefined;

	  while (!this.eat(end)) {
	    if (allowDirectives && !parsedNonDirective && this.match(_tokenizerTypes.types.string)) {
	      var oldState = this.state;
	      var lookahead = this.lookahead();
	      this.state = lookahead;
	      var isDirective = this.isLineTerminator();
	      this.state = oldState;

	      if (isDirective) {
	        if (this.state.containsOctal && !octalPosition) {
	          octalPosition = this.state.octalPosition;
	        }

	        var stmt = this.parseDirective();
	        node.directives.push(stmt);

	        if (allowDirectives && stmt.value.value === "use strict") {
	          oldStrict = this.state.strict;
	          this.state.strict = true;
	          this.setStrict(true);

	          if (octalPosition) {
	            this.raise(octalPosition, "Octal literal in strict mode");
	          }
	        }

	        continue;
	      }
	    }

	    parsedNonDirective = true;
	    node.body.push(this.parseStatement(true, topLevel));
	  }

	  if (oldStrict === false) {
	    this.setStrict(false);
	  }
	};

	// Parse a regular `for` loop. The disambiguation code in
	// `parseStatement` will already have parsed the init statement or
	// expression.

	pp.parseFor = function (node, init) {
	  node.init = init;
	  this.expect(_tokenizerTypes.types.semi);
	  node.test = this.match(_tokenizerTypes.types.semi) ? null : this.parseExpression();
	  this.expect(_tokenizerTypes.types.semi);
	  node.update = this.match(_tokenizerTypes.types.parenR) ? null : this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, "ForStatement");
	};

	// Parse a `for`/`in` and `for`/`of` loop, which are almost
	// same from parser's perspective.

	pp.parseForIn = function (node, init) {
	  var type = this.match(_tokenizerTypes.types._in) ? "ForInStatement" : "ForOfStatement";
	  this.next();
	  node.left = init;
	  node.right = this.parseExpression();
	  this.expect(_tokenizerTypes.types.parenR);
	  node.body = this.parseStatement(false);
	  this.state.labels.pop();
	  return this.finishNode(node, type);
	};

	// Parse a list of variable declarations.

	pp.parseVar = function (node, isFor, kind) {
	  node.declarations = [];
	  node.kind = kind.keyword;
	  for (;;) {
	    var decl = this.startNode();
	    this.parseVarHead(decl);
	    if (this.eat(_tokenizerTypes.types.eq)) {
	      decl.init = this.parseMaybeAssign(isFor);
	    } else if (kind === _tokenizerTypes.types._const && !(this.match(_tokenizerTypes.types._in) || this.isContextual("of"))) {
	      this.unexpected();
	    } else if (decl.id.type !== "Identifier" && !(isFor && (this.match(_tokenizerTypes.types._in) || this.isContextual("of")))) {
	      this.raise(this.state.lastTokEnd, "Complex binding patterns require an initialization value");
	    } else {
	      decl.init = null;
	    }
	    node.declarations.push(this.finishNode(decl, "VariableDeclarator"));
	    if (!this.eat(_tokenizerTypes.types.comma)) break;
	  }
	  return node;
	};

	pp.parseVarHead = function (decl) {
	  decl.id = this.parseBindingAtom();
	  this.checkLVal(decl.id, true);
	};

	// Parse a function declaration or literal (depending on the
	// `isStatement` parameter).

	pp.parseFunction = function (node, isStatement, allowExpressionBody, isAsync, optionalId) {
	  var oldInMethod = this.state.inMethod;
	  this.state.inMethod = false;

	  this.initFunction(node, isAsync);

	  if (this.match(_tokenizerTypes.types.star)) {
	    if (node.async && !this.hasPlugin("asyncGenerators")) {
	      this.unexpected();
	    } else {
	      node.generator = true;
	      this.next();
	    }
	  }

	  if (isStatement && !optionalId && !this.match(_tokenizerTypes.types.name) && !this.match(_tokenizerTypes.types._yield)) {
	    this.unexpected();
	  }

	  if (this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types._yield)) {
	    node.id = this.parseBindingIdentifier();
	  }

	  this.parseFunctionParams(node);
	  this.parseFunctionBody(node, allowExpressionBody);

	  this.state.inMethod = oldInMethod;

	  return this.finishNode(node, isStatement ? "FunctionDeclaration" : "FunctionExpression");
	};

	pp.parseFunctionParams = function (node) {
	  this.expect(_tokenizerTypes.types.parenL);
	  node.params = this.parseBindingList(_tokenizerTypes.types.parenR, false, this.hasPlugin("trailingFunctionCommas"));
	};

	// Parse a class declaration or literal (depending on the
	// `isStatement` parameter).

	pp.parseClass = function (node, isStatement, optionalId) {
	  this.next();
	  this.parseClassId(node, isStatement, optionalId);
	  this.parseClassSuper(node);
	  this.parseClassBody(node);
	  return this.finishNode(node, isStatement ? "ClassDeclaration" : "ClassExpression");
	};

	pp.isClassProperty = function () {
	  return this.match(_tokenizerTypes.types.eq) || this.isLineTerminator();
	};

	pp.parseClassBody = function (node) {
	  // class bodies are implicitly strict
	  var oldStrict = this.state.strict;
	  this.state.strict = true;

	  var hadConstructorCall = false;
	  var hadConstructor = false;
	  var decorators = [];
	  var classBody = this.startNode();

	  classBody.body = [];

	  this.expect(_tokenizerTypes.types.braceL);

	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (this.eat(_tokenizerTypes.types.semi)) {
	      continue;
	    }

	    if (this.match(_tokenizerTypes.types.at)) {
	      decorators.push(this.parseDecorator());
	      continue;
	    }

	    var method = this.startNode();

	    // steal the decorators if there are any
	    if (decorators.length) {
	      method.decorators = decorators;
	      decorators = [];
	    }

	    var isConstructorCall = false;
	    var isMaybeStatic = this.match(_tokenizerTypes.types.name) && this.state.value === "static";
	    var isGenerator = this.eat(_tokenizerTypes.types.star);
	    var isGetSet = false;
	    var isAsync = false;

	    this.parsePropertyName(method);

	    method["static"] = isMaybeStatic && !this.match(_tokenizerTypes.types.parenL);
	    if (method["static"]) {
	      if (isGenerator) this.unexpected();
	      isGenerator = this.eat(_tokenizerTypes.types.star);
	      this.parsePropertyName(method);
	    }

	    if (!isGenerator && method.key.type === "Identifier" && !method.computed) {
	      if (this.isClassProperty()) {
	        classBody.body.push(this.parseClassProperty(method));
	        continue;
	      }

	      if (this.hasPlugin("classConstructorCall") && method.key.name === "call" && this.match(_tokenizerTypes.types.name) && this.state.value === "constructor") {
	        isConstructorCall = true;
	        this.parsePropertyName(method);
	      }
	    }

	    var isAsyncMethod = this.hasPlugin("asyncFunctions") && !this.match(_tokenizerTypes.types.parenL) && !method.computed && method.key.type === "Identifier" && method.key.name === "async";
	    if (isAsyncMethod) {
	      if (this.hasPlugin("asyncGenerators") && this.eat(_tokenizerTypes.types.star)) isGenerator = true;
	      isAsync = true;
	      this.parsePropertyName(method);
	    }

	    method.kind = "method";

	    if (!method.computed) {
	      var key = method.key;

	      // handle get/set methods
	      // eg. class Foo { get bar() {} set bar() {} }
	      if (!isAsync && !isGenerator && key.type === "Identifier" && !this.match(_tokenizerTypes.types.parenL) && (key.name === "get" || key.name === "set")) {
	        isGetSet = true;
	        method.kind = key.name;
	        key = this.parsePropertyName(method);
	      }

	      // disallow invalid constructors
	      var isConstructor = !isConstructorCall && !method["static"] && (key.type === "Identifier" && key.name === "constructor" || key.type === "StringLiteral" && key.value === "constructor");
	      if (isConstructor) {
	        if (hadConstructor) this.raise(key.start, "Duplicate constructor in the same class");
	        if (isGetSet) this.raise(key.start, "Constructor can't have get/set modifier");
	        if (isGenerator) this.raise(key.start, "Constructor can't be a generator");
	        if (isAsync) this.raise(key.start, "Constructor can't be an async function");
	        method.kind = "constructor";
	        hadConstructor = true;
	      }

	      // disallow static prototype method
	      var isStaticPrototype = method["static"] && (key.type === "Identifier" && key.name === "prototype" || key.type === "StringLiteral" && key.value === "prototype");
	      if (isStaticPrototype) {
	        this.raise(key.start, "Classes may not have static property named prototype");
	      }
	    }

	    // convert constructor to a constructor call
	    if (isConstructorCall) {
	      if (hadConstructorCall) this.raise(method.start, "Duplicate constructor call in the same class");
	      method.kind = "constructorCall";
	      hadConstructorCall = true;
	    }

	    // disallow decorators on class constructors
	    if ((method.kind === "constructor" || method.kind === "constructorCall") && method.decorators) {
	      this.raise(method.start, "You can't attach decorators to a class constructor");
	    }

	    this.parseClassMethod(classBody, method, isGenerator, isAsync);

	    // get methods aren't allowed to have any parameters
	    // set methods must have exactly 1 parameter
	    if (isGetSet) {
	      var paramCount = method.kind === "get" ? 0 : 1;
	      if (method.params.length !== paramCount) {
	        var start = method.start;
	        if (method.kind === "get") {
	          this.raise(start, "getter should have no params");
	        } else {
	          this.raise(start, "setter should have exactly one param");
	        }
	      }
	    }
	  }

	  if (decorators.length) {
	    this.raise(this.state.start, "You have trailing decorators with no method");
	  }

	  node.body = this.finishNode(classBody, "ClassBody");

	  this.state.strict = oldStrict;
	};

	pp.parseClassProperty = function (node) {
	  if (this.match(_tokenizerTypes.types.eq)) {
	    if (!this.hasPlugin("classProperties")) this.unexpected();
	    this.next();
	    node.value = this.parseMaybeAssign();
	  } else {
	    node.value = null;
	  }
	  this.semicolon();
	  return this.finishNode(node, "ClassProperty");
	};

	pp.parseClassMethod = function (classBody, method, isGenerator, isAsync) {
	  this.parseMethod(method, isGenerator, isAsync);
	  classBody.body.push(this.finishNode(method, "ClassMethod"));
	};

	pp.parseClassId = function (node, isStatement, optionalId) {
	  if (this.match(_tokenizerTypes.types.name)) {
	    node.id = this.parseIdentifier();
	  } else {
	    if (optionalId || !isStatement) {
	      node.id = null;
	    } else {
	      this.unexpected();
	    }
	  }
	};

	pp.parseClassSuper = function (node) {
	  node.superClass = this.eat(_tokenizerTypes.types._extends) ? this.parseExprSubscripts() : null;
	};

	// Parses module export declaration.

	pp.parseExport = function (node) {
	  this.next();
	  // export * from '...'
	  if (this.match(_tokenizerTypes.types.star)) {
	    var specifier = this.startNode();
	    this.next();
	    if (this.hasPlugin("exportExtensions") && this.eatContextual("as")) {
	      specifier.exported = this.parseIdentifier();
	      node.specifiers = [this.finishNode(specifier, "ExportNamespaceSpecifier")];
	      this.parseExportSpecifiersMaybe(node);
	      this.parseExportFrom(node, true);
	    } else {
	      this.parseExportFrom(node, true);
	      return this.finishNode(node, "ExportAllDeclaration");
	    }
	  } else if (this.hasPlugin("exportExtensions") && this.isExportDefaultSpecifier()) {
	    var specifier = this.startNode();
	    specifier.exported = this.parseIdentifier(true);
	    node.specifiers = [this.finishNode(specifier, "ExportDefaultSpecifier")];
	    if (this.match(_tokenizerTypes.types.comma) && this.lookahead().type === _tokenizerTypes.types.star) {
	      this.expect(_tokenizerTypes.types.comma);
	      var _specifier = this.startNode();
	      this.expect(_tokenizerTypes.types.star);
	      this.expectContextual("as");
	      _specifier.exported = this.parseIdentifier();
	      node.specifiers.push(this.finishNode(_specifier, "ExportNamespaceSpecifier"));
	    } else {
	      this.parseExportSpecifiersMaybe(node);
	    }
	    this.parseExportFrom(node, true);
	  } else if (this.eat(_tokenizerTypes.types._default)) {
	    // export default ...
	    var expr = this.startNode();
	    var needsSemi = false;
	    if (this.eat(_tokenizerTypes.types._function)) {
	      expr = this.parseFunction(expr, true, false, false, true);
	    } else if (this.match(_tokenizerTypes.types._class)) {
	      expr = this.parseClass(expr, true, true);
	    } else {
	      needsSemi = true;
	      expr = this.parseMaybeAssign();
	    }
	    node.declaration = expr;
	    if (needsSemi) this.semicolon();
	    this.checkExport(node);
	    return this.finishNode(node, "ExportDefaultDeclaration");
	  } else if (this.state.type.keyword || this.shouldParseExportDeclaration()) {
	    node.specifiers = [];
	    node.source = null;
	    node.declaration = this.parseExportDeclaration(node);
	  } else {
	    // export { x, y as z } [from '...']
	    node.declaration = null;
	    node.specifiers = this.parseExportSpecifiers();
	    this.parseExportFrom(node);
	  }
	  this.checkExport(node);
	  return this.finishNode(node, "ExportNamedDeclaration");
	};

	pp.parseExportDeclaration = function () {
	  return this.parseStatement(true);
	};

	pp.isExportDefaultSpecifier = function () {
	  if (this.match(_tokenizerTypes.types.name)) {
	    return this.state.value !== "type" && this.state.value !== "async";
	  }

	  if (!this.match(_tokenizerTypes.types._default)) {
	    return false;
	  }

	  var lookahead = this.lookahead();
	  return lookahead.type === _tokenizerTypes.types.comma || lookahead.type === _tokenizerTypes.types.name && lookahead.value === "from";
	};

	pp.parseExportSpecifiersMaybe = function (node) {
	  if (this.eat(_tokenizerTypes.types.comma)) {
	    node.specifiers = node.specifiers.concat(this.parseExportSpecifiers());
	  }
	};

	pp.parseExportFrom = function (node, expect /*:: ?*/) {
	  if (this.eatContextual("from")) {
	    node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
	    this.checkExport(node);
	  } else {
	    if (expect) {
	      this.unexpected();
	    } else {
	      node.source = null;
	    }
	  }

	  this.semicolon();
	};

	pp.shouldParseExportDeclaration = function () {
	  return this.hasPlugin("asyncFunctions") && this.isContextual("async");
	};

	pp.checkExport = function (node) {
	  if (this.state.decorators.length) {
	    var isClass = node.declaration && (node.declaration.type === "ClassDeclaration" || node.declaration.type === "ClassExpression");
	    if (!node.declaration || !isClass) {
	      this.raise(node.start, "You can only use decorators on an export when exporting a class");
	    }
	    this.takeDecorators(node.declaration);
	  }
	};

	// Parses a comma-separated list of module exports.

	pp.parseExportSpecifiers = function () {
	  var nodes = [];
	  var first = true;
	  var needsFrom = undefined;

	  // export { x, y as z } [from '...']
	  this.expect(_tokenizerTypes.types.braceL);

	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }

	    var isDefault = this.match(_tokenizerTypes.types._default);
	    if (isDefault && !needsFrom) needsFrom = true;

	    var node = this.startNode();
	    node.local = this.parseIdentifier(isDefault);
	    node.exported = this.eatContextual("as") ? this.parseIdentifier(true) : node.local.__clone();
	    nodes.push(this.finishNode(node, "ExportSpecifier"));
	  }

	  // https://github.com/ember-cli/ember-cli/pull/3739
	  if (needsFrom && !this.isContextual("from")) {
	    this.unexpected();
	  }

	  return nodes;
	};

	// Parses import declaration.

	pp.parseImport = function (node) {
	  this.next();

	  // import '...'
	  if (this.match(_tokenizerTypes.types.string)) {
	    node.specifiers = [];
	    node.source = this.parseExprAtom();
	  } else {
	    node.specifiers = [];
	    this.parseImportSpecifiers(node);
	    this.expectContextual("from");
	    node.source = this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.unexpected();
	  }
	  this.semicolon();
	  return this.finishNode(node, "ImportDeclaration");
	};

	// Parses a comma-separated list of module imports.

	pp.parseImportSpecifiers = function (node) {
	  var first = true;
	  if (this.match(_tokenizerTypes.types.name)) {
	    // import defaultObj, { x, y as z } from '...'
	    var startPos = this.state.start,
	        startLoc = this.state.startLoc;
	    node.specifiers.push(this.parseImportSpecifierDefault(this.parseIdentifier(), startPos, startLoc));
	    if (!this.eat(_tokenizerTypes.types.comma)) return;
	  }

	  if (this.match(_tokenizerTypes.types.star)) {
	    var specifier = this.startNode();
	    this.next();
	    this.expectContextual("as");
	    specifier.local = this.parseIdentifier();
	    this.checkLVal(specifier.local, true);
	    node.specifiers.push(this.finishNode(specifier, "ImportNamespaceSpecifier"));
	    return;
	  }

	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.eat(_tokenizerTypes.types.braceR)) {
	    if (first) {
	      first = false;
	    } else {
	      this.expect(_tokenizerTypes.types.comma);
	      if (this.eat(_tokenizerTypes.types.braceR)) break;
	    }

	    var specifier = this.startNode();
	    specifier.imported = this.parseIdentifier(true);
	    specifier.local = this.eatContextual("as") ? this.parseIdentifier() : specifier.imported.__clone();
	    this.checkLVal(specifier.local, true);
	    node.specifiers.push(this.finishNode(specifier, "ImportSpecifier"));
	  }
	};

	pp.parseImportSpecifierDefault = function (id, startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.local = id;
	  this.checkLVal(node.local, true);
	  return this.finishNode(node, "ImportDefaultSpecifier");
	};

/***/ },
/* 7920 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _tokenizerTypes = __webpack_require__(__webpack_module_template_argument_1__);

	var _index = __webpack_require__(__webpack_module_template_argument_2__);

	var _index2 = _interopRequireDefault(_index);

	var _utilWhitespace = __webpack_require__(__webpack_module_template_argument_3__);

	var pp = _index2["default"].prototype;

	// ## Parser utilities

	// TODO

	pp.addExtra = function (node, key, val) {
	  if (!node) return;

	  var extra = node.extra = node.extra || {};
	  extra[key] = val;
	};

	// TODO

	pp.isRelational = function (op) {
	  return this.match(_tokenizerTypes.types.relational) && this.state.value === op;
	};

	// TODO

	pp.expectRelational = function (op) {
	  if (this.isRelational(op)) {
	    this.next();
	  } else {
	    this.unexpected();
	  }
	};

	// Tests whether parsed token is a contextual keyword.

	pp.isContextual = function (name) {
	  return this.match(_tokenizerTypes.types.name) && this.state.value === name;
	};

	// Consumes contextual keyword if possible.

	pp.eatContextual = function (name) {
	  return this.state.value === name && this.eat(_tokenizerTypes.types.name);
	};

	// Asserts that following token is given contextual keyword.

	pp.expectContextual = function (name) {
	  if (!this.eatContextual(name)) this.unexpected();
	};

	// Test whether a semicolon can be inserted at the current position.

	pp.canInsertSemicolon = function () {
	  return this.match(_tokenizerTypes.types.eof) || this.match(_tokenizerTypes.types.braceR) || _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	};

	// TODO

	pp.isLineTerminator = function () {
	  return this.eat(_tokenizerTypes.types.semi) || this.canInsertSemicolon();
	};

	// Consume a semicolon, or, failing that, see if we are allowed to
	// pretend that there is a semicolon at this position.

	pp.semicolon = function () {
	  if (!this.isLineTerminator()) this.unexpected();
	};

	// Expect a token of a given type. If found, consume it, otherwise,
	// raise an unexpected token error.

	pp.expect = function (type) {
	  return this.eat(type) || this.unexpected();
	};

	// Raise an unexpected token error.

	pp.unexpected = function (pos) {
	  this.raise(pos != null ? pos : this.state.start, "Unexpected token");
	};

/***/ },
/* 7921 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	var _tokenizerTypes = __webpack_require__(__webpack_module_template_argument_1__);

	var _parser = __webpack_require__(__webpack_module_template_argument_2__);

	var _parser2 = _interopRequireDefault(_parser);

	var pp = _parser2["default"].prototype;

	pp.flowParseTypeInitialiser = function (tok) {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  this.expect(tok || _tokenizerTypes.types.colon);
	  var type = this.flowParseType();
	  this.state.inType = oldInType;
	  return type;
	};

	pp.flowParseDeclareClass = function (node) {
	  this.next();
	  this.flowParseInterfaceish(node, true);
	  return this.finishNode(node, "DeclareClass");
	};

	pp.flowParseDeclareFunction = function (node) {
	  this.next();

	  var id = node.id = this.parseIdentifier();

	  var typeNode = this.startNode();
	  var typeContainer = this.startNode();

	  if (this.isRelational("<")) {
	    typeNode.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    typeNode.typeParameters = null;
	  }

	  this.expect(_tokenizerTypes.types.parenL);
	  var tmp = this.flowParseFunctionTypeParams();
	  typeNode.params = tmp.params;
	  typeNode.rest = tmp.rest;
	  this.expect(_tokenizerTypes.types.parenR);
	  typeNode.returnType = this.flowParseTypeInitialiser();

	  typeContainer.typeAnnotation = this.finishNode(typeNode, "FunctionTypeAnnotation");
	  id.typeAnnotation = this.finishNode(typeContainer, "TypeAnnotation");

	  this.finishNode(id, id.type);

	  this.semicolon();

	  return this.finishNode(node, "DeclareFunction");
	};

	pp.flowParseDeclare = function (node) {
	  if (this.match(_tokenizerTypes.types._class)) {
	    return this.flowParseDeclareClass(node);
	  } else if (this.match(_tokenizerTypes.types._function)) {
	    return this.flowParseDeclareFunction(node);
	  } else if (this.match(_tokenizerTypes.types._var)) {
	    return this.flowParseDeclareVariable(node);
	  } else if (this.isContextual("module")) {
	    return this.flowParseDeclareModule(node);
	  } else {
	    this.unexpected();
	  }
	};

	pp.flowParseDeclareVariable = function (node) {
	  this.next();
	  node.id = this.flowParseTypeAnnotatableIdentifier();
	  this.semicolon();
	  return this.finishNode(node, "DeclareVariable");
	};

	pp.flowParseDeclareModule = function (node) {
	  this.next();

	  if (this.match(_tokenizerTypes.types.string)) {
	    node.id = this.parseExprAtom();
	  } else {
	    node.id = this.parseIdentifier();
	  }

	  var bodyNode = node.body = this.startNode();
	  var body = bodyNode.body = [];
	  this.expect(_tokenizerTypes.types.braceL);
	  while (!this.match(_tokenizerTypes.types.braceR)) {
	    var node2 = this.startNode();

	    // todo: declare check
	    this.next();

	    body.push(this.flowParseDeclare(node2));
	  }
	  this.expect(_tokenizerTypes.types.braceR);

	  this.finishNode(bodyNode, "BlockStatement");
	  return this.finishNode(node, "DeclareModule");
	};

	// Interfaces

	pp.flowParseInterfaceish = function (node, allowStatic) {
	  node.id = this.parseIdentifier();

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }

	  node["extends"] = [];

	  if (this.eat(_tokenizerTypes.types._extends)) {
	    do {
	      node["extends"].push(this.flowParseInterfaceExtends());
	    } while (this.eat(_tokenizerTypes.types.comma));
	  }

	  node.body = this.flowParseObjectType(allowStatic);
	};

	pp.flowParseInterfaceExtends = function () {
	  var node = this.startNode();

	  node.id = this.parseIdentifier();
	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  } else {
	    node.typeParameters = null;
	  }

	  return this.finishNode(node, "InterfaceExtends");
	};

	pp.flowParseInterface = function (node) {
	  this.flowParseInterfaceish(node, false);
	  return this.finishNode(node, "InterfaceDeclaration");
	};

	// Type aliases

	pp.flowParseTypeAlias = function (node) {
	  node.id = this.parseIdentifier();

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  } else {
	    node.typeParameters = null;
	  }

	  node.right = this.flowParseTypeInitialiser(_tokenizerTypes.types.eq);
	  this.semicolon();

	  return this.finishNode(node, "TypeAlias");
	};

	// Type annotations

	pp.flowParseTypeParameterDeclaration = function () {
	  var node = this.startNode();
	  node.params = [];

	  this.expectRelational("<");
	  while (!this.isRelational(">")) {
	    node.params.push(this.flowParseExistentialTypeParam() || this.flowParseTypeAnnotatableIdentifier());
	    if (!this.isRelational(">")) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  this.expectRelational(">");

	  return this.finishNode(node, "TypeParameterDeclaration");
	};

	pp.flowParseExistentialTypeParam = function () {
	  if (this.match(_tokenizerTypes.types.star)) {
	    var node = this.startNode();
	    this.next();
	    return this.finishNode(node, "ExistentialTypeParam");
	  }
	};

	pp.flowParseTypeParameterInstantiation = function () {
	  var node = this.startNode(),
	      oldInType = this.state.inType;
	  node.params = [];

	  this.state.inType = true;

	  this.expectRelational("<");
	  while (!this.isRelational(">")) {
	    node.params.push(this.flowParseExistentialTypeParam() || this.flowParseType());
	    if (!this.isRelational(">")) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  this.expectRelational(">");

	  this.state.inType = oldInType;

	  return this.finishNode(node, "TypeParameterInstantiation");
	};

	pp.flowParseObjectPropertyKey = function () {
	  return this.match(_tokenizerTypes.types.num) || this.match(_tokenizerTypes.types.string) ? this.parseExprAtom() : this.parseIdentifier(true);
	};

	pp.flowParseObjectTypeIndexer = function (node, isStatic) {
	  node["static"] = isStatic;

	  this.expect(_tokenizerTypes.types.bracketL);
	  node.id = this.flowParseObjectPropertyKey();
	  node.key = this.flowParseTypeInitialiser();
	  this.expect(_tokenizerTypes.types.bracketR);
	  node.value = this.flowParseTypeInitialiser();

	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeIndexer");
	};

	pp.flowParseObjectTypeMethodish = function (node) {
	  node.params = [];
	  node.rest = null;
	  node.typeParameters = null;

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterDeclaration();
	  }

	  this.expect(_tokenizerTypes.types.parenL);
	  while (this.match(_tokenizerTypes.types.name)) {
	    node.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(_tokenizerTypes.types.parenR)) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }

	  if (this.eat(_tokenizerTypes.types.ellipsis)) {
	    node.rest = this.flowParseFunctionTypeParam();
	  }
	  this.expect(_tokenizerTypes.types.parenR);
	  node.returnType = this.flowParseTypeInitialiser();

	  return this.finishNode(node, "FunctionTypeAnnotation");
	};

	pp.flowParseObjectTypeMethod = function (startPos, startLoc, isStatic, key) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(startPos, startLoc));
	  node["static"] = isStatic;
	  node.key = key;
	  node.optional = false;
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeProperty");
	};

	pp.flowParseObjectTypeCallProperty = function (node, isStatic) {
	  var valueNode = this.startNode();
	  node["static"] = isStatic;
	  node.value = this.flowParseObjectTypeMethodish(valueNode);
	  this.flowObjectTypeSemicolon();
	  return this.finishNode(node, "ObjectTypeCallProperty");
	};

	pp.flowParseObjectType = function (allowStatic) {
	  var nodeStart = this.startNode();
	  var node = undefined;
	  var propertyKey = undefined;
	  var isStatic = undefined;

	  nodeStart.callProperties = [];
	  nodeStart.properties = [];
	  nodeStart.indexers = [];

	  this.expect(_tokenizerTypes.types.braceL);

	  while (!this.match(_tokenizerTypes.types.braceR)) {
	    var optional = false;
	    var startPos = this.state.start,
	        startLoc = this.state.startLoc;
	    node = this.startNode();
	    if (allowStatic && this.isContextual("static")) {
	      this.next();
	      isStatic = true;
	    }

	    if (this.match(_tokenizerTypes.types.bracketL)) {
	      nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic));
	    } else if (this.match(_tokenizerTypes.types.parenL) || this.isRelational("<")) {
	      nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, allowStatic));
	    } else {
	      if (isStatic && this.match(_tokenizerTypes.types.colon)) {
	        propertyKey = this.parseIdentifier();
	      } else {
	        propertyKey = this.flowParseObjectPropertyKey();
	      }
	      if (this.isRelational("<") || this.match(_tokenizerTypes.types.parenL)) {
	        // This is a method property
	        nodeStart.properties.push(this.flowParseObjectTypeMethod(startPos, startLoc, isStatic, propertyKey));
	      } else {
	        if (this.eat(_tokenizerTypes.types.question)) {
	          optional = true;
	        }
	        node.key = propertyKey;
	        node.value = this.flowParseTypeInitialiser();
	        node.optional = optional;
	        node["static"] = isStatic;
	        this.flowObjectTypeSemicolon();
	        nodeStart.properties.push(this.finishNode(node, "ObjectTypeProperty"));
	      }
	    }
	  }

	  this.expect(_tokenizerTypes.types.braceR);

	  return this.finishNode(nodeStart, "ObjectTypeAnnotation");
	};

	pp.flowObjectTypeSemicolon = function () {
	  if (!this.eat(_tokenizerTypes.types.semi) && !this.eat(_tokenizerTypes.types.comma) && !this.match(_tokenizerTypes.types.braceR)) {
	    this.unexpected();
	  }
	};

	pp.flowParseGenericType = function (startPos, startLoc, id) {
	  var node = this.startNodeAt(startPos, startLoc);

	  node.typeParameters = null;
	  node.id = id;

	  while (this.eat(_tokenizerTypes.types.dot)) {
	    var node2 = this.startNodeAt(startPos, startLoc);
	    node2.qualification = node.id;
	    node2.id = this.parseIdentifier();
	    node.id = this.finishNode(node2, "QualifiedTypeIdentifier");
	  }

	  if (this.isRelational("<")) {
	    node.typeParameters = this.flowParseTypeParameterInstantiation();
	  }

	  return this.finishNode(node, "GenericTypeAnnotation");
	};

	pp.flowParseTypeofType = function () {
	  var node = this.startNode();
	  this.expect(_tokenizerTypes.types._typeof);
	  node.argument = this.flowParsePrimaryType();
	  return this.finishNode(node, "TypeofTypeAnnotation");
	};

	pp.flowParseTupleType = function () {
	  var node = this.startNode();
	  node.types = [];
	  this.expect(_tokenizerTypes.types.bracketL);
	  // We allow trailing commas
	  while (this.state.pos < this.input.length && !this.match(_tokenizerTypes.types.bracketR)) {
	    node.types.push(this.flowParseType());
	    if (this.match(_tokenizerTypes.types.bracketR)) break;
	    this.expect(_tokenizerTypes.types.comma);
	  }
	  this.expect(_tokenizerTypes.types.bracketR);
	  return this.finishNode(node, "TupleTypeAnnotation");
	};

	pp.flowParseFunctionTypeParam = function () {
	  var optional = false;
	  var node = this.startNode();
	  node.name = this.parseIdentifier();
	  if (this.eat(_tokenizerTypes.types.question)) {
	    optional = true;
	  }
	  node.optional = optional;
	  node.typeAnnotation = this.flowParseTypeInitialiser();
	  return this.finishNode(node, "FunctionTypeParam");
	};

	pp.flowParseFunctionTypeParams = function () {
	  var ret = { params: [], rest: null };
	  while (this.match(_tokenizerTypes.types.name)) {
	    ret.params.push(this.flowParseFunctionTypeParam());
	    if (!this.match(_tokenizerTypes.types.parenR)) {
	      this.expect(_tokenizerTypes.types.comma);
	    }
	  }
	  if (this.eat(_tokenizerTypes.types.ellipsis)) {
	    ret.rest = this.flowParseFunctionTypeParam();
	  }
	  return ret;
	};

	pp.flowIdentToTypeAnnotation = function (startPos, startLoc, node, id) {
	  switch (id.name) {
	    case "any":
	      return this.finishNode(node, "AnyTypeAnnotation");

	    case "void":
	      return this.finishNode(node, "VoidTypeAnnotation");

	    case "bool":
	    case "boolean":
	      return this.finishNode(node, "BooleanTypeAnnotation");

	    case "mixed":
	      return this.finishNode(node, "MixedTypeAnnotation");

	    case "number":
	      return this.finishNode(node, "NumberTypeAnnotation");

	    case "string":
	      return this.finishNode(node, "StringTypeAnnotation");

	    default:
	      return this.flowParseGenericType(startPos, startLoc, id);
	  }
	};

	// The parsing of types roughly parallels the parsing of expressions, and
	// primary types are kind of like primary expressions...they're the
	// primitives with which other types are constructed.
	pp.flowParsePrimaryType = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var node = this.startNode();
	  var tmp = undefined;
	  var type = undefined;
	  var isGroupedType = false;

	  switch (this.state.type) {
	    case _tokenizerTypes.types.name:
	      return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());

	    case _tokenizerTypes.types.braceL:
	      return this.flowParseObjectType();

	    case _tokenizerTypes.types.bracketL:
	      return this.flowParseTupleType();

	    case _tokenizerTypes.types.relational:
	      if (this.state.value === "<") {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	        this.expect(_tokenizerTypes.types.parenL);
	        tmp = this.flowParseFunctionTypeParams();
	        node.params = tmp.params;
	        node.rest = tmp.rest;
	        this.expect(_tokenizerTypes.types.parenR);

	        this.expect(_tokenizerTypes.types.arrow);

	        node.returnType = this.flowParseType();

	        return this.finishNode(node, "FunctionTypeAnnotation");
	      }

	    case _tokenizerTypes.types.parenL:
	      this.next();

	      // Check to see if this is actually a grouped type
	      if (!this.match(_tokenizerTypes.types.parenR) && !this.match(_tokenizerTypes.types.ellipsis)) {
	        if (this.match(_tokenizerTypes.types.name)) {
	          var token = this.lookahead().type;
	          isGroupedType = token !== _tokenizerTypes.types.question && token !== _tokenizerTypes.types.colon;
	        } else {
	          isGroupedType = true;
	        }
	      }

	      if (isGroupedType) {
	        type = this.flowParseType();
	        this.expect(_tokenizerTypes.types.parenR);

	        // If we see a => next then someone was probably confused about
	        // function types, so we can provide a better error message
	        if (this.eat(_tokenizerTypes.types.arrow)) {
	          this.raise(node, "Unexpected token =>. It looks like " + "you are trying to write a function type, but you ended up " + "writing a grouped type followed by an =>, which is a syntax " + "error. Remember, function type parameters are named so function " + "types look like (name1: type1, name2: type2) => returnType. You " + "probably wrote (type1) => returnType");
	        }

	        return type;
	      }

	      tmp = this.flowParseFunctionTypeParams();
	      node.params = tmp.params;
	      node.rest = tmp.rest;

	      this.expect(_tokenizerTypes.types.parenR);

	      this.expect(_tokenizerTypes.types.arrow);

	      node.returnType = this.flowParseType();
	      node.typeParameters = null;

	      return this.finishNode(node, "FunctionTypeAnnotation");

	    case _tokenizerTypes.types.string:
	      node.value = this.state.value;
	      this.addExtra(node, "rawValue", node.value);
	      this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
	      this.next();
	      return this.finishNode(node, "StringLiteralTypeAnnotation");

	    case _tokenizerTypes.types._true:case _tokenizerTypes.types._false:
	      node.value = this.match(_tokenizerTypes.types._true);
	      this.next();
	      return this.finishNode(node, "BooleanLiteralTypeAnnotation");

	    case _tokenizerTypes.types.num:
	      node.value = this.state.value;
	      this.addExtra(node, "rawValue", node.value);
	      this.addExtra(node, "raw", this.input.slice(this.state.start, this.state.end));
	      this.next();
	      return this.finishNode(node, "NumericLiteralTypeAnnotation");

	    case _tokenizerTypes.types._null:
	      node.value = this.match(_tokenizerTypes.types._null);
	      this.next();
	      return this.finishNode(node, "NullLiteralTypeAnnotation");

	    default:
	      if (this.state.type.keyword === "typeof") {
	        return this.flowParseTypeofType();
	      }
	  }

	  this.unexpected();
	};

	pp.flowParsePostfixType = function () {
	  var node = this.startNode();
	  var type = node.elementType = this.flowParsePrimaryType();
	  if (this.match(_tokenizerTypes.types.bracketL)) {
	    this.expect(_tokenizerTypes.types.bracketL);
	    this.expect(_tokenizerTypes.types.bracketR);
	    return this.finishNode(node, "ArrayTypeAnnotation");
	  } else {
	    return type;
	  }
	};

	pp.flowParsePrefixType = function () {
	  var node = this.startNode();
	  if (this.eat(_tokenizerTypes.types.question)) {
	    node.typeAnnotation = this.flowParsePrefixType();
	    return this.finishNode(node, "NullableTypeAnnotation");
	  } else {
	    return this.flowParsePostfixType();
	  }
	};

	pp.flowParseIntersectionType = function () {
	  var node = this.startNode();
	  var type = this.flowParsePrefixType();
	  node.types = [type];
	  while (this.eat(_tokenizerTypes.types.bitwiseAND)) {
	    node.types.push(this.flowParsePrefixType());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "IntersectionTypeAnnotation");
	};

	pp.flowParseUnionType = function () {
	  var node = this.startNode();
	  var type = this.flowParseIntersectionType();
	  node.types = [type];
	  while (this.eat(_tokenizerTypes.types.bitwiseOR)) {
	    node.types.push(this.flowParseIntersectionType());
	  }
	  return node.types.length === 1 ? type : this.finishNode(node, "UnionTypeAnnotation");
	};

	pp.flowParseType = function () {
	  var oldInType = this.state.inType;
	  this.state.inType = true;
	  var type = this.flowParseUnionType();
	  this.state.inType = oldInType;
	  return type;
	};

	pp.flowParseTypeAnnotation = function () {
	  var node = this.startNode();
	  node.typeAnnotation = this.flowParseTypeInitialiser();
	  return this.finishNode(node, "TypeAnnotation");
	};

	pp.flowParseTypeAnnotatableIdentifier = function (requireTypeAnnotation, canBeOptionalParam) {
	  var ident = this.parseIdentifier();
	  var isOptionalParam = false;

	  if (canBeOptionalParam && this.eat(_tokenizerTypes.types.question)) {
	    this.expect(_tokenizerTypes.types.question);
	    isOptionalParam = true;
	  }

	  if (requireTypeAnnotation || this.match(_tokenizerTypes.types.colon)) {
	    ident.typeAnnotation = this.flowParseTypeAnnotation();
	    this.finishNode(ident, ident.type);
	  }

	  if (isOptionalParam) {
	    ident.optional = true;
	    this.finishNode(ident, ident.type);
	  }

	  return ident;
	};

	exports["default"] = function (instance) {
	  // plain function return types: function name(): string {}
	  instance.extend("parseFunctionBody", function (inner) {
	    return function (node, allowExpression) {
	      if (this.match(_tokenizerTypes.types.colon) && !allowExpression) {
	        // if allowExpression is true then we're parsing an arrow function and if
	        // there's a return type then it's been handled elsewhere
	        node.returnType = this.flowParseTypeAnnotation();
	      }

	      return inner.call(this, node, allowExpression);
	    };
	  });

	  // interfaces
	  instance.extend("parseStatement", function (inner) {
	    return function (declaration, topLevel) {
	      // strict mode handling of `interface` since it's a reserved word
	      if (this.state.strict && this.match(_tokenizerTypes.types.name) && this.state.value === "interface") {
	        var node = this.startNode();
	        this.next();
	        return this.flowParseInterface(node);
	      } else {
	        return inner.call(this, declaration, topLevel);
	      }
	    };
	  });

	  // declares, interfaces and type aliases
	  instance.extend("parseExpressionStatement", function (inner) {
	    return function (node, expr) {
	      if (expr.type === "Identifier") {
	        if (expr.name === "declare") {
	          if (this.match(_tokenizerTypes.types._class) || this.match(_tokenizerTypes.types.name) || this.match(_tokenizerTypes.types._function) || this.match(_tokenizerTypes.types._var)) {
	            return this.flowParseDeclare(node);
	          }
	        } else if (this.match(_tokenizerTypes.types.name)) {
	          if (expr.name === "interface") {
	            return this.flowParseInterface(node);
	          } else if (expr.name === "type") {
	            return this.flowParseTypeAlias(node);
	          }
	        }
	      }

	      return inner.call(this, node, expr);
	    };
	  });

	  // export type
	  instance.extend("shouldParseExportDeclaration", function (inner) {
	    return function () {
	      return this.isContextual("type") || inner.call(this);
	    };
	  });

	  instance.extend("parseParenItem", function () {
	    return function (node, startLoc, startPos, forceArrow /*:: ?*/) {
	      var canBeArrow = this.state.potentialArrowAt = startPos;
	      if (this.match(_tokenizerTypes.types.colon)) {
	        var typeCastNode = this.startNodeAt(startLoc, startPos);
	        typeCastNode.expression = node;
	        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();

	        if (forceArrow && !this.match(_tokenizerTypes.types.arrow)) {
	          this.unexpected();
	        }

	        if (canBeArrow && this.eat(_tokenizerTypes.types.arrow)) {
	          // ((lol): number => {});
	          var params = node.type === "SequenceExpression" ? node.expressions : [node];
	          var func = this.parseArrowExpression(this.startNodeAt(startLoc, startPos), params);
	          func.returnType = typeCastNode.typeAnnotation;
	          return func;
	        } else {
	          return this.finishNode(typeCastNode, "TypeCastExpression");
	        }
	      } else {
	        return node;
	      }
	    };
	  });

	  instance.extend("parseExport", function (inner) {
	    return function (node) {
	      node = inner.call(this, node);
	      if (node.type === "ExportNamedDeclaration") {
	        node.exportKind = node.exportKind || "value";
	      }
	      return node;
	    };
	  });

	  instance.extend("parseExportDeclaration", function (inner) {
	    return function (node) {
	      if (this.isContextual("type")) {
	        node.exportKind = "type";

	        var declarationNode = this.startNode();
	        this.next();

	        if (this.match(_tokenizerTypes.types.braceL)) {
	          // export type { foo, bar };
	          node.specifiers = this.parseExportSpecifiers();
	          this.parseExportFrom(node);
	          return null;
	        } else {
	          // export type Foo = Bar;
	          return this.flowParseTypeAlias(declarationNode);
	        }
	      } else {
	        return inner.call(this, node);
	      }
	    };
	  });

	  instance.extend("parseClassId", function (inner) {
	    return function (node) {
	      inner.apply(this, arguments);
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	    };
	  });

	  // don't consider `void` to be a keyword as then it'll use the void token type
	  // and set startExpr
	  instance.extend("isKeyword", function (inner) {
	    return function (name) {
	      if (this.state.inType && name === "void") {
	        return false;
	      } else {
	        return inner.call(this, name);
	      }
	    };
	  });

	  // ensure that inside flow types, we bypass the jsx parser plugin
	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      if (this.state.inType && (code === 62 || code === 60)) {
	        return this.finishOp(_tokenizerTypes.types.relational, 1);
	      } else {
	        return inner.call(this, code);
	      }
	    };
	  });

	  // don't lex any token as a jsx one inside a flow type
	  instance.extend("jsx_readToken", function (inner) {
	    return function () {
	      if (!this.state.inType) return inner.call(this);
	    };
	  });

	  function typeCastToParameter(node) {
	    node.expression.typeAnnotation = node.typeAnnotation;
	    return node.expression;
	  }

	  instance.extend("toAssignable", function (inner) {
	    return function (node) {
	      if (node.type === "TypeCastExpression") {
	        return typeCastToParameter(node);
	      } else {
	        return inner.apply(this, arguments);
	      }
	    };
	  });

	  // turn type casts that we found in function parameter head into type annotated params
	  instance.extend("toAssignableList", function (inner) {
	    return function (exprList, isBinding) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr.type === "TypeCastExpression") {
	          exprList[i] = typeCastToParameter(expr);
	        }
	      }
	      return inner.call(this, exprList, isBinding);
	    };
	  });

	  // this is a list of nodes, from something like a call expression, we need to filter the
	  // type casts that we've found that are illegal in this context
	  instance.extend("toReferencedList", function () {
	    return function (exprList) {
	      for (var i = 0; i < exprList.length; i++) {
	        var expr = exprList[i];
	        if (expr && expr._exprListItem && expr.type === "TypeCastExpression") {
	          this.raise(expr.start, "Unexpected type cast");
	        }
	      }

	      return exprList;
	    };
	  });

	  // parse an item inside a expression list eg. `(NODE, NODE)` where NODE represents
	  // the position where this function is cal;ed
	  instance.extend("parseExprListItem", function (inner) {
	    return function (allowEmpty, refShorthandDefaultPos) {
	      var container = this.startNode();
	      var node = inner.call(this, allowEmpty, refShorthandDefaultPos);
	      if (this.match(_tokenizerTypes.types.colon)) {
	        container._exprListItem = true;
	        container.expression = node;
	        container.typeAnnotation = this.flowParseTypeAnnotation();
	        return this.finishNode(container, "TypeCastExpression");
	      } else {
	        return node;
	      }
	    };
	  });

	  instance.extend("checkLVal", function (inner) {
	    return function (node) {
	      if (node.type !== "TypeCastExpression") {
	        return inner.apply(this, arguments);
	      }
	    };
	  });

	  // parse class property type annotations
	  instance.extend("parseClassProperty", function (inner) {
	    return function (node) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        node.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      return inner.call(this, node);
	    };
	  });

	  // determine whether or not we're currently in the position where a class property would appear
	  instance.extend("isClassProperty", function (inner) {
	    return function () {
	      return this.match(_tokenizerTypes.types.colon) || inner.call(this);
	    };
	  });

	  // parse type parameters for class methods
	  instance.extend("parseClassMethod", function () {
	    return function (classBody, method, isGenerator, isAsync) {
	      if (this.isRelational("<")) {
	        method.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	      this.parseMethod(method, isGenerator, isAsync);
	      classBody.body.push(this.finishNode(method, "ClassMethod"));
	    };
	  });

	  // parse a the super class type parameters and implements
	  instance.extend("parseClassSuper", function (inner) {
	    return function (node, isStatement) {
	      inner.call(this, node, isStatement);
	      if (node.superClass && this.isRelational("<")) {
	        node.superTypeParameters = this.flowParseTypeParameterInstantiation();
	      }
	      if (this.isContextual("implements")) {
	        this.next();
	        var implemented = node["implements"] = [];
	        do {
	          var _node = this.startNode();
	          _node.id = this.parseIdentifier();
	          if (this.isRelational("<")) {
	            _node.typeParameters = this.flowParseTypeParameterInstantiation();
	          } else {
	            _node.typeParameters = null;
	          }
	          implemented.push(this.finishNode(_node, "ClassImplements"));
	        } while (this.eat(_tokenizerTypes.types.comma));
	      }
	    };
	  });

	  // parse type parameters for object method shorthand
	  instance.extend("parseObjPropValue", function (inner) {
	    return function (prop) {
	      var typeParameters = undefined;

	      // method shorthand
	      if (this.isRelational("<")) {
	        typeParameters = this.flowParseTypeParameterDeclaration();
	        if (!this.match(_tokenizerTypes.types.parenL)) this.unexpected();
	      }

	      inner.apply(this, arguments);

	      // add typeParameters if we found them
	      if (typeParameters) {
	        (prop.value || prop).typeParameters = typeParameters;
	      }
	    };
	  });

	  instance.extend("parseAssignableListItemTypes", function () {
	    return function (param) {
	      if (this.eat(_tokenizerTypes.types.question)) {
	        param.optional = true;
	      }
	      if (this.match(_tokenizerTypes.types.colon)) {
	        param.typeAnnotation = this.flowParseTypeAnnotation();
	      }
	      this.finishNode(param, param.type);
	      return param;
	    };
	  });

	  // parse typeof and type imports
	  instance.extend("parseImportSpecifiers", function (inner) {
	    return function (node) {
	      node.importKind = "value";

	      var kind = null;
	      if (this.match(_tokenizerTypes.types._typeof)) {
	        kind = "typeof";
	      } else if (this.isContextual("type")) {
	        kind = "type";
	      }
	      if (kind) {
	        var lh = this.lookahead();
	        if (lh.type === _tokenizerTypes.types.name && lh.value !== "from" || lh.type === _tokenizerTypes.types.braceL || lh.type === _tokenizerTypes.types.star) {
	          this.next();
	          node.importKind = kind;
	        }
	      }

	      inner.call(this, node);
	    };
	  });

	  // parse function type parameters - function foo<T>() {}
	  instance.extend("parseFunctionParams", function (inner) {
	    return function (node) {
	      if (this.isRelational("<")) {
	        node.typeParameters = this.flowParseTypeParameterDeclaration();
	      }
	      inner.call(this, node);
	    };
	  });

	  // parse flow type annotations on variable declarator heads - let foo: string = bar
	  instance.extend("parseVarHead", function (inner) {
	    return function (decl) {
	      inner.call(this, decl);
	      if (this.match(_tokenizerTypes.types.colon)) {
	        decl.id.typeAnnotation = this.flowParseTypeAnnotation();
	        this.finishNode(decl.id, decl.id.type);
	      }
	    };
	  });

	  // parse the return type of an async arrow function - let foo = (async (): number => {});
	  instance.extend("parseAsyncArrowFromCallExpression", function (inner) {
	    return function (node, call) {
	      if (this.match(_tokenizerTypes.types.colon)) {
	        node.returnType = this.flowParseTypeAnnotation();
	      }

	      return inner.call(this, node, call);
	    };
	  });

	  // todo description
	  instance.extend("shouldParseAsyncArrow", function (inner) {
	    return function () {
	      return this.match(_tokenizerTypes.types.colon) || inner.call(this);
	    };
	  });

	  // handle return types for arrow functions
	  instance.extend("parseParenAndDistinguishExpression", function (inner) {
	    return function (startPos, startLoc, canBeArrow, isAsync) {
	      startPos = startPos || this.state.start;
	      startLoc = startLoc || this.state.startLoc;

	      if (canBeArrow && this.lookahead().type === _tokenizerTypes.types.parenR) {
	        // let foo = (): number => {};
	        this.expect(_tokenizerTypes.types.parenL);
	        this.expect(_tokenizerTypes.types.parenR);

	        var node = this.startNodeAt(startPos, startLoc);
	        if (this.match(_tokenizerTypes.types.colon)) node.returnType = this.flowParseTypeAnnotation();
	        this.expect(_tokenizerTypes.types.arrow);
	        return this.parseArrowExpression(node, [], isAsync);
	      } else {
	        // let foo = (foo): number => {};
	        var node = inner.call(this, startPos, startLoc, canBeArrow, isAsync);

	        if (this.match(_tokenizerTypes.types.colon)) {
	          var state = this.state.clone();
	          try {
	            return this.parseParenItem(node, startPos, startLoc, true);
	          } catch (err) {
	            if (err instanceof SyntaxError) {
	              this.state = state;
	              return node;
	            } else {
	              throw err;
	            }
	          }
	        } else {
	          return node;
	        }
	      }
	    };
	  });
	};

	module.exports = exports["default"];

/***/ },
/* 7922 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	var _xhtml = __webpack_require__(__webpack_module_template_argument_1__);

	var _xhtml2 = _interopRequireDefault(_xhtml);

	var _tokenizerTypes = __webpack_require__(__webpack_module_template_argument_2__);

	var _tokenizerContext = __webpack_require__(__webpack_module_template_argument_3__);

	var _parser = __webpack_require__(__webpack_module_template_argument_4__);

	var _parser2 = _interopRequireDefault(_parser);

	var _utilIdentifier = __webpack_require__(__webpack_module_template_argument_5__);

	var _utilWhitespace = __webpack_require__(__webpack_module_template_argument_6__);

	var HEX_NUMBER = /^[\da-fA-F]+$/;
	var DECIMAL_NUMBER = /^\d+$/;

	_tokenizerContext.types.j_oTag = new _tokenizerContext.TokContext("<tag", false);
	_tokenizerContext.types.j_cTag = new _tokenizerContext.TokContext("</tag", false);
	_tokenizerContext.types.j_expr = new _tokenizerContext.TokContext("<tag>...</tag>", true, true);

	_tokenizerTypes.types.jsxName = new _tokenizerTypes.TokenType("jsxName");
	_tokenizerTypes.types.jsxText = new _tokenizerTypes.TokenType("jsxText", { beforeExpr: true });
	_tokenizerTypes.types.jsxTagStart = new _tokenizerTypes.TokenType("jsxTagStart");
	_tokenizerTypes.types.jsxTagEnd = new _tokenizerTypes.TokenType("jsxTagEnd");

	_tokenizerTypes.types.jsxTagStart.updateContext = function () {
	  this.state.context.push(_tokenizerContext.types.j_expr); // treat as beginning of JSX expression
	  this.state.context.push(_tokenizerContext.types.j_oTag); // start opening tag context
	  this.state.exprAllowed = false;
	};

	_tokenizerTypes.types.jsxTagEnd.updateContext = function (prevType) {
	  var out = this.state.context.pop();
	  if (out === _tokenizerContext.types.j_oTag && prevType === _tokenizerTypes.types.slash || out === _tokenizerContext.types.j_cTag) {
	    this.state.context.pop();
	    this.state.exprAllowed = this.curContext() === _tokenizerContext.types.j_expr;
	  } else {
	    this.state.exprAllowed = true;
	  }
	};

	var pp = _parser2["default"].prototype;

	// Reads inline JSX contents token.

	pp.jsxReadToken = function () {
	  var out = "";
	  var chunkStart = this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated JSX contents");
	    }

	    var ch = this.input.charCodeAt(this.state.pos);

	    switch (ch) {
	      case 60: // "<"
	      case 123:
	        // "{"
	        if (this.state.pos === this.state.start) {
	          if (ch === 60 && this.state.exprAllowed) {
	            ++this.state.pos;
	            return this.finishToken(_tokenizerTypes.types.jsxTagStart);
	          }
	          return this.getTokenFromCode(ch);
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(_tokenizerTypes.types.jsxText, out);

	      case 38:
	        // "&"
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.jsxReadEntity();
	        chunkStart = this.state.pos;
	        break;

	      default:
	        if (_utilWhitespace.isNewLine(ch)) {
	          out += this.input.slice(chunkStart, this.state.pos);
	          out += this.jsxReadNewLine(true);
	          chunkStart = this.state.pos;
	        } else {
	          ++this.state.pos;
	        }
	    }
	  }
	};

	pp.jsxReadNewLine = function (normalizeCRLF) {
	  var ch = this.input.charCodeAt(this.state.pos);
	  var out = undefined;
	  ++this.state.pos;
	  if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {
	    ++this.state.pos;
	    out = normalizeCRLF ? "\n" : "\r\n";
	  } else {
	    out = String.fromCharCode(ch);
	  }
	  ++this.state.curLine;
	  this.state.lineStart = this.state.pos;

	  return out;
	};

	pp.jsxReadString = function (quote) {
	  var out = "";
	  var chunkStart = ++this.state.pos;
	  for (;;) {
	    if (this.state.pos >= this.input.length) {
	      this.raise(this.state.start, "Unterminated string constant");
	    }

	    var ch = this.input.charCodeAt(this.state.pos);
	    if (ch === quote) break;
	    if (ch === 38) {
	      // "&"
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadEntity();
	      chunkStart = this.state.pos;
	    } else if (_utilWhitespace.isNewLine(ch)) {
	      out += this.input.slice(chunkStart, this.state.pos);
	      out += this.jsxReadNewLine(false);
	      chunkStart = this.state.pos;
	    } else {
	      ++this.state.pos;
	    }
	  }
	  out += this.input.slice(chunkStart, this.state.pos++);
	  return this.finishToken(_tokenizerTypes.types.string, out);
	};

	pp.jsxReadEntity = function () {
	  var str = "";
	  var count = 0;
	  var entity = undefined;
	  var ch = this.input[this.state.pos];

	  var startPos = ++this.state.pos;
	  while (this.state.pos < this.input.length && count++ < 10) {
	    ch = this.input[this.state.pos++];
	    if (ch === ";") {
	      if (str[0] === "#") {
	        if (str[1] === "x") {
	          str = str.substr(2);
	          if (HEX_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 16));
	        } else {
	          str = str.substr(1);
	          if (DECIMAL_NUMBER.test(str)) entity = String.fromCharCode(parseInt(str, 10));
	        }
	      } else {
	        entity = _xhtml2["default"][str];
	      }
	      break;
	    }
	    str += ch;
	  }
	  if (!entity) {
	    this.state.pos = startPos;
	    return "&";
	  }
	  return entity;
	};

	// Read a JSX identifier (valid tag or attribute name).
	//
	// Optimized version since JSX identifiers can"t contain
	// escape characters and so can be read as single slice.
	// Also assumes that first character was already checked
	// by isIdentifierStart in readToken.

	pp.jsxReadWord = function () {
	  var ch = undefined;
	  var start = this.state.pos;
	  do {
	    ch = this.input.charCodeAt(++this.state.pos);
	  } while (_utilIdentifier.isIdentifierChar(ch) || ch === 45); // "-"
	  return this.finishToken(_tokenizerTypes.types.jsxName, this.input.slice(start, this.state.pos));
	};

	// Transforms JSX element name to string.

	function getQualifiedJSXName(object) {
	  if (object.type === "JSXIdentifier") {
	    return object.name;
	  }

	  if (object.type === "JSXNamespacedName") {
	    return object.namespace.name + ":" + object.name.name;
	  }

	  if (object.type === "JSXMemberExpression") {
	    return getQualifiedJSXName(object.object) + "." + getQualifiedJSXName(object.property);
	  }
	}

	// Parse next token as JSX identifier

	pp.jsxParseIdentifier = function () {
	  var node = this.startNode();
	  if (this.match(_tokenizerTypes.types.jsxName)) {
	    node.name = this.state.value;
	  } else if (this.state.type.keyword) {
	    node.name = this.state.type.keyword;
	  } else {
	    this.unexpected();
	  }
	  this.next();
	  return this.finishNode(node, "JSXIdentifier");
	};

	// Parse namespaced identifier.

	pp.jsxParseNamespacedName = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var name = this.jsxParseIdentifier();
	  if (!this.eat(_tokenizerTypes.types.colon)) return name;

	  var node = this.startNodeAt(startPos, startLoc);
	  node.namespace = name;
	  node.name = this.jsxParseIdentifier();
	  return this.finishNode(node, "JSXNamespacedName");
	};

	// Parses element name in any form - namespaced, member
	// or single identifier.

	pp.jsxParseElementName = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  var node = this.jsxParseNamespacedName();
	  while (this.eat(_tokenizerTypes.types.dot)) {
	    var newNode = this.startNodeAt(startPos, startLoc);
	    newNode.object = node;
	    newNode.property = this.jsxParseIdentifier();
	    node = this.finishNode(newNode, "JSXMemberExpression");
	  }
	  return node;
	};

	// Parses any type of JSX attribute value.

	pp.jsxParseAttributeValue = function () {
	  var node = undefined;
	  switch (this.state.type) {
	    case _tokenizerTypes.types.braceL:
	      node = this.jsxParseExpressionContainer();
	      if (node.expression.type === "JSXEmptyExpression") {
	        this.raise(node.start, "JSX attributes must only be assigned a non-empty expression");
	      } else {
	        return node;
	      }

	    case _tokenizerTypes.types.jsxTagStart:
	    case _tokenizerTypes.types.string:
	      node = this.parseExprAtom();
	      node.extra = null;
	      return node;

	    default:
	      this.raise(this.state.start, "JSX value should be either an expression or a quoted JSX text");
	  }
	};

	// JSXEmptyExpression is unique type since it doesn't actually parse anything,
	// and so it should start at the end of last read token (left brace) and finish
	// at the beginning of the next one (right brace).

	pp.jsxParseEmptyExpression = function () {
	  var node = this.startNodeAt(this.lastTokEnd, this.lastTokEndLoc);
	  return this.finishNodeAt(node, "JSXEmptyExpression", this.start, this.startLoc);
	};

	// Parses JSX expression enclosed into curly brackets.

	pp.jsxParseExpressionContainer = function () {
	  var node = this.startNode();
	  this.next();
	  if (this.match(_tokenizerTypes.types.braceR)) {
	    node.expression = this.jsxParseEmptyExpression();
	  } else {
	    node.expression = this.parseExpression();
	  }
	  this.expect(_tokenizerTypes.types.braceR);
	  return this.finishNode(node, "JSXExpressionContainer");
	};

	// Parses following JSX attribute name-value pair.

	pp.jsxParseAttribute = function () {
	  var node = this.startNode();
	  if (this.eat(_tokenizerTypes.types.braceL)) {
	    this.expect(_tokenizerTypes.types.ellipsis);
	    node.argument = this.parseMaybeAssign();
	    this.expect(_tokenizerTypes.types.braceR);
	    return this.finishNode(node, "JSXSpreadAttribute");
	  }
	  node.name = this.jsxParseNamespacedName();
	  node.value = this.eat(_tokenizerTypes.types.eq) ? this.jsxParseAttributeValue() : null;
	  return this.finishNode(node, "JSXAttribute");
	};

	// Parses JSX opening tag starting after "<".

	pp.jsxParseOpeningElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.attributes = [];
	  node.name = this.jsxParseElementName();
	  while (!this.match(_tokenizerTypes.types.slash) && !this.match(_tokenizerTypes.types.jsxTagEnd)) {
	    node.attributes.push(this.jsxParseAttribute());
	  }
	  node.selfClosing = this.eat(_tokenizerTypes.types.slash);
	  this.expect(_tokenizerTypes.types.jsxTagEnd);
	  return this.finishNode(node, "JSXOpeningElement");
	};

	// Parses JSX closing tag starting after "</".

	pp.jsxParseClosingElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  node.name = this.jsxParseElementName();
	  this.expect(_tokenizerTypes.types.jsxTagEnd);
	  return this.finishNode(node, "JSXClosingElement");
	};

	// Parses entire JSX element, including it"s opening tag
	// (starting after "<"), attributes, contents and closing tag.

	pp.jsxParseElementAt = function (startPos, startLoc) {
	  var node = this.startNodeAt(startPos, startLoc);
	  var children = [];
	  var openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);
	  var closingElement = null;

	  if (!openingElement.selfClosing) {
	    contents: for (;;) {
	      switch (this.state.type) {
	        case _tokenizerTypes.types.jsxTagStart:
	          startPos = this.state.start;startLoc = this.state.startLoc;
	          this.next();
	          if (this.eat(_tokenizerTypes.types.slash)) {
	            closingElement = this.jsxParseClosingElementAt(startPos, startLoc);
	            break contents;
	          }
	          children.push(this.jsxParseElementAt(startPos, startLoc));
	          break;

	        case _tokenizerTypes.types.jsxText:
	          children.push(this.parseExprAtom());
	          break;

	        case _tokenizerTypes.types.braceL:
	          children.push(this.jsxParseExpressionContainer());
	          break;

	        default:
	          this.unexpected();
	      }
	    }

	    if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {
	      this.raise(closingElement.start, "Expected corresponding JSX closing tag for <" + getQualifiedJSXName(openingElement.name) + ">");
	    }
	  }

	  node.openingElement = openingElement;
	  node.closingElement = closingElement;
	  node.children = children;
	  if (this.match(_tokenizerTypes.types.relational) && this.state.value === "<") {
	    this.raise(this.state.start, "Adjacent JSX elements must be wrapped in an enclosing tag");
	  }
	  return this.finishNode(node, "JSXElement");
	};

	// Parses entire JSX element from current position.

	pp.jsxParseElement = function () {
	  var startPos = this.state.start,
	      startLoc = this.state.startLoc;
	  this.next();
	  return this.jsxParseElementAt(startPos, startLoc);
	};

	exports["default"] = function (instance) {
	  instance.extend("parseExprAtom", function (inner) {
	    return function (refShortHandDefaultPos) {
	      if (this.match(_tokenizerTypes.types.jsxText)) {
	        var node = this.parseLiteral(this.state.value, "JSXText");
	        // https://github.com/babel/babel/issues/2078
	        node.extra = null;
	        return node;
	      } else if (this.match(_tokenizerTypes.types.jsxTagStart)) {
	        return this.jsxParseElement();
	      } else {
	        return inner.call(this, refShortHandDefaultPos);
	      }
	    };
	  });

	  instance.extend("readToken", function (inner) {
	    return function (code) {
	      var context = this.curContext();

	      if (context === _tokenizerContext.types.j_expr) {
	        return this.jsxReadToken();
	      }

	      if (context === _tokenizerContext.types.j_oTag || context === _tokenizerContext.types.j_cTag) {
	        if (_utilIdentifier.isIdentifierStart(code)) {
	          return this.jsxReadWord();
	        }

	        if (code === 62) {
	          ++this.state.pos;
	          return this.finishToken(_tokenizerTypes.types.jsxTagEnd);
	        }

	        if ((code === 34 || code === 39) && context === _tokenizerContext.types.j_oTag) {
	          return this.jsxReadString(code);
	        }
	      }

	      if (code === 60 && this.state.exprAllowed) {
	        ++this.state.pos;
	        return this.finishToken(_tokenizerTypes.types.jsxTagStart);
	      }

	      return inner.call(this, code);
	    };
	  });

	  instance.extend("updateContext", function (inner) {
	    return function (prevType) {
	      if (this.match(_tokenizerTypes.types.braceL)) {
	        var curContext = this.curContext();
	        if (curContext === _tokenizerContext.types.j_oTag) {
	          this.state.context.push(_tokenizerContext.types.b_expr);
	        } else if (curContext === _tokenizerContext.types.j_expr) {
	          this.state.context.push(_tokenizerContext.types.b_tmpl);
	        } else {
	          inner.call(this, prevType);
	        }
	        this.state.exprAllowed = true;
	      } else if (this.match(_tokenizerTypes.types.slash) && prevType === _tokenizerTypes.types.jsxTagStart) {
	        this.state.context.length -= 2; // do not consider JSX expr -> JSX open tag -> ... anymore
	        this.state.context.push(_tokenizerContext.types.j_cTag); // reconsider as closing tag context
	        this.state.exprAllowed = false;
	      } else {
	        return inner.call(this, prevType);
	      }
	    };
	  });
	};

	module.exports = exports["default"];

/***/ },
/* 7923 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	/* @flow */

	// The algorithm used to determine whether a regexp can appear at a
	// given point in the program is loosely based on sweet.js' approach.
	// See https://github.com/mozilla/sweet.js/wiki/design

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	var _types = __webpack_require__(__webpack_module_template_argument_1__);

	var _utilWhitespace = __webpack_require__(__webpack_module_template_argument_2__);

	var TokContext = function TokContext(token /*: string*/, isExpr /*:: ?: boolean*/, preserveSpace /*:: ?: boolean*/, override /*:: ?: Function*/) {
	  _classCallCheck(this, TokContext);

	  this.token = token;
	  this.isExpr = !!isExpr;
	  this.preserveSpace = !!preserveSpace;
	  this.override = override;
	};

	exports.TokContext = TokContext;
	var types = {
	  b_stat: new TokContext("{", false),
	  b_expr: new TokContext("{", true),
	  b_tmpl: new TokContext("${", true),
	  p_stat: new TokContext("(", false),
	  p_expr: new TokContext("(", true),
	  q_tmpl: new TokContext("`", true, true, function (p) {
	    return p.readTmplToken();
	  }),
	  f_expr: new TokContext("function", true)
	};

	exports.types = types;
	// Token-specific context update code

	_types.types.parenR.updateContext = _types.types.braceR.updateContext = function () {
	  if (this.state.context.length === 1) {
	    this.state.exprAllowed = true;
	    return;
	  }

	  var out = this.state.context.pop();
	  if (out === types.b_stat && this.curContext() === types.f_expr) {
	    this.state.context.pop();
	    this.state.exprAllowed = false;
	  } else if (out === types.b_tmpl) {
	    this.state.exprAllowed = true;
	  } else {
	    this.state.exprAllowed = !out.isExpr;
	  }
	};

	_types.types.name.updateContext = function (prevType) {
	  this.state.exprAllowed = false;

	  if (prevType === _types.types._let || prevType === _types.types._const || prevType === _types.types._var) {
	    if (_utilWhitespace.lineBreak.test(this.input.slice(this.state.end))) {
	      this.state.exprAllowed = true;
	    }
	  }
	};

	_types.types.braceL.updateContext = function (prevType) {
	  this.state.context.push(this.braceIsBlock(prevType) ? types.b_stat : types.b_expr);
	  this.state.exprAllowed = true;
	};

	_types.types.dollarBraceL.updateContext = function () {
	  this.state.context.push(types.b_tmpl);
	  this.state.exprAllowed = true;
	};

	_types.types.parenL.updateContext = function (prevType) {
	  var statementParens = prevType === _types.types._if || prevType === _types.types._for || prevType === _types.types._with || prevType === _types.types._while;
	  this.state.context.push(statementParens ? types.p_stat : types.p_expr);
	  this.state.exprAllowed = true;
	};

	_types.types.incDec.updateContext = function () {
	  // tokExprAllowed stays unchanged
	};

	_types.types._function.updateContext = function () {
	  if (this.curContext() !== types.b_stat) {
	    this.state.context.push(types.f_expr);
	  }

	  this.state.exprAllowed = false;
	};

	_types.types.backQuote.updateContext = function () {
	  if (this.curContext() === types.q_tmpl) {
	    this.state.context.pop();
	  } else {
	    this.state.context.push(types.q_tmpl);
	  }
	  this.state.exprAllowed = false;
	};

/***/ },
/* 7924 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;

	var _utilIdentifier = __webpack_require__(__webpack_module_template_argument_2__);

	var _types = __webpack_require__(__webpack_module_template_argument_3__);

	var _context = __webpack_require__(__webpack_module_template_argument_4__);

	var _utilLocation = __webpack_require__(__webpack_module_template_argument_5__);

	var _utilWhitespace = __webpack_require__(__webpack_module_template_argument_6__);

	var _state = __webpack_require__(__webpack_module_template_argument_7__);

	var _state2 = _interopRequireDefault(_state);

	// Object type used to represent tokens. Note that normally, tokens
	// simply exist as properties on the parser object. This is only
	// used for the onToken callback and the external tokenizer.

	/*:: import type { TokenType } from "./types";*/
	var Token = function Token(state) {
	  _classCallCheck(this, Token);

	  this.type = state.type;
	  this.value = state.value;
	  this.start = state.start;
	  this.end = state.end;
	  this.loc = new _utilLocation.SourceLocation(state.startLoc, state.endLoc);
	}

	// ## Tokenizer

	;

	exports.Token = Token;
	function codePointToString(code) {
	  // UTF-16 Decoding
	  if (code <= 0xFFFF) {
	    return String.fromCharCode(code);
	  } else {
	    return String.fromCharCode((code - 0x10000 >> 10) + 0xD800, (code - 0x10000 & 1023) + 0xDC00);
	  }
	}

	var Tokenizer = (function () {
	  function Tokenizer(options, input) {
	    _classCallCheck(this, Tokenizer);

	    this.state = new _state2["default"]();
	    this.state.init(options, input);
	  }

	  // Move to the next token

	  Tokenizer.prototype.next = function next() {
	    if (!this.isLookahead) {
	      this.state.tokens.push(new Token(this.state));
	    }

	    this.state.lastTokEnd = this.state.end;
	    this.state.lastTokStart = this.state.start;
	    this.state.lastTokEndLoc = this.state.endLoc;
	    this.state.lastTokStartLoc = this.state.startLoc;
	    this.nextToken();
	  };

	  // TODO

	  Tokenizer.prototype.eat = function eat(type) {
	    if (this.match(type)) {
	      this.next();
	      return true;
	    } else {
	      return false;
	    }
	  };

	  // TODO

	  Tokenizer.prototype.match = function match(type) {
	    return this.state.type === type;
	  };

	  // TODO

	  Tokenizer.prototype.isKeyword = function isKeyword(word) {
	    return _utilIdentifier.isKeyword(word);
	  };

	  // TODO

	  Tokenizer.prototype.lookahead = function lookahead() {
	    var old = this.state;
	    this.state = old.clone(true);

	    this.isLookahead = true;
	    this.next();
	    this.isLookahead = false;

	    var curr = this.state.clone(true);
	    this.state = old;
	    return curr;
	  };

	  // Toggle strict mode. Re-reads the next number or string to please
	  // pedantic tests (`"use strict"; 010;` should fail).

	  Tokenizer.prototype.setStrict = function setStrict(strict) {
	    this.state.strict = strict;
	    if (!this.match(_types.types.num) && !this.match(_types.types.string)) return;
	    this.state.pos = this.state.start;
	    while (this.state.pos < this.state.lineStart) {
	      this.state.lineStart = this.input.lastIndexOf("\n", this.state.lineStart - 2) + 1;
	      --this.state.curLine;
	    }
	    this.nextToken();
	  };

	  Tokenizer.prototype.curContext = function curContext() {
	    return this.state.context[this.state.context.length - 1];
	  };

	  // Read a single token, updating the parser object's token-related
	  // properties.

	  Tokenizer.prototype.nextToken = function nextToken() {
	    var curContext = this.curContext();
	    if (!curContext || !curContext.preserveSpace) this.skipSpace();

	    this.state.containsOctal = false;
	    this.state.octalPosition = null;
	    this.state.start = this.state.pos;
	    this.state.startLoc = this.state.curPosition();
	    if (this.state.pos >= this.input.length) return this.finishToken(_types.types.eof);

	    if (curContext.override) {
	      return curContext.override(this);
	    } else {
	      return this.readToken(this.fullCharCodeAtPos());
	    }
	  };

	  Tokenizer.prototype.readToken = function readToken(code) {
	    // Identifier or keyword. '\uXXXX' sequences are allowed in
	    // identifiers, so '\' also dispatches to that.
	    if (_utilIdentifier.isIdentifierStart(code) || code === 92 /* '\' */) {
	        return this.readWord();
	      } else {
	      return this.getTokenFromCode(code);
	    }
	  };

	  Tokenizer.prototype.fullCharCodeAtPos = function fullCharCodeAtPos() {
	    var code = this.input.charCodeAt(this.state.pos);
	    if (code <= 0xd7ff || code >= 0xe000) return code;

	    var next = this.input.charCodeAt(this.state.pos + 1);
	    return (code << 10) + next - 0x35fdc00;
	  };

	  Tokenizer.prototype.pushComment = function pushComment(block, text, start, end, startLoc, endLoc) {
	    var comment = {
	      type: block ? "CommentBlock" : "CommentLine",
	      value: text,
	      start: start,
	      end: end,
	      loc: new _utilLocation.SourceLocation(startLoc, endLoc)
	    };

	    if (!this.isLookahead) {
	      this.state.tokens.push(comment);
	      this.state.comments.push(comment);
	    }

	    this.addComment(comment);
	  };

	  Tokenizer.prototype.skipBlockComment = function skipBlockComment() {
	    var startLoc = this.state.curPosition();
	    var start = this.state.pos,
	        end = this.input.indexOf("*/", this.state.pos += 2);
	    if (end === -1) this.raise(this.state.pos - 2, "Unterminated comment");

	    this.state.pos = end + 2;
	    _utilWhitespace.lineBreakG.lastIndex = start;
	    var match = undefined;
	    while ((match = _utilWhitespace.lineBreakG.exec(this.input)) && match.index < this.state.pos) {
	      ++this.state.curLine;
	      this.state.lineStart = match.index + match[0].length;
	    }

	    this.pushComment(true, this.input.slice(start + 2, end), start, this.state.pos, startLoc, this.state.curPosition());
	  };

	  Tokenizer.prototype.skipLineComment = function skipLineComment(startSkip) {
	    var start = this.state.pos;
	    var startLoc = this.state.curPosition();
	    var ch = this.input.charCodeAt(this.state.pos += startSkip);
	    while (this.state.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {
	      ++this.state.pos;
	      ch = this.input.charCodeAt(this.state.pos);
	    }

	    this.pushComment(false, this.input.slice(start + startSkip, this.state.pos), start, this.state.pos, startLoc, this.state.curPosition());
	  };

	  // Called at the start of the parse and after every token. Skips
	  // whitespace and comments, and.

	  Tokenizer.prototype.skipSpace = function skipSpace() {
	    loop: while (this.state.pos < this.input.length) {
	      var ch = this.input.charCodeAt(this.state.pos);
	      switch (ch) {
	        case 32:case 160:
	          // ' '
	          ++this.state.pos;
	          break;

	        case 13:
	          if (this.input.charCodeAt(this.state.pos + 1) === 10) {
	            ++this.state.pos;
	          }

	        case 10:case 8232:case 8233:
	          ++this.state.pos;
	          ++this.state.curLine;
	          this.state.lineStart = this.state.pos;
	          break;

	        case 47:
	          // '/'
	          switch (this.input.charCodeAt(this.state.pos + 1)) {
	            case 42:
	              // '*'
	              this.skipBlockComment();
	              break;

	            case 47:
	              this.skipLineComment(2);
	              break;

	            default:
	              break loop;
	          }
	          break;

	        default:
	          if (ch > 8 && ch < 14 || ch >= 5760 && _utilWhitespace.nonASCIIwhitespace.test(String.fromCharCode(ch))) {
	            ++this.state.pos;
	          } else {
	            break loop;
	          }
	      }
	    }
	  };

	  // Called at the end of every token. Sets `end`, `val`, and
	  // maintains `context` and `exprAllowed`, and skips the space after
	  // the token, so that the next one's `start` will point at the
	  // right position.

	  Tokenizer.prototype.finishToken = function finishToken(type, val) {
	    this.state.end = this.state.pos;
	    this.state.endLoc = this.state.curPosition();
	    var prevType = this.state.type;
	    this.state.type = type;
	    this.state.value = val;

	    this.updateContext(prevType);
	  };

	  // ### Token reading

	  // This is the function that is called to fetch the next token. It
	  // is somewhat obscure, because it works in character codes rather
	  // than characters, and because operator parsing has been inlined
	  // into it.
	  //
	  // All in the name of speed.
	  //

	  Tokenizer.prototype.readToken_dot = function readToken_dot() {
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next >= 48 && next <= 57) {
	      return this.readNumber(true);
	    }

	    var next2 = this.input.charCodeAt(this.state.pos + 2);
	    if (next === 46 && next2 === 46) {
	      // 46 = dot '.'
	      this.state.pos += 3;
	      return this.finishToken(_types.types.ellipsis);
	    } else {
	      ++this.state.pos;
	      return this.finishToken(_types.types.dot);
	    }
	  };

	  Tokenizer.prototype.readToken_slash = function readToken_slash() {
	    // '/'
	    if (this.state.exprAllowed) {
	      ++this.state.pos;
	      return this.readRegexp();
	    }

	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.slash, 1);
	    }
	  };

	  Tokenizer.prototype.readToken_mult_modulo = function readToken_mult_modulo(code) {
	    // '%*'
	    var type = code === 42 ? _types.types.star : _types.types.modulo;
	    var width = 1;
	    var next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === 42 && this.hasPlugin("exponentiationOperator")) {
	      // '*'
	      width++;
	      next = this.input.charCodeAt(this.state.pos + 2);
	      type = _types.types.exponent;
	    }

	    if (next === 61) {
	      width++;
	      type = _types.types.assign;
	    }

	    return this.finishOp(type, width);
	  };

	  Tokenizer.prototype.readToken_pipe_amp = function readToken_pipe_amp(code) {
	    // '|&'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === code) return this.finishOp(code === 124 ? _types.types.logicalOR : _types.types.logicalAND, 2);
	    if (next === 61) return this.finishOp(_types.types.assign, 2);
	    return this.finishOp(code === 124 ? _types.types.bitwiseOR : _types.types.bitwiseAND, 1);
	  };

	  Tokenizer.prototype.readToken_caret = function readToken_caret() {
	    // '^'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.bitwiseXOR, 1);
	    }
	  };

	  Tokenizer.prototype.readToken_plus_min = function readToken_plus_min(code) {
	    // '+-'
	    var next = this.input.charCodeAt(this.state.pos + 1);

	    if (next === code) {
	      if (next === 45 && this.input.charCodeAt(this.state.pos + 2) === 62 && _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.pos))) {
	        // A `-->` line comment
	        this.skipLineComment(3);
	        this.skipSpace();
	        return this.nextToken();
	      }
	      return this.finishOp(_types.types.incDec, 2);
	    }

	    if (next === 61) {
	      return this.finishOp(_types.types.assign, 2);
	    } else {
	      return this.finishOp(_types.types.plusMin, 1);
	    }
	  };

	  Tokenizer.prototype.readToken_lt_gt = function readToken_lt_gt(code) {
	    // '<>'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    var size = 1;

	    if (next === code) {
	      size = code === 62 && this.input.charCodeAt(this.state.pos + 2) === 62 ? 3 : 2;
	      if (this.input.charCodeAt(this.state.pos + size) === 61) return this.finishOp(_types.types.assign, size + 1);
	      return this.finishOp(_types.types.bitShift, size);
	    }

	    if (next === 33 && code === 60 && this.input.charCodeAt(this.state.pos + 2) === 45 && this.input.charCodeAt(this.state.pos + 3) === 45) {
	      if (this.inModule) this.unexpected();
	      // `<!--`, an XML-style comment that should be interpreted as a line comment
	      this.skipLineComment(4);
	      this.skipSpace();
	      return this.nextToken();
	    }

	    if (next === 61) {
	      size = this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2;
	    }

	    return this.finishOp(_types.types.relational, size);
	  };

	  Tokenizer.prototype.readToken_eq_excl = function readToken_eq_excl(code) {
	    // '=!'
	    var next = this.input.charCodeAt(this.state.pos + 1);
	    if (next === 61) return this.finishOp(_types.types.equality, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);
	    if (code === 61 && next === 62) {
	      // '=>'
	      this.state.pos += 2;
	      return this.finishToken(_types.types.arrow);
	    }
	    return this.finishOp(code === 61 ? _types.types.eq : _types.types.prefix, 1);
	  };

	  Tokenizer.prototype.getTokenFromCode = function getTokenFromCode(code) {
	    switch (code) {
	      // The interpretation of a dot depends on whether it is followed
	      // by a digit or another two dots.
	      case 46:
	        // '.'
	        return this.readToken_dot();

	      // Punctuation tokens.
	      case 40:
	        ++this.state.pos;return this.finishToken(_types.types.parenL);
	      case 41:
	        ++this.state.pos;return this.finishToken(_types.types.parenR);
	      case 59:
	        ++this.state.pos;return this.finishToken(_types.types.semi);
	      case 44:
	        ++this.state.pos;return this.finishToken(_types.types.comma);
	      case 91:
	        ++this.state.pos;return this.finishToken(_types.types.bracketL);
	      case 93:
	        ++this.state.pos;return this.finishToken(_types.types.bracketR);
	      case 123:
	        ++this.state.pos;return this.finishToken(_types.types.braceL);
	      case 125:
	        ++this.state.pos;return this.finishToken(_types.types.braceR);

	      case 58:
	        if (this.hasPlugin("functionBind") && this.input.charCodeAt(this.state.pos + 1) === 58) {
	          return this.finishOp(_types.types.doubleColon, 2);
	        } else {
	          ++this.state.pos;
	          return this.finishToken(_types.types.colon);
	        }

	      case 63:
	        ++this.state.pos;return this.finishToken(_types.types.question);
	      case 64:
	        ++this.state.pos;return this.finishToken(_types.types.at);

	      case 96:
	        // '`'
	        ++this.state.pos;
	        return this.finishToken(_types.types.backQuote);

	      case 48:
	        // '0'
	        var next = this.input.charCodeAt(this.state.pos + 1);
	        if (next === 120 || next === 88) return this.readRadixNumber(16); // '0x', '0X' - hex number
	        if (next === 111 || next === 79) return this.readRadixNumber(8); // '0o', '0O' - octal number
	        if (next === 98 || next === 66) return this.readRadixNumber(2); // '0b', '0B' - binary number
	      // Anything else beginning with a digit is an integer, octal
	      // number, or float.
	      case 49:case 50:case 51:case 52:case 53:case 54:case 55:case 56:case 57:
	        // 1-9
	        return this.readNumber(false);

	      // Quotes produce strings.
	      case 34:case 39:
	        // '"', "'"
	        return this.readString(code);

	      // Operators are parsed inline in tiny state machines. '=' (61) is
	      // often referred to. `finishOp` simply skips the amount of
	      // characters it is given as second argument, and returns a token
	      // of the type given by its first argument.

	      case 47:
	        // '/'
	        return this.readToken_slash();

	      case 37:case 42:
	        // '%*'
	        return this.readToken_mult_modulo(code);

	      case 124:case 38:
	        // '|&'
	        return this.readToken_pipe_amp(code);

	      case 94:
	        // '^'
	        return this.readToken_caret();

	      case 43:case 45:
	        // '+-'
	        return this.readToken_plus_min(code);

	      case 60:case 62:
	        // '<>'
	        return this.readToken_lt_gt(code);

	      case 61:case 33:
	        // '=!'
	        return this.readToken_eq_excl(code);

	      case 126:
	        // '~'
	        return this.finishOp(_types.types.prefix, 1);
	    }

	    this.raise(this.state.pos, "Unexpected character '" + codePointToString(code) + "'");
	  };

	  Tokenizer.prototype.finishOp = function finishOp(type, size) {
	    var str = this.input.slice(this.state.pos, this.state.pos + size);
	    this.state.pos += size;
	    return this.finishToken(type, str);
	  };

	  Tokenizer.prototype.readRegexp = function readRegexp() {
	    var escaped = undefined,
	        inClass = undefined,
	        start = this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(start, "Unterminated regular expression");
	      var ch = this.input.charAt(this.state.pos);
	      if (_utilWhitespace.lineBreak.test(ch)) {
	        this.raise(start, "Unterminated regular expression");
	      }
	      if (escaped) {
	        escaped = false;
	      } else {
	        if (ch === "[") {
	          inClass = true;
	        } else if (ch === "]" && inClass) {
	          inClass = false;
	        } else if (ch === "/" && !inClass) {
	          break;
	        }
	        escaped = ch === "\\";
	      }
	      ++this.state.pos;
	    }
	    var content = this.input.slice(start, this.state.pos);
	    ++this.state.pos;
	    // Need to use `readWord1` because '\uXXXX' sequences are allowed
	    // here (don't ask).
	    var mods = this.readWord1();
	    if (mods) {
	      var validFlags = /^[gmsiyu]*$/;
	      if (!validFlags.test(mods)) this.raise(start, "Invalid regular expression flag");
	    }
	    return this.finishToken(_types.types.regexp, {
	      pattern: content,
	      flags: mods
	    });
	  };

	  // Read an integer in the given radix. Return null if zero digits
	  // were read, the integer value otherwise. When `len` is given, this
	  // will return `null` unless the integer has exactly `len` digits.

	  Tokenizer.prototype.readInt = function readInt(radix, len) {
	    var start = this.state.pos,
	        total = 0;
	    for (var i = 0, e = len == null ? Infinity : len; i < e; ++i) {
	      var code = this.input.charCodeAt(this.state.pos),
	          val = undefined;
	      if (code >= 97) {
	        val = code - 97 + 10; // a
	      } else if (code >= 65) {
	          val = code - 65 + 10; // A
	        } else if (code >= 48 && code <= 57) {
	            val = code - 48; // 0-9
	          } else {
	              val = Infinity;
	            }
	      if (val >= radix) break;
	      ++this.state.pos;
	      total = total * radix + val;
	    }
	    if (this.state.pos === start || len != null && this.state.pos - start !== len) return null;

	    return total;
	  };

	  Tokenizer.prototype.readRadixNumber = function readRadixNumber(radix) {
	    this.state.pos += 2; // 0x
	    var val = this.readInt(radix);
	    if (val == null) this.raise(this.state.start + 2, "Expected number in radix " + radix);
	    if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");
	    return this.finishToken(_types.types.num, val);
	  };

	  // Read an integer, octal integer, or floating-point number.

	  Tokenizer.prototype.readNumber = function readNumber(startsWithDot) {
	    var start = this.state.pos,
	        isFloat = false,
	        octal = this.input.charCodeAt(this.state.pos) === 48;
	    if (!startsWithDot && this.readInt(10) === null) this.raise(start, "Invalid number");
	    var next = this.input.charCodeAt(this.state.pos);
	    if (next === 46) {
	      // '.'
	      ++this.state.pos;
	      this.readInt(10);
	      isFloat = true;
	      next = this.input.charCodeAt(this.state.pos);
	    }
	    if (next === 69 || next === 101) {
	      // 'eE'
	      next = this.input.charCodeAt(++this.state.pos);
	      if (next === 43 || next === 45) ++this.state.pos; // '+-'
	      if (this.readInt(10) === null) this.raise(start, "Invalid number");
	      isFloat = true;
	    }
	    if (_utilIdentifier.isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.state.pos, "Identifier directly after number");

	    var str = this.input.slice(start, this.state.pos),
	        val = undefined;
	    if (isFloat) {
	      val = parseFloat(str);
	    } else if (!octal || str.length === 1) {
	      val = parseInt(str, 10);
	    } else if (/[89]/.test(str) || this.state.strict) {
	      this.raise(start, "Invalid number");
	    } else {
	      val = parseInt(str, 8);
	    }
	    return this.finishToken(_types.types.num, val);
	  };

	  // Read a string value, interpreting backslash-escapes.

	  Tokenizer.prototype.readCodePoint = function readCodePoint() {
	    var ch = this.input.charCodeAt(this.state.pos),
	        code = undefined;

	    if (ch === 123) {
	      var codePos = ++this.state.pos;
	      code = this.readHexChar(this.input.indexOf("}", this.state.pos) - this.state.pos);
	      ++this.state.pos;
	      if (code > 0x10FFFF) this.raise(codePos, "Code point out of bounds");
	    } else {
	      code = this.readHexChar(4);
	    }
	    return code;
	  };

	  Tokenizer.prototype.readString = function readString(quote) {
	    var out = "",
	        chunkStart = ++this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated string constant");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === quote) break;
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(false);
	        chunkStart = this.state.pos;
	      } else {
	        if (_utilWhitespace.isNewLine(ch)) this.raise(this.state.start, "Unterminated string constant");
	        ++this.state.pos;
	      }
	    }
	    out += this.input.slice(chunkStart, this.state.pos++);
	    return this.finishToken(_types.types.string, out);
	  };

	  // Reads template string tokens.

	  Tokenizer.prototype.readTmplToken = function readTmplToken() {
	    var out = "",
	        chunkStart = this.state.pos;
	    for (;;) {
	      if (this.state.pos >= this.input.length) this.raise(this.state.start, "Unterminated template");
	      var ch = this.input.charCodeAt(this.state.pos);
	      if (ch === 96 || ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {
	        // '`', '${'
	        if (this.state.pos === this.state.start && this.match(_types.types.template)) {
	          if (ch === 36) {
	            this.state.pos += 2;
	            return this.finishToken(_types.types.dollarBraceL);
	          } else {
	            ++this.state.pos;
	            return this.finishToken(_types.types.backQuote);
	          }
	        }
	        out += this.input.slice(chunkStart, this.state.pos);
	        return this.finishToken(_types.types.template, out);
	      }
	      if (ch === 92) {
	        // '\'
	        out += this.input.slice(chunkStart, this.state.pos);
	        out += this.readEscapedChar(true);
	        chunkStart = this.state.pos;
	      } else if (_utilWhitespace.isNewLine(ch)) {
	        out += this.input.slice(chunkStart, this.state.pos);
	        ++this.state.pos;
	        switch (ch) {
	          case 13:
	            if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos;
	          case 10:
	            out += "\n";
	            break;
	          default:
	            out += String.fromCharCode(ch);
	            break;
	        }
	        ++this.state.curLine;
	        this.state.lineStart = this.state.pos;
	        chunkStart = this.state.pos;
	      } else {
	        ++this.state.pos;
	      }
	    }
	  };

	  // Used to read escaped characters

	  Tokenizer.prototype.readEscapedChar = function readEscapedChar(inTemplate) {
	    var ch = this.input.charCodeAt(++this.state.pos);
	    ++this.state.pos;
	    switch (ch) {
	      case 110:
	        return "\n"; // 'n' -> '\n'
	      case 114:
	        return "\r"; // 'r' -> '\r'
	      case 120:
	        return String.fromCharCode(this.readHexChar(2)); // 'x'
	      case 117:
	        return codePointToString(this.readCodePoint()); // 'u'
	      case 116:
	        return "\t"; // 't' -> '\t'
	      case 98:
	        return "\b"; // 'b' -> '\b'
	      case 118:
	        return "\u000b"; // 'v' -> '\u000b'
	      case 102:
	        return "\f"; // 'f' -> '\f'
	      case 13:
	        if (this.input.charCodeAt(this.state.pos) === 10) ++this.state.pos; // '\r\n'
	      case 10:
	        // ' \n'
	        this.state.lineStart = this.state.pos;
	        ++this.state.curLine;
	        return "";
	      default:
	        if (ch >= 48 && ch <= 55) {
	          var octalStr = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/)[0];
	          var octal = parseInt(octalStr, 8);
	          if (octal > 255) {
	            octalStr = octalStr.slice(0, -1);
	            octal = parseInt(octalStr, 8);
	          }
	          if (octal > 0) {
	            if (!this.state.containsOctal) {
	              this.state.containsOctal = true;
	              this.state.octalPosition = this.state.pos - 2;
	            }
	            if (this.state.strict || inTemplate) {
	              this.raise(this.state.pos - 2, "Octal literal in strict mode");
	            }
	          }
	          this.state.pos += octalStr.length - 1;
	          return String.fromCharCode(octal);
	        }
	        return String.fromCharCode(ch);
	    }
	  };

	  // Used to read character escape sequences ('\x', '\u', '\U').

	  Tokenizer.prototype.readHexChar = function readHexChar(len) {
	    var codePos = this.state.pos;
	    var n = this.readInt(16, len);
	    if (n === null) this.raise(codePos, "Bad character escape sequence");
	    return n;
	  };

	  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`
	  // to whether the word contained a '\u' escape.
	  //
	  // Incrementally adds only escaped chars, adding other chunks as-is
	  // as a micro-optimization.

	  Tokenizer.prototype.readWord1 = function readWord1() {
	    this.state.containsEsc = false;
	    var word = "",
	        first = true,
	        chunkStart = this.state.pos;
	    while (this.state.pos < this.input.length) {
	      var ch = this.fullCharCodeAtPos();
	      if (_utilIdentifier.isIdentifierChar(ch)) {
	        this.state.pos += ch <= 0xffff ? 1 : 2;
	      } else if (ch === 92) {
	        // "\"
	        this.state.containsEsc = true;

	        word += this.input.slice(chunkStart, this.state.pos);
	        var escStart = this.state.pos;

	        if (this.input.charCodeAt(++this.state.pos) !== 117) {
	          // "u"
	          this.raise(this.state.pos, "Expecting Unicode escape sequence \\uXXXX");
	        }

	        ++this.state.pos;
	        var esc = this.readCodePoint();
	        if (!(first ? _utilIdentifier.isIdentifierStart : _utilIdentifier.isIdentifierChar)(esc, true)) {
	          this.raise(escStart, "Invalid Unicode escape");
	        }

	        word += codePointToString(esc);
	        chunkStart = this.state.pos;
	      } else {
	        break;
	      }
	      first = false;
	    }
	    return word + this.input.slice(chunkStart, this.state.pos);
	  };

	  // Read an identifier or keyword token. Will check for reserved
	  // words when necessary.

	  Tokenizer.prototype.readWord = function readWord() {
	    var word = this.readWord1();
	    var type = _types.types.name;
	    if (!this.state.containsEsc && this.isKeyword(word)) {
	      type = _types.keywords[word];
	    }
	    return this.finishToken(type, word);
	  };

	  Tokenizer.prototype.braceIsBlock = function braceIsBlock(prevType) {
	    if (prevType === _types.types.colon) {
	      var _parent = this.curContext();
	      if (_parent === _context.types.b_stat || _parent === _context.types.b_expr) {
	        return !_parent.isExpr;
	      }
	    }

	    if (prevType === _types.types._return) {
	      return _utilWhitespace.lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));
	    }

	    if (prevType === _types.types._else || prevType === _types.types.semi || prevType === _types.types.eof || prevType === _types.types.parenR) {
	      return true;
	    }

	    if (prevType === _types.types.braceL) {
	      return this.curContext() === _context.types.b_stat;
	    }

	    return !this.state.exprAllowed;
	  };

	  Tokenizer.prototype.updateContext = function updateContext(prevType) {
	    var update = undefined,
	        type = this.state.type;
	    if (type.keyword && prevType === _types.types.dot) {
	      this.state.exprAllowed = false;
	    } else if (update = type.updateContext) {
	      update.call(this, prevType);
	    } else {
	      this.state.exprAllowed = type.beforeExpr;
	    }
	  };

	  return Tokenizer;
	})();

	exports["default"] = Tokenizer;

/***/ },
/* 7925 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	var _utilLocation = __webpack_require__(__webpack_module_template_argument_1__);

	var _context = __webpack_require__(__webpack_module_template_argument_2__);

	var _types = __webpack_require__(__webpack_module_template_argument_3__);

	/*:: import type { TokContext } from "./context";*/
	/*:: import type { Token } from "./index";*/
	var State = (function () {
	  function State() {
	    _classCallCheck(this, State);
	  }

	  State.prototype.init = function init(options /*: Object*/, input /*: string*/) {
	    this.strict = options.strictMode === false ? false : options.sourceType === "module";

	    this.input = input;

	    this.potentialArrowAt = -1;

	    this.inMethod = this.inFunction = this.inGenerator = this.inAsync = false;

	    this.labels = [];

	    this.decorators = [];

	    this.tokens = [];

	    this.comments = [];

	    this.trailingComments = [];
	    this.leadingComments = [];
	    this.commentStack = [];

	    this.pos = this.lineStart = 0;
	    this.curLine = 1;

	    this.type = _types.types.eof;
	    this.value = null;
	    this.start = this.end = this.pos;
	    this.startLoc = this.endLoc = this.curPosition();

	    this.lastTokEndLoc = this.lastTokStartLoc = null;
	    this.lastTokStart = this.lastTokEnd = this.pos;

	    this.context = [_context.types.b_stat];
	    this.exprAllowed = true;

	    this.containsEsc = this.containsOctal = false;
	    this.octalPosition = null;

	    return this;
	  };

	  // TODO

	  State.prototype.curPosition = function curPosition() {
	    return new _utilLocation.Position(this.curLine, this.pos - this.lineStart);
	  };

	  State.prototype.clone = function clone(skipArrays /*:: ?*/) {
	    var state = new State();
	    for (var key in this) {
	      var val = this[key];

	      if ((!skipArrays || key === "context") && Array.isArray(val)) {
	        val = val.slice();
	      }

	      state[key] = val;
	    }
	    return state;
	  };

	  return State;
	})();

	exports["default"] = State;
	module.exports = exports["default"];

	// TODO

	// Used to signify the start of a potential arrow function

	// Flags to track whether we are in a function, a generator.

	// Labels in scope.

	// Leading decorators.

	// Token store.

	// Comment store.

	// Comment attachment store

	// The current position of the tokenizer in the input.

	// Properties of the current token:
	// Its type

	// For tokens that include more information than their type, the value

	// Its start and end offset

	// And, if locations are used, the {line, column} object
	// corresponding to those offsets

	// Position information for the previous token

	// The context stack is used to superficially track syntactic
	// context to predict whether a regular expression is allowed in a
	// given position.

	// Used to signal to callers of `readWord1` whether the word
	// contained any escape sequences. This is needed because words with
	// escape sequences must not be interpreted as keywords.

	// TODO

/***/ },
/* 7926 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	// ## Token types

	// The assignment of fine-grained, information-carrying type objects
	// allows the tokenizer to store the information it has about a
	// token in a way that is very cheap for the parser to look up.

	// All token type variables start with an underscore, to make them
	// easy to recognize.

	// The `beforeExpr` property is used to disambiguate between regular
	// expressions and divisions. It is set on all token types that can
	// be followed by an expression (thus, a slash after them would be a
	// regular expression).
	//
	// `isLoop` marks a keyword as starting a loop, which is important
	// to know when parsing a label, in order to allow or disallow
	// continue jumps to that label.

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	var TokenType = function TokenType(label) {
	  var conf = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  _classCallCheck(this, TokenType);

	  this.label = label;
	  this.keyword = conf.keyword;
	  this.beforeExpr = !!conf.beforeExpr;
	  this.startsExpr = !!conf.startsExpr;
	  this.rightAssociative = !!conf.rightAssociative;
	  this.isLoop = !!conf.isLoop;
	  this.isAssign = !!conf.isAssign;
	  this.prefix = !!conf.prefix;
	  this.postfix = !!conf.postfix;
	  this.binop = conf.binop || null;
	  this.updateContext = null;
	};

	exports.TokenType = TokenType;

	function binop(name, prec) {
	  return new TokenType(name, { beforeExpr: true, binop: prec });
	}
	var beforeExpr = { beforeExpr: true },
	    startsExpr = { startsExpr: true };

	var types = {
	  num: new TokenType("num", startsExpr),
	  regexp: new TokenType("regexp", startsExpr),
	  string: new TokenType("string", startsExpr),
	  name: new TokenType("name", startsExpr),
	  eof: new TokenType("eof"),

	  // Punctuation token types.
	  bracketL: new TokenType("[", { beforeExpr: true, startsExpr: true }),
	  bracketR: new TokenType("]"),
	  braceL: new TokenType("{", { beforeExpr: true, startsExpr: true }),
	  braceR: new TokenType("}"),
	  parenL: new TokenType("(", { beforeExpr: true, startsExpr: true }),
	  parenR: new TokenType(")"),
	  comma: new TokenType(",", beforeExpr),
	  semi: new TokenType(";", beforeExpr),
	  colon: new TokenType(":", beforeExpr),
	  doubleColon: new TokenType("::", beforeExpr),
	  dot: new TokenType("."),
	  question: new TokenType("?", beforeExpr),
	  arrow: new TokenType("=>", beforeExpr),
	  template: new TokenType("template"),
	  ellipsis: new TokenType("...", beforeExpr),
	  backQuote: new TokenType("`", startsExpr),
	  dollarBraceL: new TokenType("${", { beforeExpr: true, startsExpr: true }),
	  at: new TokenType("@"),

	  // Operators. These carry several kinds of properties to help the
	  // parser use them properly (the presence of these properties is
	  // what categorizes them as operators).
	  //
	  // `binop`, when present, specifies that this operator is a binary
	  // operator, and will refer to its precedence.
	  //
	  // `prefix` and `postfix` mark the operator as a prefix or postfix
	  // unary operator.
	  //
	  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as
	  // binary operators with a very low precedence, that should result
	  // in AssignmentExpression nodes.

	  eq: new TokenType("=", { beforeExpr: true, isAssign: true }),
	  assign: new TokenType("_=", { beforeExpr: true, isAssign: true }),
	  incDec: new TokenType("++/--", { prefix: true, postfix: true, startsExpr: true }),
	  prefix: new TokenType("prefix", { beforeExpr: true, prefix: true, startsExpr: true }),
	  logicalOR: binop("||", 1),
	  logicalAND: binop("&&", 2),
	  bitwiseOR: binop("|", 3),
	  bitwiseXOR: binop("^", 4),
	  bitwiseAND: binop("&", 5),
	  equality: binop("==/!=", 6),
	  relational: binop("</>", 7),
	  bitShift: binop("<</>>", 8),
	  plusMin: new TokenType("+/-", { beforeExpr: true, binop: 9, prefix: true, startsExpr: true }),
	  modulo: binop("%", 10),
	  star: binop("*", 10),
	  slash: binop("/", 10),
	  exponent: new TokenType("**", { beforeExpr: true, binop: 11, rightAssociative: true })
	};

	exports.types = types;
	// Map keyword names to token types.

	var keywords = {};

	exports.keywords = keywords;
	// Succinct definitions of keyword token types
	function kw(name) {
	  var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

	  options.keyword = name;
	  keywords[name] = types["_" + name] = new TokenType(name, options);
	}

	kw("break");
	kw("case", beforeExpr);
	kw("catch");
	kw("continue");
	kw("debugger");
	kw("default", beforeExpr);
	kw("do", { isLoop: true, beforeExpr: true });
	kw("else", beforeExpr);
	kw("finally");
	kw("for", { isLoop: true });
	kw("function", startsExpr);
	kw("if");
	kw("return", beforeExpr);
	kw("switch");
	kw("throw", beforeExpr);
	kw("try");
	kw("var");
	kw("let");
	kw("const");
	kw("while", { isLoop: true });
	kw("with");
	kw("new", { beforeExpr: true, startsExpr: true });
	kw("this", startsExpr);
	kw("super", startsExpr);
	kw("class");
	kw("extends", beforeExpr);
	kw("export");
	kw("import");
	kw("yield", { beforeExpr: true, startsExpr: true });
	kw("null", startsExpr);
	kw("true", startsExpr);
	kw("false", startsExpr);
	kw("in", { beforeExpr: true, binop: 7 });
	kw("instanceof", { beforeExpr: true, binop: 7 });
	kw("typeof", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("void", { beforeExpr: true, prefix: true, startsExpr: true });
	kw("delete", { beforeExpr: true, prefix: true, startsExpr: true });

/***/ },
/* 7927 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;
	exports.getLineInfo = getLineInfo;

	var _whitespace = __webpack_require__(__webpack_module_template_argument_1__);

	// These are used when `options.locations` is on, for the
	// `startLoc` and `endLoc` properties.

	var Position = function Position(line, col) {
	  _classCallCheck(this, Position);

	  this.line = line;
	  this.column = col;
	};

	exports.Position = Position;

	var SourceLocation = function SourceLocation(start, end) {
	  _classCallCheck(this, SourceLocation);

	  this.start = start;
	  this.end = end;
	}

	// The `getLineInfo` function is mostly useful when the
	// `locations` option is off (for performance reasons) and you
	// want to find the line/column position for a given character
	// offset. `input` should be the code string that the offset refers
	// into.

	;

	exports.SourceLocation = SourceLocation;

	function getLineInfo(input, offset) {
	  for (var line = 1, cur = 0;;) {
	    _whitespace.lineBreakG.lastIndex = cur;
	    var match = _whitespace.lineBreakG.exec(input);
	    if (match && match.index < offset) {
	      ++line;
	      cur = match.index + match[0].length;
	    } else {
	      return new Position(line, offset - cur);
	    }
	  }
	}

/***/ },
/* 7928 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	
	/**
	 * This is the web browser implementation of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = __webpack_require__(__webpack_module_template_argument_0__);
	exports.log = log;
	exports.formatArgs = formatArgs;
	exports.save = save;
	exports.load = load;
	exports.useColors = useColors;
	exports.storage = 'undefined' != typeof chrome
	               && 'undefined' != typeof chrome.storage
	                  ? chrome.storage.local
	                  : localstorage();

	/**
	 * Colors.
	 */

	exports.colors = [
	  'lightseagreen',
	  'forestgreen',
	  'goldenrod',
	  'dodgerblue',
	  'darkorchid',
	  'crimson'
	];

	/**
	 * Currently only WebKit-based Web Inspectors, Firefox >= v31,
	 * and the Firebug extension (any Firefox version) are known
	 * to support "%c" CSS customizations.
	 *
	 * TODO: add a `localStorage` variable to explicitly enable/disable colors
	 */

	function useColors() {
	  // is webkit? http://stackoverflow.com/a/16459606/376773
	  return ('WebkitAppearance' in document.documentElement.style) ||
	    // is firebug? http://stackoverflow.com/a/398120/376773
	    (window.console && (console.firebug || (console.exception && console.table))) ||
	    // is firefox >= v31?
	    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
	    (navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31);
	}

	/**
	 * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.
	 */

	exports.formatters.j = function(v) {
	  return JSON.stringify(v);
	};


	/**
	 * Colorize log arguments if enabled.
	 *
	 * @api public
	 */

	function formatArgs() {
	  var args = arguments;
	  var useColors = this.useColors;

	  args[0] = (useColors ? '%c' : '')
	    + this.namespace
	    + (useColors ? ' %c' : ' ')
	    + args[0]
	    + (useColors ? '%c ' : ' ')
	    + '+' + exports.humanize(this.diff);

	  if (!useColors) return args;

	  var c = 'color: ' + this.color;
	  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));

	  // the final "%c" is somewhat tricky, because there could be other
	  // arguments passed either before or after the %c, so we need to
	  // figure out the correct index to insert the CSS into
	  var index = 0;
	  var lastC = 0;
	  args[0].replace(/%[a-z%]/g, function(match) {
	    if ('%%' === match) return;
	    index++;
	    if ('%c' === match) {
	      // we only are interested in the *last* %c
	      // (the user may have provided their own)
	      lastC = index;
	    }
	  });

	  args.splice(lastC, 0, c);
	  return args;
	}

	/**
	 * Invokes `console.log()` when available.
	 * No-op when `console.log` is not a "function".
	 *
	 * @api public
	 */

	function log() {
	  // this hackery is required for IE8/9, where
	  // the `console.log` function doesn't have 'apply'
	  return 'object' === typeof console
	    && console.log
	    && Function.prototype.apply.call(console.log, console, arguments);
	}

	/**
	 * Save `namespaces`.
	 *
	 * @param {String} namespaces
	 * @api private
	 */

	function save(namespaces) {
	  try {
	    if (null == namespaces) {
	      exports.storage.removeItem('debug');
	    } else {
	      exports.storage.debug = namespaces;
	    }
	  } catch(e) {}
	}

	/**
	 * Load `namespaces`.
	 *
	 * @return {String} returns the previously persisted debug modes
	 * @api private
	 */

	function load() {
	  var r;
	  try {
	    r = exports.storage.debug;
	  } catch(e) {}
	  return r;
	}

	/**
	 * Enable namespaces listed in `localStorage.debug` initially.
	 */

	exports.enable(load());

	/**
	 * Localstorage attempts to return the localstorage.
	 *
	 * This is necessary because safari throws
	 * when a user disables cookies/localstorage
	 * and you attempt to access it.
	 *
	 * @return {LocalStorage}
	 * @api private
	 */

	function localstorage(){
	  try {
	    return window.localStorage;
	  } catch (e) {}
	}


/***/ },
/* 7929 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	
	/**
	 * This is the common logic for both the Node.js and web browser
	 * implementations of `debug()`.
	 *
	 * Expose `debug()` as the module.
	 */

	exports = module.exports = debug;
	exports.coerce = coerce;
	exports.disable = disable;
	exports.enable = enable;
	exports.enabled = enabled;
	exports.humanize = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * The currently active debug mode names, and names to skip.
	 */

	exports.names = [];
	exports.skips = [];

	/**
	 * Map of special "%n" handling functions, for the debug "format" argument.
	 *
	 * Valid key names are a single, lowercased letter, i.e. "n".
	 */

	exports.formatters = {};

	/**
	 * Previously assigned color.
	 */

	var prevColor = 0;

	/**
	 * Previous log timestamp.
	 */

	var prevTime;

	/**
	 * Select a color.
	 *
	 * @return {Number}
	 * @api private
	 */

	function selectColor() {
	  return exports.colors[prevColor++ % exports.colors.length];
	}

	/**
	 * Create a debugger with the given `namespace`.
	 *
	 * @param {String} namespace
	 * @return {Function}
	 * @api public
	 */

	function debug(namespace) {

	  // define the `disabled` version
	  function disabled() {
	  }
	  disabled.enabled = false;

	  // define the `enabled` version
	  function enabled() {

	    var self = enabled;

	    // set `diff` timestamp
	    var curr = +new Date();
	    var ms = curr - (prevTime || curr);
	    self.diff = ms;
	    self.prev = prevTime;
	    self.curr = curr;
	    prevTime = curr;

	    // add the `color` if not set
	    if (null == self.useColors) self.useColors = exports.useColors();
	    if (null == self.color && self.useColors) self.color = selectColor();

	    var args = Array.prototype.slice.call(arguments);

	    args[0] = exports.coerce(args[0]);

	    if ('string' !== typeof args[0]) {
	      // anything else let's inspect with %o
	      args = ['%o'].concat(args);
	    }

	    // apply any `formatters` transformations
	    var index = 0;
	    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {
	      // if we encounter an escaped % then don't increase the array index
	      if (match === '%%') return match;
	      index++;
	      var formatter = exports.formatters[format];
	      if ('function' === typeof formatter) {
	        var val = args[index];
	        match = formatter.call(self, val);

	        // now we need to remove `args[index]` since it's inlined in the `format`
	        args.splice(index, 1);
	        index--;
	      }
	      return match;
	    });

	    if ('function' === typeof exports.formatArgs) {
	      args = exports.formatArgs.apply(self, args);
	    }
	    var logFn = enabled.log || exports.log || console.log.bind(console);
	    logFn.apply(self, args);
	  }
	  enabled.enabled = true;

	  var fn = exports.enabled(namespace) ? enabled : disabled;

	  fn.namespace = namespace;

	  return fn;
	}

	/**
	 * Enables a debug mode by namespaces. This can include modes
	 * separated by a colon and wildcards.
	 *
	 * @param {String} namespaces
	 * @api public
	 */

	function enable(namespaces) {
	  exports.save(namespaces);

	  var split = (namespaces || '').split(/[\s,]+/);
	  var len = split.length;

	  for (var i = 0; i < len; i++) {
	    if (!split[i]) continue; // ignore empty strings
	    namespaces = split[i].replace(/\*/g, '.*?');
	    if (namespaces[0] === '-') {
	      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));
	    } else {
	      exports.names.push(new RegExp('^' + namespaces + '$'));
	    }
	  }
	}

	/**
	 * Disable debug output.
	 *
	 * @api public
	 */

	function disable() {
	  exports.enable('');
	}

	/**
	 * Returns true if the given mode name is enabled, false otherwise.
	 *
	 * @param {String} name
	 * @return {Boolean}
	 * @api public
	 */

	function enabled(name) {
	  var i, len;
	  for (i = 0, len = exports.skips.length; i < len; i++) {
	    if (exports.skips[i].test(name)) {
	      return false;
	    }
	  }
	  for (i = 0, len = exports.names.length; i < len; i++) {
	    if (exports.names[i].test(name)) {
	      return true;
	    }
	  }
	  return false;
	}

	/**
	 * Coerce `val`.
	 *
	 * @param {Mixed} val
	 * @return {Mixed}
	 * @api private
	 */

	function coerce(val) {
	  if (val instanceof Error) return val.stack || val.message;
	  return val;
	}


/***/ },
/* 7930 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	var baseCallback = __webpack_require__(__webpack_module_template_argument_0__),
	    baseUniq = __webpack_require__(__webpack_module_template_argument_1__),
	    isIterateeCall = __webpack_require__(__webpack_module_template_argument_2__),
	    sortedUniq = __webpack_require__(__webpack_module_template_argument_3__);

	/**
	 * Creates a duplicate-free version of an array, using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons, in which only the first occurence of each element
	 * is kept. Providing `true` for `isSorted` performs a faster search algorithm
	 * for sorted arrays. If an iteratee function is provided it's invoked for
	 * each element in the array to generate the criterion by which uniqueness
	 * is computed. The `iteratee` is bound to `thisArg` and invoked with three
	 * arguments: (value, index, array).
	 *
	 * If a property name is provided for `iteratee` the created `_.property`
	 * style callback returns the property value of the given element.
	 *
	 * If a value is also provided for `thisArg` the created `_.matchesProperty`
	 * style callback returns `true` for elements that have a matching property
	 * value, else `false`.
	 *
	 * If an object is provided for `iteratee` the created `_.matches` style
	 * callback returns `true` for elements that have the properties of the given
	 * object, else `false`.
	 *
	 * @static
	 * @memberOf _
	 * @alias unique
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {boolean} [isSorted] Specify the array is sorted.
	 * @param {Function|Object|string} [iteratee] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array} Returns the new duplicate-value-free array.
	 * @example
	 *
	 * _.uniq([2, 1, 2]);
	 * // => [2, 1]
	 *
	 * // using `isSorted`
	 * _.uniq([1, 1, 2], true);
	 * // => [1, 2]
	 *
	 * // using an iteratee function
	 * _.uniq([1, 2.5, 1.5, 2], function(n) {
	 *   return this.floor(n);
	 * }, Math);
	 * // => [1, 2.5]
	 *
	 * // using the `_.property` callback shorthand
	 * _.uniq([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
	 * // => [{ 'x': 1 }, { 'x': 2 }]
	 */
	function uniq(array, isSorted, iteratee, thisArg) {
	  var length = array ? array.length : 0;
	  if (!length) {
	    return [];
	  }
	  if (isSorted != null && typeof isSorted != 'boolean') {
	    thisArg = iteratee;
	    iteratee = isIterateeCall(array, isSorted, thisArg) ? undefined : isSorted;
	    isSorted = false;
	  }
	  iteratee = iteratee == null ? iteratee : baseCallback(iteratee, thisArg, 3);
	  return (isSorted)
	    ? sortedUniq(array, iteratee)
	    : baseUniq(array, iteratee);
	}

	module.exports = uniq;


/***/ },
/* 7931 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	module.exports = __webpack_require__(__webpack_module_template_argument_0__);


/***/ },
/* 7932 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var arrayEach = __webpack_require__(__webpack_module_template_argument_0__),
	    baseEach = __webpack_require__(__webpack_module_template_argument_1__),
	    createForEach = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Iterates over elements of `collection` invoking `iteratee` for each element.
	 * The `iteratee` is bound to `thisArg` and invoked with three arguments:
	 * (value, index|key, collection). Iteratee functions may exit iteration early
	 * by explicitly returning `false`.
	 *
	 * **Note:** As with other "Collections" methods, objects with a "length" property
	 * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`
	 * may be used for object iteration.
	 *
	 * @static
	 * @memberOf _
	 * @alias each
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [thisArg] The `this` binding of `iteratee`.
	 * @returns {Array|Object|string} Returns `collection`.
	 * @example
	 *
	 * _([1, 2]).forEach(function(n) {
	 *   console.log(n);
	 * }).value();
	 * // => logs each value from left to right and returns the array
	 *
	 * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {
	 *   console.log(n, key);
	 * });
	 * // => logs each value-key pair and returns the object (iteration order is not guaranteed)
	 */
	var forEach = createForEach(arrayEach, baseEach);

	module.exports = forEach;


/***/ },
/* 7933 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__) {

	var baseIndexOf = __webpack_require__(__webpack_module_template_argument_0__),
	    getLength = __webpack_require__(__webpack_module_template_argument_1__),
	    isArray = __webpack_require__(__webpack_module_template_argument_2__),
	    isIterateeCall = __webpack_require__(__webpack_module_template_argument_3__),
	    isLength = __webpack_require__(__webpack_module_template_argument_4__),
	    isString = __webpack_require__(__webpack_module_template_argument_5__),
	    values = __webpack_require__(__webpack_module_template_argument_6__);

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Checks if `target` is in `collection` using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons. If `fromIndex` is negative, it's used as the offset
	 * from the end of `collection`.
	 *
	 * @static
	 * @memberOf _
	 * @alias contains, include
	 * @category Collection
	 * @param {Array|Object|string} collection The collection to search.
	 * @param {*} target The value to search for.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @param- {Object} [guard] Enables use as a callback for functions like `_.reduce`.
	 * @returns {boolean} Returns `true` if a matching element is found, else `false`.
	 * @example
	 *
	 * _.includes([1, 2, 3], 1);
	 * // => true
	 *
	 * _.includes([1, 2, 3], 1, 2);
	 * // => false
	 *
	 * _.includes({ 'user': 'fred', 'age': 40 }, 'fred');
	 * // => true
	 *
	 * _.includes('pebbles', 'eb');
	 * // => true
	 */
	function includes(collection, target, fromIndex, guard) {
	  var length = collection ? getLength(collection) : 0;
	  if (!isLength(length)) {
	    collection = values(collection);
	    length = collection.length;
	  }
	  if (typeof fromIndex != 'number' || (guard && isIterateeCall(target, fromIndex, guard))) {
	    fromIndex = 0;
	  } else {
	    fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : (fromIndex || 0);
	  }
	  return (typeof collection == 'string' || !isArray(collection) && isString(collection))
	    ? (fromIndex <= length && collection.indexOf(target, fromIndex) > -1)
	    : (!!length && baseIndexOf(collection, target, fromIndex) > -1);
	}

	module.exports = includes;


/***/ },
/* 7934 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* WEBPACK VAR INJECTION */(function(global) {var cachePush = __webpack_require__(__webpack_module_template_argument_0__),
	    getNative = __webpack_require__(__webpack_module_template_argument_1__);

	/** Native method references. */
	var Set = getNative(global, 'Set');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCreate = getNative(Object, 'create');

	/**
	 *
	 * Creates a cache object to store unique values.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	  var length = values ? values.length : 0;

	  this.data = { 'hash': nativeCreate(null), 'set': new Set };
	  while (length--) {
	    this.push(values[length]);
	  }
	}

	// Add functions to the `Set` cache.
	SetCache.prototype.push = cachePush;

	module.exports = SetCache;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 7935 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var keys = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * A specialized version of `_.assign` for customizing assigned values without
	 * support for argument juggling, multiple sources, and `this` binding `customizer`
	 * functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Object} Returns `object`.
	 */
	function assignWith(object, source, customizer) {
	  var index = -1,
	      props = keys(source),
	      length = props.length;

	  while (++index < length) {
	    var key = props[index],
	        value = object[key],
	        result = customizer(value, source[key], key, object, source);

	    if ((result === result ? (result !== value) : (value === value)) ||
	        (value === undefined && !(key in object))) {
	      object[key] = result;
	    }
	  }
	  return object;
	}

	module.exports = assignWith;


/***/ },
/* 7936 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseCopy = __webpack_require__(__webpack_module_template_argument_0__),
	    keys = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * The base implementation of `_.assign` without support for argument juggling,
	 * multiple sources, and `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return source == null
	    ? object
	    : baseCopy(source, keys(source), object);
	}

	module.exports = baseAssign;


/***/ },
/* 7937 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	var baseMatches = __webpack_require__(__webpack_module_template_argument_0__),
	    baseMatchesProperty = __webpack_require__(__webpack_module_template_argument_1__),
	    bindCallback = __webpack_require__(__webpack_module_template_argument_2__),
	    identity = __webpack_require__(__webpack_module_template_argument_3__),
	    property = __webpack_require__(__webpack_module_template_argument_4__);

	/**
	 * The base implementation of `_.callback` which supports specifying the
	 * number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {*} [func=_.identity] The value to convert to a callback.
	 * @param {*} [thisArg] The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function baseCallback(func, thisArg, argCount) {
	  var type = typeof func;
	  if (type == 'function') {
	    return thisArg === undefined
	      ? func
	      : bindCallback(func, thisArg, argCount);
	  }
	  if (func == null) {
	    return identity;
	  }
	  if (type == 'object') {
	    return baseMatches(func);
	  }
	  return thisArg === undefined
	    ? property(func)
	    : baseMatchesProperty(func, thisArg);
	}

	module.exports = baseCallback;


/***/ },
/* 7938 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__) {

	var arrayCopy = __webpack_require__(__webpack_module_template_argument_0__),
	    arrayEach = __webpack_require__(__webpack_module_template_argument_1__),
	    baseAssign = __webpack_require__(__webpack_module_template_argument_2__),
	    baseForOwn = __webpack_require__(__webpack_module_template_argument_3__),
	    initCloneArray = __webpack_require__(__webpack_module_template_argument_4__),
	    initCloneByTag = __webpack_require__(__webpack_module_template_argument_5__),
	    initCloneObject = __webpack_require__(__webpack_module_template_argument_6__),
	    isArray = __webpack_require__(__webpack_module_template_argument_7__),
	    isObject = __webpack_require__(__webpack_module_template_argument_8__);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] =
	cloneableTags[arrayBufferTag] = cloneableTags[boolTag] =
	cloneableTags[dateTag] = cloneableTags[float32Tag] =
	cloneableTags[float64Tag] = cloneableTags[int8Tag] =
	cloneableTags[int16Tag] = cloneableTags[int32Tag] =
	cloneableTags[numberTag] = cloneableTags[objectTag] =
	cloneableTags[regexpTag] = cloneableTags[stringTag] =
	cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
	cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] =
	cloneableTags[mapTag] = cloneableTags[setTag] =
	cloneableTags[weakMapTag] = false;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * The base implementation of `_.clone` without support for argument juggling
	 * and `this` binding `customizer` functions.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {Function} [customizer] The function to customize cloning values.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The object `value` belongs to.
	 * @param {Array} [stackA=[]] Tracks traversed source objects.
	 * @param {Array} [stackB=[]] Associates clones with source counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, isDeep, customizer, key, object, stackA, stackB) {
	  var result;
	  if (customizer) {
	    result = object ? customizer(value, key, object) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return arrayCopy(value, result);
	    }
	  } else {
	    var tag = objToString.call(value),
	        isFunc = tag == funcTag;

	    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
	      result = initCloneObject(isFunc ? {} : value);
	      if (!isDeep) {
	        return baseAssign(result, value);
	      }
	    } else {
	      return cloneableTags[tag]
	        ? initCloneByTag(value, tag, isDeep)
	        : (object ? value : {});
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stackA || (stackA = []);
	  stackB || (stackB = []);

	  var length = stackA.length;
	  while (length--) {
	    if (stackA[length] == value) {
	      return stackB[length];
	    }
	  }
	  // Add the source value to the stack of traversed objects and associate it with its clone.
	  stackA.push(value);
	  stackB.push(result);

	  // Recursively populate clone (susceptible to call stack limits).
	  (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {
	    result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);
	  });
	  return result;
	}

	module.exports = baseClone;


/***/ },
/* 7939 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseForOwn = __webpack_require__(__webpack_module_template_argument_0__),
	    createBaseEach = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * The base implementation of `_.forEach` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Array|Object|string} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object|string} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	module.exports = baseEach;


/***/ },
/* 7940 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var createBaseFor = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * The base implementation of `baseForIn` and `baseForOwn` which iterates
	 * over `object` properties returned by `keysFunc` invoking `iteratee` for
	 * each property. Iteratee functions may exit iteration early by explicitly
	 * returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;


/***/ },
/* 7941 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseFor = __webpack_require__(__webpack_module_template_argument_0__),
	    keysIn = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * The base implementation of `_.forIn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForIn(object, iteratee) {
	  return baseFor(object, iteratee, keysIn);
	}

	module.exports = baseForIn;


/***/ },
/* 7942 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseFor = __webpack_require__(__webpack_module_template_argument_0__),
	    keys = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * The base implementation of `_.forOwn` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;


/***/ },
/* 7943 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var toObject = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * The base implementation of `get` without support for string paths
	 * and default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array} path The path of the property to get.
	 * @param {string} [pathKey] The key representation of path.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path, pathKey) {
	  if (object == null) {
	    return;
	  }
	  if (pathKey !== undefined && pathKey in toObject(object)) {
	    path = [pathKey];
	  }
	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[path[index++]];
	  }
	  return (index && index == length) ? object : undefined;
	}

	module.exports = baseGet;


/***/ },
/* 7944 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var indexOfNaN = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * The base implementation of `_.indexOf` without support for binary searches.
	 *
	 * @private
	 * @param {Array} array The array to search.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	  if (value !== value) {
	    return indexOfNaN(array, fromIndex);
	  }
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseIndexOf;


/***/ },
/* 7945 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var baseIsEqualDeep = __webpack_require__(__webpack_module_template_argument_0__),
	    isObject = __webpack_require__(__webpack_module_template_argument_1__),
	    isObjectLike = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * The base implementation of `_.isEqual` without support for `this` binding
	 * `customizer` functions.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
	}

	module.exports = baseIsEqual;


/***/ },
/* 7946 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	var equalArrays = __webpack_require__(__webpack_module_template_argument_0__),
	    equalByTag = __webpack_require__(__webpack_module_template_argument_1__),
	    equalObjects = __webpack_require__(__webpack_module_template_argument_2__),
	    isArray = __webpack_require__(__webpack_module_template_argument_3__),
	    isTypedArray = __webpack_require__(__webpack_module_template_argument_4__);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA=[]] Tracks traversed `value` objects.
	 * @param {Array} [stackB=[]] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = arrayTag,
	      othTag = arrayTag;

	  if (!objIsArr) {
	    objTag = objToString.call(object);
	    if (objTag == argsTag) {
	      objTag = objectTag;
	    } else if (objTag != objectTag) {
	      objIsArr = isTypedArray(object);
	    }
	  }
	  if (!othIsArr) {
	    othTag = objToString.call(other);
	    if (othTag == argsTag) {
	      othTag = objectTag;
	    } else if (othTag != objectTag) {
	      othIsArr = isTypedArray(other);
	    }
	  }
	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;

	  if (isSameTag && !(objIsArr || objIsObj)) {
	    return equalByTag(object, other, objTag);
	  }
	  if (!isLoose) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  // For more information on detecting circular references see https://es5.github.io/#JO.
	  stackA || (stackA = []);
	  stackB || (stackB = []);

	  var length = stackA.length;
	  while (length--) {
	    if (stackA[length] == object) {
	      return stackB[length] == other;
	    }
	  }
	  // Add `object` and `other` to the stack of traversed objects.
	  stackA.push(object);
	  stackB.push(other);

	  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

	  stackA.pop();
	  stackB.pop();

	  return result;
	}

	module.exports = baseIsEqualDeep;


/***/ },
/* 7947 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseIsEqual = __webpack_require__(__webpack_module_template_argument_0__),
	    toObject = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * The base implementation of `_.isMatch` without support for callback
	 * shorthands and `this` binding.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Array} matchData The propery names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparing objects.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = toObject(object);
	  while (index--) {
	    var data = matchData[index];
	    if ((noCustomizer && data[2])
	          ? data[1] !== object[data[0]]
	          : !(data[0] in object)
	        ) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var result = customizer ? customizer(objValue, srcValue, key) : undefined;
	      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;


/***/ },
/* 7948 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var baseIsMatch = __webpack_require__(__webpack_module_template_argument_0__),
	    getMatchData = __webpack_require__(__webpack_module_template_argument_1__),
	    toObject = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * The base implementation of `_.matches` which does not clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    var key = matchData[0][0],
	        value = matchData[0][1];

	    return function(object) {
	      if (object == null) {
	        return false;
	      }
	      return object[key] === value && (value !== undefined || (key in toObject(object)));
	    };
	  }
	  return function(object) {
	    return baseIsMatch(object, matchData);
	  };
	}

	module.exports = baseMatches;


/***/ },
/* 7949 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__) {

	var baseGet = __webpack_require__(__webpack_module_template_argument_0__),
	    baseIsEqual = __webpack_require__(__webpack_module_template_argument_1__),
	    baseSlice = __webpack_require__(__webpack_module_template_argument_2__),
	    isArray = __webpack_require__(__webpack_module_template_argument_3__),
	    isKey = __webpack_require__(__webpack_module_template_argument_4__),
	    isStrictComparable = __webpack_require__(__webpack_module_template_argument_5__),
	    last = __webpack_require__(__webpack_module_template_argument_6__),
	    toObject = __webpack_require__(__webpack_module_template_argument_7__),
	    toPath = __webpack_require__(__webpack_module_template_argument_8__);

	/**
	 * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to compare.
	 * @returns {Function} Returns the new function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  var isArr = isArray(path),
	      isCommon = isKey(path) && isStrictComparable(srcValue),
	      pathKey = (path + '');

	  path = toPath(path);
	  return function(object) {
	    if (object == null) {
	      return false;
	    }
	    var key = pathKey;
	    object = toObject(object);
	    if ((isArr || !isCommon) && !(key in object)) {
	      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	      if (object == null) {
	        return false;
	      }
	      key = last(path);
	      object = toObject(object);
	    }
	    return object[key] === srcValue
	      ? (srcValue !== undefined || (key in object))
	      : baseIsEqual(srcValue, object[key], undefined, true);
	  };
	}

	module.exports = baseMatchesProperty;


/***/ },
/* 7950 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseGet = __webpack_require__(__webpack_module_template_argument_0__),
	    toPath = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 */
	function basePropertyDeep(path) {
	  var pathKey = (path + '');
	  path = toPath(path);
	  return function(object) {
	    return baseGet(object, path, pathKey);
	  };
	}

	module.exports = basePropertyDeep;


/***/ },
/* 7951 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var baseIndexOf = __webpack_require__(__webpack_module_template_argument_0__),
	    cacheIndexOf = __webpack_require__(__webpack_module_template_argument_1__),
	    createCache = __webpack_require__(__webpack_module_template_argument_2__);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of `_.uniq` without support for callback shorthands
	 * and `this` binding.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The function invoked per iteration.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function baseUniq(array, iteratee) {
	  var index = -1,
	      indexOf = baseIndexOf,
	      length = array.length,
	      isCommon = true,
	      isLarge = isCommon && length >= LARGE_ARRAY_SIZE,
	      seen = isLarge ? createCache() : null,
	      result = [];

	  if (seen) {
	    indexOf = cacheIndexOf;
	    isCommon = false;
	  } else {
	    isLarge = false;
	    seen = iteratee ? [] : result;
	  }
	  outer:
	  while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value, index, array) : value;

	    if (isCommon && value === value) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	    else if (indexOf(seen, computed, 0) < 0) {
	      if (iteratee || isLarge) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}

	module.exports = baseUniq;


/***/ },
/* 7952 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var identity = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * A specialized version of `baseCallback` which only supports `this` binding
	 * and specifying the number of arguments to provide to `func`.
	 *
	 * @private
	 * @param {Function} func The function to bind.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {number} [argCount] The number of arguments to provide to `func`.
	 * @returns {Function} Returns the callback.
	 */
	function bindCallback(func, thisArg, argCount) {
	  if (typeof func != 'function') {
	    return identity;
	  }
	  if (thisArg === undefined) {
	    return func;
	  }
	  switch (argCount) {
	    case 1: return function(value) {
	      return func.call(thisArg, value);
	    };
	    case 3: return function(value, index, collection) {
	      return func.call(thisArg, value, index, collection);
	    };
	    case 4: return function(accumulator, value, index, collection) {
	      return func.call(thisArg, accumulator, value, index, collection);
	    };
	    case 5: return function(value, other, key, object, source) {
	      return func.call(thisArg, value, other, key, object, source);
	    };
	  }
	  return function() {
	    return func.apply(thisArg, arguments);
	  };
	}

	module.exports = bindCallback;


/***/ },
/* 7953 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObject = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Checks if `value` is in `cache` mimicking the return signature of
	 * `_.indexOf` by returning `0` if the value is found, else `-1`.
	 *
	 * @private
	 * @param {Object} cache The cache to search.
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `0` if `value` is found, else `-1`.
	 */
	function cacheIndexOf(cache, value) {
	  var data = cache.data,
	      result = (typeof value == 'string' || isObject(value)) ? data.set.has(value) : data.hash[value];

	  return result ? 0 : -1;
	}

	module.exports = cacheIndexOf;


/***/ },
/* 7954 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObject = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Adds `value` to the cache.
	 *
	 * @private
	 * @name push
	 * @memberOf SetCache
	 * @param {*} value The value to cache.
	 */
	function cachePush(value) {
	  var data = this.data;
	  if (typeof value == 'string' || isObject(value)) {
	    data.set.add(value);
	  } else {
	    data.hash[value] = true;
	  }
	}

	module.exports = cachePush;


/***/ },
/* 7955 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var bindCallback = __webpack_require__(__webpack_module_template_argument_0__),
	    isIterateeCall = __webpack_require__(__webpack_module_template_argument_1__),
	    restParam = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @returns {Function} Returns the new assigner function.
	 */
	function createAssigner(assigner) {
	  return restParam(function(object, sources) {
	    var index = -1,
	        length = object == null ? 0 : sources.length,
	        customizer = length > 2 ? sources[length - 2] : undefined,
	        guard = length > 2 ? sources[2] : undefined,
	        thisArg = length > 1 ? sources[length - 1] : undefined;

	    if (typeof customizer == 'function') {
	      customizer = bindCallback(customizer, thisArg, 5);
	      length -= 2;
	    } else {
	      customizer = typeof thisArg == 'function' ? thisArg : undefined;
	      length -= (customizer ? 1 : 0);
	    }
	    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	      customizer = length < 3 ? undefined : customizer;
	      length = 1;
	    }
	    while (++index < length) {
	      var source = sources[index];
	      if (source) {
	        assigner(object, source, customizer);
	      }
	    }
	    return object;
	  });
	}

	module.exports = createAssigner;


/***/ },
/* 7956 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var getLength = __webpack_require__(__webpack_module_template_argument_0__),
	    isLength = __webpack_require__(__webpack_module_template_argument_1__),
	    toObject = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function(collection, iteratee) {
	    var length = collection ? getLength(collection) : 0;
	    if (!isLength(length)) {
	      return eachFunc(collection, iteratee);
	    }
	    var index = fromRight ? length : -1,
	        iterable = toObject(collection);

	    while ((fromRight ? index-- : ++index < length)) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	module.exports = createBaseEach;


/***/ },
/* 7957 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var toObject = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Creates a base function for `_.forIn` or `_.forInRight`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function(object, iteratee, keysFunc) {
	    var iterable = toObject(object),
	        props = keysFunc(object),
	        length = props.length,
	        index = fromRight ? length : -1;

	    while ((fromRight ? index-- : ++index < length)) {
	      var key = props[index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;


/***/ },
/* 7958 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	/* WEBPACK VAR INJECTION */(function(global) {var SetCache = __webpack_require__(__webpack_module_template_argument_0__),
	    getNative = __webpack_require__(__webpack_module_template_argument_1__);

	/** Native method references. */
	var Set = getNative(global, 'Set');

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeCreate = getNative(Object, 'create');

	/**
	 * Creates a `Set` cache object to optimize linear searches of large arrays.
	 *
	 * @private
	 * @param {Array} [values] The values to cache.
	 * @returns {null|Object} Returns the new cache object if `Set` is supported, else `null`.
	 */
	function createCache(values) {
	  return (nativeCreate && Set) ? new SetCache(values) : null;
	}

	module.exports = createCache;

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))

/***/ },
/* 7959 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var restParam = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Creates a `_.defaults` or `_.defaultsDeep` function.
	 *
	 * @private
	 * @param {Function} assigner The function to assign values.
	 * @param {Function} customizer The function to customize assigned values.
	 * @returns {Function} Returns the new defaults function.
	 */
	function createDefaults(assigner, customizer) {
	  return restParam(function(args) {
	    var object = args[0];
	    if (object == null) {
	      return object;
	    }
	    args.push(customizer);
	    return assigner.apply(undefined, args);
	  });
	}

	module.exports = createDefaults;


/***/ },
/* 7960 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var bindCallback = __webpack_require__(__webpack_module_template_argument_0__),
	    isArray = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * Creates a function for `_.forEach` or `_.forEachRight`.
	 *
	 * @private
	 * @param {Function} arrayFunc The function to iterate over an array.
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @returns {Function} Returns the new each function.
	 */
	function createForEach(arrayFunc, eachFunc) {
	  return function(collection, iteratee, thisArg) {
	    return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))
	      ? arrayFunc(collection, iteratee)
	      : eachFunc(collection, bindCallback(iteratee, thisArg, 3));
	  };
	}

	module.exports = createForEach;


/***/ },
/* 7961 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var arraySome = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing arrays.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var index = -1,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
	    return false;
	  }
	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index],
	        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

	    if (result !== undefined) {
	      if (result) {
	        continue;
	      }
	      return false;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (isLoose) {
	      if (!arraySome(other, function(othValue) {
	            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
	          })) {
	        return false;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = equalArrays;


/***/ },
/* 7962 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var keys = __webpack_require__(__webpack_module_template_argument_0__);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Function} [customizer] The function to customize comparing values.
	 * @param {boolean} [isLoose] Specify performing partial comparisons.
	 * @param {Array} [stackA] Tracks traversed `value` objects.
	 * @param {Array} [stackB] Tracks traversed `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
	  var objProps = keys(object),
	      objLength = objProps.length,
	      othProps = keys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isLoose) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  var skipCtor = isLoose;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key],
	        result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
	      return false;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (!skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor &&
	        ('constructor' in object && 'constructor' in other) &&
	        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
	          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = equalObjects;


/***/ },
/* 7963 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var baseProperty = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Gets the "length" property value of `object`.
	 *
	 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
	 * that affects Safari on at least iOS 8.1-8.3 ARM64.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {*} Returns the "length" value.
	 */
	var getLength = baseProperty('length');

	module.exports = getLength;


/***/ },
/* 7964 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var isStrictComparable = __webpack_require__(__webpack_module_template_argument_0__),
	    pairs = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * Gets the propery names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	  var result = pairs(object),
	      length = result.length;

	  while (length--) {
	    result[length][2] = isStrictComparable(result[length][1]);
	  }
	  return result;
	}

	module.exports = getMatchData;


/***/ },
/* 7965 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isNative = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = object == null ? undefined : object[key];
	  return isNative(value) ? value : undefined;
	}

	module.exports = getNative;


/***/ },
/* 7966 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var bufferClone = __webpack_require__(__webpack_module_template_argument_0__);

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    stringTag = '[object String]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return bufferClone(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case float32Tag: case float64Tag:
	    case int8Tag: case int16Tag: case int32Tag:
	    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
	      var buffer = object.buffer;
	      return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      var result = new Ctor(object.source, reFlags.exec(object));
	      result.lastIndex = object.lastIndex;
	  }
	  return result;
	}

	module.exports = initCloneByTag;


/***/ },
/* 7967 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var getLength = __webpack_require__(__webpack_module_template_argument_0__),
	    isLength = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * Checks if `value` is array-like.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 */
	function isArrayLike(value) {
	  return value != null && isLength(getLength(value));
	}

	module.exports = isArrayLike;


/***/ },
/* 7968 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var isArrayLike = __webpack_require__(__webpack_module_template_argument_0__),
	    isIndex = __webpack_require__(__webpack_module_template_argument_1__),
	    isObject = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Checks if the provided arguments are from an iteratee call.
	 *
	 * @private
	 * @param {*} value The potential iteratee value argument.
	 * @param {*} index The potential iteratee index or key argument.
	 * @param {*} object The potential iteratee object argument.
	 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
	 */
	function isIterateeCall(value, index, object) {
	  if (!isObject(object)) {
	    return false;
	  }
	  var type = typeof index;
	  if (type == 'number'
	      ? (isArrayLike(object) && isIndex(index, object.length))
	      : (type == 'string' && index in object)) {
	    var other = object[index];
	    return value === value ? (value === other) : (other !== other);
	  }
	  return false;
	}

	module.exports = isIterateeCall;


/***/ },
/* 7969 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var isArray = __webpack_require__(__webpack_module_template_argument_0__),
	    toObject = __webpack_require__(__webpack_module_template_argument_1__);

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  var type = typeof value;
	  if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
	    return true;
	  }
	  if (isArray(value)) {
	    return false;
	  }
	  var result = !reIsDeepProp.test(value);
	  return result || (object != null && value in toObject(object));
	}

	module.exports = isKey;


/***/ },
/* 7970 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObject = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;


/***/ },
/* 7971 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	var isArguments = __webpack_require__(__webpack_module_template_argument_0__),
	    isArray = __webpack_require__(__webpack_module_template_argument_1__),
	    isIndex = __webpack_require__(__webpack_module_template_argument_2__),
	    isLength = __webpack_require__(__webpack_module_template_argument_3__),
	    keysIn = __webpack_require__(__webpack_module_template_argument_4__);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A fallback implementation of `Object.keys` which creates an array of the
	 * own enumerable property names of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function shimKeys(object) {
	  var props = keysIn(object),
	      propsLength = props.length,
	      length = propsLength && object.length;

	  var allowIndexes = !!length && isLength(length) &&
	    (isArray(object) || isArguments(object));

	  var index = -1,
	      result = [];

	  while (++index < propsLength) {
	    var key = props[index];
	    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = shimKeys;


/***/ },
/* 7972 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObject = __webpack_require__(__webpack_module_template_argument_0__);

	/**
	 * Converts `value` to an object if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Object} Returns the object.
	 */
	function toObject(value) {
	  return isObject(value) ? value : Object(value);
	}

	module.exports = toObject;


/***/ },
/* 7973 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseToString = __webpack_require__(__webpack_module_template_argument_0__),
	    isArray = __webpack_require__(__webpack_module_template_argument_1__);

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `value` to property path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {Array} Returns the property path array.
	 */
	function toPath(value) {
	  if (isArray(value)) {
	    return value;
	  }
	  var result = [];
	  baseToString(value).replace(rePropName, function(match, number, quote, string) {
	    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
	  });
	  return result;
	}

	module.exports = toPath;


/***/ },
/* 7974 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var baseClone = __webpack_require__(__webpack_module_template_argument_0__),
	    bindCallback = __webpack_require__(__webpack_module_template_argument_1__),
	    isIterateeCall = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,
	 * otherwise they are assigned by reference. If `customizer` is provided it's
	 * invoked to produce the cloned values. If `customizer` returns `undefined`
	 * cloning is handled by the method instead. The `customizer` is bound to
	 * `thisArg` and invoked with up to three argument; (value [, index|key, object]).
	 *
	 * **Note:** This method is loosely based on the
	 * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	 * The enumerable properties of `arguments` objects and objects created by
	 * constructors other than `Object` are cloned to plain `Object` objects. An
	 * empty object is returned for uncloneable values such as functions, DOM nodes,
	 * Maps, Sets, and WeakMaps.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @param {Function} [customizer] The function to customize cloning values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {*} Returns the cloned value.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * var shallow = _.clone(users);
	 * shallow[0] === users[0];
	 * // => true
	 *
	 * var deep = _.clone(users, true);
	 * deep[0] === users[0];
	 * // => false
	 *
	 * // using a customizer callback
	 * var el = _.clone(document.body, function(value) {
	 *   if (_.isElement(value)) {
	 *     return value.cloneNode(false);
	 *   }
	 * });
	 *
	 * el === document.body
	 * // => false
	 * el.nodeName
	 * // => BODY
	 * el.childNodes.length;
	 * // => 0
	 */
	function clone(value, isDeep, customizer, thisArg) {
	  if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {
	    isDeep = false;
	  }
	  else if (typeof isDeep == 'function') {
	    thisArg = customizer;
	    customizer = isDeep;
	    isDeep = false;
	  }
	  return typeof customizer == 'function'
	    ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 3))
	    : baseClone(value, isDeep);
	}

	module.exports = clone;


/***/ },
/* 7975 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseClone = __webpack_require__(__webpack_module_template_argument_0__),
	    bindCallback = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * Creates a deep clone of `value`. If `customizer` is provided it's invoked
	 * to produce the cloned values. If `customizer` returns `undefined` cloning
	 * is handled by the method instead. The `customizer` is bound to `thisArg`
	 * and invoked with up to three argument; (value [, index|key, object]).
	 *
	 * **Note:** This method is loosely based on the
	 * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).
	 * The enumerable properties of `arguments` objects and objects created by
	 * constructors other than `Object` are cloned to plain `Object` objects. An
	 * empty object is returned for uncloneable values such as functions, DOM nodes,
	 * Maps, Sets, and WeakMaps.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to deep clone.
	 * @param {Function} [customizer] The function to customize cloning values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {*} Returns the deep cloned value.
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * var deep = _.cloneDeep(users);
	 * deep[0] === users[0];
	 * // => false
	 *
	 * // using a customizer callback
	 * var el = _.cloneDeep(document.body, function(value) {
	 *   if (_.isElement(value)) {
	 *     return value.cloneNode(true);
	 *   }
	 * });
	 *
	 * el === document.body
	 * // => false
	 * el.nodeName
	 * // => BODY
	 * el.childNodes.length;
	 * // => 20
	 */
	function cloneDeep(value, customizer, thisArg) {
	  return typeof customizer == 'function'
	    ? baseClone(value, true, bindCallback(customizer, thisArg, 3))
	    : baseClone(value, true);
	}

	module.exports = cloneDeep;


/***/ },
/* 7976 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var isArrayLike = __webpack_require__(__webpack_module_template_argument_0__),
	    isObjectLike = __webpack_require__(__webpack_module_template_argument_1__);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Native method references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is classified as an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	function isArguments(value) {
	  return isObjectLike(value) && isArrayLike(value) &&
	    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	}

	module.exports = isArguments;


/***/ },
/* 7977 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var getNative = __webpack_require__(__webpack_module_template_argument_0__),
	    isLength = __webpack_require__(__webpack_module_template_argument_1__),
	    isObjectLike = __webpack_require__(__webpack_module_template_argument_2__);

	/** `Object#toString` result references. */
	var arrayTag = '[object Array]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeIsArray = getNative(Array, 'isArray');

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(function() { return arguments; }());
	 * // => false
	 */
	var isArray = nativeIsArray || function(value) {
	  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
	};

	module.exports = isArray;


/***/ },
/* 7978 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObject = __webpack_require__(__webpack_module_template_argument_0__);

	/** `Object#toString` result references. */
	var funcTag = '[object Function]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	  // The use of `Object#toString` avoids issues with the `typeof` operator
	  // in older versions of Chrome and Safari which return 'function' for regexes
	  // and Safari 8 which returns 'object' for typed array constructors.
	  return isObject(value) && objToString.call(value) == funcTag;
	}

	module.exports = isFunction;


/***/ },
/* 7979 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var isFunction = __webpack_require__(__webpack_module_template_argument_0__),
	    isObjectLike = __webpack_require__(__webpack_module_template_argument_1__);

	/** Used to detect host constructors (Safari > 5). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var fnToString = Function.prototype.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' +
	  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
	  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
	);

	/**
	 * Checks if `value` is a native function.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
	 * @example
	 *
	 * _.isNative(Array.prototype.push);
	 * // => true
	 *
	 * _.isNative(_);
	 * // => false
	 */
	function isNative(value) {
	  if (value == null) {
	    return false;
	  }
	  if (isFunction(value)) {
	    return reIsNative.test(fnToString.call(value));
	  }
	  return isObjectLike(value) && reIsHostCtor.test(value);
	}

	module.exports = isNative;


/***/ },
/* 7980 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObjectLike = __webpack_require__(__webpack_module_template_argument_0__);

	/** `Object#toString` result references. */
	var numberTag = '[object Number]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `Number` primitive or object.
	 *
	 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
	 * as numbers, use the `_.isFinite` method.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isNumber(8.4);
	 * // => true
	 *
	 * _.isNumber(NaN);
	 * // => true
	 *
	 * _.isNumber('8.4');
	 * // => false
	 */
	function isNumber(value) {
	  return typeof value == 'number' || (isObjectLike(value) && objToString.call(value) == numberTag);
	}

	module.exports = isNumber;


/***/ },
/* 7981 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var baseForIn = __webpack_require__(__webpack_module_template_argument_0__),
	    isArguments = __webpack_require__(__webpack_module_template_argument_1__),
	    isObjectLike = __webpack_require__(__webpack_module_template_argument_2__);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * **Note:** This method assumes objects created by the `Object` constructor
	 * have no inherited enumerable properties.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  var Ctor;

	  // Exit early for non `Object` objects.
	  if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||
	      (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {
	    return false;
	  }
	  // IE < 9 iterates inherited properties before own properties. If the first
	  // iterated property is an object's own property then there are no inherited
	  // enumerable properties.
	  var result;
	  // In most environments an object's own properties are iterated before
	  // its inherited properties. If the last iterated property is an object's
	  // own property then there are no inherited enumerable properties.
	  baseForIn(value, function(subValue, key) {
	    result = key;
	  });
	  return result === undefined || hasOwnProperty.call(value, result);
	}

	module.exports = isPlainObject;


/***/ },
/* 7982 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObject = __webpack_require__(__webpack_module_template_argument_0__);

	/** `Object#toString` result references. */
	var regexpTag = '[object RegExp]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `RegExp` object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isRegExp(/abc/);
	 * // => true
	 *
	 * _.isRegExp('/abc/');
	 * // => false
	 */
	function isRegExp(value) {
	  return isObject(value) && objToString.call(value) == regexpTag;
	}

	module.exports = isRegExp;


/***/ },
/* 7983 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var isObjectLike = __webpack_require__(__webpack_module_template_argument_0__);

	/** `Object#toString` result references. */
	var stringTag = '[object String]';

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a `String` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isString('abc');
	 * // => true
	 *
	 * _.isString(1);
	 * // => false
	 */
	function isString(value) {
	  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
	}

	module.exports = isString;


/***/ },
/* 7984 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var isLength = __webpack_require__(__webpack_module_template_argument_0__),
	    isObjectLike = __webpack_require__(__webpack_module_template_argument_1__);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
	typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
	typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
	typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
	typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
	typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
	typedArrayTags[dateTag] = typedArrayTags[errorTag] =
	typedArrayTags[funcTag] = typedArrayTags[mapTag] =
	typedArrayTags[numberTag] = typedArrayTags[objectTag] =
	typedArrayTags[regexpTag] = typedArrayTags[setTag] =
	typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var objToString = objectProto.toString;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	function isTypedArray(value) {
	  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
	}

	module.exports = isTypedArray;


/***/ },
/* 7985 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var assignWith = __webpack_require__(__webpack_module_template_argument_0__),
	    baseAssign = __webpack_require__(__webpack_module_template_argument_1__),
	    createAssigner = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Assigns own enumerable properties of source object(s) to the destination
	 * object. Subsequent sources overwrite property assignments of previous sources.
	 * If `customizer` is provided it's invoked to produce the assigned values.
	 * The `customizer` is bound to `thisArg` and invoked with five arguments:
	 * (objectValue, sourceValue, key, object, source).
	 *
	 * **Note:** This method mutates `object` and is based on
	 * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
	 *
	 * @static
	 * @memberOf _
	 * @alias extend
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @param {Function} [customizer] The function to customize assigned values.
	 * @param {*} [thisArg] The `this` binding of `customizer`.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
	 * // => { 'user': 'fred', 'age': 40 }
	 *
	 * // using a customizer callback
	 * var defaults = _.partialRight(_.assign, function(value, other) {
	 *   return _.isUndefined(value) ? other : value;
	 * });
	 *
	 * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	 * // => { 'user': 'barney', 'age': 36 }
	 */
	var assign = createAssigner(function(object, source, customizer) {
	  return customizer
	    ? assignWith(object, source, customizer)
	    : baseAssign(object, source);
	});

	module.exports = assign;


/***/ },
/* 7986 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var assign = __webpack_require__(__webpack_module_template_argument_0__),
	    assignDefaults = __webpack_require__(__webpack_module_template_argument_1__),
	    createDefaults = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Assigns own enumerable properties of source object(s) to the destination
	 * object for all destination properties that resolve to `undefined`. Once a
	 * property is set, additional values of the same property are ignored.
	 *
	 * **Note:** This method mutates `object`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The destination object.
	 * @param {...Object} [sources] The source objects.
	 * @returns {Object} Returns `object`.
	 * @example
	 *
	 * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
	 * // => { 'user': 'barney', 'age': 36 }
	 */
	var defaults = createDefaults(assign, assignDefaults);

	module.exports = defaults;


/***/ },
/* 7987 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__, __webpack_module_template_argument_7__, __webpack_module_template_argument_8__) {

	var baseGet = __webpack_require__(__webpack_module_template_argument_0__),
	    baseSlice = __webpack_require__(__webpack_module_template_argument_1__),
	    isArguments = __webpack_require__(__webpack_module_template_argument_2__),
	    isArray = __webpack_require__(__webpack_module_template_argument_3__),
	    isIndex = __webpack_require__(__webpack_module_template_argument_4__),
	    isKey = __webpack_require__(__webpack_module_template_argument_5__),
	    isLength = __webpack_require__(__webpack_module_template_argument_6__),
	    last = __webpack_require__(__webpack_module_template_argument_7__),
	    toPath = __webpack_require__(__webpack_module_template_argument_8__);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if `path` is a direct property.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` is a direct property, else `false`.
	 * @example
	 *
	 * var object = { 'a': { 'b': { 'c': 3 } } };
	 *
	 * _.has(object, 'a');
	 * // => true
	 *
	 * _.has(object, 'a.b.c');
	 * // => true
	 *
	 * _.has(object, ['a', 'b', 'c']);
	 * // => true
	 */
	function has(object, path) {
	  if (object == null) {
	    return false;
	  }
	  var result = hasOwnProperty.call(object, path);
	  if (!result && !isKey(path)) {
	    path = toPath(path);
	    object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
	    if (object == null) {
	      return false;
	    }
	    path = last(path);
	    result = hasOwnProperty.call(object, path);
	  }
	  return result || (isLength(object.length) && isIndex(path, object.length) &&
	    (isArray(object) || isArguments(object)));
	}

	module.exports = has;


/***/ },
/* 7988 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	var getNative = __webpack_require__(__webpack_module_template_argument_0__),
	    isArrayLike = __webpack_require__(__webpack_module_template_argument_1__),
	    isObject = __webpack_require__(__webpack_module_template_argument_2__),
	    shimKeys = __webpack_require__(__webpack_module_template_argument_3__);

	/* Native method references for those with the same name as other `lodash` methods. */
	var nativeKeys = getNative(Object, 'keys');

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	var keys = !nativeKeys ? shimKeys : function(object) {
	  var Ctor = object == null ? undefined : object.constructor;
	  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
	      (typeof object != 'function' && isArrayLike(object))) {
	    return shimKeys(object);
	  }
	  return isObject(object) ? nativeKeys(object) : [];
	};

	module.exports = keys;


/***/ },
/* 7989 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	var isArguments = __webpack_require__(__webpack_module_template_argument_0__),
	    isArray = __webpack_require__(__webpack_module_template_argument_1__),
	    isIndex = __webpack_require__(__webpack_module_template_argument_2__),
	    isLength = __webpack_require__(__webpack_module_template_argument_3__),
	    isObject = __webpack_require__(__webpack_module_template_argument_4__);

	/** Used for native method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  if (object == null) {
	    return [];
	  }
	  if (!isObject(object)) {
	    object = Object(object);
	  }
	  var length = object.length;
	  length = (length && isLength(length) &&
	    (isArray(object) || isArguments(object)) && length) || 0;

	  var Ctor = object.constructor,
	      index = -1,
	      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
	      result = Array(length),
	      skipIndexes = length > 0;

	  while (++index < length) {
	    result[index] = (index + '');
	  }
	  for (var key in object) {
	    if (!(skipIndexes && isIndex(key, length)) &&
	        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = keysIn;


/***/ },
/* 7990 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var keys = __webpack_require__(__webpack_module_template_argument_0__),
	    toObject = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * Creates a two dimensional array of the key-value pairs for `object`,
	 * e.g. `[[key1, value1], [key2, value2]]`.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the new array of key-value pairs.
	 * @example
	 *
	 * _.pairs({ 'barney': 36, 'fred': 40 });
	 * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
	 */
	function pairs(object) {
	  object = toObject(object);

	  var index = -1,
	      props = keys(object),
	      length = props.length,
	      result = Array(length);

	  while (++index < length) {
	    var key = props[index];
	    result[index] = [key, object[key]];
	  }
	  return result;
	}

	module.exports = pairs;


/***/ },
/* 7991 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	var baseValues = __webpack_require__(__webpack_module_template_argument_0__),
	    keys = __webpack_require__(__webpack_module_template_argument_1__);

	/**
	 * Creates an array of the own enumerable property values of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property values.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.values(new Foo);
	 * // => [1, 2] (iteration order is not guaranteed)
	 *
	 * _.values('hi');
	 * // => ['h', 'i']
	 */
	function values(object) {
	  return baseValues(object, keys(object));
	}

	module.exports = values;


/***/ },
/* 7992 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	var baseProperty = __webpack_require__(__webpack_module_template_argument_0__),
	    basePropertyDeep = __webpack_require__(__webpack_module_template_argument_1__),
	    isKey = __webpack_require__(__webpack_module_template_argument_2__);

	/**
	 * Creates a function that returns the property value at `path` on a
	 * given object.
	 *
	 * @static
	 * @memberOf _
	 * @category Utility
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': { 'c': 2 } } },
	 *   { 'a': { 'b': { 'c': 1 } } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b.c'));
	 * // => [2, 1]
	 *
	 * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
	}

	module.exports = property;


/***/ },
/* 7993 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;

	var _babelHelperFunctionName = __webpack_require__(__webpack_module_template_argument_2__);

	var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

	var _babelTemplate = __webpack_require__(__webpack_module_template_argument_3__);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_4__);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: import type { NodePath } from "babel-traverse";*/

	var buildWrapper = _babelTemplate2["default"]("\n  (function () {\n    var ref = FUNCTION;\n    return function (PARAMS) {\n      return ref.apply(this, arguments);\n    };\n  })\n");

	var awaitVisitor = {
	  Function: function Function(path) {
	    path.skip();
	  },

	  AwaitExpression: function AwaitExpression(_ref) {
	    var node = _ref.node;

	    node.type = "YieldExpression";
	  }
	};

	function classOrObjectMethod(path /*: NodePath*/, callId /*: Object*/) {
	  var node = path.node;
	  var body = node.body;

	  node.async = false;

	  var container = t.functionExpression(null, [], t.blockStatement(body.body), true);
	  container.shadow = true;
	  body.body = [t.returnStatement(t.callExpression(t.callExpression(callId, [container]), []))];
	}

	function plainFunction(path /*: NodePath*/, callId /*: Object*/) {
	  var node = path.node;

	  if (path.isArrowFunctionExpression()) {
	    path.arrowFunctionToShadowed();
	  }

	  node.async = false;
	  node.generator = true;

	  var asyncFnId = node.id;
	  node.id = null;

	  var isDeclaration = path.isFunctionDeclaration();

	  if (isDeclaration) {
	    node.type = "FunctionExpression";
	  }

	  var built = t.callExpression(callId, [node]);
	  var container = buildWrapper({
	    FUNCTION: built,
	    PARAMS: node.params.map(function () {
	      return path.scope.generateUidIdentifier("x");
	    })
	  }).expression;

	  var retFunction = container.body.body[1].argument;

	  if (isDeclaration) {
	    var declar = t.variableDeclaration("let", [t.variableDeclarator(t.identifier(asyncFnId.name), t.callExpression(container, []))]);

	    retFunction.id = asyncFnId;
	    path.replaceWith(declar);
	  } else {
	    if (asyncFnId && asyncFnId.name) {
	      retFunction.id = asyncFnId;
	    } else {
	      _babelHelperFunctionName2["default"]({
	        node: retFunction,
	        parent: path.parent,
	        scope: path.scope
	      });
	    }

	    if (retFunction.id || node.params.length) {
	      // we have an inferred function id or params so we need this wrapper
	      path.replaceWith(t.callExpression(container, []));
	    } else {
	      // we can omit this wrapper as the conditions it protects for do not apply
	      path.replaceWith(built);
	    }
	  }
	}

	exports["default"] = function (path /*: NodePath*/, callId /*: Object*/) {
	  var node = path.node;
	  if (node.generator) return;

	  path.traverse(awaitVisitor);

	  if (path.isClassMethod() || path.isObjectMethod()) {
	    return classOrObjectMethod(path, callId);
	  } else {
	    return plainFunction(path, callId);
	  }
	};

	module.exports = exports["default"];

/***/ },
/* 7994 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;

	var _babelHelperGetFunctionArity = __webpack_require__(__webpack_module_template_argument_2__);

	var _babelHelperGetFunctionArity2 = _interopRequireDefault(_babelHelperGetFunctionArity);

	var _babelTemplate = __webpack_require__(__webpack_module_template_argument_3__);

	var _babelTemplate2 = _interopRequireDefault(_babelTemplate);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_4__);

	var t = _interopRequireWildcard(_babelTypes);

	var buildPropertyMethodAssignmentWrapper = _babelTemplate2["default"]("\n  (function (FUNCTION_KEY) {\n    function FUNCTION_ID() {\n      return FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    }\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n");

	var buldGeneratorPropertyMethodAssignmentWrapper = _babelTemplate2["default"]("\n  (function (FUNCTION_KEY) {\n    function* FUNCTION_ID() {\n      return yield* FUNCTION_KEY.apply(this, arguments);\n    }\n\n    FUNCTION_ID.toString = function () {\n      return FUNCTION_KEY.toString();\n    };\n\n    return FUNCTION_ID;\n  })(FUNCTION)\n");

	var visitor = {
	  "ReferencedIdentifier|BindingIdentifier": function ReferencedIdentifierBindingIdentifier(path, state) {
	    // check if this node matches our function id
	    if (path.node.name !== state.name) return;

	    // check that we don't have a local variable declared as that removes the need
	    // for the wrapper
	    var localDeclar = path.scope.getBindingIdentifier(state.name);
	    if (localDeclar !== state.outerDeclar) return;

	    state.selfReference = true;
	    path.stop();
	  }
	};

	function wrap(state, method, id, scope) {
	  if (state.selfReference) {
	    if (scope.hasBinding(id.name) && !scope.hasGlobal(id.name)) {
	      // we can just munge the local binding
	      scope.rename(id.name);
	    } else {
	      // need to add a wrapper since we can't change the references
	      var build = buildPropertyMethodAssignmentWrapper;
	      if (method.generator) build = buldGeneratorPropertyMethodAssignmentWrapper;
	      var _template = build({
	        FUNCTION: method,
	        FUNCTION_ID: id,
	        FUNCTION_KEY: scope.generateUidIdentifier(id.name)
	      }).expression;
	      _template.callee._skipModulesRemap = true;

	      // shim in dummy params to retain function arity, if you try to read the
	      // source then you'll get the original since it's proxied so it's all good
	      var params = _template.callee.body.body[0].params;
	      for (var i = 0, len = _babelHelperGetFunctionArity2["default"](method); i < len; i++) {
	        params.push(scope.generateUidIdentifier("x"));
	      }

	      return _template;
	    }
	  }

	  method.id = id;
	  scope.getProgramParent().references[id.name] = true;
	}

	function visit(node, name, scope) {
	  var state = {
	    selfAssignment: false,
	    selfReference: false,
	    outerDeclar: scope.getBindingIdentifier(name),
	    references: [],
	    name: name
	  };

	  // check to see if we have a local binding of the id we're setting inside of
	  // the function, this is important as there are caveats associated

	  var binding = scope.getOwnBinding(name);

	  if (binding) {
	    if (binding.kind === "param") {
	      // safari will blow up in strict mode with code like:
	      //
	      //   let t = function t(t) {};
	      //
	      // with the error:
	      //
	      //   Cannot declare a parameter named 't' as it shadows the name of a
	      //   strict mode function.
	      //
	      // this isn't to the spec and they've invented this behaviour which is
	      // **extremely** annoying so we avoid setting the name if it has a param
	      // with the same id
	      state.selfReference = true;
	    } else {
	      // otherwise it's defined somewhere in scope like:
	      //
	      //   let t = function () {
	      //     let t = 2;
	      //   };
	      //
	      // so we can safely just set the id and move along as it shadows the
	      // bound function id
	    }
	  } else if (state.outerDeclar || scope.hasGlobal(name)) {
	      scope.traverse(node, visitor, state);
	    }

	  return state;
	}

	exports["default"] = function (_ref) {
	  var node = _ref.node;
	  var parent = _ref.parent;
	  var scope = _ref.scope;
	  var id = _ref.id;

	  // has an `id` so we don't need to infer one
	  if (node.id) return;

	  if ((t.isObjectProperty(parent) || t.isObjectMethod(parent, { kind: "method" })) && (!parent.computed || t.isLiteral(parent.key))) {
	    // { foo() {} };
	    id = parent.key;
	  } else if (t.isVariableDeclarator(parent)) {
	    // let foo = function () {};
	    id = parent.id;

	    if (t.isIdentifier(id)) {
	      var binding = scope.parent.getBinding(id.name);
	      if (binding && binding.constant && scope.getBinding(id.name) === binding) {
	        // always going to reference this method
	        node.id = id;
	        return;
	      }
	    }
	  } else if (!id) {
	    return;
	  }

	  var name = undefined;
	  if (id && t.isLiteral(id)) {
	    name = id.value;
	  } else if (id && t.isIdentifier(id)) {
	    name = id.name;
	  } else {
	    return;
	  }

	  name = t.toBindingIdentifierName(name);
	  id = t.identifier(name);

	  var state = visit(node, name, scope);
	  return wrap(state, node, id, scope) || node;
	};

	module.exports = exports["default"];

/***/ },
/* 7995 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_1__);

	var t = _interopRequireWildcard(_babelTypes);

	exports["default"] = function (node) /*: number*/ {
	  var params /*: Array<Object>*/ = node.params;
	  for (var i = 0; i < params.length; i++) {
	    var param = params[i];
	    if (t.isAssignmentPattern(param) || t.isRestElement(param)) {
	      return i;
	    }
	  }
	  return params.length;
	};

	module.exports = exports["default"];

/***/ },
/* 7996 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;
	exports.push = push;
	exports.hasComputed = hasComputed;
	exports.toComputedObjectFromClass = toComputedObjectFromClass;
	exports.toClassObject = toClassObject;
	exports.toDefineObject = toDefineObject;

	var _babelHelperFunctionName = __webpack_require__(__webpack_module_template_argument_2__);

	var _babelHelperFunctionName2 = _interopRequireDefault(_babelHelperFunctionName);

	var _lodashCollectionEach = __webpack_require__(__webpack_module_template_argument_3__);

	var _lodashCollectionEach2 = _interopRequireDefault(_lodashCollectionEach);

	var _lodashObjectHas = __webpack_require__(__webpack_module_template_argument_4__);

	var _lodashObjectHas2 = _interopRequireDefault(_lodashObjectHas);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_5__);

	var t = _interopRequireWildcard(_babelTypes);

	function toKind(node /*: Object*/) {
	  if (t.isClassMethod(node) || t.isObjectMethod(node)) {
	    if (node.kind === "get" || node.kind === "set") {
	      return node.kind;
	    }
	  }

	  return "value";
	}

	function push(mutatorMap /*: Object*/, node /*: Object*/, kind /*: string*/, file, scope /*:: ?*/) /*: Object*/ {
	  var alias = t.toKeyAlias(node);

	  //

	  var map = {};
	  if (_lodashObjectHas2["default"](mutatorMap, alias)) map = mutatorMap[alias];
	  mutatorMap[alias] = map;

	  //

	  map._inherits = map._inherits || [];
	  map._inherits.push(node);

	  map._key = node.key;

	  if (node.computed) {
	    map._computed = true;
	  }

	  if (node.decorators) {
	    var decorators = map.decorators = map.decorators || t.arrayExpression([]);
	    decorators.elements = decorators.elements.concat(node.decorators.map(function (dec) {
	      return dec.expression;
	    }).reverse());
	  }

	  if (map.value || map.initializer) {
	    throw file.buildCodeFrameError(node, "Key conflict with sibling node");
	  }

	  var key = undefined,
	      value = undefined;

	  // save the key so we can possibly do function name inferences
	  if (t.isObjectProperty(node) || t.isObjectMethod(node) || t.isClassMethod(node)) {
	    key = t.toComputedKey(node, node.key);
	  }

	  if (t.isObjectProperty(node) || t.isClassProperty(node)) {
	    value = node.value;
	  } else if (t.isObjectMethod(node) || t.isClassMethod(node)) {
	    value = t.functionExpression(null, node.params, node.body, node.generator, node.async);
	  }

	  var inheritedKind = toKind(node);
	  if (!kind || inheritedKind !== "value") {
	    kind = inheritedKind;
	  }

	  // infer function name
	  if (scope && t.isStringLiteral(key) && (kind === "value" || kind === "initializer") && t.isFunctionExpression(value)) {
	    value = _babelHelperFunctionName2["default"]({ id: key, node: value, scope: scope });
	  }

	  if (value) {
	    t.inheritsComments(value, node);
	    map[kind] = value;
	  }

	  return map;
	}

	function hasComputed(mutatorMap /*: Object*/) /*: boolean*/ {
	  for (var key in mutatorMap) {
	    if (mutatorMap[key]._computed) {
	      return true;
	    }
	  }
	  return false;
	}

	function toComputedObjectFromClass(obj /*: Object*/) /*: Object*/ {
	  var objExpr = t.arrayExpression([]);

	  for (var i = 0; i < obj.properties.length; i++) {
	    var prop = obj.properties[i];
	    var val = prop.value;
	    val.properties.unshift(t.objectProperty(t.identifier("key"), t.toComputedKey(prop)));
	    objExpr.elements.push(val);
	  }

	  return objExpr;
	}

	function toClassObject(mutatorMap /*: Object*/) /*: Object*/ {
	  var objExpr = t.objectExpression([]);

	  _lodashCollectionEach2["default"](mutatorMap, function (map) {
	    var mapNode = t.objectExpression([]);

	    var propNode = t.objectProperty(map._key, mapNode, map._computed);

	    _lodashCollectionEach2["default"](map, function (node, key) {
	      if (key[0] === "_") return;

	      var inheritNode = node;
	      if (t.isClassMethod(node) || t.isClassProperty(node)) node = node.value;

	      var prop = t.objectProperty(t.identifier(key), node);
	      t.inheritsComments(prop, inheritNode);
	      t.removeComments(inheritNode);

	      mapNode.properties.push(prop);
	    });

	    objExpr.properties.push(propNode);
	  });

	  return objExpr;
	}

	function toDefineObject(mutatorMap /*: Object*/) /*: Object*/ {
	  _lodashCollectionEach2["default"](mutatorMap, function (map) {
	    if (map.value) map.writable = t.booleanLiteral(true);
	    map.configurable = t.booleanLiteral(true);
	    map.enumerable = t.booleanLiteral(true);
	  });

	  return toClassObject(mutatorMap);
	}

/***/ },
/* 7997 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__) {

	"use strict";

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_1__);

	var t = _interopRequireWildcard(_babelTypes);

	exports["default"] = function (callee, thisNode, args) {
	  if (args.length === 1 && t.isSpreadElement(args[0]) && t.isIdentifier(args[0].argument, { name: "arguments" })) {
	    // eg. super(...arguments);
	    return t.callExpression(t.memberExpression(callee, t.identifier("apply")), [thisNode, args[0].argument]);
	  } else {
	    return t.callExpression(t.memberExpression(callee, t.identifier("call")), [thisNode].concat(args));
	  }
	};

	module.exports = exports["default"];

/***/ },
/* 7998 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__, __webpack_module_template_argument_4__, __webpack_module_template_argument_5__, __webpack_module_template_argument_6__) {

	"use strict";

	var _classCallCheck = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _Symbol = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_2__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_3__)["default"];

	exports.__esModule = true;

	var _babelHelperOptimiseCallExpression = __webpack_require__(__webpack_module_template_argument_4__);

	var _babelHelperOptimiseCallExpression2 = _interopRequireDefault(_babelHelperOptimiseCallExpression);

	var _babelMessages = __webpack_require__(__webpack_module_template_argument_5__);

	var messages = _interopRequireWildcard(_babelMessages);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_6__);

	var t = _interopRequireWildcard(_babelTypes);

	// ✌️

	/*:: import type { NodePath, Scope } from "babel-traverse";*/var HARDCORE_THIS_REF = _Symbol();

	function isIllegalBareSuper(node, parent) {
	  if (!t.isSuper(node)) return false;
	  if (t.isMemberExpression(parent, { computed: false })) return false;
	  if (t.isCallExpression(parent, { callee: node })) return false;
	  return true;
	}

	function isMemberExpressionSuper(node) {
	  return t.isMemberExpression(node) && t.isSuper(node.object);
	}

	var visitor = {
	  "ObjectMethod|ClassMethod": function ObjectMethodClassMethod(path) {
	    path.skip();
	  },

	  "FunctionDeclaration|FunctionExpression": function FunctionDeclarationFunctionExpression(path) {
	    if (!path.inShadow("this")) {
	      path.skip();
	    }
	  },

	  ReturnStatement: function ReturnStatement(path, state) {
	    if (!path.inShadow("this")) {
	      state.returns.push(path);
	    }
	  },

	  ThisExpression: function ThisExpression(path, state) {
	    if (!path.node[HARDCORE_THIS_REF]) {
	      state.thises.push(path);
	    }
	  },

	  enter: function enter(path, state) {
	    var callback = state.specHandle;
	    if (state.isLoose) callback = state.looseHandle;

	    var isBareSuper = path.isCallExpression() && path.get("callee").isSuper();

	    var result = callback.call(state, path);

	    if (result) {
	      state.hasSuper = true;
	    }

	    if (isBareSuper) {
	      state.bareSupers.push(path);
	    }

	    if (result === true) {
	      path.requeue();
	    }

	    if (result !== true && result) {
	      if (Array.isArray(result)) {
	        path.replaceWithMultiple(result);
	      } else {
	        path.replaceWith(result);
	      }
	    }
	  }
	};

	var ReplaceSupers = (function () {
	  function ReplaceSupers(opts /*: Object*/) {
	    var inClass /*:: ?: boolean*/ = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];

	    _classCallCheck(this, ReplaceSupers);

	    this.forceSuperMemoisation = opts.forceSuperMemoisation;
	    this.methodPath = opts.methodPath;
	    this.methodNode = opts.methodNode;
	    this.superRef = opts.superRef;
	    this.isStatic = opts.isStatic;
	    this.hasSuper = false;
	    this.inClass = inClass;
	    this.isLoose = opts.isLoose;
	    this.scope = this.methodPath.scope;
	    this.file = opts.file;
	    this.opts = opts;

	    this.bareSupers = [];
	    this.returns = [];
	    this.thises = [];
	  }

	  ReplaceSupers.prototype.getObjectRef = function getObjectRef() {
	    return this.opts.objectRef || this.opts.getObjectRef();
	  };

	  /**
	   * Sets a super class value of the named property.
	   *
	   * @example
	   *
	   *   _set(Object.getPrototypeOf(CLASS.prototype), "METHOD", "VALUE", this)
	   *
	   */

	  ReplaceSupers.prototype.setSuperProperty = function setSuperProperty(property /*: Object*/, value /*: Object*/, isComputed /*: boolean*/) /*: Object*/ {
	    return t.callExpression(this.file.addHelper("set"), [t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.isStatic ? this.getObjectRef() : t.memberExpression(this.getObjectRef(), t.identifier("prototype"))]), isComputed ? property : t.stringLiteral(property.name), value, t.thisExpression()]);
	  };

	  /**
	   * Gets a node representing the super class value of the named property.
	   *
	   * @example
	   *
	   *   _get(Object.getPrototypeOf(CLASS.prototype), "METHOD", this)
	   *
	   */

	  ReplaceSupers.prototype.getSuperProperty = function getSuperProperty(property /*: Object*/, isComputed /*: boolean*/) /*: Object*/ {
	    return t.callExpression(this.file.addHelper("get"), [t.callExpression(t.memberExpression(t.identifier("Object"), t.identifier("getPrototypeOf")), [this.isStatic ? this.getObjectRef() : t.memberExpression(this.getObjectRef(), t.identifier("prototype"))]), isComputed ? property : t.stringLiteral(property.name), t.thisExpression()]);
	  };

	  ReplaceSupers.prototype.replace = function replace() {
	    this.methodPath.traverse(visitor, this);
	  };

	  ReplaceSupers.prototype.getLooseSuperProperty = function getLooseSuperProperty(id /*: Object*/, parent /*: Object*/) {
	    var methodNode = this.methodNode;
	    var superRef = this.superRef || t.identifier("Function");

	    if (parent.property === id) {
	      return;
	    } else if (t.isCallExpression(parent, { callee: id })) {
	      return;
	    } else if (t.isMemberExpression(parent) && !methodNode["static"]) {
	      // super.test -> objectRef.prototype.test
	      return t.memberExpression(superRef, t.identifier("prototype"));
	    } else {
	      return superRef;
	    }
	  };

	  ReplaceSupers.prototype.looseHandle = function looseHandle(path /*: NodePath*/) {
	    var node = path.node;
	    if (path.isSuper()) {
	      return this.getLooseSuperProperty(node, path.parent);
	    } else if (path.isCallExpression()) {
	      var callee = node.callee;
	      if (!t.isMemberExpression(callee)) return;
	      if (!t.isSuper(callee.object)) return;

	      // super.test(); -> objectRef.prototype.MethodName.call(this);
	      t.appendToMemberExpression(callee, t.identifier("call"));
	      node.arguments.unshift(t.thisExpression());
	      return true;
	    }
	  };

	  ReplaceSupers.prototype.specHandleAssignmentExpression = function specHandleAssignmentExpression(ref, path, node) {
	    if (node.operator === "=") {
	      // super.name = "val"; -> _set(Object.getPrototypeOf(objectRef.prototype), "name", this);
	      return this.setSuperProperty(node.left.property, node.right, node.left.computed);
	    } else {
	      // super.age += 2; -> let _ref = super.age; super.age = _ref + 2;
	      ref = ref || path.scope.generateUidIdentifier("ref");
	      return [t.variableDeclaration("var", [t.variableDeclarator(ref, node.left)]), t.expressionStatement(t.assignmentExpression("=", node.left, t.binaryExpression(node.operator[0], ref, node.right)))];
	    }
	  };

	  ReplaceSupers.prototype.specHandle = function specHandle(path /*: NodePath*/) {
	    var property = undefined;
	    var computed = undefined;
	    var args = undefined;
	    var thisReference = undefined;

	    var parent = path.parent;
	    var node = path.node;

	    if (isIllegalBareSuper(node, parent)) {
	      throw path.buildCodeFrameError(messages.get("classesIllegalBareSuper"));
	    }

	    if (t.isCallExpression(node)) {
	      var callee = node.callee;
	      if (t.isSuper(callee)) {
	        return;
	      } else if (isMemberExpressionSuper(callee)) {
	        // super.test(); -> _get(Object.getPrototypeOf(objectRef.prototype), "test", this).call(this);
	        property = callee.property;
	        computed = callee.computed;
	        args = node.arguments;
	      }
	    } else if (t.isMemberExpression(node) && t.isSuper(node.object)) {
	      // super.name; -> _get(Object.getPrototypeOf(objectRef.prototype), "name", this);
	      property = node.property;
	      computed = node.computed;
	    } else if (t.isUpdateExpression(node) && isMemberExpressionSuper(node.argument)) {
	      var binary = t.binaryExpression(node.operator[0], node.argument, t.numericLiteral(1));
	      if (node.prefix) {
	        // ++super.foo; -> super.foo += 1;
	        return this.specHandleAssignmentExpression(null, path, binary);
	      } else {
	        // super.foo++; -> let _ref = super.foo; super.foo = _ref + 1;
	        var ref = path.scope.generateUidIdentifier("ref");
	        return this.specHandleAssignmentExpression(ref, path, binary).concat(t.expressionStatement(ref));
	      }
	    } else if (t.isAssignmentExpression(node) && isMemberExpressionSuper(node.left)) {
	      return this.specHandleAssignmentExpression(null, path, node);
	    }

	    if (!property) return;

	    var superProperty = this.getSuperProperty(property, computed, thisReference);

	    if (args) {
	      return this.optimiseCall(superProperty, args);
	    } else {
	      return superProperty;
	    }
	  };

	  ReplaceSupers.prototype.optimiseCall = function optimiseCall(callee, args) {
	    var thisNode = t.thisExpression();
	    thisNode[HARDCORE_THIS_REF] = true;
	    return _babelHelperOptimiseCallExpression2["default"](callee, thisNode, args);
	  };

	  return ReplaceSupers;
	})();

	exports["default"] = ReplaceSupers;
	module.exports = exports["default"];

/***/ },
/* 7999 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__) {

	"use strict";

	var _getIterator = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_2__);

	var t = _interopRequireWildcard(_babelTypes);

	var visitor = {
	  Scope: function Scope(path, state) {
	    if (state.kind === "let") path.skip();
	  },

	  Function: function Function(path) {
	    path.skip();
	  },

	  VariableDeclaration: function VariableDeclaration(path, state) {
	    if (state.kind && path.node.kind !== state.kind) return;

	    var nodes = [];

	    var declarations /*: Array<Object>*/ = path.get("declarations");
	    var firstId = undefined;

	    for (var _iterator = declarations, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _getIterator(_iterator);;) {
	      var _ref;

	      if (_isArray) {
	        if (_i >= _iterator.length) break;
	        _ref = _iterator[_i++];
	      } else {
	        _i = _iterator.next();
	        if (_i.done) break;
	        _ref = _i.value;
	      }

	      var declar = _ref;

	      firstId = declar.node.id;

	      if (declar.node.init) {
	        nodes.push(t.expressionStatement(t.assignmentExpression("=", declar.node.id, declar.node.init)));
	      }

	      for (var _name in declar.getBindingIdentifiers()) {
	        state.emit(t.identifier(_name), _name);
	      }
	    }

	    // for (var i in test)
	    if (path.parentPath.isFor({ left: path.node })) {
	      path.replaceWith(firstId);
	    } else {
	      path.replaceWithMultiple(nodes);
	    }
	  }
	};

	exports["default"] = function (path, emit /*: Function*/) {
	  var kind /*: "var" | "let"*/ = arguments.length <= 2 || arguments[2] === undefined ? "var" : arguments[2];

	  path.traverse(visitor, { kind: kind, emit: emit });
	};

	module.exports = exports["default"];

/***/ },
/* 8000 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	/* @flow */

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;
	exports.is = is;
	exports.pullFlag = pullFlag;

	var _lodashArrayPull = __webpack_require__(__webpack_module_template_argument_2__);

	var _lodashArrayPull2 = _interopRequireDefault(_lodashArrayPull);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_3__);

	var t = _interopRequireWildcard(_babelTypes);

	function is(node /*: Object*/, flag /*: string*/) /*: boolean*/ {
	  return t.isRegExpLiteral(node) && node.flags.indexOf(flag) >= 0;
	}

	function pullFlag(node /*: Object*/, flag /*: string*/) {
	  var flags = node.flags.split("");
	  if (node.flags.indexOf(flag) < 0) return;
	  _lodashArrayPull2["default"](flags, flag);
	  node.flags = flags.join("");
	}

/***/ },
/* 8001 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__) {

	var baseIndexOf = __webpack_require__(__webpack_module_template_argument_0__);

	/** Used for native method references. */
	var arrayProto = Array.prototype;

	/** Native method references. */
	var splice = arrayProto.splice;

	/**
	 * Removes all provided values from `array` using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * **Note:** Unlike `_.without`, this method mutates `array`.
	 *
	 * @static
	 * @memberOf _
	 * @category Array
	 * @param {Array} array The array to modify.
	 * @param {...*} [values] The values to remove.
	 * @returns {Array} Returns `array`.
	 * @example
	 *
	 * var array = [1, 2, 3, 1, 2, 3];
	 *
	 * _.pull(array, 2, 3);
	 * console.log(array);
	 * // => [1, 1]
	 */
	function pull() {
	  var args = arguments,
	      array = args[0];

	  if (!(array && array.length)) {
	    return array;
	  }
	  var index = 0,
	      indexOf = baseIndexOf,
	      length = args.length;

	  while (++index < length) {
	    var fromIndex = 0,
	        value = args[index];

	    while ((fromIndex = indexOf(array, value, fromIndex)) > -1) {
	      splice.call(array, fromIndex, 1);
	    }
	  }
	  return array;
	}

	module.exports = pull;


/***/ },
/* 8002 */
/***/ function(module, exports, __webpack_require__, __webpack_module_template_argument_0__, __webpack_module_template_argument_1__, __webpack_module_template_argument_2__, __webpack_module_template_argument_3__) {

	"use strict";

	var _interopRequireDefault = __webpack_require__(__webpack_module_template_argument_0__)["default"];

	var _interopRequireWildcard = __webpack_require__(__webpack_module_template_argument_1__)["default"];

	exports.__esModule = true;

	var _esutils = __webpack_require__(__webpack_module_template_argument_2__);

	var _esutils2 = _interopRequireDefault(_esutils);

	var _babelTypes = __webpack_require__(__webpack_module_template_argument_3__);

	var t = _interopRequireWildcard(_babelTypes);

	/*:: type ElementState = {
	  tagExpr: Object; // tag node
	  tagName: string; // raw string tag name
	  args: Array<Object>; // array of call arguments
	  call?: Object; // optional call property that can be set to override the call expression returned
	  pre?: Function; // function called with (state: ElementState) before building attribs
	  post?: Function; // function called with (state: ElementState) after building attribs
	};*/ // function called with (state: ElementState) after building attribs

	exports["default"] = function (opts) {
	  var visitor = {};

	  visitor.JSXNamespacedName = function (path) {
	    throw path.buildCodeFrameError("Namespace tags are not supported. ReactJSX is not XML.");
	  };

	  visitor.JSXElement = {
	    exit: function exit(path, file) {
	      var callExpr = buildElementCall(path.get("openingElement"), file);

	      callExpr.arguments = callExpr.arguments.concat(path.node.children);

	      if (callExpr.arguments.length >= 3) {
	        callExpr._prettyCall = true;
	      }

	      path.replaceWith(t.inherits(callExpr, path.node));
	    }
	  };

	  return visitor;

	  function convertJSXIdentifier(node, parent) {
	    if (t.isJSXIdentifier(node)) {
	      if (node.name === "this" && t.isReferenced(node, parent)) {
	        return t.thisExpression();
	      } else if (_esutils2["default"].keyword.isIdentifierNameES6(node.name)) {
	        node.type = "Identifier";
	      } else {
	        return t.stringLiteral(node.name);
	      }
	    } else if (t.isJSXMemberExpression(node)) {
	      return t.memberExpression(convertJSXIdentifier(node.object, node), convertJSXIdentifier(node.property, node));
	    }

	    return node;
	  }

	  function convertAttributeValue(node) {
	    if (t.isJSXExpressionContainer(node)) {
	      return node.expression;
	    } else {
	      return node;
	    }
	  }

	  function convertAttribute(node) {
	    var value = convertAttributeValue(node.value || t.booleanLiteral(true));

	    if (t.isStringLiteral(value)) {
	      value.value = value.value.replace(/\n\s+/g, " ");
	    }

	    if (t.isValidIdentifier(node.name.name)) {
	      node.name.type = "Identifier";
	    } else {
	      node.name = t.stringLiteral(node.name.name);
	    }

	    return t.inherits(t.objectProperty(node.name, value), node);
	  }

	  function buildElementCall(path, file) {
	    path.parent.children = t.react.buildChildren(path.parent);

	    var tagExpr = convertJSXIdentifier(path.node.name, path.node);
	    var args = [];

	    var tagName = undefined;
	    if (t.isIdentifier(tagExpr)) {
	      tagName = tagExpr.name;
	    } else if (t.isLiteral(tagExpr)) {
	      tagName = tagExpr.value;
	    }

	    var state /*: ElementState*/ = {
	      tagExpr: tagExpr,
	      tagName: tagName,
	      args: args
	    };

	    if (opts.pre) {
	      opts.pre(state, file);
	    }

	    var attribs = path.node.attributes;
	    if (attribs.length) {
	      attribs = buildOpeningElementAttributes(attribs, file);
	    } else {
	      attribs = t.nullLiteral();
	    }

	    args.push(attribs);

	    if (opts.post) {
	      opts.post(state, file);
	    }

	    return state.call || t.callExpression(state.callee, args);
	  }

	  /**
	   * The logic for this is quite terse. It's because we need to
	   * support spread elements. We loop over all attributes,
	   * breaking on spreads, we then push a new object containg
	   * all prior attributes to an array for later processing.
	   */

	  function buildOpeningElementAttributes(attribs, file) {
	    var _props = [];
	    var objs = [];

	    function pushProps() {
	      if (!_props.length) return;

	      objs.push(t.objectExpression(_props));
	      _props = [];
	    }

	    while (attribs.length) {
	      var prop = attribs.shift();
	      if (t.isJSXSpreadAttribute(prop)) {
	        pushProps();
	        objs.push(prop.argument);
	      } else {
	        _props.push(convertAttribute(prop));
	      }
	    }

	    pushProps();

	    if (objs.length === 1) {
	      // only one object
	      attribs = objs[0];
	    } else {
	      // looks like we have multiple objects
	      if (!t.isObjectExpression(objs[0])) {
	        objs.unshift(t.objectExpression([]));
	      }

	      // spread it
	      attribs = t.callExpression(file.addHelper("extends"), objs);
	    }

	    return attribs;
	  }
	};

	module.exports = exports["default"];
	// tag node
	// raw string tag name
	// array of call arguments
	// optional call property that can be set to override the call expression returned
	// function called with (state: ElementState) before building attribs

/***/ }
/******/ ])))
});
;
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
/**
 * Created by jfeingold on 7/8/15.
 */
var MetaDataUtils = require("./Utils/MetaDataUtils.js");
var ModelUtils = require("./Utils/ModelUtils.js");

module.exports = AccountModel;

/**
 * Creates an AccountModel object from the given data.
 * @param {Object} data - Represents all of the data from the server concerning an account
 * @constructor
 */
function AccountModel(data) {
    // The only things about the AccountVO we care about are the asset- and subscription-summaries, so only copy them.
    this.assetSummariesByProductId = data.summariesByProductId || {};
    this.subSummariesByProductId = data.subSummariesByProductId || {};
}

/**
 * Sums the quantity of assets, filtered by Id and potentially another constraining field
 * @param {String[]} ids Only assets corresponding to these product IDs will be counted
 * @param {String} constraintField The name of the constraining field specified by a Discount Schedule
 * @param {String} quoteConstraintField The name of the field as it appears on the Quote
 * @param {Object} constraintValue Only assets whose constraint field contains this value will be counted
 * @returns {Number} The total quantity of assets that satisfy the given conditions
 */
AccountModel.prototype.getAssetPriorQuantity = function(ids, constraintField, quoteConstraintField, constraintValue) {
    var summaries = getSummaries(ids, this.assetSummariesByProductId);
    return getPriorQuantityGeneric(summaries, "asset", constraintField, quoteConstraintField, constraintValue);
};

/**
 * Sums the quantity of subscriptions, filtered by Id and potentially another constraining field
 * @param {String[]} ids Only subscriptions corresponding to these product IDs will be counted
 * @param {String} constraintField The name of the constraining field specified by a Discount Schedule
 * @param {String} quoteConstraintField The name of the field as it appears on the Quote
 * @param {Object} constraintValue Only subscriptions whose constraint field contains this value will be counted
 * @returns {Number} The total quantity of subscriptions that satisfy the given conditions
 */
AccountModel.prototype.getSubscriptionPriorQuantity = function(ids, constraintField, quoteConstraintField, constraintValue) {
    var summaries = getSummaries(ids, this.subSummariesByProductId);
    return getPriorQuantityGeneric(summaries, "subscription", constraintField, quoteConstraintField, constraintValue);
};

/**
 * Filters the provided summaries, returning those with an Id in the provided Ids
 * @param {String[]} ids The Ids by which the summaries should be filtered
 * @param {Object} sumMap A map from Product Id strings to Summary objects
 * @returns {Array} Contains all summary objects that had the desired Ids
 * @private
 */
function getSummaries(ids, sumMap) {
    var summaries = [];
    ids.forEach(function(id) {
        if (sumMap[id] != null) {
            summaries.push(sumMap[id]);
        }
    });
    return summaries;
}

/**
 * Sums the prior quantities of all provided summaries
 * @param {Array} summaries The summaries whose prior quantities will be combined
 * @param {String} summaryType Indicates the object being summarized. Must equal either "asset" or "subscription".
 * @param {String} constraintField The name of the constraining field specified by a Discount Schedule
 * @param {String} quoteConstraintField The name of the field as it appears on the Quote
 * @param {Object} constraintValue Only objects whose constraint field contains this value will be counted
 * @returns {Number} The total prior quantity of all provided summaries
 * @private
 */
function getPriorQuantityGeneric(summaries, summaryType, constraintField, quoteConstraintField, constraintValue) {
    var priorQuantity = 0;
    // Get the actual field name, so as to confirm that the field exists on the object being summarized
    var summaryConstraintField = MetaDataUtils.getField(summaryType, constraintField);
    summaries.forEach(function(summary) {
        priorQuantity += calculatePriorQuantity(summary, constraintField, quoteConstraintField, summaryConstraintField, constraintValue);
    });
    return priorQuantity;
}

/**
 *
 * @param {Object} summary A summary of either an asset or a subscription
 * @param {String} constraintField The field by which the summary shall be constrained
 * @param {String} quoteConstraintField The constraining field as it appears on the quote
 * @param {String} summaryConstraintField The constraining field as it appears on the summary
 * @param {Object} constraintValue The value that the summary must possess for it to be counted.
 * @returns {Number} The quantity of the summary, possibly filtered acccording to provided constraints
 * @private
 */
function calculatePriorQuantity(summary, constraintField, quoteConstraintField, summaryConstraintField, constraintValue) {
    if (constraintField != null && quoteConstraintField != null && summaryConstraintField != null) {
        var constraintQuantity = getConstraintQuantity(summary, constraintField, constraintValue);
        return (constraintQuantity || 0);
    } else {
        return summary.quantity;
    }
}

/**
 *
 * @param {Object} summary A summary of either an asset or a subscription
 * @param {String} field The field by which the summary shall be constrained
 * @param {Object} value The value that the constraining field must possess.
 * @returns {Number | Null} Either the quantity associated with the constraining field and value, or null if none exists.
 * @private
 */
function getConstraintQuantity(summary, field, value) {
    var cs = summary.constraintMap[field];
    if (cs == null) {
        return null;
    } else {
        return cs.quantityMap[value];
    }
}

},{"./Utils/MetaDataUtils.js":22,"./Utils/ModelUtils.js":23}],2:[function(require,module,exports){
/**
 * Created by jfeingold on 5/20/15.
 */
"use strict";
var DiscountTierListModel = require("./DiscountTierListModel.js");
var NumberUtils = require("./Utils/NumberUtils.js");
var SettingsUtils = require("./Utils/SettingsUtils.js");
var MetaDataUtils = require("./Utils/MetaDataUtils.js");
var IdUtils = require("./Utils/IdUtils.js");

module.exports = DiscountScheduleModel;

/**
 * Creates a representation of a Discount Schedule object
 * @param {JSON} record The record of a DiscountSchedule__c
 * @param {Array} productIds array of product ids associated with the discount schedule
 * @constructor
 */
function DiscountScheduleModel(record, productIds) {
    this.record = record;
    this.prefix = SettingsUtils.getPrefix();
    var prefix = this.prefix;
    if (record[prefix + "DiscountTiers__r"] != null) {
        this.tiersModel = new DiscountTierListModel(record, prefix);
    }
    if(productIds && productIds.length > 0) {
        this.productIds = productIds;
    } else if (record[prefix + "Products__r"] != null) {
        this.productIds = [];
        record[prefix + "Products__r"].records.forEach(function(p) {
            this.productIds.push(p["Id"]);
        }, this);
    }
    this.tiersByQuantityCache = {};
    this.discountCache = {};
    this.constraintField = this.record[this.prefix + "ConstraintField__c"];
    this.discountUnitPercent = (record[this.prefix + "DiscountUnit__c"] == null) || (record[this.prefix + "DiscountUnit__c"].toLowerCase() === "percent");
}

/**
 * Indicates whether the supplied pricebookId is among those that this discount schedule should exclude
 * @param {String} pricebookId The ID of the specified pricebook
 * @returns {Boolean} True if this schedule excludes the pricebook, else false
 */
DiscountScheduleModel.prototype.isPricebookIdExcluded = function(pricebookId) {
    // If discount schedules have a custom exclusion field, use that instead of the normal one.
    // Fortunately, we don't have to try very hard to convert the name
    var custom = SettingsUtils.discountsUseCustomExclusionField() ? "Custom" : "";
    var excludedIds = this.record[this.prefix + custom + "ExcludedPricebookIds__c"];
    if (excludedIds != null) {
        // Use to allow for constant-time contain checks
        if (this.excludedPricebookIds == null) {
            this.excludedPricebookIds = {};
            excludedIds.split(",").forEach(function(pbId) {
                // To ensure uniformity in the IDs, convert all of them to 18-digits before adding them to the map
                this.excludedPricebookIds[IdUtils.convertTo18(pbId.trim())] = true;
            }, this);
        }
        return this.excludedPricebookIds[IdUtils.convertTo18(pricebookId)] === true;
    }
    return false;
};

/**
 * Indicates if Cross Orders is enabled
 * @returns {boolean} True when Cross Orders is enabled
 */
DiscountScheduleModel.prototype.isCrossOrder = function() {
    return this.record[this.prefix + "CrossOrders__c"] === true;
};

/**
 * Indicates if the schedule uses a custom Quote Line Quantity field
 * @returns {boolean}
 */
DiscountScheduleModel.prototype.usesCustomQuantity = function() {
    var customField = this.record[this.prefix + "QuoteLineQuantityField__c"];
    return customField != null && customField != "Quantity";
};

/**
 * Indicates if Cross Products is enabled
 * @returns {boolean} True when Cross Products is enabled
 */
DiscountScheduleModel.prototype.isCrossProduct = function() {
    return this.record[this.prefix + "CrossProducts__c"] === true;
};

/**
 * Indicates if this discount is slab-based
 * @returns {boolean}
 */
DiscountScheduleModel.prototype.isDiscountTypeSlab = function() {
    return this.getType() == "Slab";
};

/**
 * Indicates if Include Bundled Products is enabled
 * @returns {boolean} True when Include Bundled Products is enabled
 */
DiscountScheduleModel.prototype.isIncludeBundled = function() {
    return this.record[this.prefix + "IncludeBundledProducts__c"] === true;
};

/**
 * Returns the ID of this discount schedule
 * @returns {String}
 */
DiscountScheduleModel.prototype.getId = function() {
    return this.record["Id"];
};

/**
 * Indicates whether the discount schedule is range-based or slab-based
 * @returns {String} "Ranged" or "Slab"
 */
DiscountScheduleModel.prototype.getType = function() {
    return this.record[this.prefix + "Type__c"];
};

/**
 * Returns the ID of the tier the encapsulates the provided quantity
 * @param {Number} quantity Indicates the quantity
 * @param {String} currencyCode The currency code used for a multi-currency org
 * @returns {null|String} The ID of the corresponding tier, or null if none exists
 */
DiscountScheduleModel.prototype.getTierIdForQuantity = function(quantity, currencyCode) {
    if (quantity != null || this.getType() === "Range") {
        var row = getTierRow(quantity, this);
        if (row != null) {
            var tier = row.getTier(currencyCode);
            return (tier != null) ? tier["Id"] : null;
        }
    }
    return null;
};

/**
 * Returns the tier row associated with the provided quantity
 * @param {Number} quantity
 * @param {DiscountScheduleModel} ds
 * @returns {Object} The TierRow object that contains the discount amount for the quantity}
 */
function getTierRow(quantity, ds) {
    if (ds.tiersByQuantityCache[quantity] == null) {
        // If the discount schedule has no tiers return null
        if (ds.tiersModel == null) {
            return null;
        }
        var rows = ds.tiersModel.getTierRows();
        var rowCount = rows.length;
        for (var i = 0; i < rowCount; i++) {
            var row = rows[i];
            if (row.isInRange(quantity)) {
                ds.tiersByQuantityCache[quantity] = row;
                return row;
            }
        }
    }
    return ds.tiersByQuantityCache[quantity];
}

/**
 * Indicates if the discount schedule aggregates within groups
 * @returns {boolean} True when Aggregation Scope is 'group'
 */
DiscountScheduleModel.prototype.isAggregatedWithinGroup = function() {
    var agScope = this.record[this.prefix + "AggregationScope__c"];
    return agScope != null && agScope.toLowerCase() === "group";
};

/**
 * Indicates if the discount schedule's Aggregation Scope is 'quote'
 * @returns {boolean} True when Aggregation Scope is 'quote'
 */
DiscountScheduleModel.prototype.isAggregatedWithinQuote = function() {
    var agScope = this.record[this.prefix + "AggregationScope__c"];
    return agScope != null && agScope.toLowerCase() === "quote";
};

/**
 * Indicates if the discount is applies as an amount
 * @returns {boolean} True when the discount unit is 'amount'
 */
DiscountScheduleModel.prototype.isDiscountUnitAmount = function() {
    return this.record[this.prefix + "DiscountUnit__c"] === "Amount";
};

/**
 * Returns the price scale of the given Discount Schedule Model, or 2 if none exists
 * @param {DiscountScheduleModel} ds A DiscountScheduleModel
 * @returns {number} The price scale of the discount schedule, or 2 if none exists
 */
function getPriceScale(ds) {
    return Math.floor(ds.record[ds.prefix + "PriceScale__c"] || 2);
}

/**
 * Returns true if the discount schedule has any tiers
 * @returns {boolean}
 */
DiscountScheduleModel.prototype.hasTiers = function() {
    return this.tiersModel != null && this.tiersModel.getTierRows() != null && this.tiersModel.getTierRows().length !== 0;
};

/**
 * Returns the lowest bound for the discount tier
 * @param {DiscountScheduleModel} ds A DiscountScheduleModel
 * @returns {number} The lowest bound of the discount schedule
 */
DiscountScheduleModel.prototype.getLowestBound = function(currencyCode) {
    var tierRows = this.tiersModel.getTierRows();
    var lower = tierRows[0].getTier(currencyCode)[this.prefix + "LowerBound__c"] || 0;
    return lower;
};
/**
 * Calculates the correct discount to apply based on the provided quantity- and price- information.
 * @param {Number} qty The quantity of the item as determined by the line calculator
 * @param {Number} lineQty The quantity of the item as determined by its own record
 * @param {Number} price The price of the item
 * @param {String} currencyCode A string corresponding to the currency code
 * @returns {Number} The calculated discount
 */
DiscountScheduleModel.prototype.computeDiscount = function(qty, lineQty, price, currencyCode) {
    // If the item has either a null quantity or a null price, return null because there's nothing to be done.
    if ((qty == null) || (price == null)) {
        return null;
    }

    // If lineQty is null, set it to qty
    if (lineQty == null) {
        lineQty = qty;
    }

    var cacheKey = qty + ":" + lineQty + "" + price + "" + currencyCode;

    var discount = this.discountCache[cacheKey];
    if (discount == null) {
        if (this.getType() === "Range") {
            var tRow = getTierRow(qty, this);
            if (tRow != null) {
                var tier = tRow.getTier(currencyCode);
                if (tier != null) {
                    var discountPercentage = tier[this.prefix + "Discount__c"] || 0;
                    var discountAmount = tier[this.prefix + "DiscountAmount__c"] || 0;
                    discount = this.discountUnitPercent ? (price * discountPercentage / 100.0) : discountAmount;
                    discount = NumberUtils.setScale(discount, getPriceScale(this));
                }
                this.discountCache[cacheKey] = discount;
                return discount;
            }
        } else if (this.getType() === "Slab") {
            if (this.tiersModel == null) {
                return 0;
            }
            var tierRows = this.tiersModel.getTierRows();
            // First tier. Count qty less than LowerBound__c as being at full price.
            var total = 0;
            if (!(tierRows.length === 0)) {
                var lower = tierRows[0].getTier(currencyCode)[this.prefix + "LowerBound__c"];

                if (lower < 0) {
                    // The lower bound can't be lower than 1, or God knows what will happen.
                    lower = 1;
                } else if (lower === 0) {
                    if (lower <= lineQty) {
                        total = 0;
                    } else {
                        total = (price * lineQty);
                    }
                }
                if (lower !== 0) {
                    if (lower <= lineQty) {
                        total = (lower - 1) * price;
                    } else {
                        total = (price * lineQty);
                    }
                }
            }

            var priorQuantity = qty - lineQty;
            tierRows.forEach(function(tRow) {
                if (tRow.isInSlab(qty)) {
                    var tRecord = tRow.getTier(currencyCode);
                    // Our upper bound is exclusive, so we add 1 to the quantity. E.g, if qty == 50, upper bound == 51
                    var upper = tRecord[this.prefix + "UpperBound__c"] || (qty + 1);

                    if (priorQuantity > upper) {
                        return; // Skip past our prior purchased quantity
                    }

                    var lower = tRecord[this.prefix + "LowerBound__c"];
                    if (lower <= 0) {
                        // The lower bound can't be lower than 1, or God knows what will happen.
                        lower = 1;
                    }

                    if (priorQuantity >= lower) {
                        // We don't want to count our prior purchases, so the actual lower bound, at least for the
                        // purposes of tier quantities, is our prior quantity + 1
                        lower = priorQuantity + 1;
                    }

                    // The quantity that should be priced at this tier is upper bound - lower bound
                    var tierQty = (qty > (upper - 1)) ? (upper - lower) : (qty - lower + 1);

                    // Compute price for this tier
                    var tierDiscount = 0;
                    if (tRecord != null) {
                        var discountPercentage = tRecord[this.prefix + "Discount__c"] || 0;
                        var discountAmount = tRecord[this.prefix + "DiscountAmount__c"] || 0;
                        tierDiscount = this.discountUnitPercent ? (price * discountPercentage / 100) : discountAmount;
                    }
                    var tierPrice = price - tierDiscount;

                    // Add this tier's total to the running total
                    total += (tierPrice * tierQty);
                }
            }, this);

            // Now check if there's a spillover on the slab
            if (tierRows.length != 0) {
                // Get the last upper bound
                var lastUpperBound = tierRows[tierRows.length - 1].getTier(currencyCode)[this.prefix + "UpperBound__c"];
                // If the upper bound is less than the quantity, the remainder get added at full price
                if (lastUpperBound <= qty) {
                    var spillOverQty = qty - lastUpperBound + 1;
                    total += (price * spillOverQty);
                }
            }

            // Return the total discount, because unit discount may result in enough decimals that the final result
            // will be inaccurate
            discount = (price * lineQty) - total;
            this.discountCache[cacheKey] = discount;
            return discount;
        }
    }
    return discount;
};

},{"./DiscountTierListModel.js":3,"./Utils/IdUtils.js":19,"./Utils/MetaDataUtils.js":22,"./Utils/NumberUtils.js":24,"./Utils/SettingsUtils.js":27}],3:[function(require,module,exports){
/**
 * Created by jfeingold on 5/20/15.
 */
"use strict";
var SettingsUtils = require("./Utils/SettingsUtils.js");
var LabelUtils = require("./Utils/LabelUtils.js");
module.exports = DiscountTierListModel;

/**
 * Creates a model of the quantity tiers of a discount schedule
 * @param {JSON} dsRecord The record of the parent discount schedule
 * @param {String} prefix The org's prefix, generally either "SBQQ__" or ""
 * @constructor
 */
function DiscountTierListModel(dsRecord, prefix) {
    this.schedule = dsRecord;
    this.prefix = prefix;
    this.unitPriceScale = SettingsUtils.getUnitPriceScale();
    this.rows = [];
    this.multiTierRow = SettingsUtils.isMultiCurrencyOrg() && (dsRecord[this.prefix + "DiscountUnit__c"] == "Amount");
    this.columnHeadings = [SettingsUtils.getCurrencySymbol()];
    if (this.multiTierRow) {
        this.columnHeadings = SettingsUtils.getCurrencyIsoCodes();
    }
    var lowerBounds = {};
    var tiersByKey = {};
    dsRecord[prefix + "DiscountTiers__r"].records.forEach(function(tier) {
        tiersByKey[createKey(tier, this)] = tier;
        lowerBounds[tier[this.prefix + "LowerBound__c"]] = true;
    }, this);

    var lowerBoundsArray = [];
    for (var x in lowerBounds) {
        lowerBoundsArray.push(Number(x));
    }
    lowerBoundsArray.sort(function(a, b) {return a - b});
    lowerBoundsArray.forEach(function(lb) {
        var row = new TierRow(this, getNextRowId(), [], this.prefix);

        if (this.multiTierRow) {
            this.columnHeadings.forEach(function(currencyCode) {
                var key = lb + currencyCode;
                var discountTier = tiersByKey[key];
                if (discountTier == null) {
                    discountTier = {
                        "Schedule__c": dsRecord.Id,
                        "CurrencyIsoCode": currencyCode
                    };
                }
                row.addTier(new Tier(discountTier, this.uniPriceScale));
            }, this);
        } else {
            var tier = tiersByKey[lb];
            if (tier == null) {
                throw new Error(LabelUtils.getLabelByKey('msg_js_err_null_discount_tier'));
            }
            row.tiers.push(new Tier(tier, this.unitPriceScale));
        }
        this.rows.push(row);
    }, this);
}

/**
 * Returns the TierRow objects associated with this list model
 * @returns {Array}
 */
DiscountTierListModel.prototype.getTierRows = function() {
    return this.rows;
};

var ROW_ID = 0;

/**
 * Creates a unique key for the provided tier, using the lower bound. In multi-currency orgs, the currency code
 * is also used to guarantee uniqueness
 * @param {Object} tier A discount tier record
 * @param {DiscountTierListModel} listModel The list model passes itself in as an argument
 * @returns {string}
 * @private
 */
function createKey(tier, listModel) {
    var key = String(tier[listModel.prefix + "LowerBound__c"]);
    if (listModel.multiTierRow) {
        key += tier["CurrencyIsoCode"];
    }
    return key;
}

/**
 * Increments the Row_Id variable and returns its value
 * @returns {string}
 * @private
 */
function getNextRowId() {
    ROW_ID++;
    return String(ROW_ID);
}



// ============= TIER ROW CLASS ===============

/**
 * Creates a Discount Tier Row
 * @param {DiscountTierListModel} parentModel The row's parent list model
 * @param {String} id The unique ID assigned to each row
 * @param {Array} tiers The tiers associated with this row
 * @param {String} prefix The prefix used by this org, typicall either "SBQQ__" or an empty string
 * @constructor
 * @private
 */
function TierRow(parentModel, id, tiers, prefix) {
    this.id = id;
    this.index = 0;
    this.tiers = tiers;
    this.schedule = parentModel.schedule;
    this.prefix = prefix;
}

/**
 * If the tier row has a master tier designated, it is used as a template. Otherwise, the first tier is used.
 * @returns {Object}
 * @private
 */
TierRow.prototype.getTemplate = function() {
    return (this.masterTier || this.tiers[0].record);
};

/**
 * Returns true if the given quantity falls between this row's lower bound and an optional upper bound
 * @param {Number} quantity A positive number
 * @returns {boolean}
 * @private
 */
TierRow.prototype.isInRange = function(quantity) {
    var template = this.getTemplate();
    if (template[this.prefix + "UpperBound__c"] == null) {
        return quantity >= template[this.prefix + "LowerBound__c"];
    } else {
        return (quantity >= template[this.prefix + "LowerBound__c"]) && (quantity < template[this.prefix + "UpperBound__c"]);
    }
};

/**
 * Returns true if the given quantity is at least the lower bound of the represented row
 * @param {Number} quantity A positive number
 * @returns {boolean}
 * @private
 */
TierRow.prototype.isInSlab = function(quantity) {
    if (this.isInRange(quantity)) {
        // Quantity falls in this actual tier, so by definition it's part of slab pricing
        return true;
    }
    return (quantity >= this.getTemplate()[this.prefix + "LowerBound__c"]);
};

/**
 * Adds the given tier to this row's tier list, setting it as the master tier if no master already exists
 * @param {Tier} tier A Tier object
 */
TierRow.prototype.addTier = function(tier) {
    var record = tier.record;
    if (record[SettingsUtils.getPrefix() + "LowerBound__c"] != null) {
        this.masterTier = record;
    }
    this.tiers.push(tier);
};

/**
 * Returns the tier that uses the provided currency code, if such a tier exists
 * @param {String} currencyCode A string corresponding to a Salesforce currency code
 * @returns {Tier}
 */
TierRow.prototype.getTier = function(currencyCode) {
    var dUnit = this.schedule[this.prefix + "DiscountUnit__c"];
    if ((dUnit == null) || (dUnit.toLowerCase() === "percent") || !SettingsUtils.getSettings().isMultiCurrencyOrg) {
        return this.tiers[0].record;
    }
    var tierNum = this.tiers.length;
    for (var i = 0; i < tierNum; i++) {
        var tier = this.tiers[i];
        if (tier.record['CurrencyIsoCode'] === currencyCode) {
            return tier.record;
        }
    }
    return null;
};

/**
 * A model storing a tier record and a unit price scale
 * @param {Object} tier A tier record
 * @param {Number} unitPriceScale The number of decimals to which prices are rounded
 * @constructor
 */
function Tier(tier, unitPriceScale) {
    this.record = tier;
    this.unitPriceScale = unitPriceScale;
}

},{"./Utils/LabelUtils.js":21,"./Utils/SettingsUtils.js":27}],4:[function(require,module,exports){
/**
 * Created by jfeingold on 7/24/15.
 */
"use strict";
var IdUtils = require("./Utils/IdUtils.js");
var esprima = require('esprima');
var LabelUtils = require("./Utils/LabelUtils.js");
var MetaDataUtils = require("./Utils/MetaDataUtils.js");
var NumberUtils = require("./Utils/NumberUtils.js");
var DateUtils = require("./Utils/DateUtils.js");
var SettingsUtils = require("./Utils/SettingsUtils.js");
module.exports = FormulaFieldCalculator;

function FormulaFieldCalculator() {
	this.quoteRecord = {};
	this.fieldMetadata = {};
	this.evaluatedFields = {};
}

FormulaFieldCalculator.prototype.setMetadata = function(data) {
	data.forEach(function(d) {
		if (d != null && d.fullName != null) {
			if (d.fullName.lastIndexOf('__c') != d.fullName.length - 3) {
				// The Metadata API does not support Salesforce Standard fields. This means that no type information is
				// supplied for those fields, and that's a pretty big problem. To help mitigate this, we hard-code
				// the type information for the handful of Universal Standard Fields, which are present on all SF objects.
				hardcodeStandardField(d);
			}
			this.fieldMetadata[d.fullName] = d;
		}
	}, this);
};

function hardcodeStandardField(d) {
	var fn = d.fullName.split('.')[1];
	switch(fn) {
		case 'CreatedDate':
		case 'LastModifiedDate':
			d.type = 'DateTime';
			return;
		case 'Name':
			d.type = 'AutoNumber';
			return;
		case 'OwnerId':
		case 'CreatedById':
		case 'LastModifiedById':
			d.type = 'Lookup';
			return;
		case 'CurrencyIsoCode':
			d.type = 'Text';
			return;
		default:
			var msg = LabelUtils.getLabelByKey('msg_js_no_metadata_for_field').replace(/\{0\}/g, d.fullName);
			console.warn(msg);
	}
}

FormulaFieldCalculator.prototype.getMetadataForField = function(objectType, fieldName) {
	return this.fieldMetadata[objectType + '.' + fieldName];
};

FormulaFieldCalculator.prototype.resetEvaluatedFields = function() {
	this.evaluatedFields = {};
};

FormulaFieldCalculator.prototype.fieldIsEvaluated = function(fieldName) {
	return this.evaluatedFields[fieldName] == true;
};

FormulaFieldCalculator.prototype.markFieldEvaluated = function(fieldName) {
	this.evaluatedFields[fieldName] = true;
};

FormulaFieldCalculator.prototype.calculateFormulaFieldsOnObjects = function(objects) {
	var metaMap = this.fieldMetadata;
	var messagesByCause = {};
	objects.forEach(function(object) {
		this.resetEvaluatedFields();
		for (var fieldName in metaMap) {
			// If the field is a member of the object being evaluated
			var fieldOwner = fieldName.split(".")[0];
			var shortName = fieldName.split(".")[1];
			if (metaMap.hasOwnProperty(fieldName) && (fieldOwner == MetaDataUtils.getObjectType(object))) {
				try {
					this.calculateField(shortName, object.record, 'Formula Field');
				} catch (e) {
					if (e.problemField != null && messagesByCause[e.problemField] == null) {
						messagesByCause[e.problemField] = e.message;
					} else if (e.problemField == null && messagesByCause[fieldName] == null) {
						messagesByCause[fieldName] = "Field '" + fieldName +"' threw the following exception: " + e.message;
					}
				}
			}
		}
	}, this);
	for (var pf in messagesByCause) {
		if (console) {
			console.warn(messagesByCause[pf]);
		}
	}
};

function fieldIsCalculated(record, metadata, formulaSource) {
	if (formulaSource == 'Price Rule') {
		return false;
	}
	var type = MetaDataUtils.getRecordType(record);
	switch(type) {
		case 'SBQQ__Quote__c':
		case 'Quote__c':
		case 'SBQQ__QuoteLineGroup__c':
		case 'QuoteLineGroup__c':
		case 'SBQQ__QuoteLine__c':
		case 'QuoteLine__c':
			return metadata.formula != null;
		default:
			return false;
	}
}

FormulaFieldCalculator.prototype.calculateField = function(fieldName, record, formulaSource) {
	// If the field hasn't been evaluated, do it now
	var fullName = MetaDataUtils.getRecordType(record) + "." + fieldName;
	var meta = this.fieldMetadata[fullName];
	if (meta == null) {
		var errorText = LabelUtils.getLabelByKey('msg_js_err_no_metadata').replace('{0}', fullName);
		var e = new Error(errorText);
		e.problemField = fullName;
		throw e;
	}
	var result;
	// Evaluate the field if it hasn't already been evaluated
	if (!this.fieldIsEvaluated(fullName)) {
		// Check if this record is one that we should be calculating.
		// i.e. if it's a Quote, Line, or Group record, and the field has a formula
		if (fieldIsCalculated(record, meta, formulaSource)) {
			var formula = meta.formula;
			formula = replaceBadCharacters(formula);
			var ast = esprima.parse(formula);
			result = this.processAST(ast, record, meta, formulaSource);
			var resultType = meta.type.toLowerCase();
			// If the result is non-null, process it according to the metadata specifications
			if (result != null) {
				if (resultType == 'text' && meta.length != null) {
					// Take only length-many characters
					result = result.slice(0, meta.length);
				} else if ((resultType == 'currency' || resultType == 'number' || resultType == 'percent') && meta.scale != null) {
					// Take only scale-many decimal places
					if (resultType == 'percent') {
						result = result * 100;
					}
					result = NumberUtils.setScale(result, meta.scale);
				} else if (resultType == 'date' && result instanceof Date) {
					result = DateUtils.toApexDate(result);
				} else if (resultType == 'datetime' && result instanceof Date) {
					result = DateUtils.toApexDateTime(result);
				}
			}
		} else {
			// If it's not an evaluated formula, we can just return the value
			result = record[fieldName];
			if (result == null) {
				result = meta.defaultValue;
			}
		}
		// Fields should never EVER be undefined. They should only be null.
		if (result == undefined) {
			result = null;
		} else if (meta.type != null && meta.type.toLowerCase() == 'checkbox' && typeof result == 'string') {
			if (result.toLowerCase() === 'true') {
				result = true;
			} else if (result.toLowerCase() === 'false') {
				result = false;
			}
		}
		record[fieldName] = result;
		this.markFieldEvaluated(fullName);
	}
	return record[fieldName];
};

/**
 * Replaces characters that confuse the compiler with JS-acceptable equivalents. (i.e. = with ==, and <> with !=)
 * @param {String} formula The formula used by a Salesforce Field
 * @returns {String}
 * @private
 */
function replaceBadCharacters(formula) {
	// In general, Salesforce seems to prefer converting to string codes instead of ASCII codes.
	// For example, it converts ampersands to &amp; instead of &#38;. So first check for the string codes.
	formula = formula.replace(/&lt;/g, '<');
	formula = formula.replace(/&gt;/g, '>');
	formula = formula.replace(/&amp;/g, '&');
	formula = formula.replace(/&quot;/g, '"');

	// Now we should replace the ones that are converted to numeric codes.
	formula = formula.replace(/&#(\d+);/g, function(match, dec) {
		return String.fromCharCode(dec);
	});

	// Now, we should replace bad ordering of characters. For example, while Apex formulas support '=' as an equality test,
	// Esprima requires it to be '=='.
	formula = formula.replace(/=+/g, '==');
	formula = formula.replace(/<=+/g, "<=");
	formula = formula.replace(/>=+/g, ">=");
	formula = formula.replace(/<>/g, "!=");
	formula = formula.replace(/[Ii][Ff][(]/g, "IF(");
	return formula;
}

/**
 * Calculates the result of a formula field through the use of mutually recursive calls
 * @param {Object} ast An Abstract Syntax Tree representing a SF formula field
 * @param {Object} record The record of a SF object
 * @param {Object} metadata The SF Metadata for the formula being evaluated
 * @param {String} src A string indicating whether this formula comes from a formula field or a price rule
 * @returns {*}
 * @private
 */
FormulaFieldCalculator.prototype.processAST = function(ast, record, metadata, src) {
	switch (ast.type) {
		case "Program":
			// NOTE: ASSUME THAT THE PROGRAM CONSISTS OF A SINGLE STATEMENT
			return this.processAST(ast.body[0], record, metadata, src);
		case "ExpressionStatement": // A formula field expression
			return this.processAST(ast.expression, record, metadata, src);
		case "CallExpression": // A function call, i.e. DATE()
			return this.processCallExpression(ast, record, metadata, src);
		case "UnaryExpression": // A unary call, i.e. -5 or !true
			var arg = this.processAST(ast.argument, record, metadata, src);
			return processUnaryExpression(ast.operator, arg, metadata);
		case "LogicalExpression": // A logical operation like && or ||
		case "BinaryExpression": // A mathematical expression like + or -
			var operator = ast.operator;
			var left = this.processAST(ast.left, record, metadata, src);
			var right = this.processAST(ast.right, record, metadata, src);
			return processBinaryOp(operator, left, right, metadata);
		case "Literal": // A static value, like 3 or 'green', or a lower-case boolean
			return ast.value;
		case "Identifier": // A field name, or a non-lowercase boolean, or non-lowercase null
			// Check if it's a boolean, and return its value if so. This is necessary because 'True' is parsed as an
			// identifier by Esprima, while 'true' is a literal.
			if (ast.name.toLowerCase() === "true") {
				return true;
			} else if (ast.name.toLowerCase() === "false") {
				return false;
			} else if (ast.name.toLowerCase() === 'null') {
				return null;
			}
			// If it's not a boolean, it's a field, so calculate the value
			var value = this.calculateField(ast.name, record, src);
			var fieldMeta = this.getMetadataForField(MetaDataUtils.getRecordType(record), ast.name);
			return this.postProcessCalculatedValue(value, metadata, fieldMeta);
		case "MemberExpression": // Lookup references or global variables
			return this.handleMemberExpression(ast, record, metadata, src);
		default:
			var astErrorText = LabelUtils.getLabelByKey("msg_js_err_unexpected_ast")
				.replace("{0}", metadata.fullName);
			var compError = new Error(astErrorText);
			compError.problemField = metadata.fullName;
			throw compError;
	}
};

FormulaFieldCalculator.prototype.handleMemberExpression = function(ast, record, metadata, formulaSource) {
	var property = ast.property.name;
	var referencedRecord;
	// This is standard recursion. The base case is when the object is an Identifier, and the induction case is when it's
	// a MemberExpression
	if (ast.object.type == 'Identifier') {
		var object = ast.object.name;
		// If the object name is a global variable, throw an exception, because we don't support those at this time.
		if (object.indexOf('$') == 0) {
			var globalVarError = LabelUtils.getLabelByKey('msg_js_err_unsupported_global')
				.replace("{0}", metadata.fullName)
				.replace("{1}", object)
				.replace("{2}", property);
			var gve = new Error(globalVarError);
			gve.problemField = metadata.fullName;
			throw e;
		}
		referencedRecord = record[object];
	} else if (ast.object.type == 'MemberExpression') {
		// This is the record that our property references
		referencedRecord = this.handleMemberExpression(ast.object, record, metadata, formulaSource);
	}
	if (referencedRecord == null) {
		return null;
	}

	// Now that we know what record we're looking at, we can look at the property
	if (property.indexOf('__r') == (property.length -3)) {
		// If the property is a related record, we can just return it.
		return referencedRecord[property];
	}

	// If the property is the name of a field, we might need to calculate it.
	var value = this.calculateField(property, referencedRecord, formulaSource);

	// Post-processing.
	var referencedFieldMeta = this.getMetadataForField(MetaDataUtils.getRecordType(referencedRecord), property);
	return this.postProcessCalculatedValue(value, metadata, referencedFieldMeta)
};

/**
 * Post-process nulls, numbers (including percents) and dates for calculated values.
 */
FormulaFieldCalculator.prototype.postProcessCalculatedValue = function(value, metadata, fieldMeta) {
	if (fieldMeta == null || fieldMeta.type == null) {
		// We would already have thrown an error here earlier, so just return.
		// It is possible for the metadata type to be null here, if it's a standard Salesforce field.
		return value;
	}

	var fieldType = fieldMeta.type.toLowerCase();
	// If the value is null, we check whether it's number, currency, or percent field
	if (value == null) {
		// Number, currency, and percent fields can be either 0 or null depending on what the formula field specifies
		var referenceIsNumCurrOrPercent = (fieldType == "number") || (fieldType == "currency") || (fieldType == "percent");
		var blanksAsZero = metadata.formulaTreatBlanksAs == 'BlankAsZero';
		if (referenceIsNumCurrOrPercent && blanksAsZero) {
			return 0;
		}
		// Text fields are never null, just empty
		if (fieldType == 'text') {
			return "";
		}
		return null;
	}
	// Dates must be parsed into attributes and fed to Date.UTC()
	if (fieldType == 'date') {
		var attrs = value.split('-');
		var year = attrs[0];
		var month = attrs[1] - 1; // JavaScript indexes months on zero.  Lovely.
		var day = attrs[2];
		value = new Date(Date.UTC(year, month, day));
	} else if (fieldType == 'datetime') {
		// DateTimes can be fed directly to the Date constructor, as they're simply ISO strings
		value = new Date(value);
	} else if (fieldType == 'percent') {
		// We multiply by 100 later, but need this to return the actual decimal percent now.
		value = value / 100;
	}
	return value;
};

FormulaFieldCalculator.prototype.parseRuleFormula = function(formula, record, quoteRecord, fieldName) {
	if (quoteRecord) {
		this.quoteRecord = quoteRecord;
	}
	formula = replaceBadCharacters(formula);
	var ast = esprima.parse(formula);
	// If the formula is being calculated for insertion into a field, we should use that field's metadata.
	var metadata = fieldName ? this.getMetadataForField(MetaDataUtils.getRecordType(record), fieldName) : {};
	var result = this.processAST(ast, record, metadata, "Price Rule");
	if (fieldName) {
		// Likewise, we should convert the value into one that can be stored properly in a field.
		result = convertFormulaResultIntoSerializableValue(result, metadata);
	}
	return result;
};


function convertFormulaResultIntoSerializableValue(formulaValue, metadata) {
	var result = formulaValue;
	var resultType = metadata.type.toLowerCase();
	if (formulaValue != null) {
		if (resultType === 'text' && metadata.length) {
			// Take only length-many characters
			result = formulaValue.slice(0, metadata.length);
		} else if ((resultType === 'currency' || resultType === 'number' || resultType === 'percent') && metadata.scale) {
			// Take only scale-many decimal places.
			result = NumberUtils.setScale(result, metadata.scale);
		} else if (resultType === 'date' && result instanceof Date) {
			// Dates are calculated as Date objects, but must be stored as ISO formatted strings.
			result = DateUtils.toApexDate(result);
		} else if (resultType === 'datetime' && result instanceof Date) {
			// DateTimes are calculated as Date objects, but must be stored as ISO formatted strings.
			result = DateUtils.toApexDateTime(result);
		}
	}
	// Fields should never EVER be undefined. They should only be null.
	if (result == undefined) {
		result = null;
	}
	// Replace Strings 'true' and 'false' with Booleans true and false.
	if (metadata.type != null && metadata.type.toLowerCase() === 'checkbox' && typeof result === 'string') {
		if (result.toLowerCase() === 'true') {
			result = true;
		} else if (result.toLowerCase() === 'false') {
			result = false;
		}
	}
	return result;
}

/**
 * Performs a Salesforce function using the abstract syntax tree and record provided
 * @param {Object} ast An Abstract Syntax Tree representing a Salesforce Formula Field
 * @param {Object} record The record of an object
 * @param {Object} metadata The Metadata of the SF field being evaluated
 * @param {String} src Has a value of 'Price Rule' when this formula is being evaluated inside a price rule
 * @returns {*}
 * @private
 */
FormulaFieldCalculator.prototype.processCallExpression = function(ast, record, metadata, src) {
	var name = ast.callee.name.toUpperCase();
	var args = ast["arguments"];
	switch (name) {
		case "ABS": // Absolute value
			var arg = this.processAST(args[0], record, metadata, src);
			return arg > 0 ? arg : -arg;
		case "AND": // Logical And
			for (var i = 0; i < args.length; i++) {
				arg = this.processAST(args[i], record, metadata, src);
				if (!arg) {
					return false;
				}
			}
			return true;
		case "BEGINS": // Does one string start with another?
			var string = this.processAST(args[0], record, metadata, src);
			var substring = this.processAST(args[1], record, metadata, src);
			return string.indexOf(substring) === 0;
		case "BLANKVALUE": // A value is blank only if it contains no characters, blank spaces, or 0s
			var test = this.processAST(args[0], record, metadata, src);
			var replacement = this.processAST(args[1], record, metadata, src);
			// A value is not blank if it contains a character, blank space, or 0
			var testIsBlank = (test == null) || (test == "");
			return testIsBlank ? replacement : test;
		case "BR": // Insert an HTML break tag
			return "<br>";
		case "CASE": // Equivalent to JS switch statement
			var condition = this.processAST(args[0], record, metadata, src);
			var length = args.length;
			for (i = 1; i < length - 1; i += 2) {
				arg = this.processAST(args[i], record, metadata, src);
				if (arg === condition) {
					return this.processAST(args[i + 1], record, metadata, src);
				}
			}
			return this.processAST(args[length - 1], record, metadata, src);
		case "CASESAFEID": // Converts a case-sensitive SF ID to a case-safe one
			var id = this.processAST(args[0], record, metadata, src);
			return IdUtils.convertTo18(id);
		case "CEILING":
			// NOTE: UNLIKE WITH JS, SFDC'S CEILING() METHOD ROUNDS AWAY FROM 0, NOT STRICTLY UP.
			// e.g, CEILING(1.5) == 2, but CEILING(-1.5) == -2. Which is unbelievably stupid.
			var num = this.processAST(args[0], record, metadata, src);
			return num > 0 ? Math.ceil(num) : Math.floor(num);
		case "CONTAINS": // Does one string contain another?
			string = this.processAST(args[0], record, metadata, src);
			substring = this.processAST(args[1], record, metadata, src);
			return string.indexOf(substring) != -1;
		case "DATE": // Create a JS Date with the provided year, month, and date. Time is midnight GMT.
			var year = this.processAST(args[0], record, metadata, src);
			var month = this.processAST(args[1], record, metadata, src) - 1;
			var day = this.processAST(args[2], record, metadata, src);
			res = new Date(Date.UTC(year, month, day));
			if (res.getUTCFullYear() != year || res.getUTCDate() != day || res.getUTCMonth() != month) {
				throw new Error("Invalid date");
			}
			return res;
		case "DATEVALUE": // Turns an expression into a Date, with time of midnight GMT
			var dateString = this.processAST(args[0], record, metadata, src);
			return new Date(dateString);
		case "DATETIMEVALUE": // Turns an expression into a date and time
			dateString = this.processAST(args[0], record, metadata, src);
			return new Date(dateString);
		case "DAY": // Returns the day from a date
			arg = this.processAST(args[0], record, metadata, src);
			return arg.getUTCDate();
		case "DISTANCE": // UNIMPLEMENTED. DOES NOTHING
			var distanceErrorText = LabelUtils.getLabelByKey("msg_js_err_unsupported_formula")
				.replace("{0}", metadata.fullName)
				.replace("{1}", "DISTANCE()");
			var distanceError = new Error(distanceErrorText);
			distanceError.problemField = metadata.fullName;
			throw distanceError;
		case "EXP": // Returns e^x
			return Math.exp(this.processAST(args[0], record, metadata, src));
		case "FIND": // Finds the first occurrence of a substring within a given string
			string = this.processAST(args[1], record, metadata, src);
			substring = this.processAST(args[0], record, metadata, src);
			var startPoint = args.length == 3 ? this.processAST(args[2], record, metadata, src) : 0;
			return string.indexOf(substring, startPoint || 0) + 1;
		case "FLOOR":
			// NOTE: UNLIKE WITH JS, SFDC'S FLOOR() METHOD ROUNDS TOWARDS ZERO, NOT STRICTLY DOWN.
			// e.g. FLOOR(1.5) == 1, but FLOOR(-1.5) == -1, which is unbelievably stupid.
			num = this.processAST(args[0], record, metadata, src);
			return num > 0 ? Math.floor(num) : Math.ceil(num);
		case "GEOLOCATION": // UNIMPLEMENTED. DOES NOTHING.
			var geolocErrorText = LabelUtils.getLabelByKey("msg_js_err_unsupported_formula")
				.replace("{0}", metadata.fullName)
				.replace("{1}", "GEOLOCATION()");
			var geolocError = new Error(geolocErrorText);
			geolocError.problemField = metadata.fullName;
			throw geolocError;
		case "GETSESSIONID": // CURRENTLY UNIMPLEMENTED. DOES NOTHING
			var sessionIdErrorText = LabelUtils.getLabelByKey("msg_js_err_unsupported_formula")
				.replace("{0}", metadata.fullName)
				.replace("{1}", "GETSESSIONID()");
			var sessionIdError = new Error(sessionIdErrorText);
			sessionIdError.problemField = metadata.fullName;
			throw sessionIdError;
		case "HYPERLINK": // Creates a hyperlink to the given target
			var url = this.processAST(args[0], record, metadata, src);
			url = url.replace(/={2}/g, "=");
			var friendlyName = this.processAST(args[1], record, metadata, src);
			target = (args.length == 3) ? this.processAST(args[2], record, metadata, src) : "_blank";
			return "<a href=\"" + url + "\" target=\"" + target + "\">" + friendlyName + "</a>";
		case "IF": // Returns one of two options based on whether a condition is true
			condition = this.processAST(args[0], record, metadata, src);
			var sat = this.processAST(args[1], record, metadata, src);
			var unsat = this.processAST(args[2], record, metadata, src);
			return condition === true ? sat : unsat;
		case "IMAGE": // Inserts an image with alternate text and height/width specs
			url = this.processAST(args[0], record, metadata, src);
			url = url.replace(/={2}/g, "=");
			url = url.replace(/&amp;/g, "&");
			var altText = this.processAST(args[1], record, metadata, src);
			var img = "<img src=\"" + url + "\" alt=\"" + altText;
			if (args.length > 2) {
				img += "\" height=\"" + this.processAST(args[2], record, metadata, src);
			}
			if (args.length > 3) {
				img += "\" width=\"" + this.processAST(args[3], record, metadata, src);
			}
			img += "\" border=\"0\">";
			return img;
		case "INCLUDES": // Returns true if a multi-select picklist contains a desired option
			var choices = this.processAST(args[0], record, metadata, src).split(";");
			var option = this.processAST(args[1], record, metadata, src);
			return choices.some(function (element) {return element === option;});
		case "ISBLANK": // A value is not blank if it contains a character, empty space, or 0
			var field = this.processAST(args[0], record, metadata, src);
			return field == null || field === "";
		case "ISNULL": // A field is null if it contains no value. NOTE: Text fields are never null
			field = this.processAST(args[0], record, metadata, src);
			return field == null;
		case "ISNUMBER": // Returns true if a value is a number
			// I think this one is pretty clever. NaN is the only value in JS that is unequal to itself.
			// So test for self-equality
			num = Number(this.processAST(args[0], record, metadata, src));
			return num == num;
		case "ISPICKVAL": // Checks if the value of a picklist field is the desired option
			var value = this.processAST(args[0], record, metadata, src);
			var literal = this.processAST(args[1], record, metadata, src);
			return value == literal;
		case "LEFT": // Takes the leftmost n characters from a string
			string = this.processAST(args[0], record, metadata, src);
			var count = this.processAST(args[1], record, metadata, src);
			return string.slice(0, count);
		case "LEN": // Returns the length of a string
			string = this.processAST(args[0], record, metadata, src);
			return string.length;
		case "LN": // Calculates the natural log of the provided number
			return Math.log(this.processAST(args[0], record, metadata, src));
		case "LOG": // Calculates the base-10 log of a number
			return Math.log(this.processAST(args[0], record, metadata, src)) / Math.LN10;
		case "LOWER": // Converts a string to lowercase
			return this.processAST(args[0], record, metadata, src).toLowerCase();
		case "LPAD": // Pads one string using n-many instances of either a provided string or " "
			string = this.processAST(args[0], record, metadata, src);
			length = this.processAST(args[1], record, metadata, src);
			var padString = args.length == 3 ? this.processAST(args[2], record, metadata, src) : " ";
			if (string.length > length) {
				return string.slice(0, length);
			} else if (string.length == length) {
				return string;
			} else {
				var diff = length - string.length;
				var fullCount = Math.floor(diff / padString.length);
				var partialCount = diff % padString.length;
				var adjusted = "";
				for (i = 0; i < fullCount; i++) {
					adjusted += padString;
				}
				adjusted += padString.slice(0, partialCount);
				return adjusted + string;
			}
		case "MAX": // Returns the greatest in a series of numbers
			var res = Number.NEGATIVE_INFINITY;
			for (i = 0; i < args.length; i++) {
				arg = this.processAST(args[i], record, metadata, src);
				res = res > arg ? res : arg;
			}
			return res;
		case "MID": // Returns characters from within a string, starting at a starting point
			string = this.processAST(args[0], record, metadata, src);
			startPoint = this.processAST(args[1], record, metadata, src);
			count = this.processAST(args[2], record, metadata, src);
			return string.slice(startPoint - 1, startPoint - 1 + count);
		case "MIN": // Returns the least in a series of numbers
			res = Number.POSITIVE_INFINITY;
			for (i = 0; i < args.length; i++) {
				arg = this.processAST(args[i], record, metadata, src);
				res = res < arg ? res : arg;
			}
			return res;
		case "MOD": // Returns x % y
			return this.processAST(args[0], record, metadata, src) % this.processAST(args[1], record, metadata, src);
		case "MONTH": // Returns the month value of a given date
			arg = this.processAST(args[0], record, metadata, src);
			return arg.getUTCMonth() + 1;
		case "NOT": // Returns the inverse of a boolean
			return !this.processAST(args[0], record, metadata, src);
		case "NOW": // Returns a date-time corresponding to right now
					// This should return a GMT date
			return new Date(Date.now());
		case "NULLVALUE": // If a value is null, replaces it with another value. NOTE: Text values are never null
			test = this.processAST(args[0], record, metadata, src);
			replacement = this.processAST(args[1], record, metadata, src);
			return test == null ? replacement : test;
		case "OR": // If any of the following arguments are true, returns true
			for (i = 0; i < args.length; i++) {
				arg = this.processAST(args[i], record, metadata, src);
				if (arg) {
					return true;
				}
			}
			return false;
		case "RIGHT": // Returns the rightmost N characters of a string
			string = this.processAST(args[0], record, metadata, src);
			count = this.processAST(args[1], record, metadata, src);
			if (count >= string.length) {
				return string;
			} else {
				return string.slice(string.length - count, string.length);
			}
		case "ROUND": // Rounds a number to n decimal places
			var number = this.processAST(args[0], record, metadata, src);
			var placeCount = this.processAST(args[1], record, metadata, src);
			var multiplier = Math.pow(10, placeCount);
			number *= multiplier;
			if (number > 0) {
				res = Math.round(number);
			} else {
				// This is to preserve Salesforce's so-called half-up rounding, in which -1.5 rounds "up" to -2.
				res = -(Math.round(-number));
			}
			res /= multiplier;
			return res;
		case "RPAD": // Pads the right side of a string with n-many instances of either a provided string or " "
			string = this.processAST(args[0], record, metadata, src);
			length = this.processAST(args[1], record, metadata, src);
			padString = args.length == 3 ? this.processAST(args[2], record, metadata, src) : " ";
			if (string.length > length) {
				return string.slice(0, length);
			} else if (string.length === length) {
				return string;
			} else {
				diff = length - string.length;
				fullCount = Math.floor(diff / padString.length);
				partialCount = diff % padString.length;
				adjusted = "";
				for (i = 0; i < fullCount; i++) {
					adjusted += padString;
				}
				adjusted += padString.slice(0, partialCount);
				return string + adjusted;
			}
		case "SQRT": // Returns the square root of n
			return Math.sqrt(this.processAST(args[0], record, metadata, src));
		case "SUBSTITUTE": // Replaces a given substring with another
			string = this.processAST(args[0], record, metadata, src);
			var regexSourceString = this.processAST(args[1], record, metadata, src);
			regexSourceString = regexSourceString.replace(/\{/g, '\\{');
			regexSourceString = regexSourceString.replace(/\}/g, '\\}');
			regexSourceString = regexSourceString.replace(/\[/g, '\\[');
			regexSourceString = regexSourceString.replace(/\]/g, '\\]');
			var target = new RegExp(regexSourceString, "g");
			replacement = this.processAST(args[2], record, metadata, src);
			return string.replace(target, replacement);
		case "TEXT": // Converts a value to text
			var res = this.processAST(args[0], record, metadata, src);
			return res == null ? '' : String(res);
		case "TODAY": // Returns a date equal to today
			var today = new Date();
			return new Date(Date.UTC(today.getUTCFullYear(), today.getUTCMonth(), today.getUTCDate()));
		case "TRIM": // Removes all leading and trailing whitespace, and replaces any inner white space with single spaces
			return this.processAST(args[0], record, metadata, src).trim().replace(/[ ]+/g, " ");
		case "UPPER": // Converts to uppercase
			return this.processAST(args[0], record, metadata, src).toUpperCase();
		case "VALUE": // Converts a value to a number
			// TODO: MAKE SURE THIS WORKS THE WAY IT SHOULD
			return Number(this.processAST(args[0], record, metadata, src)) || "#Error!";
		case "YEAR": // Returns the year of a given date
			arg = this.processAST(args[0], record, metadata, src);
			if (arg instanceof Date) {
				return arg.getFullYear();
			}
			return arg.split("-")[0];
		default:
			var unimplementedErrorText = LabelUtils.getLabelByKey("msg_js_err_unsupported_formula")
				.replace("{0}", metadata.fullName)
				.replace("{1}", name);
			throw new Error(unimplementedErrorText);
	}
};


/**
 * Applies the provided unary operator to the provided argument
 * @param {String} operator A unary operator, such as - or !.
 * @param {Number|Boolean} argument The argument to which the operation should be applied
 * @param {Object} metadata The SF metadata for the formula field being evaluated
 * @returns {Number|Boolean}
 * @private
 */
function processUnaryExpression(operator, argument, metadata) {
	switch(operator) {
		case "-":
			return argument * -1;
		case "!":
			return !argument;
		default:
			var unsupportedUnaryText = LabelUtils.getLabelByKey("msg_js_err_unsupported_unary")
				.replace("{0}", metadata.fullName)
				.replace("{1}", operator);
			throw new Error(unsupportedUnaryText);
	}
}

/**
 * Applies the specified binary operator to the specified arguments
 * @param {String} operator A binary operator
 * @param {Number | String | Boolean | Date} left The left argument
 * @param {Number | String | Boolean | Date} right The right argument
 * @param {Object} metadata The SF metadata for the formula field being evaluated
 * @returns {Number | String | Boolean | Date}
 * @private
 */
function processBinaryOp(operator, left, right, metadata) {
	switch (operator) {
		case "+":
			if (left instanceof Date) {
				// The number must be converted into days
				left.setUTCDate(left.getUTCDate() + right);
				return left;
			}
			return left + right;
		case "-":
			if (left instanceof Date) {
				if (right instanceof Date) {
					return Math.round((left - right) / 86400000);
				} else {
					left.setUTCDate(left.getUTCDate() - right);
					return left;
				}
			}
			return left - right;
		case "*":
			return left * right;
		case "/":
			// TODO: WORRY ABOUT UNIT SCALE
			return left / right;
		case "^":
			return Math.pow(left, right);
		case "==":
			// TODO: DATES CHECK ONLY DATE, DATETIMES CHECK BOTH
			if (left instanceof Date && right instanceof Date) {
				return (left.getFullYear() == right.getFullYear()) && (left.getMonth() == right.getMonth()) && (left.getDate() == right.getDate());
			}
			return left === right;
		case "!=":
			if (left instanceof Date && right instanceof Date) {
				return !((left.getFullYear() == right.getFullYear()) && (left.getMonth() == right.getMonth()) && (left.getDate() == right.getDate()));
			}
			return left !== right;
		case "<":
			return left < right;
		case ">":
			return left > right;
		case "<=":
			return left <= right;
		case ">=":
			return left >= right;
		case "&&":
			return left && right;
		case "||":
			return left || right;
		case "&":
			return left + right;
		default:
			var unsupportedBinaryText = LabelUtils.getLabelByKey("msg_js_err_unsupported_binary")
				.replace("{0}", metadata.fullName)
				.replace("{1}", operator);
			throw new Error(unsupportedBinaryText);
	}
}

},{"./Utils/DateUtils.js":18,"./Utils/IdUtils.js":19,"./Utils/LabelUtils.js":21,"./Utils/MetaDataUtils.js":22,"./Utils/NumberUtils.js":24,"./Utils/SettingsUtils.js":27,"esprima":39}],5:[function(require,module,exports){
/**
 * Created by jfeingold on 4/27/15.
 */
"use strict";

var numberUtils = require("./Utils/NumberUtils.js");
var settingsUtils = require("./Utils/SettingsUtils.js");
var constants = require("./Utils/JSQCConstants.js");
var dateUtils = require("./Utils/DateUtils.js");
var metaDataUtils = require("./Utils/MetaDataUtils.js");
var idUtils = require("./Utils/IdUtils.js");
var labelUtils = require("./Utils/LabelUtils.js");

module.exports = LineCalculator;

/**
 * An object that will perform the quote calculations at a line level
 * @param {QuoteCalculator} quoteCalculator The QuoteCalculator that created this object
 * @param {QuoteLineModel} lineItem The line on which calculations will be performed
 * @constructor
 */
function LineCalculator(quoteCalculator, lineItem) {
	this.parent = quoteCalculator;
	this.line = lineItem;
	this.line.listProductTotal = 0;
	this.line.customerProductTotal = 0;
	this.line.netProductTotal = 0;
	this.line.regularProductTotal = 0;
	this.specialDiscountRate = 0;
	this.prorateMultiplier = 1;
	this.unitPriceScale = numberUtils.setScale(settingsUtils.getUnitPriceScale() || 2, 0);
	this.subscription = lineItem.isSubscription;
	this.dynamicSubscription = this.subscription ? this.line.isDynamicSubscription : false;
	this.pricingMethod = lineItem.PricingMethod__c;
	this.partnerDiscountable = lineItem.isPartnerDiscountable;
	this.bundled = lineItem.Bundled__c;
	this.contractedPriceId = lineItem.ContractedPrice__c;
	this.specialPriceType = lineItem.SpecialPriceType__c;
}

LineCalculator.prototype = {
	/**
	 * Performs the line-level calculations
	 */
	calculate: function() {
		var parent = this.parent;
		var line = this.line;
		// Reset the line-level totals
		line.customerTotal = line.netTotal = line.listTotal = line.regularTotal = line.grossProfitAmount = 0;
		line.record[settingsUtils.getPrefix() + "NetTotal__c"] = 0;
		line.record[settingsUtils.getPrefix() + "PartnerTotal__c"] = 0;
		line.record[settingsUtils.getPrefix() + "ListTotal__c"] = 0;
		line.record[settingsUtils.getPrefix() + "CustomerTotal__c"] = 0;
		line.record[settingsUtils.getPrefix() + "RegularTotal__c"] = 0;
		var blockPriced = this.pricingMethod === constants.PRICING_METHOD_BLOCK;
		// IF THE PRODUCT IS BLOCK-PRICED, DEAL WITH THAT
		if (blockPriced) {
			setBlockPrice(this);
		}

		if (line.ListPrice__c == null) {
			return;
		}

		// Enforce minimum and maximum pricing
		// i.e. list price cannot be less than minimum price, or greater than maximum price
		if ((line.MinimumPrice__c != null) && (line.ListPrice__c < line.MinimumPrice__c)) {
			line.ListPrice__c = line.MinimumPrice__c;
		} else if ((line.MaximumPrice__c != null) && (line.ListPrice__c > line.MaximumPrice__c)) {
			line.ListPrice__c = line.MaximumPrice__c;
		}

		// Set Line-Level Start and End Dates for fixed time-based segments
		var dimType = line.dimType;
		if (dimType === constants.TYPE_YEARLY_DIMENSION || dimType === constants.TYPE_QUARTERLY_DIMENSION || dimType === constants.TYPE_MONTHLY_DIMENSION) {
			line.StartDate__c = line.effectiveStartDate;
			line.EndDate__c = line.effectiveEndDate;
		}

		// If this is a subscription item, calculate the prorate multiplier
		if (this.subscription) {
			calculateProrateMultiplier(this);
		}
		// Set the line's proratedListPrice to its listPrice * prorate multiplier, with the scale half-up rounded
		var proratedListPrice = line.ListPrice__c * this.prorateMultiplier;
		proratedListPrice = numberUtils.setScale(proratedListPrice, this.unitPriceScale);
		line.ProratedListPrice__c = proratedListPrice;

		if (line.isVolumeDiscounted) {
			var dSchedule = parent.getDiscountScheduleById(line.DiscountSchedule__c);
			computeAndSetPriorQuantity(dSchedule, this);
		} else if (line.hasCostSchedule) {
			var cSchedule = parent.getDiscountScheduleById(line.costScheduleId);
			computeAndSetPriorQuantity(cSchedule, this);
			applyCostSchedule(this);
		}

		// Apply the various types of discounts in the order specified on the item
		if (line.parentQuote.applyPartnerDiscountFirst) {
			applyPartnerDiscount(this);
			calculateSpecialPrice(this);
			applyProration(this);
			applyDiscountSchedule(this);
			applyUplift(this);
			applyAdditionalDiscount(this);
			applyDistributorDiscount(this);
		} else {
			calculateSpecialPrice(this);
			applyProration(this);
			applyDiscountSchedule(this);
			applyUplift(this);
			if (line.parentQuote.applyAdditionalDiscountLast) {
				applyPartnerDiscount(this);
				applyDistributorDiscount(this);
				applyAdditionalDiscount(this);
			} else {
				applyAdditionalDiscount(this);
				applyPartnerDiscount(this);
				applyDistributorDiscount(this);
			}
		}

		var effectiveQty = line.effectiveQuantity;
		var qty = line.Quantity__c;
		if (!this.bundled) {
			line.customerTotal = numberUtils.setScale(effectiveQty * line.CustomerPrice__c, 2);
			line.record[settingsUtils.getPrefix() + "CustomerTotal__c"] = line.customerTotal;
			line.netTotal = (line.Renewal__c === true && !line.Existing__c && line.PriorQuantity__c == null)
				? 0
				: numberUtils.setScale(effectiveQty * line.NetPrice__c, 2);

			line.record[settingsUtils.getPrefix() + "NetTotal__c"] = line.netTotal;
			line.partnerTotal = numberUtils.setScale(effectiveQty * line.PartnerPrice__c, 2);
			line.record[settingsUtils.getPrefix() + "PartnerTotal__c"] = line.partnerTotal;
			line.regularTotal = numberUtils.setScale(effectiveQty * line.RegularPrice__c, 2);
			line.record[settingsUtils.getPrefix() + "RegularTotal__c"] = line.regularTotal;
			line.listTotal = numberUtils.setScale((blockPriced ? 1 : qty) * line.ProratedListPrice__c, 2);
			line.record[settingsUtils.getPrefix() + "ListTotal__c"] = line.listTotal;
			if (!blockPriced) {
				var cost = line.UnitCost__c;
				line.grossProfitAmount = (cost == null) ? null : (line.NetPrice__c - cost) * qty;
			}
		}
		if((!this.subscription || line.isIncludedInMaintenance) && !this.bundled) {
			effectiveQty = (line.parentQuote.isRenewal) ? qty : effectiveQty;
			if (line.DiscountScheduleType__c == 'Slab' || blockPriced) {
				effectiveQty = (line.parentQuote.isAmendment
				&& ((line.actualQuantity == 0 && line.isSubscription)
				|| (line.actualQuantity <= 0 && !line.isSubscription)))
					? 0 : 1;
			}
			var subscriptionTargetPrice = line.SubscriptionTargetPrice__c;
			// var listProductQty = blockPriced ? 1 : effectiveQty;
			var listProductQty = blockPriced ? 1 : ((line.DiscountScheduleType__c == "Slab" && !line.parentQuote.isAmendment) ? qty :effectiveQty);
			var listProductPrice = (subscriptionTargetPrice != null) ?
				(subscriptionTargetPrice * this.prorateMultiplier) :
				line.ProratedListPrice__c;
			line.listProductTotal = listProductQty * listProductPrice;
			line.customerProductTotal = effectiveQty * line.CustomerPrice__c;
			line.netProductTotal = effectiveQty * line.NetPrice__c;
			line.regularProductTotal = effectiveQty * line.RegularPrice__c;
			// If the item is a subscription, normalize the term
			if (this.subscription) {
				var linePM = line.ProrateMultiplier__c;
				if ((linePM != null) && (linePM !== 0)) {
					line.listProductTotal /= linePM;
					line.customerProductTotal /= linePM;
					line.netProductTotal /= linePM;
					line.regularProductTotal /= linePM;
				}
			}
		}
	}
};

/**
 * Sets the block price and applies a discount schedule if there is one
 * @param {LineCalculator} lc The line calculator being run
 * @private
 */
function setBlockPrice(lc) {
	var line = lc.line;
	if (line.blockPricingField != null && line.blockPricingField != 'Quantity') {
		var blockPricingFieldName = metaDataUtils.getField(metaDataUtils.getObjectType(line), line.blockPricingField);
		var customQuantity = line.record[blockPricingFieldName];
		line.ListPrice__c = calculateBlockPrice(line, customQuantity, true);
	} else if (line.parentQuote.isAmendment) {
		// Determine block price based on prior quantity
		var priorBlockPrice = calculateBlockPrice(line, line.PriorQuantity__c, false) || 0;
		if (line.Quantity__c > 0) {
			// Price on amendment is the difference between prior block price and new block price
			line.ListPrice__c = calculateBlockPrice(line, line.Quantity__c, true) - priorBlockPrice;
		} else {
			line.ListPrice__c = priorBlockPrice * -1;
		}
	} else {
		var blockPrice = calculateBlockPrice(line, line.Quantity__c, true);
		if (blockPrice == null) {
			var errorText = labelUtils.getLabelByKey('msg_no_block_price_for_quantity').replace("{0}", line.Product__c);
			throw new Error(errorText);
		}
		line.ListPrice__c = blockPrice;
	}
}

/**
 * Determines the block-price of a given line, taking into account overage if indicated.
 * @param {QuoteLineModel} line The line to check for block prices
 * @param {Number} quantity The quantity against which block prices should be compared
 * @param {Boolean} setBlockPriceId If true, then the quote line's record has its BlockPrice__c attribute set
 * @returns {Number} Price of the found block price, including overage. If no block price found, returns null
 * @private
 */
function calculateBlockPrice(line, quantity, setBlockPriceId) {
	if (line.Product__r != null) {
		var currencyCode = settingsUtils.isMultiCurrencyOrg() ? line.parentQuote.record["CurrencyIsoCode"] : null;
		var isVolumeDiscounted = line.isVolumeDiscounted;
		var bPrice = line.getBlockPriceByQuantity(quantity, currencyCode, isVolumeDiscounted);
		if (bPrice != null) {
			var overage = 0;
			var overageField = settingsUtils.getOverageRateFieldName();
			var overageRate = overageField != null ? bPrice[overageField] : null;
			if (overageRate != null) {
				overage = overageRate * (quantity - bPrice[line.prefix + "LowerBound__c"]);
			}
			if (setBlockPriceId === true) {
				line.BlockPrice__c = bPrice.Id;
			}
			return bPrice[line.prefix + "Price__c"] + overage;
		}
	}
	return null;
}

/**
 * Calculates the multiplier for prorating a partial-term subscription.
 * @param {LineCalculator} lc The line calculator object whose prorateMultiplier property should be set.
 * @private
 */
function calculateProrateMultiplier(lc) {
	if (lc.subscription) {
		var startDate = lc.line.effectiveStartDate;
		var endDate = lc.line.effectiveEndDate;
		var dividend;
		var divisor;
		if ((startDate != null) && (endDate != null)) {
			var fullTermEndDate = new Date(startDate.getTime());
			if (settingsUtils.subscriptionTermUnitIsDay()) {
				fullTermEndDate.setUTCDate(fullTermEndDate.getUTCDate() + Math.floor(lc.line.defaultTerm));
			} else {
				fullTermEndDate.setUTCMonth(fullTermEndDate.getUTCMonth() + Math.floor(lc.line.defaultTerm));
			}
			// Entered end date is inclusive. Convert to exclusive by adding 1 day
			endDate.setUTCDate(endDate.getUTCDate() + 1);
			var divByZeroMsg = labelUtils.getLabelByKey("msg_js_err_prorate_divide_by_zero");
			if (settingsUtils.subscriptionProratePrecision() === "month") {
				// Check that the number of months in the full term is not zero
				dividend = dateUtils.monthsBetween(startDate, endDate);
				divisor = dateUtils.monthsBetween(startDate, fullTermEndDate);
				if (divisor !== 0) {
					lc.prorateMultiplier = dividend / divisor;
				} else {
					throw new Error(divByZeroMsg);
				}
			} else if (settingsUtils.subscriptionProratePrecision() === "month+day") {
				// Calculate whole months between start and end date
				var monthsBetween = dateUtils.monthsBetween(startDate, endDate);
				// Add whole months to start date
				var monthsAdd = new Date(startDate);
				monthsAdd.setUTCMonth(monthsAdd.getUTCMonth() + monthsBetween);
				// Check for a rounding error where this result is after the end date which causes the remainder to be negative, then subtract a month
				if (monthsAdd > endDate) {
					monthsAdd.setUTCMonth(monthsAdd.getUTCMonth() - 1);
					monthsBetween--;
				}
				// Calculate the difference in days between the two days
				var remainder = dateUtils.daysBetween(monthsAdd, endDate);
				// Convert to months
				remainder = remainder / (365.0 / 12.0);
				// Add remainder to whole months between
				dividend = monthsBetween + remainder;
				divisor = dateUtils.monthsBetween(startDate, fullTermEndDate);
				if (divisor !== 0) {
					lc.prorateMultiplier = dividend / divisor;
				} else {
					throw new Error(divByZeroMsg);
				}
			} else {
				dividend = dateUtils.daysBetween(startDate, endDate);
				divisor = dateUtils.daysBetween(startDate, fullTermEndDate);
				if (divisor !== 0) {
					lc.prorateMultiplier = dividend / divisor;
				} else {
					throw new Error(divByZeroMsg);
				}
			}
		} else {
			var lineTerm = lc.line.effectiveSubscriptionTerm;
			if (lineTerm != null) {
				lc.prorateMultiplier = lineTerm / lc.line.defaultTerm;
			}
		}
	}
}

/**
 * Determines the special price of a line, which can include its contracted price, markup, option discounts,
 * or 0 for a bundled option
 * @param {LineCalculator} lc The line calculator that calls this function passes itself as a parameter
 * @private
 */
function calculateSpecialPrice(lc) {
	var line = lc.line;
	if (lc.bundled) {
		line.SpecialPrice__c = 0;
		return;
	}

	if (line.isPricingMethodCost) {
		var cost = line.UnitCost__c;
		if (cost == null) {
			cost = 0;
		}
		line.SpecialPrice__c = cost + calculateMarkup(line);
	} else {
		if ((lc.contractedPriceId != null || lc.specialPriceType != null) && line.SpecialPrice__c != null) {
			// If contracted price not blank, special price is calculated on add (except for dynamic subscriptions)
			// When special price type is renewal, the special price is set on add
			// In neither case should it be overwritten.
			var listPrice = line.ListPrice__c;
			lc.specialDiscountRate = ((listPrice != null) && (listPrice != 0) && (line.SpecialPrice__c != null))
				? (1 - (line.SpecialPrice__c / listPrice))
				: 0;
			return;
		}

		// Default behavior is to set Special Price to List Price.
		// Unless 'Apply Partner Discount First' is flagged, in which case default is Partner Price
		var specialPrice = (line.parentQuote.applyPartnerDiscountFirst) ? line.PartnerPrice__c : line.ListPrice__c;

		// Apply option discount on top, if any exists, but only do so if there is no contracted price
		if ((specialPrice != null) && (lc.contractedPriceId == null)) {
			if (line.OptionDiscount__c != null) {
				specialPrice *= (1 - (line.OptionDiscount__c / 100));
			} else if (line.OptionDiscountAmount__c != null) {
				specialPrice -= line.OptionDiscountAmount__c;
			}
		}
		line.SpecialPrice__c = specialPrice;
	}
}

/**
 * Calculates the markup of a given quote line
 * @param {QuoteLineModel} line The quote line for which the markup should be calculated
 * @returns {Number} The cost after markup
 * @private
 */
function calculateMarkup(/*QuoteLineModel*/ line) {
	if (line.MarkupAmount__c != null) {
		return line.MarkupAmount__c;
	}
	var cost = (line.UnitCost__c != null) ? line.UnitCost__c : 0;
	var rate = (line.parentQuote.MarkupRate__c != null) ? line.parentQuote.MarkupRate__c : 0;
	if ((line.parentGroup != null) && (line.parentGroup.record[line.prefix + "MarkupRate__c"] != null)) {
		rate = line.parentGroup.record[line.prefix + "MarkupRate__c"];
	}
	rate = (line.MarkupRate__c != null) ? line.MarkupRate__c : rate;
	return cost * (rate / 100);
}

/**
 * Applies the proration modifier to the line represented by the line calculator
 * @param {LineCalculator} lc The LineCalculator that calls this function passes itself as an argument
 * @private
 */
function applyProration(lc) {
	var line = lc.line;
	var proratedPrice = null;
	// If the partner discount was applied first, use it for the prorated price
	if (line.parentQuote.applyPartnerDiscountFirst === true) {
		proratedPrice = numberUtils.setScale(line.PartnerPrice__c * ( 1 - lc.specialDiscountRate), lc.unitPriceScale);
	} else {
		// If not, use the special price
		proratedPrice = numberUtils.setScale(line.SpecialPrice__c * lc.prorateMultiplier, lc.unitPriceScale);
	}
	line.ProratedPrice__c = proratedPrice;
	if (line.renewalPrice != null) {
		// If the item has a renewal price, prorate it.
		lc.proratedRenewalPrice = numberUtils.setScale(line.renewalPrice * lc.prorateMultiplier, lc.unitPriceScale);
	}
	// Set the prorate multiplier on the line-level
	line.ProrateMultiplier__c = lc.prorateMultiplier;
}

/**
 * Computes the prior quantity of the line represented by the line calculator, in accordance with the specifications
 * laid out by the given discount schedule
 * @param {DiscountScheduleModel} dSchedule A discount schedule that can indicate alternate calculations for prior quantity
 * @param {LineCalculator} lc The LineCalculator representing a quote line
 * @private
 */
function computeAndSetPriorQuantity(dSchedule, lc) {
	var line = lc.line;
	var quoteModel = line.parentQuote;
	// If the quote is an amendment, but this line isn't a subscribed asset, reset its prior quantity
	if (!quoteModel.isAmendment && !line.isFromSubscribedAsset) {
		line.PriorQuantity__c = null;
	}
	if (!quoteModel.isAmendment && dSchedule.isCrossOrder() && line.RenewedAsset__c == null && (!lc.subscription || !quoteModel.isRenewal)) {
		// Look at assets only if Cross Orders is on, and this line is neither a renewed asset
		// nor a subscription on a renewal quote.
		// REASONING: Quantity for renewed assets is whatever is on the quote line. It defaults from
		// the asset and it's read-only, so it should be the same as the asset.
		// Quantity for renewed subscriptions is whatever is on the quote. It doesn't make sense to add
		// that up with prior.
		var accountModel = lc.parent.getAccountById(quoteModel.Account__c);
		if (accountModel != null) {
			var constraintField = dSchedule.constraintField;
			var quoteConstraintField = metaDataUtils.getField(metaDataUtils.getObjectType(quoteModel), constraintField);
			var constraintValue = constraintField == null ? null : quoteModel.record[constraintField];
			if (constraintValue == null) {
				constraintValue = '';
			}
			// If the discount schedule is both Cross Orders and Cross Product, we need to get the summaries of
			// assets and subscriptions of the other products that share this discount schedule, in addition
			// to this product.
			var apq;
			var spq;
			if (dSchedule.isCrossProduct()) {
				var pIds = dSchedule.productIds || [];
				apq = accountModel.getAssetPriorQuantity(pIds, constraintField, quoteConstraintField, constraintValue);
				spq = accountModel.getSubscriptionPriorQuantity(pIds, constraintField, quoteConstraintField, constraintValue);
				line.PriorQuantity__c = apq + spq;
			} else {
				apq = accountModel.getAssetPriorQuantity([line.Product__c], constraintField, quoteConstraintField, constraintValue);
				spq = accountModel.getSubscriptionPriorQuantity([line.Product__c], constraintField, quoteConstraintField, constraintValue);
				line.PriorQuantity__c = apq + spq;
			}
		}
	}
}

/**
 * Returns the quantity value of the provided line that will be used by the provided discount. This value may or may not
 * be a custom field.
 * @param {DiscountScheduleModel} schedule The discount schedule being applied
 * @param {QuoteLineModel} line The line being discounted
 * @returns {Number}
 * @private
 */
function retrieveLocalQuantity(schedule, line) {
	// If the Discount Schedule uses a custom field in place of quantity, use that field instead
	var lineQuantity;
	var fieldName = schedule.record[settingsUtils.getPrefix() + "QuoteLineQuantityField__c"];
	if (fieldName != null && fieldName.toLowerCase() != 'quantity') {
		var field = metaDataUtils.getField(metaDataUtils.getObjectType(line), fieldName);
		lineQuantity = line.record[field];
	} else {
		lineQuantity = line.Quantity__c;
	}
	return lineQuantity;
}

/**
 * Returns the quantity value that the provided discount schedule will use, summed across all lines covered by that discount.
 * @param {DiscountScheduleModel} schedule The discount schedule being applied
 * @param {Map<String, Decimal>} overrideQSI Allows an alternative QSI to be used. If null, the QuantitySumIndex will be used.
 * @param {LineCalculator} lc The LineCalculator currently applying this discount
 * @returns {Number}
 * @private
 */
function retrieveGlobalQuantity(schedule, overrideQSI, lc) {
	var line = lc.line;
	var qsi;
	if (overrideQSI != null) {
		qsi = overrideQSI;
	} else if (schedule.isIncludeBundled()) {
		qsi = lc.parent.quantitySumIndexIncludingBundled;
	} else {
		qsi = lc.parent.quantitySumIndex;
	}
	var quoteModel = line.parentQuote;
	var key;
	var qid = quoteModel.Id;
	var sid = idUtils.convertTo18(schedule.getId());
	var pid = idUtils.convertTo18(line.Product__c);
	if (schedule.isAggregatedWithinGroup() && (line.parentGroup != null)) {
		// If schedule aggregates by group, and the line's parent group is not null, aggregate in the group.
		// If crossProduct is on, get the quantity sum of all products with the schedule id key
		// If crossProduct is off, use only the quantity of this product.
		var gsik = qid + "_" + line.parentGroup.key + "_" + sid;
		var gspk = gsik + "_" + pid;
		key = schedule.isCrossProduct() ? gsik : gspk;
		return qsi[key] || 0;
	} else if (schedule.isAggregatedWithinQuote() || schedule.isAggregatedWithinGroup()) {
		// If schedule aggregates by quote, or by group on an ungrouped quote, aggregate on the quote.
		// If crossProduct is on, get the quantity sum of all products with the schedule id key
		// If crossProduct is off, use only the quantity of this product.
		var sik = qid + "_" + sid;
		var spk = sik + "_" + pid;
		key = schedule.isCrossProduct() ? sik : spk;
		return qsi[key] || 0;
	}
}

/**
 * Calculates the volume discount of the given line on a non-amendment quote
 * @param {DiscountScheduleModel} schedule The discount schedule being applied
 * @param {LineCalculator} lc The LineCalculator representing the quote line being discounted
 * @param {Number} price The price to which the discount is being applied
 * @param {Boolean} isCostSchedule True if this discount schedule is Cost-Based
 * @returns {Number}
 */
function retrieveNonAmendmentPrice(schedule, lc, price, isCostSchedule) {
	var result;
	var blockPriced = lc.pricingMethod === constants.PRICING_METHOD_BLOCK;
	var line = lc.line;
	var quoteModel = line.parentQuote;
	// If the Discount Schedule uses a custom field in place of quantity, use that instead
	var lineQuantity = retrieveLocalQuantity(schedule, line) || 0;

	// Optional items are discounted based on their own quantity only
	var totalQty = line.Optional__c === true ? null : (isCostSchedule ? retrieveGlobalQuantity(schedule, lc.parent.quantitySumIndexForCostSchedules, lc) : retrieveGlobalQuantity(schedule, null, lc));
	totalQty = totalQty || lineQuantity;

	var volumeQty;
	if (schedule.usesCustomQuantity()) {
		volumeQty = totalQty;
	} else {
		// Seems there are use cases for rigging renewed asset quantity, so count Additional Quantity
		volumeQty = totalQty + (line.PriorQuantity__c || 0) + (line.AdditionalQuantity__c || 0);
	}

	// Revised assets on a Renewal should calculate volume discount tiers using the whole quantity
	if (quoteModel.isRenewal && !line.isSubscription && (line.Existing__c === true)) {
		volumeQty = lineQuantity;
	}

	var vDiscount;
	if (!lc.bundled) {
		// Allocate Slab Discount proportionally to this line, since total quantity might be aggregated across multiple lines
		if (!blockPriced) {
			// Calculate volume discount WITHOUT considering spillover from block pricing
			vDiscount = schedule.computeDiscount(volumeQty, lineQuantity, price, quoteModel.CurrencyIsoCode);
			if ((vDiscount != null) && schedule.isDiscountUnitAmount()) {
				// Apply prorate multiplier to amount-based discounts
				vDiscount = numberUtils.setScale(vDiscount * lc.prorateMultiplier, lc.unitPriceScale);
			}
			// Calculate the actual result from the volume discount
			result = line.DiscountScheduleType__c == "Slab" ? (price * lineQuantity) : price;
			result = result - (vDiscount || 0);
		} else if (!isCostSchedule) {
			// Calculate volume discount considering spillover from block pricing.  (Doesn't apply for cost schedules.)
			var spilloverQty = spilloverQuantity(schedule, line, true);
			var proratedOriginalPrice = (line.DiscountScheduleType__c == "Slab" && schedule.isDiscountUnitAmount() && line.PriorQuantity__c != null) ? line.OriginalPrice__c : numberUtils.setScale(line.OriginalPrice__c * lc.prorateMultiplier, lc.unitPriceScale);
			if (spilloverQty > 0) {
				if ((line.PriorQuantity__c || 0) == 0) {
					vDiscount = schedule.computeDiscount(volumeQty, lineQuantity, proratedOriginalPrice, quoteModel.CurrencyIsoCode);
				} else {
					vDiscount = schedule.computeDiscount(volumeQty, spilloverQty, proratedOriginalPrice, quoteModel.CurrencyIsoCode);
				}
			} else {
				if (blockPriced) {
					vDiscount = schedule.computeDiscount(lineQuantity, lineQuantity, price, quoteModel.CurrencyIsoCode);
				} else {
					vDiscount = schedule.computeDiscount(volumeQty, lineQuantity, price, quoteModel.CurrencyIsoCode);
				}
			}
			vDiscount = (vDiscount || 0);
			if ((vDiscount != null) && schedule.isDiscountUnitAmount()) {
				// Apply prorate multiplier to amount-based discounts
				vDiscount = numberUtils.setScale(vDiscount * lc.prorateMultiplier, lc.unitPriceScale);
			}
			// Calculate the actual result from the volume discount
			if (spilloverQty > 0 && schedule.isDiscountTypeSlab() && (line.PriorQuantity__c || 0) == 0) {
				result = price + (spilloverQty * proratedOriginalPrice) - vDiscount;
			} else if (spilloverQty > 0 && !schedule.isDiscountTypeSlab()) {
				result = price + spilloverQty * (proratedOriginalPrice - vDiscount);
			} else {
				result = price - vDiscount;
			}
		}
	} else {
		result = 0;
		vDiscount = 0;
	}

	if (!isCostSchedule) {
		line.DiscountTier__c = schedule.getTierIdForQuantity(volumeQty, quoteModel.CurrencyIsoCode);
		line.VolumeDiscount__c = vDiscount;
	}

	return result;
}

/**
 * Returns the quantity outside of the final block tier
 * @param {DiscountScheduleModel} schedule The schedule being applied to the product
 * @param {QuoteLineModel} line The line being discounted
 * @param {Boolean} isCurrentQuantity means the calculation is for the current line quantity instead of prior quantity
 * @returns {Number}
 * @private
 */
 function spilloverQuantity(schedule, line, isCurrentQuantity) {
	var priorQuantity = line.PriorQuantity__c || 0;
	var lineQuantity = line.Quantity__c;
	var isAmendment = line.parentQuote.isAmendment;
	var priorBlockPriceUpperBound;
	var isPriorQuantityBeyondBlockTiers;
	var isActualQuantityPositive = line.actualQuantity >= 0;
	var isCrossOrder = schedule.isCrossOrder();
	var nonAmendmentQuantity = lineQuantity + priorQuantity;
	var result = 0;

	var priorBlockPrice = line.getBlockPriceByQuantity(priorQuantity, line.parentQuote.CurrencyIsoCode, true);
	if (priorBlockPrice != null) {
		priorBlockPriceUpperBound = priorBlockPrice[line.prefix + "UpperBound__c"];
		isPriorQuantityBeyondBlockTiers = (priorQuantity >= priorBlockPrice[line.prefix + "UpperBound__c"]);
	}

	var nowBlockPriceQuantity = isAmendment ? lineQuantity : nonAmendmentQuantity;
	var nowBlockPrice = line.getBlockPriceByQuantity(nowBlockPriceQuantity, line.parentQuote.CurrencyIsoCode, true);
	if (nowBlockPrice != null) {
		var isLineQuantityBeyondBlockTiers = (lineQuantity >= nowBlockPrice[line.prefix + "UpperBound__c"]);
		var nowBlockPriceUpperBound = nowBlockPrice[line.prefix + "UpperBound__c"];
		var isTotalQuantityBeyondBlockTiers = (nonAmendmentQuantity >= nowBlockPrice[line.prefix + "UpperBound__c"]);

		if (!isAmendment && !isTotalQuantityBeyondBlockTiers || (isAmendment && line.actualQuantity == 0) || nowBlockPriceUpperBound == null)  {
			result = 0;
		} else if (isActualQuantityPositive) {
			if (isAmendment && !isCrossOrder && isLineQuantityBeyondBlockTiers && isPriorQuantityBeyondBlockTiers) {
				result = lineQuantity - priorQuantity;
			} else if (isLineQuantityBeyondBlockTiers && isCurrentQuantity) {
				result = lineQuantity - nowBlockPriceUpperBound + 1;
			} else if (priorBlockPrice != null && isPriorQuantityBeyondBlockTiers && isLineQuantityBeyondBlockTiers) {
				result = priorQuantity - nowBlockPriceUpperBound + 1;
			}
		} else {
			if (isLineQuantityBeyondBlockTiers && isCurrentQuantity) {
				result = lineQuantity - priorBlockPriceUpperBound + 1;
			} else if (isPriorQuantityBeyondBlockTiers && !isCurrentQuantity) {
				result = priorQuantity - priorBlockPriceUpperBound + 1;
			}
		}
	}
	if (isAmendment && lineQuantity == 0 && isPriorQuantityBeyondBlockTiers && !isCurrentQuantity) {
		result = priorQuantity - priorBlockPriceUpperBound + 1;
	}
	return result;
 }

/**
 * Returns the discountable quantity of an amended line. This is
 * @param {DiscountScheduleModel} schedule The schedule being applied
 * @param {QuoteLineModel} line The line being discounted
 * @param {LineCalculator} lc The LineCalculator currently operating
 * @returns {Number}
 * @private
 */
function computeAmendmentVolumeQuantity(schedule, line, lc) {
	// TODO: WE NEED TO USE CUSTOM QUANTITY FIELDS HERE. FIGURE OUT SOME WAY TO DO THAT.
	var volumeQty = line.Quantity__c;

	// If decreasing quantity, credit back based on original discount tier
	if (line.actualQuantity < 0) {
		if (schedule.isCrossProduct()) {
			volumeQty = retrieveGlobalQuantity(schedule, lc.parent.priorQuantitySumIndex, lc);
		} else {
			volumeQty = line.PriorQuantity__c;
		}
	}
	// If increasing quantity, behavior depends on cross-order flag
	else {
		if (schedule.isCrossOrder()) {
			if (schedule.isCrossProduct()) {
				volumeQty = retrieveGlobalQuantity(schedule, null, lc);
			} else {
				return volumeQty;
			}
		} else {
			if (schedule.isCrossProduct()) {
				volumeQty = retrieveGlobalQuantity(schedule, lc.parent.actualQuantitySumIndex, lc);
			} else {
				volumeQty = line.actualQuantity;
			}
		}
	}
	return volumeQty;
}

/**
 * Returns an object that contains the Tier ID, Discount, and Price information corresponding to the computed discount
 * @param {DiscountScheduleModel} schedule The discount schedule being applied
 * @param {Number} price The price being discounted
 * @param {LineCalculator} lc The LineCalculator currently operating
 * @returns {Object} An object with the attributes 'tierId', 'discount', and 'price'
 * @private
 */
function retrieveSlabAmendmentScheduleInfo(schedule, price, lc) {
	var line = lc.line;
	var priorQuantity = line.PriorQuantity__c || 0;
	var priorDiscount;
	var priorPrice;
	var nowQuantity = line.Quantity__c || 0;
	var nowDiscount;
	var nowPrice;
	var amendmentScheduleInfo = {};
	var currencyCode = line.parentQuote.CurrencyIsoCode;
	var blockPriced = lc.pricingMethod === constants.PRICING_METHOD_BLOCK;
	var proratedOriginalPrice = numberUtils.setScale(line.OriginalPrice__c * lc.prorateMultiplier, lc.unitPriceScale);
	var lowestBound = schedule.getLowestBound(currencyCode);

	var priorSpilloverQuantity;
	var nowSpilloverQuantity;
	if (!lc.bundled) {
		if (blockPriced) {
			priorSpilloverQuantity = spilloverQuantity(schedule, line, false);
			nowSpilloverQuantity = spilloverQuantity(schedule, line, true);
		}

		if (!line.isSubscription && line.Quantity__c == 0 && !blockPriced) {
			// Item is an Asset on an Amendment that has been de-selected and zeroed out. Calculate price according to
			// prior quantity so that PoT subs will not be affected.
			priorDiscount = schedule.computeDiscount(line.PriorQuantity__c, line.PriorQuantity__c, price, currencyCode);
			priorPrice = (price * line.PriorQuantity__c) - priorDiscount;
			amendmentScheduleInfo['tierId'] = schedule.getTierIdForQuantity(line.PriorQuantity__c, currencyCode);
			amendmentScheduleInfo['discount'] = priorDiscount;
			amendmentScheduleInfo['price'] = priorPrice;
		} else if (schedule.isCrossOrder() || line.actualQuantity <= 0) {
			// For Slab discounting and amendments, calculate price as new price - previous price
			priorDiscount = schedule.computeDiscount(line.PriorQuantity__c, line.PriorQuantity__c, price, currencyCode) || 0;
			nowDiscount = schedule.computeDiscount(line.Quantity__c, line.Quantity__c, price, line.parentQuote.CurrencyIsoCode) || 0;

			if (blockPriced) {
				if (line.PriorQuantity__c >= lowestBound && priorSpilloverQuantity > 0) {
					priorDiscount = schedule.computeDiscount(line.PriorQuantity__c, line.PriorQuantity__c, proratedOriginalPrice, currencyCode) || 0;
				}
				if (line.Quantity__c >= lowestBound && nowSpilloverQuantity > 0) {
					nowDiscount = schedule.computeDiscount(line.Quantity__c, line.Quantity__c, proratedOriginalPrice, line.parentQuote.CurrencyIsoCode) || 0;
				}
				priorPrice = (proratedOriginalPrice * priorSpilloverQuantity) - priorDiscount;
				nowPrice = line.actualQuantity != 0 ? (proratedOriginalPrice * nowSpilloverQuantity) - nowDiscount : 0;
			} else {
				priorPrice = (price * priorQuantity) - priorDiscount;
				nowPrice = (price * nowQuantity) - nowDiscount;
			}
			nowPrice = (blockPriced) ? nowPrice + price : nowPrice;
			amendmentScheduleInfo['tierId'] = schedule.getTierIdForQuantity(line.Quantity__c, currencyCode);
			amendmentScheduleInfo['discount'] = nowDiscount;
			amendmentScheduleInfo['price'] = (line.actualQuantity != 0) ? nowPrice - priorPrice : nowPrice;
		} else {
			// If Discount Schedule is not cross-order, ignore prior quantity when determining the tier
			nowDiscount = schedule.computeDiscount(line.actualQuantity, line.actualQuantity, price, line.parentQuote.CurrencyIsoCode) || 0;

			if (blockPriced) {
				if (line.actualQuantity >= lowestBound && nowSpilloverQuantity > 0) {
					nowDiscount = schedule.computeDiscount(line.actualQuantity, line.actualQuantity, proratedOriginalPrice, line.parentQuote.CurrencyIsoCode) || 0;
				} else if (line.actualQuantity < lowestBound) {
					nowDiscount = 0;
				}
				nowPrice = (proratedOriginalPrice * nowSpilloverQuantity) - nowDiscount + price;
			} else {
				nowPrice = (price * line.actualQuantity) - nowDiscount;
			}
			amendmentScheduleInfo['tierId'] = schedule.getTierIdForQuantity(line.Quantity__c, currencyCode);
			amendmentScheduleInfo['discount'] = nowDiscount;
			amendmentScheduleInfo['price'] = nowPrice;
		}
	} else {
		amendmentScheduleInfo['tierId'] = schedule.getTierIdForQuantity(line.Quantity__c, currencyCode);
		amendmentScheduleInfo['discount'] = 0;
		amendmentScheduleInfo['price'] = 0;
	}
	return amendmentScheduleInfo;
}

/**
 * Applies a cost-based discount schedule to the line represented by the given LineCalculator
 * @param {LineCalculator} lc Represents the line being discounted
 * @private
 */
function applyCostSchedule(lc) {
	var line = lc.line;
	var cSchedule = lc.parent.getDiscountScheduleById(line.costScheduleId);
	var quoteModel = line.parentQuote;
	var costDiscount;
	var originalUnitCost = line.OriginalUnitCost__c || 0;
	if (!quoteModel.isAmendment) {
		line.UnitCost__c = retrieveNonAmendmentPrice(cSchedule, lc, originalUnitCost, true);
	} else if (quoteModel.isAmendment && !cSchedule.isDiscountTypeSlab()) {
		var volumeQty = computeAmendmentVolumeQuantity(cSchedule, line, lc);
		costDiscount = cSchedule.computeDiscount(volumeQty, line.actualQuantity, originalUnitCost, quoteModel.CurrencyIsoCode);
		line.UnitCost__c = originalUnitCost - costDiscount ;
	} else if (quoteModel.isAmendment && cSchedule.isDiscountTypeSlab()) {
		costDiscount = retrieveSlabAmendmentScheduleInfo(cSchedule, originalUnitCost, lc)["price"];
		line.UnitCost__c = costDiscount;
	}
}

/**
 * Applies quantity and term discounts to the quote line
 * @param {LineCalculator} lc The line calculator passes itself as a parameter
 * @private
 */
function applyDiscountSchedule(lc) {
	// Use the prorated price as the base
	var line = lc.line;
	var quoteModel = line.parentQuote;
	var price = line.ProratedPrice__c || 0;
	var currencyCode = quoteModel.CurrencyIsoCode;
	line.RegularPrice__c = price;

	// If the line has a compound discount rate, apply it to the price.
	if (line.CompoundDiscountRate__c != null) {
		var qty = line.Quantity__c || 0;
		price *= (1 / (Math.pow(qty, line.CompoundDiscountRate__c / 100)));
	} else if (line.isVolumeDiscounted) {
		price = applyVolumeDiscount(lc, price);
	}

	// If the item has a term discount, that must be applied on top of anything we've already done.
	if (lc.subscription && line.isTermDiscounted) {
		var tSchedule = lc.parent.getDiscountScheduleById(line.TermDiscountSchedule__c);
		var termLevel = line.termDiscountLevel || 'Line';
		var term = null;
		if (termLevel.toLowerCase() === "group" && line.parentGroup != null) {
			term = line.parentGroup.calculatedSubscriptionTerm;
		} else if (termLevel.toLowerCase() === "quote") {
			term = line.parentQuote.calculatedSubscriptionTerm;
		}
		if (term == null) {
			term = line.effectiveSubscriptionTerm;
		}
		line.TermDiscountTier__c = tSchedule.getTierIdForQuantity(term, currencyCode);
		line.TermDiscount__c = tSchedule.computeDiscount(term, null, price, currencyCode);
		if ((line.TermDiscount__c != null) && tSchedule.isDiscountUnitAmount()) {
			// Apply prorate multiplier to amount-based discounts
			line.TermDiscount__c = line.TermDiscount__c * lc.prorateMultiplier;
		}
		if (price != null && line.TermDiscount__c != null) {
			price -= line.TermDiscount__c;
		}
	}
	// If the above operations have produced a non-null value for price, set that as the regular price.
	line.RegularPrice__c = price || 0;
}

/**
 * Applies quantity discounts to the quote line
 * @param {LineCalculator} lc The line calculator passes itself as a parameter
 * @param {Decimal} price The price of a single unit is passed in
 * @private
 */
function applyVolumeDiscount(lc, price) {
	var line = lc.line;
	var quoteModel = line.parentQuote;
	var currencyCode = quoteModel.CurrencyIsoCode;
	var blockPriced = lc.pricingMethod === constants.PRICING_METHOD_BLOCK;
	var priorSpilloverQuantity = 0;
	var nowSpilloverQuantity = 0;
	// Get the discount schedule from the parent
	var dSchedule = lc.parent.getDiscountScheduleById(line.DiscountSchedule__c);

	if (blockPriced) {
		priorSpilloverQuantity = spilloverQuantity(dSchedule, line, false);
		nowSpilloverQuantity = spilloverQuantity(dSchedule, line, true);
	}
	// If the discount schedule can be found and doesn't exclude this pricebook, apply the discount
	if (dSchedule != null && !dSchedule.isPricebookIdExcluded(line.parentQuote.PricebookId__c)) {
		if (!dSchedule.hasTiers()) {
			return price;
		}
		var vDiscount = 0;
		var volumeQty;
		line.DiscountScheduleType__c = dSchedule.getType();
		// Non-amendment Pricing or net-new products on amendments
		if (!quoteModel.isAmendment || (quoteModel.isAmendment && line.Existing__c === false)) {
			price = retrieveNonAmendmentPrice(dSchedule, lc, price, false);
		} // First half of condition retrieves schedule info for products with a discount schedule and block priced and have prior quantity
		else if (line.DiscountScheduleType__c === "Slab" && quoteModel.isAmendment) {
			var scheduleInfo = retrieveSlabAmendmentScheduleInfo(dSchedule, price, lc);
			line.DiscountTier__c = scheduleInfo["tierId"];
			line.VolumeDiscount__c = scheduleInfo["discount"];
			price = scheduleInfo["price"];
		} else if (line.DiscountScheduleType__c === "Range" && quoteModel.isAmendment) {
			var lowestBound = dSchedule.getLowestBound(currencyCode);
			volumeQty = computeAmendmentVolumeQuantity(dSchedule, line, lc);
			vDiscount = line.actualQuantity != 0 ? dSchedule.computeDiscount(volumeQty, line.actualQuantity, price, currencyCode) : 0;
			var priorSpilloverDiscount;
			var nowSpilloverDiscount;
			var proratedOriginalPrice = numberUtils.setScale(line.OriginalPrice__c * lc.prorateMultiplier, lc.unitPriceScale);

			if (!lc.bundled) {
				if (blockPriced && line.actualQuantity != 0) {
					if (line.PriorQuantity__c >= lowestBound && priorSpilloverQuantity > 0) {
						priorSpilloverDiscount = dSchedule.computeDiscount(volumeQty, priorSpilloverQuantity, proratedOriginalPrice, currencyCode);
					}
					if (line.Quantity__c >= lowestBound && nowSpilloverQuantity > 0) {
						nowSpilloverDiscount = dSchedule.computeDiscount(volumeQty, nowSpilloverQuantity, proratedOriginalPrice, currencyCode);
					}
				}
				line.VolumeDiscount__c = vDiscount;
				if (dSchedule.isDiscountUnitAmount()) {
					// Apply prorate multiplier to amount-based discounts
					vDiscount = vDiscount != null ? numberUtils.setScale(vDiscount * lc.prorateMultiplier, lc.unitPriceScale) : vDiscount;
					priorSpilloverDiscount = priorSpilloverDiscount != null ? numberUtils.setScale(priorSpilloverDiscount * lc.prorateMultiplier, lc.unitPriceScale) : priorSpilloverDiscount;
					nowSpilloverDiscount = nowSpilloverDiscount != null ? numberUtils.setScale(nowSpilloverDiscount * lc.prorateMultiplier, lc.unitPriceScale) : nowSpilloverDiscount;
				}
				line.DiscountTier__c = dSchedule.getTierIdForQuantity(volumeQty, currencyCode);
				var nowPrice;
				var priorPrice;
				if (blockPriced && (nowSpilloverQuantity != 0 || priorSpilloverQuantity != 0)) {
					if (dSchedule.isCrossOrder() || line.actualQuantity < 0) {
						nowPrice = (proratedOriginalPrice - (nowSpilloverDiscount || 0)) * nowSpilloverQuantity;
						priorPrice = (proratedOriginalPrice - (priorSpilloverDiscount || 0)) * priorSpilloverQuantity;
						price = nowPrice - priorPrice + price;
					} else {
						price = (proratedOriginalPrice - (nowSpilloverDiscount || 0)) * nowSpilloverQuantity + price;
					}
				} else {
					price = price - (vDiscount || 0);
				}
			} else {
				price = 0;
				vDiscount = 0;
			}
		}
		if (blockPriced) {
			price = line.actualQuantity != 0 ? price : 0;
			priorSpilloverQuantity = (dSchedule.isCrossOrder() || line.actualQuantity < 0) && quoteModel.isAmendment ? priorSpilloverQuantity : 0;
			line.ListPrice__c = line.ListPrice__c + line.OriginalPrice__c * (nowSpilloverQuantity - priorSpilloverQuantity);
		}
	}
	return price;
}

/**
 * Applies price uplift to an MDQ quote line
 * @param {LineCalculator} lc The line calculator containing the line to be uplifted
 * @private
 */
function applyUplift(lc) {
	var line = lc.line;
	// Uplift Rate could be either the Uplift % on the same Quote Line, or from its parent, if Component is Uplifted By Package
	var upliftRate = line.effectiveUplift || 0;
	// Uplift is usually the previous segment's uplift, but can also be provided in the PreviousSegmentUplift__c field
	var prevSegUplift = line.PreviousSegmentUplift__c || null;
	// Price is usually the previous segment's Regular Price, but can also be provided in the PreviousSegmentPrice__c field
	var prevSegPrice = line.PreviousSegmentPrice__c || null;

	// Get Uplift Amount and Regular Price of previous segment
	if (prevSegUplift == null || prevSegPrice == null) {
		line.parentQuote.lineItems.forEach(function (otherLine) {
			var sameDimId = otherLine.Dimension__c != null && idUtils.compareIds(line.Dimension__c, otherLine.Dimension__c);
			var sameKey = otherLine.SegmentKey__c === line.SegmentKey__c;
			var previousIndex = otherLine.SegmentIndex__c === (line.SegmentIndex__c - 1);
			if (sameDimId && sameKey && previousIndex) {
				if (prevSegUplift == null) {
					prevSegUplift = otherLine.UpliftAmount__c;
				}
				if (prevSegPrice == null) {
					prevSegPrice = otherLine.RegularPrice__c;
				}
			}
		}, this);
	}

	// If still no Uplift, use 0
	if (prevSegUplift == null) {
		prevSegUplift = 0;
	}

	// If no previous segment to uplift against, just return
	if (prevSegPrice == null || prevSegPrice == 0) {
		line.Uplift__c = upliftRate;
		line.UpliftAmount__c = 0;
		return;
	}

	// In case of volume discounting, only count a portion of accumulated uplift proportional to difference in price
	prevSegUplift = prevSegUplift * (line.RegularPrice__c / (prevSegPrice - prevSegUplift));

	if (line.isTimeBasedSegment) {
		var upliftedPrice = ((upliftRate / 100) * (line.RegularPrice__c + prevSegUplift)) + line.RegularPrice__c + prevSegUplift;
		line.Uplift__c = upliftRate;
		var upliftAmount = numberUtils.setScale(upliftedPrice, lc.unitPriceScale) - line.RegularPrice__c;
		upliftAmount = numberUtils.setScale(upliftAmount, lc.unitPriceScale);
		line.UpliftAmount__c = upliftAmount;
		line.RegularPrice__c = numberUtils.setScale(upliftedPrice, lc.unitPriceScale);
	} else {
		line.Uplift__c = upliftRate;
	}
}

/**
 * Applies the additional discount indicated in the line editor
 * @param {LineCalculator} lc The line calculator passes itself as an argument
 * @private
 */
function applyAdditionalDiscount(lc) {
	if (lc.pricingMethod === constants.PRICING_METHOD_CUSTOM) {
		// With custom pricing method, customer price is entered directly
		return;
	}
	var line = lc.line;
	var price;
	if (line.parentQuote.applyAdditionalDiscountLast && !line.parentQuote.applyPartnerDiscountFirst) {
		price = line.NetPrice__c;
	} else {
		price = line.RegularPrice__c;
	}

	if (line.targetCustomerAmount) {
		line.AdditionalDiscountAmount__c = price - line.targetCustomerAmount;
	} else if (line.targetCustomerTotal) {
		line.AdditionalDiscountAmount__c = price - line.targetCustomerTotal/line.effectiveQuantity;
	}

	if ((line.renewalPrice != null) && !line.isDynamicSubscription) {
		// If the prorateDiscountAmount is enabled, the system will get the record information from the subscription to
		// avoid any calculation errors
		if (line.amountDiscountProrated != null && line.amountDiscountProrated) {
			if (line.renewedSubscriptionDiscounts != null) {
				if (line.renewedSubscriptionDiscounts["Amount"] != null) {
					line.AdditionalDiscountAmount__c = line.renewedSubscriptionDiscounts["Amount"];
					line.Discount__c = 0;
				} else {
					line.Discount__c = line.renewedSubscriptionDiscounts["Rate"];
					line.AdditionalDiscountAmount__c = 0;
				}
			}
		} else {
			line.AdditionalDiscountAmount__c = line.RegularPrice__c - lc.proratedRenewalPrice;
		}

		if (line.AdditionalDiscountAmount__c === 0) {
			// If the discount is 0, make it null
			line.AdditionalDiscountAmount__c = null;
		} else {
			// If it's set to a non-zero value, make sure the additional discount rate is null
			line.Discount__c = null;
		}
	}

	var discount = 0;
	if (line.isDiscountable) {
		if (line.AdditionalDiscountAmount__c != null) {
			discount = numberUtils.setScale(line.AdditionalDiscountAmount__c, lc.unitPriceScale)
				* (line.amountDiscountProrated ? lc.prorateMultiplier : 1);
		} else {
			var rate = null;
			if ((line.parentItem != null) && line.isComponentDiscountedByPackage) {
				rate = line.parentItem.effectiveAdditionalDiscountRate;
				line.Discount__c = rate;
			} else {
				rate = line.effectiveAdditionalDiscountRate;
			}
			discount = (rate == null) ? 0 : (price * (rate / 100));
		}
	}

	line.CustomerPrice__c = numberUtils.setScale((price || 0) - discount, lc.unitPriceScale);
}

/**
 * Applies the distributor discount
 * @param {LineCalculator} lc The line calculator passes itself as an argument
 * @private
 */
function applyDistributorDiscount(lc) {
	var line = lc.line;
	var parent = line.parentQuote;
	var price = parent.applyPartnerDiscountFirst
		? line.CustomerPrice__c
		: (parent.channelDiscountsOffList ? line.ProratedListPrice__c : line.PartnerPrice__c);
	var rate = 0;
	if (lc.partnerDiscountable === true) {
		rate = (parent.DistributorDiscount__c != null) ? parent.DistributorDiscount__c : 0;
		rate = (line.DistributorDiscount__c != null) ? line.DistributorDiscount__c : rate;
	}
	line.NetPrice__c = numberUtils.setScale(price * (1 - (rate / 100)), lc.unitPriceScale);
}

/**
 * Applies the partner discount
 * @param {LineCalculator} lc The line calculator passes itself as an argument
 * @private
 */
function applyPartnerDiscount(lc) {
	var line = lc.line;
	var parent = line.parentQuote;
	var price = parent.applyPartnerDiscountFirst || parent.channelDiscountsOffList
		? line.ProratedListPrice__c
		: (parent.applyAdditionalDiscountLast ? line.RegularPrice__c : line.CustomerPrice__c);
	var rate = 0;
	if (lc.partnerDiscountable === true) {
		rate = (parent.PartnerDiscount__c != null) ? parent.PartnerDiscount__c : 0;
		rate = (line.PartnerDiscount__c != null) ? line.PartnerDiscount__c : rate;
	}
	if (parent.applyPartnerDiscountFirst && lc.bundled) {
		price = 0;
	}
	line.PartnerPrice__c = numberUtils.setScale(price * (1 - (rate / 100)), lc.unitPriceScale);
}

},{"./Utils/DateUtils.js":18,"./Utils/IdUtils.js":19,"./Utils/JSQCConstants.js":20,"./Utils/LabelUtils.js":21,"./Utils/MetaDataUtils.js":22,"./Utils/NumberUtils.js":24,"./Utils/SettingsUtils.js":27}],6:[function(require,module,exports){
/**
 * Created by jfeingold on 9/22/15.
 */
"use strict";

var MetaDataUtils = require('./Utils/MetaDataUtils.js');
var SettingsUtils = require('./Utils/SettingsUtils.js');
module.exports = LookupCalloutMap;

/**
 * A JSON that can be deconstructed into a series of SOQL queries on lookup table data
 * @constructor
 */
function LookupCalloutMap() {

}

/**
 * Based on the map of triggered rules, creates query objects and adds them to the map
 * @param {Object} rulesToExecute A map from strings to price rules and their targets
 * @param {QuoteModel2} quoteModel A quote model against which these rules are evaluated
 * @returns {boolean} True if any new queries were added, else false
 */
LookupCalloutMap.prototype.addTables = function(rulesToExecute, quoteModel) {
    var tablesFound = false;
    for (var rId in rulesToExecute) {
        // For every rule...
        if (rulesToExecute.hasOwnProperty(rId)) {
            var rule = rulesToExecute[rId].rule;
            // If that rule uses a lookup table
            if (rule.lookupObject != null && rule.queries.length != 0) {
                var tableName = rule.lookupObject;

                // If the map doesn't already have an entry for that table, create one
                var table = this[tableName] || new LookupTable();

                // Add the constraint sets associated with this rule
                var newInfoFound = table.addConstraints(rId, rule.queries, rulesToExecute[rId].targets, quoteModel);

                if (newInfoFound) {
                    // If any new table constraints were created, we need to set the new table and add referenced fields
                    this[tableName] = table;

                    rule.actions.forEach(function(action) {
                        if (action.sourceLookupField != null) {
                            table.addReferencedField(action.sourceLookupField);
                        }
                    }, this);
                    tablesFound = true;
                }
            }
        }
    }
    return tablesFound;
};

/**
 * A single SOQL table query, represented by a JS Object
 * @constructor
 */
function LookupTable() {
    this.referencedFields = [];
    this.constraintSetsByRuleId = {};
}

/**
 * Adds a new field to the set of fields that will be queried for this lookup object
 * @param {String} fieldName The API name of a field on this lookup object
 */
LookupTable.prototype.addReferencedField = function(fieldName) {
    this.referencedFields.push(fieldName);
};


/**
 * Adds constraints to the SOQL query based on
 * @param {String} rId The Salesforce ID of a price rule
 * @param {PriceQuery[]} queries An array of PriceQuery objects that will be condensed into a single SOQL query represented by this LookupTable object
 * @param {QuoteLineModel[]} targets An array of QuoteLineModels that will be used to fill in dynamic values for the queries
 * @param {QuoteModel2} quote The Quote being calculated, also used to fill in dynamic values
 * @returns {Boolean} True if any new constraints were added
 */
LookupTable.prototype.addConstraints = function(rId, queries, targets, quote) {
    var addedConstraint = false;
    // Create an empty constraint map object
    var constraintMap = {};
    // For all queries
    queries.forEach(function(q) {
        // Create a list of all values that will be added to the constraint. Initially this list is empty.
        var vals = [];
        if (q.matchType == "Static Value") {
            // For static queries, the list is a length-1 list with the value specified in the query
            if (q.testedValue != null) {
                vals.push(q.testedValue);
            }
        } else if (q.matchType == "Field Value") {
            var testedField;
            if (q.testedField.indexOf(".") > -1) {
                // TODO: FIGURE OUT HOW TO DEAL WITH REFERENCED FIELDS
            } else {
                testedField = MetaDataUtils.getField(q.testedObject, q.testedField);
            }

            if (testedField == null) {
                // TODO: SHOULD PROBABLY THROW SOME SORT OF ERROR?
            }

            // For queries on quote fields, the list is again a length-1 list, with the value from the quote record
            if (q.testedObject == "Quote" && quote.record[testedField] != null) {
                vals.push(quote.record[testedField]);
            } else if (q.testedObject == "Quote Line") {
                // For queries on quote line fields, the list contains each line's value for that field
                targets.forEach(function(target) {
                    if (target.record[testedField] != null) {
                        vals.push(target.record[testedField]);
                    }
                }, this);
            }
        }
        // Only add to the constraint set if there are any constraining values
        if (vals.length != 0) {
            // Add the query's lookup field to the referenced field list. Duplicates won't matter because the query-builder
            // on the server will handle duplicates in the select clause
            this.addReferencedField(q.lookupField);

            // If there's not already a constraint set associated with this lookup field, create one
            if (constraintMap[q.lookupField] == null) {
                constraintMap[q.lookupField] = new FieldConstraint();
            }

            var fc = constraintMap[q.lookupField];

            // Push the operator to the end of the field constraint's operator list
            fc.operators.push(q.operator);

            fc.values.push(vals);
            addedConstraint = true;
        }
    }, this);
    if (addedConstraint) {
        this.constraintSetsByRuleId[rId] = constraintMap;
    }
    return addedConstraint;
};

/**
 * The set of constraints on a given field for a lookup query
 * @constructor
 */
function FieldConstraint() {
    this.operators = [];
    this.values = [];
}

},{"./Utils/MetaDataUtils.js":22,"./Utils/SettingsUtils.js":27}],7:[function(require,module,exports){
/**
 * Created by jfeingold on 11/3/15.
 */
'use strict';
module.exports.loadPlugin = loadPlugin;
module.exports.deletePlugin = deletePlugin;

try {
	// If we can successfully require systemjs, we're in Node. If not, we're in the browser and using the JSQC.resource
	// file, which already has the part of systemjs that we need.
	require("systemjs");
} catch(err) {
	if (typeof window !== 'undefined' && window)  // don't log it if in browser
		console.log("Could not load SystemJS through 'require' call. This is only a problem if not in the browser.");
}
var babel = require("babel-core");
var babelEs6Preset = require("babel-preset-es2015");
var babelSystemJsPlugin = require("babel-plugin-transform-es2015-modules-systemjs");

/**
 * Queries the specified plugin from the server, registers it as a module, and returns the object
 * @param {Object} plugin An object containing a plugin name and a unique ID associated with that plugin
 * @param {QuoteCalculator} qc The calculator calling this method
 * @returns {Object} A QC Plugin module
 * @private
 */
function loadPlugin(plugin, qc) {
	return queryCode(plugin.name, qc)
		.then(function(results) {
			if( window && !window.Babel && window.$ ) {  // experimental support for server-side transpiling while running in browser
				return transpileCodeViaHeroku(results, qc.prefix);
			}
			else {
				return transpileCode(results, qc.prefix, plugin.pid);
			}
		})
		.then(function(transpiledCode) {
			return registerAndImportModule(transpiledCode, plugin.pid);
		});
}

/**
 * Performs the server query to retrieve the plugin code
 * @param {String} name The name of the plugin on the server
 * @param {QuoteCalculator} qc The calculator calling this method
 * @returns {Promise}
 * @private
 */
function queryCode(name, qc) {
	if (qc.conn != null) {
		var queryText = "SELECT " + qc.prefix + "Code__c FROM " + qc.prefix + "CustomScript__c WHERE Name = '" + name + "'";
		return qc.conn.query(queryText);
	} else {
		return Promise.reject('Error: No JSForce Connection exists with which to load the plugin');
	}
}

/**
 * Transpiles the plugin from ES6 to ES5
 * @param {Object} queryResult The results of a JSForce query
 * @param {String} prefix Either "SBQQ__" or ""
 * @param {String} pluginId A unique ID used to create a namespace for this plugin
 * @returns {String} ES5 code prepared to send through System.import()
 */
function transpileCode(queryResult, prefix, pluginId) {
	var code = queryResult.records[0][prefix + "Code__c"];
	var babelOptions = {
		presets: [babelEs6Preset],
		compact: true,
		moduleId: 'QCPlugin' + pluginId,
		plugins: [babelSystemJsPlugin]
	};

	if( typeof window !== 'undefined' && window && window.Babel ) {
		// we use babel-standalone here as it is built specifically to run in the browser
		// presets and plugins are included in babel-standalone and we need to reference by name, not by require()
		babelOptions.presets = ['es2015'];

		babelOptions.plugins = ['transform-es2015-modules-systemjs'];
		babel = window.Babel;
	}

	try {
		var transpiled = babel.transform(code, babelOptions);
	} catch (err) {
		console.log('Error: Babel failed to transpile plugin');
		console.log(err);
	}
	return transpiled.code;
}

/**
 * Transpiles the plugin from ES6 to ES5 via the Heroku WS
 * @param {Object} queryResult The results of a JSForce query
 * @param {String} prefix Either "SBQQ__" or ""
 * @returns {String} ES5 code prepared to send through System.import()
 */
function transpileCodeViaHeroku(queryResult, prefix) {
	var code = queryResult.records[0][prefix + "Code__c"];
	return new Promise( function( resolve, reject ) {
		$.post( '//brick-rest-test.herokuapp.com/api/jsqc/transpile', {plugin: code} ).done( function( newCode ) {
			resolve( newCode );
		}).fail( function(e) {
			reject( e );
		})
	});
}

/**
 * Registers the plugin and imports the module
 * @param {String} source A string of ES5 source code
 * @param {String} pluginId A unique ID used to create a namespace for this plugin
 * @returns {Promise} Resolves once the module has been imported
 */
function registerAndImportModule(source, pluginId) {
	try {
		eval(source);
	} catch (err) {
		return Promise.reject('Error: SystemJS failed to import the Plugin Module');
	}
	return System.import('QCPlugin' + pluginId);
}

/**
 * Deletes the namespace associated with the specified plugin
 * @param {String} pluginId A unique ID corresponding to a plugin
 */
function deletePlugin(pluginId) {
	System.delete('QCPlugin' + pluginId);
}

},{"babel-core":35,"babel-plugin-transform-es2015-modules-systemjs":35,"babel-preset-es2015":35,"systemjs":35}],8:[function(require,module,exports){
"use strict";

var ApexUtils = require("./Utils/ApexUtils.js");
var OAuthUtils = require("./Utils/OAuthUtils.js");
var SettingsUtils = require("./Utils/SettingsUtils.js");
var NumberUtils = require("./Utils/NumberUtils.js");
var IdUtils = require("./Utils/IdUtils.js");
var TargetCalculator2 = require("./TargetCalculator2.js");
var LineCalculator = require("./LineCalculator.js");
var QuoteLinePriceRuleEvaluator = require("./QuoteLinePriceRuleEvaluator.js");
var MetaDataUtils = require("./Utils/MetaDataUtils.js");
var FormulaFieldEngine = require("./FormulaFieldCalculator.js");
var QuoteSummarizer = require("./QuoteSummarizer.js");
var JSForce = require("jsforce");
var PluginLoader = require("./PluginLoader.js");
var DiscountScheduleModel = require("./DiscountScheduleModel.js");
var AccountModel = require("./AccountModel.js");

module.exports = QuoteCalculator;

/**
 * Creates a quote-level calculator object
 * @param {QuoteModel2} quote A quote object
 * @constructor
 */
function QuoteCalculator(quote) {
    this.quote = quote;
    this.prefix = SettingsUtils.getPrefix();
    this.quantitySumIndex = {};
    this.quantitySumIndexForCostSchedules = {};
    this.discountScheduleMap = {};
    this.accountMap = {};
    this.quantitySumIndexIncludingBundled = {};
	this.formulaFieldEngine = new FormulaFieldEngine();
    this.priorQuantitySumIndex = {};
    this.actualQuantitySumIndex = {};
}

/**
 * Initialize the JSForce connection object that will be used for remote actions
 * @param {String} accessToken the OAuth access token of this SFDC org
 * @param {String} orgPrefix the prefix of this SFDC org
 */
QuoteCalculator.prototype.initConnection = function(accessToken, orgPrefix) {
    this.conn = OAuthUtils(accessToken, orgPrefix).getConnection();
};

/**
 * Sets the JSForce connection object that will be used for remote actions
 * @param {Object} conn A JSForce connection object
 */
QuoteCalculator.prototype.setConnection = function(conn) {
    this.conn = conn;
};

/**
 * Sets the apex object used to make APEX REST callouts
 * @param {Object} apex Supports GET/POST callouts to APEX as a REST API
 */
QuoteCalculator.prototype.setApex = function(apex) {
    this.apex = apex;
};

/**
 * Initializes a new apex object used to make APEX REST callouts
 * @param {Object} conn The connection
 * @param {String} orgUrl The org url
 */
QuoteCalculator.prototype.newApex = function(conn) {
    return ApexUtils(conn);
};


/**
 * Loads Product and Option Records from the server and assigns them to the quote lines that use them.
 * @returns {Promise}
 * @private
 */
QuoteCalculator.prototype.loadProductAndOptionRecords = function() {
	// Create the contexts for each call:
	var self = this;
	var prefix = SettingsUtils.getPrefix() === "" ? "" : "SBQQ";
	// Map Product and Option IDs to lists of lines that reference them, so we can efficiently update records.
	// Also create a list of unique product and option IDs so we can add it to the context.
	var productToLineMap = {};
	var productIdList = [];
	var optionToLineMap = {};
	var optionIdList = [];
	var pricebookFilter = [];
	var currencyFilter = [];
	this.quote.lineItems.forEach(function(line) {
		// Get the Product ID.
		var pid = line.Product__c;
		if (productToLineMap[pid] == null) {
			productToLineMap[pid] = [];
			productIdList.push(pid);
		}
		productToLineMap[pid].push(line);

		// Get the Option ID and map non-null IDs.
		var oid = line.ProductOption__c;
		if (oid != null) {
			if (optionToLineMap[oid] == null) {
				optionToLineMap[oid] = [];
				optionIdList.push(oid);
			}
			optionToLineMap[oid].push(line);
		}
	});

	var productRequiredFields = SettingsUtils.getReferencedFieldMap()['Product2'] || [];
	var optionRequiredFields = SettingsUtils.getReferencedFieldMap()[SettingsUtils.getPrefix() + 'ProductOption__c'] || [];

	if (this.quote.record[SettingsUtils.getPrefix() + 'PricebookId__c']) {
		pricebookFilter.push(this.quote.record[SettingsUtils.getPrefix() + 'PricebookId__c']);
	}
	if (this.quote.record['CurrencyIsoCode']) {
		currencyFilter.push(this.quote.record['CurrencyIsoCode']);
	}

	var productContext = {
		'requiredIds': productIdList,
		'productFields': productRequiredFields,
		'pricebookFilter': pricebookFilter,
		'currencyFilter': currencyFilter
	};
	var optionContext = {
		'requiredIds': optionIdList,
		'requiredFields': optionRequiredFields
	};
	return this.loadDataFromProvider(prefix, 'ProductServiceProvider.ProductLoader', 'Product__r', 'AllProducts', productContext, productToLineMap)
		.then(function() {
			return self.loadDataFromProvider(prefix, 'ProductOptionServiceProvider.ProductOptionLoader', 'ProductOption__r','AllOptions', optionContext, optionToLineMap);
		});
};

/**
 * Uses the given context, provider, and UID to ensure that all necessary records of the given type are loaded.
 * @param {String} prefix Either empty string or "SBQQ".
 * @param {String} provider The name of a content provider.
 * @param {String} attribute The name of the attribute on the Quote Line being set.
 * @param {String} uid The UID string under which the records will be cached.
 * @param {Object} context An object that will be passed into the service provider.
 * @param {Object} lineMap A mapping from IDs to lists of records that use that ID.
 * @returns {Promise}
 * @private
 */
QuoteCalculator.prototype.loadDataFromProvider = function(prefix, provider, attribute, uid, context, lineMap) {
	// Create a variable to allow the results to be referenced by the scope of both .then() callbacks
	var self = this;
	var allRecords;
	// While this code appears to trigger two callouts, it will trigger at most one. There are three cases:
	// 1. The UID currently has no value cached, in which case there is a single callout to get everything.
	// 2. The UID exists but is missing records. The load for the UID returns instantly and a callout gets the rest.
	// 3. The UID exists and is up to date, so there are no callouts at all.

	// Products include Product Image formulas, often.  Though more likely we should ALWAYS use escape: false,
	// like we do in RemoteServiceProxies
	this.apex.setOptions({escape: false});
	return this.apex.load(prefix, provider, uid, context)
		.then(function(allResults) {
			// Store the results in the hoisted variable.
			allRecords = allResults;
			// Now we assign each record to its corresponding lines, and make a list of the missing records.
			var missingKeys = [];
			context['requiredIds'].forEach(function(key) {
				// If the UID already contains a record for this ID, assign it to all lines that use that ID.
				if (allResults[key] != null) {
					lineMap[key].forEach(function(line) {
						line[attribute] = allResults[key];
					}, this);
				} else {
					// If the UID does not contain a record, add it to the list.
					missingKeys.push(key);
				}
			}, this);

			// If missingKeys is empty, we can resolve to an empty object. If it's not, we need to load the rest.
			context['requiredIds'] = missingKeys;
			return missingKeys.length === 0 ?
				Promise.resolve({}) :
				self.apex.load(prefix, provider, null, context);
		})
		.then(function(missingResults) {
			// Now that we have the missing results, we repeat what we did above.
			context['requiredIds'].forEach(function(key) {
				// Assign this record to all lines that use it.
				lineMap[key].forEach(function(line) {
					line[attribute] = missingResults[key];
				}, this);
				// Also store the record in the AllRecords object, so it will be cached and we avoid a future callout.
				try {
					allRecords[key] = missingResults[key];
				} catch(e) {
					// We only reach this error on Heroku or other server-side callouts. But it's okay to simply
					// swallow that error as no caching occurs on the server.
				}
			}, this);
		})
};


QuoteCalculator.prototype.loadAllRelatedRecords = function() {
	var self = this;
	var prefix = SettingsUtils.getPrefix() === "" ? "" : "SBQQ";
	// Create a mapping from IDs to IdUsageInstances created using the factory method below.
	var idUsageMap = {};
	// Create a context for the callouts.
	var context = {
		'queryInfo': {}
	};

	// Add the Quote-level lookups to the map.
	addLookupsToIdMapAndUpdateContext(SettingsUtils.getQuoteLookups(), [self.quote]);
	// Add the Group-level lookups to the map.
	addLookupsToIdMapAndUpdateContext(SettingsUtils.getGroupLookups(), self.quote.groups);
	// Add the Line-level lookups to the map.
	addLookupsToIdMapAndUpdateContext(SettingsUtils.getLineLookups(true), self.quote.lineItems);

	// Create a hoisted variable that can be referenced by both callbacks.
	var hoistedResults;
	// As seen elsewhere, while this code appears to trigger two callouts, it actually only triggers at most one.
	// Three cases exist:
	// 1. The UID 'AllAdditionalLookups' currently has no value cached, in which case there is a single callout to get everything.
	// 2. The UID 'AllAdditionalLookups' exists but is missing records. The load for the UID returns instantly and a callout gets the rest.
	// 3. The UID 'AllAdditionalLookups' exists and is up to date, so there are no callouts at all.
	//return this.apex.load(prefix, 'LookupFieldServiceProvider.LookupFieldLoader', 'AllAdditionalLookups', context);
	return this.apex.load(prefix, 'JSQCLookupFieldServiceProvider.JSQCLookupFieldLoader', 'AllAdditionalLookups', context)
		.then(function(results) {return assignIdsToObjectsAndQueryMissingRecords(results)});

	function assignIdsToObjectsAndQueryMissingRecords(results) {
		if (hoistedResults) {
			// If hoistedResults is already set to something, use our results to fill in the gaps.
			try {
				for (var queriedId in results) {
					hoistedResults[queriedId] = results[queriedId];
				}
			} catch (e) {
				// We only reach this error on Heroku and other server-side callouts. But it's okay to just swallow
				// that error, as no caching occurs on Heroku anyway.
			}
		} else {
			// If hoistedResults is null, we set it to be our results so we can update it later if need be.
			hoistedResults = results;
		}
		// Initialize another context in case another callout is required.
		var secondContext = {
			'queryInfo': {}
		};
		// Assign each queried record to the records that use it, and make a list of the missing ones.
		var missingIds = [];
		for (var id in idUsageMap) {
			// If 'AllAdditionalLookups' already contains a record for this ID, assign it to all objects that use it.
			if (hoistedResults[id] != null) {
				idUsageMap[id].usageList.forEach(function(usage) {
					var record = usage.record;
					var relationshipName = usage.fieldName.substring(0, usage.fieldName.length - 1) + 'r';
					// If the relationship field already has another object with the same Id, merge its fields into the results
					// to prevent the loss of data.
					if (record[relationshipName] != null && IdUtils.compareIds(id, record[relationshipName]['Id'])) {
						for (var existingKey in record[relationshipName]) {
							hoistedResults[id][existingKey] = record[relationshipName][existingKey];
						}
					}
					record[relationshipName] = hoistedResults[id];
				}, self);
			} else {
				// Else if 'AllAdditionalLookups' is missing this ID, add it to the list of missing ids, and put it
				// in the new context.
				missingIds.push(id);
				var typeOfMissing = idUsageMap[id].objectType;
				// If no objects of this type are in the new context, copy the entry from the original context,
				// but start the requiredId list over.
				if (secondContext.queryInfo[typeOfMissing] == null) {
					secondContext.queryInfo[typeOfMissing] = context.queryInfo[typeOfMissing];
					secondContext.queryInfo[typeOfMissing].requiredIds = [];
				}
				secondContext.queryInfo[typeOfMissing].requiredIds.push(id);
			}
		}

		// If missingIds is empty, we can resolve. If not, we need to do a recursive call.
		if (missingIds.length === 0) {
			return Promise.resolve();
		} else {
			return self.apex.load(prefix, 'JSQCLookupFieldServiceProvider.JSQCLookupFieldLoader', null, secondContext)
				.then(function(results) {return assignIdsToObjectsAndQueryMissingRecords(results)});
		}

	}

	function addLookupsToIdMapAndUpdateContext(lookupFields, models) {
		// If there are lookup relationships to test, and records to test them against...
		if (lookupFields != null && models != null && models.length != 0) {
			for (var key in lookupFields) {
				if (lookupFields.hasOwnProperty(key)) {
					// Get the type of this lookup field.
					var targetType = lookupFields[key];
					// Check the ID field on each record to see if it has a value.
					models.forEach(function(model) {
						var id = model.record[key];
						if (id) {
							var convertedId = IdUtils.convertTo18(id);
							// If the ID has a value, initialize a list in the idUsageMap unless one already exists.
							if (idUsageMap[convertedId] == null) {
								idUsageMap[convertedId] = {
									'objectType': targetType,
									'usageList': []
								};
							}
							// Create a new Id Usage Instance and add it to the list.
							var usageList = idUsageMap[convertedId].usageList;
							usageList.push({
								'fieldName': key,
								'record': model.record
							});

							// If the type targeted by this lookup field is not already in the context, it must be added.
							// Additionally, this ID must be added to the list of IDs that the callout must query.
							if (!context.queryInfo[targetType]) {
								context.queryInfo[targetType] = {
									'referencedFields': SettingsUtils.getReferencedFieldMap()[targetType],
									'referencedIds': [id]
								}
							} else {
								context.queryInfo[targetType]['referencedIds'].push(id);
							}
						}
					});
				}
			}
		}
	}
};

/**
 * Perform calculation on the quote stored by the calculator
 * @returns {Promise} Resolves when calculation is complete
 */
QuoteCalculator.prototype.calculate = function() {
    var self = this;
    this.conn = this.conn || new JSForce.Connection({
        accessToken: sfSessionId
    });
    var plugin;
    this.apex = this.apex || ApexUtils(this.conn);
	// Step 1: Product and option records are lazy-loaded.
	return this.loadProductAndOptionRecords()
		.then(function() {
		// Step 2: Additional lookup relationships are loaded.
			return self.loadAllRelatedRecords();
		})
		// Step 3: Formula field metadata is retrieved.
		.then(function() {
			return retrieveMetadata(self);
		})
		// Step 4: Price Rules On Init event is executed.
		.then(function() {
			return evaluatePriceRules(self.quote, 'On Initialization', self.conn, self.apex, self.formulaFieldEngine);
		})
		// Step 5: Plugin is initialized if it exists.
		.then(function() {
			return initializePlugin(self);
		})
		// Step 6: Plugin's onInit() method is executed.
        .then(function(pluginModule) {
            plugin = pluginModule;
            return executePluginOnInit(self, plugin);
        })
        // Step 7: Related records are updated, in case the plugin or price rules injected new Ids.
		.then(function() {
			return self.loadAllRelatedRecords();
		})
		.then(function() {
			// Step 8: Formula fields are calculated on the Quote Lines.
			self.formulaFieldEngine.calculateFormulaFieldsOnObjects(self.quote.lineItems);
			// Step 9: Price Rules Before Calculate event is executed.
			return evaluatePriceRules(self.quote, 'Before Calculate', self.conn, self.apex, self.formulaFieldEngine);
		})
        // Step 10: Plugin's beforeCalculate() method is executed.
        .then(function() {
            return executePluginOnBeforeCalculate(self, plugin);
        })
        // Step 11: Update related records again, for the same reasons as in step 6.
		.then(function() {
			return self.loadAllRelatedRecords();
		})
        // Step 12: Quantities are calculated.
        .then(function() {
            calculateQuantities(self.quote);
        })
        // Step 13: Plugin's beforePriceRules() method is executed.
        .then(function() {
            return executePluginOnBeforePriceRules(self, plugin);
        })
        // Step 14: Price rules On Calculate event are evaluated.
        .then(function() {
            return evaluatePriceRules(self.quote, 'On Calculate', self.conn, self.apex, self.formulaFieldEngine);
        })
        // Step 15: Plugin's afterPriceRules() method is executed.
        .then(function() {
            return executePluginOnAfterPriceRules(self, plugin);
        })
        // Step 16: Update related records yet again.
		.then(function() {
			return self.loadAllRelatedRecords();
		})
        // Step 17: After Price rules have run, ensure that any dynamically injected discount schedules are loaded properly.
        .then(function() {
            return loadDiscountsAndAccountSummaries(self);
        })
        // The next step that requires a callout is Step 26, so lump all steps before it into the same .then()
        .then(function() {
            // Step 18: Quantities are indexed according to schedule, and group keys.
            indexQuantitiesForDiscountSchedules(self.quote, self);
            // Step 19: Target Calculator resets discounts if a target amount exists.
            targetCalculatorResetsDiscounts(self);
            // Step 20: Quote and Group totals are reset.
            resetTotals(self.quote);
            // Step 21: Calculate fixed items.
            calculateFixedItems(self, self.quote);
            // Step 22: Calculate dynamic items.
            calculateDynamicItems(self, self.quote);
            // Step 23: Calculate totals.
            calculateTotals(self.quote);
            // Step 24: If target amount is specified, Target Calculator applies discounts such that it is reached.
            targetCalculatorAppliesDiscounts(self);
            // Step 25: Components are rolled up.
            rollupComponents(self.quote);
	        // Step 26: Price Rule After Calculate event is executed.
	        return evaluatePriceRules(self.quote, 'After Calculate', self.conn, self.apex, self.formulaFieldEngine);
        })
        // Step 27: Plugin's onAfterCalculate() method is executed.
		.then(function() {
			return executePluginOnAfterCalculate(self, plugin);
		})
		// Step 28: Update related records again.
		.then(function() {
			return self.loadAllRelatedRecords();
		})
        .then(function() {
            // Step 29: Quote Line formula fields are re-evaluated.
            self.formulaFieldEngine.calculateFormulaFieldsOnObjects(self.quote.lineItems);
            // Step 30: Quote formula fields are evaluated
            self.formulaFieldEngine.calculateFormulaFieldsOnObjects([self.quote]);
            // Step 31: Quote Line Group formula fields are evaluated.
            if (self.quote.isGrouped) {
                self.formulaFieldEngine.calculateFormulaFieldsOnObjects(self.quote.groups);
            }
	        // Step 32: Group- and Quote-level totals are reset and recalculated, since the line-level totals may have changed.
	        resetTotals(self.quote);
	        calculateTotals(self.quote);
	        // Step 33: Quote Summarizer is invoked to summarize MDQ Segments and Summarized Fields.
	        QuoteSummarizer.summarize([self.quote]);
	        // Step 34: Delete the plugin module, if one exists.
	        if (plugin) {
		        unloadPlugin(self);
	        }
	        // Step 35: Update the related records one last time.
	        return self.loadAllRelatedRecords();
        });
};

/**
 * If a quote calculator plugin exists, this method calls its onInit() method. Otherwise, it returns a promise that
 * immediately resolves.
 * @param {QuoteCalculator} qc The calculator in progress
 * @returns {Promise} Resolves when the plugin is initialized, or immediately if no plugin was loaded
 */
function initializePlugin(qc) {
	var plugin = qc.quote.plugin;
	if (plugin) {
		return PluginLoader.loadPlugin(plugin, qc);
	} else {
		return Promise.resolve();
	}
}

/**
 * Deletes the plugin used in this calculation.
 * @param {QuoteCalculator} qc The calculator in progress
 */
function unloadPlugin(qc) {
	if (qc.quote.plugin) {
		PluginLoader.deletePlugin(qc.quote.plugin.pid);
	}
}

/**
 * Since the user can dynamically inject discount schedules with price rules, plugins, or by manually entering them on
 * the line editor, the JSQC must be able to dynamically ensure that all referenced discount schedules are available,
 * and that all assets and subscriptions are loaded.
 * @param {QuoteCalculator} qc The quote calculator currently running
 * @returns {Promise} Resolves once discount schedules are all loaded
 */
function loadDiscountsAndAccountSummaries(qc) {
    var scheduleMap = qc.quote.scheduleMap;

    if (Object.keys(scheduleMap).length != 0) {
        var overriddenMap = qc.quote.overriddenScheduleMap;
        var context = {
            'schedules': scheduleMap,
            'overrides': overriddenMap,
	        'account': qc.quote.Account__c
        };
        var startTime = new Date();
	    // This method actually triggers at most one callout, though it looks like it provokes 2.
	    // If 'AllDiscountsAndAccounts' doesn't exist, it gets queried.
	    // If it exists but is out of date, it gets requeried.
	    // If it exists and is up to date, no query occurs.
	    var resultStorage;
	    return getDiscountsAndAccountSummariesFromServer(qc.apex, 'AllDiscountsAndAccounts', context)
		    .then(function(results) {
			    resultStorage = results;
			    // Compare both the schedule map and override map to make sure the state is the same.
			    var resultObj = typeof results === 'string' ? JSON.parse(results) : results;
			    if (!mapsAreIdentical(context.schedules, resultObj.schedules) || !mapsAreIdentical(context.overrides, resultObj.overrides)) {
				    // If the maps aren't identical, do another callout and replace the results with the new ones
				    return getDiscountsAndAccountSummariesFromServer(qc.apex, null, context);
			    } else {
				    // If the maps are identical, resolve to our original results
				    return Promise.resolve(results);
			    }
		    })
		    .then(function(newResults) {
			    resultStorage = newResults;
			    var resultObj = typeof newResults === 'string' ? JSON.parse(newResults) : newResults;
			    setDiscountAndSummaryObjects(qc, resultObj);
		    });
    } else {
        return Promise.resolve();
    }

	function mapsAreIdentical(map1, map2) {
		for (var key in map1) {
			// If the second map contains a value for that key
			if (map2[key] != null) {
				// Return true if every value in map2's list exists in map1's list
				var sameEntryForThisKey = map2[key].every(function(valueFromMap2) {
					return map1[key].some(function(valueFromMap1) {
						return valueFromMap1 === valueFromMap2;
					});
				});
				if (!sameEntryForThisKey) {
					return false;
				}
			} else {
				return false;
			}
		}
		return true;
	}
}

/**
 * Uses JSForce to make a REST callout to the server. The invoked REST resource will query all of the discount
 * schedules and account summaries, and return them in a String
 * @param {Object} apex Supports GET/POST callouts to APEX as a REST API
 * @param {Object} requestBody An object with properties containing referenced schedule Ids, overridden schedule Ids,
 * and the Id of the Account
 * @returns {Promise} Resolves once the REST callout completes
 */
function getDiscountsAndAccountSummariesFromServer(apex, uid, context) {
    var prefix = SettingsUtils.getPrefix() == "" ? "" : "SBQQ";
    return apex.load(prefix, 'DiscountAndAccountCallout', uid, context);
}

/**
 * Turn the result of a the Apex REST callout into DiscountScheduleModels and AccountModels, and store them on the
 * quote calculator
 * @param {QuoteCalculator} qc The calculator on which the models will be stored
 * @param {Object} results A JSON returned from the Apex REST callout /DiscountCallout/
 * @returns {Void}
 */
function setDiscountAndSummaryObjects(qc, results) {
    qc.discountScheduleMap = {};
    var dsMap = results.scheduleRecords;
    for (var id in dsMap) {
        var dsRecord = dsMap[id];
        var productIds;
        if(results.productsByDiscountSchedule)
            productIds = results.productsByDiscountSchedule[id];
        qc.discountScheduleMap[IdUtils.convertTo18(id)] = new DiscountScheduleModel(dsRecord, productIds);
    }

    qc.accountMap = {};
    for (var acId in results.accounts) {
        var accountVO = results.accounts[acId];
        qc.accountMap[IdUtils.convertTo18(acId)] = new AccountModel(accountVO);
    }
}

/**
 * Retrieves the metadata of any referenced fields. If there are no such fields,
 * a Promise is returned that resolves immediately. Fields that require a callout will include those used as custom
 * block price/discount schedule quantities or constraints, those referenced by price rules, plugins, or summary varaibles,
 * and any fields referenced by the formulas on these fields.
 * @param {QuoteCalculator} qc The quote calculator currently running.
 * @returns {Promise}
 */
function retrieveMetadata(qc) {
	var conn = qc.conn;
	var fullNames = determineMetadataFullNames(qc);
	if (fullNames.length == 0) {
		return Promise.resolve();
	}

	// Since the MetaData API can only handle 10 fields at a time, we break the request into multiple requests for no
	// more than 10 fields each.
	var promiseArray = [];
	var promisesNeeded = Math.ceil(fullNames.length / 10);
	for (var i = 0; i < promisesNeeded; i++) {
		promiseArray.push(conn.metadata.read('CustomField', fullNames.slice(i * 10, (i + 1) * 10)));
	}
	return Promise.all(promiseArray).then(function(dataArray) {
		var combinedDataArray = [];
		dataArray.forEach(function(arr) {
			if (arr != null) {
				if (arr.length == null) {
					arr = [arr];
				}
			}
			combinedDataArray = combinedDataArray.concat(arr);
		});

		qc.formulaFieldEngine.setMetadata(combinedDataArray);
	});
}

/**
 * If the quote has a target amount, all discounts are reset
 * @param {QuoteCalculator} qc The quote calculator currently running
 */
function targetCalculatorResetsDiscounts(qc) {
    var tc = new TargetCalculator2();
    // If the quote has a target amount, use the target calculator to reset the discounts on the quote.
    if (qc.quote.TargetCustomerAmount__c != null) {
        tc.resetDiscounts(qc.quote);
    }
}

/**
 * If the quote has a target amount, discounts are applied until that amount is reached
 * @param {QuoteCalculator} qc The quote calculator currently running
 */
function targetCalculatorAppliesDiscounts(qc) {
    var tc = new TargetCalculator2();
    qc.quote.groups.forEach(function (group) {
        if (group.TargetCustomerAmount__c != null) {
            tc.resetDiscounts(qc.quote, group);
            tc.calculate(qc.quote, group);
            // Recalculate after targeted discounts have been calculated
            resetTotals(qc.quote);
            calculateFixedItems(qc, qc.quote);
            calculateDynamicItems(qc, qc.quote);
            calculateTotals(qc.quote);
            if (group.hasDynamicLineItems && (group.TargetCustomerAmount__c != group.record[qc.prefix + "CustomerTotal__c"])) {
                tc.adjustDynamicItems(qc.quote, group);
                calculateDynamicItems(qc, qc.quote);
                resetTotals(qc.quote);
                calculateTotals(qc.quote);
            }
        }
    }, qc);

    if (qc.quote.TargetCustomerAmount__c != null) {
        tc.calculate(qc.quote);
        // Reset after targeted discounts have been calculated
        resetTotals(qc.quote);
        calculateFixedItems(qc, qc.quote);
        calculateDynamicItems(qc, qc.quote);
        calculateTotals(qc.quote);
        if (qc.quote.hasDynamicLineItems && (qc.quote.TargetCustomerAmount__c != qc.quote.customerTotal)) {
            tc.adjustDynamicItems(qc.quote);
            calculateDynamicItems(qc, qc.quote);
            resetTotals(qc.quote);
            calculateTotals(qc.quote);
        }
    }
}


/**
 * Creates a list of the full API names of all formula fields and formula-referenced fields, for use by JSForce's
 * metadata api
 * @param {QuoteCalculator} calculator The calculator currently running
 * @returns {String[]}
 */
function determineMetadataFullNames(calculator) {
	var referencedFieldMap = SettingsUtils.getReferencedFieldMap();
	if (referencedFieldMap == null) {
		return [];
	}

	var fullNames = [];
	var lineType = calculator.prefix + "QuoteLine__c";
	var quoteType = calculator.prefix + "Quote__c";
	var groupType = calculator.prefix + "QuoteLineGroup__c";
	// For all field sets, create the field's full name using the mapping key and the api name.
	for (var key in referencedFieldMap) {
		var typeName =
			(key === 'Quote Line') ? lineType : (key === 'Group') ? groupType : (key === 'Quote') ? quoteType : key;
		if (referencedFieldMap.hasOwnProperty(key)) {
			referencedFieldMap[key].forEach(function(apiName) {
				fullNames.push(typeName + '.' + apiName);
			});
		}
	}
	return fullNames;
}

/**
 * Returns the DiscountScheduleModel with the provided ID
 * @param {String} sid An Apex ID
 * @returns {DiscountScheduleModel}}
 */
QuoteCalculator.prototype.getDiscountScheduleById = function(sid) {
    return this.discountScheduleMap[IdUtils.convertTo18(sid)];
};

/**
 * Returns the AccountModel with the provided ID
 * @param {String} id An Apex ID
 * @returns {AccountModel}}
 */
QuoteCalculator.prototype.getAccountById = function(id) {
    return this.accountMap[id];
};

/**
 * Calculates the quantities for each quote line in the given quote.
 * @param {QuoteModel2} quote The quote whose lines should be calculated
 * @private
 */
function calculateQuantities(quote) {
    quote.lineItems.forEach(function(line) {
        line.Quantity__c = calculateQuantity(line);
        if (line.Quantity__c != null) {
            var quantityScale = line.productQuantityScale;
            if (quantityScale == null) {
                quantityScale = SettingsUtils.getQuantityScale();
            }
            line.Quantity__c = NumberUtils.setScale(line.Quantity__c, quantityScale);
        }
    });
}

function indexQuantitiesForDiscountSchedules(quote, calculator) {
    quote.lineItems.forEach(function(line) {
        // If line is volume discounted, and the quote is not a renewal, populate the quantities
        // of products that share the same schedule, prodcut, or group
        if (line.isVolumeDiscounted && (!quote.isRenewal || line.RenewedAsset__c == null)) {
            calculateDiscountedQuantities(line, calculator, false);
        }
        if (line.hasCostSchedule && (!quote.isRenewal || line.RenewedAsset__c == null)) {
            calculateDiscountedQuantities(line, calculator, true);
        }
    });
}

/**
 * Index the sums of quantities of discounted lines for use by cross-product discounts or discounts with aggregation scopes
 * @param {QuoteLineModel} line The line being discounted
 * @param {QuoteCalculator} calculator The quote calculator calling this method
 * @param {Boolean} isCostSchedule True if this line is discounted according to a Cost-Based discount schedule
 */
function calculateDiscountedQuantities(line, calculator, isCostSchedule) {
    var scheduleId;
    var qsi;
    var qsiIncludeBundled = calculator.quantitySumIndexIncludingBundled;
    var qsiPriorQty = calculator.priorQuantitySumIndex;
    var qsiActualQty = calculator.actualQuantitySumIndex;
    // Get the ID for the used discount schedule
    if (!isCostSchedule) {
        scheduleId = line.DiscountSchedule__c;
        qsi = calculator.quantitySumIndex;
    } else if (isCostSchedule) {
        scheduleId = line.costScheduleId;
        qsi = calculator.quantitySumIndexForCostSchedules;
    }
    var qid = IdUtils.convertTo18(line.quoteId);
    var sid = IdUtils.convertTo18(scheduleId);
    var pid = line.Product__c;
    var scheduleIdKey = qid + "_" + sid;
    var scheduleProductKey = scheduleIdKey + "_" + pid;
    var groupSchedIdKey = (line.parentGroup != null) ? qid + "_" + line.parentGroup.key + "_" + sid : null;
    var groupSchedProdKey = (line.parentGroup != null) ? groupSchedIdKey + "_" + pid : null;

    var sum = 0;
    var lineQuantity;
    var linePriorQuantity = line.PriorQuantity__c || 0;
    var lineActualQuantity = line.ActualQuantity__c || 0;
    // If a custom field is used for Discount Schedules, use that value instead
    if (scheduleId != null) {
        var ds = calculator.getDiscountScheduleById(IdUtils.convertTo18(scheduleId));
        var quoteLineQuantityFieldName= ds.record[SettingsUtils.getPrefix() + "QuoteLineQuantityField__c"];
        if (quoteLineQuantityFieldName != null) {
            var quoteLineQuantityField = MetaDataUtils.getField(MetaDataUtils.getObjectType(line), quoteLineQuantityFieldName);
            lineQuantity = line.record[quoteLineQuantityField];
        }
    }
    if (lineQuantity == null) {
        lineQuantity = line.Quantity__c;
    }

    // Populate QSI without including Bundled Products
    if (!line.Optional__c && !line.Bundled__c) {
        sum = qsi[scheduleIdKey] || 0;
        qsi[scheduleIdKey] = sum + lineQuantity;
        sum = qsi[scheduleProductKey] || 0;
        qsi[scheduleProductKey] = sum + lineQuantity;
        sum = qsiPriorQty[scheduleIdKey] || 0;
        qsiPriorQty[scheduleIdKey] = sum + linePriorQuantity;
        sum = qsiPriorQty[scheduleProductKey] || 0;
        qsiPriorQty[scheduleProductKey] = sum + linePriorQuantity;
        sum = qsiActualQty[scheduleIdKey] || 0;
        qsiActualQty[scheduleIdKey] = sum + lineActualQuantity;
        sum = qsiActualQty[scheduleProductKey] || 0;
        qsiActualQty[scheduleProductKey] = sum + lineActualQuantity;
    }
    if ((line.parentGroup != null) && (!line.Optional__c || line.parentGroup.Optional__c) && !line.Bundled__c) {
        sum = qsi[groupSchedIdKey] || 0;
        qsi[groupSchedIdKey] = sum + lineQuantity;
        sum = qsi[groupSchedProdKey] || 0;
        qsi[groupSchedProdKey] = sum + lineQuantity;
        sum = qsiPriorQty[groupSchedIdKey] || 0;
        qsiPriorQty[groupSchedIdKey] = sum + linePriorQuantity;
        sum = qsiPriorQty[groupSchedProdKey] || 0;
        qsiPriorQty[groupSchedProdKey] = sum + linePriorQuantity;
        sum = qsiActualQty[groupSchedIdKey] || 0;
        qsiActualQty[groupSchedIdKey] = sum + lineActualQuantity;
        sum = qsiActualQty[groupSchedProdKey] || 0;
        qsiActualQty[groupSchedProdKey] = sum + lineActualQuantity;
    }
    // Populate QSI including Bundled Products
    if (!line.Optional__c) {
        sum = qsiIncludeBundled[scheduleIdKey] || 0;
        qsiIncludeBundled[scheduleIdKey] = sum + lineQuantity;
        sum = qsiIncludeBundled[scheduleProductKey] || 0;
        qsiIncludeBundled[scheduleProductKey] = sum + lineQuantity;
    }
    if ((line.parentGroup != null) && (!line.Optional__c || line.parentGroup.Optional__c)) {
        sum = qsiIncludeBundled[groupSchedIdKey] || 0;
        qsiIncludeBundled[groupSchedIdKey] = sum + lineQuantity;
        sum = qsiIncludeBundled[groupSchedProdKey] || 0;
        qsiIncludeBundled[groupSchedProdKey] = sum + lineQuantity;
    }
}


/**
 * Calculates the quantity for a single item.
 * @param {QuoteLineModel} line A QuoteLineModel that represents a given quote line
 * @returns {Number} The quantity of that item, represented as a Decimal
 * @private
 */
function calculateQuantity(line) {
    // On amendments, if parent bundle quantity is zeroed (de-selected), all children should also be zeroed
    if (line.parentQuote.isAmendment && line.parentItem != null && calculateQuantity(line.parentItem) === 0) {
        return 0;
    }
    // Get the bundled quantity, if it exists
    var originalQty = line.BundledQuantity__c;
    if (originalQty != null) {
        // Quantity of percent-of-total subscription and accessory options stays as entered
        var parentQty = ((line.parentItem == null) || (line.isDynamicSubscription) || line.isOptionTypeAccessory)
            ? 1
            : calculateQuantity(line.parentItem);
        var batchQty = line.BatchQuantity__c;
        var qty = originalQty;
        if ((batchQty != null) && (batchQty != 0)) {
            qty = Math.ceil(originalQty / parseFloat(batchQty));
        }
        return qty * parentQty;
    }
    return line.Quantity__c;
}

/**
 * Evaluates the price rules that act on a given quote.
 * @param {QuoteModel2} q A QuoteModel2 that represents the quote
 * @param {Connection} connection A JSForce Connection object to callback to SFDC server
 * @param {FormulaFieldEngine} formulaEngine The engine by which the price rule evaluator can process formulas
 * @returns {Promise} Resolves when price rules finish evaluating, or immediately if there are no price rules
 * @private
 */
function evaluatePriceRules(q, eventPeriod, connection, apex, formulaEngine) {
    if ((q.Id != null) && /* (disableExtraProcessing != true) && */ SettingsUtils.hasQuotePriceRules()) {
        // Quote ID is required by the price rule evaluator, and should never be null during normal use

        var qlprEvaluator = new QuoteLinePriceRuleEvaluator(q, formulaEngine);
        if (connection)
            qlprEvaluator.setConnection(connection);
        if(apex)
            qlprEvaluator.setApex(apex);
        return qlprEvaluator.evaluate(q, eventPeriod);
    } else {
        return new Promise(function(resolve) {resolve()});
    }
}

/**
 * Resets all of the total attributes on the QuoteModel2 and all of the QuoteLineGroupModels
 * @param {QuoteModel2} quote The quote to reset.
 * @private
 */
function resetTotals(quote) {
    var prefix = SettingsUtils.getPrefix();
    // Reset totals for the quote
    quote.listProductTotal = 0;
    quote.customerProductTotal = 0;
    quote.netProductTotal = 0;
    quote.regularProductTotal = 0;
    quote.netTotal = 0;
    quote.customerTotal = 0;
    quote.regularTotal = 0;
    quote.listTotal = 0;
    // Reset the totals on each group
    var groupCount = quote.groups.length;
    for (var i = 0; i < groupCount; i++) {
        var group = quote.groups[i];
        group.listProductTotal = 0;
        group.customerProductTotal = 0;
        group.netProductTotal = 0;
        group.regularProductTotal = 0;
        group.record[prefix + "ListTotal__c"] = 0;
        group.record[prefix + "CustomerTotal__c"] = 0;
        group.record[prefix + "NetTotal__c"] = 0;
    }
}

/**
 * Calculate the price of lines that are not dynamic subscriptions
 * @param {QuoteCalculator} qc The quote calculator, passed in because there is no 'this' in anonymous functions.
 * @param {QuoteModel2} quote The quote to check for fixed items
 * @private
 */
function calculateFixedItems(qc, quote) {
    var lineCount = quote.lineItems.length;
    // For every line in the quote,
    for (var i = 0; i < lineCount; i++) {
        var line = quote.lineItems[i];
        // If the line is not a dynamic subscription, create a line calculator and apply it to the line.
        if (!line.isDynamic) {
            var lCalc = new LineCalculator(qc, line, null, null);
            lCalc.calculate();
            // Non-optional, non-excluded lines are added to the quote's total
            if (!line.Optional__c) {
                if (!line.isExcludedFromMaintenance) {
                    // Increment the quote's totals
                    quote.listProductTotal += line.listProductTotal;
                    quote.customerProductTotal += line.customerProductTotal;
                    quote.netProductTotal += line.netProductTotal;
                    quote.regularProductTotal += line.regularProductTotal;
                }
            }
            // If the line is not optional, or its parent group IS optional, add its total to the parent group's.
            if (line.parentGroup != null) {
                if (!line.Optional__c || (line.parentGroup.record[SettingsUtils.getPrefix() + "Optional__c"] === true)) {
                    if (!line.isExcludedFromMaintenance) {
                        // Increment the parent group's totals
                        line.parentGroup.listProductTotal += line.listProductTotal;
                        line.parentGroup.customerProductTotal += line.customerProductTotal;
                        line.parentGroup.netProductTotal += line.netProductTotal;
                        line.parentGroup.regularProductTotal += line.regularProductTotal;
                    }
                }
            }
        }
    }

}



/**
 * Calculate the price of lines that are dynamic subscriptions
 * @param {QuoteCalculator} qc The quote calculator, passed in because there is no 'this' in anonymous functions.
 * @param {QuoteModel2} quote The quote to check for dynamic items
 * @return {Void}
 * @private
 */
function calculateDynamicItems(qc, quote) {
    var lines = quote.lineItems;
    var lineCount = lines.length;
    var qty;
    // For each line in the quote,
    for (var i = 0; i < lineCount; i++) {
        var line = lines[i];
        if (!line.isDynamic) {
            continue;
        }
        // If the line is a dynamic subscription, create and apply a line calculator.
        var lcalc = new LineCalculator(qc, line, null, null);
        // Get the Percent Value of the subscription, or 0 if none exists.
        var subPercent = line.SubscriptionPercent__c || 0;
        var productTotal = 0;
        // For every line covered by the subscription:
        quote.getLinesCoveredBySubscription(line).forEach(function (subLine) {
            // On an Amendment, if you are adding net New PoT subscription prices, calculate total using full quantities
            if (subLine.isCountedByDynamicSubscription(line) && line.parentQuote.isAmendment && !line.Existing__c) {
                qty = (subLine.isPricingMethodBlock || subLine.DiscountScheduleType__c === "Slab") ? 1 : subLine.Quantity__c;
                if (line.isSubscriptionBaseNet) {
                    productTotal += subLine.NetPrice__c * qty;
                } else if (line.isSubscriptionBaseCustomer) {
                    productTotal += subLine.CustomerPrice__c * qty;
                } else if (line.isSubscriptionBaseRegular) {
                    productTotal += subLine.RegularPrice__c * qty;
                } else if (subLine.ListPrice__c != null) {
                    productTotal += subLine.ListPrice__c * subLine.Quantity__c;
                }
                // On an amendment that adds item quantity, use the relevant product total
            } else if (subLine.isCountedByDynamicSubscription(line) && (line.actualQuantity >= 0 || !line.parentQuote.isAmendment)) {
                if (line.isSubscriptionBaseNet && subLine.netProductTotal != null) {
                    productTotal += subLine.netProductTotal;
                } else if (line.isSubscriptionBaseCustomer && subLine.customerProductTotal != null) {
                    productTotal += subLine.customerProductTotal;
                } else if (line.isSubscriptionBaseRegular && subLine.regularProductTotal != null) {
                    productTotal += subLine.regularProductTotal;
                } else if (subLine.listProductTotal != null) {
                    productTotal += subLine.listProductTotal;
                } else {
                    console.log("Missing QuoteLine=>listProductTotal. Leaving Product Total at 0 for option " + subLine.ProductName__c);
                }
                // On an amendment that decreases the quantity of an item, use the prior quantity and the relevant price
            } else if (subLine.isCountedByDynamicSubscription(line) && quote.isAmendment && line.actualQuantity < 0 && subLine.Existing__c) {
                qty = (subLine.isPricingMethodBlock || subLine.DiscountScheduleType__c === "Slab")
                    ? 1
                    : subLine.PriorQuantity__c;
                if (line.isSubscriptionBaseNet) {
                    productTotal += subLine.NetPrice__c * qty;
                } else if (line.isSubscriptionBaseCustomer) {
                    productTotal += subLine.CustomerPrice__c * qty;
                } else if (line.isSubscriptionBaseRegular) {
                    productTotal += subLine.RegularPrice__c * qty;
                } else if (subLine.ListPrice__c != null) {
                    productTotal += subLine.ListPrice__c * subLine.PriorQuantity__c;
                }
            }
        });
        line.ListPrice__c = productTotal * (subPercent / 100);
        var dynamicSubContractedDiscount = null;
        if (lcalc.contractedPriceId != null) {
            // For dynamic subs with contracted discount, the discount is stored in Special Price
            dynamicSubContractedDiscount = line.SpecialPrice__c;
            var discountedSubPercent = subPercent * (100 - dynamicSubContractedDiscount) / 100;
            line.SpecialPrice__c = productTotal * (discountedSubPercent / 100);
        }
        lcalc.calculate();
        if (dynamicSubContractedDiscount != null) {
            line.SpecialPrice__c = dynamicSubContractedDiscount;
        }
    }
}

/**
 * Calculate the totals for this quote, and all of its groups.
 * @param {QuoteModel2} quote The quote to be calculated.
 * @private
 */
function calculateTotals(quote) {
    // For each line in the quote, increment the Quote totals
    quote.lineItems.forEach(function (line) {
        if (!line.Optional__c) {
            quote.netTotal += line.netTotal;
            quote.customerTotal += line.customerTotal;
            quote.listTotal += line.listTotal;
            quote.partnerTotal += line.partnerTotal;
            quote.regularTotal += line.regularTotal;
        }
        // If the line has a parent group, increment the group totals
        if (line.parentGroup != null) {
            if (!line.Optional__c || line.parentGroup.Optional__c) {
                line.parentGroup.ListTotal__c = line.parentGroup.ListTotal__c + line.listTotal;
                line.parentGroup.CustomerTotal__c = line.parentGroup.CustomerTotal__c + line.customerTotal;
                line.parentGroup.NetTotal__c = line.parentGroup.NetTotal__c + line.netTotal;
            }
        }
    });
    // Lastly, we need to make sure that the quote totals, and all group totals, are truncated to the proper
    // number of decimals
    quote.netTotal = NumberUtils.setScale(quote.netTotal, 2);
    quote.customerTotal = NumberUtils.setScale(quote.customerTotal, 2);
    quote.listTotal = NumberUtils.setScale(quote.listTotal, 2);
    quote.regularTotal = NumberUtils.setScale(quote.regularTotal, 2);
    quote.record[SettingsUtils.getPrefix() + "NetAmount__c"] = quote.netTotal;
    quote.record[SettingsUtils.getPrefix() + "ListAmount__c"] = quote.listTotal;
    quote.record[SettingsUtils.getPrefix() + "CustomerAmount__c"] = quote.customerTotal;
    quote.record[SettingsUtils.getPrefix() + "RegularAmount__c"] = quote.regularTotal;
    quote.record[SettingsUtils.getPrefix() + "LineItemCount__c"] = quote.lineItems.length;

    quote.groups.forEach(function(group) {
        group.ListTotal__c = NumberUtils.setScale(group.ListTotal__c, 2);
        group.CustomerTotal__c = NumberUtils.setScale(group.CustomerTotal__c, 2);
        group.NetTotal__c = NumberUtils.setScale(group.NetTotal__c, 2);
    });
}

/**
 * For all lines with components, rolls up the totals such that parents include the cost of their children.
 * @param {QuoteModel2} quote The quote whose line items should be processed.
 * @private
 */
function rollupComponents(quote) {
    quote.lineItems.forEach(function(line) {
        // If the line has components, set its component totals to 0, and call rollupLine
        var pkg = line.hasComponents;
        line.ComponentTotal__c = pkg ? 0 : null;
        line.ComponentListTotal__c = pkg ? 0 : null;
        line.ComponentCost__c = pkg ? 0 : null;
        if (pkg) {
            rollupLine(line);
        }
    });
}

/**
 * For a single line with components, calculates the component totals, with a recursive call if needed
 * @param {QuoteLineModel} parent The line whose components should be processed.
 * @private
 */
function rollupLine(parent) {
    var netTotal = 0;
    var listTotal = 0;
    var cost = 0;
    parent.components.forEach(function(line) {
        if (!line.Optional__c || line.parentGroup != null && line.parentGroup.Optional__c) {
            netTotal += line.netTotal;
            listTotal += line.listTotal;
            cost += (line.Quantity__c || 0) * (line.UnitCost__c || 0);
        }
        if (line.hasComponents) {
            rollupLine(line);
            netTotal += line.ComponentTotal__c;
            listTotal += line.ComponentListTotal__c;
            cost += line.ComponentCost__c;
        }
    });

    parent.ComponentTotal__c = netTotal;
    parent.ComponentListTotal__c = listTotal;
    parent.ComponentCost__c = cost;
}

/**
 * Check for the existence of a plugin onInit method and execute it if it exists
 * @param {QuoteCalculator} qc The quote calculator calling this method
 * @param {Object} plugin The plugin being executed
 * @returns {Promise} Resolves once the plugin's method has finished
 * @private
 */
function executePluginOnInit(qc, plugin) {
    if (plugin && (typeof plugin.onInit == 'function')) {
        return plugin.onInit(qc.quote.lineItems);
    } else {
        return Promise.resolve();
    }
}

/**
 * Check for the existence of a JSQCP onBeforeCalculate method and execute it if it exists
 * @param {QuoteCalculator} qc The quote calculator calling this method
 * @param {Object} plugin The plugin being executed
 * @returns {Promise} Resolves once the plugin's method has finished
 * @private
 */
function executePluginOnBeforeCalculate(qc, plugin) {
    if (plugin && (typeof plugin.onBeforeCalculate == 'function')) {
        return plugin.onBeforeCalculate(qc.quote, qc.quote.lineItems);
    } else {
        return Promise.resolve();
    }
}

/**
 * Check for the existence of a JSQCP onBeforePriceRules method and execute it if it exists
 * @param {QuoteCalculator} qc The quote calculator calling this method
 * @param {Object} plugin The plugin being executed
 * @returns {Promise} Resolves once the plugin's method has finished
 * @private
 */
function executePluginOnBeforePriceRules(qc, plugin) {
    if (plugin && (typeof plugin.onBeforePriceRules == 'function')) {
        return plugin.onBeforePriceRules(qc.quote, qc.quote.lineItems);
    } else {
        return Promise.resolve();
    }
}

/**
 * Check for the existence of a JSQCP onAfterPriceRules method and execute it if it exists
 * @param {QuoteCalculator} qc The quote calculator calling this method
 * @param {Object} plugin The plugin being executed
 * @returns {Promise} Resolves once the plugin's method has finished
 * @private
 */
function executePluginOnAfterPriceRules(qc, plugin) {
    if (plugin && (typeof plugin.onAfterPriceRules == 'function')) {
        return plugin.onAfterPriceRules(qc.quote, qc.quote.lineItems);
    } else {
        return Promise.resolve();
    }
}

/**
 * Check for the existence of a JSQCP onAfterCalculate method and execute it if it exists
 * @param {QuoteCalculator} qc The quote calculator calling this method
 * @param {Object} plugin The plugin being executed
 * @returns {Promise} Resolves once the plugin's method has finished
 * @private
 */
function executePluginOnAfterCalculate(qc, plugin) {
    if (plugin && (typeof plugin.onAfterCalculate == 'function')) {
        return plugin.onAfterCalculate(qc.quote, qc.quote.lineItems);
    } else {
        return Promise.resolve();
    }
}


// ===== TESTING METHODS PAST THIS POINT ====

/**
 * Method for testing the functionality of resetTotals()
 * @private
 */
QuoteCalculator.prototype.resetTotalsTest = function() {
    resetTotals(this.quote);
};

/**
 * Method for testing the functionality of calculateQuantities()
 * @private
 */
QuoteCalculator.prototype.calculateQuantitiesTest = function() {
    calculateQuantities(this.quote, this);
};

/**
 * Method for testing the functionality of calculateTotals()
 * @private
 */
QuoteCalculator.prototype.calculateTotalsTest = function() {
    calculateTotals(this.quote);
};

/**
 * Method for testing the functionality of rollupComponents()
 * @private
 */
QuoteCalculator.prototype.rollupComponentsTest = function() {
    rollupComponents(this.quote);
};

},{"./AccountModel.js":1,"./DiscountScheduleModel.js":2,"./FormulaFieldCalculator.js":4,"./LineCalculator.js":5,"./PluginLoader.js":7,"./QuoteLinePriceRuleEvaluator.js":11,"./QuoteSummarizer.js":13,"./TargetCalculator2.js":16,"./Utils/ApexUtils.js":17,"./Utils/IdUtils.js":19,"./Utils/MetaDataUtils.js":22,"./Utils/NumberUtils.js":24,"./Utils/OAuthUtils.js":25,"./Utils/SettingsUtils.js":27,"jsforce":56}],9:[function(require,module,exports){
"use strict";

var SettingsUtils = require("./Utils/SettingsUtils.js");
var DateUtils = require("./Utils/DateUtils.js");
var ModelUtils = require("./Utils/ModelUtils.js");
var QuoteLineModel = require("./QuoteLineModel.js");

module.exports = QuoteLineGroupModel;

var PROTOTYPE_INITIALIZED = false;
var FIELDS = [
    "StartDate__c",
    "EndDate__c",
    "ListTotal__c",
    "NetTotal__c",
    "CustomerTotal__c",
    "Optional__c",
    "SubscriptionTerm__c",
    "TargetCustomerAmount__c",
    "AdditionalDiscountRate__c",
    "CurrencyIsoCode",
    "Quote__c"
];

function defineGetAndSet(field) {
    var getter;
    var setter;
    var prefix = SettingsUtils.getPrefix();
    var sysField = false;
    switch(field) {
        case 'StartDate__c':
        case 'EndDate__c':
            // Dates must be converted
            getter = ModelUtils.dateGetter;
            setter = ModelUtils.dateSetter;
            break;
        case 'Id':
        case 'CreatedById':
        case 'LastModifiedById':
            // System Id fields should be converted, and never set
            getter = ModelUtils.idGetter;
            setter = ModelUtils.invalidSetter;
            sysField = true;
            break;
        case 'CreatedDate':
        case 'LastModifiedDate':
            getter = ModelUtils.dateGetter;
            setter = ModelUtils.invalidSetter;
            sysField = true;
            break;
        case "CurrencyIsoCode":
            getter = ModelUtils.standardGetter;
            setter = ModelUtils.invalidSetter;
            sysField = true;
            break;
        case 'Quote__c':
            getter = ModelUtils.idGetter;
            setter = ModelUtils.standardSetter;
            break;
        default:
            getter = ModelUtils.standardGetter;
            setter = ModelUtils.standardSetter;
    }
    Object.defineProperty(QuoteLineGroupModel.prototype, field, {
        get: function() {var prefix = sysField ? '' : SettingsUtils.getPrefix(); return getter(prefix + field, this.record);},
        set: function(v) {var prefix = sysField ? '' : SettingsUtils.getPrefix(); setter(v, prefix + field, this.record);}
    });
}

function defineAllGetsAndSets(fields) {
    if (PROTOTYPE_INITIALIZED) {
        return;
    }
    var l = fields.length;
    for (var i = 0; i < l; i++) {
        defineGetAndSet(fields[i]);
    }
    PROTOTYPE_INITIALIZED = true;
}

/**
 *
 * @param {QuoteModel2} quote A Quote Model
 * @param {Object} data The record of a quote line group
 * @constructor
 */
function QuoteLineGroupModel(/*QuoteModel2*/ quote, /*Object*/ data) {
    ModelUtils.copyProperties(data, this);
    this.lineItems = [];
    this.quote = quote;
    this.prefix = SettingsUtils.getPrefix();
    if (SettingsUtils.isMultiCurrencyOrg()) {
        this.record["CurrencyIsoCode"] = quote.record["CurrencyIsoCode"];
    }
    // Totals
    this.listProductTotal = null;
    this.customerProductTotal = null;
    this.netProductTotal = null;
    this.regularProductTotal = null;
    this.record[this.prefix + "Quote__r"] = quote.record;
    defineAllGetsAndSets(FIELDS);
}

QuoteLineGroupModel.prototype = {
    /**
     * True if any of the lines in this group are dynamic
     * @returns {boolean}
     */
    get hasDynamicLineItems() {
        var lineCount = this.lineItems.length;
        for (var i = 0; i < lineCount; i++) {
            if (this.lineItems[i].isDynamic) {
                return true;
            }
        }
        return false;
    },
    /**
     * If this group has a subscription term on its record, returns that value. If not, returns the quote's term
     * @returns {number}
     */
    get effectiveSubscriptionTerm() {
        var term = this.SubscriptionTerm__c;
        return (term != null) ? term : this.quote.SubscriptionTerm__c;
    },
    /**
     * Calculate the subscription term using the effective start and end dates
     * @returns {number}
     */
    get calculatedSubscriptionTerm() {
        var groupTerm = null;
        var startDate = this.effectiveStartDate;
        var endDate = this.effectiveEndDate;
        if (startDate != null && endDate != null) {
            endDate.setDate(endDate.getDate() + 1);
            if (SettingsUtils.subscriptionTermUnitIsDay()) {
                return DateUtils.daysBetween(startDate, endDate);
            } else {
                return DateUtils.monthsBetween(startDate, endDate);
            }
        } else {
            return this.effectiveSubscriptionTerm;
        }
    },
    /**
     * The group's start date if it exists. If no date exists, the quote's start date is used instead
     * @returns {Date}
     */
    get effectiveStartDate() {
        return this.StartDate__c || this.quote.StartDate__c;
    },
    /**
     * Returns the group's end date, if it exists. If not, returns the Quote's end date.
     * @returns {Date}
     */
    get effectiveEndDate() {
        return this.EndDate__c || this.quote.EndDate__c;
    },
    /**
     * Calculates the group's end date from its effective start date and term. If either of those values does not exist,
     * uses the effective end date.
     * @returns {Date}
     */
    get calculatedEndDate() {
        if (this.effectiveSubscriptionTerm != null && this.effectiveStartDate != null) {
            var endDate = this.effectiveStartDate;
            var term = Math.floor(this.effectiveSubscriptionTerm);
            if (SettingsUtils.subscriptionTermUnitIsDay()) {
                endDate.setUTCDate(endDate.getUTCDate() + term - 1);
            } else {
                endDate.setUTCMonth(endDate.getUTCMonth() + term);
                endDate.setUTCDate(endDate.getUTCDate() - 1);
            }
            return endDate;
        }
        return this.effectiveEndDate;
    }
};

/**
 * Adds the provided Quote Line Model to this group, and returns it
 * @param {QuoteLineModel} item A quote line model object
 * @returns {QuoteLineModel}
 */
QuoteLineGroupModel.prototype.addLineItem = function(/*QuoteLineModel*/ item) {
    this.lineItems.push(item);
    item.group = this;
    // Line items on optional groups are themselves optional
    if (this.Optional__c) {
        item.record[SettingsUtils.getPrefix() + "Optional__c"] = true;
    }
    return item;
};

/**
 * Removes the provided line item from this group
 * @param {QuoteLineModel} item A line item to be removed
 */
QuoteLineGroupModel.prototype.removeLineItem = function(item) {
    for (var i = 0; i < this.lineItems.length; i++) {
        if (this.lineItems[i].key == item.key) {
            this.lineItems = this.lineItems.slice(0, i).concat(this.lineItems.slice(i + 1, this.lineItems.length));
            return;
        }
    }
};
},{"./QuoteLineModel.js":10,"./Utils/DateUtils.js":18,"./Utils/ModelUtils.js":23,"./Utils/SettingsUtils.js":27}],10:[function(require,module,exports){
"use strict";

var Constants = require("./Utils/JSQCConstants.js");
var SettingsUtils = require("./Utils/SettingsUtils.js");
var DateUtils = require("./Utils/DateUtils.js");
var ModelUtils = require("./Utils/ModelUtils.js");
var IdUtils = require("./Utils/IdUtils.js");
module.exports = QuoteLineModel;
var PROTOTYPE_INITIALIZED = false;

var FIELDS = [
	"OptionType__c",
	"DiscountSchedule__c",
	"TermDiscountSchedule__c",
	"ProductName__c",
	"ProductCode__c",
	"Dimension__c",
	"ComponentVisibility__c",
	"Bundled__c",
	"Optional__c",
	"NonDiscountable__c",
	"ComponentUpliftedByPackage__c",
	"ComponentDiscountedByPackage__c",
	"NonPartnerDiscountable__c",
	"Existing__c",
	"Renewal__c",
	"DiscountScheduleType__c",
	"VolumeDiscount__c",
	"TermDiscount__c",
	"DiscountTier__c",
	"TermDiscountTier__c",
	"Quantity__c",
	"PriorQuantity__c",
	"AdditionalQuantity__c",
	"SubscribedAssetIds__c",
	"ComponentSubscriptionScope__c",
	"SubscriptionScope__c",
	"SubscriptionCategory__c",
	"BundledQuantity__c",
	"BatchQuantity__c",
	"SubscriptionPricing__c",
	"SubscriptionTargetPrice__c",
	"SubscriptionBase__c",
	"Product__c",
	"Number__c",
	"RenewedAsset__c",
	"PricingMethod__c",
	"Discount__c",
	"PartnerDiscount__c",
	"DistributorDiscount__c",
	"AdditionalDiscountAmount__c",
	"PartnerPrice__c",
	"NetPrice__c",
	"UpgradedAsset__c",
	"RegularPrice__c",
	"ComponentTotal__c",
	"ComponentListTotal__c",
	"ComponentCost__c",
	"RequiredBy__r",
	"RequiredBy__c",
	"ContractedPrice__c",
	"SpecialPriceType__c",
	"SpecialPrice__c",
	"UnitCost__c",
	"OriginalUnitCost__c",
	"OptionDiscount__c",
	"OptionDiscountAmount__c",
	"ListPrice__c",
	"OriginalPrice__c",
	"UpliftAmount__c",
	"Uplift__c",
	"PreviousSegmentUplift__c",
	"PreviousSegmentPrice__c",
	"BlockPrice__c",
	"MaximumPrice__c",
	"MinimumPrice__c",
	"SegmentIndex__c",
	"SegmentLabel__c",
	"SegmentKey__c",
	"MarkupAmount__c",
	"MarkupRate__c",
	"CompoundDiscountRate__c",
	"ProratedPrice__c",
	"ProratedListPrice__c",
	"SubscriptionTerm__c",
	"DefaultSubscriptionTerm__c",
	"SubscriptionPercent__c",
	"ProrateMultiplier__c",
	"StartDate__c",
	"EndDate__c",
	"Group__r",
	"Quote__r",
	"Product__r",
	"ProductOption__c",
	"ProductOption__r"
];

function defineGetAndSet(field) {
	var getter;
	var setter;
	var sysField = false;
	switch(field) {
		case 'StartDate__c':
		case 'EndDate__c':
			// Dates must be converted
			getter = ModelUtils.dateGetter;
			setter = ModelUtils.dateSetter;
			break;
		case 'DiscountSchedule__c':
		case 'TermDiscountSchedule__c':
		case 'RequiredBy__c':
		case 'RenewedAsset__c':
		case 'Product__c':
		case 'BlockPrice__c':
		case 'Dimension__c':
		case "ContractedPrice__c":
		case "DiscountTier__c":
		case "TermDiscountTier__c":
		case "UpgradedAsset__c":
			// Ids must be converted to 18 characters on retrieval, but may be set normally
			getter = ModelUtils.idGetter;
			setter = ModelUtils.standardSetter;
			break;
		case 'Id':
		case 'CreatedById':
		case 'LastModifiedById':
			// System Id fields should be converted, and never set
			getter = ModelUtils.idGetter;
			setter = ModelUtils.invalidSetter;
			sysField = true;
			break;
		case 'CreatedDate':
		case 'LastModifiedDate':
			getter = ModelUtils.dateGetter;
			setter = ModelUtils.invalidSetter;
			sysField = true;
			break;
		default:
			getter = ModelUtils.standardGetter;
			setter = ModelUtils.standardSetter;
	}
	Object.defineProperty(QuoteLineModel.prototype, field, {
		get: function() {var prefix = sysField ? '' : SettingsUtils.getPrefix(); return getter(prefix + field, this.record);},
		set: function(v) {var prefix = sysField ? '' : SettingsUtils.getPrefix(); setter(v, prefix + field, this.record);}
	});
}

function defineAllGetsAndSets(fields) {
	if (PROTOTYPE_INITIALIZED) {
		return;
	}
	var l = fields.length;
	for (var i = 0; i < l; i++) {
		defineGetAndSet(fields[i]);
	}
	Object.defineProperty(QuoteLineModel.prototype, 'CustomerPrice__c', {
		get: function () {
			if (this.record[SettingsUtils.getPrefix() + "CustomerPrice__c"] == null && this.isPricingMethodCustom) {
				this.record[SettingsUtils.getPrefix() + "CustomerPrice__c"] = this.ListPrice__c;
			}
			return this.record[SettingsUtils.getPrefix() + "CustomerPrice__c"];
		},
		set: function(v) {
			this.record[SettingsUtils.getPrefix() + "CustomerPrice__c"] = v;
		}
	});
	PROTOTYPE_INITIALIZED = true;
}

/**
 *
 * @param {QuoteModel2} parentQuote The quote that contains this line
 * @param {QuoteLineGroupModel} parentGroup The group containing this line. Can be null.
 * @param {Object} data The data passed in from the server
 * @constructor
 */
function QuoteLineModel(parentQuote, parentGroup, data) {
	ModelUtils.copyProperties(data, this);
	defineAllGetsAndSets(FIELDS);
	// This needs to be after copyProperties
	this.parentQuote = parentQuote;
	this.parentGroup = parentGroup;
	this.prefix = SettingsUtils.getPrefix();
	// Totals
	this.listProductTotal = null;
	this.customerProductTotal = null;
	this.netProductTotal = null;
	this.regularProductTotal = null;

	// If this line is an option of another line, then parentItem will be populated when the parent calls
	// its addComponent() method
	this.parentItem = null;
	// Information about this product's options
	this.components = [];
	this.componentsById = null;
	this.componentsByKey = null;

	// Store the original quantity and term discount IDs so we don't lose them if they're overridden later.
	if (this.DiscountSchedule__c != null) {
		this.originalVolumeSchedule = this.DiscountSchedule__c;
	}
	if (this.TermDiscountSchedule__c != null) {
		this.originalTermSchedule = this.TermDiscountSchedule__c;
	}

	this.record[this.prefix + "Quote__r"] = parentQuote.record;
	if (parentGroup != null) {
		this.record[this.prefix + "Group__r"] = parentGroup.record;
	}
}



QuoteLineModel.prototype = {
	get amountDiscountProrated() {
		var fieldName = SettingsUtils.getProrateAmountDiscountFieldName();
		if (fieldName != null && this.record[fieldName]) {
			return true;
		} else {
			return false;
		}
	},
	get isTimeBasedSegment() {
		var dType = this.dimType;
		return dType === Constants.TYPE_YEARLY_DIMENSION || dType === Constants.TYPE_MONTHLY_DIMENSION ||
			dType === Constants.TYPE_QUARTERLY_DIMENSION || dType === Constants.TYPE_CUSTOM_DIMENSION;
	},
	get blockPricingField() {
		if (this.Product__r == null) {
			return null;
		}
		return this.Product__r[this.prefix + "BlockPricingField__c"];
	},
	get quoteId() {
		return this.parentQuote.Id;
	},
	get initComponentIndex() {
		this.componentsByKey = {};
		this.componentsById = {};
		var componentCount = this.components.length;
		for (var i = 0; i < componentCount; i++) {
			var component = this.components[i];
			this.componentsById[component.Id] = component;
			this.componentsByKey[component.key] = component;
		}
	},
	/**
	 * True if this line is a Percent-of-Total subscription
	 * @returns {boolean}
	 */
	get isDynamicSubscription() {
		return this.isSubscription && this.isDynamic;
	},
	/**
	 * True if this line is a Percent-of-Total subscription
	 * @returns {boolean}
	 */
	get isDynamicAsset() {
		return (!this.isSubscription && this.isDynamic)
	},
	/**
	 * True if this line is a Percent-of-Total subscription
	 * @returns {boolean}
	 */
	get isDynamic() {
		var pm = this.PricingMethod__c;
		var sp = this.SubscriptionPricing__c;
		return ((pm != null) && (pm.toLowerCase() === Constants.PRICING_METHOD_PERCENT_OF_TOTAL)) || ((sp != null) && (sp.toLowerCase() === Constants.PRICING_METHOD_PERCENT_OF_TOTAL));
	},
	/**
	 * True if this line is a yearly segment on an MDQ product
	 * @returns {boolean}
	 */
	get isYearlyDimension() {
		return this.dimType === Constants.TYPE_YEARLY_DIMENSION;
	},

	get isCustomDimension() {
		return this.dimType === Constants.TYPE_CUSTOM_DIMENSION;
	},
	/**
	 * True if this line is the target of a volume-based discount schedule
	 * @returns {boolean}
	 */
	get isVolumeDiscounted() {
		return this.DiscountSchedule__c != null;
	},
	/**
	 * True if this line is the target of a term-based discount schedule
	 * @returns {boolean}
	 */
	get isTermDiscounted() {
		return (this.Bundled__c != true) && (this.TermDiscountSchedule__c != null);
	},
	/**
	 * True if this quote line is an accessory of its parent item
	 * @returns {boolean}
	 */
	get isOptionTypeAccessory() {
		return this.OptionType__c != null && this.OptionType__c.toLowerCase() === 'accessory';
	},
	/**
	 * True if this line should be excluded from Percent-of-Total calculation, when it would normally be included.
	 * @returns {boolean}
	 */
	get isExcludedFromMaintenance() {
		return (this.Product__c != null) && (this.Product__r != null) && (this.Product__r[this.prefix + "ExcludeFromMaintenance__c"] === true);
	},
	/**
	 * True if this line should be included in Percent-of-Total calculations, when it would normally be excluded.
	 * @returns {boolean}
	 */
	get isIncludedInMaintenance() {
		return (this.Product__c != null) && (this.Product__r != null) && (this.Product__r[this.prefix + "IncludeInMaintenance__c"] === true);
	},
	/**
	 * True if this line can be discounted.
	 * @returns {boolean}
	 */
	get isDiscountable() {
		return !this.Bundled__c && !this.NonDiscountable__c && !this.isPricingMethodCustom;
	},
	/**
	 * True if this line is a Percent-of-Total subscription calculated based on Net Prices
	 * @returns {boolean}
	 */
	get isSubscriptionBaseNet() {
		return this.SubscriptionBase__c != null && this.SubscriptionBase__c.toLowerCase() === 'net';
	},
	/**
	 * True if this quote line is a Percent-of-Total subscription calculated using Customer Prices
	 * @returns {boolean}
	 */
	get isSubscriptionBaseCustomer() {
		return this.SubscriptionBase__c != null && this.SubscriptionBase__c.toLowerCase() === 'customer';
	},
	/**
	 * True if this quote line is a Percent-of-Total subscription calculated using Regular Prices
	 * @returns {boolean}
	 */
	get isSubscriptionBaseRegular() {
		return this.SubscriptionBase__c != null && this.SubscriptionBase__c.toLowerCase() === "regular";
	},
	/**
	 * True if the quote line uses a custom pricing method
	 * @returns {boolean}
	 */
	get isPricingMethodCustom() {
		return this.PricingMethod__c === Constants.PRICING_METHOD_CUSTOM;
	},
	/**
	 * True if the quote line is cost-priced
	 * @returns {boolean}
	 */
	get isPricingMethodCost() {
		return this.PricingMethod__c === Constants.PRICING_METHOD_COST;
	},
	/**
	 * True if the quote line is block-priced
	 * @returns {boolean}
	 */
	get isPricingMethodBlock() {
		return this.PricingMethod__c === Constants.PRICING_METHOD_BLOCK;
	},
	/**
	 * True if this line is one that may be automatically discounted to reach a customer's Target Amount
	 * @returns {boolean}
	 */
	get isTargetDiscountable() {
		return !this.Optional__c && !this.Bundled__c && this.isDiscountable;
	},
	/**
	 * True if this line represents a component in a bundle
	 * @returns {boolean}
	 */
	get isComponent() {
		return (this.RequiredBy__c != null) || (this.parentItemKey != null);
	},
	/**
	 * True if this quote line is a subscription that targets its parent product
	 * @returns {boolean}
	 */
	get isComponentSubscriptionScopePackage() {
		return this.ComponentSubscriptionScope__c === 'Package';
	},
	/**
	 * True if this line is a subscription that targets its siblings in a bundle
	 * @returns {boolean}
	 */
	get isComponentSubscriptionScopeComponents() {
		return this.ComponentSubscriptionScope__c === 'Components';
	},
	/**
	 * True if this line is a subscription that targets both its parent and siblings in a bundle
	 * @returns {boolean}
	 */
	get isComponentSubscriptionScopeBoth() {
		return this.ComponentSubscriptionScope__c === 'Both';
	},
	/**
	 * True if this line is a subscription that targets its parent's parent
	 */
	get isComponentSubscriptionScopeParentPackage() {
		return this.ComponentSubscriptionScope__c === 'Parent Package';
	},
	/**
	 * True if this line is a subscription that targets its parent's siblings
	 * @returns {boolean}
	 */
	get isComponentSubscriptionScopeParentComponents() {
		return this.ComponentSubscriptionScope__c === 'Parent Components';
	},
	/**
	 * True if this line is a subscription that targets both both its parent's parent and siblings
	 * @returns {boolean}
	 */
	get isComponentSubscriptionScopeParentBoth() {
		return this.ComponentSubscriptionScope__c === 'Parent Both';
	},
	/**
	 * True if this line represents a subscribed asset
	 * @returns {boolean}
	 */
	get isFromSubscribedAsset() {
		//If this line represents a renewed asset:
		if (this.RenewedAsset__c != null) {
			var subscribedAssetIds = '';
			this.parentQuote.lineItems.forEach(function(otherLine) {
				if (otherLine.SubscribedAssetIds__c != null) {
					// Get all subscribed asset Ids from other lines.
					subscribedAssetIds += otherLine.SubscribedAssetIds__c + ',';
				}
			}, this);
			// If one of the subscribed asset ids is our renewed asset Id, return true
			if ((subscribedAssetIds.indexOf(this.RenewedAsset__c + ",") !== -1) || (subscribedAssetIds.indexOf(this.RenewedAsset__c.slice(0, 15)) !== -1)) {
				return true;
			}
		}
		return false;
	},
	/**
	 * True if this subscription only targets lines in the same group as itself
	 * @returns {boolean}
	 */
	get isSubscriptionScopeGroup() {
		return this.SubscriptionScope__c === 'Group';
	},
	/**
	 * True if this quote line is an MDQ line in a bundle that is uplifted by its parent
	 * @returns {Boolean}
	 */
	get isComponentUpliftedByPackage() {
		return this.ComponentUpliftedByPackage__c === true;
	},
	/**
	 * True if this quote line is subject to any discounts applied to its parent line
	 * @returns {Boolean}
	 */
	get isComponentDiscountedByPackage() {
		return this.ComponentDiscountedByPackage__c === true;
	},
	/**
	 * True if this line is a subscription
	 * @returns {boolean}
	 */
	get isSubscription() {
		return (this.SubscriptionPricing__c != null);
	},
	/**
	 * True if this quote line can be subject to a partner discount
	 * @returns {boolean}
	 */
	get isPartnerDiscountable() {
		return !this.Bundled__c && !(this.NonPartnerDiscountable__c === true);
	},
	/**
	 * True if this line is a parent item with components
	 * @returns {boolean}
	 */
	get hasComponents() {
		return this.components != null && this.components.length > 0;
	},
	/**
	 * True if the product represented by this line has as cost-based discount schedule applied to it
	 * @returns {boolean}
	 */
	get hasCostSchedule() {
		return (this.Product__r != null) && (this.Product__r[this.prefix + "CostSchedule__c"] != null);
	},
	/**
	 * Returns the ID of the cost-based schedule applied to this product
	 * @returns {String}
	 */
	get costScheduleId() {
		return this.Product__r == null ? null : this.Product__r[this.prefix + "CostSchedule__c"];
	},
	/**
	 * Indicates whether the subscription term from which term discounts are computed comes from this line, its parent
	 * group, or its parent quote
	 * @returns {String}
	 */
	get termDiscountLevel() {
		return this.Product__r == null ? null : this.Product__r[this.prefix + "TermDiscountLevel__c"];
	},
	/**
	 * The effective quantity of this quote line. Note that the effective quantity is not its true quantity, but an
	 * abstraction used during calculation.
	 * @returns {Number}
	 */
	get effectiveQuantity() {
		var blockPricedOrSlab = this.isPricingMethodBlock || this.DiscountScheduleType__c === 'Slab';
		var qtyUnchanged = this.Existing__c && this.PriorQuantity__c != null && (this.Quantity__c - this.PriorQuantity__c === 0);
		if (blockPricedOrSlab && qtyUnchanged) {
			return 0;
		} else if (blockPricedOrSlab) {
			return 1;
		} else if (this.Existing__c && this.isDynamicSubscription && this.ListPrice__c != 0 && this.actualQuantity == 0) {
			return this.Quantity__c;
		} else if (this.parentQuote.isAmendment && !this.isSubscription && this.actualQuantity < 0) {
			return 0;
		} else {
			return this.actualQuantity;
		}
	},
	/**
	 * The additional discount rate applied to this line. If no rate is directly applied, this may be the discount of its
	 * parent item, parent group, or the quote
	 * @returns {Number}
	 */
	get effectiveAdditionalDiscountRate() {
		if (this.Discount__c == null) {
			var isDiscountedComponent = this.isComponent && this.isComponentDiscountedByPackage;
			var parentHasDiscount = this.parentItem != null && this.parentItem.effectiveAdditionalDiscountRate != null;
			if (isDiscountedComponent && parentHasDiscount) {
				return this.parentItem.effectiveAdditionalDiscountRate;
			} else if (this.defaultDiscountRate != null) {
				return this.defaultDiscountRate;
			} else if (this.parentGroup != null && this.parentGroup.AdditionalDiscountRate__c != null) {
				return this.parentGroup.AdditionalDiscountRate__c;
			} else {
				return this.parentQuote.CustomerDiscount__c;
			}
		}
		return this.Discount__c;
	},
	/**
	 * The Effective Uplift may be inherited from a parent item if there is no line-level uplift
	 * @returns {Number}
	 */
	get effectiveUplift() {
		if (this.isComponent && this.isComponentUpliftedByPackage && this.parentItem != null && (this.SegmentIndex__c > 1 || this.parentQuote.isRenewal)) {
			return this.parentItem.effectiveUplift;
		} else if (this.Uplift__c == null) {
			return 0;
		}
		return this.Uplift__c;
	},
	/**
	 * The Actual Quantity is the difference between the quantity on the quote and the quantity that used to be on the
	 * quote
	 * @returns {Number}
	 */
	get actualQuantity() {
		// If this product already existed, we subtract the prior quantity from the current quantity
		return (this.Existing__c && (this.PriorQuantity__c != null)) ? this.Quantity__c - this.PriorQuantity__c : this.Quantity__c;
	},
	/**
	 * The Type of an MDQ dimension
	 * @returns {String}
	 */
	get dimType() {
		if (this.Dimension__c != null) {
			return this.dimensionType;
		}
	},
	/**
	 * The default subscription term of this quote line, or 12 if none exists
	 * @returns {Number}
	 */
	get defaultTerm() {
		return this.DefaultSubscriptionTerm__c == null ? 12 : this.DefaultSubscriptionTerm__c;
	},
	/**
	 * The quote line's subscription term. If no term exists, returns the parent group's term. If there is no group,
	 * or no term on the group, return the quote term
	 * @returns {Number}
	 */
	get subscriptionTerm() {
		if (this.SubscriptionTerm__c != null) {
			return this.SubscriptionTerm__c;
		} else if ((this.parentGroup != null) && (this.parentGroup.SubscriptionTerm__c != null)) {
			return this.parentGroup.SubscriptionTerm__c;
		} else {
			return this.parentQuote.SubscriptionTerm__c;
		}
	},
	/**
	 * The Effective Subscription Term is either based on the start and end dates, retrieved from a record, or based
	 * on the default value
	 * @returns {Number}
	 */
	get effectiveSubscriptionTerm() {
		var lineTerm = null;
		var startDate = this.effectiveStartDate;
		var endDate = this.effectiveEndDate;
		if ((startDate != null) && (endDate != null)) {
			endDate.setDate(endDate.getDate() + 1);
			return SettingsUtils.subscriptionTermUnitIsDay() ?
				DateUtils.daysBetween(startDate, endDate) :
				DateUtils.monthsBetween(startDate, endDate);
		}
		return (this.subscriptionTerm != null) ? this.subscriptionTerm : this.DefaultSubscriptionTerm__c;
	},
	/**
	 * The effective start date of this quote line. Calculated using the quote's FirstSegmentTermEndDate__c field for
	 * MDQ lines if possible. If that can't be done, or if the line is not MDQ, we use the line's start date, followed
	 * by the group's start date, and finally the quote's start date
	 * @returns {Date}
	 */
	get effectiveStartDate() {
		var quote = this.parentQuote;
		var group = this.parentGroup;
		if (this.dimType == Constants.TYPE_YEARLY_DIMENSION) {
			if (this.SegmentIndex__c > 1 && quote.FirstSegmentTermEndDate__c != null) {
				var fsed = quote.FirstSegmentTermEndDate__c;
				fsed.setUTCDate(fsed.getUTCDate() + 1);
				fsed.setUTCFullYear(fsed.getUTCFullYear() + this.SegmentIndex__c - 2);
				return fsed;
			}
			var date = (group != null ? group.StartDate__c : null) || quote.StartDate__c || new Date();
			date.setUTCFullYear(date.getUTCFullYear() + this.SegmentIndex__c - 1);
			return date;
		} else if (this.dimType == Constants.TYPE_QUARTERLY_DIMENSION || this.dimType == Constants.TYPE_MONTHLY_DIMENSION) {
			var multiplier = this.dimType == Constants.TYPE_QUARTERLY_DIMENSION ? 3 : 1;
			if (this.SegmentIndex__c > 1 && quote.FirstSegmentTermEndDate__c != null) {
				var fsed = quote.FirstSegmentTermEndDate__c;
				fsed.setUTCDate(fsed.getUTCDate() + 1);
				if (!SettingsUtils.subscriptionTermUnitIsDay()) {
					fsed.setUTCMonth(fsed.getUTCMonth() + (this.SegmentIndex__c - 2) * multiplier);
				} else {
					fsed.setUTCDate(fsed.getUTCDate() + (this.SegmentIndex__c - 2) * 30 * multiplier);
				}
				return fsed;
			}
			date = quote.StartDate__c || new Date();
			if (!SettingsUtils.subscriptionTermUnitIsDay()) {
				date.setUTCMonth(date.getUTCMonth() + (this.SegmentIndex__c - 1) * multiplier);
			} else {
				date.setUTCDate(date.getUTCDate() + (this.SegmentIndex__c - 1) * 30 * multiplier);
			}
			return date;
		}
		return this.StartDate__c || (group != null ? group.StartDate__c : null) || quote.StartDate__c;
	},
	/**
	 * Calculates the effective end date of this quote line, using its effective start date, its parent group and quote,
	 * and subscription durations
	 * @returns {Date}
	 */
	get effectiveEndDate() {
		var quote = this.parentQuote;
		var group = this.parentGroup;
		var isFixedTimeSegment = (this.isTimeBasedSegment && this.dimType != Constants.TYPE_CUSTOM_DIMENSION);
		if (isFixedTimeSegment && this.effectiveStartDate != null) {
			if (this.SegmentIndex__c == 1 && quote.FirstSegmentTermEndDate__c != null) {
				return quote.FirstSegmentTermEndDate__c;
			}
			var fullTermEndDate = this.effectiveStartDate;
			if (this.dimType == Constants.TYPE_YEARLY_DIMENSION) {
				fullTermEndDate.setUTCFullYear(fullTermEndDate.getUTCFullYear() + 1);
			} else {
				var multiplier = this.dimType == Constants.TYPE_QUARTERLY_DIMENSION ? 3 : 1;
				if (!SettingsUtils.subscriptionTermUnitIsDay()) {
					fullTermEndDate.setUTCMonth(fullTermEndDate.getUTCMonth() + multiplier);
				} else {
					fullTermEndDate.setUTCDate(fullTermEndDate.getUTCDate() + (30 * multiplier));
				}
			}
			fullTermEndDate.setUTCDate(fullTermEndDate.getUTCDate() - 1);
			var quoteEndDate = group == null ? quote.effectiveEndDate : (group.effectiveEndDate || group.calculatedEndDate);
			return quoteEndDate != null && quoteEndDate < fullTermEndDate ? quoteEndDate : fullTermEndDate;
		}
		return this.EndDate__c || (group != null ? group.EndDate__c : null) || quote.EndDate__c;
	},
	/**
	 * True if this line is visible in the Line Editor
	 * @returns {boolean}
	 */
	get isVisibleInLineEditor() {
		var vis = this.ComponentVisibility__c;
		var visAlwaysOrEditor = vis != null && (vis.toLowerCase() == 'always' || vis.toLowerCase() == 'editor only');
		if (visAlwaysOrEditor && (this.RenewedAsset__c != null) && SettingsUtils.isRenewedAssetsHiddenWhenEditing()) {
			return false;
		}
		return visAlwaysOrEditor;
	},
	/**
	 * Returns the value that the quote summarizer uses to calculate line subtotals.
	 * @returns {number}
	 */
	get displayedSubtotalField() {
		var fieldName = SettingsUtils.getLineEditorSubtotalsField();
		if(fieldName != null && fieldName.toLowerCase() != 'donotdisplay' && fieldName.toLowerCase() != 'default'){
			return this.record[fieldName];
		}else{
			return this.NetPrice__c;
		}
	}
};

/**
 * Adds the given QuoteLineModel to this model's component list, and updates the indexes accordingly.
 * @param {QuoteLineModel} component - The component to be added
 * @returns {QuoteLineModel} Returns the component provided to it.
 */
QuoteLineModel.prototype.addComponent = function(component) {
	if (this.componentsByKey == null) {
		this.initComponentIndex;
	}
	this.components.push(component);
	this.componentsByKey[component.key] = component;
	component.parentItem = this;
	component.parentItemKey = this.key;
	component.RequiredBy__c = this.Id;
	component.RequiredBy__r = this.record;
	var parentProduct = "Bundle";

	// Get name from Formula Field - only when line is saved
	if (this.ProductName__c != null) {
		parentProduct = this.ProductName__c;
	}

	component.requiredByMessage = SettingsUtils.getRequiredByMessage().replace("{0}", parentProduct);

	if ((this.subscriptionExists == null || !this.subscriptionExists) && component.isSubscription) {
		this.subscriptionExists = true;
	}
	return component;
};

/**
 * Remove the given component from this line's list of components
 * @param {QuoteLineModel} component A line that is a component of this line
 */
QuoteLineModel.prototype.removeComponent = function(component) {
	if (this.componentsByKey == null) {
		this.initComponentIndex();
	}
	for (var i = this.components.length - 1; i >= 0; i--) {
		if (this.components[i].key === component.key) {
			delete this.componentsByKey[component.key];
			this.components = this.components.slice(0, i).concat(this.components.slice(i + 1, this.components.length));
			return;
		}
	}
};

/**
 * Returns true if this line is counted by the dynamic subscription line provided
 * @param {QuoteLineModel} subLine A quote line model representing a dynamic subscription
 * @returns {Boolean}
 */
QuoteLineModel.prototype.isCountedByDynamicSubscription = function(subLine) {
	if (!this.Optional__c) {
		// Non-optional item products are always counted
		return true;
	}
	// Counted if the product and dynamic subscription are in the same group, and that group is optional
	if ((this.parentGroup != null) && (this.parentGroup === subLine.parentGroup) && (this.parentGroup.Optional__c)) {
		return true;
	}
	// Counted if the product and dynamic subscription are both optional MDQ segments with the same label (e.g, Year X)
	return (this.SegmentLabel__c != null && subLine.Optional__c && subLine.SegmentLabel__c === this.SegmentLabel__c);
};

// =============== EVERYTHING PAST HERE IS GETTERS AND SETTERS ==========================

/**
 * Returns the block price into which the given quantity falls
 * @param {Number} quantity The quantity to be tested against
 * @param {String} currencyCode If the org is multi-currency, test the block prices' currencyIsoCodes against this string
 * @param {Boolean} hasDiscountSchedule Is this product subject to a volume discount?
 * @returns {Object} An object representing a block price.
 */
QuoteLineModel.prototype.getBlockPriceByQuantity = function(quantity, currencyCode, hasDiscountSchedule) {
	if (quantity == null) {
		return null;
	}
	var endPrice;
	// Check if the list of block prices is not null.
	var blockPriceRelationship = this.Product__r[this.prefix + "BlockPrices__r"];
	if (blockPriceRelationship != null) {
		var blockPrices = blockPriceRelationship['records'];
		var blockPricesWithoutPriceBooks = [];
		var blockPricesWithPriceBooks = [];
		var bpCount = blockPrices.length;
		for (var i = 0; i < bpCount; i++) {
			if (blockPrices[i][this.prefix + "PriceBook2__c"] != null) {
				blockPricesWithPriceBooks.push(blockPrices[i]);
			} else {
				blockPricesWithoutPriceBooks.push(blockPrices[i]);
			}
		}

		blockPrices = blockPricesWithPriceBooks.length > 0 ? blockPricesWithPriceBooks : blockPricesWithoutPriceBooks;
		var newbpCount = blockPrices.length;

		for (var i = 0; i < newbpCount; i++) {
			var bp = blockPrices[i];
			// If the org is multi-currency, compare the currency iso code to the one passed in.
			if (SettingsUtils.isMultiCurrencyOrg()) {
				var code = bp["CurrencyIsoCode"];
				if (code !== currencyCode) {
					continue;
				}
			}

			if ((quantity >= bp[this.prefix + "LowerBound__c"]) && (quantity < bp[this.prefix + "UpperBound__c"])) {
				return bp;
			}

			if (quantity < bp[this.prefix + "LowerBound__c"] && hasDiscountSchedule) {
				return null;
			}
			endPrice = (quantity < 0) ? null : bp;
		}
	}
	return (endPrice != null && ((endPrice[this.prefix + "UpperBound__c"] == null) || hasDiscountSchedule)) ? endPrice : null;
};

},{"./Utils/DateUtils.js":18,"./Utils/IdUtils.js":19,"./Utils/JSQCConstants.js":20,"./Utils/ModelUtils.js":23,"./Utils/SettingsUtils.js":27}],11:[function(require,module,exports){
/**
 * Created by jfeingold on 4/27/15.
 */
"use strict";

var SummaryVariableCalculator = require("./SummaryVariableCalculator.js");
var ApexUtils = require("./Utils/ApexUtils.js");
var SettingsUtils = require("./Utils/SettingsUtils.js");
var MetaDataUtils = require("./Utils/MetaDataUtils.js");
var OperatorsUtils = require("./Utils/OperatorsUtils.js");
var LookupCalloutMap = require("./LookupCalloutMap.js");
var LabelUtils = require("./Utils/LabelUtils.js");
var jsforce = require("jsforce");
var Esprima = require("esprima");

module.exports = QuoteLinePriceRuleEvaluator;

/**
 * Creates a QuoteLinePriceRuleEvaluator
 * @param {QuoteModel2} quote - The quote that is subject to the price rules
 * @constructor
 */
function QuoteLinePriceRuleEvaluator(quote, formulaFieldEngine) {
    this.quote = quote;
    this.quoteLines = quote.lineItems;
    this.accountId = quote.Account__c;
    this.prefix = SettingsUtils.getPrefix();

    this.assetsAndSubs = quote.associatedAssetsAndSubs;
    this.initialized = false;
	this.formulaFieldEngine = formulaFieldEngine;
}

QuoteLinePriceRuleEvaluator.prototype.initialize = function() {
	if (this.initialized) {
		return Promise.resolve();
	}
    var self = this;
    return this.loadPriceRules()
	    .then(function(results) {
			self.priceRules = results.map(function(rule) {
				return new PriceRule(rule);
			});
			return self.loadSummaryVariables();
        })
	    .then(function(results) {
		    self.referencedVariables = results;
		    return self.loadAssetsAndSubs();
	    })
	    .then(function(results) {
		    self.assetsAndSubs = results;
		    self.initialized = true;
	    });
};


QuoteLinePriceRuleEvaluator.prototype.loadPriceRules = function() {
    var prefix = SettingsUtils.getPrefix() == "" ? "" : "SBQQ";
	return this.getApex().read(prefix, 'PriceRuleServiceProvider.PriceRuleReader', 'PriceRules');
};

QuoteLinePriceRuleEvaluator.prototype.loadSummaryVariables = function() {
	var prefix = SettingsUtils.getPrefix() == "" ? "" : "SBQQ";
	var neededSumVarIds = [];

	this.priceRules.forEach(function(rule) {
		neededSumVarIds = neededSumVarIds.concat(rule.getSumVarIds());
	}, this);
	var svContext = {
		'svIds': neededSumVarIds
	};
	return this.getApex().load(prefix, 'SummaryVariableServiceProvider.SummaryVariableLoader', 'SummaryVariables', svContext);
};

QuoteLinePriceRuleEvaluator.prototype.loadAssetsAndSubs = function() {
	if (this.accountId == null) {
		return Promise.resolve([]);
	}
	var prefix = SettingsUtils.getPrefix();
	var calloutPrefix = prefix == "" ? "" : "SBQQ";

	var assetFields = [];
	var subscriptionFields = [];

	for (var svId in this.referencedVariables) {
		if (this.referencedVariables.hasOwnProperty(svId)) {
			var sv = this.referencedVariables[svId];
			if (sv[prefix + "TargetObject__c"] == 'Asset') {
				if (sv[prefix + "FilterField__c"] != null) {
					assetFields.push(sv[prefix + "FilterField__c"]);
				}
				if (sv[prefix + "ConstraintField__c"] != null) {
					assetFields.push(sv[prefix + "ConstraintField__c"]);
				}
				if (sv[prefix + "AggregateField__c"] != null) {
					assetFields.push(sv[prefix + "AggregateField__c"]);
				}
			} else if (sv[prefix + "TargetObject__c"] == 'Subscription') {
				if (sv[prefix + "FilterField__c"] != null) {
					subscriptionFields.push(sv[prefix + "FilterField__c"]);
				}
				if (sv[prefix + "ConstraintField__c"] != null) {
					subscriptionFields.push(sv[prefix + "ConstraintField__c"]);
				}
				if (sv[prefix + "AggregateField__c"] != null) {
					subscriptionFields.push(sv[prefix + "AggregateField__c"]);
				}
			}
		}
	}

	var context = {
		'accountId': this.accountId,
		'assetFields': assetFields,
		'subscriptionFields': subscriptionFields
	};

	return this.getApex().load(calloutPrefix, 'AssetAndSubscriptionServiceProvider.AssetAndSubLoader', 'AssetsAndSubs', context);
};

QuoteLinePriceRuleEvaluator.prototype.setConnection = function(conn) {
    this.conn = conn;
};

/**
 * Sets the apex object used to make APEX REST callouts
 * @param {Object} apex Supports GET/POST callouts to APEX as a REST API
 */
QuoteLinePriceRuleEvaluator.prototype.setApex = function(apex) {
    this.apex = apex;
};

/**
 * Retrieves the apex object used to make APEX REST callouts
 * @return {Object} apex Supports GET/POST callouts to APEX as a REST API
 */
QuoteLinePriceRuleEvaluator.prototype.getApex = function() {
    if(this.apex)
        return this.apex;

    var conn = this.conn || new jsforce.Connection({
            accessToken: sfSessionId
        });
    return ApexUtils(conn);
};

/**
 * Creates a list of all objects that should be targeted when determining the value of a summary variable.
 * @returns {Array} The objects that a summary variable may target. Includes quote lines, assets, and subscriptions.
 * @private
 */
QuoteLinePriceRuleEvaluator.prototype.buildSummaryVariableTargets = function() {
    var result = [];
    this.quoteLines.forEach(function(line) {
        result.push(line.record);
    }, this);
    if (this.accountId != null) {
        result = result.concat(this.assetsAndSubs || []);
    }
    return result;
};

/**
 * Returns true if the given rule should be evaluated during the given evaluation event.
 * @param {PriceRule} rule The rule under consideration
 * @param {String} currentEvent The name of an evaluation event. Currently limited to 'On Init', and 'On/Before/After Calculate'.
 * @returns {Boolean}
 */
function ruleHasCurrentEvaluationEvent(rule, currentEvent) {
	var ruleEvents = rule.evaluationEvent;
	if (currentEvent === 'On Calculate') {
		// During 'On calculate', we evaluate rules that are scoped to On Calculate and those with no event.
		return (!ruleEvents || ruleEvents === '' || ruleEvents.indexOf(currentEvent) !== -1);
	} else if (currentEvent === 'Before Calculate') {
		// During 'Before Calculate', we evaluate rules that are scoped to either On Load or Before Calculate.
		// This is because 'On Load' was the original name for this event, and it was changed to Before Calculate, which
		// requires us to support both.
		return (ruleEvents && (ruleEvents.indexOf('On Load') !== -1 || ruleEvents.indexOf('Before Calculate') !== -1));
	} else {
		// After Calculate and On Init have no special cases, so they can be checked for in the same step.
		return (ruleEvents && ruleEvents.indexOf(currentEvent) !== -1);
	}
}

/**
 * Evaluates all price rules set to fire during the given event period, and executes the actions of triggered rules
 * @param {QuoteModel} quote The quote being calculated
 * @param {String} eventPeriod A string indicating one of the three evaluation periods
 * @returns {Promise} Returns a promise so that steps can be guaranteed to run in the expected order
 */
QuoteLinePriceRuleEvaluator.prototype.evaluate = function(quote, eventPeriod) {
	var self = this;
	return this.initialize().then(function() {
		self.variableCalculator = new SummaryVariableCalculator(self.referencedVariables);
		self.variableCalculator.calculate(self.quote, self.buildSummaryVariableTargets());

		// A map from ID strings to an object consisting of a rule and a list of targets
		var rulesToExecute = {};
		var orderedRuleIds = [];
		self.priceRules.forEach(function (rule) {
			if (ruleHasCurrentEvaluationEvent(rule, eventPeriod)) {
				// The resultObject has a 'result' attribute indicating whether the rule was satisfied, and a 'lines'
				// attribute that indicates which lines satisfied the rule.
				var resultObject = self.isRuleSatisfied(rule);
				if (resultObject['result'] == true) {
					orderedRuleIds.push(rule.id);
					rulesToExecute[rule.id] = {
						rule: rule,
						targets: resultObject['lines']
					};
				}
			}
		}, this);

		var lookupMap = new LookupCalloutMap();
		var calloutNeeded = lookupMap.addTables(rulesToExecute, self.quote);

		if (calloutNeeded) {
			// If we need to do a callout, make the callout, and return a promise that
			// rules will be executed once the callout completes
			return self.getLookupRecordsFromServer(lookupMap).then(function (results) {
				self.lookupData = typeof results === 'string' ? JSON.parse(results) : results;
				self.executePriceActions(rulesToExecute, orderedRuleIds);
			});
		} else {
			// If we don't need to do a callout, just execute the rules and return an object with a .then
			self.executePriceActions(rulesToExecute, orderedRuleIds);
			return Promise.resolve();
		}
	});
};

/**
 * Applies all of the rules in the provided map to their designated targets
 * @param {Object.<String, PriceRule>} rulesToExecute A map from rule Ids to PriceRule objects and their targets
 * @param {String[]} ruleIds A list of all triggered rules, ordered by execution order
 */
QuoteLinePriceRuleEvaluator.prototype.executePriceActions = function(rulesToExecute, ruleIds) {
    ruleIds.forEach(function(rId) {
        var pRule = rulesToExecute[rId].rule;
        var targets = rulesToExecute[rId].targets;
        if (pRule.lookupObject != null && pRule.queries.length != 0) {
            // First, get the lookup results for the last row, if there are any Quote-level actions. These are
            // the rows that must be used for such actions
            if (pRule.hasQuoteActions) {
                var lastLineRows = this.getQueryResult(pRule, targets[targets.length - 1]);
            }
            pRule.actions.forEach(function (action) {
                if (action.targetObject == 'Quote') {
                    if (lastLineRows.length != 0) {
                        this.applyActionToTarget(action, this.quote, lastLineRows);
                    }
                } else {
                    targets.forEach(function(target) {
                        var rows = this.getQueryResult(pRule, target);
                        if (rows.length != 0) {
                            this.applyActionToTarget(action, target, rows);
                        }
                    }, this);
                }
            }, this);
        } else {
            pRule.actions.forEach(function(action) {
                if (action.targetObject == 'Quote') {
                    this.applyActionToTarget(action, this.quote, null);
                } else {
                    targets.forEach(function(target) {
                        this.applyActionToTarget(action, target, null);
                    }, this);
                }
            }, this);
        }
    }, this);
};

/**
 * Applies all of the given actions to the indicated Quote Line
 * @param {PriceAction} action A series of actions that shall be performed
 * @param {QuoteLineModel|QuoteModel} target The line upon which the actions shall be performed
 * @param {Object} target.record The target's record attribute stores all of the fields
 * @param {Array} lookupData A length <= 1 array of data pulled from a lookup table
 */
QuoteLinePriceRuleEvaluator.prototype.applyActionToTarget = function(action, target, lookupData) {
    var targetField = MetaDataUtils.getField(MetaDataUtils.getObjectType(target), action.targetField);
    if (targetField != null) {
        var value;
        if (action.sourceLookupField != null) {
            value = lookupData[0][action.sourceLookupField];
            if (value == null) {
                target.record[targetField] = null;
            } else {
                // The Lookup field's value is a string. First, try to convert it to a number. If that fails,
                // try as a boolean. If that fails too, just insert it as a string.
                if (Number(value) == Number(value)) {
                    target.record[targetField] = Number(value).valueOf();
                } else if (convertStringToBoolean(value) != null) {
                    target.record[targetField] = convertStringToBoolean(value);
                } else {
                    target.record[targetField] = value;
                }
            }
        } else if (action.sourceField != null) {
            value = target.record[action.sourceField];
            if (value === undefined) {
                var warningString = LabelUtils.getLabelByKey("msg_js_warn_src_action_field_null")
                    .replace("{0}", action.id)
                    .replace("{1}", MetaDataUtils.getObjectType(target) + "." + action.sourceField);
                console.warn(warningString);
                target.record[targetField] = null;
            } else {
                // The source field should already be the desired type, so we can just use it as is.
                target.record[targetField] = value;
            }
        } else if (action.sourceVariable != null) {
            value = this.variableCalculator.getResult(action.sourceVariable);
            target.record[targetField] = value || null;
        } else if (action.formula != null) {
            value = this.formulaFieldEngine.parseRuleFormula(action.formula, target.record, this.quote.record, targetField);
            value = value == null ? null : value;
            target.record[targetField] = value;
        } else {
            value = action.actionValue;
            // If the value is null or undefined, insert it as null.
            // Otherwise, it's a string. So try converting it to a number, then try a boolean, then just insert
            // it as a string
            if (value == null) {
                target.record[targetField] = null;
            } else if (Number(value) == Number(value)) {
                target.record[targetField] = Number(value).valueOf();
            } else if (convertStringToBoolean(value) != null) {
                target.record[targetField] = convertStringToBoolean(value);
            } else {
                target.record[targetField] = value;
            }
        }
    }
};

/**
 * Executes an Apex REST callout to retrieve lookup table data from the server
 * @param {Object} lookupMap A deconstruction of several salesforce queries to be executed by the server
 * @returns {Promise}
 */
QuoteLinePriceRuleEvaluator.prototype.getLookupRecordsFromServer = function(lookupMap) {
    var prefix = SettingsUtils.getPrefix() == "" ? "" : "SBQQ";
    return this.getApex().load(prefix, 'LookupTableCallout', '', lookupMap);
};


/**
 * Determines whether the given price rule is satisfied by the existing quote lines, quote, and summary variables
 * @param {PriceRule} rule The rule being tested
 * @returns {Object} The returned object has two attributes: A Boolean called 'result' that indicates whether the rule
 * was satisfied, and a QuoteLineModel array called 'lines' that contains all lines for which the rule was satisfied.
 */
QuoteLinePriceRuleEvaluator.prototype.isRuleSatisfied = function(rule) {
    // If a rule has no conditions, it's automatically satisfied for all lines.
    if (!rule.hasConditions) {
        return conditionResultFactory(true, this.quote.lineItems);
    }
    var resultMap = {};
    var len;
    // Quote-level conditions only need to be evaluated once, because they don't change between quote lines.
    if (rule.quoteConditions.length != 0) {
        var quoteConds = rule.quoteConditions;
        len = quoteConds.length;
        for (var i = 0; i < len; i++) {
            var quoteCond = quoteConds[i];
            var targetType = quoteCond.testedField != null ? 'field' : 'formula';
            var result = this.evaluateCondition(quoteCond, this.quote.record, targetType);
            // If a quote condition is satisfied and conditionsMet is 'Any', we're done. All quote lines will
            // automatically satisfy the rule.
            // Likewise, if the condition fails and conditionsMet is 'All', we're also done, because no line can
            // satisfy the rule.
            if (rule.resultAllowsShortCircuit(result)) {
                return conditionResultFactory(result, this.quote.lineItems);
            }
            // If we didn't exit early, add the condition's result to the map.
            resultMap[quoteCond.conditionNum] = result;
        }
    }
    // Summary Variable conditions only need to be evaluated once, because they also won't change between lines.
    if (rule.sumVarConditions.length != 0) {
        var svConds = rule.sumVarConditions;
        len = svConds.length;
        for (var i = 0; i < len; i++) {
            var svCond = svConds[i];
            var result = this.evaluateCondition(svCond, svCond.testedVariableId, 'summary variable');
            // If a Summary Variable condition is satisfied and the constraint is 'Any', we're done.
            // Likewise, if it fails and the constraint is 'All', we're also done.
            if (rule.resultAllowsShortCircuit(result)) {
                return conditionResultFactory(result, this.quote.lineItems);
            }
            // If we didn't exit early, add the condition's result to the map.
            resultMap[svCond.conditionNum] = result;
        }
    }
    // Here's the tricky part. If we're here, it's because we couldn't exit early with quote or variable conditions.
    // How we proceed depends on whether there are quote line conditions.
    if (rule.quoteLineConditions.length == 0) {
        // If there are no line conditions, we evaluate what we've got.
        return conditionResultFactory(handleFinalResult(rule, resultMap), this.quote.lineItems);
    } else {
        // If there are line conditions, they need to be evaluated for each line.
        var lineConditions = rule.quoteLineConditions;
        len = lineConditions.length;
        var lineCount = this.quoteLines.length;
        var satisfyingLines = [];

        // First, check if there are any lines. If there are no lines, then all of these conditions are automatically
        // false. Check if that allows for an early exit.
        if (lineCount == 0) {
            if (rule.resultAllowsShortCircuit(false)) {
                return conditionResultFactory(false, []);
            } else {
                // If we couldn't exit early, use the final-result handler. Null conditions will be treated as false,
                // so we can still do this.
                return conditionResultFactory(handleFinalResult(rule, resultMap), []);
            }
        }
        // If we're here, it's because we have quote line conditions, and we know there are lines against which they
        // can be evaluated.
        // Outer loop is performed over the quote lines.
        for (var i = 0; i < lineCount; i++) {
            var line = this.quoteLines[i];
            var exitedEarly = false;
            // Inner loop is performed over the conditions themselves.
            for (var j = 0; j < len; j++) {
                var lineCond = lineConditions[j];
                var targetType = lineCond.testedField != null ? 'field' : 'formula';
                var result = this.evaluateCondition(lineCond, line.record, targetType);
                if (rule.resultAllowsShortCircuit(result)) {
                    // If the line satisfied the condition, add it to our list of satisfying lines and go to the next
                    // line. If not, just go to the next line.
                    if (result == true) {
                        satisfyingLines.push(line);
                    }
                    exitedEarly = true;
                    break;
                }
                // If we couldn't exit early for this line, add its result to the map
                resultMap[lineCond.conditionNum] = result;
            }
            // We only need to do stuff here if we didn't exit early.
            // There are three possible reasons for not exiting early, two of which allow for this rule to be satisfied.
            // These two cases are handled below
            if (!exitedEarly && handleFinalResult(rule, resultMap)) {
                satisfyingLines.push(line);
            }
        }
        // We're here now, meaning we've evaluated all lines. So if there are any lines that actually satisfied the rule,
        // we return that list
        return conditionResultFactory(satisfyingLines.length != 0, satisfyingLines);
    }
};


function conditionResultFactory(result, satisfyingLines) {
    return {
        'result': result,
        'lines': satisfyingLines
    };
}

function handleFinalResult(rule, resultMap) {
    // There's only one way for each Conditions-Met constraint to result in this method being called
    if (rule.conditionsMet == 'All') {
        // For 'All', no condition evaluated to false, so return true
        return true
    } else if (rule.conditionsMet == 'Any') {
        // For 'Any', no condition evaluated to true, so return false
        return false
    } else if (rule.conditionsMet == 'Custom') {
        // For 'Custom', we need to do the advanced condition evaluation
        return evaluateAdvancedCondition(rule, resultMap);
    }
}

/**
 * Evaluates the provided condition against the provided target
 * @param {PriceCondition} condition The condition being evaluated.
 * @param {Object|String} target Either a summary variable ID, a quote record, or a quote line record.
 * @param {String} targetType Indicates the type of the target. either 'summary variable', 'field', or 'formula'.
 * @returns {Boolean}
 */
QuoteLinePriceRuleEvaluator.prototype.evaluateCondition = function(condition, target, targetType) {
    var testedValue = null;
    if (targetType === 'summary variable') {
        // If the target is a summary variable, then the value is simply the value of the summary variable
        testedValue = this.variableCalculator.getResult(target);
    } else if (targetType == 'field') {
        // If the target is a field, get the value of the field
        var testedField = condition.testedField;

        var field = MetaDataUtils.getField(condition.testedObject, testedField);
        if (field != null) {
            testedValue = target[field];
        }
	    if (testedValue === undefined) {
		    var warningString = LabelUtils.getLabelByKey('msg_js_warn_condition_field_undefined')
			    .replace("{0}", condition.id)
			    .replace("{1}", MetaDataUtils.getRecordType(target) + "." + condition.sourceField);
		    console.warn(warningString);
	    }
    } else if (targetType == 'formula') {
        if (condition.testedFormula == null) {
            throw Error('Error: Price Condition [' + condition.id + '] must test against a summary variable, field, or formula.');
        }
        testedValue = this.formulaFieldEngine.parseRuleFormula(condition.testedFormula, target, this.quote.record, null);
    } else {
        var targetMsg = LabelUtils.getLabelByKey("msg_js_err_condition_target_object")
            .replace("{0}", condition.id);
        throw new Error(targetMsg);
    }

    var filterValue = null;
    if (condition.filterType == "Value") {
        filterValue = condition.filterValue;
    } else if (condition.filterType == "Variable") {
        filterValue = this.variableCalculator.getResult(condition.filterVariableId);
    } else if (condition.filterType == "Formula") {
        if (condition.filterFormula == null) {
            throw Error('Error: Price Condition [' + condition.id + '] has a Filter Type of "Formula", but has no Filter Formula.');
        }
        filterValue = this.formulaFieldEngine.parseRuleFormula(condition.filterFormula, target, this.quote.record, null);
    }
    // Get the operator for the condition and check it against the filter value
    var op = OperatorsUtils.getInstance(condition.operator);
    if (op == null) {
        var invalidOpMsg = LabelUtils.getLabelByKey("msg_js_err_invalid_op_price_condition")
            .replace("{0}", condition.operator)
            .replace("{1}", condition.id);
        throw new Error(invalidOpMsg);
    }
    return op.evaluate(testedValue, filterValue);
};

/**
 * Evaluates the Advanced Condition logic of the provided price rule, using the provided results for all of the price
 * conditions
 * @param {PriceRule} rule The Price Rule being evaluated
 * @param {Object} resultMap The results of each condition, as a map from its condition number to a boolean result
 * @returns {Boolean}
 */
function evaluateAdvancedCondition(rule, resultMap) {
    var conditionString = rule.advancedCondition;
    if (conditionString == null) {
        var noConditionMsg = LabelUtils.getLabelByKey("msg_js_err_no_advanced_condition")
            .replace("{0}", rule.id);
        throw Error(noConditionMsg);
    }
    try {
        conditionString = conditionString.toUpperCase();
        conditionString = conditionString.replace(/OR/g, "||");
        conditionString = conditionString.replace(/AND/g, "&&");
        var ruleTree = Esprima.parse(conditionString);
        return evaluateAST(ruleTree, resultMap);
    } catch (e) {
        var badConditionMsg = LabelUtils.getLabelByKey('msg_js_err_bad_advanced_condition')
            .replace("{0}", rule.id);
        throw Error(badConditionMsg);
    }
}

/**
 * Recursively evaluates a Tree constructed by running the Advanced Condition logic through Esprima.
 * @param {Object} tree The result of passing an Advanced Condition string through Esprima
 * @param {Object} conditionMap A map from condition numbers to their results
 * @returns {Boolean}
 */
function evaluateAST(tree, conditionMap) {
    switch(tree.type) {
        case "Program":
            return evaluateAST(tree.body[0], conditionMap);
        case "ExpressionStatement":
            return evaluateAST(tree.expression, conditionMap);
        case "LogicalExpression":
            if (tree.operator === "||") {
                return (evaluateAST(tree.left, conditionMap) || evaluateAST(tree.right, conditionMap));
            } else {
                return (evaluateAST(tree.left, conditionMap) && evaluateAST(tree.right, conditionMap));
            }
        case "Literal":
            // If a condition has no mapping, it is automatically considered false.
            var conditionNumber = tree.raw;
            return conditionMap[conditionNumber] || false;
        default:
            throw Error();
    }
}


/**
 * Filters the lookup data to find the row that fits the criteria
 * @param {PriceRule} rule A rule being applied
 * @param {QuoteLineModel} target The target of the price rule, and the line all line-level queries are targeted at
 * @returns {Array}
 */
QuoteLinePriceRuleEvaluator.prototype.getQueryResult = function(rule, target) {
    var values = [];
    var fields = [];
    var ops = [];
    rule.queries.forEach(function(query) {
        var testedValue = null;
        if (query.matchType  == 'Static Value' && query.testedValue != null) {
            testedValue = query.testedValue;
        } else if (query.matchType == 'Field Value' && query.testedField != null) {
            var queryTarget = (query.testedObject == 'Quote') ? this.quote : target;
            if (queryTarget == null) {
                // This can only happen if the query targets Quote Lines, but the quote has no lines. In this case,
                // the query as a whole is nonsensical, so we just return an empty list.
                return [];
            }
            // TODO: DEAL WITH REFERENCED FIELDS HERE
            if (query.testedField.indexOf('.') > -1) {
                // TODO: REFERENCED FIELDS ARE THE WORST
            } else {
                var field = MetaDataUtils.getField(query.testedObject, query.testedField);
                if (field != null) {
                    testedValue = queryTarget.record[field];
                }
            }
        }
        if (query.lookupField != null) {
            values.push(testedValue);
            fields.push(query.lookupField);
            // Validate the Operator now so we don't have to do it in the Table loop
            var op = OperatorsUtils.getInstance(query.operator);
            if (op == null) {
                var invalidOpMsg = LabelUtils.getLabelByKey("msg_js_err_invalid_lookup_operator")
                    .replace("{0}", query.operator)
                    .replace("{1}", query.id);
                throw new Error(invalidOpMsg);
            }
            ops.push(query.operator);
        }
    }, this);
    if (this.lookupData != null) {
        var lookupData = this.lookupData[rule.lookupObject];
        var results = this.evaluateQuery(lookupData, fields, values, ops);
        if (results.length > 1) {
            // TODO: USE A LABEL IN THIS ERROR MESSAGE
            var multipleResultMsg = LabelUtils.getLabelByKey("msg_multiple_lookup_results")
                .replace("{0}", rule.id);
            throw new Error(multipleResultMsg);
        }
        return results;
    } else {
        return [];
    }
};


/**
 * Evaluates a single query against the provided rows, returning an array of length <= 1 with the matched row
 * @param {Object[]} rows The rows of a lookup table
 * @param {Array} fields An array of fields that constrain the rows
 * @param {Array} values The values that constrain the fields in the query
 * @param {Array} ops The operators that are used to constrain the fields
 * @returns {Array}
 */
QuoteLinePriceRuleEvaluator.prototype.evaluateQuery = function(rows, fields, values, ops) {
    var results = [];
    // Loop over rows in the lookup table
    if (rows == null) {
        return results;
    }
    rows.forEach(function(row) {
        var match = false;
        // For each field-value pair representing a lookup query...
        for (var i = 0; i < fields.length; i++) {
            var op = OperatorsUtils.getInverseInstance(ops[i]);
            if (op.evaluate(row[fields[i]], values[i])) {
                match = true;
            } else {
                // If any lookup query returned false, short-circuit since they have an implicit AND
                match = false;
                break;
            }
        }
        // All lookup queries returned true, therefore this row matches!
        if (match) {
            results.push(row);
        }
    }, this);
    return results;
};

/**
 * If a string is "true" or "false", ignoring case, returns the corresponding boolean. Otherwise, returns null.
 * @param {String} str A string that is part of a price action or a lookup table
 * @returns {Boolean}
 */
function convertStringToBoolean(str) {
    var s = str.toLowerCase();
    if (s == 'true') {
        return true;
    } else if (s == "false") {
        return false;
    } else {
        return null;
    }
}

/**
 * An object that represents a price rule, to make evaluation more straightforward
 * @param {Object} record The record of a Price Rule
 * @constructor
 */
function PriceRule(record) {
    this.record = record;
    this.id = record.Id;
    var prefix = SettingsUtils.getPrefix();
	this.evaluationEvent = record[prefix + 'EvaluationEvent__c'];
    this.conditionsMet = record[prefix + 'ConditionsMet__c'];
    this.targetObject = record[prefix + 'TargetObject__c'];
    this.lookupObject = record[prefix + 'LookupObject__c'];
    this.advancedCondition = record[prefix + "AdvancedCondition__c"];
    this.hasConditions = false;
    this.quoteConditions = [];
    this.quoteLineConditions = [];
    this.sumVarConditions = [];
    this.queries = [];
    this.actions = [];
    this.hasQuoteActions = false;
    this.quoteActions = [];
    this.quoteLineActions = [];

    if (record[prefix + "PriceActions__r"] != null) {
        record[prefix + 'PriceActions__r'].records.forEach(function (action) {
            var actionObj = new PriceAction(action);
            this.actions.push(actionObj);
            if (actionObj.targetObject == 'Quote') {
                this.hasQuoteActions = true;
            }
        }, this);
    }
    if (record[prefix + "PriceConditions__r"] != null) {
        record[prefix + 'PriceConditions__r'].records.forEach(function (condition) {
            var cond = new PriceCondition(condition);
            this.hasConditions = true;
            if (cond.testedField != null || cond.testedFormula != null) {
                (cond.testedObject == 'Quote' ? this.quoteConditions : this.quoteLineConditions).push(cond);
            } else if (cond.testedVariableId != null || cond.testedObject == 'Summary Variable') {
                this.sumVarConditions.push(cond);
            }
        }, this);
    }
    if (record[prefix + 'LookupQueries__r'] != null) {
        record[prefix + 'LookupQueries__r'].records.forEach(function(query) {
            this.queries.push(new PriceQuery(query));
        }, this);
    }
}

/**
 * Returns true if the provided result allows us to short-circuit condition evaluation
 * @param {Boolean} result The result of a Price Condition evaluation
 * @returns {boolean}
 */
PriceRule.prototype.resultAllowsShortCircuit = function(result) {
    return (this.conditionsMet == 'All' && !result) || (this.conditionsMet == 'Any' && result);
};

PriceRule.prototype.getSumVarIds = function() {
	var svIds = [];
	var condIdGetter = function(condition) {
		if (condition.filterVariableId != null) {
			svIds.push(condition.filterVariableId);
		}
		if (condition.testedVariableId != null) {
			svIds.push(condition.testedVariableId);
		}
	};
	var actionIdGetter = function(action) {
		if (action.sourceVariable != null) {
			svIds.push(action.sourceVariable);
		}
	};
	if (this.hasConditions) {
		this.quoteConditions.forEach(condIdGetter);
		this.quoteLineConditions.forEach(condIdGetter);
		this.sumVarConditions.forEach(condIdGetter);
	}
	this.actions.forEach(actionIdGetter);
	return svIds;
};

/**
 * An object that simplifies the representation of a price action
 * @param {Object} action A price rule action record
 * @constructor
 */
function PriceAction(action) {
    this.id = action.Id;
    var prefix = SettingsUtils.getPrefix();
    this.targetField = action[prefix + 'Field__c'];
    this.targetObject = action[prefix + 'TargetObject__c'];
    this.sourceField = action[prefix + 'ValueField__c'];
    this.sourceLookupField = action[prefix + 'SourceLookupField__c'];
    this.sourceVariable = action[prefix + 'SourceVariable__c'];
    this.actionValue = action[prefix + 'Value__c'];
    this.formula = action[prefix + 'Formula__c'];
}

/**
 * An object that simplifies the representation of a price condition
 * @param {Object} condition A price rule condition record
 * @constructor
 */
function PriceCondition(condition) {
    this.id = condition.Id;
    var prefix = SettingsUtils.getPrefix();
    this.conditionNum = condition[prefix + "Index__c"];
    this.testedObject = condition[prefix + 'Object__c'] || 'Quote';
    this.testedField = condition[prefix + 'Field__c'];
    this.testedVariableId = condition[prefix + 'TestedVariable__c'];
    this.testedFormula = condition[prefix + 'TestedFormula__c'];
    this.operator = condition[prefix + 'Operator__c'];
    this.filterType = condition[prefix + 'FilterType__c'];
    this.filterValue = condition[prefix + 'Value__c'];
    this.filterVariableId = condition[prefix + 'FilterVariable__c'];
    this.filterFormula = condition[prefix + 'FilterFormula__c'];
}

/**
 * An object that simplifies the representation of a price rule lookup query
 * @param {Object} query The record of a lookup query
 * @constructor
 */
function PriceQuery(query) {
    this.id = query.Id;
    var prefix = SettingsUtils.getPrefix();
    this.matchType = query[prefix + 'MatchType__c'];
    this.testedObject = query[prefix + 'TestedObject__c'] || 'Quote Line';
    this.testedField = query[prefix + 'TestedField__c'];
    this.testedValue = query[prefix + 'TestedValue__c'];
    this.operator = query[prefix + 'Operator__c'];
    this.lookupField = query[prefix + 'LookupField__c'];
}
},{"./LookupCalloutMap.js":6,"./SummaryVariableCalculator.js":15,"./Utils/ApexUtils.js":17,"./Utils/LabelUtils.js":21,"./Utils/MetaDataUtils.js":22,"./Utils/OperatorsUtils.js":26,"./Utils/SettingsUtils.js":27,"esprima":39,"jsforce":56}],12:[function(require,module,exports){
/**
 * Created by jfeingold on 4/27/15.
 */
"use strict";

var SettingsUtils = require("./Utils/SettingsUtils.js");
var DateUtils = require("./Utils/DateUtils.js");
var JSQCConstants = require("./Utils/JSQCConstants.js");
var ModelUtils = require("./Utils/ModelUtils.js");
var IdUtils = require("./Utils/IdUtils.js");

var QuoteLineModel = require("./QuoteLineModel.js");
var QuoteLineGroupModel = require("./QuoteLineGroupModel.js");
var DiscountScheduleModel = require("./DiscountScheduleModel.js");
var QuoteSummaryModel = require("./QuoteSummaryModel.js");
var AccountModel = require("./AccountModel.js");
var LabelUtils = require("./Utils/LabelUtils.js");
var ShortId = require('shortid');

module.exports = QuoteModel2;
var PROTOTYPE_INITIALIZED = false;
var FIELDS = [
    "Opportunity2__r",
    "Account__r",
    "NetAmount__c",
    "LineItemsGrouped__c",
    "Type__c",
    "TargetCustomerAmount__c",
    "Id",
    "Account__c",
    "CustomerDiscount__c",
    "SubscriptionTerm__c",
    "StartDate__c",
    "PricebookId__c",
    "CurrencyIsoCode",
    "DistributorDiscount__c",
    "PartnerDiscount__c",
    "MarkupRate__c",
    "EndDate__c",
    "FirstSegmentTermEndDate__c"
];

function defineGetAndSet(field) {
    var getter;
    var setter;
    var sysField = false;
    switch(field) {
        case 'StartDate__c':
        case 'EndDate__c':
        case "FirstSegmentTermEndDate__c":
            // Dates must be converted
            getter = ModelUtils.dateGetter;
            setter = ModelUtils.dateSetter;
            break;
        case 'Account__c':
        case "PricebookId__c":
            // Id fields that can be retrieved from the Opportunity if not on the quote must their own getter
            getter = ModelUtils.opportunityLookupGetter;
            setter = ModelUtils.invalidSetter;
            break;
        case 'Id':
        case 'CreatedById':
        case 'LastModifiedById':
            // System Id fields should be converted, and never set
            getter = ModelUtils.idGetter;
            setter = ModelUtils.invalidSetter;
            sysField = true;
            break;
        case 'CreatedDate':
        case 'LastModifiedDate':
            getter = ModelUtils.dateGetter;
            setter = ModelUtils.invalidSetter;
            sysField = true;
            break;
        case "CurrencyIsoCode":
            getter = ModelUtils.standardGetter;
            setter = ModelUtils.invalidSetter;
            sysField = true;
            break;
        default:
            getter = ModelUtils.standardGetter;
            setter = ModelUtils.standardSetter;
    }
    Object.defineProperty(QuoteModel2.prototype, field, {
        get: function() {var prefix = sysField ? '' : SettingsUtils.getPrefix(); return getter(prefix + field, this.record);},
        set: function(v) {var prefix = sysField ? '' : SettingsUtils.getPrefix(); setter(v, prefix + field, this.record);}
    });
}

function defineAllGetsAndSets(fields) {
    if (PROTOTYPE_INITIALIZED) {
        return;
    }
    var l = fields.length;
    for (var i = 0; i < l; i++) {
        defineGetAndSet(fields[i]);
    }
    PROTOTYPE_INITIALIZED = true;
}

/**
 * Creates a Quote Model object to be used by the calculator
 * @param {Object} settings The Editor Settings object passed from the the server
 * @param {Object} data The data that shall be stored in this new object
 * @constructor
 */
function QuoteModel2(settings, data) {
    // Get all properties that are in the data.
    ModelUtils.copyProperties(data, this);
    SettingsUtils.setSettings(settings);
    LabelUtils.setLabels(settings['jsqcLabels']);
	this.plugin = settings['jsqcPlugin'] 
		? {name: settings['jsqcPlugin'], pid: ShortId.generate()}
		: null;
    this.prefix = settings["developerPrefix"];
    defineAllGetsAndSets(FIELDS);
    var qModel = this;
    this.listProductTotal = null;
    this.customerProductTotal = null;
    this.netProductTotal = null;
    this.regularProductTotal = null;
    this.customerTotal = null;
    this.netTotal = data.record[this.prefix + "NetAmount__c"];
    // Initialize groups
    this.groupsByKey = {};
    this.groups = [];
    this.isGrouped = data.record[this.prefix + 'LineItemsGrouped__c'];
    if (this.isGrouped) {
        data.lineItemGroups.forEach(function (itemGroup) {
            var groupModel = new QuoteLineGroupModel(qModel, itemGroup);
            groupModel.Quote__c = this.Id;
            this.groupsByKey[itemGroup.key] = groupModel;
            this.groups.push(groupModel);
            groupModel.summaryLine = new QuoteSummaryModel(qModel, {record: groupModel.summaries});
        }, this);
    }

    // Initialize lines
    this.lineItemsByKey = {};
    this.lineItems = [];

    this.dimensions = {}; // dimension type hash table ('Custom' : true)
    this.multiSegmentLineItemsByKey = {}; // QuoteLineModels by line keys (3: QuoteLineModel)
    this.multiSegmentLineItemsBySegmentKey = {}; // QuoteLineModels by segment keys (1436307106135: QuoteLineModel)

    data.lineItems.forEach(function (line) {
        var itemGroup = this.groupsByKey[line.parentGroupKey];
        var item = new QuoteLineModel(qModel, itemGroup, line);
        this.lineItemsByKey[item.key] = item;
        this.lineItems.push(item);
        if (itemGroup != null) {
            item.parentGroup = itemGroup;
        }
    }, this);

    // Connect components to parents
    this.lineItems.forEach(function (line) {
        if (line.isComponent) {
            var parentLine = this.lineItemsByKey[line.parentItemKey];
            if (parentLine != null) {
                parentLine.addComponent(line);
            }
        }
    }, this);

    // Re-parent groups and add line items to them
    this.groups.forEach(function (group) {
        // Set the group's parent
        group.parentQuote = this;
        group.record[this.prefix + "Quote__r"] = this.record;
    }, this);

    // Add the line items to the group
    this.lineItems.forEach(function (line) {
        var itemGroup = this.groupsByKey[line.parentGroupKey];
        if (itemGroup != null) {
            itemGroup.addLineItem(line);
        }
    }, this);

    // Turn the discount schedule records into models with tiers.
    this.discountScheduleMap = {};
    for (var id in data.discountSchedules) {
        var dsRecord = data.discountSchedules[id];
        this.discountScheduleMap[id] = new DiscountScheduleModel(dsRecord);
    }

    this.accountMap = {};
    for (var acId in data.accounts) {
        var am = data.accounts[acId];
        this.accountMap[acId] = new AccountModel(am);
    }
}

QuoteModel2.prototype = {
    /**
     * True if this quote is a renewal of past purchases
     * @returns {boolean}
     */
    get isRenewal() {
        return this.Type__c === JSQCConstants.TYPE_RENEWAL;
    },
    /**
     * True if this quote is an amendment of a previous quote
     * @returns {boolean}
     */
    get isAmendment() {
        return this.Type__c === JSQCConstants.TYPE_AMENDMENT;
    },
    /**
     * True if any of this quote's lines are dynamic
     * @returns {boolean}
     */
    get hasDynamicLineItems() {
        var lineCount = this.lineItems.length;
        for (var i = 0; i < lineCount; i++) {
            if (this.lineItems[i].isDynamic) {
                return true;
            }
        }
        return false;
    },
    /**
     * A map from discount schedule Ids to lists of all products that use that schedule
     * @returns {Object}
     */
    get scheduleMap() {
        var scheduleMap = {};
        this.lineItems.forEach(function(line) {
            var vid = line.DiscountSchedule__c;
            var tid = line.TermDiscountSchedule__c;
            var cid = line.costScheduleId;

            if (vid != null) {
                if (scheduleMap[vid] == null) {
                    scheduleMap[vid] =[];
                }
                scheduleMap[vid].push(line.Product__c);
            }

            if (tid != null) {
                if (scheduleMap[tid] == null) {
                    scheduleMap[tid] = [];
                }
                scheduleMap[tid].push(line.Product__c);
            }

            if (cid != null) {
                if (scheduleMap[IdUtils.convertTo18(cid)] == null) {
                    scheduleMap[IdUtils.convertTo18(cid)] = [];
                }
                scheduleMap[IdUtils.convertTo18(cid)].push(line.Product__c);
            }
        });
        return scheduleMap;
    },
    /**
     * A mapping from discount schedule Ids to lists of products that overrode that discount schedule with another one.
     * @returns {Object}
     */
    get overriddenScheduleMap() {
        var overrideMap = {};
        this.lineItems.forEach(function (line) {
            var originalVolume = line.originalVolumeSchedule;
            var originalTerm = line.originalTermSchedule;

            var currentVolume = line.DiscountSchedule__c;
            var currentTerm = line.TermDiscountSchedule__c;

            var volumeOverridden = originalVolume != null && !IdUtils.compareIds(originalVolume, currentVolume);
            var termOverridden = originalTerm != null && !IdUtils.compareIds(originalTerm, currentTerm);

            if (volumeOverridden) {
                if (overrideMap[originalVolume] == null) {
                    overrideMap[originalVolume] = [];
                }
                overrideMap[originalVolume].push(line.Product__c);
            }

            if (termOverridden) {
                if (overrideMap[originalTerm] == null) {
                    overrideMap[originalTerm] = [];
                }
                overrideMap[originalTerm].push(line.Product__c);
            }
        }, this);
        return overrideMap;
    },
    /**
     * A list of all quote lines that may be discounted to reach this quote's target customer amount
     * @returns {Array}
     */
    get targetLineItems() {
        var targetLines = [];

        this.lineItems.forEach(function (line) {
            if (line.parentGroup == null || line.parentGroup.TargetCustomerAmount__c == null) {
                targetLines.push(line);
            }
        });
        return targetLines;
    },
    /**
     * Calculates the subscription term using either the start and end dates or the stored value
     * @returns {number}
     */
    get calculatedSubscriptionTerm() {
        var startDate = this.StartDate__c;
        var endDate = this.EndDate__c;
        if (startDate != null && endDate != null) {
            endDate.setDate(endDate.getDate() + 1);
            if (SettingsUtils.subscriptionTermUnitIsDay()) {
                return DateUtils.daysBetween(startDate, endDate);
            } else {
                return DateUtils.monthsBetween(startDate, endDate);
            }
        }
        return this.SubscriptionTerm__c;
    },
    /**
     * The End Date used by the calculator
     * @returns {Date}
     */
    get effectiveEndDate() {
        return this.EndDate__c || this.calculatedEndDate;
    },
    /**
     * Calculates an End Date using the quote's start date and subscription term
     * @returns {Date}
     */
    get calculatedEndDate() {
        if (this.SubscriptionTerm__c != null && this.StartDate__c != null) {
            var endDate = this.StartDate__c;
            if (SettingsUtils.subscriptionTermUnitIsDay()) {
                endDate.setUTCDate(endDate.getUTCDate() + this.SubscriptionTerm__c - 1);
            } else {
                endDate.setUTCMonth(endDate.getUTCMonth() + this.SubscriptionTerm__c);
                endDate.setUTCDate(endDate.getUTCDate() - 1);
            }
            return endDate;
        }
        return this.EndDate__c;
    },
    /**
     * The value of the Renewal Model field from this quote's account
     * @returns {String}
     */
    get accountRenewalModel() {
        // First, try to get the renewal model from the account object
        if (this.Account__r != null && this.Account__r[this.prefix + "RenewalModel__c"] != null) {
            return this.Account__r[this.prefix + "RenewalModel__c"];
        }
        // If that failed, assume contract based
        return 'contract based';
    }
};

/**
 * Returns a list of all quote lines covered by the provided subscription quote line
 * @param {QuoteLineModel} sub A quote line representing a dynamic subscription
 * @returns {QuoteLineModel[]}
 */
QuoteModel2.prototype.getLinesCoveredBySubscription = function(sub) {
    var result = [];
    var value = sub.SubscribedAssetIds__c;
    var assetIds = null;
    if (!(value == null || value.trim().length === 0)) {
        assetIds = value.split(',');
    }
    var items = sub.parentQuote.lineItems;
    var renewalModel = this.accountRenewalModel;
    var includeNetNew = SettingsUtils.isIncludeNetNewInMaintenanceEnabled();

    if ((sub.ComponentSubscriptionScope__c != null) && (sub.parentItem != null)) {
        items = [];
        if (sub.isComponentSubscriptionScopePackage || sub.isComponentSubscriptionScopeBoth) {
            items.push(sub.parentItem);
        } else if (sub.isComponentSubscriptionScopeParentPackage || sub.isComponentSubscriptionScopeParentBoth) {
            if (sub.parentItem.parentItem != null) {
                items.push(sub.parentItem.parentItem);
            }
        }
        if (sub.isComponentSubscriptionScopeComponents || sub.isComponentSubscriptionScopeBoth) {
            sub.parentItem.components.forEach(function(l) {
                items.push(l);
            });
        } else if (sub.isComponentSubscriptionScopeParentComponents || sub.isComponentSubscriptionScopeParentBoth) {
            if (sub.parentItem.parentItem != null) {
                sub.parentItem.parentItem.components.forEach(function(l) {
                    items.push(l);
                });
            }
        }
    } else if ((sub.parentGroup != null) && sub.isSubscriptionScopeGroup) {
        items = sub.parentGroup.lineItems;
    }

    var subCategory = sub.SubscriptionCategory__c;
    var coveredItemIDs = [];
    items.forEach(function(line) {
        var isExcluded = line.isExcludedFromMaintenance;
        var shouldInclude = !(line.isSubscription || line.isDynamicAsset) || line.isIncludedInMaintenance;
        var labelNull = sub.SegmentLabel__c == null || line.SegmentLabel__c == null;
        var labelSame = sub.SegmentLabel__c === line.SegmentLabel__c;

        if (!isExcluded && shouldInclude && (labelNull || labelSame)) {
            // With Asset Based renewals, Subscriptions are auto-created that cover exactly one Asset, so need to keep that functionality
            // PoT's that are components behave differently than standalone on asset-based renewals - these are excluded
            if (renewalModel.toLowerCase() == 'asset based' && (line.parentQuote.isRenewal || line.parentQuote.isAmendment) && includeNetNew && !sub.isComponent) {
                if (assetIds != null && assetIds.indexOf(line.RenewedAsset__c) != -1) {
                    result.push(line);
                    coveredItemIDs.push(line.Id);
                }
                // New PoT's should cover new Assets only
                else if (assetIds == null && line.UpgradedAsset__c == null && line.RenewedAsset__c == null) {
                    result.push(item);
                    coveredItemIDs.push(line.Id);
                }
            } else if (assetIds != null && !includeNetNew && !line.isSubscription) {
                if (assetIds.indexOf(line.RenewedAsset__c) != -1 || (line.parentQuote.isAmendment && assetIds.indexOf(line.UpgradedAsset__c) != -1)) {
                    result.push(line);
                    coveredItemIDs.push(line.Id);
                }
            } else if (subCategory != null) {
                if (line.SubscriptionCategory__c === subCategory) {
                    result.push(line);
                    coveredItemIDs.push(line.Id);
                }
            } else {
                result.push(line);
                coveredItemIDs.push(line.Id);
            }
        }
    });

    // When it's asset based renewals, standalones previously are not covered should be able to be covered by a newly added subscription.
    if(renewalModel.toLowerCase() == 'asset based' && includeNetNew && !sub.isComponent) {
        items.forEach(function(line) {
            if(line.parentQuote.isRenewal || line.parentQuote.isAmendment) {
                var isExcluded = line.isExcludedFromMaintenance;
                var shouldInclude = !line.isSubscription || line.isIncludedInMaintenance;
                var labelNull = sub.SegmentLabel__c == null || line.SegmentLabel__c == null;
                var labelSame = sub.SegmentLabel__c === line.SegmentLabel__c;

                if (!isExcluded && shouldInclude && (labelNull || labelSame)) {
                    if (!line.hasComponents && !line.isComponent && coveredItemIDs.indexOf(line.Id) == -1) {
                        result.push(line);
                    }
                }
            }
        });
    }
    return result;
};

/**
 * Returns the last line item in a given MDQ product
 * @param {String} key An MDQ key
 * @param {String} type An MDQ Dimension Type
 * @returns {QuoteLineModel}
 */
QuoteModel2.prototype.getLastSegment = function(key, type) {
    var lineItem = null;
    var max = null;
    this.lineItems.forEach(function(line) {
        if (line.SegmentKey__c == key && line.dimType == type) {
            var index = line.SegmentIndex__c;
            if ((index != null) && ((max == null) || (max < index))) {
                max = index;
                lineItem = line;
            }
        }
    });
    return lineItem;
};

/**
 * Removes the provided line item and all of its components from the quote
 * @param {QuoteLineModel} line A line to be deleted
 */
QuoteModel2.prototype.removeLineItem = function(line) {
    for (var i = 0; i < this.lineItems.length; i++) {
        if (this.lineItems[i] == line) {
            this.lineItems = this.lineItems.slice(0, i).concat(this.lineItems.slice(i + 1, this.lineItems.length));
            if (this.deletedLineIds != null && line.record != null && line.record.Id != null) {
                this.deletedLineIds.push(line.record.Id);
            }
            line.parentQuote = null;
            if (line.hasComponents) {
                line.components.forEach(function (line) {
                    if (this.grouped) {
                        line.parentGroup.removeLineItem(line);
                    }
                    this.removeLineItem(line);
                }, this);
            }
            return;
        }
    }
};

},{"./AccountModel.js":1,"./DiscountScheduleModel.js":2,"./QuoteLineGroupModel.js":9,"./QuoteLineModel.js":10,"./QuoteSummaryModel.js":14,"./Utils/DateUtils.js":18,"./Utils/IdUtils.js":19,"./Utils/JSQCConstants.js":20,"./Utils/LabelUtils.js":21,"./Utils/ModelUtils.js":23,"./Utils/SettingsUtils.js":27,"shortid":113}],13:[function(require,module,exports){
"use strict";

var MetaDataUtils = require("./Utils/MetaDataUtils.js");
var SettingsUtils = require("./Utils/SettingsUtils.js");
var NumberUtils = require("./Utils/NumberUtils.js");

module.exports.summarize = summarize;

var LOC_BY_FIELD_BY_DIM;
/**
 * Creates the summaries of the provided quotes and their groups, so that the UI can display the proper totals
 * @param {QuoteModel2[]} quotes A list of quote models to be summarized
 */
function summarize(quotes) {
    quotes.forEach(function (quote) {
        LOC_BY_FIELD_BY_DIM = quote.localizationByFieldByDimensionId;
        if (!quote.lineItems.length == 0) {
            var lineType = MetaDataUtils.getObjectType(quote.lineItems[0]);
            var summaryFields = computeSummaryFields(lineType);
            if (quote.isGrouped) {
                var nextOffset = 0;
                quote.groups.forEach(function(group) {
                    var localizedColumns = {};
                    group.summaries = summarizeLines(group.lineItems, summaryFields, group.Optional__c);
                    group.multiSegmentKeys = computeMultiSegmentKeys(group.lineItems);
                    group.multiSegmentColumns = computeMultiSegmentColumnNames(group.lineItems, group.multiSegmentKeys, localizedColumns);
                    group.multiSegmentColumnTotals = computeMultiSegmentColumnTotals(group.lineItems, group.multiSegmentColumns, group.multiSegmentKeys);
                    group.localizedMultiSegmentColumns = localizedColumns;
                    group.multiSegmentRowTotals = computeMultiSegmentRowTotals(group.lineItems);
                    group.netMultiSegmentTotal = computeMultiSegmentTotal(group.lineItems);
                    group.netNonSegmentTotal = computeNonSegmentTotal(group.lineItems);
                    group.hasMultiSegmentLines = (Object.keys(group.multiSegmentColumns).length > 0);
                    group.lineItemRowCount = computeRowCount(group.lineItems);
                    group.lineNumberOffset = nextOffset;
                    nextOffset += group.lineItemRowCount;
                }, this);
            }
            var localizedColumns = {};
            quote.summaries = summarizeLines(quote.lineItems, summaryFields, false);
            quote.multiSegmentKeys = computeMultiSegmentKeys(quote.lineItems);
            quote.multiSegmentColumns = computeMultiSegmentColumnNames(quote.lineItems, quote.multiSegmentKeys, localizedColumns);
            quote.localizedMultiSegmentColumns = localizedColumns;
            quote.multiSegmentColumnTotals = computeMultiSegmentColumnTotals(quote.lineItems, quote.multiSegmentColumns, quote.multiSegmentKeys);
            quote.multiSegmentRowTotals = computeMultiSegmentRowTotals(quote.lineItems);
            quote.netMultiSegmentTotal = computeMultiSegmentTotal(quote.lineItems);
            quote.netNonSegmentTotal = computeNonSegmentTotal(quote.lineItems);
            quote.hasMultiSegmentLines = (Object.keys(quote.multiSegmentColumns).length> 0);
            quote.lineItemRowCount = computeRowCount(quote.lineItems);
            if (quote.multiSegmentRowExpanded == null) {
                quote.multiSegmentRowExpanded = {};
            }
            for (var key in quote.multiSegmentRowTotals) {
                if (quote.multiSegmentRowExpanded[key] != true) {
                    quote.multiSegmentRowExpanded[key] = false;
                }
            }
        }
    }, this);
    LOC_BY_FIELD_BY_DIM = null;
}

/**
 * Returns the summary fields associated with the given line type
 * @param {String} lineType A Salesforce object type, generally either QuoteLine__c or WebQuoteLine__c, possibly with
 * a prefix of SBQQ__
 * @returns {Array}
 * @private
 */
function computeSummaryFields(lineType) {
    return SettingsUtils.getSummaryFieldsByLineType(lineType);
}

/**
 * Sums the value of the provided summary fields across all of the provided lines. If countOptional is true, then
 * lines are included even if they are marked as optional
 * @param {QuoteLineModel[]} lines A list of quote lines
 * @param {Object[]} summaryFields An array of SF DescribeFieldResult objects
 * @param {Boolean} countOptional True if optional lines should still be counted
 * @returns {Object}
 * @private
 */
function summarizeLines(lines, summaryFields, countOptional) {
    var result = {};
    if (lines != null) {
        lines.forEach(function(line) {
            if ((countOptional || !line.Optional__c) && summaryFields != null) {
                summaryFields.forEach(function(field) {
                    var value = line.record[field];
                    if ((value != null) && (typeof value == "number")) {
                        if (result[field.toLowerCase()] != null) {
                            result[field.toLowerCase()] += value;
                        } else {
                            result[field.toLowerCase()] = value;
                        }
                    }
                }, this);
            }
        }, this);
    }
    return result;
}

/**
 * Maps each segment key to its dimension type
 * @param {QuoteLineModel[]} lines A list of quote lines
 * @returns {Object} A map from segment keys to dimension types
 * @private
 */
function computeMultiSegmentKeys(lines) {
    var groupTypesBySegmentKey = {};
    if (lines != null) {
        // We group the lines by segment key, since we wnt one-time dimensions to appear in the same table row as the time-based dimensions with the same key
        lines.forEach(function(line) {
            if (line.isTimeBasedSegment) {
                groupTypesBySegmentKey[line.SegmentKey__c] = line.dimType;
            }
        });
    }
    return groupTypesBySegmentKey;
}


/**
 * Returns a map from Dimension Type to list of Column Names to display in the Line Editor for said MDQ table
 * @param {QuoteLineModel[]} lines A list of quote lines
 * @param {Object} groupTypesBySegmentKey A mapping of segment keys to dimension types
 * @param {Object} localizedColumns A localized mapping from types to column names
 * @returns {Object}
 * @private
 */
function computeMultiSegmentColumnNames(lines, groupTypesBySegmentKey, localizedColumns) {
    var allColumnsMap = {};
    var allColumnsSetMap = {};
    var groupLinesBySegmentKey = {};

    if (lines != null) {
        // First we group the lines by segment key, since we want one-time dimensions to appear in the same table row as the time-based dimensions with the same key
        lines.forEach(function(line) {
            // If the group lines map doesn't have anything for that segment key, create a new list
            if (line.SegmentKey__c != null && groupLinesBySegmentKey[line.SegmentKey__c] === undefined) {
                groupLinesBySegmentKey[line.SegmentKey__c] = [line];
            } else if (line.SegmentKey__c != null) {
                // If there's an entry for the segment key, add this line to the list
                groupLinesBySegmentKey[line.SegmentKey__c].push(line);
            }
        });

        for (var key in groupLinesBySegmentKey) {
            var thisType = groupTypesBySegmentKey[key];
            if (allColumnsMap[thisType] === undefined) {
                allColumnsMap[thisType] = [];
                allColumnsSetMap[thisType] = {};
                localizedColumns[thisType] = [];
            }
            var thisTypeColumnsSet = allColumnsSetMap[thisType];
            var thisTypeColumns = allColumnsMap[thisType];
            var thisTypeColumnsLocalized = localizedColumns[thisType];
            groupLinesBySegmentKey[key].forEach(function(line) {
                if (thisTypeColumnsSet[line.SegmentLabel__c] === undefined) {
                    var segLabel = line.SegmentLabel__c;
                    thisTypeColumnsSet[segLabel] = true;
                    var localizedName = segLabel;
                    // Time-based segments hsould appear after one-time segments, so we insert time-based segments
                    // at the end of the list and one-time segments at the beginning
                    if (line.isTimeBasedSegment) {
                        thisTypeColumns.push(segLabel);
                        if ( !line.isCustomDimension ) {
                            if (line.SegmentIndex__c != 0) {
                                var localizedDimName = SettingsUtils.getDimensionValueLabelMap()[line.dimType];
                                localizedName = localizedName.replace(line.dimType, localizedDimName);
                            } else {
                                localizedName = getLocalizedSegmentName(line) || localizedName;
                            }
                        }
                        thisTypeColumnsLocalized.push(localizedName);
                    } else {
                        thisTypeColumns.unshift(segLabel);

                        localizedName = getLocalizedSegmentName(line) || localizedName;
                        thisTypeColumnsLocalized.unshift(localizedName);
                    }
                }
            });
        }
    }
    return allColumnsMap;
}


function getLocalizedSegmentName(line) {
    var dimId = line.Dimension__c;
    if (dimId != null) {
        var locByField = LOC_BY_FIELD_BY_DIM[dimId] || null;
        if (locByField != null && locByField['Name'] != null) {
            return getLocalizationValue(locByField['Name']);
        }
    }
    return null;
}


function getLocalizationValue(locVo) {
    if (locVo.record != null) {
        var rec = locVo.record;
        var p = SettingsUtils.getPrefix();
        return rec[p + 'Text__c'] || rec[p + 'TextArea__c'] || rec[p + "LongTextArea__c"] || rec[p + "RichTextArea__c"] || null;
    }
    return null;
}

/**
 * Calculates the total of each MDQ segment
 * @param {QuoteLineModel[]} lines The segments that shall be computed
 * @param {Object} columnNames A map from Dimension Types to lists of Column Names
 * @param {Object} groupTypesBySegmentKey Mapping of segment keys to dimension types
 * @returns {Object} Mapping from Dimension Types to a Mapping from Column Names to Numbers
 * @private
 */
function computeMultiSegmentColumnTotals(lines, columnNames, groupTypesBySegmentKey) {
    var allColumnTotals = {};

    if (lines != null) {
        for (var dimType in columnNames) {
            var columnList = columnNames[dimType];
            allColumnTotals[dimType] = {};
            columnList.forEach(function (c) {
                if (allColumnTotals[dimType][c] === undefined) {
                    allColumnTotals[dimType][c] = 0;
                }
                lines.forEach(function (line) {
                    if (line.SegmentLabel__c == c && groupTypesBySegmentKey[line.SegmentKey__c] == dimType) {
                        allColumnTotals[dimType][c] += (line.NetPrice__c * line.effectiveQuantity);
                    }
                });
            });
        }
    }
    for (var k in allColumnTotals) {
        if (allColumnTotals.hasOwnProperty(k)) {
            for (var j in allColumnTotals[k]) {
                if (allColumnTotals[k].hasOwnProperty(j)) {
                    allColumnTotals[k][j] = NumberUtils.setScale(allColumnTotals[k][j], SettingsUtils.getUnitPriceScale());
                }
            }
        }
    }
    return allColumnTotals;
}

/**
 * Computes the total of each MDQ row, which corresponds to a single multi-segmented product
 * @param {QuoteLineModel[]} lines A list of Quote Lines
 * @returns {Object} A mapping from segment keys to net totals
 * @private
 */
function computeMultiSegmentRowTotals(lines) {
    var allRowTotals = {};

    if (lines != null) {
        lines.forEach(function(line) {
            if (line.SegmentKey__c != null && allRowTotals[line.SegmentKey__c] !== undefined) {
                allRowTotals[line.SegmentKey__c] += (line.NetPrice__c * line.effectiveQuantity);
            } else if (line.SegmentKey__c != null) {
                allRowTotals[line.SegmentKey__c] = (line.NetPrice__c * line.effectiveQuantity);
            }
        });
    }
    for (var k in allRowTotals) {
        if (allRowTotals.hasOwnProperty(k)) {
            allRowTotals[k] = NumberUtils.setScale(allRowTotals[k], SettingsUtils.getUnitPriceScale());
        }
    }
    return allRowTotals;
}

/**
 * Computes the net totals for all MDQ lines provided, organized by dimension type
 * @param {QuoteLineModel[]} lines All MDQ lines in the group or quote
 * @returns {Object} A mapping from Dimension Type to Number
 * @private
 */
function computeMultiSegmentTotal(lines) {
    var multiSegTotalMap = {};
    var groupTypesBySegmentKey = {};

    if (lines != null) {
        lines.forEach(function(line) {
            if (line.isTimeBasedSegment) {
                groupTypesBySegmentKey[line.SegmentKey__c] = line.dimType;
            }
        });

        lines.forEach(function(line) {
            if (line.SegmentKey__c != null && line.NetPrice__c != null) {
                var thisDimType = groupTypesBySegmentKey[line.SegmentKey__c];
                if (multiSegTotalMap[thisDimType] === undefined) {
                    multiSegTotalMap[thisDimType] = (line.NetPrice__c * line.effectiveQuantity);
                } else {
                    multiSegTotalMap[thisDimType] += (line.NetPrice__c * line.effectiveQuantity);
                }
            }
        });
    }
    return multiSegTotalMap;
}

/**
 * Computes the net total of all non-segmented lines provided
 * @param {QuoteLineModel[]} lines A list of quote lines
 * @returns {Number}
 * @private
 */
function computeNonSegmentTotal(lines) {
    var nonSegTotal = 0;
    if (lines != null) {
        lines.forEach(function(line) {
            if (line.SegmentKey__c == null && line.displayedSubtotalField != null) {
                nonSegTotal += (line.displayedSubtotalField * line.effectiveQuantity);
            }
        });
    }
    return nonSegTotal;
}

/**
 * Returns the number of lines that should be displayed. Each non-segmented quote line is a line, and all MDQ lines
 * that share the same key count collectively as a single line
 * @param {QuoteLineModel[]} lines A list of quote lines
 * @returns {number}
 */
function computeRowCount(lines) {
    var totalLines = 0;

    if (lines != null) {
        lines.forEach(function(line) {
            if ((line.SegmentIndex__c == null || line.SegmentIndex__c == 1) && line.isVisibleInLineEditor) {
                totalLines++;
            }
        });
    }
    return totalLines;
}

},{"./Utils/MetaDataUtils.js":22,"./Utils/NumberUtils.js":24,"./Utils/SettingsUtils.js":27}],14:[function(require,module,exports){
var ModelUtils = require("./Utils/ModelUtils.js");

module.exports = QuoteSummaryModel;

function QuoteSummaryModel(/*QuoteModel*/ quote, /*Object*/ data) {
    this.values = new Object();
    ModelUtils.copyProperties(data, this);
    // This needs to be after copyProperties
    this.quote = quote;
}

QuoteSummaryModel.prototype.isEditable = function(/*Field*/ field) {
    return false;
};

QuoteSummaryModel.prototype.isFieldRendered = function(/*Field*/ field) {
    if (this.record != null) {
        var value = this.record[this.mapPropertyName(field)];
        return ((value != undefined) && (value != null));
    }
    return false;
};

QuoteSummaryModel.prototype.mapPropertyName = function(/*Field*/ field) {
    return field.name.toLowerCase();
};

},{"./Utils/ModelUtils.js":23}],15:[function(require,module,exports){
/**
 * Created by jfeingold on 6/16/15.
 */
"use strict";

var SettingsUtils = require("./Utils/SettingsUtils.js");
var OperatorsUtils = require("./Utils/OperatorsUtils.js");
var MetaDataUtils = require("./Utils/MetaDataUtils.js");
var LabelUtils = require("./Utils/LabelUtils.js");
var DateUtils = require('./Utils/DateUtils.js');

module.exports = SummaryVariableCalculator;

/**
 * Creates an object that will calculate the values of all summary variables provided
 * @param {Object} variablesMap The summary variables that should be calculated, mapped by ID
 * @constructor
 */
function SummaryVariableCalculator(variablesMap) {
    this.variablesById = variablesMap;
    this.variables = [];
    for (var property in variablesMap) {
        if (variablesMap.hasOwnProperty(property)) {
            this.variables.push(variablesMap[property]);
        }
    }
    this.results = {};
    this.aggregateValues = {};
}

/**
 * Calculates the value of all summary variables in the variables array, based on the quote and records provided
 * @param {QuoteModel2} quote The quote around which the summary variables should be calculated
 * @param {Array} targetRecords List of all quote lines, assets, and subscriptions that should factor into calculation
 */
SummaryVariableCalculator.prototype.calculate = function(quote, targetRecords) {
    this.variables.forEach(function(v) {
        this.aggregateValues[v["Id"]] = this.calculateAggregateValue(v, quote, targetRecords);
    }, this);

    this.variables.forEach(function(v) {
        this.results[v["Id"]] = this.calculateCompositeValue(v, v["Id"]);
    }, this);
};

/**
 * Gets the final calculated result for the summary variable with the given ID
 * @param {String} id The ID of the desired Summary Variable
 * @returns {Number|String} The value of the requested Summary Variable, either a number or a string representing a date
 */
SummaryVariableCalculator.prototype.getResult = function(id) {
    return this.results[id];
};

/**
 * Aggregates all relevant records in "records" using the filter, constraint, and aggregation information in "variable"
 * @param {Object} variable An Object that represents a Summary Variable record
 * @param {QuoteModel2} quote The quote that contains possible constraint information
 * @param {Array} records A list of target objects including quote lines, assets, and subscriptions.
 * @returns {Number|String} The aggregate value of the given summary variable, which may be a number or a string representing a date
 * @private
 */
SummaryVariableCalculator.prototype.calculateAggregateValue = function(variable, quote, records) {
    var cnt = 0;
    var sum = 0;
    var min = null;
    var minDate = null;
    var max = null;
    var maxDate = null;
    var prefix = SettingsUtils.getPrefix();

    // If the variable has no target object, then it is assumed to be the quote line
    if (variable[prefix + "TargetObject__c"] == null) {
        variable[prefix + "TargetObject__c"] = "Quote Line";
    }

    // Get the field that will be aggregated
    var aggregateField = variable[prefix + "AggregateField__c"];
    aggregateField = MetaDataUtils.getField(variable[prefix + "TargetObject__c"], aggregateField);

    // Determine the operation used to filter records
    var op = OperatorsUtils.getInstance(variable[prefix + "Operator__c"]);
    if ((op == null) && (variable[prefix + "FilterField__c"] != null)) {
        // The operator cannot be applied as required, so throw an error.
        var invalidSumVarOp = LabelUtils.getLabelByKey("msg_js_err_sv_invalid_op")
            .replace("{0}", variable["Id"])
            .replace("{1}", variable[prefix + "Operator__c"]);
        throw new Error(invalidSumVarOp);
    }

    var recordSetEmpty = true;
    records.forEach(function(rec) {
        if (getSObjectType(rec) === variable[prefix + "TargetObject__c"]) {
            recordSetEmpty = false;
            if (variable[prefix + "FilterField__c"] != null) {
                // If there is a filter field, get the field's name
                var field = variable[prefix + "FilterField__c"];
                field = MetaDataUtils.getField(MetaDataUtils.getRecordType(rec), field);
                if ((field != null) && !(op.evaluate(rec[field], variable[prefix + "FilterValue__c"]))) {
                    // If the operator isn't satisfied by the filter, do nothing.
                    return;
                }
                if ((variable[prefix + "ConstraintField__c"] != null) && !this.isConstraintMet(variable, quote, rec)) {
                    // If the record doesn't satisfy the constraint, do nothing.
                    return;
                }
            }

            // If we reach this point, we apply the value of the aggregate field to the running totals.
            var aggregateValue = rec[aggregateField];
            if (aggregateValue != null) {
                if (variable[prefix + "AggregateFunction__c"].toLowerCase() !== "count") {
                    var aggregateDecimal = Number(aggregateValue);
                    if (aggregateDecimal === aggregateDecimal) {
                        // This is true for any JS value except NaN, so if we're here, it means the number conversion worked
                        sum += aggregateDecimal;
                        min = (min == null) ? aggregateDecimal : Math.min(min, aggregateDecimal);
                        max = (max == null) ? aggregateDecimal : Math.max(max, aggregateDecimal);
                    } else if (typeof aggregateValue == 'string') {
                        var msTime = Date.parse(aggregateValue);
                        if (msTime === msTime) {
                            var aggregateDate = new Date(msTime);
                            if (min == null || minDate > aggregateDate) {
                                min = aggregateValue;
                                minDate = aggregateDate;
                            }
                            if (max == null || maxDate < aggregateDate) {
                                max = aggregateValue;
                                maxDate = aggregateDate;
                            }
                        }
                    }
                }
                cnt++;
            }
        }
    }, this);

    // Return the correct aggregate measurement
    if (variable[prefix + "AggregateFunction__c"] == null) {
        var missingAggregateMsg = LabelUtils.getLabelByKey("msg_js_err_sv_missing_aggregate")
            .replace("{0}", variable["Id"]);
        throw new Error(missingAggregateMsg);
    } else if (variable[prefix + "AggregateFunction__c"].toLowerCase() === "count") {
        return cnt;
    } else if (variable[prefix + "AggregateFunction__c"].toLowerCase() === "sum") {
        return sum;
    } else if (variable[prefix + "AggregateFunction__c"].toLowerCase() === "average") {
        return (cnt > 0) ? sum / cnt : 0;
    } else if (variable[prefix + "AggregateFunction__c"].toLowerCase() === "min") {
        return min;
    } else if (variable[prefix + "AggregateFunction__c"].toLowerCase() === "max") {
        return max;
    } else {
        var unsupportedAggregateMsg = LabelUtils.getLabelByKey("msg_js_err_sv_unsupported_aggregate")
            .replace("{0}", variable["Id"])
            .replace("{1}", variable[prefix + "AggregateFunction__c"]);
        throw new Error(unsupportedAggregateMsg);
    }
};

/**
 * Returns true if the constraining field indicated by "variable" is the same on both "quote" and "rec"
 * @param {Object} variable Represents a record of a Summary Variable
 * @param {QuoteModel2} quote The quote containing a constraint field
 * @param {Object} rec A quote line, subscription, or asset that will be compared to the quote's constraint field
 * @returns {Boolean} True if the record satisfies the constraint
 * @private
 */
SummaryVariableCalculator.prototype.isConstraintMet = function(variable, quote, rec) {
    var prefix = SettingsUtils.getPrefix();
    var constraintFieldName = variable[prefix + "ConstraintField__c"];
    var recField = MetaDataUtils.getField(MetaDataUtils.getRecordType(rec), constraintFieldName);
    var quoteField = MetaDataUtils.getField(MetaDataUtils.getObjectType(quote), constraintFieldName);
    if (recField != null) {
        return OperatorsUtils.getInstance("equals").evaluate(rec[recField], quote["record"][quoteField]);
    }
    return false;
};

/**
 * Combines the given summary variable with a value or another summary variable using the variable's composite operator.
 * @param {Object} v The variable that should be composed.
 * @param {String} originalVarId The ID of the summary variable that initiated composition. Used to check for circular calls.
 * @returns {Number} The final value of the summary variable
 * @private
 */
SummaryVariableCalculator.prototype.calculateCompositeValue = function(v, originalVarId) {
    var prefix = SettingsUtils.getPrefix();
    var aggValue = this.aggregateValues[v["Id"]];
    var combineField = v[prefix + "CombineWith__c"];
    var compositeOp = v[prefix + "CompositeOperator__c"];
    if (combineField != null || compositeOp != null) {
        if (combineField === originalVarId) {
            var circularRefMsg = LabelUtils.getLabelByKey("msg_js_err_sv_circular_reference")
                .replace("{0}", originalVarId);
            throw new Error(circularRefMsg);
        }

        var anotherVar = this.variablesById[combineField];
        var anotherVal = combineField != null ? this.calculateCompositeValue(anotherVar, originalVarId) : v[prefix + "ValueElement__c"];
        if (aggValue == null || anotherVal == null) {
            return null;
        }
        try {
            return this.applyCompositeOperator(aggValue, anotherVal, compositeOp);
        } catch (e) {
            var msg;
            if (e.problem == 'bad op') {
                msg = LabelUtils.getLabelByKey("msg_js_err_sv_unrecognized_comp_op")
                    .replace("{0}", v["Id"])
                    .replace("{1}", compositeOp);
            } else if (e.problem == 'bad compose') {
                msg = LabelUtils.getLabelByKey("msg_sumvar_composition_err")
                    .replace("{0}", v["Id"])
                    .replace("{1}", combineField);
            } else if (e.problem == 'mult-div-date') {
                msg = LabelUtils.getLabelByKey("msg_sv_date_op_conflict_err")
                    .replace("{0}", v["Id"])
                    .replace("{1}", compositeOp);
            }
            throw new Error(msg);
        }
    }
    return aggValue;
};

/**
 * Applies the specified Composite Operator to the given base and augmenting values.
 * @param {Number|String} base The base value of a summary variable, either a number or a String representing a date
 * @param {Number|String} augment The value with which the base will be augmented. Either a number or a date-string
 * @param {String} operator The operator with which the values will be composed
 * @returns {Number|String}
 * @private
 */
SummaryVariableCalculator.prototype.applyCompositeOperator = function(base, augment, operator) {
    var convertedBase = (typeof base == 'string') ? new Date(Date.parse(base)) : base;
    var convertedAugment = (typeof augment == 'string') ? new Date(Date.parse(augment)) : augment;
    var baseType;
    var augmentType;
    var err;
    switch(operator) {
        case null:
        case undefined:
        case 'Add':
            // The augmenting value must be a number, because you can't add a date to something else
            if (typeof convertedAugment == 'number' || convertedAugment instanceof Number) {
                // If the base value is a Date, it should be incremented by a number of days equal to the augment
                if (convertedBase instanceof Date) {
                    convertedBase.setUTCDate(convertedBase.getUTCDate() + convertedAugment);
                    baseType = DateUtils.distinguishDateFromDateTime(base);
                    if (baseType == 'date') {
                        return DateUtils.toApexDate(convertedBase);
                    } else if (baseType == 'datetime') {
                        return DateUtils.toApexDateTime(convertedBase);
                    }
                } else {
                    // If the base value is a number, just add the two and be done with it
                    return convertedBase + convertedAugment;
                }
            }
            err = new Error();
            err.problem = 'bad compose';
            throw err;
        case 'Subtract':
            if (typeof convertedBase == 'number' || convertedBase instanceof Number) {
                // If the base is a number, the augment must be a number
                if (typeof convertedAugment == 'number' || convertedAugment instanceof Number) {
                    return convertedBase - convertedAugment;
                }
            } else if (convertedBase instanceof Date) {
                // If the base is a date, then the augment must be a number or a date
                baseType = DateUtils.distinguishDateFromDateTime(base);
                if (typeof convertedAugment == 'number' || convertedAugment instanceof Number) {
                    convertedBase.setUTCDate(convertedBase.getUTCDate() - convertedAugment);
                    if (baseType == 'date') {
                        return DateUtils.toApexDate(convertedBase);
                    } else if (stringType == 'datetime') {
                        return DateUtils.toApexDateTime(convertedBase);
                    }
                } else {
                    // Both dates must be dates, not datetimes
                    augmentType = DateUtils.distinguishDateFromDateTime(augment);
                    if (baseType == augmentType && baseType == 'date') {
                        return DateUtils.daysBetween(convertedAugment, convertedBase);
                    }
                }
            }
            err = new Error();
            err.problem = 'bad compose';
            throw err;
        case 'Multiply':
        case 'Divide':
            var baseIsNum = typeof convertedBase == 'number' || convertedBase instanceof Number;
            var augIsNum = typeof convertedAugment == 'number' || convertedAugment instanceof Number;
            if (baseIsNum && augIsNum) {
                if (operator == 'Multiply') {
                    return base * augment;
                } else if (operator == 'Divide') {
                    return (augment == 0) ? null : base / augment;
                }
            }
            err = new Error();
            err.problem = 'mult-div-date';
            throw err;
        default:
            err = new Error();
            err.problem = "bad op";
            throw err;
    }
};

/**
 * Returns the label of the apex type associated with the given record
 * @param {Object} obj An Apex record
 * @returns {String}
 * @private
 */
function getSObjectType(obj) {
    var t = obj["attributes"]["type"];
    var prefix = SettingsUtils.getPrefix();
    switch(t) {
        case prefix + "QuoteLine__c":
            return "Quote Line";
        case "Asset":
            return "Asset";
        case prefix + "ProductOption__c":
            return "Product Option";
        case prefix + "Subscription__c":
            return "Subscription";
        default:
            return t;
    }
}

},{"./Utils/DateUtils.js":18,"./Utils/LabelUtils.js":21,"./Utils/MetaDataUtils.js":22,"./Utils/OperatorsUtils.js":26,"./Utils/SettingsUtils.js":27}],16:[function(require,module,exports){
/**
 * Created by jfeingold on 4/29/15.
 */
"use strict";

var numberUtils = require("./Utils/NumberUtils.js");
var settingsUtils = require("./Utils/SettingsUtils.js");

module.exports = TargetCalculator2;

/**
 * An object that applies discounts to bring the net total towards a target amount designated by the customer
 * @constructor
 */
function TargetCalculator2() {}

TargetCalculator2.prototype = {
    /**
     * Resets the additional discounts of all target-discountable items in the given quote.
     * @param {QuoteModel2} quote The quote to reset
     * @param {QuoteLineGroupModel} group The group whose line items should be adjusted. Overrides the quote.
     */
    resetDiscounts: function(quote, group) {
        var targetLines = (group != null && group.TargetCustomerAmount__c != null) ? group.lineItems : quote.targetLineItems;

        // For all lines in the quote
        var lineCount = targetLines.length;
        for (var i = 0; i < lineCount; i++) {
            var line = targetLines[i];
            // If the line is target-discountable
            if (line.isTargetDiscountable) {
                // Reset its additional discounts
                line.Discount__c = null;
                line.AdditionalDiscountAmount__c = null;
            }
        }
    },

    /**
     * Calculates the discount rate required to meet the target amount, and applies that rate to all static lines.
     * @param {QuoteModel2} quote The quote whose lines should be adjusted
     * @param {QuoteLineGroupModel} group The group whose line items should be adjusted. Overrides the quote.
     */
    calculate: function(quote, group) {
        var targetAmount = (group != null && group.TargetCustomerAmount__c != null) ? group.TargetCustomerAmount__c : quote.TargetCustomerAmount__c;
        if (targetAmount == null) {
            return;
        }

        // If the group has a target customer amount, use its lines. If not, use the lines targeted by the quote's amount
        var targetLines = (group != null && group.TargetCustomerAmount__c != null) ? group.lineItems : quote.targetLineItems;

        var discountableAmount = 0;
        var regularAmount = 0;
        targetLines.forEach(function(line) {
            if (!line.Optional__c) {
                // Non-optional lines count towards the regular total
                regularAmount += line.regularTotal;
                // We include PoTs in this total because non-discountable PoTs cause gaps otherwise
                if (line.isTargetDiscountable || line.isDynamicSubscription) {
                    discountableAmount += line.regularTotal;
                }
            }
        });

        // If any lines are discountable
        if (discountableAmount != 0) {
            // The discount is the difference between the regular amount and the target amount
            var discount = regularAmount - targetAmount;
            // Every line initially receives a discount rate based on the total discountable amount
            var discountRate = discount / discountableAmount;
            var accumulatedDiscount = 0;
            var ups = settingsUtils.getUnitPriceScale();
            targetLines.forEach(function(line) {
                if (line.isTargetDiscountable || line.isDynamicSubscription) {
                    // The additional discount amount is regular price * discount rate
                    var ada = numberUtils.setScale(line.RegularPrice__c * discountRate, ups);
                    // Dynamic subscriptions are used to calculate the discount rate, but we don't set a discount
                    // here because the dynamic subscriptions are subject to a recalculation based on the changed
                    // costs of fixed-price products.
                    if (!line.isDynamicSubscription) {
                        if (line.amountDiscountProrated != null && line.amountDiscountProrated && line.ProrateMultiplier__c != 0) {
                            line.AdditionalDiscountAmount__c = ada / line.ProrateMultiplier__c;
                        } else {
                            line.AdditionalDiscountAmount__c = ada;
                        }
                    }
                    accumulatedDiscount += (ada * line.effectiveQuantity);
                }
            });

            // If the target amount still hasn't been reached, find the first line with quantity of 1 and add the
            // remaining discount to that line
            if (discount != accumulatedDiscount) {
                var item1 = findLineWithQuantity1(targetLines);
                if (item1 != null) {
                    var addDisc = numberUtils.setScale(item1.AdditionalDiscountAmount__c + discount - accumulatedDiscount, ups);
                    if (item1.amountDiscountProrated != null && item1.amountDiscountProrated && item1.ProrateMultiplier__c != 0) {
                        item1.AdditionalDiscountAmount__c = addDisc / item1.ProrateMultiplier__c;
                    } else {
                        item1.AdditionalDiscountAmount__c = addDisc;
                    }
                }
            }
        }
    },
    /**
     * Adjusts the discounts of the provided quote's dynamic items such that the target amount is reached
     * @param {QuoteModel2} quote The quote whose lines will be adjusted
     * @param {QuoteLineGroupModel} group The group whose line items should be adjusted. Overrides the quote.
     */
    adjustDynamicItems: function(quote, group) {
        var targetAmount = (group != null && group.TargetCustomerAmount__c != null) ? group.TargetCustomerAmount__c : quote.TargetCustomerAmount__c;
        var noAmount = targetAmount == null;
        var quoteTotalReached = group == null && targetAmount === quote.customerTotal;
        var groupTotalReached = group != null && targetAmount == group.record[settingsUtils.getPrefix() + "CustomerTotal__c"];

        if (noAmount || quoteTotalReached || groupTotalReached) {
            return;
        }

        var targetLines = (group != null && group.TargetCustomerAmount__c != null) ? group.lineItems : quote.targetLineItems;

        var discountableAmount = 0;
        targetLines.forEach(function(line) {
            if (line.isTargetDiscountable && line.isDynamicSubscription) {
                discountableAmount += line.regularTotal;
            }
        });
        if (discountableAmount !== 0) {
            var discount = (group == null) ? quote.customerTotal - targetAmount : group.record[settingsUtils.getPrefix() + "CustomerTotal__c"] - targetAmount;
            var discountRate = discount / discountableAmount;
            var accumulatedDiscount = 0;
            var ups = settingsUtils.getUnitPriceScale();
            targetLines.forEach(function(line) {
                if (line.isTargetDiscountable && line.isDynamicSubscription) {
                    if (line.amountDiscountProrated != null && line.amountDiscountProrated && line.ProrateMultiplier__c != 0) {
                        line.AdditionalDiscountAmount__c = numberUtils.setScale((line.RegularPrice__c * discountRate) / line.ProrateMultiplier__c, ups);
                    } else {
                        line.AdditionalDiscountAmount__c = numberUtils.setScale(line.RegularPrice__c * discountRate, ups);
                    }
                    accumulatedDiscount += (line.AdditionalDiscountAmount__c * line.effectiveQuantity);
                }
            });
            if (discount != accumulatedDiscount) {
                var item1 = findDynamicLineWithQuantity1(targetLines);
                if (item1 != null) {
                    var addDisc = numberUtils.setScale(item1.AdditionalDiscountAmount__c + discount - accumulatedDiscount, ups);
                    if (item1.amountDiscountProrated != null && item1.amountDiscountProrated && item1.ProrateMultiplier__c != 0) {
                        item1.AdditionalDiscountAmount__c = addDisc / item1.ProrateMultiplier__c;
                    } else {
                        item1.AdditionalDiscountAmount__c = addDisc;
                    }
                }
            }
        }
    }
};

/**
 * Returns the first quote line that is target discountable, not a dynamic subscription, and has quantity 1
 * @param {QuoteLineModel[]} lines An array of QuoteLineModel objects representing a quote's lines
 * @returns {QuoteLineModel | Null} A quote line with quantity 1, or null if no such line exists
 * @private
 */
function findLineWithQuantity1(lines) {
    var res = null;
    lines.forEach(function(line) {
        // Check if res is null first, so that once something is found, the loop is an empty loop.
        if (res == null) {
            if ((line.effectiveQuantity === 1) && line.isTargetDiscountable && !line.isDynamicSubscription && !line.isTimeBasedSegment) {
                res = line;
            }
        }
    });
    return res;
}

/**
 * Returns the first dynamic subscription quote line that is target discountable and has quantity 1
 * @param {QuoteLineModel[]}lines An array of QuoteLineModel objects representing a quote's lines
 * @returns {QuoteLineModel | Null} A quote line with quantity 1, or null if no such line exists
 * @private
 */
function findDynamicLineWithQuantity1(lines) {
    var res = null;
    lines.forEach(function(line) {
        if (res == null) {
            if ((line.effectiveQuantity === 1) && line.isTargetDiscountable && line.isDynamicSubscription && !line.isTimeBasedSegment) {
                res = line;
            }
        }
    });
    return res;
}

},{"./Utils/NumberUtils.js":24,"./Utils/SettingsUtils.js":27}],17:[function(require,module,exports){
var RestClient = require('../data/RestClient.js');
var RemoteClient = require('../data/RemoteClient.js');
var RestProxy = require('../data/RestProxy.js');
var cache = require('../data/Cache.js')();

module.exports = function(conn, orgUrl, forceRest) {

    var inBrowser = typeof window !== 'undefined';
    var useRest = forceRest || typeof Visualforce === 'undefined';
    var client = useRest ? new RestClient(inBrowser ? new RestProxy(conn, orgUrl) : conn.apex) : new RemoteClient();

    function read(prefix, provider, uid) {
        var obj = inBrowser ? cache.get(provider, uid) : null;
        return obj ? Promise.resolve(obj) : new Promise(function(resolve, reject) {
            client.read(prefix, provider, uid).then(function(res) {
                cache.put(provider, uid, res);
                resolve(res);
            }, function(err) {
                reject(err.message || err);
            });
        });
    }

    function load(prefix, provider, uid, context) {
      var obj = inBrowser ? cache.get(provider, uid) : null;
        return obj ? Promise.resolve(obj) : new Promise(function(resolve, reject) {
            client.load(prefix, provider, uid || '', context).then(function(res) {
                cache.put(provider, uid, res);
                resolve(res);
            }, function(err) {
                reject(err.message || err);
            });
        });
    }

    function clear(provider, uid) {
        cache.clear(provider, uid);
    }

    function setOptions(opts) {
        client.setOptions(opts);
    }

    function save(prefix, provider, obj, cacheToPurge) {
        return new Promise(function(resolve, reject) {
            client.save(prefix, provider, obj).then(function(res) {
                purge(cacheToPurge);
                resolve(res);
            }, function(err) {
                reject(err);
            });
        });
    }

    function purge(cacheToPurge) {
        if(!cacheToPurge)
            return;

        if(!cacheToPurge.provider || !cacheToPurge.uid)
            return;

        var providers = cacheToPurge.provider.constructor === Array ? cacheToPurge.provider : [cacheToPurge.provider];
        var ids = cacheToPurge.uid.constructor === Array ? cacheToPurge.uid : [cacheToPurge.uid];

        var numProviders = providers.length;
        for(var i = 0; i < numProviders; i++) {
            var provider = providers[i];
            var id = ids.length > i ? ids[length] : undefined;
            cache.clear(provider, id);
        }
    }

    return {
        read: read,
        load: load,
        save: save,
        clear: clear,
        setOptions: setOptions
    };
}
},{"../data/Cache.js":28,"../data/RemoteClient.js":29,"../data/RestClient.js":30,"../data/RestProxy.js":31}],18:[function(require,module,exports){
/**
 * Created by jfeingold on 5/4/15.
 */

module.exports.toApexDate = toApexDate;
module.exports.toApexDateTime = toApexDateTime;
module.exports.monthsBetween = monthsBetween;
module.exports.daysBetween = daysBetween;
module.exports.distinguishDateFromDateTime = distinguishDateFromDateTime;
/**
 * Takes a JS Date object and turns it into a string of the type 'YYYY-MM-DD', which is what Apex is expecting.
 * @param {Date} date The date to be stringified
 * @returns {string}
 */
function toApexDate(/*Date*/ date) {
    // Get the ISO formatted date string.
    // This will be formatted: YYYY-MM-DDTHH:mm:ss.sssZ
    var dateIso = date.toISOString();

    // Replace everything after the T with an empty string
    return dateIso.replace(new RegExp('[Tt].*'), "");
}

/**
 * Takes a JS Date object and turns it into a string of the format 'YYYY-MM-DDTHH:mm:ss.sss+0000', which is what Apex
 * expects a date-time to look like
 * @param {Date} dateTime The datetime to be stringified
 * @returns {string}
 */
function toApexDateTime(dateTime) {
    // Get the ISO formatted date string.
    // This will be formatted YYYY-MM;DDTHH:mm:ss.sssZ
    var dateIso = dateTime.toISOString();

    // Replace the 'Z' at the end with '+0000'
    return dateIso.slice(0, dateIso.length - 1) + "+0000";
}

/**
 * Tests if the provided string represents a Date, DateTime, or neither
 * @param {String} dateString A string that may or may not represent a date or datetime
 * @returns {String} 'date',' datetime', or 'none', if the string format resembles an Apex Date,DateTime, or neither respectively
 */
function distinguishDateFromDateTime(dateString) {
    var dateRegex = new RegExp('\\d{4}-\\d{2}-\\d{2}');
    var dateTimeRegex = new RegExp('\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}(Z|(\\+\\d{4}))');
    if (dateRegex.test(dateString) && dateString.length == 10) {
        return 'date';
    } else if (dateTimeRegex.test(dateString) && (dateString.length == 24 || dateString.length == 28)) {
        return 'datetime';
    }
    return 'none';
}

/**
 * Returns the difference in months between the two dates, ignoring day. i.e. all days in a given month are
 * equally far from all days in any other given month.
 * @param {Date} startDate
 * @param {Date} endDate
 * @returns {number} Positive when startDate is before endDate, 0 if same month, else negative.
 */
function monthsBetween(/*Date*/ startDate, /*Date*/ endDate) {
    // If the start date is actually after the end date, reverse the arguments and multiply the result by -1
    if (startDate  > endDate) {
        return -1 * this.monthsBetween(endDate, startDate);
    }
    var result = 0;
    // Add the difference in years * 12
    result += ((endDate.getUTCFullYear() - startDate.getUTCFullYear()) * 12);
    // Add the difference in months. Note: If startDate was later in the year than endDate, this value will be
    // subtracted.
    result += (endDate.getUTCMonth() - startDate.getUTCMonth());
    return result;
}

/**
 * Returns the number of days between two dates.
 * @param {Date} startDate
 * @param {Date} endDate
 * @returns {number} Positive when startDate is before endDate, else negative
 */
function daysBetween(/*Date*/ startDate, /*Date*/ endDate) {
    // If the start date is after the end date, reverse the arguments and multiply the result by -1
    if (startDate > endDate) {
        return -1 * this.daysBetween(endDate, startDate);
    }
    // Get the difference in Unix time
    var msDiff = endDate.getTime() - startDate.getTime();
    var dayInUnix = 86400000;
    // return the difference divided by the number of ms in a day.
    return Math.round(msDiff / dayInUnix);
}
},{}],19:[function(require,module,exports){
/**
 * Created by jfeingold on 7/21/15.
 */
"use strict";
var LabelUtils = require("./LabelUtils.js");


var CONVERSION_TABLE = {
    "00000": "A",
    "00001": "B",
    "00010": "C",
    "00011": "D",
    "00100": "E",
    "00101": "F",
    "00110": "G",
    "00111": "H",
    "01000": "I",
    "01001": "J",
    "01010": "K",
    "01011": "L",
    "01100": "M",
    "01101": "N",
    "01110": "O",
    "01111": "P",
    "10000": "Q",
    "10001": "R",
    "10010": "S",
    "10011": "T",
    "10100": "U",
    "10101": "V",
    "10110": "W",
    "10111": "X",
    "11000": "Y",
    "11001": "Z",
    "11010": "0",
    "11011": "1",
    "11100": "2",
    "11101": "3",
    "11110": "4",
    "11111": "5"
};

module.exports.compareIds = compareIds;
module.exports.convertTo18 = convertTo18;

/**
 * Casts both IDs to uppercase 18-digit IDs and returns true if they are equal
 * @param {String} id1 An Apex ID
 * @param {String} id2 An Apex ID
 * @returns {boolean}
 */
function compareIds(id1, id2) {
    if (id1 == null && id2 == null) {
        return true;
    } else if (id1 == null || id2 == null) {
        return false;
    }
    return convertTo18(id1).toUpperCase() === convertTo18(id2).toUpperCase();
}

/**
 * Converts the ID provided to an 18-digit Apex ID
 * @param {String} id An Apex ID string
 * @returns {string}
 * @throws Throws an error if argument is not 15 or 18 characters long
 */
function convertTo18(id) {
    if (id.length === 15) {
        var part1 = convertToDigit(id.slice(0, 5));
        var part2 = convertToDigit(id.slice(5, 10));
        var part3 = convertToDigit(id.slice(10, 15));
        return (id + part1 + part2 + part3);
    } else if (id.length === 18) {
        return id;
    } else {
        var idConversionErrString = LabelUtils.getLabelByKey("msg_js_err_id_conversion")
            .replace("{0}", id);
        throw Error(idConversionErrStr);
    }
}


/**
 * Reverses the characters in an alphanumeric string, i.e., "SpinOn" becomes "nOnipS"
 * @param {String} str An alphanumeric string
 * @returns {string}
 * @private
 */
function reverseString(str) {
    return str.split("").reverse().join("");
}

/**
 * Replaces all numeric or lowercase characters with 0, and all uppercase characters with 1, i.e. "0Sa0Z" becomes "01001"
 * @param {String} string
 * @returns {string}
 * @private
 */
function replaceWithBinary(string) {
    var res = string.replace(/[^A-Z]/g, "0");
    return res.replace(/[A-Z]/g, "1");
}

/**
 * Uses the Conversion Table to turn a 5-digit binary string into a single character
 * @param {String} seg A 5-digit string of 1s and 0s
 * @returns {String} A single character in the range A-Z or 0-5
 * @private
 */
function convertToDigit(seg) {
    return CONVERSION_TABLE[replaceWithBinary(reverseString(seg))];
}

},{"./LabelUtils.js":21}],20:[function(require,module,exports){
/**
 * Created by jfeingold on 5/1/15.
 */

module.exports.TYPE_RENEWAL = "Renewal";
module.exports.TYPE_AMENDMENT = "Amendment";
module.exports.TYPE_SINGLE_DIMENSION = "One-time";
module.exports.TYPE_YEARLY_DIMENSION = "Year";
module.exports.TYPE_QUARTERLY_DIMENSION = "Quarter";
module.exports.TYPE_MONTHLY_DIMENSION = "Month";
module.exports.TYPE_CUSTOM_DIMENSION = "Custom";
module.exports.PRICING_METHOD_CUSTOM = "Custom";
module.exports.PRICING_METHOD_COST = "Cost";
module.exports.PRICING_METHOD_BLOCK = "Block";
module.exports.PRICING_METHOD_LIST = "List";
module.exports.PRICING_METHOD_PERCENT_OF_TOTAL = "percent of total";
module.exports.OP_EQ = "equals";
module.exports.OP_NEQ = "not equals";
module.exports.OP_LT = "less than";
module.exports.OP_LTE = "less or equals";
module.exports.OP_GT = "greater than";
module.exports.OP_GTE = "greater or equals";
module.exports.OP_SW = "starts with";
module.exports.OP_EW = "ends with";
module.exports.OP_CONT = "contains";
},{}],21:[function(require,module,exports){
/**
 * Created by jfeingold on 10/28/15.
 */
"use strict";

var LABEL_MAP;

module.exports.setLabels = setLabels;
module.exports.getLabelByKey = getLabelByKey;

function setLabels(labels) {
    LABEL_MAP = labels;
}

function getLabelByKey(key) {
    var labels = LABEL_MAP || {};
    if (labels[key] != null) {
        return labels[key];
    } else {
        var noSuchLabelErrorMsg = labels["msg_js_err_no_such_label"];
        if (noSuchLabelErrorMsg == null) {
            throw new Error("Error: No label exists with the key '" + key + "'. Please contact your SteelBrick administrator.");
        }
        throw new Error(noSuchLabelErrorMsg.replace('{0}', key));
    }
}
},{}],22:[function(require,module,exports){
/**
 * Created by jfeingold on 6/19/15.
 */
var SettingsUtils = require('./SettingsUtils');

var UNIVERSAL_STANDARD_FIELDS = {
    'id': true,
    'createddate': true,
    'lastmodifieddate': true,
    'name': true,
    'ownerid': true,
    'createdbyid': true,
    'lastmodifiedbyid': true,
    'currencyisocode': true
};

var QUOTE_LINE_STANDARD_FIELDS = {
    "quantity": "Quantity__c",
    "list price": "ListPrice__c",
    "net total": "NetTotal__c",
    "customer total": "CustomerTotal__c",
    "regular total": "RegularTotal__c",
    "list total": "ListTotal__c",
    "product family": "ProductFamily__c",
    "product code": "ProductCode__c",
    "product": "Product__c",
    "markup (%)": "MarkupRate__c",
    "markup (amt)": "MarkupAmount__c",
    "discount (%)": "Discount__c",
    "discount (amt)": "AdditionalDiscountAmount__c",
    "partner discount": "PartnerDiscount__c",
    "subscription category": "SubscriptionCategory__c",
    "total discount (amt)": "TotalDiscountAmount__c",
    "optional": "Optional__c",
    "number": "Number__c"
};

var QUOTE_STANDARD_FIELDS = {
    'type': "Type__c",
    'status': "Status__c",
    "primary": "Primary__c",
    "list amount": "ListAmount__c",
    "regular amount": "RegularAmount__c",
    "customer amount": "CustomerAmount__c",
    "net amount": "NetAmount__c",
    "total customer disc. amount": "TotalCustomerDiscountAmount__c",
    "addl. disc. amount": "AdditionalDiscountAmount__c",
    "bill to country": "BillingCountry__c",
    "ship to country": "ShippingCountry__c",
    "group line items": "LineItemsGrouped__c"
};

var ASSET_STANDARD_FIELDS = {
    'AccountId': 'AccountId',
    'ContactId': 'ContactId',
    'Description': 'Description',
    'InstallDate': 'InstallDate',
    'IsCompetitorProduct': 'IsCompetitorProduct',
    'LastReferencedDate': 'LastReferencedDate',
    'LastViewedDate': 'LastViewedDate',
    'Name': 'Name',
    'OwnerId': 'OwnerId',
    'ParentId': 'ParentId',
    'Price': 'Price',
    'PurchaseDate': 'PurchaseDate',
    'Quantity': 'Quantity',
    'RootAssetId': 'RootAssetId',
    'SerialNumber': 'SerialNumber',
    'Status': 'Status',
    'UsageEndDate': 'UsageEndDate'
};

/**
 * Returns the Apex type of a record
 * @param {Object} object A JSON representing a Salesforce record
 * @returns {String}
 */
module.exports.getRecordType = function(object) {
    if (object == null) {
        return null;
    } else if (object.hasOwnProperty("attributes") && object["attributes"] != null) {
        return object["attributes"]["type"];
    }
    return null;
};

/**
 * Returns the Apex type of a JS Object
 * @param {Object} obj A JS Object that models an Apex class
 * @returns {String}
 */
module.exports.getObjectType = function(obj) {
    var record = obj["record"];
    if (record == null) {
        return null;
    } else if (record.hasOwnProperty("attributes") && record["attributes"] != null) {
        return record["attributes"]["type"];
    }
    return null;
};

/**
 * Returns the API name of the field with the given label on the given object, resolving any aliases
 * @param {String} type The Apex class that has the desired field
 * @param {String} name The name of the desired field, possibly an alias
 * @returns {String} The API name of the field
 */
module.exports.getField = function(type, name) {
    if (name == null) {
        return null;
    }
    if (UNIVERSAL_STANDARD_FIELDS[name.toLowerCase()] != null) {
        return name;
    }
    var prefix = SettingsUtils.getPrefix().toLowerCase();
    var convType = type.toLowerCase();
    switch(convType) {
        case prefix + "quoteline__c":
        case 'quote line':
            return getFieldFromMap(QUOTE_LINE_STANDARD_FIELDS, name);
        case prefix + 'quote__c':
        case 'quote':
            return getFieldFromMap(QUOTE_STANDARD_FIELDS, name);
        case 'asset':
            // Asset is a standard object, so any standard field needs to be unaliased
            return ASSET_STANDARD_FIELDS[name] || (name);
        default:
            return SettingsUtils.getPrefix() + name;
    }
};

/**
 * Returns the API name of the given field, consulting the given alias map.
 * @param {Object.<String,String>} fieldMap A mapping from Aliases to the corresponding field name
 * @param {String} field The (possibly aliased) name of a field
 * @returns {String|Null} A field name, or null if 'field' does not end in __c or contains spaces
 */
function getFieldFromMap(fieldMap, field) {
    var trueField = fieldMap[field.toLowerCase()];
    if (trueField != null) {
        // If an alias exists for the given field in the given array, return that alias
        return SettingsUtils.getPrefix() + trueField;
    } else {
        // If no alias exists, the field might be a standard field. Check if it ends with __c and contains no spaces.
        // Note that this won't catch misspelled field names, but it will prevent one from using aliases on the wrong object.
        // For example, since Unit Price has no alias on the Quote Line object, you would be unable to do that.
        if ((field.lastIndexOf('__c') === (field.length - 3)) && (field.indexOf(' ') === -1)) {
            return field;
        } else {
            return null;
        }
    }
}
},{"./SettingsUtils":27}],23:[function(require,module,exports){
/**
 * Created by jfeingold on 4/24/15.
 */
var DateUtils = require("./DateUtils");
var IdUtils = require("./IdUtils");
var SettingsUtils = require("./SettingsUtils");

module.exports.copyProperties = copyProperties;
module.exports.dateGetter = dateGetter;
module.exports.standardGetter = standardGetter;
module.exports.idGetter = idGetter;
module.exports.opportunityLookupGetter = opportunityLookupGetter;
module.exports.dateSetter = dateSetter;
module.exports.standardSetter = standardSetter;
module.exports.invalidSetter = invalidSetter;
module.exports.deleteGettersAndSetters = deleteGettersAndSetters;

function copyProperties(src, target) {
    for (var attr in src) {
        if (!(src[attr] instanceof Function)) {
            target[attr] = src[attr];
        }
    }
}

function deleteGettersAndSetters(obj) {
    for (var attr in obj) {
        var protoDescr = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(obj), attr);
        if (protoDescr != null && (protoDescr.get != null || protoDescr.set != null)) {
            delete Object.getPrototypeOf(obj)[attr];
        }
    }
}


function dateGetter(field, record) {
    var res = record[field];
    if (res != null) {
        return new Date(res);
    } else {
        return null;
    }
}

function standardGetter(field, record) {
    return record[field];
}

function idGetter(field, record) {
    var res = record[field];
    if (res != null) {
        return IdUtils.convertTo18(res);
    } else {
        return null;
    }
}

function opportunityLookupGetter(field, record) {
    var res = record[field];
    if (res != null) {
        return res;
    }
    var opp = record[SettingsUtils.getPrefix() + 'Opportunity2__r'];
    if (opp != null) {
        switch(field) {
            case 'Account__c':
            case "SBQQ__Account__c":
                res = opp.AccountId;
                break;
            case "PricebookId__c":
            case "SBQQ__PricebookId__c":
                res = opp.Pricebook2Id;
        }
    }
    if (res != null) {
        return IdUtils.convertTo18(res);
    }
    return null;
}


function dateSetter(value, field, record) {
    if (value instanceof Date) {
        value = DateUtils.toApexDate(value);
    }
    record[field] = value;
}

function standardSetter(value, field, record) {
    record[field] = value;
}

function invalidSetter(v, f, r) {
    throw Error("You cannot modify '" + f + "', as it is read-only");
}
},{"./DateUtils":18,"./IdUtils":19,"./SettingsUtils":27}],24:[function(require,module,exports){
/**
 * Created by Josh Feingold on 5/12/15.
 */
module.exports.setScale = setScale;

/**
 * Rounds a number to the given scale, rounding up at 5.
 * i.e. setScale(55.55, 1) = 55.6
 * @param {number} num The number to be rounded
 * @param {number} scale The number of digits that should be kept after the decimal point
 * @returns {number} Num, rounded to 'scale'-many decimals.
 */
function setScale(num, scale) {
    var exp = Math.pow(10, scale);
    num *= exp;
    var res = Math.round(num);
    res /= exp;
    return res;
}
},{}],25:[function(require,module,exports){
var jsforce = require('jsforce');

var oauth_utils = function(accessToken, orgPrefix) {

    var remoteAction = 'QuoteLineEditorController.refreshAccessToken';
    if(orgPrefix)
        remoteAction = orgPrefix + remoteAction;

    jsforce.OAuth2.prototype.refreshToken = function(refreshToken, callback) {
        Visualforce.remoting.Manager.invokeAction(remoteAction, function(accessToken, event) {
            cacheToken(accessToken);
            callback((!accessToken ? {message: event.message} : false), {access_token : accessToken, id: '' });
        });
    };

	function getConnection() {
		return new jsforce.Connection({
		    oauth2 : new jsforce.OAuth2({clientId : true, clientSecret: true}),
            accessToken : accessToken || getCachedToken(),
            refreshToken: ''
        });
	}

	function getCachedToken() {
        if(typeof sessionStorage === 'undefined')
            return '';

        return sessionStorage.getItem(remoteAction);
	}

    function cacheToken(accessToken) {
        if(typeof sessionStorage === 'undefined')
            return;

        sessionStorage.setItem(remoteAction, accessToken);
    }

	return {
	    getConnection: getConnection
	};
}

module.exports = oauth_utils;

},{"jsforce":56}],26:[function(require,module,exports){
/**
 * Created by jfeingold on 6/16/15.
 */
function OperatorsUtils () {}
var constants = require("./JSQCConstants.js");
module.exports.getInstance = getInstance;
module.exports.getInverseInstance = getInverseInstance;


/**
 * Returns an object that can perform the desired comparison between two values
 * @param {String} key The operation desired
 * @returns {Object} An object that is guaranteed to have a method "evaluate(a, b)"
 */
function getInstance(key) {
    switch(key) {
        case constants.OP_EQ:
            return new OpEquals();
        case constants.OP_NEQ:
            return new OpNotEquals();
        case constants.OP_LT:
            return new OpLessThan();
        case constants.OP_LTE:
            return new OpLessThanEquals();
        case constants.OP_GT:
            return new OpGreaterThan();
        case constants.OP_GTE:
            return new OpGreaterThanEquals();
        case constants.OP_SW:
            return new OpStartsWith();
        case constants.OP_EW:
            return new OpEndsWith();
        case constants.OP_CONT:
            return new OpContains();
        default:
            return null;
    }
}

/**
 * Returns an object that can perform the inverse of the desired comparison between two values.
 * i.e. The operator that returns the same result when the order of the arguments is reversed.
 * @param {String} key The operation desired
 * @returns {Object} An object that is guaranteed to have a method "evaluate(a, b)"}
 */
function getInverseInstance(key) {
    switch(key) {
        case constants.OP_EQ:
            return new OpEquals();
        case constants.OP_NEQ:
            return new OpNotEquals();
        case constants.OP_LT:
            return new OpGreaterThan();
        case constants.OP_LTE:
            return new OpGreaterThanEquals();
        case constants.OP_GT:
            return new OpLessThan();
        case constants.OP_GTE:
            return new OpLessThanEquals();
        case constants.OP_SW:
            return new OpStartsWith();
        case constants.OP_EW:
            return new OpEndsWith();
        case constants.OP_CONT:
            return new OpContains();
        default:
            return null;
    }
}

function OpEquals() {
    return {
        testValueCache: {},
        fieldValueCache: {},
        opType: "equals",
        evaluate: function(fieldValue, testValue) {
            // if either is null, check if both are null
            if (fieldValue == null || testValue == null) {
                return fieldValue == testValue;
            }
            if (fieldValue instanceof Date) {
                // TODO: YOU MIGHT NEED TO IMPLEMENT SOMETHING FOR DATETIME!
                // if the field value is a date, the testValue, which is a string, needs to be converted to a date
                return fieldValue.getTime() === (new Date(testValue)).getTime();
            } else if (typeof fieldValue === "boolean") {
                // Likewise, if fv is a boolean, tv needs to be one as well
                return fieldValue === (String(testValue).toLowerCase() === "true");
            } else if (typeof fieldValue === "string") {
                // This value needs to be stored in the testvalue cache so comma-separated values can be handled
                var lowerCaseTest = testValue.toLowerCase();
	            var lowerCaseField = fieldValue.toLowerCase();
                if (this.testValueCache[lowerCaseTest] == null) {
                    this.testValueCache[lowerCaseTest] = valueFor(lowerCaseTest);
                }
                // Same as above
                if (this.fieldValueCache[lowerCaseField] == null) {
                    this.fieldValueCache[lowerCaseField] = valueFor(lowerCaseField);
                }
                return this.testValueCache[lowerCaseTest].equals(this.fieldValueCache[lowerCaseField]);
            } else if (typeof fieldValue === "number" || fieldValue instanceof Number) {
                return fieldValue.valueOf() == testValue;
            }
            // If it's none of those types, return false
            return false;
        }
    }
}

function OpNotEquals() {
    return {
        opType: "not equals",
        equals: new OpEquals(),
        evaluate: function(fieldValue, testValue) {
            return !this.equals.evaluate(fieldValue, testValue);
        }
    }
}

function OpGreaterThan() {
    return {
        opType: "greater than",
        evaluate: function(fieldValue, testValue) {
            if ((fieldValue == null) || (testValue == null)) {
                return false;
            }
            if (typeof fieldValue === "number" || fieldValue instanceof Number) {
                return fieldValue.valueOf() > testValue;
            } else if (fieldValue instanceof Date) {
                return fieldValue > new Date(testValue);
            } else if (typeof fieldValue == 'string') {
                var fieldTime = Date.parse(fieldValue);
                var testTime = Date.parse(testValue);
                if ((fieldTime === fieldTime) && (testTime === testTime)) {
                    // If they're both numbers...
                    return fieldTime > testTime;
                }
                return fieldValue.toLowerCase() > testValue.toLowerCase();
            }
            return false;
        }
    }
}

function OpGreaterThanEquals() {
    return {
        opType: "greater than equals",
        evaluate: function(fieldValue, testValue) {
            if ((fieldValue == null) || (testValue == null)) {
                return false;
            }
            if (typeof fieldValue === "number" || fieldValue instanceof Number) {
                return fieldValue.valueOf() >= testValue;
            } else if (fieldValue instanceof Date) {
                return fieldValue >= new Date(testValue);
            } else if (typeof fieldValue == 'string') {
                var fieldTime = Date.parse(fieldValue);
                var testTime = Date.parse(testValue);
                if ((fieldTime === fieldTime) && (testTime === testTime)) {
                    // If they're both numbers...
                    return fieldTime >= testTime;
                }
                return fieldValue >= testValue;
            }
            return false;
        }
    }
}

function OpLessThan() {
    // If fieldValue is not greater than or equal to testValue, it's less than.
    return {
        opType: "less than",
        gte: new OpGreaterThanEquals(),
        evaluate: function(fieldValue, testValue) {
            if ((fieldValue == null) || (testValue == null) || (typeof fieldValue !== "number" && typeof fieldValue !== 'string' && !(fieldValue instanceof Date || fieldValue instanceof Number))) {
                return false;
            }
            return !this.gte.evaluate(fieldValue, testValue);
        }
    }
}

function OpLessThanEquals() {
    // If fieldValue is not greater than testValue, it's less than or equal
    return {
        opType: "less than equals",
        gt: new OpGreaterThan(),
        evaluate: function(fieldValue, testValue) {
            if ((fieldValue == null) || (testValue == null) || (typeof fieldValue !== "number" && typeof fieldValue !== 'string' && !(fieldValue instanceof Date || fieldValue instanceof Number))) {
                return false;
            }
            return !this.gt.evaluate(fieldValue, testValue);
        }
    }
}

function OpStartsWith() {
    return {
        opType: "starts with",
        evaluate: function(fieldValue, testValue) {
            if ((fieldValue == null) || (testValue == null)) {
                return false;
            }
            return (String(fieldValue).toLowerCase()).indexOf(String(testValue).toLowerCase()) === 0;
        }
    }
}

function OpEndsWith() {
    return {
        opType: "ends with",
        evaluate: function(fieldValue, testValue) {
            if (fieldValue == null || testValue == null) {
                return false;
            }
            var fStr = String(fieldValue).toLowerCase();
            var tStr = String(testValue).toLowerCase();
            return fStr.indexOf(tStr, fStr.length - tStr.length) !== -1;
        }
    }
}

function OpContains() {
    return {
        opType: "contains",
        evaluate: function(fieldValue, testValue) {
            if ((fieldValue == null) || (testValue == null)) {
                return false;
            }
            var fStr = String(fieldValue).toLowerCase();
            var tStr = String(testValue).toLowerCase();
            return fStr.indexOf(tStr) !== -1;
        }
    }
}

function valueFor(value) {
    if ((value.indexOf(',') > -1) && (value.indexOf('"') != 0) && (value.lastIndexOf('"') != value.length - 1)) {
        // Return a MultipleValue object
        return {
            valueType: 'Multi',
            valueSet: value.split(',').map(function(v) {return v.trim()}),
            equals: function(otherValue) {
                if (otherValue.valueType === 'Multi') {
                    var otherVals = otherValue.valueSet;
                    return otherVals.some(function(v) {return this.valueSet.indexOf(v) != -1}, this);
                } else {
                    return this.valueSet.indexOf(otherValue.value) != -1;
                }
            }
        }
    } else {
        // Return a Value object
        return {
            valueType: 'Single',
            value: value,
            equals: function(otherValue) {
                return this.value === otherValue.value;
            }
        }
    }
}

},{"./JSQCConstants.js":20}],27:[function(require,module,exports){
/**
 * Created by jfeingold on 6/11/15.
 */
function SettingsUtils() {}

SETTINGS = null;

module.exports.setSettings = setSettings;
module.exports.getSettings = getSettings;
module.exports.getUnitPriceScale = getUnitPriceScale;
module.exports.isMultiCurrencyOrg = isMultiCurrencyOrg;
module.exports.subscriptionTermUnitIsDay = subscriptionTermUnitIsDay;
module.exports.subscriptionProratePrecision = subscriptionProratePrecision;
module.exports.getRequiredByMessage = getRequiredByMessage;
module.exports.getQuantityScale = getQuantityScale;
module.exports.hasQuotePriceRules = hasQuotePriceRules;
module.exports.setPrefix = setPrefix;
module.exports.getPrefix = getPrefix;
module.exports.discountsUseCustomExclusionField = discountsUseCustomExclusionField;
module.exports.getCurrencySymbol = getCurrencySymbol;
module.exports.getCurrencyIsoCodes = getCurrencyIsoCodes;
module.exports.isRenewedAssetsHiddenWhenEditing = isRenewedAssetsHiddenWhenEditing;
module.exports.getSummaryFieldsByLineType = getSummaryFieldsByLineType;
module.exports.getPlugin = getPlugin;
module.exports.getDisplayedLookupMap = getDisplayedLookupMap;
module.exports.isFieldInLineEditor = isFieldInLineEditor;
module.exports.isIncludeNetNewInMaintenanceEnabled = isIncludeNetNewInMaintenanceEnabled;
module.exports.getDimensionValueLabelMap = getDimensionValueLabelMap;
module.exports.getProrateAmountDiscountFieldName = getProrateAmountDiscountFieldName;
module.exports.getOverageRateFieldName = getOverageRateFieldName;
module.exports.getReferencedFieldMap = getReferencedFieldMap;
module.exports.getQuoteLookups = getQuoteLookups;
module.exports.getGroupLookups = getGroupLookups;
module.exports.getLineLookups = getLineLookups;
module.exports.getLineEditorSubtotalsField = getLineEditorSubtotalsField;

/**
 * Sets the provided object as the settings for the duration of calculation
 * @param {Object} value A JSON containing setting information
 * @private
 */
function setSettings(value) {
	if (value != null) {
		SETTINGS = value;
	}
}

/**
 * Returns the Setting JSON
 * @returns {Object}
 */
function getSettings() {
	return SETTINGS;
}

/**
 * Returns the number of decimal places to which prices shall be rounded
 * @returns {Number} 2, unless settings declare otherwise
 */
function getUnitPriceScale() {
	var s = getSettings();
	if (s != null) {
		return s["priceScale"];
	}
	return 2;
}

/**
 * Returns true when applied to a multi-currency org
 * @returns {boolean}
 */
function isMultiCurrencyOrg() {
	var s = getSettings();
	if (s != null) {
		return s["isMultiCurrencyOrg"] === true;
	}
	return false;
}

/**
 * If subscriptions are measured in days, returns true
 * @returns {boolean}
 */
function subscriptionTermUnitIsDay() {
	var s = getSettings();
	if (s != null) {
		return s["subscriptionTermUnitIsDay"] === true;
	}
	return false;
}

/**
 * Returns the level of precision to which subscriptions are prorated
 * @returns {String} Typically either "month", "day", or "month+day", although a null value is possible
 */
function subscriptionProratePrecision() {
	var s = getSettings();
	if (s != null) {
		return s["subscriptionProratePrecision"];
	}
	return null;
}

/**
 * Returns the template string that indicates product dependencies
 * @returns {String}
 */
function getRequiredByMessage() {
	var s = getSettings();
	if (s != null) {
		return s["msgRequiredBy"];
	}
	return "";
}

/**
 * Returns the number of decimal places to which quantities shall be rounded. Can be overwritten on the line-level.
 * @returns {Number} 2 unless settings declare otherwise
 */
function getQuantityScale() {
	var s = getSettings();
	if (s != null) {
		return s["quantityScale"];
	}
	return 2;
}

/**
 * Returns true if there are quote-level price rules that need to be evaluated
 * @returns {boolean}
 */
function hasQuotePriceRules() {
	var s = getSettings();
	if (s != null) {
		return s["hasQuotePriceRules"] === true;
	}
	return false;
}

/**
 * Sets the prefix that prepends all custom fields and objects
 * @param {String} prefix
 */
function setPrefix(prefix) {
	var s = getSettings();
	if (s != null) {
		s["developerPrefix"] = prefix;
	}
}

/**
 * Returns the string that must precede all custom field and object uses
 * @returns {String} Under normal use, either 'SBQQ__' or an empty string
 */
function getPrefix() {
	var s = getSettings();
	if (s != null) {
		return s["developerPrefix"];
	}
	return '';
}

/**
 * Returns true if discount schedules use CustomExcludedPricebookIds__c instead of ExcludedPricebookIds__c
 * @returns {boolean}
 */
function discountsUseCustomExclusionField() {
	var s = getSettings();
	if (s != null) {
		return s["discountsUseCustomExclusionField"] === true;
	}
	return false;
}

/**
 * Return the currency symbol used by this org, defaulting to "$"
 * @returns {String}
 */
function getCurrencySymbol() {
	var s = getSettings();
	if (s != null) {
		return s["currencySymbol"];
	}
	return "$";
}

/**
 * Returns the possible currency isocodes used by this org
 * @returns {String[]}
 */
function getCurrencyIsoCodes() {
	var s = getSettings();
	if (s != null) {
		return s["currencyIsoCodes"];
	}
	return [];
}

/**
 * Indicates whether renewed assets are hidden in the line editor
 * @returns {Boolean}
 */
function isRenewedAssetsHiddenWhenEditing() {
	var s = getSettings();
	if (s != null) {
		return s["isRenewedAssetsHiddenWhenEditing"];
	}
	return false;
}

/**
 * Returns the fields that are summarized in the line editor, associated with a given type of line
 * @param {String} lineType A string indicating the SF type of a line
 * @returns {Object}}
 */
function getSummaryFieldsByLineType(lineType) {
	var s = getSettings();
	if (s != null) {
		if (lineType == (getPrefix() + "QuoteLine__c")) {
			return s["quoteLineSummaryFields"];
		} else if (lineType == (getPrefix() + "WebQuoteLine__c")) {
			return s["webQuoteLineSummaryFields"];
		}
	}
	return [];
}

/**
 * Returns an identifier for the JSQC Plugin
 * @returns {String}
 */
function getPlugin() {
	var s = getSettings();
	if (s != null) {
		return s["jsqcPlugin"];
	}
	return null;
}

/**
 * Returns a map that contains the names of any lookup fields that are displayed in line editor fieldsets on the Quote,
 * Line, or Group objects. This object is manually passed in from the Line Editor, and is never set in Heroku or a server
 * framework.
 * @returns {Object}
 */
function getDisplayedLookupMap() {
	var s = getSettings();
	if (s != null && s['displayedLookupMap'] != null) {
		return s['displayedLookupMap'];
	}
	return {};
}

/**
 * Returns true if the given field is displayed in the line editor
 * @param {String} fieldName The name of a field on the Quote Line
 * @returns {boolean}
 */
function isFieldInLineEditor(fieldName) {
	var s = getSettings();
	if (s != null && s['fieldsByName'] != null) {
		return s['fieldsByName'][fieldName] != null;
	}
	return false;
}

/**
 * Returns true if Include Net-new Products In Maintenance is checked
 * @returns {Boolean}
 */
function isIncludeNetNewInMaintenanceEnabled() {
	var s = getSettings();
	if (s != null) {
		return s["includeNetNewInMaintenanceEnabled"];
	}
	return null;
}

/**
 * Returns a mapping from localized dimension values to their actual names
 * @returns {Object}
 */
function getDimensionValueLabelMap() {
	var s = getSettings();
	if (s != null) {
		return s['dimensionValueLabelMap'];
	}
	return null;
}

/**
 * returns the name of the Prorate Discount Amount field
 * @returns {String}
 */
function getProrateAmountDiscountFieldName() {
	var s = getSettings();
	if (s != null) {
		return s['prorateAmountDiscountFieldName'];
	}
	return null;
}

/**
 * Returns the name of the field being used for Block Price Overage Rates
 * @returns {String}
 */
function getOverageRateFieldName() {
	var s = getSettings();
	if (s != null) {
		return s['overageRateFieldName'];
	}
	return null;
}

/**
 * Returns an object containing all fields for which a Metadata callout is required.
 * @returns {Object}
 */
function getReferencedFieldMap() {
	var s = getSettings();
	if (s != null) {
		return s['referencedFieldMap'];
	}
	return {};
}

/**
 * Returns an object containing a map from quote lookup field ID names to the object type.
 * e.g., Account__r maps to Account
 * @returns {Object}
 */
function getQuoteLookups() {
	var s = getSettings();
	if (s != null) {
		return s['quoteLookups'];
	}
	return {};
}

/**
 * Returns an object containing a map from group lookup field ID names to the object type.
 * e.g., Account__c maps to Account
 * @returns {Object}
 */
function getGroupLookups() {
	var s = getSettings();
	if (s != null) {
		return s['groupLookups'];
	}
	return {};
}

/**
 * Returns an object containing a map from group lookup field ID names to the object type.
 * e.g., Product__c maps to Product2.
 * @param {Boolean} excludeStandardLookups If true, then Product__c and ProductOption__c are excluded from the results.
 * @returns {Object}
 */
function getLineLookups(excludeStandardLookups) {
	var s = getSettings();
	if (s == null) {
		return {};
	}
	if (!excludeStandardLookups) {
		return s['lineLookups'];
	}
	var original = s['lineLookups'];
	var results = {};
	for (var key in original) {
		if (key !== 'Product__c' && key !== 'SBQQ__Product__c' && key !== 'ProductOption__c' && key !== 'SBQQ__ProductOption__c') {
			results[key] = original[key];
		}
	}
	return results;
}
/**
 * Returns group subtotals field name chosen in picklist in general settings.
 * @returns {String}(API Field Name)
 */
function getLineEditorSubtotalsField() {
	var s = getSettings();
	if(s != null) {
		return s.lineEditorSubtotalsField;
	}else{
		return null;
	}
}
},{}],28:[function(require,module,exports){
module.exports = function(conn) {

    var cache = {};

    function get(provider, id) {
        if(!provider || !id)
            return null;

        return getCache(provider)[id];
    }

    function put(provider, id, obj) {
        if(!provider || !id || !obj)
            return;

        getCache(provider)[id] = obj;
    }

    function clear(provider, id) {
        if(!provider || !id)
            return;

        delete getCache(provider)[id];
    }

    function getCache(provider) {
        if(!cache[provider])
            cache[provider] = {};

        return cache[provider];
    }

    return {
        get: get,
        put: put,
        clear: clear
    };
};
},{}],29:[function(require,module,exports){
module.exports = function() {

    function read(prefix, provider, uid) {
        return send(prefix, provider, 'read', uid);
    }

    function load(prefix, provider, uid, context) {
        return send(prefix, provider, 'load', uid, context ? JSON.stringify(context, function(key, value) {
            return value === null ? undefined : value;
        }) : null);
    }

    function save(prefix, provider, obj) {
        return send(prefix, provider, 'save', obj ? JSON.stringify(obj, function(key, value) {
            return value === null ? undefined : value;
        }) : null);
    }

    function send(prefix, provider, method, input, context) {
        var endpoint = getEndpoint(prefix);

        if(context)
            return new Promise(function (resolve, reject) {
                Visualforce.remoting.Manager.invokeAction(endpoint + '.' + method, provider, input, context, function(obj, event) {
                    remoteCallback(resolve, reject, obj, event);
                }, options || {});
            });

        return new Promise(function (resolve, reject) {
            Visualforce.remoting.Manager.invokeAction(endpoint + '.' + method, provider, input, function(obj, event) {
                remoteCallback(resolve, reject, obj, event);
            },  options || {});
        });
    }

    var options;
    function setOptions(opts) {
        options = opts;
    }

    function remoteCallback(resolve, reject, obj, event) {
        if(!event.status)
            reject(event.message);
        else
            resolve(parse(obj));
    }

    function getEndpoint(prefix) {
        var endpoint = 'ServiceRouter';
        return prefix ? (prefix + '.' + endpoint) : endpoint;
    }

    function parse(obj) {
        if(!options || options.escape !== false)
            obj = obj.replace(/&quot;/g,'"');
        try {
            return JSON.parse(obj);
        } catch(e) {
            return obj;
        }
    }

    return {
        read: read,
        load: load,
        save: save,
        setOptions: setOptions
    };
}
},{}],30:[function(require,module,exports){
module.exports = function(proxy) {

    function read(prefix, provider, uid) {
        var endpoint = getEndpoint(prefix);
        return new Promise(function(resolve, reject) {
            proxy.get(endpoint + '?reader=' + provider + '&uid=' + uid).then(function(res) {
                resolve(parse(res));
            }, function(err) {
                reject(err);
            });
        });
    }

    function load(prefix, provider, uid, context) {
        var endpoint = getEndpoint(prefix);
        var body = {context: JSON.stringify(context)};
        return new Promise(function(resolve, reject) {
            proxy.patch(endpoint + '?loader=' + provider + '&uid=' + uid, body).then(function(res) {
                resolve(parse(res));
            }, function(err) {
                reject(err);
            });
        });
    }

    function save(prefix, provider, obj) {
        var endpoint = getEndpoint(prefix);
        var body = {provider: provider, model: JSON.stringify(context)};
        return new Promise(function(resolve, reject) {
            proxy.post(endpoint, body).then(function(res) {
                resolve(parse(res));
            }, function(err) {
                reject(err);
            });
        });
    }

    function setOptions(opts) {
        // not supported
    }

    function getEndpoint(prefix) {
        var endpoint = '/ServiceRouter';
        return prefix ? ('/' + prefix + endpoint) : endpoint;
    }

    function parse(obj) {
        try {
            return JSON.parse(obj);
        } catch (e) {
            return obj;
        }
    }

    return {
        read: read,
        load: load,
        save: save,
        setOptions: setOptions
    };
}
},{}],31:[function(require,module,exports){
module.exports = function(conn, orgUrl) {

    function get(endpoint) {
        return send(endpoint, 'GET');
    }

    function patch(endpoint, body) {
        return send(endpoint, 'PATCH', body);
    }

    function post(endpoint, body) {
        return send(endpoint, 'POST', body);
    }

    function send(endpoint, method, body) {
        var params = {
            url: '/services/proxy',
            method: method,
            headers: {
                'SalesforceProxy-Endpoint': orgUrl + '/services/apexrest' + endpoint,
                'Content-Type': 'application/json'
            }
        };

        if(body)
            params.body = body;

        return conn.request(params);
    }

    return {
        get: get,
        patch: patch,
        post: post
    };
}
},{}],32:[function(require,module,exports){
/**
 * Created by jfeingold on 7/2/15.
 */
var QuoteModel = require("./QuoteModel2.js");
var QuoteCalculator = require("./QuoteCalculator.js");
var ModelUtils = require('./Utils/ModelUtils.js');
var Constants = require('./Utils/JSQCConstants.js');
var SettingsUtils = require("./Utils/SettingsUtils.js");
var DateUtils = require('./Utils/DateUtils.js');
var NumberUtils = require('./Utils/NumberUtils.js');
var QuoteLineModel = require('./QuoteLineModel.js');

if (typeof window !== 'undefined' && window) {
	window.SB = window.SB || {};
	window.SB.JSQC = JSQC;
	window.SB.evaluate = evaluate;
	window.SB.ajax = require("./Utils/ApexUtils.js");
} else {
	module.exports = JSQC;
}

/**
 * Constructor for a instance of the QuoteCalculator
 * @param {Object} settings Represents an EditorSettings instance from the QuoteEditorModel apex class
 * @param {Object}copiedQuote A serialized QuoteVO
 * @constructor
 */
function JSQC(settings, copiedQuote) {
	this.quote = new QuoteModel(settings, copiedQuote);
	this.qc = new QuoteCalculator(this.quote);
}

JSQC.prototype.initConnection = function(accessToken, orgPrefix) {
	this.qc.initConnection(accessToken, orgPrefix);
};

JSQC.prototype.setConnection = function(conn) {
	this.qc.setConnection(conn);
};

JSQC.prototype.setApex = function(apex) {
	this.qc.setApex(apex);
};

JSQC.prototype.newApex = function(conn) {
	return this.qc.newApex(conn);
};

JSQC.prototype.onCalc = function() {
	var self = this;
	return this.qc.calculate().then(function(success) {
		removeCircularDependenciesAndNonDisplayedLookups(self.qc.quote);
		return self.qc.quote;
	});
};

function removeCircularDependenciesAndNonDisplayedLookups(quote) {
	var prefix = SettingsUtils.getPrefix();

	function minimizeOrStripRelationship(record, key, displayedList) {
		var relationship = key.substring(0, key.length - 1) + 'r';
		if (displayedList && displayedList.indexOf(relationship) != -1) {
			// If this relationship is one that must be displayed, and there's a record in the relationship,
			// we drop all properties save for Name and Id.
			var lookupRecord = record[relationship];
			if (lookupRecord) {
				record[relationship] = {
					'Name': lookupRecord['Name'],
					'Id': lookupRecord['Id']
				};
				return;
			}
		}
		// If we reached this point, the lookup relationship is empty or it's not displayed anyway, so strip it out.
		record[relationship] = null;
	}

	// Get the map that contains the names of displayed lookups.
	var displayedLookupMap = SettingsUtils.getDisplayedLookupMap();

	// Strip or minimize lookups on the Quote object.
	var quoteLookups = SettingsUtils.getQuoteLookups();
	for (var key in quoteLookups) {
		minimizeOrStripRelationship(quote.record, key, displayedLookupMap.quote);
	}
	// Populate expected attributes on the Quote object.
	quote.grouped = quote.isGrouped;
	quote.lineItemGroups = [];

	var groupLookups = SettingsUtils.getGroupLookups();
	// For each group...
	quote.groups.forEach(function(group) {
		// Empty the list of lines.
		group.lineItems = [];
		// Delete the circular reference to the quote object and quote record.
		group.quote = null;
		group.parentQuote = null;
		group.record[prefix + "Quote__r"] = null;
		// Also strip or minimize lookups.
		for (var key in groupLookups) {
			minimizeOrStripRelationship(group.record, key, displayedLookupMap.group);
		}
		// Push the group onto the final group list.
		quote.lineItemGroups.push(group);
	});
	// Delete the old group list
	quote.groups = null;

	var lineLookups = SettingsUtils.getLineLookups(false);
	// For each line...
	quote.lineItems.forEach(function(line) {
		// Remove circular dependencies to group.
		line.parentGroup = null;
		line.group = null;
		line.Group__r = null;
		// Ditto for parent Item and RequiredBy__r.
		line.parentItem = null;
		line.RequiredBy__r = null;
		// Remove the circular reference to Quote.
		line.Quote__r = null;
		// Ditto for product and product option
		line.Product__r = null;
		line.ProductOption__r = null;
		// Also components.
		line.components = [];
		line.componentsById = {};
		line.componentsByKey = {};
		// Finally, strip or minimize lookups
		for (var key in lineLookups) {
			minimizeOrStripRelationship(line.record, key, displayedLookupMap.line);
		}
	});
}

/**
 * Process updates to multi-segment line items based on changes to subscription term and First Segment Term End Date.
 * NOTE: NEVER EVER EVER CALL THIS CODE UNLESS YOU'RE IN THE LINE EDITOR. OTHERWISE THE JSQC WILL BREAK. YOU HAVE BEEN WARNED.
 */
JSQC.prototype.updateSegmentsIfNecessary = function() {
	if (typeof window === 'undefined' || !window || !$) {
		// If we're calling this code, jQuery NEEDS to be defined. So throw an error if we're not in the line editor,
		// because that's the only place where jQuery might be undefined.
		throw Error("CALCULATION ERROR: Your code is executing JSQC.updateSegmentsIfNecessary(), but jQuery is undefined.");
	}
	var quote = this.qc.quote;
	if (quote.hasMultiSegmentLines) {
		if (quote.grouped) {
			quote.groups.forEach(function(group) {
				if (hasMultiSegmentLines(group)) {
					calculateDeltasAndProcessUpdates(quote, group);
				}
			});
		} else {
			calculateDeltasAndProcessUpdates(quote, null);
		}
	}
};

/**
 * Returns true if the given group has multi-segment line items
 * @param {QuoteLineGroupModel} group A JS representation of a QuoteLineGroupVO
 * @returns {boolean}
 */
function hasMultiSegmentLines(group) {
	var lineNumber = group.lineItems.length;
	for (var i = 0; i < lineNumber; i++) {
		if (group.lineItems[i].SegmentKey__c != null) {
			return true;
		}
	}
	return false;
}


function calculateDeltasAndProcessUpdates(quote, group) {
	var lines = (group != null) ? group.lineItems : quote.lineItems;
	var term = (group != null) ? group.calculatedSubscriptionTerm : quote.calculatedSubscriptionTerm;
	var tm = Constants.TYPE_MONTHLY_DIMENSION;
	var ty = Constants.TYPE_YEARLY_DIMENSION;
	var tq = Constants.TYPE_QUARTERLY_DIMENSION;

	// Process yearly changes
	var yearlyDelta = calculateSegmentDelta(quote, lines, term, ty);
	if (Object.keys(yearlyDelta).length != 0) {
		processSegmentUpdates(quote, group, yearlyDelta, ty);
	}

	// Process quarterly changes
	var quarterDelta = calculateSegmentDelta(quote, lines, term, tq);
	if (Object.keys(quarterDelta).length != 0) {
		processSegmentUpdates(quote, group, quarterDelta, tq);
	}

	// Process monthly changes
	var monthDelta = calculateSegmentDelta(quote, lines, term, tm);
	if (Object.keys(monthDelta).length != 0) {
		processSegmentUpdates(quote, group, monthDelta, tm);
	}
}

/**
 * Calculates any discrepancy between number of time-based segments and Subscription Term for a given Dimension Type.
 * A mapping to a positive value means segments should be added, while a negative values means segments should be removed.
 * @param {QuoteModel} quote The quote about to be calculated
 * @param {QuoteLineModel[]} lines The lines being checked for discrepancies
 * @param {Number} term The subscription term of the quote/group being calculated
 * @param {String} dimType A type of Multi-Segment Dimension
 * @returns {{}}
 */
function calculateSegmentDelta(quote, lines, term, dimType) {
	var termIsDay = SettingsUtils.subscriptionTermUnitIsDay();
	// Term can be null if there is not enough information to calculate the subscription term.
	// In that case, we default to 1 year
	term = (term == null) ? (termIsDay ? 365 : 12) : term;

	// Map segment keys to the number of time-based segments for that key
	var keysToSegCount = {};
	var lineCount = lines.length;
	for (var i = 0; i < lineCount; i++) {
		var line = lines[i];
		if (line.dimType == dimType) {
			if (keysToSegCount[line.SegmentKey__c] != null) {
				keysToSegCount[line.SegmentKey__c] += 1;
			} else {
				keysToSegCount[line.SegmentKey__c] = 1;
			}
		}
	}

	var trueSegments = 0;
	if (Object.keys(keysToSegCount).length != 0) {
		if (quote.FirstSegmentTermEndDate__c != null) {
			// One segment for the shortened first term
			trueSegments = 1;

			var fsedPlusOneDay = quote.FirstSegmentTermEndDate__c;
			fsedPlusOneDay.setUTCDate(fsedPlusOneDay.getUTCDate() + 1);
			// If start date is not specified, assume today is the start date
			var startDate = quote.StartDate__c || new Date();
			// Subtract first segment term length from total term, except for shortened monthly terms
			if (!termIsDay && (dimType != Constants.TYPE_MONTHLY_DIMENSION || DateUtils.monthsBetween(startDate, quote.FirstSegmentTermEndDate__c) > 0)) {
				term -= DateUtils.monthsBetween(startDate, fsedPlusOneDay);
			} else if (termIsDay) {
				term -= DateUtils.daysBetween(startDate, fsedPlusOneDay);
			}
		}
		// Add the remaining term segments
		if (!termIsDay) {
			if (dimType === Constants.TYPE_YEARLY_DIMENSION) {
				trueSegments += Math.ceil(term / 12);
			} else if (dimType === Constants.TYPE_QUARTERLY_DIMENSION) {
				trueSegments += Math.ceil(term / 3);
			} else if (dimType === Constants.TYPE_MONTHLY_DIMENSION) {
				trueSegments += term;
			}
		} else {
			if (dimType === Constants.TYPE_YEARLY_DIMENSION) {
				trueSegments += Math.ceil(term / 365);
			} else if (dimType === Constants.TYPE_QUARTERLY_DIMENSION) {
				trueSegments += Math.ceil(term / 90);
			} else if (dimType === Constants.TYPE_MONTHLY_DIMENSION) {
				trueSegments += Math.ceil(term / 30);
			}
		}
	}

	// Compute segment delta for each key
	for (var key in keysToSegCount) {
		keysToSegCount[key] = trueSegments - keysToSegCount[key];
	}
	return keysToSegCount;
}

function processSegmentUpdates(quote, group, deltaMap, dimType) {
	for (var key in deltaMap) {
		var delta = deltaMap[key];
		var lastSegment = quote.getLastSegment(key, dimType);
		if (delta === 0 || (quote.isAmendment && lastSegment.Existing__c)) {
			// If there's no change, or this is an amendment for an existing product, there's nothing to be done
			continue;
		} else if (delta > 0 && lastSegment.EndDate__c >= lastSegment.StartDate__c) {
			for (var i = 1; i <= delta; i++) {
				// We need to add additional segments, which we do by cloning the last segment
				var newSegmentVO = cloneLine(lastSegment);
				quote.lineItems.push(newSegmentVO);
				newSegmentVO.parentQuote = quote;
				if (lastSegment.parentItem != null) {
					lastSegment.parentItem.addComponent(newSegmentVO);
				}
				newSegmentVO.SegmentKey__c = lastSegment.SegmentKey__c;
				newSegmentVO.SegmentIndex__c = lastSegment.SegmentIndex__c + i;
				var space = (newSegmentVO.SegmentIndex__c < 10) ? '  ' : ' ';
				newSegmentVO.SegmentLabel__c = dimType + space + newSegmentVO.SegmentIndex__c;
				if (quote.grouped && group != null) {
					group.addLineItem(newSegmentVO);
				}
			}
		} else if (delta < 0) {
			// Need to remove segments
			for (var i = 0; i > delta; i--) {
				lastSegment = quote.getLastSegment(key, dimType);
				if (lastSegment.parentItem != null) {
					lastSegment.parentItem.removeComponent(lastSegment);
				}
				if (group != null) {
					group.removeLineItem(lastSegment);
				}
				quote.removeLineItem(lastSegment);
			}
		}
	}
}

/**
 * Creates a copy of the provided QuoteLineModel
 * @param line
 * @returns {QuoteLineModel}
 */
function cloneLine(line) {
	var quote = line.parentQuote;
	var group = quote.groupsByKey[line.parentGroupKey];
	var clone = new QuoteLineModel(quote, group, {record:{}});
	$.extend(true, clone, line);
	clone.record.Id = null; // record Id needs too be removed to avoid upsert duplication error
	delete clone.$$hashKey; //hashkey needs to be removed to avoid angular dupes error
	return clone;
}

/**
 * @Param
 */
function evaluate(operator, operand1, operand2) {
	return require("./Utils/OperatorsUtils.js").getInstance(operator).evaluate(operand1, operand2);
}

},{"./QuoteCalculator.js":8,"./QuoteLineModel.js":10,"./QuoteModel2.js":12,"./Utils/ApexUtils.js":17,"./Utils/DateUtils.js":18,"./Utils/JSQCConstants.js":20,"./Utils/ModelUtils.js":23,"./Utils/NumberUtils.js":24,"./Utils/OperatorsUtils.js":26,"./Utils/SettingsUtils.js":27}],33:[function(require,module,exports){
;(function (exports) {
  'use strict'

  var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

  var PLUS = '+'.charCodeAt(0)
  var SLASH = '/'.charCodeAt(0)
  var NUMBER = '0'.charCodeAt(0)
  var LOWER = 'a'.charCodeAt(0)
  var UPPER = 'A'.charCodeAt(0)
  var PLUS_URL_SAFE = '-'.charCodeAt(0)
  var SLASH_URL_SAFE = '_'.charCodeAt(0)

  function decode (elt) {
    var code = elt.charCodeAt(0)
    if (code === PLUS || code === PLUS_URL_SAFE) return 62 // '+'
    if (code === SLASH || code === SLASH_URL_SAFE) return 63 // '/'
    if (code < NUMBER) return -1 // no match
    if (code < NUMBER + 10) return code - NUMBER + 26 + 26
    if (code < UPPER + 26) return code - UPPER
    if (code < LOWER + 26) return code - LOWER + 26
  }

  function b64ToByteArray (b64) {
    var i, j, l, tmp, placeHolders, arr

    if (b64.length % 4 > 0) {
      throw new Error('Invalid string. Length must be a multiple of 4')
    }

    // the number of equal signs (place holders)
    // if there are two placeholders, than the two characters before it
    // represent one byte
    // if there is only one, then the three characters before it represent 2 bytes
    // this is just a cheap hack to not do indexOf twice
    var len = b64.length
    placeHolders = b64.charAt(len - 2) === '=' ? 2 : b64.charAt(len - 1) === '=' ? 1 : 0

    // base64 is 4/3 + up to two characters of the original data
    arr = new Arr(b64.length * 3 / 4 - placeHolders)

    // if there are placeholders, only get up to the last complete 4 chars
    l = placeHolders > 0 ? b64.length - 4 : b64.length

    var L = 0

    function push (v) {
      arr[L++] = v
    }

    for (i = 0, j = 0; i < l; i += 4, j += 3) {
      tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
      push((tmp & 0xFF0000) >> 16)
      push((tmp & 0xFF00) >> 8)
      push(tmp & 0xFF)
    }

    if (placeHolders === 2) {
      tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
      push(tmp & 0xFF)
    } else if (placeHolders === 1) {
      tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
      push((tmp >> 8) & 0xFF)
      push(tmp & 0xFF)
    }

    return arr
  }

  function uint8ToBase64 (uint8) {
    var i
    var extraBytes = uint8.length % 3 // if we have 1 byte left, pad 2 bytes
    var output = ''
    var temp, length

    function encode (num) {
      return lookup.charAt(num)
    }

    function tripletToBase64 (num) {
      return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
    }

    // go through the array every three bytes, we'll deal with trailing stuff later
    for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
      temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
      output += tripletToBase64(temp)
    }

    // pad the end with zeros, but make sure to not forget the extra bytes
    switch (extraBytes) {
      case 1:
        temp = uint8[uint8.length - 1]
        output += encode(temp >> 2)
        output += encode((temp << 4) & 0x3F)
        output += '=='
        break
      case 2:
        temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
        output += encode(temp >> 10)
        output += encode((temp >> 4) & 0x3F)
        output += encode((temp << 2) & 0x3F)
        output += '='
        break
      default:
        break
    }

    return output
  }

  exports.toByteArray = b64ToByteArray
  exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],34:[function(require,module,exports){

},{}],35:[function(require,module,exports){
arguments[4][34][0].apply(exports,arguments)
},{"dup":34}],36:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.foo = function () { return 42 }
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    this.length = 0
    this.parent = undefined
  }

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined') {
    if (object.buffer instanceof ArrayBuffer) {
      return fromTypedArray(that, object)
    }
    if (object instanceof ArrayBuffer) {
      return fromArrayBuffer(that, object)
    }
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(array)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromTypedArray(that, new Uint8Array(array))
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
} else {
  // pre-set for values that may exist in the future
  Buffer.prototype.length = undefined
  Buffer.prototype.parent = undefined
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = '' + string

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'binary':
      // Deprecated
      case 'raw':
      case 'raws':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// Even though this property is private, it shouldn't be removed because it is
// used by `is-buffer` to detect buffer instances in Safari 5-7.
Buffer.prototype._isBuffer = true

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"base64-js":33,"ieee754":42,"isarray":37}],37:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],38:[function(require,module,exports){
(function (Buffer){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.

function isArray(arg) {
  if (Array.isArray) {
    return Array.isArray(arg);
  }
  return objectToString(arg) === '[object Array]';
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = Buffer.isBuffer;

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

}).call(this,{"isBuffer":require("../../is-buffer/index.js")})
},{"../../is-buffer/index.js":43}],39:[function(require,module,exports){
/*
  Copyright (c) jQuery Foundation, Inc. and Contributors, All Rights Reserved.

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

(function (root, factory) {
    'use strict';

    // Universal Module Definition (UMD) to support AMD, CommonJS/Node.js,
    // Rhino, and plain browser loading.

    /* istanbul ignore next */
    if (typeof define === 'function' && define.amd) {
        define(['exports'], factory);
    } else if (typeof exports !== 'undefined') {
        factory(exports);
    } else {
        factory((root.esprima = {}));
    }
}(this, function (exports) {
    'use strict';

    var Token,
        TokenName,
        FnExprTokens,
        Syntax,
        PlaceHolders,
        Messages,
        Regex,
        source,
        strict,
        index,
        lineNumber,
        lineStart,
        hasLineTerminator,
        lastIndex,
        lastLineNumber,
        lastLineStart,
        startIndex,
        startLineNumber,
        startLineStart,
        scanning,
        length,
        lookahead,
        state,
        extra,
        isBindingElement,
        isAssignmentTarget,
        firstCoverInitializedNameError;

    Token = {
        BooleanLiteral: 1,
        EOF: 2,
        Identifier: 3,
        Keyword: 4,
        NullLiteral: 5,
        NumericLiteral: 6,
        Punctuator: 7,
        StringLiteral: 8,
        RegularExpression: 9,
        Template: 10
    };

    TokenName = {};
    TokenName[Token.BooleanLiteral] = 'Boolean';
    TokenName[Token.EOF] = '<end>';
    TokenName[Token.Identifier] = 'Identifier';
    TokenName[Token.Keyword] = 'Keyword';
    TokenName[Token.NullLiteral] = 'Null';
    TokenName[Token.NumericLiteral] = 'Numeric';
    TokenName[Token.Punctuator] = 'Punctuator';
    TokenName[Token.StringLiteral] = 'String';
    TokenName[Token.RegularExpression] = 'RegularExpression';
    TokenName[Token.Template] = 'Template';

    // A function following one of those tokens is an expression.
    FnExprTokens = ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',
                    'return', 'case', 'delete', 'throw', 'void',
                    // assignment operators
                    '=', '+=', '-=', '*=', '/=', '%=', '<<=', '>>=', '>>>=',
                    '&=', '|=', '^=', ',',
                    // binary/unary operators
                    '+', '-', '*', '/', '%', '++', '--', '<<', '>>', '>>>', '&',
                    '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',
                    '<=', '<', '>', '!=', '!=='];

    Syntax = {
        AssignmentExpression: 'AssignmentExpression',
        AssignmentPattern: 'AssignmentPattern',
        ArrayExpression: 'ArrayExpression',
        ArrayPattern: 'ArrayPattern',
        ArrowFunctionExpression: 'ArrowFunctionExpression',
        BlockStatement: 'BlockStatement',
        BinaryExpression: 'BinaryExpression',
        BreakStatement: 'BreakStatement',
        CallExpression: 'CallExpression',
        CatchClause: 'CatchClause',
        ClassBody: 'ClassBody',
        ClassDeclaration: 'ClassDeclaration',
        ClassExpression: 'ClassExpression',
        ConditionalExpression: 'ConditionalExpression',
        ContinueStatement: 'ContinueStatement',
        DoWhileStatement: 'DoWhileStatement',
        DebuggerStatement: 'DebuggerStatement',
        EmptyStatement: 'EmptyStatement',
        ExportAllDeclaration: 'ExportAllDeclaration',
        ExportDefaultDeclaration: 'ExportDefaultDeclaration',
        ExportNamedDeclaration: 'ExportNamedDeclaration',
        ExportSpecifier: 'ExportSpecifier',
        ExpressionStatement: 'ExpressionStatement',
        ForStatement: 'ForStatement',
        ForOfStatement: 'ForOfStatement',
        ForInStatement: 'ForInStatement',
        FunctionDeclaration: 'FunctionDeclaration',
        FunctionExpression: 'FunctionExpression',
        Identifier: 'Identifier',
        IfStatement: 'IfStatement',
        ImportDeclaration: 'ImportDeclaration',
        ImportDefaultSpecifier: 'ImportDefaultSpecifier',
        ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',
        ImportSpecifier: 'ImportSpecifier',
        Literal: 'Literal',
        LabeledStatement: 'LabeledStatement',
        LogicalExpression: 'LogicalExpression',
        MemberExpression: 'MemberExpression',
        MetaProperty: 'MetaProperty',
        MethodDefinition: 'MethodDefinition',
        NewExpression: 'NewExpression',
        ObjectExpression: 'ObjectExpression',
        ObjectPattern: 'ObjectPattern',
        Program: 'Program',
        Property: 'Property',
        RestElement: 'RestElement',
        ReturnStatement: 'ReturnStatement',
        SequenceExpression: 'SequenceExpression',
        SpreadElement: 'SpreadElement',
        Super: 'Super',
        SwitchCase: 'SwitchCase',
        SwitchStatement: 'SwitchStatement',
        TaggedTemplateExpression: 'TaggedTemplateExpression',
        TemplateElement: 'TemplateElement',
        TemplateLiteral: 'TemplateLiteral',
        ThisExpression: 'ThisExpression',
        ThrowStatement: 'ThrowStatement',
        TryStatement: 'TryStatement',
        UnaryExpression: 'UnaryExpression',
        UpdateExpression: 'UpdateExpression',
        VariableDeclaration: 'VariableDeclaration',
        VariableDeclarator: 'VariableDeclarator',
        WhileStatement: 'WhileStatement',
        WithStatement: 'WithStatement',
        YieldExpression: 'YieldExpression'
    };

    PlaceHolders = {
        ArrowParameterPlaceHolder: 'ArrowParameterPlaceHolder'
    };

    // Error messages should be identical to V8.
    Messages = {
        UnexpectedToken: 'Unexpected token %0',
        UnexpectedNumber: 'Unexpected number',
        UnexpectedString: 'Unexpected string',
        UnexpectedIdentifier: 'Unexpected identifier',
        UnexpectedReserved: 'Unexpected reserved word',
        UnexpectedTemplate: 'Unexpected quasi %0',
        UnexpectedEOS: 'Unexpected end of input',
        NewlineAfterThrow: 'Illegal newline after throw',
        InvalidRegExp: 'Invalid regular expression',
        UnterminatedRegExp: 'Invalid regular expression: missing /',
        InvalidLHSInAssignment: 'Invalid left-hand side in assignment',
        InvalidLHSInForIn: 'Invalid left-hand side in for-in',
        InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',
        MultipleDefaultsInSwitch: 'More than one default clause in switch statement',
        NoCatchOrFinally: 'Missing catch or finally after try',
        UnknownLabel: 'Undefined label \'%0\'',
        Redeclaration: '%0 \'%1\' has already been declared',
        IllegalContinue: 'Illegal continue statement',
        IllegalBreak: 'Illegal break statement',
        IllegalReturn: 'Illegal return statement',
        StrictModeWith: 'Strict mode code may not include a with statement',
        StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',
        StrictVarName: 'Variable name may not be eval or arguments in strict mode',
        StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',
        StrictParamDupe: 'Strict mode function may not have duplicate parameter names',
        StrictFunctionName: 'Function name may not be eval or arguments in strict mode',
        StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',
        StrictDelete: 'Delete of an unqualified identifier in strict mode.',
        StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',
        StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',
        StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',
        StrictReservedWord: 'Use of future reserved word in strict mode',
        TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',
        ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',
        DefaultRestParameter: 'Unexpected token =',
        ObjectPatternAsRestParameter: 'Unexpected token {',
        DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',
        ConstructorSpecialMethod: 'Class constructor may not be an accessor',
        DuplicateConstructor: 'A class may only have one constructor',
        StaticPrototype: 'Classes may not have static property named prototype',
        MissingFromClause: 'Unexpected token',
        NoAsAfterImportNamespace: 'Unexpected token',
        InvalidModuleSpecifier: 'Unexpected token',
        IllegalImportDeclaration: 'Unexpected token',
        IllegalExportDeclaration: 'Unexpected token',
        DuplicateBinding: 'Duplicate binding %0'
    };

    // See also tools/generate-unicode-regex.js.
    Regex = {
        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierStart:
        NonAsciiIdentifierStart: /[\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u08A0-\u08B2\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58\u0C59\u0C60\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D60\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19C1-\u19C7\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309B-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDE00-\uDE11\uDE13-\uDE2B\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF5D-\uDF61]|\uD805[\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDE00-\uDE2F\uDE44\uDE80-\uDEAA]|\uD806[\uDCA0-\uDCDF\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]/,

        // ECMAScript 6/Unicode v7.0.0 NonAsciiIdentifierPart:
        NonAsciiIdentifierPart: /[\xAA\xB5\xB7\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0300-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u0483-\u0487\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0669\u066E-\u06D3\u06D5-\u06DC\u06DF-\u06E8\u06EA-\u06FC\u06FF\u0710-\u074A\u074D-\u07B1\u07C0-\u07F5\u07FA\u0800-\u082D\u0840-\u085B\u08A0-\u08B2\u08E4-\u0963\u0966-\u096F\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09F1\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AEF\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B6F\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BEF\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58\u0C59\u0C60-\u0C63\u0C66-\u0C6F\u0C81-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2\u0D01-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4E\u0D57\u0D60-\u0D63\u0D66-\u0D6F\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E4E\u0E50-\u0E59\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF\u0F00\u0F18\u0F19\u0F20-\u0F29\u0F35\u0F37\u0F39\u0F3E-\u0F47\u0F49-\u0F6C\u0F71-\u0F84\u0F86-\u0F97\u0F99-\u0FBC\u0FC6\u1000-\u1049\u1050-\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u135F\u1369-\u1371\u1380-\u138F\u13A0-\u13F4\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1714\u1720-\u1734\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17D3\u17D7\u17DC\u17DD\u17E0-\u17E9\u180B-\u180D\u1810-\u1819\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1946-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u1A00-\u1A1B\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA7\u1AB0-\u1ABD\u1B00-\u1B4B\u1B50-\u1B59\u1B6B-\u1B73\u1B80-\u1BF3\u1C00-\u1C37\u1C40-\u1C49\u1C4D-\u1C7D\u1CD0-\u1CD2\u1CD4-\u1CF6\u1CF8\u1CF9\u1D00-\u1DF5\u1DFC-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u200C\u200D\u203F\u2040\u2054\u2071\u207F\u2090-\u209C\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2102\u2107\u210A-\u2113\u2115\u2118-\u211D\u2124\u2126\u2128\u212A-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D7F-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u3005-\u3007\u3021-\u302F\u3031-\u3035\u3038-\u303C\u3041-\u3096\u3099-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FCC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66F\uA674-\uA67D\uA67F-\uA69D\uA69F-\uA6F1\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA7AD\uA7B0\uA7B1\uA7F7-\uA827\uA840-\uA873\uA880-\uA8C4\uA8D0-\uA8D9\uA8E0-\uA8F7\uA8FB\uA900-\uA92D\uA930-\uA953\uA960-\uA97C\uA980-\uA9C0\uA9CF-\uA9D9\uA9E0-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA60-\uAA76\uAA7A-\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF6\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB5F\uAB64\uAB65\uABC0-\uABEA\uABEC\uABED\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE00-\uFE0F\uFE20-\uFE2D\uFE33\uFE34\uFE4D-\uFE4F\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF3F\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDDFD\uDE80-\uDE9C\uDEA0-\uDED0\uDEE0\uDF00-\uDF1F\uDF30-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCA0-\uDCA9\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE6\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC00-\uDC46\uDC66-\uDC6F\uDC7F-\uDCBA\uDCD0-\uDCE8\uDCF0-\uDCF9\uDD00-\uDD34\uDD36-\uDD3F\uDD50-\uDD73\uDD76\uDD80-\uDDC4\uDDD0-\uDDDA\uDE00-\uDE11\uDE13-\uDE37\uDEB0-\uDEEA\uDEF0-\uDEF9\uDF01-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC80-\uDCC5\uDCC7\uDCD0-\uDCD9\uDD80-\uDDB5\uDDB8-\uDDC0\uDE00-\uDE40\uDE44\uDE50-\uDE59\uDE80-\uDEB7\uDEC0-\uDEC9]|\uD806[\uDCA0-\uDCE9\uDCFF\uDEC0-\uDEF8]|\uD808[\uDC00-\uDF98]|\uD809[\uDC00-\uDC6E]|[\uD80C\uD840-\uD868\uD86A-\uD86C][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE60-\uDE69\uDED0-\uDEED\uDEF0-\uDEF4\uDF00-\uDF36\uDF40-\uDF43\uDF50-\uDF59\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]|\uD82C[\uDC00\uDC01]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB\uDFCE-\uDFFF]|\uD83A[\uDC00-\uDCC4\uDCD0-\uDCD6]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D]|\uD87E[\uDC00-\uDE1D]|\uDB40[\uDD00-\uDDEF]/
    };

    // Ensure the condition is true, otherwise throw an error.
    // This is only to have a better contract semantic, i.e. another safety net
    // to catch a logic error. The condition shall be fulfilled in normal case.
    // Do NOT use this to enforce a certain condition on any user input.

    function assert(condition, message) {
        /* istanbul ignore if */
        if (!condition) {
            throw new Error('ASSERT: ' + message);
        }
    }

    function isDecimalDigit(ch) {
        return (ch >= 0x30 && ch <= 0x39);   // 0..9
    }

    function isHexDigit(ch) {
        return '0123456789abcdefABCDEF'.indexOf(ch) >= 0;
    }

    function isOctalDigit(ch) {
        return '01234567'.indexOf(ch) >= 0;
    }

    function octalToDecimal(ch) {
        // \0 is not octal escape sequence
        var octal = (ch !== '0'), code = '01234567'.indexOf(ch);

        if (index < length && isOctalDigit(source[index])) {
            octal = true;
            code = code * 8 + '01234567'.indexOf(source[index++]);

            // 3 digits are only allowed when string starts
            // with 0, 1, 2, 3
            if ('0123'.indexOf(ch) >= 0 &&
                    index < length &&
                    isOctalDigit(source[index])) {
                code = code * 8 + '01234567'.indexOf(source[index++]);
            }
        }

        return {
            code: code,
            octal: octal
        };
    }

    // ECMA-262 11.2 White Space

    function isWhiteSpace(ch) {
        return (ch === 0x20) || (ch === 0x09) || (ch === 0x0B) || (ch === 0x0C) || (ch === 0xA0) ||
            (ch >= 0x1680 && [0x1680, 0x180E, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(ch) >= 0);
    }

    // ECMA-262 11.3 Line Terminators

    function isLineTerminator(ch) {
        return (ch === 0x0A) || (ch === 0x0D) || (ch === 0x2028) || (ch === 0x2029);
    }

    // ECMA-262 11.6 Identifier Names and Identifiers

    function fromCodePoint(cp) {
        return (cp < 0x10000) ? String.fromCharCode(cp) :
            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +
            String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));
    }

    function isIdentifierStart(ch) {
        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
            (ch === 0x5C) ||                      // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierStart.test(fromCodePoint(ch)));
    }

    function isIdentifierPart(ch) {
        return (ch === 0x24) || (ch === 0x5F) ||  // $ (dollar) and _ (underscore)
            (ch >= 0x41 && ch <= 0x5A) ||         // A..Z
            (ch >= 0x61 && ch <= 0x7A) ||         // a..z
            (ch >= 0x30 && ch <= 0x39) ||         // 0..9
            (ch === 0x5C) ||                      // \ (backslash)
            ((ch >= 0x80) && Regex.NonAsciiIdentifierPart.test(fromCodePoint(ch)));
    }

    // ECMA-262 11.6.2.2 Future Reserved Words

    function isFutureReservedWord(id) {
        switch (id) {
        case 'enum':
        case 'export':
        case 'import':
        case 'super':
            return true;
        default:
            return false;
        }
    }

    function isStrictModeReservedWord(id) {
        switch (id) {
        case 'implements':
        case 'interface':
        case 'package':
        case 'private':
        case 'protected':
        case 'public':
        case 'static':
        case 'yield':
        case 'let':
            return true;
        default:
            return false;
        }
    }

    function isRestrictedWord(id) {
        return id === 'eval' || id === 'arguments';
    }

    // ECMA-262 11.6.2.1 Keywords

    function isKeyword(id) {
        switch (id.length) {
        case 2:
            return (id === 'if') || (id === 'in') || (id === 'do');
        case 3:
            return (id === 'var') || (id === 'for') || (id === 'new') ||
                (id === 'try') || (id === 'let');
        case 4:
            return (id === 'this') || (id === 'else') || (id === 'case') ||
                (id === 'void') || (id === 'with') || (id === 'enum');
        case 5:
            return (id === 'while') || (id === 'break') || (id === 'catch') ||
                (id === 'throw') || (id === 'const') || (id === 'yield') ||
                (id === 'class') || (id === 'super');
        case 6:
            return (id === 'return') || (id === 'typeof') || (id === 'delete') ||
                (id === 'switch') || (id === 'export') || (id === 'import');
        case 7:
            return (id === 'default') || (id === 'finally') || (id === 'extends');
        case 8:
            return (id === 'function') || (id === 'continue') || (id === 'debugger');
        case 10:
            return (id === 'instanceof');
        default:
            return false;
        }
    }

    // ECMA-262 11.4 Comments

    function addComment(type, value, start, end, loc) {
        var comment;

        assert(typeof start === 'number', 'Comment must have valid position');

        state.lastCommentStart = start;

        comment = {
            type: type,
            value: value
        };
        if (extra.range) {
            comment.range = [start, end];
        }
        if (extra.loc) {
            comment.loc = loc;
        }
        extra.comments.push(comment);
        if (extra.attachComment) {
            extra.leadingComments.push(comment);
            extra.trailingComments.push(comment);
        }
        if (extra.tokenize) {
            comment.type = comment.type + 'Comment';
            if (extra.delegate) {
                comment = extra.delegate(comment);
            }
            extra.tokens.push(comment);
        }
    }

    function skipSingleLineComment(offset) {
        var start, loc, ch, comment;

        start = index - offset;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart - offset
            }
        };

        while (index < length) {
            ch = source.charCodeAt(index);
            ++index;
            if (isLineTerminator(ch)) {
                hasLineTerminator = true;
                if (extra.comments) {
                    comment = source.slice(start + offset, index - 1);
                    loc.end = {
                        line: lineNumber,
                        column: index - lineStart - 1
                    };
                    addComment('Line', comment, start, index - 1, loc);
                }
                if (ch === 13 && source.charCodeAt(index) === 10) {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
                return;
            }
        }

        if (extra.comments) {
            comment = source.slice(start + offset, index);
            loc.end = {
                line: lineNumber,
                column: index - lineStart
            };
            addComment('Line', comment, start, index, loc);
        }
    }

    function skipMultiLineComment() {
        var start, loc, ch, comment;

        if (extra.comments) {
            start = index - 2;
            loc = {
                start: {
                    line: lineNumber,
                    column: index - lineStart - 2
                }
            };
        }

        while (index < length) {
            ch = source.charCodeAt(index);
            if (isLineTerminator(ch)) {
                if (ch === 0x0D && source.charCodeAt(index + 1) === 0x0A) {
                    ++index;
                }
                hasLineTerminator = true;
                ++lineNumber;
                ++index;
                lineStart = index;
            } else if (ch === 0x2A) {
                // Block comment ends with '*/'.
                if (source.charCodeAt(index + 1) === 0x2F) {
                    ++index;
                    ++index;
                    if (extra.comments) {
                        comment = source.slice(start + 2, index - 2);
                        loc.end = {
                            line: lineNumber,
                            column: index - lineStart
                        };
                        addComment('Block', comment, start, index, loc);
                    }
                    return;
                }
                ++index;
            } else {
                ++index;
            }
        }

        // Ran off the end of the file - the whole thing is a comment
        if (extra.comments) {
            loc.end = {
                line: lineNumber,
                column: index - lineStart
            };
            comment = source.slice(start + 2, index);
            addComment('Block', comment, start, index, loc);
        }
        tolerateUnexpectedToken();
    }

    function skipComment() {
        var ch, start;
        hasLineTerminator = false;

        start = (index === 0);
        while (index < length) {
            ch = source.charCodeAt(index);

            if (isWhiteSpace(ch)) {
                ++index;
            } else if (isLineTerminator(ch)) {
                hasLineTerminator = true;
                ++index;
                if (ch === 0x0D && source.charCodeAt(index) === 0x0A) {
                    ++index;
                }
                ++lineNumber;
                lineStart = index;
                start = true;
            } else if (ch === 0x2F) { // U+002F is '/'
                ch = source.charCodeAt(index + 1);
                if (ch === 0x2F) {
                    ++index;
                    ++index;
                    skipSingleLineComment(2);
                    start = true;
                } else if (ch === 0x2A) {  // U+002A is '*'
                    ++index;
                    ++index;
                    skipMultiLineComment();
                } else {
                    break;
                }
            } else if (start && ch === 0x2D) { // U+002D is '-'
                // U+003E is '>'
                if ((source.charCodeAt(index + 1) === 0x2D) && (source.charCodeAt(index + 2) === 0x3E)) {
                    // '-->' is a single-line comment
                    index += 3;
                    skipSingleLineComment(3);
                } else {
                    break;
                }
            } else if (ch === 0x3C) { // U+003C is '<'
                if (source.slice(index + 1, index + 4) === '!--') {
                    ++index; // `<`
                    ++index; // `!`
                    ++index; // `-`
                    ++index; // `-`
                    skipSingleLineComment(4);
                } else {
                    break;
                }
            } else {
                break;
            }
        }
    }

    function scanHexEscape(prefix) {
        var i, len, ch, code = 0;

        len = (prefix === 'u') ? 4 : 2;
        for (i = 0; i < len; ++i) {
            if (index < length && isHexDigit(source[index])) {
                ch = source[index++];
                code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
            } else {
                return '';
            }
        }
        return String.fromCharCode(code);
    }

    function scanUnicodeCodePointEscape() {
        var ch, code;

        ch = source[index];
        code = 0;

        // At least, one hex digit is required.
        if (ch === '}') {
            throwUnexpectedToken();
        }

        while (index < length) {
            ch = source[index++];
            if (!isHexDigit(ch)) {
                break;
            }
            code = code * 16 + '0123456789abcdef'.indexOf(ch.toLowerCase());
        }

        if (code > 0x10FFFF || ch !== '}') {
            throwUnexpectedToken();
        }

        return fromCodePoint(code);
    }

    function codePointAt(i) {
        var cp, first, second;

        cp = source.charCodeAt(i);
        if (cp >= 0xD800 && cp <= 0xDBFF) {
            second = source.charCodeAt(i + 1);
            if (second >= 0xDC00 && second <= 0xDFFF) {
                first = cp;
                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;
            }
        }

        return cp;
    }

    function getComplexIdentifier() {
        var cp, ch, id;

        cp = codePointAt(index);
        id = fromCodePoint(cp);
        index += id.length;

        // '\u' (U+005C, U+0075) denotes an escaped character.
        if (cp === 0x5C) {
            if (source.charCodeAt(index) !== 0x75) {
                throwUnexpectedToken();
            }
            ++index;
            if (source[index] === '{') {
                ++index;
                ch = scanUnicodeCodePointEscape();
            } else {
                ch = scanHexEscape('u');
                cp = ch.charCodeAt(0);
                if (!ch || ch === '\\' || !isIdentifierStart(cp)) {
                    throwUnexpectedToken();
                }
            }
            id = ch;
        }

        while (index < length) {
            cp = codePointAt(index);
            if (!isIdentifierPart(cp)) {
                break;
            }
            ch = fromCodePoint(cp);
            id += ch;
            index += ch.length;

            // '\u' (U+005C, U+0075) denotes an escaped character.
            if (cp === 0x5C) {
                id = id.substr(0, id.length - 1);
                if (source.charCodeAt(index) !== 0x75) {
                    throwUnexpectedToken();
                }
                ++index;
                if (source[index] === '{') {
                    ++index;
                    ch = scanUnicodeCodePointEscape();
                } else {
                    ch = scanHexEscape('u');
                    cp = ch.charCodeAt(0);
                    if (!ch || ch === '\\' || !isIdentifierPart(cp)) {
                        throwUnexpectedToken();
                    }
                }
                id += ch;
            }
        }

        return id;
    }

    function getIdentifier() {
        var start, ch;

        start = index++;
        while (index < length) {
            ch = source.charCodeAt(index);
            if (ch === 0x5C) {
                // Blackslash (U+005C) marks Unicode escape sequence.
                index = start;
                return getComplexIdentifier();
            } else if (ch >= 0xD800 && ch < 0xDFFF) {
                // Need to handle surrogate pairs.
                index = start;
                return getComplexIdentifier();
            }
            if (isIdentifierPart(ch)) {
                ++index;
            } else {
                break;
            }
        }

        return source.slice(start, index);
    }

    function scanIdentifier() {
        var start, id, type;

        start = index;

        // Backslash (U+005C) starts an escaped character.
        id = (source.charCodeAt(index) === 0x5C) ? getComplexIdentifier() : getIdentifier();

        // There is no keyword or literal with only one character.
        // Thus, it must be an identifier.
        if (id.length === 1) {
            type = Token.Identifier;
        } else if (isKeyword(id)) {
            type = Token.Keyword;
        } else if (id === 'null') {
            type = Token.NullLiteral;
        } else if (id === 'true' || id === 'false') {
            type = Token.BooleanLiteral;
        } else {
            type = Token.Identifier;
        }

        return {
            type: type,
            value: id,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }


    // ECMA-262 11.7 Punctuators

    function scanPunctuator() {
        var token, str;

        token = {
            type: Token.Punctuator,
            value: '',
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: index,
            end: index
        };

        // Check for most common single-character punctuators.
        str = source[index];
        switch (str) {

        case '(':
            if (extra.tokenize) {
                extra.openParenToken = extra.tokenValues.length;
            }
            ++index;
            break;

        case '{':
            if (extra.tokenize) {
                extra.openCurlyToken = extra.tokenValues.length;
            }
            state.curlyStack.push('{');
            ++index;
            break;

        case '.':
            ++index;
            if (source[index] === '.' && source[index + 1] === '.') {
                // Spread operator: ...
                index += 2;
                str = '...';
            }
            break;

        case '}':
            ++index;
            state.curlyStack.pop();
            break;
        case ')':
        case ';':
        case ',':
        case '[':
        case ']':
        case ':':
        case '?':
        case '~':
            ++index;
            break;

        default:
            // 4-character punctuator.
            str = source.substr(index, 4);
            if (str === '>>>=') {
                index += 4;
            } else {

                // 3-character punctuators.
                str = str.substr(0, 3);
                if (str === '===' || str === '!==' || str === '>>>' ||
                    str === '<<=' || str === '>>=') {
                    index += 3;
                } else {

                    // 2-character punctuators.
                    str = str.substr(0, 2);
                    if (str === '&&' || str === '||' || str === '==' || str === '!=' ||
                        str === '+=' || str === '-=' || str === '*=' || str === '/=' ||
                        str === '++' || str === '--' || str === '<<' || str === '>>' ||
                        str === '&=' || str === '|=' || str === '^=' || str === '%=' ||
                        str === '<=' || str === '>=' || str === '=>') {
                        index += 2;
                    } else {

                        // 1-character punctuators.
                        str = source[index];
                        if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {
                            ++index;
                        }
                    }
                }
            }
        }

        if (index === token.start) {
            throwUnexpectedToken();
        }

        token.end = index;
        token.value = str;
        return token;
    }

    // ECMA-262 11.8.3 Numeric Literals

    function scanHexLiteral(start) {
        var number = '';

        while (index < length) {
            if (!isHexDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (number.length === 0) {
            throwUnexpectedToken();
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwUnexpectedToken();
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt('0x' + number, 16),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function scanBinaryLiteral(start) {
        var ch, number;

        number = '';

        while (index < length) {
            ch = source[index];
            if (ch !== '0' && ch !== '1') {
                break;
            }
            number += source[index++];
        }

        if (number.length === 0) {
            // only 0b or 0B
            throwUnexpectedToken();
        }

        if (index < length) {
            ch = source.charCodeAt(index);
            /* istanbul ignore else */
            if (isIdentifierStart(ch) || isDecimalDigit(ch)) {
                throwUnexpectedToken();
            }
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt(number, 2),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function scanOctalLiteral(prefix, start) {
        var number, octal;

        if (isOctalDigit(prefix)) {
            octal = true;
            number = '0' + source[index++];
        } else {
            octal = false;
            ++index;
            number = '';
        }

        while (index < length) {
            if (!isOctalDigit(source[index])) {
                break;
            }
            number += source[index++];
        }

        if (!octal && number.length === 0) {
            // only 0o or 0O
            throwUnexpectedToken();
        }

        if (isIdentifierStart(source.charCodeAt(index)) || isDecimalDigit(source.charCodeAt(index))) {
            throwUnexpectedToken();
        }

        return {
            type: Token.NumericLiteral,
            value: parseInt(number, 8),
            octal: octal,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    function isImplicitOctalLiteral() {
        var i, ch;

        // Implicit octal, unless there is a non-octal digit.
        // (Annex B.1.1 on Numeric Literals)
        for (i = index + 1; i < length; ++i) {
            ch = source[i];
            if (ch === '8' || ch === '9') {
                return false;
            }
            if (!isOctalDigit(ch)) {
                return true;
            }
        }

        return true;
    }

    function scanNumericLiteral() {
        var number, start, ch;

        ch = source[index];
        assert(isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),
            'Numeric literal must start with a decimal digit or a decimal point');

        start = index;
        number = '';
        if (ch !== '.') {
            number = source[index++];
            ch = source[index];

            // Hex number starts with '0x'.
            // Octal number starts with '0'.
            // Octal number in ES6 starts with '0o'.
            // Binary number in ES6 starts with '0b'.
            if (number === '0') {
                if (ch === 'x' || ch === 'X') {
                    ++index;
                    return scanHexLiteral(start);
                }
                if (ch === 'b' || ch === 'B') {
                    ++index;
                    return scanBinaryLiteral(start);
                }
                if (ch === 'o' || ch === 'O') {
                    return scanOctalLiteral(ch, start);
                }

                if (isOctalDigit(ch)) {
                    if (isImplicitOctalLiteral()) {
                        return scanOctalLiteral(ch, start);
                    }
                }
            }

            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === '.') {
            number += source[index++];
            while (isDecimalDigit(source.charCodeAt(index))) {
                number += source[index++];
            }
            ch = source[index];
        }

        if (ch === 'e' || ch === 'E') {
            number += source[index++];

            ch = source[index];
            if (ch === '+' || ch === '-') {
                number += source[index++];
            }
            if (isDecimalDigit(source.charCodeAt(index))) {
                while (isDecimalDigit(source.charCodeAt(index))) {
                    number += source[index++];
                }
            } else {
                throwUnexpectedToken();
            }
        }

        if (isIdentifierStart(source.charCodeAt(index))) {
            throwUnexpectedToken();
        }

        return {
            type: Token.NumericLiteral,
            value: parseFloat(number),
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    // ECMA-262 11.8.4 String Literals

    function scanStringLiteral() {
        var str = '', quote, start, ch, unescaped, octToDec, octal = false;

        quote = source[index];
        assert((quote === '\'' || quote === '"'),
            'String literal must starts with a quote');

        start = index;
        ++index;

        while (index < length) {
            ch = source[index++];

            if (ch === quote) {
                quote = '';
                break;
            } else if (ch === '\\') {
                ch = source[index++];
                if (!ch || !isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                    case 'u':
                    case 'x':
                        if (source[index] === '{') {
                            ++index;
                            str += scanUnicodeCodePointEscape();
                        } else {
                            unescaped = scanHexEscape(ch);
                            if (!unescaped) {
                                throw throwUnexpectedToken();
                            }
                            str += unescaped;
                        }
                        break;
                    case 'n':
                        str += '\n';
                        break;
                    case 'r':
                        str += '\r';
                        break;
                    case 't':
                        str += '\t';
                        break;
                    case 'b':
                        str += '\b';
                        break;
                    case 'f':
                        str += '\f';
                        break;
                    case 'v':
                        str += '\x0B';
                        break;
                    case '8':
                    case '9':
                        str += ch;
                        tolerateUnexpectedToken();
                        break;

                    default:
                        if (isOctalDigit(ch)) {
                            octToDec = octalToDecimal(ch);

                            octal = octToDec.octal || octal;
                            str += String.fromCharCode(octToDec.code);
                        } else {
                            str += ch;
                        }
                        break;
                    }
                } else {
                    ++lineNumber;
                    if (ch === '\r' && source[index] === '\n') {
                        ++index;
                    }
                    lineStart = index;
                }
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                break;
            } else {
                str += ch;
            }
        }

        if (quote !== '') {
            index = start;
            throwUnexpectedToken();
        }

        return {
            type: Token.StringLiteral,
            value: str,
            octal: octal,
            lineNumber: startLineNumber,
            lineStart: startLineStart,
            start: start,
            end: index
        };
    }

    // ECMA-262 11.8.6 Template Literal Lexical Components

    function scanTemplate() {
        var cooked = '', ch, start, rawOffset, terminated, head, tail, restore, unescaped;

        terminated = false;
        tail = false;
        start = index;
        head = (source[index] === '`');
        rawOffset = 2;

        ++index;

        while (index < length) {
            ch = source[index++];
            if (ch === '`') {
                rawOffset = 1;
                tail = true;
                terminated = true;
                break;
            } else if (ch === '$') {
                if (source[index] === '{') {
                    state.curlyStack.push('${');
                    ++index;
                    terminated = true;
                    break;
                }
                cooked += ch;
            } else if (ch === '\\') {
                ch = source[index++];
                if (!isLineTerminator(ch.charCodeAt(0))) {
                    switch (ch) {
                    case 'n':
                        cooked += '\n';
                        break;
                    case 'r':
                        cooked += '\r';
                        break;
                    case 't':
                        cooked += '\t';
                        break;
                    case 'u':
                    case 'x':
                        if (source[index] === '{') {
                            ++index;
                            cooked += scanUnicodeCodePointEscape();
                        } else {
                            restore = index;
                            unescaped = scanHexEscape(ch);
                            if (unescaped) {
                                cooked += unescaped;
                            } else {
                                index = restore;
                                cooked += ch;
                            }
                        }
                        break;
                    case 'b':
                        cooked += '\b';
                        break;
                    case 'f':
                        cooked += '\f';
                        break;
                    case 'v':
                        cooked += '\v';
                        break;

                    default:
                        if (ch === '0') {
                            if (isDecimalDigit(source.charCodeAt(index))) {
                                // Illegal: \01 \02 and so on
                                throwError(Messages.TemplateOctalLiteral);
                            }
                            cooked += '\0';
                        } else if (isOctalDigit(ch)) {
                            // Illegal: \1 \2
                            throwError(Messages.TemplateOctalLiteral);
                        } else {
                            cooked += ch;
                        }
                        break;
                    }
                } else {
                    ++lineNumber;
                    if (ch === '\r' && source[index] === '\n') {
                        ++index;
                    }
                    lineStart = index;
                }
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                ++lineNumber;
                if (ch === '\r' && source[index] === '\n') {
                    ++index;
                }
                lineStart = index;
                cooked += '\n';
            } else {
                cooked += ch;
            }
        }

        if (!terminated) {
            throwUnexpectedToken();
        }

        if (!head) {
            state.curlyStack.pop();
        }

        return {
            type: Token.Template,
            value: {
                cooked: cooked,
                raw: source.slice(start + 1, index - rawOffset)
            },
            head: head,
            tail: tail,
            lineNumber: lineNumber,
            lineStart: lineStart,
            start: start,
            end: index
        };
    }

    // ECMA-262 11.8.5 Regular Expression Literals

    function testRegExp(pattern, flags) {
        // The BMP character to use as a replacement for astral symbols when
        // translating an ES6 "u"-flagged pattern to an ES5-compatible
        // approximation.
        // Note: replacing with '\uFFFF' enables false positives in unlikely
        // scenarios. For example, `[\u{1044f}-\u{10440}]` is an invalid
        // pattern that would not be detected by this substitution.
        var astralSubstitute = '\uFFFF',
            tmp = pattern;

        if (flags.indexOf('u') >= 0) {
            tmp = tmp
                // Replace every Unicode escape sequence with the equivalent
                // BMP character or a constant ASCII code point in the case of
                // astral symbols. (See the above note on `astralSubstitute`
                // for more information.)
                .replace(/\\u\{([0-9a-fA-F]+)\}|\\u([a-fA-F0-9]{4})/g, function ($0, $1, $2) {
                    var codePoint = parseInt($1 || $2, 16);
                    if (codePoint > 0x10FFFF) {
                        throwUnexpectedToken(null, Messages.InvalidRegExp);
                    }
                    if (codePoint <= 0xFFFF) {
                        return String.fromCharCode(codePoint);
                    }
                    return astralSubstitute;
                })
                // Replace each paired surrogate with a single ASCII symbol to
                // avoid throwing on regular expressions that are only valid in
                // combination with the "u" flag.
                .replace(
                    /[\uD800-\uDBFF][\uDC00-\uDFFF]/g,
                    astralSubstitute
                );
        }

        // First, detect invalid regular expressions.
        try {
            RegExp(tmp);
        } catch (e) {
            throwUnexpectedToken(null, Messages.InvalidRegExp);
        }

        // Return a regular expression object for this pattern-flag pair, or
        // `null` in case the current environment doesn't support the flags it
        // uses.
        try {
            return new RegExp(pattern, flags);
        } catch (exception) {
            return null;
        }
    }

    function scanRegExpBody() {
        var ch, str, classMarker, terminated, body;

        ch = source[index];
        assert(ch === '/', 'Regular expression literal must start with a slash');
        str = source[index++];

        classMarker = false;
        terminated = false;
        while (index < length) {
            ch = source[index++];
            str += ch;
            if (ch === '\\') {
                ch = source[index++];
                // ECMA-262 7.8.5
                if (isLineTerminator(ch.charCodeAt(0))) {
                    throwUnexpectedToken(null, Messages.UnterminatedRegExp);
                }
                str += ch;
            } else if (isLineTerminator(ch.charCodeAt(0))) {
                throwUnexpectedToken(null, Messages.UnterminatedRegExp);
            } else if (classMarker) {
                if (ch === ']') {
                    classMarker = false;
                }
            } else {
                if (ch === '/') {
                    terminated = true;
                    break;
                } else if (ch === '[') {
                    classMarker = true;
                }
            }
        }

        if (!terminated) {
            throwUnexpectedToken(null, Messages.UnterminatedRegExp);
        }

        // Exclude leading and trailing slash.
        body = str.substr(1, str.length - 2);
        return {
            value: body,
            literal: str
        };
    }

    function scanRegExpFlags() {
        var ch, str, flags, restore;

        str = '';
        flags = '';
        while (index < length) {
            ch = source[index];
            if (!isIdentifierPart(ch.charCodeAt(0))) {
                break;
            }

            ++index;
            if (ch === '\\' && index < length) {
                ch = source[index];
                if (ch === 'u') {
                    ++index;
                    restore = index;
                    ch = scanHexEscape('u');
                    if (ch) {
                        flags += ch;
                        for (str += '\\u'; restore < index; ++restore) {
                            str += source[restore];
                        }
                    } else {
                        index = restore;
                        flags += 'u';
                        str += '\\u';
                    }
                    tolerateUnexpectedToken();
                } else {
                    str += '\\';
                    tolerateUnexpectedToken();
                }
            } else {
                flags += ch;
                str += ch;
            }
        }

        return {
            value: flags,
            literal: str
        };
    }

    function scanRegExp() {
        var start, body, flags, value;
        scanning = true;

        lookahead = null;
        skipComment();
        start = index;

        body = scanRegExpBody();
        flags = scanRegExpFlags();
        value = testRegExp(body.value, flags.value);
        scanning = false;
        if (extra.tokenize) {
            return {
                type: Token.RegularExpression,
                value: value,
                regex: {
                    pattern: body.value,
                    flags: flags.value
                },
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: start,
                end: index
            };
        }

        return {
            literal: body.literal + flags.literal,
            value: value,
            regex: {
                pattern: body.value,
                flags: flags.value
            },
            start: start,
            end: index
        };
    }

    function collectRegex() {
        var pos, loc, regex, token;

        skipComment();

        pos = index;
        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        regex = scanRegExp();

        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        /* istanbul ignore next */
        if (!extra.tokenize) {
            // Pop the previous token, which is likely '/' or '/='
            if (extra.tokens.length > 0) {
                token = extra.tokens[extra.tokens.length - 1];
                if (token.range[0] === pos && token.type === 'Punctuator') {
                    if (token.value === '/' || token.value === '/=') {
                        extra.tokens.pop();
                    }
                }
            }

            extra.tokens.push({
                type: 'RegularExpression',
                value: regex.literal,
                regex: regex.regex,
                range: [pos, index],
                loc: loc
            });
        }

        return regex;
    }

    function isIdentifierName(token) {
        return token.type === Token.Identifier ||
            token.type === Token.Keyword ||
            token.type === Token.BooleanLiteral ||
            token.type === Token.NullLiteral;
    }

    // Using the following algorithm:
    // https://github.com/mozilla/sweet.js/wiki/design

    function advanceSlash() {
        var regex, previous, check;

        function testKeyword(value) {
            return value && (value.length > 1) && (value[0] >= 'a') && (value[0] <= 'z');
        }

        previous = extra.tokenValues[extra.tokens.length - 1];
        regex = (previous !== null);

        switch (previous) {
        case 'this':
        case ']':
            regex = false;
            break;

        case ')':
            check = extra.tokenValues[extra.openParenToken - 1];
            regex = (check === 'if' || check === 'while' || check === 'for' || check === 'with');
            break;

        case '}':
            // Dividing a function by anything makes little sense,
            // but we have to check for that.
            regex = false;
            if (testKeyword(extra.tokenValues[extra.openCurlyToken - 3])) {
                // Anonymous function, e.g. function(){} /42
                check = extra.tokenValues[extra.openCurlyToken - 4];
                regex = check ? (FnExprTokens.indexOf(check) < 0) : false;
            } else if (testKeyword(extra.tokenValues[extra.openCurlyToken - 4])) {
                // Named function, e.g. function f(){} /42/
                check = extra.tokenValues[extra.openCurlyToken - 5];
                regex = check ? (FnExprTokens.indexOf(check) < 0) : true;
            }
        }

        return regex ? collectRegex() : scanPunctuator();
    }

    function advance() {
        var cp, token;

        if (index >= length) {
            return {
                type: Token.EOF,
                lineNumber: lineNumber,
                lineStart: lineStart,
                start: index,
                end: index
            };
        }

        cp = source.charCodeAt(index);

        if (isIdentifierStart(cp)) {
            token = scanIdentifier();
            if (strict && isStrictModeReservedWord(token.value)) {
                token.type = Token.Keyword;
            }
            return token;
        }

        // Very common: ( and ) and ;
        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {
            return scanPunctuator();
        }

        // String literal starts with single quote (U+0027) or double quote (U+0022).
        if (cp === 0x27 || cp === 0x22) {
            return scanStringLiteral();
        }

        // Dot (.) U+002E can also start a floating-point number, hence the need
        // to check the next character.
        if (cp === 0x2E) {
            if (isDecimalDigit(source.charCodeAt(index + 1))) {
                return scanNumericLiteral();
            }
            return scanPunctuator();
        }

        if (isDecimalDigit(cp)) {
            return scanNumericLiteral();
        }

        // Slash (/) U+002F can also start a regex.
        if (extra.tokenize && cp === 0x2F) {
            return advanceSlash();
        }

        // Template literals start with ` (U+0060) for template head
        // or } (U+007D) for template middle or template tail.
        if (cp === 0x60 || (cp === 0x7D && state.curlyStack[state.curlyStack.length - 1] === '${')) {
            return scanTemplate();
        }

        // Possible identifier start in a surrogate pair.
        if (cp >= 0xD800 && cp < 0xDFFF) {
            cp = codePointAt(index);
            if (isIdentifierStart(cp)) {
                return scanIdentifier();
            }
        }

        return scanPunctuator();
    }

    function collectToken() {
        var loc, token, value, entry;

        loc = {
            start: {
                line: lineNumber,
                column: index - lineStart
            }
        };

        token = advance();
        loc.end = {
            line: lineNumber,
            column: index - lineStart
        };

        if (token.type !== Token.EOF) {
            value = source.slice(token.start, token.end);
            entry = {
                type: TokenName[token.type],
                value: value,
                range: [token.start, token.end],
                loc: loc
            };
            if (token.regex) {
                entry.regex = {
                    pattern: token.regex.pattern,
                    flags: token.regex.flags
                };
            }
            if (extra.tokenValues) {
                extra.tokenValues.push((entry.type === 'Punctuator' || entry.type === 'Keyword') ? entry.value : null);
            }
            if (extra.tokenize) {
                if (!extra.range) {
                    delete entry.range;
                }
                if (!extra.loc) {
                    delete entry.loc;
                }
                if (extra.delegate) {
                    entry = extra.delegate(entry);
                }
            }
            extra.tokens.push(entry);
        }

        return token;
    }

    function lex() {
        var token;
        scanning = true;

        lastIndex = index;
        lastLineNumber = lineNumber;
        lastLineStart = lineStart;

        skipComment();

        token = lookahead;

        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;

        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
        scanning = false;
        return token;
    }

    function peek() {
        scanning = true;

        skipComment();

        lastIndex = index;
        lastLineNumber = lineNumber;
        lastLineStart = lineStart;

        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;

        lookahead = (typeof extra.tokens !== 'undefined') ? collectToken() : advance();
        scanning = false;
    }

    function Position() {
        this.line = startLineNumber;
        this.column = startIndex - startLineStart;
    }

    function SourceLocation() {
        this.start = new Position();
        this.end = null;
    }

    function WrappingSourceLocation(startToken) {
        this.start = {
            line: startToken.lineNumber,
            column: startToken.start - startToken.lineStart
        };
        this.end = null;
    }

    function Node() {
        if (extra.range) {
            this.range = [startIndex, 0];
        }
        if (extra.loc) {
            this.loc = new SourceLocation();
        }
    }

    function WrappingNode(startToken) {
        if (extra.range) {
            this.range = [startToken.start, 0];
        }
        if (extra.loc) {
            this.loc = new WrappingSourceLocation(startToken);
        }
    }

    WrappingNode.prototype = Node.prototype = {

        processComment: function () {
            var lastChild,
                innerComments,
                leadingComments,
                trailingComments,
                bottomRight = extra.bottomRightStack,
                i,
                comment,
                last = bottomRight[bottomRight.length - 1];

            if (this.type === Syntax.Program) {
                if (this.body.length > 0) {
                    return;
                }
            }
            /**
             * patch innnerComments for properties empty block
             * `function a() {/** comments **\/}`
             */

            if (this.type === Syntax.BlockStatement && this.body.length === 0) {
                innerComments = [];
                for (i = extra.leadingComments.length - 1; i >= 0; --i) {
                    comment = extra.leadingComments[i];
                    if (this.range[1] >= comment.range[1]) {
                        innerComments.unshift(comment);
                        extra.leadingComments.splice(i, 1);
                        extra.trailingComments.splice(i, 1);
                    }
                }
                if (innerComments.length) {
                    this.innerComments = innerComments;
                    //bottomRight.push(this);
                    return;
                }
            }

            if (extra.trailingComments.length > 0) {
                trailingComments = [];
                for (i = extra.trailingComments.length - 1; i >= 0; --i) {
                    comment = extra.trailingComments[i];
                    if (comment.range[0] >= this.range[1]) {
                        trailingComments.unshift(comment);
                        extra.trailingComments.splice(i, 1);
                    }
                }
                extra.trailingComments = [];
            } else {
                if (last && last.trailingComments && last.trailingComments[0].range[0] >= this.range[1]) {
                    trailingComments = last.trailingComments;
                    delete last.trailingComments;
                }
            }

            // Eating the stack.
            while (last && last.range[0] >= this.range[0]) {
                lastChild = bottomRight.pop();
                last = bottomRight[bottomRight.length - 1];
            }

            if (lastChild) {
                if (lastChild.leadingComments) {
                    leadingComments = [];
                    for (i = lastChild.leadingComments.length - 1; i >= 0; --i) {
                        comment = lastChild.leadingComments[i];
                        if (comment.range[1] <= this.range[0]) {
                            leadingComments.unshift(comment);
                            lastChild.leadingComments.splice(i, 1);
                        }
                    }

                    if (!lastChild.leadingComments.length) {
                        lastChild.leadingComments = undefined;
                    }
                }
            } else if (extra.leadingComments.length > 0) {
                leadingComments = [];
                for (i = extra.leadingComments.length - 1; i >= 0; --i) {
                    comment = extra.leadingComments[i];
                    if (comment.range[1] <= this.range[0]) {
                        leadingComments.unshift(comment);
                        extra.leadingComments.splice(i, 1);
                    }
                }
            }


            if (leadingComments && leadingComments.length > 0) {
                this.leadingComments = leadingComments;
            }
            if (trailingComments && trailingComments.length > 0) {
                this.trailingComments = trailingComments;
            }

            bottomRight.push(this);
        },

        finish: function () {
            if (extra.range) {
                this.range[1] = lastIndex;
            }
            if (extra.loc) {
                this.loc.end = {
                    line: lastLineNumber,
                    column: lastIndex - lastLineStart
                };
                if (extra.source) {
                    this.loc.source = extra.source;
                }
            }

            if (extra.attachComment) {
                this.processComment();
            }
        },

        finishArrayExpression: function (elements) {
            this.type = Syntax.ArrayExpression;
            this.elements = elements;
            this.finish();
            return this;
        },

        finishArrayPattern: function (elements) {
            this.type = Syntax.ArrayPattern;
            this.elements = elements;
            this.finish();
            return this;
        },

        finishArrowFunctionExpression: function (params, defaults, body, expression) {
            this.type = Syntax.ArrowFunctionExpression;
            this.id = null;
            this.params = params;
            this.defaults = defaults;
            this.body = body;
            this.generator = false;
            this.expression = expression;
            this.finish();
            return this;
        },

        finishAssignmentExpression: function (operator, left, right) {
            this.type = Syntax.AssignmentExpression;
            this.operator = operator;
            this.left = left;
            this.right = right;
            this.finish();
            return this;
        },

        finishAssignmentPattern: function (left, right) {
            this.type = Syntax.AssignmentPattern;
            this.left = left;
            this.right = right;
            this.finish();
            return this;
        },

        finishBinaryExpression: function (operator, left, right) {
            this.type = (operator === '||' || operator === '&&') ? Syntax.LogicalExpression : Syntax.BinaryExpression;
            this.operator = operator;
            this.left = left;
            this.right = right;
            this.finish();
            return this;
        },

        finishBlockStatement: function (body) {
            this.type = Syntax.BlockStatement;
            this.body = body;
            this.finish();
            return this;
        },

        finishBreakStatement: function (label) {
            this.type = Syntax.BreakStatement;
            this.label = label;
            this.finish();
            return this;
        },

        finishCallExpression: function (callee, args) {
            this.type = Syntax.CallExpression;
            this.callee = callee;
            this.arguments = args;
            this.finish();
            return this;
        },

        finishCatchClause: function (param, body) {
            this.type = Syntax.CatchClause;
            this.param = param;
            this.body = body;
            this.finish();
            return this;
        },

        finishClassBody: function (body) {
            this.type = Syntax.ClassBody;
            this.body = body;
            this.finish();
            return this;
        },

        finishClassDeclaration: function (id, superClass, body) {
            this.type = Syntax.ClassDeclaration;
            this.id = id;
            this.superClass = superClass;
            this.body = body;
            this.finish();
            return this;
        },

        finishClassExpression: function (id, superClass, body) {
            this.type = Syntax.ClassExpression;
            this.id = id;
            this.superClass = superClass;
            this.body = body;
            this.finish();
            return this;
        },

        finishConditionalExpression: function (test, consequent, alternate) {
            this.type = Syntax.ConditionalExpression;
            this.test = test;
            this.consequent = consequent;
            this.alternate = alternate;
            this.finish();
            return this;
        },

        finishContinueStatement: function (label) {
            this.type = Syntax.ContinueStatement;
            this.label = label;
            this.finish();
            return this;
        },

        finishDebuggerStatement: function () {
            this.type = Syntax.DebuggerStatement;
            this.finish();
            return this;
        },

        finishDoWhileStatement: function (body, test) {
            this.type = Syntax.DoWhileStatement;
            this.body = body;
            this.test = test;
            this.finish();
            return this;
        },

        finishEmptyStatement: function () {
            this.type = Syntax.EmptyStatement;
            this.finish();
            return this;
        },

        finishExpressionStatement: function (expression) {
            this.type = Syntax.ExpressionStatement;
            this.expression = expression;
            this.finish();
            return this;
        },

        finishForStatement: function (init, test, update, body) {
            this.type = Syntax.ForStatement;
            this.init = init;
            this.test = test;
            this.update = update;
            this.body = body;
            this.finish();
            return this;
        },

        finishForOfStatement: function (left, right, body) {
            this.type = Syntax.ForOfStatement;
            this.left = left;
            this.right = right;
            this.body = body;
            this.finish();
            return this;
        },

        finishForInStatement: function (left, right, body) {
            this.type = Syntax.ForInStatement;
            this.left = left;
            this.right = right;
            this.body = body;
            this.each = false;
            this.finish();
            return this;
        },

        finishFunctionDeclaration: function (id, params, defaults, body, generator) {
            this.type = Syntax.FunctionDeclaration;
            this.id = id;
            this.params = params;
            this.defaults = defaults;
            this.body = body;
            this.generator = generator;
            this.expression = false;
            this.finish();
            return this;
        },

        finishFunctionExpression: function (id, params, defaults, body, generator) {
            this.type = Syntax.FunctionExpression;
            this.id = id;
            this.params = params;
            this.defaults = defaults;
            this.body = body;
            this.generator = generator;
            this.expression = false;
            this.finish();
            return this;
        },

        finishIdentifier: function (name) {
            this.type = Syntax.Identifier;
            this.name = name;
            this.finish();
            return this;
        },

        finishIfStatement: function (test, consequent, alternate) {
            this.type = Syntax.IfStatement;
            this.test = test;
            this.consequent = consequent;
            this.alternate = alternate;
            this.finish();
            return this;
        },

        finishLabeledStatement: function (label, body) {
            this.type = Syntax.LabeledStatement;
            this.label = label;
            this.body = body;
            this.finish();
            return this;
        },

        finishLiteral: function (token) {
            this.type = Syntax.Literal;
            this.value = token.value;
            this.raw = source.slice(token.start, token.end);
            if (token.regex) {
                this.regex = token.regex;
            }
            this.finish();
            return this;
        },

        finishMemberExpression: function (accessor, object, property) {
            this.type = Syntax.MemberExpression;
            this.computed = accessor === '[';
            this.object = object;
            this.property = property;
            this.finish();
            return this;
        },

        finishMetaProperty: function (meta, property) {
            this.type = Syntax.MetaProperty;
            this.meta = meta;
            this.property = property;
            this.finish();
            return this;
        },

        finishNewExpression: function (callee, args) {
            this.type = Syntax.NewExpression;
            this.callee = callee;
            this.arguments = args;
            this.finish();
            return this;
        },

        finishObjectExpression: function (properties) {
            this.type = Syntax.ObjectExpression;
            this.properties = properties;
            this.finish();
            return this;
        },

        finishObjectPattern: function (properties) {
            this.type = Syntax.ObjectPattern;
            this.properties = properties;
            this.finish();
            return this;
        },

        finishPostfixExpression: function (operator, argument) {
            this.type = Syntax.UpdateExpression;
            this.operator = operator;
            this.argument = argument;
            this.prefix = false;
            this.finish();
            return this;
        },

        finishProgram: function (body, sourceType) {
            this.type = Syntax.Program;
            this.body = body;
            this.sourceType = sourceType;
            this.finish();
            return this;
        },

        finishProperty: function (kind, key, computed, value, method, shorthand) {
            this.type = Syntax.Property;
            this.key = key;
            this.computed = computed;
            this.value = value;
            this.kind = kind;
            this.method = method;
            this.shorthand = shorthand;
            this.finish();
            return this;
        },

        finishRestElement: function (argument) {
            this.type = Syntax.RestElement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishReturnStatement: function (argument) {
            this.type = Syntax.ReturnStatement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishSequenceExpression: function (expressions) {
            this.type = Syntax.SequenceExpression;
            this.expressions = expressions;
            this.finish();
            return this;
        },

        finishSpreadElement: function (argument) {
            this.type = Syntax.SpreadElement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishSwitchCase: function (test, consequent) {
            this.type = Syntax.SwitchCase;
            this.test = test;
            this.consequent = consequent;
            this.finish();
            return this;
        },

        finishSuper: function () {
            this.type = Syntax.Super;
            this.finish();
            return this;
        },

        finishSwitchStatement: function (discriminant, cases) {
            this.type = Syntax.SwitchStatement;
            this.discriminant = discriminant;
            this.cases = cases;
            this.finish();
            return this;
        },

        finishTaggedTemplateExpression: function (tag, quasi) {
            this.type = Syntax.TaggedTemplateExpression;
            this.tag = tag;
            this.quasi = quasi;
            this.finish();
            return this;
        },

        finishTemplateElement: function (value, tail) {
            this.type = Syntax.TemplateElement;
            this.value = value;
            this.tail = tail;
            this.finish();
            return this;
        },

        finishTemplateLiteral: function (quasis, expressions) {
            this.type = Syntax.TemplateLiteral;
            this.quasis = quasis;
            this.expressions = expressions;
            this.finish();
            return this;
        },

        finishThisExpression: function () {
            this.type = Syntax.ThisExpression;
            this.finish();
            return this;
        },

        finishThrowStatement: function (argument) {
            this.type = Syntax.ThrowStatement;
            this.argument = argument;
            this.finish();
            return this;
        },

        finishTryStatement: function (block, handler, finalizer) {
            this.type = Syntax.TryStatement;
            this.block = block;
            this.guardedHandlers = [];
            this.handlers = handler ? [handler] : [];
            this.handler = handler;
            this.finalizer = finalizer;
            this.finish();
            return this;
        },

        finishUnaryExpression: function (operator, argument) {
            this.type = (operator === '++' || operator === '--') ? Syntax.UpdateExpression : Syntax.UnaryExpression;
            this.operator = operator;
            this.argument = argument;
            this.prefix = true;
            this.finish();
            return this;
        },

        finishVariableDeclaration: function (declarations) {
            this.type = Syntax.VariableDeclaration;
            this.declarations = declarations;
            this.kind = 'var';
            this.finish();
            return this;
        },

        finishLexicalDeclaration: function (declarations, kind) {
            this.type = Syntax.VariableDeclaration;
            this.declarations = declarations;
            this.kind = kind;
            this.finish();
            return this;
        },

        finishVariableDeclarator: function (id, init) {
            this.type = Syntax.VariableDeclarator;
            this.id = id;
            this.init = init;
            this.finish();
            return this;
        },

        finishWhileStatement: function (test, body) {
            this.type = Syntax.WhileStatement;
            this.test = test;
            this.body = body;
            this.finish();
            return this;
        },

        finishWithStatement: function (object, body) {
            this.type = Syntax.WithStatement;
            this.object = object;
            this.body = body;
            this.finish();
            return this;
        },

        finishExportSpecifier: function (local, exported) {
            this.type = Syntax.ExportSpecifier;
            this.exported = exported || local;
            this.local = local;
            this.finish();
            return this;
        },

        finishImportDefaultSpecifier: function (local) {
            this.type = Syntax.ImportDefaultSpecifier;
            this.local = local;
            this.finish();
            return this;
        },

        finishImportNamespaceSpecifier: function (local) {
            this.type = Syntax.ImportNamespaceSpecifier;
            this.local = local;
            this.finish();
            return this;
        },

        finishExportNamedDeclaration: function (declaration, specifiers, src) {
            this.type = Syntax.ExportNamedDeclaration;
            this.declaration = declaration;
            this.specifiers = specifiers;
            this.source = src;
            this.finish();
            return this;
        },

        finishExportDefaultDeclaration: function (declaration) {
            this.type = Syntax.ExportDefaultDeclaration;
            this.declaration = declaration;
            this.finish();
            return this;
        },

        finishExportAllDeclaration: function (src) {
            this.type = Syntax.ExportAllDeclaration;
            this.source = src;
            this.finish();
            return this;
        },

        finishImportSpecifier: function (local, imported) {
            this.type = Syntax.ImportSpecifier;
            this.local = local || imported;
            this.imported = imported;
            this.finish();
            return this;
        },

        finishImportDeclaration: function (specifiers, src) {
            this.type = Syntax.ImportDeclaration;
            this.specifiers = specifiers;
            this.source = src;
            this.finish();
            return this;
        },

        finishYieldExpression: function (argument, delegate) {
            this.type = Syntax.YieldExpression;
            this.argument = argument;
            this.delegate = delegate;
            this.finish();
            return this;
        }
    };


    function recordError(error) {
        var e, existing;

        for (e = 0; e < extra.errors.length; e++) {
            existing = extra.errors[e];
            // Prevent duplicated error.
            /* istanbul ignore next */
            if (existing.index === error.index && existing.message === error.message) {
                return;
            }
        }

        extra.errors.push(error);
    }

    function constructError(msg, column) {
        var error = new Error(msg);
        try {
            throw error;
        } catch (base) {
            /* istanbul ignore else */
            if (Object.create && Object.defineProperty) {
                error = Object.create(base);
                Object.defineProperty(error, 'column', { value: column });
            }
        } finally {
            return error;
        }
    }

    function createError(line, pos, description) {
        var msg, column, error;

        msg = 'Line ' + line + ': ' + description;
        column = pos - (scanning ? lineStart : lastLineStart) + 1;
        error = constructError(msg, column);
        error.lineNumber = line;
        error.description = description;
        error.index = pos;
        return error;
    }

    // Throw an exception

    function throwError(messageFormat) {
        var args, msg;

        args = Array.prototype.slice.call(arguments, 1);
        msg = messageFormat.replace(/%(\d)/g,
            function (whole, idx) {
                assert(idx < args.length, 'Message reference must be in range');
                return args[idx];
            }
        );

        throw createError(lastLineNumber, lastIndex, msg);
    }

    function tolerateError(messageFormat) {
        var args, msg, error;

        args = Array.prototype.slice.call(arguments, 1);
        /* istanbul ignore next */
        msg = messageFormat.replace(/%(\d)/g,
            function (whole, idx) {
                assert(idx < args.length, 'Message reference must be in range');
                return args[idx];
            }
        );

        error = createError(lineNumber, lastIndex, msg);
        if (extra.errors) {
            recordError(error);
        } else {
            throw error;
        }
    }

    // Throw an exception because of the token.

    function unexpectedTokenError(token, message) {
        var value, msg = message || Messages.UnexpectedToken;

        if (token) {
            if (!message) {
                msg = (token.type === Token.EOF) ? Messages.UnexpectedEOS :
                    (token.type === Token.Identifier) ? Messages.UnexpectedIdentifier :
                    (token.type === Token.NumericLiteral) ? Messages.UnexpectedNumber :
                    (token.type === Token.StringLiteral) ? Messages.UnexpectedString :
                    (token.type === Token.Template) ? Messages.UnexpectedTemplate :
                    Messages.UnexpectedToken;

                if (token.type === Token.Keyword) {
                    if (isFutureReservedWord(token.value)) {
                        msg = Messages.UnexpectedReserved;
                    } else if (strict && isStrictModeReservedWord(token.value)) {
                        msg = Messages.StrictReservedWord;
                    }
                }
            }

            value = (token.type === Token.Template) ? token.value.raw : token.value;
        } else {
            value = 'ILLEGAL';
        }

        msg = msg.replace('%0', value);

        return (token && typeof token.lineNumber === 'number') ?
            createError(token.lineNumber, token.start, msg) :
            createError(scanning ? lineNumber : lastLineNumber, scanning ? index : lastIndex, msg);
    }

    function throwUnexpectedToken(token, message) {
        throw unexpectedTokenError(token, message);
    }

    function tolerateUnexpectedToken(token, message) {
        var error = unexpectedTokenError(token, message);
        if (extra.errors) {
            recordError(error);
        } else {
            throw error;
        }
    }

    // Expect the next token to match the specified punctuator.
    // If not, an exception will be thrown.

    function expect(value) {
        var token = lex();
        if (token.type !== Token.Punctuator || token.value !== value) {
            throwUnexpectedToken(token);
        }
    }

    /**
     * @name expectCommaSeparator
     * @description Quietly expect a comma when in tolerant mode, otherwise delegates
     * to <code>expect(value)</code>
     * @since 2.0
     */
    function expectCommaSeparator() {
        var token;

        if (extra.errors) {
            token = lookahead;
            if (token.type === Token.Punctuator && token.value === ',') {
                lex();
            } else if (token.type === Token.Punctuator && token.value === ';') {
                lex();
                tolerateUnexpectedToken(token);
            } else {
                tolerateUnexpectedToken(token, Messages.UnexpectedToken);
            }
        } else {
            expect(',');
        }
    }

    // Expect the next token to match the specified keyword.
    // If not, an exception will be thrown.

    function expectKeyword(keyword) {
        var token = lex();
        if (token.type !== Token.Keyword || token.value !== keyword) {
            throwUnexpectedToken(token);
        }
    }

    // Return true if the next token matches the specified punctuator.

    function match(value) {
        return lookahead.type === Token.Punctuator && lookahead.value === value;
    }

    // Return true if the next token matches the specified keyword

    function matchKeyword(keyword) {
        return lookahead.type === Token.Keyword && lookahead.value === keyword;
    }

    // Return true if the next token matches the specified contextual keyword
    // (where an identifier is sometimes a keyword depending on the context)

    function matchContextualKeyword(keyword) {
        return lookahead.type === Token.Identifier && lookahead.value === keyword;
    }

    // Return true if the next token is an assignment operator

    function matchAssign() {
        var op;

        if (lookahead.type !== Token.Punctuator) {
            return false;
        }
        op = lookahead.value;
        return op === '=' ||
            op === '*=' ||
            op === '/=' ||
            op === '%=' ||
            op === '+=' ||
            op === '-=' ||
            op === '<<=' ||
            op === '>>=' ||
            op === '>>>=' ||
            op === '&=' ||
            op === '^=' ||
            op === '|=';
    }

    function consumeSemicolon() {
        // Catch the very common case first: immediately a semicolon (U+003B).
        if (source.charCodeAt(startIndex) === 0x3B || match(';')) {
            lex();
            return;
        }

        if (hasLineTerminator) {
            return;
        }

        // FIXME(ikarienator): this is seemingly an issue in the previous location info convention.
        lastIndex = startIndex;
        lastLineNumber = startLineNumber;
        lastLineStart = startLineStart;

        if (lookahead.type !== Token.EOF && !match('}')) {
            throwUnexpectedToken(lookahead);
        }
    }

    // Cover grammar support.
    //
    // When an assignment expression position starts with an left parenthesis, the determination of the type
    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)
    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.
    //
    // There are three productions that can be parsed in a parentheses pair that needs to be determined
    // after the outermost pair is closed. They are:
    //
    //   1. AssignmentExpression
    //   2. BindingElements
    //   3. AssignmentTargets
    //
    // In order to avoid exponential backtracking, we use two flags to denote if the production can be
    // binding element or assignment target.
    //
    // The three productions have the relationship:
    //
    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression
    //
    // with a single exception that CoverInitializedName when used directly in an Expression, generates
    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the
    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.
    //
    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not
    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore
    // the CoverInitializedName check is conducted.
    //
    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates
    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential
    // pattern. The CoverInitializedName check is deferred.
    function isolateCoverGrammar(parser) {
        var oldIsBindingElement = isBindingElement,
            oldIsAssignmentTarget = isAssignmentTarget,
            oldFirstCoverInitializedNameError = firstCoverInitializedNameError,
            result;
        isBindingElement = true;
        isAssignmentTarget = true;
        firstCoverInitializedNameError = null;
        result = parser();
        if (firstCoverInitializedNameError !== null) {
            throwUnexpectedToken(firstCoverInitializedNameError);
        }
        isBindingElement = oldIsBindingElement;
        isAssignmentTarget = oldIsAssignmentTarget;
        firstCoverInitializedNameError = oldFirstCoverInitializedNameError;
        return result;
    }

    function inheritCoverGrammar(parser) {
        var oldIsBindingElement = isBindingElement,
            oldIsAssignmentTarget = isAssignmentTarget,
            oldFirstCoverInitializedNameError = firstCoverInitializedNameError,
            result;
        isBindingElement = true;
        isAssignmentTarget = true;
        firstCoverInitializedNameError = null;
        result = parser();
        isBindingElement = isBindingElement && oldIsBindingElement;
        isAssignmentTarget = isAssignmentTarget && oldIsAssignmentTarget;
        firstCoverInitializedNameError = oldFirstCoverInitializedNameError || firstCoverInitializedNameError;
        return result;
    }

    // ECMA-262 13.3.3 Destructuring Binding Patterns

    function parseArrayPattern(params, kind) {
        var node = new Node(), elements = [], rest, restNode;
        expect('[');

        while (!match(']')) {
            if (match(',')) {
                lex();
                elements.push(null);
            } else {
                if (match('...')) {
                    restNode = new Node();
                    lex();
                    params.push(lookahead);
                    rest = parseVariableIdentifier(kind);
                    elements.push(restNode.finishRestElement(rest));
                    break;
                } else {
                    elements.push(parsePatternWithDefault(params, kind));
                }
                if (!match(']')) {
                    expect(',');
                }
            }

        }

        expect(']');

        return node.finishArrayPattern(elements);
    }

    function parsePropertyPattern(params, kind) {
        var node = new Node(), key, keyToken, computed = match('['), init;
        if (lookahead.type === Token.Identifier) {
            keyToken = lookahead;
            key = parseVariableIdentifier();
            if (match('=')) {
                params.push(keyToken);
                lex();
                init = parseAssignmentExpression();

                return node.finishProperty(
                    'init', key, false,
                    new WrappingNode(keyToken).finishAssignmentPattern(key, init), false, true);
            } else if (!match(':')) {
                params.push(keyToken);
                return node.finishProperty('init', key, false, key, false, true);
            }
        } else {
            key = parseObjectPropertyKey();
        }
        expect(':');
        init = parsePatternWithDefault(params, kind);
        return node.finishProperty('init', key, computed, init, false, false);
    }

    function parseObjectPattern(params, kind) {
        var node = new Node(), properties = [];

        expect('{');

        while (!match('}')) {
            properties.push(parsePropertyPattern(params, kind));
            if (!match('}')) {
                expect(',');
            }
        }

        lex();

        return node.finishObjectPattern(properties);
    }

    function parsePattern(params, kind) {
        if (match('[')) {
            return parseArrayPattern(params, kind);
        } else if (match('{')) {
            return parseObjectPattern(params, kind);
        } else if (matchKeyword('let')) {
            if (kind === 'const' || kind === 'let') {
                tolerateUnexpectedToken(lookahead, Messages.UnexpectedToken);
            }
        }

        params.push(lookahead);
        return parseVariableIdentifier(kind);
    }

    function parsePatternWithDefault(params, kind) {
        var startToken = lookahead, pattern, previousAllowYield, right;
        pattern = parsePattern(params, kind);
        if (match('=')) {
            lex();
            previousAllowYield = state.allowYield;
            state.allowYield = true;
            right = isolateCoverGrammar(parseAssignmentExpression);
            state.allowYield = previousAllowYield;
            pattern = new WrappingNode(startToken).finishAssignmentPattern(pattern, right);
        }
        return pattern;
    }

    // ECMA-262 12.2.5 Array Initializer

    function parseArrayInitializer() {
        var elements = [], node = new Node(), restSpread;

        expect('[');

        while (!match(']')) {
            if (match(',')) {
                lex();
                elements.push(null);
            } else if (match('...')) {
                restSpread = new Node();
                lex();
                restSpread.finishSpreadElement(inheritCoverGrammar(parseAssignmentExpression));

                if (!match(']')) {
                    isAssignmentTarget = isBindingElement = false;
                    expect(',');
                }
                elements.push(restSpread);
            } else {
                elements.push(inheritCoverGrammar(parseAssignmentExpression));

                if (!match(']')) {
                    expect(',');
                }
            }
        }

        lex();

        return node.finishArrayExpression(elements);
    }

    // ECMA-262 12.2.6 Object Initializer

    function parsePropertyFunction(node, paramInfo, isGenerator) {
        var previousStrict, body;

        isAssignmentTarget = isBindingElement = false;

        previousStrict = strict;
        body = isolateCoverGrammar(parseFunctionSourceElements);

        if (strict && paramInfo.firstRestricted) {
            tolerateUnexpectedToken(paramInfo.firstRestricted, paramInfo.message);
        }
        if (strict && paramInfo.stricted) {
            tolerateUnexpectedToken(paramInfo.stricted, paramInfo.message);
        }

        strict = previousStrict;
        return node.finishFunctionExpression(null, paramInfo.params, paramInfo.defaults, body, isGenerator);
    }

    function parsePropertyMethodFunction() {
        var params, method, node = new Node(),
            previousAllowYield = state.allowYield;

        state.allowYield = false;
        params = parseParams();
        state.allowYield = previousAllowYield;

        state.allowYield = false;
        method = parsePropertyFunction(node, params, false);
        state.allowYield = previousAllowYield;

        return method;
    }

    function parseObjectPropertyKey() {
        var token, node = new Node(), expr;

        token = lex();

        // Note: This function is called only from parseObjectProperty(), where
        // EOF and Punctuator tokens are already filtered out.

        switch (token.type) {
        case Token.StringLiteral:
        case Token.NumericLiteral:
            if (strict && token.octal) {
                tolerateUnexpectedToken(token, Messages.StrictOctalLiteral);
            }
            return node.finishLiteral(token);
        case Token.Identifier:
        case Token.BooleanLiteral:
        case Token.NullLiteral:
        case Token.Keyword:
            return node.finishIdentifier(token.value);
        case Token.Punctuator:
            if (token.value === '[') {
                expr = isolateCoverGrammar(parseAssignmentExpression);
                expect(']');
                return expr;
            }
            break;
        }
        throwUnexpectedToken(token);
    }

    function lookaheadPropertyName() {
        switch (lookahead.type) {
        case Token.Identifier:
        case Token.StringLiteral:
        case Token.BooleanLiteral:
        case Token.NullLiteral:
        case Token.NumericLiteral:
        case Token.Keyword:
            return true;
        case Token.Punctuator:
            return lookahead.value === '[';
        }
        return false;
    }

    // This function is to try to parse a MethodDefinition as defined in 14.3. But in the case of object literals,
    // it might be called at a position where there is in fact a short hand identifier pattern or a data property.
    // This can only be determined after we consumed up to the left parentheses.
    //
    // In order to avoid back tracking, it returns `null` if the position is not a MethodDefinition and the caller
    // is responsible to visit other options.
    function tryParseMethodDefinition(token, key, computed, node) {
        var value, options, methodNode, params,
            previousAllowYield = state.allowYield;

        if (token.type === Token.Identifier) {
            // check for `get` and `set`;

            if (token.value === 'get' && lookaheadPropertyName()) {
                computed = match('[');
                key = parseObjectPropertyKey();
                methodNode = new Node();
                expect('(');
                expect(')');

                state.allowYield = false;
                value = parsePropertyFunction(methodNode, {
                    params: [],
                    defaults: [],
                    stricted: null,
                    firstRestricted: null,
                    message: null
                }, false);
                state.allowYield = previousAllowYield;

                return node.finishProperty('get', key, computed, value, false, false);
            } else if (token.value === 'set' && lookaheadPropertyName()) {
                computed = match('[');
                key = parseObjectPropertyKey();
                methodNode = new Node();
                expect('(');

                options = {
                    params: [],
                    defaultCount: 0,
                    defaults: [],
                    firstRestricted: null,
                    paramSet: {}
                };
                if (match(')')) {
                    tolerateUnexpectedToken(lookahead);
                } else {
                    state.allowYield = false;
                    parseParam(options);
                    state.allowYield = previousAllowYield;
                    if (options.defaultCount === 0) {
                        options.defaults = [];
                    }
                }
                expect(')');

                state.allowYield = false;
                value = parsePropertyFunction(methodNode, options, false);
                state.allowYield = previousAllowYield;

                return node.finishProperty('set', key, computed, value, false, false);
            }
        } else if (token.type === Token.Punctuator && token.value === '*' && lookaheadPropertyName()) {
            computed = match('[');
            key = parseObjectPropertyKey();
            methodNode = new Node();

            state.allowYield = true;
            params = parseParams();
            state.allowYield = previousAllowYield;

            state.allowYield = false;
            value = parsePropertyFunction(methodNode, params, true);
            state.allowYield = previousAllowYield;

            return node.finishProperty('init', key, computed, value, true, false);
        }

        if (key && match('(')) {
            value = parsePropertyMethodFunction();
            return node.finishProperty('init', key, computed, value, true, false);
        }

        // Not a MethodDefinition.
        return null;
    }

    function parseObjectProperty(hasProto) {
        var token = lookahead, node = new Node(), computed, key, maybeMethod, proto, value;

        computed = match('[');
        if (match('*')) {
            lex();
        } else {
            key = parseObjectPropertyKey();
        }
        maybeMethod = tryParseMethodDefinition(token, key, computed, node);
        if (maybeMethod) {
            return maybeMethod;
        }

        if (!key) {
            throwUnexpectedToken(lookahead);
        }

        // Check for duplicated __proto__
        if (!computed) {
            proto = (key.type === Syntax.Identifier && key.name === '__proto__') ||
                (key.type === Syntax.Literal && key.value === '__proto__');
            if (hasProto.value && proto) {
                tolerateError(Messages.DuplicateProtoProperty);
            }
            hasProto.value |= proto;
        }

        if (match(':')) {
            lex();
            value = inheritCoverGrammar(parseAssignmentExpression);
            return node.finishProperty('init', key, computed, value, false, false);
        }

        if (token.type === Token.Identifier) {
            if (match('=')) {
                firstCoverInitializedNameError = lookahead;
                lex();
                value = isolateCoverGrammar(parseAssignmentExpression);
                return node.finishProperty('init', key, computed,
                    new WrappingNode(token).finishAssignmentPattern(key, value), false, true);
            }
            return node.finishProperty('init', key, computed, key, false, true);
        }

        throwUnexpectedToken(lookahead);
    }

    function parseObjectInitializer() {
        var properties = [], hasProto = {value: false}, node = new Node();

        expect('{');

        while (!match('}')) {
            properties.push(parseObjectProperty(hasProto));

            if (!match('}')) {
                expectCommaSeparator();
            }
        }

        expect('}');

        return node.finishObjectExpression(properties);
    }

    function reinterpretExpressionAsPattern(expr) {
        var i;
        switch (expr.type) {
        case Syntax.Identifier:
        case Syntax.MemberExpression:
        case Syntax.RestElement:
        case Syntax.AssignmentPattern:
            break;
        case Syntax.SpreadElement:
            expr.type = Syntax.RestElement;
            reinterpretExpressionAsPattern(expr.argument);
            break;
        case Syntax.ArrayExpression:
            expr.type = Syntax.ArrayPattern;
            for (i = 0; i < expr.elements.length; i++) {
                if (expr.elements[i] !== null) {
                    reinterpretExpressionAsPattern(expr.elements[i]);
                }
            }
            break;
        case Syntax.ObjectExpression:
            expr.type = Syntax.ObjectPattern;
            for (i = 0; i < expr.properties.length; i++) {
                reinterpretExpressionAsPattern(expr.properties[i].value);
            }
            break;
        case Syntax.AssignmentExpression:
            expr.type = Syntax.AssignmentPattern;
            reinterpretExpressionAsPattern(expr.left);
            break;
        default:
            // Allow other node type for tolerant parsing.
            break;
        }
    }

    // ECMA-262 12.2.9 Template Literals

    function parseTemplateElement(option) {
        var node, token;

        if (lookahead.type !== Token.Template || (option.head && !lookahead.head)) {
            throwUnexpectedToken();
        }

        node = new Node();
        token = lex();

        return node.finishTemplateElement({ raw: token.value.raw, cooked: token.value.cooked }, token.tail);
    }

    function parseTemplateLiteral() {
        var quasi, quasis, expressions, node = new Node();

        quasi = parseTemplateElement({ head: true });
        quasis = [quasi];
        expressions = [];

        while (!quasi.tail) {
            expressions.push(parseExpression());
            quasi = parseTemplateElement({ head: false });
            quasis.push(quasi);
        }

        return node.finishTemplateLiteral(quasis, expressions);
    }

    // ECMA-262 12.2.10 The Grouping Operator

    function parseGroupExpression() {
        var expr, expressions, startToken, i, params = [];

        expect('(');

        if (match(')')) {
            lex();
            if (!match('=>')) {
                expect('=>');
            }
            return {
                type: PlaceHolders.ArrowParameterPlaceHolder,
                params: [],
                rawParams: []
            };
        }

        startToken = lookahead;
        if (match('...')) {
            expr = parseRestElement(params);
            expect(')');
            if (!match('=>')) {
                expect('=>');
            }
            return {
                type: PlaceHolders.ArrowParameterPlaceHolder,
                params: [expr]
            };
        }

        isBindingElement = true;
        expr = inheritCoverGrammar(parseAssignmentExpression);

        if (match(',')) {
            isAssignmentTarget = false;
            expressions = [expr];

            while (startIndex < length) {
                if (!match(',')) {
                    break;
                }
                lex();

                if (match('...')) {
                    if (!isBindingElement) {
                        throwUnexpectedToken(lookahead);
                    }
                    expressions.push(parseRestElement(params));
                    expect(')');
                    if (!match('=>')) {
                        expect('=>');
                    }
                    isBindingElement = false;
                    for (i = 0; i < expressions.length; i++) {
                        reinterpretExpressionAsPattern(expressions[i]);
                    }
                    return {
                        type: PlaceHolders.ArrowParameterPlaceHolder,
                        params: expressions
                    };
                }

                expressions.push(inheritCoverGrammar(parseAssignmentExpression));
            }

            expr = new WrappingNode(startToken).finishSequenceExpression(expressions);
        }


        expect(')');

        if (match('=>')) {
            if (expr.type === Syntax.Identifier && expr.name === 'yield') {
                return {
                    type: PlaceHolders.ArrowParameterPlaceHolder,
                    params: [expr]
                };
            }

            if (!isBindingElement) {
                throwUnexpectedToken(lookahead);
            }

            if (expr.type === Syntax.SequenceExpression) {
                for (i = 0; i < expr.expressions.length; i++) {
                    reinterpretExpressionAsPattern(expr.expressions[i]);
                }
            } else {
                reinterpretExpressionAsPattern(expr);
            }

            expr = {
                type: PlaceHolders.ArrowParameterPlaceHolder,
                params: expr.type === Syntax.SequenceExpression ? expr.expressions : [expr]
            };
        }
        isBindingElement = false;
        return expr;
    }


    // ECMA-262 12.2 Primary Expressions

    function parsePrimaryExpression() {
        var type, token, expr, node;

        if (match('(')) {
            isBindingElement = false;
            return inheritCoverGrammar(parseGroupExpression);
        }

        if (match('[')) {
            return inheritCoverGrammar(parseArrayInitializer);
        }

        if (match('{')) {
            return inheritCoverGrammar(parseObjectInitializer);
        }

        type = lookahead.type;
        node = new Node();

        if (type === Token.Identifier) {
            if (state.sourceType === 'module' && lookahead.value === 'await') {
                tolerateUnexpectedToken(lookahead);
            }
            expr = node.finishIdentifier(lex().value);
        } else if (type === Token.StringLiteral || type === Token.NumericLiteral) {
            isAssignmentTarget = isBindingElement = false;
            if (strict && lookahead.octal) {
                tolerateUnexpectedToken(lookahead, Messages.StrictOctalLiteral);
            }
            expr = node.finishLiteral(lex());
        } else if (type === Token.Keyword) {
            if (!strict && state.allowYield && matchKeyword('yield')) {
                return parseNonComputedProperty();
            }
            if (!strict && matchKeyword('let')) {
                return node.finishIdentifier(lex().value);
            }
            isAssignmentTarget = isBindingElement = false;
            if (matchKeyword('function')) {
                return parseFunctionExpression();
            }
            if (matchKeyword('this')) {
                lex();
                return node.finishThisExpression();
            }
            if (matchKeyword('class')) {
                return parseClassExpression();
            }
            throwUnexpectedToken(lex());
        } else if (type === Token.BooleanLiteral) {
            isAssignmentTarget = isBindingElement = false;
            token = lex();
            token.value = (token.value === 'true');
            expr = node.finishLiteral(token);
        } else if (type === Token.NullLiteral) {
            isAssignmentTarget = isBindingElement = false;
            token = lex();
            token.value = null;
            expr = node.finishLiteral(token);
        } else if (match('/') || match('/=')) {
            isAssignmentTarget = isBindingElement = false;
            index = startIndex;

            if (typeof extra.tokens !== 'undefined') {
                token = collectRegex();
            } else {
                token = scanRegExp();
            }
            lex();
            expr = node.finishLiteral(token);
        } else if (type === Token.Template) {
            expr = parseTemplateLiteral();
        } else {
            throwUnexpectedToken(lex());
        }

        return expr;
    }

    // ECMA-262 12.3 Left-Hand-Side Expressions

    function parseArguments() {
        var args = [], expr;

        expect('(');

        if (!match(')')) {
            while (startIndex < length) {
                if (match('...')) {
                    expr = new Node();
                    lex();
                    expr.finishSpreadElement(isolateCoverGrammar(parseAssignmentExpression));
                } else {
                    expr = isolateCoverGrammar(parseAssignmentExpression);
                }
                args.push(expr);
                if (match(')')) {
                    break;
                }
                expectCommaSeparator();
            }
        }

        expect(')');

        return args;
    }

    function parseNonComputedProperty() {
        var token, node = new Node();

        token = lex();

        if (!isIdentifierName(token)) {
            throwUnexpectedToken(token);
        }

        return node.finishIdentifier(token.value);
    }

    function parseNonComputedMember() {
        expect('.');

        return parseNonComputedProperty();
    }

    function parseComputedMember() {
        var expr;

        expect('[');

        expr = isolateCoverGrammar(parseExpression);

        expect(']');

        return expr;
    }

    // ECMA-262 12.3.3 The new Operator

    function parseNewExpression() {
        var callee, args, node = new Node();

        expectKeyword('new');

        if (match('.')) {
            lex();
            if (lookahead.type === Token.Identifier && lookahead.value === 'target') {
                if (state.inFunctionBody) {
                    lex();
                    return node.finishMetaProperty('new', 'target');
                }
            }
            throwUnexpectedToken(lookahead);
        }

        callee = isolateCoverGrammar(parseLeftHandSideExpression);
        args = match('(') ? parseArguments() : [];

        isAssignmentTarget = isBindingElement = false;

        return node.finishNewExpression(callee, args);
    }

    // ECMA-262 12.3.4 Function Calls

    function parseLeftHandSideExpressionAllowCall() {
        var quasi, expr, args, property, startToken, previousAllowIn = state.allowIn;

        startToken = lookahead;
        state.allowIn = true;

        if (matchKeyword('super') && state.inFunctionBody) {
            expr = new Node();
            lex();
            expr = expr.finishSuper();
            if (!match('(') && !match('.') && !match('[')) {
                throwUnexpectedToken(lookahead);
            }
        } else {
            expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);
        }

        for (;;) {
            if (match('.')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseNonComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
            } else if (match('(')) {
                isBindingElement = false;
                isAssignmentTarget = false;
                args = parseArguments();
                expr = new WrappingNode(startToken).finishCallExpression(expr, args);
            } else if (match('[')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
            } else if (lookahead.type === Token.Template && lookahead.head) {
                quasi = parseTemplateLiteral();
                expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);
            } else {
                break;
            }
        }
        state.allowIn = previousAllowIn;

        return expr;
    }

    // ECMA-262 12.3 Left-Hand-Side Expressions

    function parseLeftHandSideExpression() {
        var quasi, expr, property, startToken;
        assert(state.allowIn, 'callee of new expression always allow in keyword.');

        startToken = lookahead;

        if (matchKeyword('super') && state.inFunctionBody) {
            expr = new Node();
            lex();
            expr = expr.finishSuper();
            if (!match('[') && !match('.')) {
                throwUnexpectedToken(lookahead);
            }
        } else {
            expr = inheritCoverGrammar(matchKeyword('new') ? parseNewExpression : parsePrimaryExpression);
        }

        for (;;) {
            if (match('[')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('[', expr, property);
            } else if (match('.')) {
                isBindingElement = false;
                isAssignmentTarget = true;
                property = parseNonComputedMember();
                expr = new WrappingNode(startToken).finishMemberExpression('.', expr, property);
            } else if (lookahead.type === Token.Template && lookahead.head) {
                quasi = parseTemplateLiteral();
                expr = new WrappingNode(startToken).finishTaggedTemplateExpression(expr, quasi);
            } else {
                break;
            }
        }
        return expr;
    }

    // ECMA-262 12.4 Postfix Expressions

    function parsePostfixExpression() {
        var expr, token, startToken = lookahead;

        expr = inheritCoverGrammar(parseLeftHandSideExpressionAllowCall);

        if (!hasLineTerminator && lookahead.type === Token.Punctuator) {
            if (match('++') || match('--')) {
                // ECMA-262 11.3.1, 11.3.2
                if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                    tolerateError(Messages.StrictLHSPostfix);
                }

                if (!isAssignmentTarget) {
                    tolerateError(Messages.InvalidLHSInAssignment);
                }

                isAssignmentTarget = isBindingElement = false;

                token = lex();
                expr = new WrappingNode(startToken).finishPostfixExpression(token.value, expr);
            }
        }

        return expr;
    }

    // ECMA-262 12.5 Unary Operators

    function parseUnaryExpression() {
        var token, expr, startToken;

        if (lookahead.type !== Token.Punctuator && lookahead.type !== Token.Keyword) {
            expr = parsePostfixExpression();
        } else if (match('++') || match('--')) {
            startToken = lookahead;
            token = lex();
            expr = inheritCoverGrammar(parseUnaryExpression);
            // ECMA-262 11.4.4, 11.4.5
            if (strict && expr.type === Syntax.Identifier && isRestrictedWord(expr.name)) {
                tolerateError(Messages.StrictLHSPrefix);
            }

            if (!isAssignmentTarget) {
                tolerateError(Messages.InvalidLHSInAssignment);
            }
            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
            isAssignmentTarget = isBindingElement = false;
        } else if (match('+') || match('-') || match('~') || match('!')) {
            startToken = lookahead;
            token = lex();
            expr = inheritCoverGrammar(parseUnaryExpression);
            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
            isAssignmentTarget = isBindingElement = false;
        } else if (matchKeyword('delete') || matchKeyword('void') || matchKeyword('typeof')) {
            startToken = lookahead;
            token = lex();
            expr = inheritCoverGrammar(parseUnaryExpression);
            expr = new WrappingNode(startToken).finishUnaryExpression(token.value, expr);
            if (strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {
                tolerateError(Messages.StrictDelete);
            }
            isAssignmentTarget = isBindingElement = false;
        } else {
            expr = parsePostfixExpression();
        }

        return expr;
    }

    function binaryPrecedence(token, allowIn) {
        var prec = 0;

        if (token.type !== Token.Punctuator && token.type !== Token.Keyword) {
            return 0;
        }

        switch (token.value) {
        case '||':
            prec = 1;
            break;

        case '&&':
            prec = 2;
            break;

        case '|':
            prec = 3;
            break;

        case '^':
            prec = 4;
            break;

        case '&':
            prec = 5;
            break;

        case '==':
        case '!=':
        case '===':
        case '!==':
            prec = 6;
            break;

        case '<':
        case '>':
        case '<=':
        case '>=':
        case 'instanceof':
            prec = 7;
            break;

        case 'in':
            prec = allowIn ? 7 : 0;
            break;

        case '<<':
        case '>>':
        case '>>>':
            prec = 8;
            break;

        case '+':
        case '-':
            prec = 9;
            break;

        case '*':
        case '/':
        case '%':
            prec = 11;
            break;

        default:
            break;
        }

        return prec;
    }

    // ECMA-262 12.6 Multiplicative Operators
    // ECMA-262 12.7 Additive Operators
    // ECMA-262 12.8 Bitwise Shift Operators
    // ECMA-262 12.9 Relational Operators
    // ECMA-262 12.10 Equality Operators
    // ECMA-262 12.11 Binary Bitwise Operators
    // ECMA-262 12.12 Binary Logical Operators

    function parseBinaryExpression() {
        var marker, markers, expr, token, prec, stack, right, operator, left, i;

        marker = lookahead;
        left = inheritCoverGrammar(parseUnaryExpression);

        token = lookahead;
        prec = binaryPrecedence(token, state.allowIn);
        if (prec === 0) {
            return left;
        }
        isAssignmentTarget = isBindingElement = false;
        token.prec = prec;
        lex();

        markers = [marker, lookahead];
        right = isolateCoverGrammar(parseUnaryExpression);

        stack = [left, token, right];

        while ((prec = binaryPrecedence(lookahead, state.allowIn)) > 0) {

            // Reduce: make a binary expression from the three topmost entries.
            while ((stack.length > 2) && (prec <= stack[stack.length - 2].prec)) {
                right = stack.pop();
                operator = stack.pop().value;
                left = stack.pop();
                markers.pop();
                expr = new WrappingNode(markers[markers.length - 1]).finishBinaryExpression(operator, left, right);
                stack.push(expr);
            }

            // Shift.
            token = lex();
            token.prec = prec;
            stack.push(token);
            markers.push(lookahead);
            expr = isolateCoverGrammar(parseUnaryExpression);
            stack.push(expr);
        }

        // Final reduce to clean-up the stack.
        i = stack.length - 1;
        expr = stack[i];
        markers.pop();
        while (i > 1) {
            expr = new WrappingNode(markers.pop()).finishBinaryExpression(stack[i - 1].value, stack[i - 2], expr);
            i -= 2;
        }

        return expr;
    }


    // ECMA-262 12.13 Conditional Operator

    function parseConditionalExpression() {
        var expr, previousAllowIn, consequent, alternate, startToken;

        startToken = lookahead;

        expr = inheritCoverGrammar(parseBinaryExpression);
        if (match('?')) {
            lex();
            previousAllowIn = state.allowIn;
            state.allowIn = true;
            consequent = isolateCoverGrammar(parseAssignmentExpression);
            state.allowIn = previousAllowIn;
            expect(':');
            alternate = isolateCoverGrammar(parseAssignmentExpression);

            expr = new WrappingNode(startToken).finishConditionalExpression(expr, consequent, alternate);
            isAssignmentTarget = isBindingElement = false;
        }

        return expr;
    }

    // ECMA-262 14.2 Arrow Function Definitions

    function parseConciseBody() {
        if (match('{')) {
            return parseFunctionSourceElements();
        }
        return isolateCoverGrammar(parseAssignmentExpression);
    }

    function checkPatternParam(options, param) {
        var i;
        switch (param.type) {
        case Syntax.Identifier:
            validateParam(options, param, param.name);
            break;
        case Syntax.RestElement:
            checkPatternParam(options, param.argument);
            break;
        case Syntax.AssignmentPattern:
            checkPatternParam(options, param.left);
            break;
        case Syntax.ArrayPattern:
            for (i = 0; i < param.elements.length; i++) {
                if (param.elements[i] !== null) {
                    checkPatternParam(options, param.elements[i]);
                }
            }
            break;
        case Syntax.YieldExpression:
            break;
        default:
            assert(param.type === Syntax.ObjectPattern, 'Invalid type');
            for (i = 0; i < param.properties.length; i++) {
                checkPatternParam(options, param.properties[i].value);
            }
            break;
        }
    }
    function reinterpretAsCoverFormalsList(expr) {
        var i, len, param, params, defaults, defaultCount, options, token;

        defaults = [];
        defaultCount = 0;
        params = [expr];

        switch (expr.type) {
        case Syntax.Identifier:
            break;
        case PlaceHolders.ArrowParameterPlaceHolder:
            params = expr.params;
            break;
        default:
            return null;
        }

        options = {
            paramSet: {}
        };

        for (i = 0, len = params.length; i < len; i += 1) {
            param = params[i];
            switch (param.type) {
            case Syntax.AssignmentPattern:
                params[i] = param.left;
                if (param.right.type === Syntax.YieldExpression) {
                    if (param.right.argument) {
                        throwUnexpectedToken(lookahead);
                    }
                    param.right.type = Syntax.Identifier;
                    param.right.name = 'yield';
                    delete param.right.argument;
                    delete param.right.delegate;
                }
                defaults.push(param.right);
                ++defaultCount;
                checkPatternParam(options, param.left);
                break;
            default:
                checkPatternParam(options, param);
                params[i] = param;
                defaults.push(null);
                break;
            }
        }

        if (strict || !state.allowYield) {
            for (i = 0, len = params.length; i < len; i += 1) {
                param = params[i];
                if (param.type === Syntax.YieldExpression) {
                    throwUnexpectedToken(lookahead);
                }
            }
        }

        if (options.message === Messages.StrictParamDupe) {
            token = strict ? options.stricted : options.firstRestricted;
            throwUnexpectedToken(token, options.message);
        }

        if (defaultCount === 0) {
            defaults = [];
        }

        return {
            params: params,
            defaults: defaults,
            stricted: options.stricted,
            firstRestricted: options.firstRestricted,
            message: options.message
        };
    }

    function parseArrowFunctionExpression(options, node) {
        var previousStrict, previousAllowYield, body;

        if (hasLineTerminator) {
            tolerateUnexpectedToken(lookahead);
        }
        expect('=>');

        previousStrict = strict;
        previousAllowYield = state.allowYield;
        state.allowYield = true;

        body = parseConciseBody();

        if (strict && options.firstRestricted) {
            throwUnexpectedToken(options.firstRestricted, options.message);
        }
        if (strict && options.stricted) {
            tolerateUnexpectedToken(options.stricted, options.message);
        }

        strict = previousStrict;
        state.allowYield = previousAllowYield;

        return node.finishArrowFunctionExpression(options.params, options.defaults, body, body.type !== Syntax.BlockStatement);
    }

    // ECMA-262 14.4 Yield expression

    function parseYieldExpression() {
        var argument, expr, delegate, previousAllowYield;

        argument = null;
        expr = new Node();
        delegate = false;

        expectKeyword('yield');

        if (!hasLineTerminator) {
            previousAllowYield = state.allowYield;
            state.allowYield = false;
            delegate = match('*');
            if (delegate) {
                lex();
                argument = parseAssignmentExpression();
            } else {
                if (!match(';') && !match('}') && !match(')') && lookahead.type !== Token.EOF) {
                    argument = parseAssignmentExpression();
                }
            }
            state.allowYield = previousAllowYield;
        }

        return expr.finishYieldExpression(argument, delegate);
    }

    // ECMA-262 12.14 Assignment Operators

    function parseAssignmentExpression() {
        var token, expr, right, list, startToken;

        startToken = lookahead;
        token = lookahead;

        if (!state.allowYield && matchKeyword('yield')) {
            return parseYieldExpression();
        }

        expr = parseConditionalExpression();

        if (expr.type === PlaceHolders.ArrowParameterPlaceHolder || match('=>')) {
            isAssignmentTarget = isBindingElement = false;
            list = reinterpretAsCoverFormalsList(expr);

            if (list) {
                firstCoverInitializedNameError = null;
                return parseArrowFunctionExpression(list, new WrappingNode(startToken));
            }

            return expr;
        }

        if (matchAssign()) {
            if (!isAssignmentTarget) {
                tolerateError(Messages.InvalidLHSInAssignment);
            }

            // ECMA-262 12.1.1
            if (strict && expr.type === Syntax.Identifier) {
                if (isRestrictedWord(expr.name)) {
                    tolerateUnexpectedToken(token, Messages.StrictLHSAssignment);
                }
                if (isStrictModeReservedWord(expr.name)) {
                    tolerateUnexpectedToken(token, Messages.StrictReservedWord);
                }
            }

            if (!match('=')) {
                isAssignmentTarget = isBindingElement = false;
            } else {
                reinterpretExpressionAsPattern(expr);
            }

            token = lex();
            right = isolateCoverGrammar(parseAssignmentExpression);
            expr = new WrappingNode(startToken).finishAssignmentExpression(token.value, expr, right);
            firstCoverInitializedNameError = null;
        }

        return expr;
    }

    // ECMA-262 12.15 Comma Operator

    function parseExpression() {
        var expr, startToken = lookahead, expressions;

        expr = isolateCoverGrammar(parseAssignmentExpression);

        if (match(',')) {
            expressions = [expr];

            while (startIndex < length) {
                if (!match(',')) {
                    break;
                }
                lex();
                expressions.push(isolateCoverGrammar(parseAssignmentExpression));
            }

            expr = new WrappingNode(startToken).finishSequenceExpression(expressions);
        }

        return expr;
    }

    // ECMA-262 13.2 Block

    function parseStatementListItem() {
        if (lookahead.type === Token.Keyword) {
            switch (lookahead.value) {
            case 'export':
                if (state.sourceType !== 'module') {
                    tolerateUnexpectedToken(lookahead, Messages.IllegalExportDeclaration);
                }
                return parseExportDeclaration();
            case 'import':
                if (state.sourceType !== 'module') {
                    tolerateUnexpectedToken(lookahead, Messages.IllegalImportDeclaration);
                }
                return parseImportDeclaration();
            case 'const':
                return parseLexicalDeclaration({inFor: false});
            case 'function':
                return parseFunctionDeclaration(new Node());
            case 'class':
                return parseClassDeclaration();
            }
        }

        if (matchKeyword('let') && isLexicalDeclaration()) {
            return parseLexicalDeclaration({inFor: false});
        }

        return parseStatement();
    }

    function parseStatementList() {
        var list = [];
        while (startIndex < length) {
            if (match('}')) {
                break;
            }
            list.push(parseStatementListItem());
        }

        return list;
    }

    function parseBlock() {
        var block, node = new Node();

        expect('{');

        block = parseStatementList();

        expect('}');

        return node.finishBlockStatement(block);
    }

    // ECMA-262 13.3.2 Variable Statement

    function parseVariableIdentifier(kind) {
        var token, node = new Node();

        token = lex();

        if (token.type === Token.Keyword && token.value === 'yield') {
            if (strict) {
                tolerateUnexpectedToken(token, Messages.StrictReservedWord);
            } if (!state.allowYield) {
                throwUnexpectedToken(token);
            }
        } else if (token.type !== Token.Identifier) {
            if (strict && token.type === Token.Keyword && isStrictModeReservedWord(token.value)) {
                tolerateUnexpectedToken(token, Messages.StrictReservedWord);
            } else {
                if (strict || token.value !== 'let' || kind !== 'var') {
                    throwUnexpectedToken(token);
                }
            }
        } else if (state.sourceType === 'module' && token.type === Token.Identifier && token.value === 'await') {
            tolerateUnexpectedToken(token);
        }

        return node.finishIdentifier(token.value);
    }

    function parseVariableDeclaration(options) {
        var init = null, id, node = new Node(), params = [];

        id = parsePattern(params, 'var');

        // ECMA-262 12.2.1
        if (strict && isRestrictedWord(id.name)) {
            tolerateError(Messages.StrictVarName);
        }

        if (match('=')) {
            lex();
            init = isolateCoverGrammar(parseAssignmentExpression);
        } else if (id.type !== Syntax.Identifier && !options.inFor) {
            expect('=');
        }

        return node.finishVariableDeclarator(id, init);
    }

    function parseVariableDeclarationList(options) {
        var opt, list;

        opt = { inFor: options.inFor };
        list = [parseVariableDeclaration(opt)];

        while (match(',')) {
            lex();
            list.push(parseVariableDeclaration(opt));
        }

        return list;
    }

    function parseVariableStatement(node) {
        var declarations;

        expectKeyword('var');

        declarations = parseVariableDeclarationList({ inFor: false });

        consumeSemicolon();

        return node.finishVariableDeclaration(declarations);
    }

    // ECMA-262 13.3.1 Let and Const Declarations

    function parseLexicalBinding(kind, options) {
        var init = null, id, node = new Node(), params = [];

        id = parsePattern(params, kind);

        // ECMA-262 12.2.1
        if (strict && id.type === Syntax.Identifier && isRestrictedWord(id.name)) {
            tolerateError(Messages.StrictVarName);
        }

        if (kind === 'const') {
            if (!matchKeyword('in') && !matchContextualKeyword('of')) {
                expect('=');
                init = isolateCoverGrammar(parseAssignmentExpression);
            }
        } else if ((!options.inFor && id.type !== Syntax.Identifier) || match('=')) {
            expect('=');
            init = isolateCoverGrammar(parseAssignmentExpression);
        }

        return node.finishVariableDeclarator(id, init);
    }

    function parseBindingList(kind, options) {
        var list = [parseLexicalBinding(kind, options)];

        while (match(',')) {
            lex();
            list.push(parseLexicalBinding(kind, options));
        }

        return list;
    }


    function tokenizerState() {
        return {
            index: index,
            lineNumber: lineNumber,
            lineStart: lineStart,
            hasLineTerminator: hasLineTerminator,
            lastIndex: lastIndex,
            lastLineNumber: lastLineNumber,
            lastLineStart: lastLineStart,
            startIndex: startIndex,
            startLineNumber: startLineNumber,
            startLineStart: startLineStart,
            lookahead: lookahead,
            tokenCount: extra.tokens ? extra.tokens.length : 0
        };
    }

    function resetTokenizerState(ts) {
        index = ts.index;
        lineNumber = ts.lineNumber;
        lineStart = ts.lineStart;
        hasLineTerminator = ts.hasLineTerminator;
        lastIndex = ts.lastIndex;
        lastLineNumber = ts.lastLineNumber;
        lastLineStart = ts.lastLineStart;
        startIndex = ts.startIndex;
        startLineNumber = ts.startLineNumber;
        startLineStart = ts.startLineStart;
        lookahead = ts.lookahead;
        if (extra.tokens) {
            extra.tokens.splice(ts.tokenCount, extra.tokens.length);
        }
    }

    function isLexicalDeclaration() {
        var lexical, ts;

        ts = tokenizerState();

        lex();
        lexical = (lookahead.type === Token.Identifier) || match('[') || match('{') ||
            matchKeyword('let') || matchKeyword('yield');

        resetTokenizerState(ts);

        return lexical;
    }

    function parseLexicalDeclaration(options) {
        var kind, declarations, node = new Node();

        kind = lex().value;
        assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');

        declarations = parseBindingList(kind, options);

        consumeSemicolon();

        return node.finishLexicalDeclaration(declarations, kind);
    }

    function parseRestElement(params) {
        var param, node = new Node();

        lex();

        if (match('{')) {
            throwError(Messages.ObjectPatternAsRestParameter);
        }

        params.push(lookahead);

        param = parseVariableIdentifier();

        if (match('=')) {
            throwError(Messages.DefaultRestParameter);
        }

        if (!match(')')) {
            throwError(Messages.ParameterAfterRestParameter);
        }

        return node.finishRestElement(param);
    }

    // ECMA-262 13.4 Empty Statement

    function parseEmptyStatement(node) {
        expect(';');
        return node.finishEmptyStatement();
    }

    // ECMA-262 12.4 Expression Statement

    function parseExpressionStatement(node) {
        var expr = parseExpression();
        consumeSemicolon();
        return node.finishExpressionStatement(expr);
    }

    // ECMA-262 13.6 If statement

    function parseIfStatement(node) {
        var test, consequent, alternate;

        expectKeyword('if');

        expect('(');

        test = parseExpression();

        expect(')');

        consequent = parseStatement();

        if (matchKeyword('else')) {
            lex();
            alternate = parseStatement();
        } else {
            alternate = null;
        }

        return node.finishIfStatement(test, consequent, alternate);
    }

    // ECMA-262 13.7 Iteration Statements

    function parseDoWhileStatement(node) {
        var body, test, oldInIteration;

        expectKeyword('do');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        if (match(';')) {
            lex();
        }

        return node.finishDoWhileStatement(body, test);
    }

    function parseWhileStatement(node) {
        var test, body, oldInIteration;

        expectKeyword('while');

        expect('(');

        test = parseExpression();

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = parseStatement();

        state.inIteration = oldInIteration;

        return node.finishWhileStatement(test, body);
    }

    function parseForStatement(node) {
        var init, forIn, initSeq, initStartToken, test, update, left, right, kind, declarations,
            body, oldInIteration, previousAllowIn = state.allowIn;

        init = test = update = null;
        forIn = true;

        expectKeyword('for');

        expect('(');

        if (match(';')) {
            lex();
        } else {
            if (matchKeyword('var')) {
                init = new Node();
                lex();

                state.allowIn = false;
                declarations = parseVariableDeclarationList({ inFor: true });
                state.allowIn = previousAllowIn;

                if (declarations.length === 1 && matchKeyword('in')) {
                    init = init.finishVariableDeclaration(declarations);
                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {
                    init = init.finishVariableDeclaration(declarations);
                    lex();
                    left = init;
                    right = parseAssignmentExpression();
                    init = null;
                    forIn = false;
                } else {
                    init = init.finishVariableDeclaration(declarations);
                    expect(';');
                }
            } else if (matchKeyword('const') || matchKeyword('let')) {
                init = new Node();
                kind = lex().value;

                if (!strict && lookahead.value === 'in') {
                    init = init.finishIdentifier(kind);
                    lex();
                    left = init;
                    right = parseExpression();
                    init = null;
                } else {
                    state.allowIn = false;
                    declarations = parseBindingList(kind, {inFor: true});
                    state.allowIn = previousAllowIn;

                    if (declarations.length === 1 && declarations[0].init === null && matchKeyword('in')) {
                        init = init.finishLexicalDeclaration(declarations, kind);
                        lex();
                        left = init;
                        right = parseExpression();
                        init = null;
                    } else if (declarations.length === 1 && declarations[0].init === null && matchContextualKeyword('of')) {
                        init = init.finishLexicalDeclaration(declarations, kind);
                        lex();
                        left = init;
                        right = parseAssignmentExpression();
                        init = null;
                        forIn = false;
                    } else {
                        consumeSemicolon();
                        init = init.finishLexicalDeclaration(declarations, kind);
                    }
                }
            } else {
                initStartToken = lookahead;
                state.allowIn = false;
                init = inheritCoverGrammar(parseAssignmentExpression);
                state.allowIn = previousAllowIn;

                if (matchKeyword('in')) {
                    if (!isAssignmentTarget) {
                        tolerateError(Messages.InvalidLHSInForIn);
                    }

                    lex();
                    reinterpretExpressionAsPattern(init);
                    left = init;
                    right = parseExpression();
                    init = null;
                } else if (matchContextualKeyword('of')) {
                    if (!isAssignmentTarget) {
                        tolerateError(Messages.InvalidLHSInForLoop);
                    }

                    lex();
                    reinterpretExpressionAsPattern(init);
                    left = init;
                    right = parseAssignmentExpression();
                    init = null;
                    forIn = false;
                } else {
                    if (match(',')) {
                        initSeq = [init];
                        while (match(',')) {
                            lex();
                            initSeq.push(isolateCoverGrammar(parseAssignmentExpression));
                        }
                        init = new WrappingNode(initStartToken).finishSequenceExpression(initSeq);
                    }
                    expect(';');
                }
            }
        }

        if (typeof left === 'undefined') {

            if (!match(';')) {
                test = parseExpression();
            }
            expect(';');

            if (!match(')')) {
                update = parseExpression();
            }
        }

        expect(')');

        oldInIteration = state.inIteration;
        state.inIteration = true;

        body = isolateCoverGrammar(parseStatement);

        state.inIteration = oldInIteration;

        return (typeof left === 'undefined') ?
                node.finishForStatement(init, test, update, body) :
                forIn ? node.finishForInStatement(left, right, body) :
                    node.finishForOfStatement(left, right, body);
    }

    // ECMA-262 13.8 The continue statement

    function parseContinueStatement(node) {
        var label = null, key;

        expectKeyword('continue');

        // Optimize the most common form: 'continue;'.
        if (source.charCodeAt(startIndex) === 0x3B) {
            lex();

            if (!state.inIteration) {
                throwError(Messages.IllegalContinue);
            }

            return node.finishContinueStatement(null);
        }

        if (hasLineTerminator) {
            if (!state.inIteration) {
                throwError(Messages.IllegalContinue);
            }

            return node.finishContinueStatement(null);
        }

        if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError(Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !state.inIteration) {
            throwError(Messages.IllegalContinue);
        }

        return node.finishContinueStatement(label);
    }

    // ECMA-262 13.9 The break statement

    function parseBreakStatement(node) {
        var label = null, key;

        expectKeyword('break');

        // Catch the very common case first: immediately a semicolon (U+003B).
        if (source.charCodeAt(lastIndex) === 0x3B) {
            lex();

            if (!(state.inIteration || state.inSwitch)) {
                throwError(Messages.IllegalBreak);
            }

            return node.finishBreakStatement(null);
        }

        if (hasLineTerminator) {
            if (!(state.inIteration || state.inSwitch)) {
                throwError(Messages.IllegalBreak);
            }
        } else if (lookahead.type === Token.Identifier) {
            label = parseVariableIdentifier();

            key = '$' + label.name;
            if (!Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError(Messages.UnknownLabel, label.name);
            }
        }

        consumeSemicolon();

        if (label === null && !(state.inIteration || state.inSwitch)) {
            throwError(Messages.IllegalBreak);
        }

        return node.finishBreakStatement(label);
    }

    // ECMA-262 13.10 The return statement

    function parseReturnStatement(node) {
        var argument = null;

        expectKeyword('return');

        if (!state.inFunctionBody) {
            tolerateError(Messages.IllegalReturn);
        }

        // 'return' followed by a space and an identifier is very common.
        if (source.charCodeAt(lastIndex) === 0x20) {
            if (isIdentifierStart(source.charCodeAt(lastIndex + 1))) {
                argument = parseExpression();
                consumeSemicolon();
                return node.finishReturnStatement(argument);
            }
        }

        if (hasLineTerminator) {
            // HACK
            return node.finishReturnStatement(null);
        }

        if (!match(';')) {
            if (!match('}') && lookahead.type !== Token.EOF) {
                argument = parseExpression();
            }
        }

        consumeSemicolon();

        return node.finishReturnStatement(argument);
    }

    // ECMA-262 13.11 The with statement

    function parseWithStatement(node) {
        var object, body;

        if (strict) {
            tolerateError(Messages.StrictModeWith);
        }

        expectKeyword('with');

        expect('(');

        object = parseExpression();

        expect(')');

        body = parseStatement();

        return node.finishWithStatement(object, body);
    }

    // ECMA-262 13.12 The switch statement

    function parseSwitchCase() {
        var test, consequent = [], statement, node = new Node();

        if (matchKeyword('default')) {
            lex();
            test = null;
        } else {
            expectKeyword('case');
            test = parseExpression();
        }
        expect(':');

        while (startIndex < length) {
            if (match('}') || matchKeyword('default') || matchKeyword('case')) {
                break;
            }
            statement = parseStatementListItem();
            consequent.push(statement);
        }

        return node.finishSwitchCase(test, consequent);
    }

    function parseSwitchStatement(node) {
        var discriminant, cases, clause, oldInSwitch, defaultFound;

        expectKeyword('switch');

        expect('(');

        discriminant = parseExpression();

        expect(')');

        expect('{');

        cases = [];

        if (match('}')) {
            lex();
            return node.finishSwitchStatement(discriminant, cases);
        }

        oldInSwitch = state.inSwitch;
        state.inSwitch = true;
        defaultFound = false;

        while (startIndex < length) {
            if (match('}')) {
                break;
            }
            clause = parseSwitchCase();
            if (clause.test === null) {
                if (defaultFound) {
                    throwError(Messages.MultipleDefaultsInSwitch);
                }
                defaultFound = true;
            }
            cases.push(clause);
        }

        state.inSwitch = oldInSwitch;

        expect('}');

        return node.finishSwitchStatement(discriminant, cases);
    }

    // ECMA-262 13.14 The throw statement

    function parseThrowStatement(node) {
        var argument;

        expectKeyword('throw');

        if (hasLineTerminator) {
            throwError(Messages.NewlineAfterThrow);
        }

        argument = parseExpression();

        consumeSemicolon();

        return node.finishThrowStatement(argument);
    }

    // ECMA-262 13.15 The try statement

    function parseCatchClause() {
        var param, params = [], paramMap = {}, key, i, body, node = new Node();

        expectKeyword('catch');

        expect('(');
        if (match(')')) {
            throwUnexpectedToken(lookahead);
        }

        param = parsePattern(params);
        for (i = 0; i < params.length; i++) {
            key = '$' + params[i].value;
            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {
                tolerateError(Messages.DuplicateBinding, params[i].value);
            }
            paramMap[key] = true;
        }

        // ECMA-262 12.14.1
        if (strict && isRestrictedWord(param.name)) {
            tolerateError(Messages.StrictCatchVariable);
        }

        expect(')');
        body = parseBlock();
        return node.finishCatchClause(param, body);
    }

    function parseTryStatement(node) {
        var block, handler = null, finalizer = null;

        expectKeyword('try');

        block = parseBlock();

        if (matchKeyword('catch')) {
            handler = parseCatchClause();
        }

        if (matchKeyword('finally')) {
            lex();
            finalizer = parseBlock();
        }

        if (!handler && !finalizer) {
            throwError(Messages.NoCatchOrFinally);
        }

        return node.finishTryStatement(block, handler, finalizer);
    }

    // ECMA-262 13.16 The debugger statement

    function parseDebuggerStatement(node) {
        expectKeyword('debugger');

        consumeSemicolon();

        return node.finishDebuggerStatement();
    }

    // 13 Statements

    function parseStatement() {
        var type = lookahead.type,
            expr,
            labeledBody,
            key,
            node;

        if (type === Token.EOF) {
            throwUnexpectedToken(lookahead);
        }

        if (type === Token.Punctuator && lookahead.value === '{') {
            return parseBlock();
        }
        isAssignmentTarget = isBindingElement = true;
        node = new Node();

        if (type === Token.Punctuator) {
            switch (lookahead.value) {
            case ';':
                return parseEmptyStatement(node);
            case '(':
                return parseExpressionStatement(node);
            default:
                break;
            }
        } else if (type === Token.Keyword) {
            switch (lookahead.value) {
            case 'break':
                return parseBreakStatement(node);
            case 'continue':
                return parseContinueStatement(node);
            case 'debugger':
                return parseDebuggerStatement(node);
            case 'do':
                return parseDoWhileStatement(node);
            case 'for':
                return parseForStatement(node);
            case 'function':
                return parseFunctionDeclaration(node);
            case 'if':
                return parseIfStatement(node);
            case 'return':
                return parseReturnStatement(node);
            case 'switch':
                return parseSwitchStatement(node);
            case 'throw':
                return parseThrowStatement(node);
            case 'try':
                return parseTryStatement(node);
            case 'var':
                return parseVariableStatement(node);
            case 'while':
                return parseWhileStatement(node);
            case 'with':
                return parseWithStatement(node);
            default:
                break;
            }
        }

        expr = parseExpression();

        // ECMA-262 12.12 Labelled Statements
        if ((expr.type === Syntax.Identifier) && match(':')) {
            lex();

            key = '$' + expr.name;
            if (Object.prototype.hasOwnProperty.call(state.labelSet, key)) {
                throwError(Messages.Redeclaration, 'Label', expr.name);
            }

            state.labelSet[key] = true;
            labeledBody = parseStatement();
            delete state.labelSet[key];
            return node.finishLabeledStatement(expr, labeledBody);
        }

        consumeSemicolon();

        return node.finishExpressionStatement(expr);
    }

    // ECMA-262 14.1 Function Definition

    function parseFunctionSourceElements() {
        var statement, body = [], token, directive, firstRestricted,
            oldLabelSet, oldInIteration, oldInSwitch, oldInFunctionBody,
            node = new Node();

        expect('{');

        while (startIndex < length) {
            if (lookahead.type !== Token.StringLiteral) {
                break;
            }
            token = lookahead;

            statement = parseStatementListItem();
            body.push(statement);
            if (statement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.start + 1, token.end - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        oldLabelSet = state.labelSet;
        oldInIteration = state.inIteration;
        oldInSwitch = state.inSwitch;
        oldInFunctionBody = state.inFunctionBody;

        state.labelSet = {};
        state.inIteration = false;
        state.inSwitch = false;
        state.inFunctionBody = true;

        while (startIndex < length) {
            if (match('}')) {
                break;
            }
            body.push(parseStatementListItem());
        }

        expect('}');

        state.labelSet = oldLabelSet;
        state.inIteration = oldInIteration;
        state.inSwitch = oldInSwitch;
        state.inFunctionBody = oldInFunctionBody;

        return node.finishBlockStatement(body);
    }

    function validateParam(options, param, name) {
        var key = '$' + name;
        if (strict) {
            if (isRestrictedWord(name)) {
                options.stricted = param;
                options.message = Messages.StrictParamName;
            }
            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                options.stricted = param;
                options.message = Messages.StrictParamDupe;
            }
        } else if (!options.firstRestricted) {
            if (isRestrictedWord(name)) {
                options.firstRestricted = param;
                options.message = Messages.StrictParamName;
            } else if (isStrictModeReservedWord(name)) {
                options.firstRestricted = param;
                options.message = Messages.StrictReservedWord;
            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {
                options.stricted = param;
                options.message = Messages.StrictParamDupe;
            }
        }
        options.paramSet[key] = true;
    }

    function parseParam(options) {
        var token, param, params = [], i, def;

        token = lookahead;
        if (token.value === '...') {
            param = parseRestElement(params);
            validateParam(options, param.argument, param.argument.name);
            options.params.push(param);
            options.defaults.push(null);
            return false;
        }

        param = parsePatternWithDefault(params);
        for (i = 0; i < params.length; i++) {
            validateParam(options, params[i], params[i].value);
        }

        if (param.type === Syntax.AssignmentPattern) {
            def = param.right;
            param = param.left;
            ++options.defaultCount;
        }

        options.params.push(param);
        options.defaults.push(def);

        return !match(')');
    }

    function parseParams(firstRestricted) {
        var options;

        options = {
            params: [],
            defaultCount: 0,
            defaults: [],
            firstRestricted: firstRestricted
        };

        expect('(');

        if (!match(')')) {
            options.paramSet = {};
            while (startIndex < length) {
                if (!parseParam(options)) {
                    break;
                }
                expect(',');
            }
        }

        expect(')');

        if (options.defaultCount === 0) {
            options.defaults = [];
        }

        return {
            params: options.params,
            defaults: options.defaults,
            stricted: options.stricted,
            firstRestricted: options.firstRestricted,
            message: options.message
        };
    }

    function parseFunctionDeclaration(node, identifierIsOptional) {
        var id = null, params = [], defaults = [], body, token, stricted, tmp, firstRestricted, message, previousStrict,
            isGenerator, previousAllowYield;

        previousAllowYield = state.allowYield;

        expectKeyword('function');

        isGenerator = match('*');
        if (isGenerator) {
            lex();
        }

        if (!identifierIsOptional || !match('(')) {
            token = lookahead;
            id = parseVariableIdentifier();
            if (strict) {
                if (isRestrictedWord(token.value)) {
                    tolerateUnexpectedToken(token, Messages.StrictFunctionName);
                }
            } else {
                if (isRestrictedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictFunctionName;
                } else if (isStrictModeReservedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictReservedWord;
                }
            }
        }

        state.allowYield = !isGenerator;
        tmp = parseParams(firstRestricted);
        params = tmp.params;
        defaults = tmp.defaults;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }


        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) {
            throwUnexpectedToken(firstRestricted, message);
        }
        if (strict && stricted) {
            tolerateUnexpectedToken(stricted, message);
        }

        strict = previousStrict;
        state.allowYield = previousAllowYield;

        return node.finishFunctionDeclaration(id, params, defaults, body, isGenerator);
    }

    function parseFunctionExpression() {
        var token, id = null, stricted, firstRestricted, message, tmp,
            params = [], defaults = [], body, previousStrict, node = new Node(),
            isGenerator, previousAllowYield;

        previousAllowYield = state.allowYield;

        expectKeyword('function');

        isGenerator = match('*');
        if (isGenerator) {
            lex();
        }

        state.allowYield = !isGenerator;
        if (!match('(')) {
            token = lookahead;
            id = (!strict && !isGenerator && matchKeyword('yield')) ? parseNonComputedProperty() : parseVariableIdentifier();
            if (strict) {
                if (isRestrictedWord(token.value)) {
                    tolerateUnexpectedToken(token, Messages.StrictFunctionName);
                }
            } else {
                if (isRestrictedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictFunctionName;
                } else if (isStrictModeReservedWord(token.value)) {
                    firstRestricted = token;
                    message = Messages.StrictReservedWord;
                }
            }
        }

        tmp = parseParams(firstRestricted);
        params = tmp.params;
        defaults = tmp.defaults;
        stricted = tmp.stricted;
        firstRestricted = tmp.firstRestricted;
        if (tmp.message) {
            message = tmp.message;
        }

        previousStrict = strict;
        body = parseFunctionSourceElements();
        if (strict && firstRestricted) {
            throwUnexpectedToken(firstRestricted, message);
        }
        if (strict && stricted) {
            tolerateUnexpectedToken(stricted, message);
        }
        strict = previousStrict;
        state.allowYield = previousAllowYield;

        return node.finishFunctionExpression(id, params, defaults, body, isGenerator);
    }

    // ECMA-262 14.5 Class Definitions

    function parseClassBody() {
        var classBody, token, isStatic, hasConstructor = false, body, method, computed, key;

        classBody = new Node();

        expect('{');
        body = [];
        while (!match('}')) {
            if (match(';')) {
                lex();
            } else {
                method = new Node();
                token = lookahead;
                isStatic = false;
                computed = match('[');
                if (match('*')) {
                    lex();
                } else {
                    key = parseObjectPropertyKey();
                    if (key.name === 'static' && (lookaheadPropertyName() || match('*'))) {
                        token = lookahead;
                        isStatic = true;
                        computed = match('[');
                        if (match('*')) {
                            lex();
                        } else {
                            key = parseObjectPropertyKey();
                        }
                    }
                }
                method = tryParseMethodDefinition(token, key, computed, method);
                if (method) {
                    method['static'] = isStatic; // jscs:ignore requireDotNotation
                    if (method.kind === 'init') {
                        method.kind = 'method';
                    }
                    if (!isStatic) {
                        if (!method.computed && (method.key.name || method.key.value.toString()) === 'constructor') {
                            if (method.kind !== 'method' || !method.method || method.value.generator) {
                                throwUnexpectedToken(token, Messages.ConstructorSpecialMethod);
                            }
                            if (hasConstructor) {
                                throwUnexpectedToken(token, Messages.DuplicateConstructor);
                            } else {
                                hasConstructor = true;
                            }
                            method.kind = 'constructor';
                        }
                    } else {
                        if (!method.computed && (method.key.name || method.key.value.toString()) === 'prototype') {
                            throwUnexpectedToken(token, Messages.StaticPrototype);
                        }
                    }
                    method.type = Syntax.MethodDefinition;
                    delete method.method;
                    delete method.shorthand;
                    body.push(method);
                } else {
                    throwUnexpectedToken(lookahead);
                }
            }
        }
        lex();
        return classBody.finishClassBody(body);
    }

    function parseClassDeclaration(identifierIsOptional) {
        var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;
        strict = true;

        expectKeyword('class');

        if (!identifierIsOptional || lookahead.type === Token.Identifier) {
            id = parseVariableIdentifier();
        }

        if (matchKeyword('extends')) {
            lex();
            superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);
        }
        classBody = parseClassBody();
        strict = previousStrict;

        return classNode.finishClassDeclaration(id, superClass, classBody);
    }

    function parseClassExpression() {
        var id = null, superClass = null, classNode = new Node(), classBody, previousStrict = strict;
        strict = true;

        expectKeyword('class');

        if (lookahead.type === Token.Identifier) {
            id = parseVariableIdentifier();
        }

        if (matchKeyword('extends')) {
            lex();
            superClass = isolateCoverGrammar(parseLeftHandSideExpressionAllowCall);
        }
        classBody = parseClassBody();
        strict = previousStrict;

        return classNode.finishClassExpression(id, superClass, classBody);
    }

    // ECMA-262 15.2 Modules

    function parseModuleSpecifier() {
        var node = new Node();

        if (lookahead.type !== Token.StringLiteral) {
            throwError(Messages.InvalidModuleSpecifier);
        }
        return node.finishLiteral(lex());
    }

    // ECMA-262 15.2.3 Exports

    function parseExportSpecifier() {
        var exported, local, node = new Node(), def;
        if (matchKeyword('default')) {
            // export {default} from 'something';
            def = new Node();
            lex();
            local = def.finishIdentifier('default');
        } else {
            local = parseVariableIdentifier();
        }
        if (matchContextualKeyword('as')) {
            lex();
            exported = parseNonComputedProperty();
        }
        return node.finishExportSpecifier(local, exported);
    }

    function parseExportNamedDeclaration(node) {
        var declaration = null,
            isExportFromIdentifier,
            src = null, specifiers = [];

        // non-default export
        if (lookahead.type === Token.Keyword) {
            // covers:
            // export var f = 1;
            switch (lookahead.value) {
                case 'let':
                case 'const':
                    declaration = parseLexicalDeclaration({inFor: false});
                    return node.finishExportNamedDeclaration(declaration, specifiers, null);
                case 'var':
                case 'class':
                case 'function':
                    declaration = parseStatementListItem();
                    return node.finishExportNamedDeclaration(declaration, specifiers, null);
            }
        }

        expect('{');
        while (!match('}')) {
            isExportFromIdentifier = isExportFromIdentifier || matchKeyword('default');
            specifiers.push(parseExportSpecifier());
            if (!match('}')) {
                expect(',');
                if (match('}')) {
                    break;
                }
            }
        }
        expect('}');

        if (matchContextualKeyword('from')) {
            // covering:
            // export {default} from 'foo';
            // export {foo} from 'foo';
            lex();
            src = parseModuleSpecifier();
            consumeSemicolon();
        } else if (isExportFromIdentifier) {
            // covering:
            // export {default}; // missing fromClause
            throwError(lookahead.value ?
                    Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
        } else {
            // cover
            // export {foo};
            consumeSemicolon();
        }
        return node.finishExportNamedDeclaration(declaration, specifiers, src);
    }

    function parseExportDefaultDeclaration(node) {
        var declaration = null,
            expression = null;

        // covers:
        // export default ...
        expectKeyword('default');

        if (matchKeyword('function')) {
            // covers:
            // export default function foo () {}
            // export default function () {}
            declaration = parseFunctionDeclaration(new Node(), true);
            return node.finishExportDefaultDeclaration(declaration);
        }
        if (matchKeyword('class')) {
            declaration = parseClassDeclaration(true);
            return node.finishExportDefaultDeclaration(declaration);
        }

        if (matchContextualKeyword('from')) {
            throwError(Messages.UnexpectedToken, lookahead.value);
        }

        // covers:
        // export default {};
        // export default [];
        // export default (1 + 2);
        if (match('{')) {
            expression = parseObjectInitializer();
        } else if (match('[')) {
            expression = parseArrayInitializer();
        } else {
            expression = parseAssignmentExpression();
        }
        consumeSemicolon();
        return node.finishExportDefaultDeclaration(expression);
    }

    function parseExportAllDeclaration(node) {
        var src;

        // covers:
        // export * from 'foo';
        expect('*');
        if (!matchContextualKeyword('from')) {
            throwError(lookahead.value ?
                    Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
        }
        lex();
        src = parseModuleSpecifier();
        consumeSemicolon();

        return node.finishExportAllDeclaration(src);
    }

    function parseExportDeclaration() {
        var node = new Node();
        if (state.inFunctionBody) {
            throwError(Messages.IllegalExportDeclaration);
        }

        expectKeyword('export');

        if (matchKeyword('default')) {
            return parseExportDefaultDeclaration(node);
        }
        if (match('*')) {
            return parseExportAllDeclaration(node);
        }
        return parseExportNamedDeclaration(node);
    }

    // ECMA-262 15.2.2 Imports

    function parseImportSpecifier() {
        // import {<foo as bar>} ...;
        var local, imported, node = new Node();

        imported = parseNonComputedProperty();
        if (matchContextualKeyword('as')) {
            lex();
            local = parseVariableIdentifier();
        }

        return node.finishImportSpecifier(local, imported);
    }

    function parseNamedImports() {
        var specifiers = [];
        // {foo, bar as bas}
        expect('{');
        while (!match('}')) {
            specifiers.push(parseImportSpecifier());
            if (!match('}')) {
                expect(',');
                if (match('}')) {
                    break;
                }
            }
        }
        expect('}');
        return specifiers;
    }

    function parseImportDefaultSpecifier() {
        // import <foo> ...;
        var local, node = new Node();

        local = parseNonComputedProperty();

        return node.finishImportDefaultSpecifier(local);
    }

    function parseImportNamespaceSpecifier() {
        // import <* as foo> ...;
        var local, node = new Node();

        expect('*');
        if (!matchContextualKeyword('as')) {
            throwError(Messages.NoAsAfterImportNamespace);
        }
        lex();
        local = parseNonComputedProperty();

        return node.finishImportNamespaceSpecifier(local);
    }

    function parseImportDeclaration() {
        var specifiers = [], src, node = new Node();

        if (state.inFunctionBody) {
            throwError(Messages.IllegalImportDeclaration);
        }

        expectKeyword('import');

        if (lookahead.type === Token.StringLiteral) {
            // import 'foo';
            src = parseModuleSpecifier();
        } else {

            if (match('{')) {
                // import {bar}
                specifiers = specifiers.concat(parseNamedImports());
            } else if (match('*')) {
                // import * as foo
                specifiers.push(parseImportNamespaceSpecifier());
            } else if (isIdentifierName(lookahead) && !matchKeyword('default')) {
                // import foo
                specifiers.push(parseImportDefaultSpecifier());
                if (match(',')) {
                    lex();
                    if (match('*')) {
                        // import foo, * as foo
                        specifiers.push(parseImportNamespaceSpecifier());
                    } else if (match('{')) {
                        // import foo, {bar}
                        specifiers = specifiers.concat(parseNamedImports());
                    } else {
                        throwUnexpectedToken(lookahead);
                    }
                }
            } else {
                throwUnexpectedToken(lex());
            }

            if (!matchContextualKeyword('from')) {
                throwError(lookahead.value ?
                        Messages.UnexpectedToken : Messages.MissingFromClause, lookahead.value);
            }
            lex();
            src = parseModuleSpecifier();
        }

        consumeSemicolon();
        return node.finishImportDeclaration(specifiers, src);
    }

    // ECMA-262 15.1 Scripts

    function parseScriptBody() {
        var statement, body = [], token, directive, firstRestricted;

        while (startIndex < length) {
            token = lookahead;
            if (token.type !== Token.StringLiteral) {
                break;
            }

            statement = parseStatementListItem();
            body.push(statement);
            if (statement.expression.type !== Syntax.Literal) {
                // this is not directive
                break;
            }
            directive = source.slice(token.start + 1, token.end - 1);
            if (directive === 'use strict') {
                strict = true;
                if (firstRestricted) {
                    tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);
                }
            } else {
                if (!firstRestricted && token.octal) {
                    firstRestricted = token;
                }
            }
        }

        while (startIndex < length) {
            statement = parseStatementListItem();
            /* istanbul ignore if */
            if (typeof statement === 'undefined') {
                break;
            }
            body.push(statement);
        }
        return body;
    }

    function parseProgram() {
        var body, node;

        peek();
        node = new Node();

        body = parseScriptBody();
        return node.finishProgram(body, state.sourceType);
    }

    function filterTokenLocation() {
        var i, entry, token, tokens = [];

        for (i = 0; i < extra.tokens.length; ++i) {
            entry = extra.tokens[i];
            token = {
                type: entry.type,
                value: entry.value
            };
            if (entry.regex) {
                token.regex = {
                    pattern: entry.regex.pattern,
                    flags: entry.regex.flags
                };
            }
            if (extra.range) {
                token.range = entry.range;
            }
            if (extra.loc) {
                token.loc = entry.loc;
            }
            tokens.push(token);
        }

        extra.tokens = tokens;
    }

    function tokenize(code, options, delegate) {
        var toString,
            tokens;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            allowYield: true,
            labelSet: {},
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            lastCommentStart: -1,
            curlyStack: []
        };

        extra = {};

        // Options matching.
        options = options || {};

        // Of course we collect tokens here.
        options.tokens = true;
        extra.tokens = [];
        extra.tokenValues = [];
        extra.tokenize = true;
        extra.delegate = delegate;

        // The following two fields are necessary to compute the Regex tokens.
        extra.openParenToken = -1;
        extra.openCurlyToken = -1;

        extra.range = (typeof options.range === 'boolean') && options.range;
        extra.loc = (typeof options.loc === 'boolean') && options.loc;

        if (typeof options.comment === 'boolean' && options.comment) {
            extra.comments = [];
        }
        if (typeof options.tolerant === 'boolean' && options.tolerant) {
            extra.errors = [];
        }

        try {
            peek();
            if (lookahead.type === Token.EOF) {
                return extra.tokens;
            }

            lex();
            while (lookahead.type !== Token.EOF) {
                try {
                    lex();
                } catch (lexError) {
                    if (extra.errors) {
                        recordError(lexError);
                        // We have to break on the first error
                        // to avoid infinite loops.
                        break;
                    } else {
                        throw lexError;
                    }
                }
            }

            tokens = extra.tokens;
            if (typeof extra.errors !== 'undefined') {
                tokens.errors = extra.errors;
            }
        } catch (e) {
            throw e;
        } finally {
            extra = {};
        }
        return tokens;
    }

    function parse(code, options) {
        var program, toString;

        toString = String;
        if (typeof code !== 'string' && !(code instanceof String)) {
            code = toString(code);
        }

        source = code;
        index = 0;
        lineNumber = (source.length > 0) ? 1 : 0;
        lineStart = 0;
        startIndex = index;
        startLineNumber = lineNumber;
        startLineStart = lineStart;
        length = source.length;
        lookahead = null;
        state = {
            allowIn: true,
            allowYield: true,
            labelSet: {},
            inFunctionBody: false,
            inIteration: false,
            inSwitch: false,
            lastCommentStart: -1,
            curlyStack: [],
            sourceType: 'script'
        };
        strict = false;

        extra = {};
        if (typeof options !== 'undefined') {
            extra.range = (typeof options.range === 'boolean') && options.range;
            extra.loc = (typeof options.loc === 'boolean') && options.loc;
            extra.attachComment = (typeof options.attachComment === 'boolean') && options.attachComment;

            if (extra.loc && options.source !== null && options.source !== undefined) {
                extra.source = toString(options.source);
            }

            if (typeof options.tokens === 'boolean' && options.tokens) {
                extra.tokens = [];
            }
            if (typeof options.comment === 'boolean' && options.comment) {
                extra.comments = [];
            }
            if (typeof options.tolerant === 'boolean' && options.tolerant) {
                extra.errors = [];
            }
            if (extra.attachComment) {
                extra.range = true;
                extra.comments = [];
                extra.bottomRightStack = [];
                extra.trailingComments = [];
                extra.leadingComments = [];
            }
            if (options.sourceType === 'module') {
                // very restrictive condition for now
                state.sourceType = options.sourceType;
                strict = true;
            }
        }

        try {
            program = parseProgram();
            if (typeof extra.comments !== 'undefined') {
                program.comments = extra.comments;
            }
            if (typeof extra.tokens !== 'undefined') {
                filterTokenLocation();
                program.tokens = extra.tokens;
            }
            if (typeof extra.errors !== 'undefined') {
                program.errors = extra.errors;
            }
        } catch (e) {
            throw e;
        } finally {
            extra = {};
        }

        return program;
    }

    // Sync with *.json manifests.
    exports.version = '2.7.2';

    exports.tokenize = tokenize;

    exports.parse = parse;

    // Deep copy.
    /* istanbul ignore next */
    exports.Syntax = (function () {
        var name, types = {};

        if (typeof Object.create === 'function') {
            types = Object.create(null);
        }

        for (name in Syntax) {
            if (Syntax.hasOwnProperty(name)) {
                types[name] = Syntax[name];
            }
        }

        if (typeof Object.freeze === 'function') {
            Object.freeze(types);
        }

        return types;
    }());

}));
/* vim: set sw=4 ts=4 et tw=80 : */

},{}],40:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

function EventEmitter() {
  this._events = this._events || {};
  this._maxListeners = this._maxListeners || undefined;
}
module.exports = EventEmitter;

// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;

EventEmitter.prototype._events = undefined;
EventEmitter.prototype._maxListeners = undefined;

// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
EventEmitter.defaultMaxListeners = 10;

// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function(n) {
  if (!isNumber(n) || n < 0 || isNaN(n))
    throw TypeError('n must be a positive number');
  this._maxListeners = n;
  return this;
};

EventEmitter.prototype.emit = function(type) {
  var er, handler, len, args, i, listeners;

  if (!this._events)
    this._events = {};

  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events.error ||
        (isObject(this._events.error) && !this._events.error.length)) {
      er = arguments[1];
      if (er instanceof Error) {
        throw er; // Unhandled 'error' event
      }
      throw TypeError('Uncaught, unspecified "error" event.');
    }
  }

  handler = this._events[type];

  if (isUndefined(handler))
    return false;

  if (isFunction(handler)) {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
  } else if (isObject(handler)) {
    args = Array.prototype.slice.call(arguments, 1);
    listeners = handler.slice();
    len = listeners.length;
    for (i = 0; i < len; i++)
      listeners[i].apply(this, args);
  }

  return true;
};

EventEmitter.prototype.addListener = function(type, listener) {
  var m;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events)
    this._events = {};

  // To avoid recursion in the case that type === "newListener"! Before
  // adding it to the listeners, first emit "newListener".
  if (this._events.newListener)
    this.emit('newListener', type,
              isFunction(listener.listener) ?
              listener.listener : listener);

  if (!this._events[type])
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  else if (isObject(this._events[type]))
    // If we've already got an array, just append.
    this._events[type].push(listener);
  else
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];

  // Check for listener leak
  if (isObject(this._events[type]) && !this._events[type].warned) {
    if (!isUndefined(this._maxListeners)) {
      m = this._maxListeners;
    } else {
      m = EventEmitter.defaultMaxListeners;
    }

    if (m && m > 0 && this._events[type].length > m) {
      this._events[type].warned = true;
      console.error('(node) warning: possible EventEmitter memory ' +
                    'leak detected. %d listeners added. ' +
                    'Use emitter.setMaxListeners() to increase limit.',
                    this._events[type].length);
      if (typeof console.trace === 'function') {
        // not supported in IE 10
        console.trace();
      }
    }
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  var fired = false;

  function g() {
    this.removeListener(type, g);

    if (!fired) {
      fired = true;
      listener.apply(this, arguments);
    }
  }

  g.listener = listener;
  this.on(type, g);

  return this;
};

// emits a 'removeListener' event iff the listener was removed
EventEmitter.prototype.removeListener = function(type, listener) {
  var list, position, length, i;

  if (!isFunction(listener))
    throw TypeError('listener must be a function');

  if (!this._events || !this._events[type])
    return this;

  list = this._events[type];
  length = list.length;
  position = -1;

  if (list === listener ||
      (isFunction(list.listener) && list.listener === listener)) {
    delete this._events[type];
    if (this._events.removeListener)
      this.emit('removeListener', type, listener);

  } else if (isObject(list)) {
    for (i = length; i-- > 0;) {
      if (list[i] === listener ||
          (list[i].listener && list[i].listener === listener)) {
        position = i;
        break;
      }
    }

    if (position < 0)
      return this;

    if (list.length === 1) {
      list.length = 0;
      delete this._events[type];
    } else {
      list.splice(position, 1);
    }

    if (this._events.removeListener)
      this.emit('removeListener', type, listener);
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  var key, listeners;

  if (!this._events)
    return this;

  // not listening for removeListener, no need to emit
  if (!this._events.removeListener) {
    if (arguments.length === 0)
      this._events = {};
    else if (this._events[type])
      delete this._events[type];
    return this;
  }

  // emit removeListener for all listeners on all events
  if (arguments.length === 0) {
    for (key in this._events) {
      if (key === 'removeListener') continue;
      this.removeAllListeners(key);
    }
    this.removeAllListeners('removeListener');
    this._events = {};
    return this;
  }

  listeners = this._events[type];

  if (isFunction(listeners)) {
    this.removeListener(type, listeners);
  } else if (listeners) {
    // LIFO order
    while (listeners.length)
      this.removeListener(type, listeners[listeners.length - 1]);
  }
  delete this._events[type];

  return this;
};

EventEmitter.prototype.listeners = function(type) {
  var ret;
  if (!this._events || !this._events[type])
    ret = [];
  else if (isFunction(this._events[type]))
    ret = [this._events[type]];
  else
    ret = this._events[type].slice();
  return ret;
};

EventEmitter.prototype.listenerCount = function(type) {
  if (this._events) {
    var evlistener = this._events[type];

    if (isFunction(evlistener))
      return 1;
    else if (evlistener)
      return evlistener.length;
  }
  return 0;
};

EventEmitter.listenerCount = function(emitter, type) {
  return emitter.listenerCount(type);
};

function isFunction(arg) {
  return typeof arg === 'function';
}

function isNumber(arg) {
  return typeof arg === 'number';
}

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}

function isUndefined(arg) {
  return arg === void 0;
}

},{}],41:[function(require,module,exports){
(function (process,global){
(function() {
'use strict';

var Faye = {
  VERSION:          '1.1.2',

  BAYEUX_VERSION:   '1.0',
  ID_LENGTH:        160,
  JSONP_CALLBACK:   'jsonpcallback',
  CONNECTION_TYPES: ['long-polling', 'cross-origin-long-polling', 'callback-polling', 'websocket', 'eventsource', 'in-process'],

  MANDATORY_CONNECTION_TYPES: ['long-polling', 'callback-polling', 'in-process'],

  ENV: (typeof window !== 'undefined') ? window : global,

  extend: function(dest, source, overwrite) {
    if (!source) return dest;
    for (var key in source) {
      if (!source.hasOwnProperty(key)) continue;
      if (dest.hasOwnProperty(key) && overwrite === false) continue;
      if (dest[key] !== source[key])
        dest[key] = source[key];
    }
    return dest;
  },

  random: function(bitlength) {
    bitlength = bitlength || this.ID_LENGTH;
    var maxLength = Math.ceil(bitlength * Math.log(2) / Math.log(36));
    var string = csprng(bitlength, 36);
    while (string.length < maxLength) string = '0' + string;
    return string;
  },

  validateOptions: function(options, validKeys) {
    for (var key in options) {
      if (this.indexOf(validKeys, key) < 0)
        throw new Error('Unrecognized option: ' + key);
    }
  },

  clientIdFromMessages: function(messages) {
    var connect = this.filter([].concat(messages), function(message) {
      return message.channel === '/meta/connect';
    });
    return connect[0] && connect[0].clientId;
  },

  copyObject: function(object) {
    var clone, i, key;
    if (object instanceof Array) {
      clone = [];
      i = object.length;
      while (i--) clone[i] = Faye.copyObject(object[i]);
      return clone;
    } else if (typeof object === 'object') {
      clone = (object === null) ? null : {};
      for (key in object) clone[key] = Faye.copyObject(object[key]);
      return clone;
    } else {
      return object;
    }
  },

  commonElement: function(lista, listb) {
    for (var i = 0, n = lista.length; i < n; i++) {
      if (this.indexOf(listb, lista[i]) !== -1)
        return lista[i];
    }
    return null;
  },

  indexOf: function(list, needle) {
    if (list.indexOf) return list.indexOf(needle);

    for (var i = 0, n = list.length; i < n; i++) {
      if (list[i] === needle) return i;
    }
    return -1;
  },

  map: function(object, callback, context) {
    if (object.map) return object.map(callback, context);
    var result = [];

    if (object instanceof Array) {
      for (var i = 0, n = object.length; i < n; i++) {
        result.push(callback.call(context || null, object[i], i));
      }
    } else {
      for (var key in object) {
        if (!object.hasOwnProperty(key)) continue;
        result.push(callback.call(context || null, key, object[key]));
      }
    }
    return result;
  },

  filter: function(array, callback, context) {
    if (array.filter) return array.filter(callback, context);
    var result = [];
    for (var i = 0, n = array.length; i < n; i++) {
      if (callback.call(context || null, array[i], i))
        result.push(array[i]);
    }
    return result;
  },

  asyncEach: function(list, iterator, callback, context) {
    var n       = list.length,
        i       = -1,
        calls   = 0,
        looping = false;

    var iterate = function() {
      calls -= 1;
      i += 1;
      if (i === n) return callback && callback.call(context);
      iterator(list[i], resume);
    };

    var loop = function() {
      if (looping) return;
      looping = true;
      while (calls > 0) iterate();
      looping = false;
    };

    var resume = function() {
      calls += 1;
      loop();
    };
    resume();
  },

  // http://assanka.net/content/tech/2009/09/02/json2-js-vs-prototype/
  toJSON: function(object) {
    if (!this.stringify) return JSON.stringify(object);

    return this.stringify(object, function(key, value) {
      return (this[key] instanceof Array) ? this[key] : value;
    });
  }
};

if (typeof module !== 'undefined')
  module.exports = Faye;
else if (typeof window !== 'undefined')
  window.Faye = Faye;

Faye.Class = function(parent, methods) {
  if (typeof parent !== 'function') {
    methods = parent;
    parent  = Object;
  }

  var klass = function() {
    if (!this.initialize) return this;
    return this.initialize.apply(this, arguments) || this;
  };

  var bridge = function() {};
  bridge.prototype = parent.prototype;

  klass.prototype = new bridge();
  Faye.extend(klass.prototype, methods);

  return klass;
};

(function() {
var EventEmitter = Faye.EventEmitter = function() {};

/*
Copyright Joyent, Inc. and other Node contributors. All rights reserved.
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

var isArray = typeof Array.isArray === 'function'
    ? Array.isArray
    : function (xs) {
        return Object.prototype.toString.call(xs) === '[object Array]'
    }
;
function indexOf (xs, x) {
    if (xs.indexOf) return xs.indexOf(x);
    for (var i = 0; i < xs.length; i++) {
        if (x === xs[i]) return i;
    }
    return -1;
}


EventEmitter.prototype.emit = function(type) {
  // If there is no 'error' event listener then throw.
  if (type === 'error') {
    if (!this._events || !this._events.error ||
        (isArray(this._events.error) && !this._events.error.length))
    {
      if (arguments[1] instanceof Error) {
        throw arguments[1]; // Unhandled 'error' event
      } else {
        throw new Error("Uncaught, unspecified 'error' event.");
      }
      return false;
    }
  }

  if (!this._events) return false;
  var handler = this._events[type];
  if (!handler) return false;

  if (typeof handler == 'function') {
    switch (arguments.length) {
      // fast cases
      case 1:
        handler.call(this);
        break;
      case 2:
        handler.call(this, arguments[1]);
        break;
      case 3:
        handler.call(this, arguments[1], arguments[2]);
        break;
      // slower
      default:
        var args = Array.prototype.slice.call(arguments, 1);
        handler.apply(this, args);
    }
    return true;

  } else if (isArray(handler)) {
    var args = Array.prototype.slice.call(arguments, 1);

    var listeners = handler.slice();
    for (var i = 0, l = listeners.length; i < l; i++) {
      listeners[i].apply(this, args);
    }
    return true;

  } else {
    return false;
  }
};

// EventEmitter is defined in src/node_events.cc
// EventEmitter.prototype.emit() is also defined there.
EventEmitter.prototype.addListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('addListener only takes instances of Function');
  }

  if (!this._events) this._events = {};

  // To avoid recursion in the case that type == "newListeners"! Before
  // adding it to the listeners, first emit "newListeners".
  this.emit('newListener', type, listener);

  if (!this._events[type]) {
    // Optimize the case of one listener. Don't need the extra array object.
    this._events[type] = listener;
  } else if (isArray(this._events[type])) {
    // If we've already got an array, just append.
    this._events[type].push(listener);
  } else {
    // Adding the second element, need to change to array.
    this._events[type] = [this._events[type], listener];
  }

  return this;
};

EventEmitter.prototype.on = EventEmitter.prototype.addListener;

EventEmitter.prototype.once = function(type, listener) {
  var self = this;
  self.on(type, function g() {
    self.removeListener(type, g);
    listener.apply(this, arguments);
  });

  return this;
};

EventEmitter.prototype.removeListener = function(type, listener) {
  if ('function' !== typeof listener) {
    throw new Error('removeListener only takes instances of Function');
  }

  // does not use listeners(), so no side effect of creating _events[type]
  if (!this._events || !this._events[type]) return this;

  var list = this._events[type];

  if (isArray(list)) {
    var i = indexOf(list, listener);
    if (i < 0) return this;
    list.splice(i, 1);
    if (list.length == 0)
      delete this._events[type];
  } else if (this._events[type] === listener) {
    delete this._events[type];
  }

  return this;
};

EventEmitter.prototype.removeAllListeners = function(type) {
  if (arguments.length === 0) {
    this._events = {};
    return this;
  }

  // does not use listeners(), so no side effect of creating _events[type]
  if (type && this._events && this._events[type]) this._events[type] = null;
  return this;
};

EventEmitter.prototype.listeners = function(type) {
  if (!this._events) this._events = {};
  if (!this._events[type]) this._events[type] = [];
  if (!isArray(this._events[type])) {
    this._events[type] = [this._events[type]];
  }
  return this._events[type];
};

})();

Faye.Namespace = Faye.Class({
  initialize: function() {
    this._used = {};
  },

  exists: function(id) {
    return this._used.hasOwnProperty(id);
  },

  generate: function() {
    var name = Faye.random();
    while (this._used.hasOwnProperty(name))
      name = Faye.random();
    return this._used[name] = name;
  },

  release: function(id) {
    delete this._used[id];
  }
});

(function() {
'use strict';

var timeout = setTimeout, defer;

if (typeof setImmediate === 'function')
  defer = function(fn) { setImmediate(fn) };
else if (typeof process === 'object' && process.nextTick)
  defer = function(fn) { process.nextTick(fn) };
else
  defer = function(fn) { timeout(fn, 0) };

var PENDING   = 0,
    FULFILLED = 1,
    REJECTED  = 2;

var RETURN = function(x) { return x },
    THROW  = function(x) { throw  x };

var Promise = function(task) {
  this._state       = PENDING;
  this._onFulfilled = [];
  this._onRejected  = [];

  if (typeof task !== 'function') return;
  var self = this;

  task(function(value)  { fulfill(self, value) },
       function(reason) { reject(self, reason) });
};

Promise.prototype.then = function(onFulfilled, onRejected) {
  var next = new Promise();
  registerOnFulfilled(this, onFulfilled, next);
  registerOnRejected(this, onRejected, next);
  return next;
};

var registerOnFulfilled = function(promise, onFulfilled, next) {
  if (typeof onFulfilled !== 'function') onFulfilled = RETURN;
  var handler = function(value) { invoke(onFulfilled, value, next) };

  if (promise._state === PENDING) {
    promise._onFulfilled.push(handler);
  } else if (promise._state === FULFILLED) {
    handler(promise._value);
  }
};

var registerOnRejected = function(promise, onRejected, next) {
  if (typeof onRejected !== 'function') onRejected = THROW;
  var handler = function(reason) { invoke(onRejected, reason, next) };

  if (promise._state === PENDING) {
    promise._onRejected.push(handler);
  } else if (promise._state === REJECTED) {
    handler(promise._reason);
  }
};

var invoke = function(fn, value, next) {
  defer(function() { _invoke(fn, value, next) });
};

var _invoke = function(fn, value, next) {
  var outcome;

  try {
    outcome = fn(value);
  } catch (error) {
    return reject(next, error);
  }

  if (outcome === next) {
    reject(next, new TypeError('Recursive promise chain detected'));
  } else {
    fulfill(next, outcome);
  }
};

var fulfill = Promise.fulfill = Promise.resolve = function(promise, value) {
  var called = false, type, then;

  try {
    type = typeof value;
    then = value !== null && (type === 'function' || type === 'object') && value.then;

    if (typeof then !== 'function') return _fulfill(promise, value);

    then.call(value, function(v) {
      if (!(called ^ (called = true))) return;
      fulfill(promise, v);
    }, function(r) {
      if (!(called ^ (called = true))) return;
      reject(promise, r);
    });
  } catch (error) {
    if (!(called ^ (called = true))) return;
    reject(promise, error);
  }
};

var _fulfill = function(promise, value) {
  if (promise._state !== PENDING) return;

  promise._state      = FULFILLED;
  promise._value      = value;
  promise._onRejected = [];

  var onFulfilled = promise._onFulfilled, fn;
  while (fn = onFulfilled.shift()) fn(value);
};

var reject = Promise.reject = function(promise, reason) {
  if (promise._state !== PENDING) return;

  promise._state       = REJECTED;
  promise._reason      = reason;
  promise._onFulfilled = [];

  var onRejected = promise._onRejected, fn;
  while (fn = onRejected.shift()) fn(reason);
};

Promise.all = function(promises) {
  return new Promise(function(fulfill, reject) {
    var list = [],
         n   = promises.length,
         i;

    if (n === 0) return fulfill(list);

    for (i = 0; i < n; i++) (function(promise, i) {
      Promise.fulfilled(promise).then(function(value) {
        list[i] = value;
        if (--n === 0) fulfill(list);
      }, reject);
    })(promises[i], i);
  });
};

Promise.defer = defer;

Promise.deferred = Promise.pending = function() {
  var tuple = {};

  tuple.promise = new Promise(function(fulfill, reject) {
    tuple.fulfill = tuple.resolve = fulfill;
    tuple.reject  = reject;
  });
  return tuple;
};

Promise.fulfilled = Promise.resolved = function(value) {
  return new Promise(function(fulfill, reject) { fulfill(value) });
};

Promise.rejected = function(reason) {
  return new Promise(function(fulfill, reject) { reject(reason) });
};

if (typeof Faye === 'undefined')
  module.exports = Promise;
else
  Faye.Promise = Promise;

})();

Faye.Set = Faye.Class({
  initialize: function() {
    this._index = {};
  },

  add: function(item) {
    var key = (item.id !== undefined) ? item.id : item;
    if (this._index.hasOwnProperty(key)) return false;
    this._index[key] = item;
    return true;
  },

  forEach: function(block, context) {
    for (var key in this._index) {
      if (this._index.hasOwnProperty(key))
        block.call(context, this._index[key]);
    }
  },

  isEmpty: function() {
    for (var key in this._index) {
      if (this._index.hasOwnProperty(key)) return false;
    }
    return true;
  },

  member: function(item) {
    for (var key in this._index) {
      if (this._index[key] === item) return true;
    }
    return false;
  },

  remove: function(item) {
    var key = (item.id !== undefined) ? item.id : item;
    var removed = this._index[key];
    delete this._index[key];
    return removed;
  },

  toArray: function() {
    var array = [];
    this.forEach(function(item) { array.push(item) });
    return array;
  }
});

Faye.URI = {
  isURI: function(uri) {
    return uri && uri.protocol && uri.host && uri.path;
  },

  isSameOrigin: function(uri) {
    var location = Faye.ENV.location;
    return uri.protocol === location.protocol &&
           uri.hostname === location.hostname &&
           uri.port     === location.port;
  },

  parse: function(url) {
    if (typeof url !== 'string') return url;
    var uri = {}, parts, query, pairs, i, n, data;

    var consume = function(name, pattern) {
      url = url.replace(pattern, function(match) {
        uri[name] = match;
        return '';
      });
      uri[name] = uri[name] || '';
    };

    consume('protocol', /^[a-z]+\:/i);
    consume('host',     /^\/\/[^\/\?#]+/);

    if (!/^\//.test(url) && !uri.host)
      url = Faye.ENV.location.pathname.replace(/[^\/]*$/, '') + url;

    consume('pathname', /^[^\?#]*/);
    consume('search',   /^\?[^#]*/);
    consume('hash',     /^#.*/);

    uri.protocol = uri.protocol || Faye.ENV.location.protocol;

    if (uri.host) {
      uri.host     = uri.host.substr(2);
      parts        = uri.host.split(':');
      uri.hostname = parts[0];
      uri.port     = parts[1] || '';
    } else {
      uri.host     = Faye.ENV.location.host;
      uri.hostname = Faye.ENV.location.hostname;
      uri.port     = Faye.ENV.location.port;
    }

    uri.pathname = uri.pathname || '/';
    uri.path = uri.pathname + uri.search;

    query = uri.search.replace(/^\?/, '');
    pairs = query ? query.split('&') : [];
    data  = {};

    for (i = 0, n = pairs.length; i < n; i++) {
      parts = pairs[i].split('=');
      data[decodeURIComponent(parts[0] || '')] = decodeURIComponent(parts[1] || '');
    }

    uri.query = data;

    uri.href = this.stringify(uri);
    return uri;
  },

  stringify: function(uri) {
    var string = uri.protocol + '//' + uri.hostname;
    if (uri.port) string += ':' + uri.port;
    string += uri.pathname + this.queryString(uri.query) + (uri.hash || '');
    return string;
  },

  queryString: function(query) {
    var pairs = [];
    for (var key in query) {
      if (!query.hasOwnProperty(key)) continue;
      pairs.push(encodeURIComponent(key) + '=' + encodeURIComponent(query[key]));
    }
    if (pairs.length === 0) return '';
    return '?' + pairs.join('&');
  }
};

Faye.Error = Faye.Class({
  initialize: function(code, params, message) {
    this.code    = code;
    this.params  = Array.prototype.slice.call(params);
    this.message = message;
  },

  toString: function() {
    return this.code + ':' +
           this.params.join(',') + ':' +
           this.message;
  }
});

Faye.Error.parse = function(message) {
  message = message || '';
  if (!Faye.Grammar.ERROR.test(message)) return new this(null, [], message);

  var parts   = message.split(':'),
      code    = parseInt(parts[0]),
      params  = parts[1].split(','),
      message = parts[2];

  return new this(code, params, message);
};




Faye.Error.versionMismatch = function() {
  return new this(300, arguments, 'Version mismatch').toString();
};

Faye.Error.conntypeMismatch = function() {
  return new this(301, arguments, 'Connection types not supported').toString();
};

Faye.Error.extMismatch = function() {
  return new this(302, arguments, 'Extension mismatch').toString();
};

Faye.Error.badRequest = function() {
  return new this(400, arguments, 'Bad request').toString();
};

Faye.Error.clientUnknown = function() {
  return new this(401, arguments, 'Unknown client').toString();
};

Faye.Error.parameterMissing = function() {
  return new this(402, arguments, 'Missing required parameter').toString();
};

Faye.Error.channelForbidden = function() {
  return new this(403, arguments, 'Forbidden channel').toString();
};

Faye.Error.channelUnknown = function() {
  return new this(404, arguments, 'Unknown channel').toString();
};

Faye.Error.channelInvalid = function() {
  return new this(405, arguments, 'Invalid channel').toString();
};

Faye.Error.extUnknown = function() {
  return new this(406, arguments, 'Unknown extension').toString();
};

Faye.Error.publishFailed = function() {
  return new this(407, arguments, 'Failed to publish').toString();
};

Faye.Error.serverError = function() {
  return new this(500, arguments, 'Internal server error').toString();
};


Faye.Deferrable = {
  then: function(callback, errback) {
    var self = this;
    if (!this._promise)
      this._promise = new Faye.Promise(function(fulfill, reject) {
        self._fulfill = fulfill;
        self._reject  = reject;
      });

    if (arguments.length === 0)
      return this._promise;
    else
      return this._promise.then(callback, errback);
  },

  callback: function(callback, context) {
    return this.then(function(value) { callback.call(context, value) });
  },

  errback: function(callback, context) {
    return this.then(null, function(reason) { callback.call(context, reason) });
  },

  timeout: function(seconds, message) {
    this.then();
    var self = this;
    this._timer = Faye.ENV.setTimeout(function() {
      self._reject(message);
    }, seconds * 1000);
  },

  setDeferredStatus: function(status, value) {
    if (this._timer) Faye.ENV.clearTimeout(this._timer);

    this.then();

    if (status === 'succeeded')
      this._fulfill(value);
    else if (status === 'failed')
      this._reject(value);
    else
      delete this._promise;
  }
};

Faye.Publisher = {
  countListeners: function(eventType) {
    return this.listeners(eventType).length;
  },

  bind: function(eventType, listener, context) {
    var slice   = Array.prototype.slice,
        handler = function() { listener.apply(context, slice.call(arguments)) };

    this._listeners = this._listeners || [];
    this._listeners.push([eventType, listener, context, handler]);
    return this.on(eventType, handler);
  },

  unbind: function(eventType, listener, context) {
    this._listeners = this._listeners || [];
    var n = this._listeners.length, tuple;

    while (n--) {
      tuple = this._listeners[n];
      if (tuple[0] !== eventType) continue;
      if (listener && (tuple[1] !== listener || tuple[2] !== context)) continue;
      this._listeners.splice(n, 1);
      this.removeListener(eventType, tuple[3]);
    }
  }
};

Faye.extend(Faye.Publisher, Faye.EventEmitter.prototype);
Faye.Publisher.trigger = Faye.Publisher.emit;

Faye.Timeouts = {
  addTimeout: function(name, delay, callback, context) {
    this._timeouts = this._timeouts || {};
    if (this._timeouts.hasOwnProperty(name)) return;
    var self = this;
    this._timeouts[name] = Faye.ENV.setTimeout(function() {
      delete self._timeouts[name];
      callback.call(context);
    }, 1000 * delay);
  },

  removeTimeout: function(name) {
    this._timeouts = this._timeouts || {};
    var timeout = this._timeouts[name];
    if (!timeout) return;
    Faye.ENV.clearTimeout(timeout);
    delete this._timeouts[name];
  },

  removeAllTimeouts: function() {
    this._timeouts = this._timeouts || {};
    for (var name in this._timeouts) this.removeTimeout(name);
  }
};

Faye.Logging = {
  LOG_LEVELS: {
    fatal:  4,
    error:  3,
    warn:   2,
    info:   1,
    debug:  0
  },

  writeLog: function(messageArgs, level) {
    if (!Faye.logger) return;

    var args   = Array.prototype.slice.apply(messageArgs),
        banner = '[Faye',
        klass  = this.className,

        message = args.shift().replace(/\?/g, function() {
          try {
            return Faye.toJSON(args.shift());
          } catch (e) {
            return '[Object]';
          }
        });

    for (var key in Faye) {
      if (klass) continue;
      if (typeof Faye[key] !== 'function') continue;
      if (this instanceof Faye[key]) klass = key;
    }
    if (klass) banner += '.' + klass;
    banner += '] ';

    if (typeof Faye.logger[level] === 'function')
      Faye.logger[level](banner + message);
    else if (typeof Faye.logger === 'function')
      Faye.logger(banner + message);
  }
};

(function() {
  for (var key in Faye.Logging.LOG_LEVELS)
    (function(level) {
      Faye.Logging[level] = function() {
        this.writeLog(arguments, level);
      };
    })(key);
})();

Faye.Grammar = {
  CHANNEL_NAME:     /^\/(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)))+(\/(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)))+)*$/,
  CHANNEL_PATTERN:  /^(\/(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)))+)*\/\*{1,2}$/,
  ERROR:            /^([0-9][0-9][0-9]:(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)| |\/|\*|\.))*(,(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)| |\/|\*|\.))*)*:(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)| |\/|\*|\.))*|[0-9][0-9][0-9]::(((([a-z]|[A-Z])|[0-9])|(\-|\_|\!|\~|\(|\)|\$|\@)| |\/|\*|\.))*)$/,
  VERSION:          /^([0-9])+(\.(([a-z]|[A-Z])|[0-9])(((([a-z]|[A-Z])|[0-9])|\-|\_))*)*$/
};

Faye.Extensible = {
  addExtension: function(extension) {
    this._extensions = this._extensions || [];
    this._extensions.push(extension);
    if (extension.added) extension.added(this);
  },

  removeExtension: function(extension) {
    if (!this._extensions) return;
    var i = this._extensions.length;
    while (i--) {
      if (this._extensions[i] !== extension) continue;
      this._extensions.splice(i,1);
      if (extension.removed) extension.removed(this);
    }
  },

  pipeThroughExtensions: function(stage, message, request, callback, context) {
    this.debug('Passing through ? extensions: ?', stage, message);

    if (!this._extensions) return callback.call(context, message);
    var extensions = this._extensions.slice();

    var pipe = function(message) {
      if (!message) return callback.call(context, message);

      var extension = extensions.shift();
      if (!extension) return callback.call(context, message);

      var fn = extension[stage];
      if (!fn) return pipe(message);

      if (fn.length >= 3) extension[stage](message, request, pipe);
      else                extension[stage](message, pipe);
    };
    pipe(message);
  }
};

Faye.extend(Faye.Extensible, Faye.Logging);

Faye.Channel = Faye.Class({
  initialize: function(name) {
    this.id = this.name = name;
  },

  push: function(message) {
    this.trigger('message', message);
  },

  isUnused: function() {
    return this.countListeners('message') === 0;
  }
});

Faye.extend(Faye.Channel.prototype, Faye.Publisher);

Faye.extend(Faye.Channel, {
  HANDSHAKE:    '/meta/handshake',
  CONNECT:      '/meta/connect',
  SUBSCRIBE:    '/meta/subscribe',
  UNSUBSCRIBE:  '/meta/unsubscribe',
  DISCONNECT:   '/meta/disconnect',

  META:         'meta',
  SERVICE:      'service',

  expand: function(name) {
    var segments = this.parse(name),
        channels = ['/**', name];

    var copy = segments.slice();
    copy[copy.length - 1] = '*';
    channels.push(this.unparse(copy));

    for (var i = 1, n = segments.length; i < n; i++) {
      copy = segments.slice(0, i);
      copy.push('**');
      channels.push(this.unparse(copy));
    }

    return channels;
  },

  isValid: function(name) {
    return Faye.Grammar.CHANNEL_NAME.test(name) ||
           Faye.Grammar.CHANNEL_PATTERN.test(name);
  },

  parse: function(name) {
    if (!this.isValid(name)) return null;
    return name.split('/').slice(1);
  },

  unparse: function(segments) {
    return '/' + segments.join('/');
  },

  isMeta: function(name) {
    var segments = this.parse(name);
    return segments ? (segments[0] === this.META) : null;
  },

  isService: function(name) {
    var segments = this.parse(name);
    return segments ? (segments[0] === this.SERVICE) : null;
  },

  isSubscribable: function(name) {
    if (!this.isValid(name)) return null;
    return !this.isMeta(name) && !this.isService(name);
  },

  Set: Faye.Class({
    initialize: function() {
      this._channels = {};
    },

    getKeys: function() {
      var keys = [];
      for (var key in this._channels) keys.push(key);
      return keys;
    },

    remove: function(name) {
      delete this._channels[name];
    },

    hasSubscription: function(name) {
      return this._channels.hasOwnProperty(name);
    },

    subscribe: function(names, callback, context) {
      var name;
      for (var i = 0, n = names.length; i < n; i++) {
        name = names[i];
        var channel = this._channels[name] = this._channels[name] || new Faye.Channel(name);
        if (callback) channel.bind('message', callback, context);
      }
    },

    unsubscribe: function(name, callback, context) {
      var channel = this._channels[name];
      if (!channel) return false;
      channel.unbind('message', callback, context);

      if (channel.isUnused()) {
        this.remove(name);
        return true;
      } else {
        return false;
      }
    },

    distributeMessage: function(message) {
      var channels = Faye.Channel.expand(message.channel);

      for (var i = 0, n = channels.length; i < n; i++) {
        var channel = this._channels[channels[i]];
        if (channel) channel.trigger('message', message.data);
      }
    }
  })
});

Faye.Publication = Faye.Class(Faye.Deferrable);

Faye.Subscription = Faye.Class({
  initialize: function(client, channels, callback, context) {
    this._client    = client;
    this._channels  = channels;
    this._callback  = callback;
    this._context     = context;
    this._cancelled = false;
  },

  cancel: function() {
    if (this._cancelled) return;
    this._client.unsubscribe(this._channels, this._callback, this._context);
    this._cancelled = true;
  },

  unsubscribe: function() {
    this.cancel();
  }
});

Faye.extend(Faye.Subscription.prototype, Faye.Deferrable);

Faye.Client = Faye.Class({
  UNCONNECTED:        1,
  CONNECTING:         2,
  CONNECTED:          3,
  DISCONNECTED:       4,

  HANDSHAKE:          'handshake',
  RETRY:              'retry',
  NONE:               'none',

  CONNECTION_TIMEOUT: 60,

  DEFAULT_ENDPOINT:   '/bayeux',
  INTERVAL:           0,

  initialize: function(endpoint, options) {
    this.info('New client created for ?', endpoint);
    options = options || {};

    Faye.validateOptions(options, ['interval', 'timeout', 'endpoints', 'proxy', 'retry', 'scheduler', 'websocketExtensions', 'tls', 'ca']);

    this._endpoint   = endpoint || this.DEFAULT_ENDPOINT;
    this._channels   = new Faye.Channel.Set();
    this._dispatcher = new Faye.Dispatcher(this, this._endpoint, options);

    this._messageId = 0;
    this._state     = this.UNCONNECTED;

    this._responseCallbacks = {};

    this._advice = {
      reconnect: this.RETRY,
      interval:  1000 * (options.interval || this.INTERVAL),
      timeout:   1000 * (options.timeout  || this.CONNECTION_TIMEOUT)
    };
    this._dispatcher.timeout = this._advice.timeout / 1000;

    this._dispatcher.bind('message', this._receiveMessage, this);

    if (Faye.Event && Faye.ENV.onbeforeunload !== undefined)
      Faye.Event.on(Faye.ENV, 'beforeunload', function() {
        if (Faye.indexOf(this._dispatcher._disabled, 'autodisconnect') < 0)
          this.disconnect();
      }, this);
  },

  addWebsocketExtension: function(extension) {
    return this._dispatcher.addWebsocketExtension(extension);
  },

  disable: function(feature) {
    return this._dispatcher.disable(feature);
  },

  setHeader: function(name, value) {
    return this._dispatcher.setHeader(name, value);
  },

  // Request
  // MUST include:  * channel
  //                * version
  //                * supportedConnectionTypes
  // MAY include:   * minimumVersion
  //                * ext
  //                * id
  //
  // Success Response                             Failed Response
  // MUST include:  * channel                     MUST include:  * channel
  //                * version                                    * successful
  //                * supportedConnectionTypes                   * error
  //                * clientId                    MAY include:   * supportedConnectionTypes
  //                * successful                                 * advice
  // MAY include:   * minimumVersion                             * version
  //                * advice                                     * minimumVersion
  //                * ext                                        * ext
  //                * id                                         * id
  //                * authSuccessful
  handshake: function(callback, context) {
    if (this._advice.reconnect === this.NONE) return;
    if (this._state !== this.UNCONNECTED) return;

    this._state = this.CONNECTING;
    var self = this;

    this.info('Initiating handshake with ?', Faye.URI.stringify(this._endpoint));
    this._dispatcher.selectTransport(Faye.MANDATORY_CONNECTION_TYPES);

    this._sendMessage({
      channel:                  Faye.Channel.HANDSHAKE,
      version:                  Faye.BAYEUX_VERSION,
      supportedConnectionTypes: this._dispatcher.getConnectionTypes()

    }, {}, function(response) {

      if (response.successful) {
        this._state = this.CONNECTED;
        this._dispatcher.clientId  = response.clientId;

        this._dispatcher.selectTransport(response.supportedConnectionTypes);

        this.info('Handshake successful: ?', this._dispatcher.clientId);

        this.subscribe(this._channels.getKeys(), true);
        if (callback) Faye.Promise.defer(function() { callback.call(context) });

      } else {
        this.info('Handshake unsuccessful');
        Faye.ENV.setTimeout(function() { self.handshake(callback, context) }, this._dispatcher.retry * 1000);
        this._state = this.UNCONNECTED;
      }
    }, this);
  },

  // Request                              Response
  // MUST include:  * channel             MUST include:  * channel
  //                * clientId                           * successful
  //                * connectionType                     * clientId
  // MAY include:   * ext                 MAY include:   * error
  //                * id                                 * advice
  //                                                     * ext
  //                                                     * id
  //                                                     * timestamp
  connect: function(callback, context) {
    if (this._advice.reconnect === this.NONE) return;
    if (this._state === this.DISCONNECTED) return;

    if (this._state === this.UNCONNECTED)
      return this.handshake(function() { this.connect(callback, context) }, this);

    this.callback(callback, context);
    if (this._state !== this.CONNECTED) return;

    this.info('Calling deferred actions for ?', this._dispatcher.clientId);
    this.setDeferredStatus('succeeded');
    this.setDeferredStatus('unknown');

    if (this._connectRequest) return;
    this._connectRequest = true;

    this.info('Initiating connection for ?', this._dispatcher.clientId);

    this._sendMessage({
      channel:        Faye.Channel.CONNECT,
      clientId:       this._dispatcher.clientId,
      connectionType: this._dispatcher.connectionType

    }, {}, this._cycleConnection, this);
  },

  // Request                              Response
  // MUST include:  * channel             MUST include:  * channel
  //                * clientId                           * successful
  // MAY include:   * ext                                * clientId
  //                * id                  MAY include:   * error
  //                                                     * ext
  //                                                     * id
  disconnect: function() {
    if (this._state !== this.CONNECTED) return;
    this._state = this.DISCONNECTED;

    this.info('Disconnecting ?', this._dispatcher.clientId);
    var promise = new Faye.Publication();

    this._sendMessage({
      channel:  Faye.Channel.DISCONNECT,
      clientId: this._dispatcher.clientId

    }, {}, function(response) {
      if (response.successful) {
        this._dispatcher.close();
        promise.setDeferredStatus('succeeded');
      } else {
        promise.setDeferredStatus('failed', Faye.Error.parse(response.error));
      }
    }, this);

    this.info('Clearing channel listeners for ?', this._dispatcher.clientId);
    this._channels = new Faye.Channel.Set();

    return promise;
  },

  // Request                              Response
  // MUST include:  * channel             MUST include:  * channel
  //                * clientId                           * successful
  //                * subscription                       * clientId
  // MAY include:   * ext                                * subscription
  //                * id                  MAY include:   * error
  //                                                     * advice
  //                                                     * ext
  //                                                     * id
  //                                                     * timestamp
  subscribe: function(channel, callback, context) {
    if (channel instanceof Array)
      return Faye.map(channel, function(c) {
        return this.subscribe(c, callback, context);
      }, this);

    var subscription = new Faye.Subscription(this, channel, callback, context),
        force        = (callback === true),
        hasSubscribe = this._channels.hasSubscription(channel);

    if (hasSubscribe && !force) {
      this._channels.subscribe([channel], callback, context);
      subscription.setDeferredStatus('succeeded');
      return subscription;
    }

    this.connect(function() {
      this.info('Client ? attempting to subscribe to ?', this._dispatcher.clientId, channel);
      if (!force) this._channels.subscribe([channel], callback, context);

      this._sendMessage({
        channel:      Faye.Channel.SUBSCRIBE,
        clientId:     this._dispatcher.clientId,
        subscription: channel

      }, {}, function(response) {
        if (!response.successful) {
          subscription.setDeferredStatus('failed', Faye.Error.parse(response.error));
          return this._channels.unsubscribe(channel, callback, context);
        }

        var channels = [].concat(response.subscription);
        this.info('Subscription acknowledged for ? to ?', this._dispatcher.clientId, channels);
        subscription.setDeferredStatus('succeeded');
      }, this);
    }, this);

    return subscription;
  },

  // Request                              Response
  // MUST include:  * channel             MUST include:  * channel
  //                * clientId                           * successful
  //                * subscription                       * clientId
  // MAY include:   * ext                                * subscription
  //                * id                  MAY include:   * error
  //                                                     * advice
  //                                                     * ext
  //                                                     * id
  //                                                     * timestamp
  unsubscribe: function(channel, callback, context) {
    if (channel instanceof Array)
      return Faye.map(channel, function(c) {
        return this.unsubscribe(c, callback, context);
      }, this);

    var dead = this._channels.unsubscribe(channel, callback, context);
    if (!dead) return;

    this.connect(function() {
      this.info('Client ? attempting to unsubscribe from ?', this._dispatcher.clientId, channel);

      this._sendMessage({
        channel:      Faye.Channel.UNSUBSCRIBE,
        clientId:     this._dispatcher.clientId,
        subscription: channel

      }, {}, function(response) {
        if (!response.successful) return;

        var channels = [].concat(response.subscription);
        this.info('Unsubscription acknowledged for ? from ?', this._dispatcher.clientId, channels);
      }, this);
    }, this);
  },

  // Request                              Response
  // MUST include:  * channel             MUST include:  * channel
  //                * data                               * successful
  // MAY include:   * clientId            MAY include:   * id
  //                * id                                 * error
  //                * ext                                * ext
  publish: function(channel, data, options) {
    Faye.validateOptions(options || {}, ['attempts', 'deadline']);
    var publication = new Faye.Publication();

    this.connect(function() {
      this.info('Client ? queueing published message to ?: ?', this._dispatcher.clientId, channel, data);

      this._sendMessage({
        channel:  channel,
        data:     data,
        clientId: this._dispatcher.clientId

      }, options, function(response) {
        if (response.successful)
          publication.setDeferredStatus('succeeded');
        else
          publication.setDeferredStatus('failed', Faye.Error.parse(response.error));
      }, this);
    }, this);

    return publication;
  },

  _sendMessage: function(message, options, callback, context) {
    message.id = this._generateMessageId();

    var timeout = this._advice.timeout
                ? 1.2 * this._advice.timeout / 1000
                : 1.2 * this._dispatcher.retry;

    this.pipeThroughExtensions('outgoing', message, null, function(message) {
      if (!message) return;
      if (callback) this._responseCallbacks[message.id] = [callback, context];
      this._dispatcher.sendMessage(message, timeout, options || {});
    }, this);
  },

  _generateMessageId: function() {
    this._messageId += 1;
    if (this._messageId >= Math.pow(2,32)) this._messageId = 0;
    return this._messageId.toString(36);
  },

  _receiveMessage: function(message) {
    var id = message.id, callback;

    if (message.successful !== undefined) {
      callback = this._responseCallbacks[id];
      delete this._responseCallbacks[id];
    }

    this.pipeThroughExtensions('incoming', message, null, function(message) {
      if (!message) return;
      if (message.advice) this._handleAdvice(message.advice);
      this._deliverMessage(message);
      if (callback) callback[0].call(callback[1], message);
    }, this);
  },

  _handleAdvice: function(advice) {
    Faye.extend(this._advice, advice);
    this._dispatcher.timeout = this._advice.timeout / 1000;

    if (this._advice.reconnect === this.HANDSHAKE && this._state !== this.DISCONNECTED) {
      this._state = this.UNCONNECTED;
      this._dispatcher.clientId = null;
      this._cycleConnection();
    }
  },

  _deliverMessage: function(message) {
    if (!message.channel || message.data === undefined) return;
    this.info('Client ? calling listeners for ? with ?', this._dispatcher.clientId, message.channel, message.data);
    this._channels.distributeMessage(message);
  },

  _cycleConnection: function() {
    if (this._connectRequest) {
      this._connectRequest = null;
      this.info('Closed connection for ?', this._dispatcher.clientId);
    }
    var self = this;
    Faye.ENV.setTimeout(function() { self.connect() }, this._advice.interval);
  }
});

Faye.extend(Faye.Client.prototype, Faye.Deferrable);
Faye.extend(Faye.Client.prototype, Faye.Publisher);
Faye.extend(Faye.Client.prototype, Faye.Logging);
Faye.extend(Faye.Client.prototype, Faye.Extensible);

Faye.Dispatcher = Faye.Class({
  MAX_REQUEST_SIZE: 2048,
  DEFAULT_RETRY:    5,

  UP:   1,
  DOWN: 2,

  initialize: function(client, endpoint, options) {
    this._client     = client;
    this.endpoint    = Faye.URI.parse(endpoint);
    this._alternates = options.endpoints || {};

    this.cookies      = Faye.Cookies && new Faye.Cookies.CookieJar();
    this._disabled    = [];
    this._envelopes   = {};
    this.headers      = {};
    this.retry        = options.retry || this.DEFAULT_RETRY;
    this._scheduler   = options.scheduler || Faye.Scheduler;
    this._state       = 0;
    this.transports   = {};
    this.wsExtensions = [];

    this.proxy = options.proxy || {};
    if (typeof this._proxy === 'string') this._proxy = {origin: this._proxy};

    var exts = options.websocketExtensions;
    if (exts) {
      exts = [].concat(exts);
      for (var i = 0, n = exts.length; i < n; i++)
        this.addWebsocketExtension(exts[i]);
    }

    this.tls = options.tls || {};
    this.tls.ca = this.tls.ca || options.ca;

    for (var type in this._alternates)
      this._alternates[type] = Faye.URI.parse(this._alternates[type]);

    this.maxRequestSize = this.MAX_REQUEST_SIZE;
  },

  endpointFor: function(connectionType) {
    return this._alternates[connectionType] || this.endpoint;
  },

  addWebsocketExtension: function(extension) {
    this.wsExtensions.push(extension);
  },

  disable: function(feature) {
    this._disabled.push(feature);
  },

  setHeader: function(name, value) {
    this.headers[name] = value;
  },

  close: function() {
    var transport = this._transport;
    delete this._transport;
    if (transport) transport.close();
  },

  getConnectionTypes: function() {
    return Faye.Transport.getConnectionTypes();
  },

  selectTransport: function(transportTypes) {
    Faye.Transport.get(this, transportTypes, this._disabled, function(transport) {
      this.debug('Selected ? transport for ?', transport.connectionType, Faye.URI.stringify(transport.endpoint));

      if (transport === this._transport) return;
      if (this._transport) this._transport.close();

      this._transport = transport;
      this.connectionType = transport.connectionType;
    }, this);
  },

  sendMessage: function(message, timeout, options) {
    options = options || {};

    var id       = message.id,
        attempts = options.attempts,
        deadline = options.deadline && new Date().getTime() + (options.deadline * 1000),
        envelope = this._envelopes[id],
        scheduler;

    if (!envelope) {
      scheduler = new this._scheduler(message, {timeout: timeout, interval: this.retry, attempts: attempts, deadline: deadline});
      envelope  = this._envelopes[id] = {message: message, scheduler: scheduler};
    }

    this._sendEnvelope(envelope);
  },

  _sendEnvelope: function(envelope) {
    if (!this._transport) return;
    if (envelope.request || envelope.timer) return;

    var message   = envelope.message,
        scheduler = envelope.scheduler,
        self      = this;

    if (!scheduler.isDeliverable()) {
      scheduler.abort();
      delete this._envelopes[message.id];
      return;
    }

    envelope.timer = Faye.ENV.setTimeout(function() {
      self.handleError(message);
    }, scheduler.getTimeout() * 1000);

    scheduler.send();
    envelope.request = this._transport.sendMessage(message);
  },

  handleResponse: function(reply) {
    var envelope = this._envelopes[reply.id];

    if (reply.successful !== undefined && envelope) {
      envelope.scheduler.succeed();
      delete this._envelopes[reply.id];
      Faye.ENV.clearTimeout(envelope.timer);
    }

    this.trigger('message', reply);

    if (this._state === this.UP) return;
    this._state = this.UP;
    this._client.trigger('transport:up');
  },

  handleError: function(message, immediate) {
    var envelope = this._envelopes[message.id],
        request  = envelope && envelope.request,
        self     = this;

    if (!request) return;

    request.then(function(req) {
      if (req && req.abort) req.abort();
    });

    var scheduler = envelope.scheduler;
    scheduler.fail();

    Faye.ENV.clearTimeout(envelope.timer);
    envelope.request = envelope.timer = null;

    if (immediate) {
      this._sendEnvelope(envelope);
    } else {
      envelope.timer = Faye.ENV.setTimeout(function() {
        envelope.timer = null;
        self._sendEnvelope(envelope);
      }, scheduler.getInterval() * 1000);
    }

    if (this._state === this.DOWN) return;
    this._state = this.DOWN;
    this._client.trigger('transport:down');
  }
});

Faye.extend(Faye.Dispatcher.prototype, Faye.Publisher);
Faye.extend(Faye.Dispatcher.prototype, Faye.Logging);

Faye.Scheduler = function(message, options) {
  this.message  = message;
  this.options  = options;
  this.attempts = 0;
};

Faye.extend(Faye.Scheduler.prototype, {
  getTimeout: function() {
    return this.options.timeout;
  },

  getInterval: function() {
    return this.options.interval;
  },

  isDeliverable: function() {
    var attempts = this.options.attempts,
        made     = this.attempts,
        deadline = this.options.deadline,
        now      = new Date().getTime();

    if (attempts !== undefined && made >= attempts)
      return false;

    if (deadline !== undefined && now > deadline)
      return false;

    return true;
  },

  send: function() {
    this.attempts += 1;
  },

  succeed: function() {},

  fail: function() {},

  abort: function() {}
});

Faye.Transport = Faye.extend(Faye.Class({
  DEFAULT_PORTS:    {'http:': 80, 'https:': 443, 'ws:': 80, 'wss:': 443},
  SECURE_PROTOCOLS: ['https:', 'wss:'],
  MAX_DELAY:        0,

  batching:  true,

  initialize: function(dispatcher, endpoint) {
    this._dispatcher = dispatcher;
    this.endpoint    = endpoint;
    this._outbox     = [];
    this._proxy      = Faye.extend({}, this._dispatcher.proxy);

    if (!this._proxy.origin && Faye.NodeAdapter) {
      this._proxy.origin = Faye.indexOf(this.SECURE_PROTOCOLS, this.endpoint.protocol) >= 0
                         ? (process.env.HTTPS_PROXY || process.env.https_proxy)
                         : (process.env.HTTP_PROXY  || process.env.http_proxy);
    }
  },

  close: function() {},

  encode: function(messages) {
    return '';
  },

  sendMessage: function(message) {
    this.debug('Client ? sending message to ?: ?',
               this._dispatcher.clientId, Faye.URI.stringify(this.endpoint), message);

    if (!this.batching) return Faye.Promise.fulfilled(this.request([message]));

    this._outbox.push(message);
    this._promise = this._promise || new Faye.Promise();
    this._flushLargeBatch();

    if (message.channel === Faye.Channel.HANDSHAKE) {
      this.addTimeout('publish', 0.01, this._flush, this);
      return this._promise;
    }

    if (message.channel === Faye.Channel.CONNECT)
      this._connectMessage = message;

    this.addTimeout('publish', this.MAX_DELAY, this._flush, this);
    return this._promise;
  },

  _flush: function() {
    this.removeTimeout('publish');

    if (this._outbox.length > 1 && this._connectMessage)
      this._connectMessage.advice = {timeout: 0};

    Faye.Promise.fulfill(this._promise, this.request(this._outbox));
    delete this._promise;

    this._connectMessage = null;
    this._outbox = [];
  },

  _flushLargeBatch: function() {
    var string = this.encode(this._outbox);
    if (string.length < this._dispatcher.maxRequestSize) return;
    var last = this._outbox.pop();
    this._flush();
    if (last) this._outbox.push(last);
  },

  _receive: function(replies) {
    if (!replies) return;
    replies = [].concat(replies);

    this.debug('Client ? received from ? via ?: ?',
               this._dispatcher.clientId, Faye.URI.stringify(this.endpoint), this.connectionType, replies);

    for (var i = 0, n = replies.length; i < n; i++)
      this._dispatcher.handleResponse(replies[i]);
  },

  _handleError: function(messages, immediate) {
    messages = [].concat(messages);

    this.debug('Client ? failed to send to ? via ?: ?',
               this._dispatcher.clientId, Faye.URI.stringify(this.endpoint), this.connectionType, messages);

    for (var i = 0, n = messages.length; i < n; i++)
      this._dispatcher.handleError(messages[i]);
  },

  _getCookies: function() {
    var cookies = this._dispatcher.cookies,
        url     = Faye.URI.stringify(this.endpoint);

    if (!cookies) return '';

    return Faye.map(cookies.getCookiesSync(url), function(cookie) {
      return cookie.cookieString();
    }).join('; ');
  },

  _storeCookies: function(setCookie) {
    var cookies = this._dispatcher.cookies,
        url     = Faye.URI.stringify(this.endpoint),
        cookie;

    if (!setCookie || !cookies) return;
    setCookie = [].concat(setCookie);

    for (var i = 0, n = setCookie.length; i < n; i++) {
      cookie = Faye.Cookies.Cookie.parse(setCookie[i]);
      cookies.setCookieSync(cookie, url);
    }
  }

}), {
  get: function(dispatcher, allowed, disabled, callback, context) {
    var endpoint = dispatcher.endpoint;

    Faye.asyncEach(this._transports, function(pair, resume) {
      var connType     = pair[0], klass = pair[1],
          connEndpoint = dispatcher.endpointFor(connType);

      if (Faye.indexOf(disabled, connType) >= 0)
        return resume();

      if (Faye.indexOf(allowed, connType) < 0) {
        klass.isUsable(dispatcher, connEndpoint, function() {});
        return resume();
      }

      klass.isUsable(dispatcher, connEndpoint, function(isUsable) {
        if (!isUsable) return resume();
        var transport = klass.hasOwnProperty('create') ? klass.create(dispatcher, connEndpoint) : new klass(dispatcher, connEndpoint);
        callback.call(context, transport);
      });
    }, function() {
      throw new Error('Could not find a usable connection type for ' + Faye.URI.stringify(endpoint));
    });
  },

  register: function(type, klass) {
    this._transports.push([type, klass]);
    klass.prototype.connectionType = type;
  },

  getConnectionTypes: function() {
    return Faye.map(this._transports, function(t) { return t[0] });
  },

  _transports: []
});

Faye.extend(Faye.Transport.prototype, Faye.Logging);
Faye.extend(Faye.Transport.prototype, Faye.Timeouts);

Faye.Event = {
  _registry: [],

  on: function(element, eventName, callback, context) {
    var wrapped = function() { callback.call(context) };

    if (element.addEventListener)
      element.addEventListener(eventName, wrapped, false);
    else
      element.attachEvent('on' + eventName, wrapped);

    this._registry.push({
      _element:   element,
      _type:      eventName,
      _callback:  callback,
      _context:     context,
      _handler:   wrapped
    });
  },

  detach: function(element, eventName, callback, context) {
    var i = this._registry.length, register;
    while (i--) {
      register = this._registry[i];

      if ((element    && element    !== register._element)   ||
          (eventName  && eventName  !== register._type)      ||
          (callback   && callback   !== register._callback)  ||
          (context      && context      !== register._context))
        continue;

      if (register._element.removeEventListener)
        register._element.removeEventListener(register._type, register._handler, false);
      else
        register._element.detachEvent('on' + register._type, register._handler);

      this._registry.splice(i,1);
      register = null;
    }
  }
};

if (Faye.ENV.onunload !== undefined) Faye.Event.on(Faye.ENV, 'unload', Faye.Event.detach, Faye.Event);

/*
    json2.js
    2013-05-26

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, regexp: true */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

if (typeof JSON !== 'object') {
    JSON = {};
}

(function () {
    'use strict';

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function () {

            return isFinite(this.valueOf())
                ? this.getUTCFullYear()     + '-' +
                    f(this.getUTCMonth() + 1) + '-' +
                    f(this.getUTCDate())      + 'T' +
                    f(this.getUTCHours())     + ':' +
                    f(this.getUTCMinutes())   + ':' +
                    f(this.getUTCSeconds())   + 'Z'
                : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function () {
                return this.valueOf();
            };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string'
                ? c
                : '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0
                    ? '[]'
                    : gap
                    ? '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']'
                    : '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0
                ? '{}'
                : gap
                ? '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}'
                : '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    Faye.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

        var i;
        gap = '';
        indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

        if (typeof space === 'number') {
            for (i = 0; i < space; i += 1) {
                indent += ' ';
            }

// If the space parameter is a string, it will be used as the indent string.

        } else if (typeof space === 'string') {
            indent = space;
        }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

        rep = replacer;
        if (replacer && typeof replacer !== 'function' &&
                (typeof replacer !== 'object' ||
                typeof replacer.length !== 'number')) {
            throw new Error('JSON.stringify');
        }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

        return str('', {'': value});
    };

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = Faye.stringify;
    }

// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function'
                    ? walk({'': j}, '')
                    : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());

Faye.Transport.WebSocket = Faye.extend(Faye.Class(Faye.Transport, {
  UNCONNECTED:  1,
  CONNECTING:   2,
  CONNECTED:    3,

  batching:     false,

  isUsable: function(callback, context) {
    this.callback(function() { callback.call(context, true) });
    this.errback(function() { callback.call(context, false) });
    this.connect();
  },

  request: function(messages) {
    this._pending = this._pending || new Faye.Set();
    for (var i = 0, n = messages.length; i < n; i++) this._pending.add(messages[i]);

    var promise = new Faye.Promise();

    this.callback(function(socket) {
      if (!socket || socket.readyState !== 1) return;
      socket.send(Faye.toJSON(messages));
      Faye.Promise.fulfill(promise, socket);
    }, this);

    this.connect();

    return {
      abort: function() { promise.then(function(ws) { ws.close() }) }
    };
  },

  connect: function() {
    if (Faye.Transport.WebSocket._unloaded) return;

    this._state = this._state || this.UNCONNECTED;
    if (this._state !== this.UNCONNECTED) return;
    this._state = this.CONNECTING;

    var socket = this._createSocket();
    if (!socket) return this.setDeferredStatus('failed');

    var self = this;

    socket.onopen = function() {
      if (socket.headers) self._storeCookies(socket.headers['set-cookie']);
      self._socket = socket;
      self._state = self.CONNECTED;
      self._everConnected = true;
      self._ping();
      self.setDeferredStatus('succeeded', socket);
    };

    var closed = false;
    socket.onclose = socket.onerror = function() {
      if (closed) return;
      closed = true;

      var wasConnected = (self._state === self.CONNECTED);
      socket.onopen = socket.onclose = socket.onerror = socket.onmessage = null;

      delete self._socket;
      self._state = self.UNCONNECTED;
      self.removeTimeout('ping');
      self.setDeferredStatus('unknown');

      var pending = self._pending ? self._pending.toArray() : [];
      delete self._pending;

      if (wasConnected) {
        self._handleError(pending, true);
      } else if (self._everConnected) {
        self._handleError(pending);
      } else {
        self.setDeferredStatus('failed');
      }
    };

    socket.onmessage = function(event) {
      var replies = JSON.parse(event.data);
      if (!replies) return;

      replies = [].concat(replies);

      for (var i = 0, n = replies.length; i < n; i++) {
        if (replies[i].successful === undefined) continue;
        self._pending.remove(replies[i]);
      }
      self._receive(replies);
    };
  },

  close: function() {
    if (!this._socket) return;
    this._socket.close();
  },

  _createSocket: function() {
    var url        = Faye.Transport.WebSocket.getSocketUrl(this.endpoint),
        headers    = this._dispatcher.headers,
        extensions = this._dispatcher.wsExtensions,
        cookie     = this._getCookies(),
        tls        = this._dispatcher.tls,
        options    = {extensions: extensions, headers: headers, proxy: this._proxy, tls: tls};

    if (cookie !== '') options.headers['Cookie'] = cookie;

    if (Faye.WebSocket)        return new Faye.WebSocket.Client(url, [], options);
    if (Faye.ENV.MozWebSocket) return new MozWebSocket(url);
    if (Faye.ENV.WebSocket)    return new WebSocket(url);
  },

  _ping: function() {
    if (!this._socket) return;
    this._socket.send('[]');
    this.addTimeout('ping', this._dispatcher.timeout / 2, this._ping, this);
  }

}), {
  PROTOCOLS: {
    'http:':  'ws:',
    'https:': 'wss:'
  },

  create: function(dispatcher, endpoint) {
    var sockets = dispatcher.transports.websocket = dispatcher.transports.websocket || {};
    sockets[endpoint.href] = sockets[endpoint.href] || new this(dispatcher, endpoint);
    return sockets[endpoint.href];
  },

  getSocketUrl: function(endpoint) {
    endpoint = Faye.copyObject(endpoint);
    endpoint.protocol = this.PROTOCOLS[endpoint.protocol];
    return Faye.URI.stringify(endpoint);
  },

  isUsable: function(dispatcher, endpoint, callback, context) {
    this.create(dispatcher, endpoint).isUsable(callback, context);
  }
});

Faye.extend(Faye.Transport.WebSocket.prototype, Faye.Deferrable);
Faye.Transport.register('websocket', Faye.Transport.WebSocket);

if (Faye.Event && Faye.ENV.onbeforeunload !== undefined)
  Faye.Event.on(Faye.ENV, 'beforeunload', function() {
    Faye.Transport.WebSocket._unloaded = true;
  });

Faye.Transport.EventSource = Faye.extend(Faye.Class(Faye.Transport, {
  initialize: function(dispatcher, endpoint) {
    Faye.Transport.prototype.initialize.call(this, dispatcher, endpoint);
    if (!Faye.ENV.EventSource) return this.setDeferredStatus('failed');

    this._xhr = new Faye.Transport.XHR(dispatcher, endpoint);

    endpoint = Faye.copyObject(endpoint);
    endpoint.pathname += '/' + dispatcher.clientId;

    var socket = new EventSource(Faye.URI.stringify(endpoint)),
        self   = this;

    socket.onopen = function() {
      self._everConnected = true;
      self.setDeferredStatus('succeeded');
    };

    socket.onerror = function() {
      if (self._everConnected) {
        self._handleError([]);
      } else {
        self.setDeferredStatus('failed');
        socket.close();
      }
    };

    socket.onmessage = function(event) {
      self._receive(JSON.parse(event.data));
    };

    this._socket = socket;
  },

  close: function() {
    if (!this._socket) return;
    this._socket.onopen = this._socket.onerror = this._socket.onmessage = null;
    this._socket.close();
    delete this._socket;
  },

  isUsable: function(callback, context) {
    this.callback(function() { callback.call(context, true) });
    this.errback(function() { callback.call(context, false) });
  },

  encode: function(messages) {
    return this._xhr.encode(messages);
  },

  request: function(messages) {
    return this._xhr.request(messages);
  }

}), {
  isUsable: function(dispatcher, endpoint, callback, context) {
    var id = dispatcher.clientId;
    if (!id) return callback.call(context, false);

    Faye.Transport.XHR.isUsable(dispatcher, endpoint, function(usable) {
      if (!usable) return callback.call(context, false);
      this.create(dispatcher, endpoint).isUsable(callback, context);
    }, this);
  },

  create: function(dispatcher, endpoint) {
    var sockets = dispatcher.transports.eventsource = dispatcher.transports.eventsource || {},
        id      = dispatcher.clientId;

    var url = Faye.copyObject(endpoint);
    url.pathname += '/' + (id || '');
    url = Faye.URI.stringify(url);

    sockets[url] = sockets[url] || new this(dispatcher, endpoint);
    return sockets[url];
  }
});

Faye.extend(Faye.Transport.EventSource.prototype, Faye.Deferrable);
Faye.Transport.register('eventsource', Faye.Transport.EventSource);

Faye.Transport.XHR = Faye.extend(Faye.Class(Faye.Transport, {
  encode: function(messages) {
    return Faye.toJSON(messages);
  },

  request: function(messages) {
    var href = this.endpoint.href,
        xhr  = Faye.ENV.ActiveXObject ? new ActiveXObject('Microsoft.XMLHTTP') : new XMLHttpRequest(),
        self = this;

    xhr.open('POST', href, true);
    xhr.setRequestHeader('Content-Type', 'application/json');
    xhr.setRequestHeader('Pragma', 'no-cache');
    xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');

    var headers = this._dispatcher.headers;
    for (var key in headers) {
      if (!headers.hasOwnProperty(key)) continue;
      xhr.setRequestHeader(key, headers[key]);
    }

    var abort = function() { xhr.abort() };
    if (Faye.ENV.onbeforeunload !== undefined) Faye.Event.on(Faye.ENV, 'beforeunload', abort);

    xhr.onreadystatechange = function() {
      if (!xhr || xhr.readyState !== 4) return;

      var replies    = null,
          status     = xhr.status,
          text       = xhr.responseText,
          successful = (status >= 200 && status < 300) || status === 304 || status === 1223;

      if (Faye.ENV.onbeforeunload !== undefined) Faye.Event.detach(Faye.ENV, 'beforeunload', abort);
      xhr.onreadystatechange = function() {};
      xhr = null;

      if (!successful) return self._handleError(messages);

      try {
        replies = JSON.parse(text);
      } catch (e) {}

      if (replies)
        self._receive(replies);
      else
        self._handleError(messages);
    };

    xhr.send(this.encode(messages));
    return xhr;
  }
}), {
  isUsable: function(dispatcher, endpoint, callback, context) {
    callback.call(context, Faye.URI.isSameOrigin(endpoint));
  }
});

Faye.Transport.register('long-polling', Faye.Transport.XHR);

Faye.Transport.CORS = Faye.extend(Faye.Class(Faye.Transport, {
  encode: function(messages) {
    return 'message=' + encodeURIComponent(Faye.toJSON(messages));
  },

  request: function(messages) {
    var xhrClass = Faye.ENV.XDomainRequest ? XDomainRequest : XMLHttpRequest,
        xhr      = new xhrClass(),
        id       = ++Faye.Transport.CORS._id,
        headers  = this._dispatcher.headers,
        self     = this,
        key;

    xhr.open('POST', Faye.URI.stringify(this.endpoint), true);

    if (xhr.setRequestHeader) {
      xhr.setRequestHeader('Pragma', 'no-cache');
      for (key in headers) {
        if (!headers.hasOwnProperty(key)) continue;
        xhr.setRequestHeader(key, headers[key]);
      }
    }

    var cleanUp = function() {
      if (!xhr) return false;
      Faye.Transport.CORS._pending.remove(id);
      xhr.onload = xhr.onerror = xhr.ontimeout = xhr.onprogress = null;
      xhr = null;
    };

    xhr.onload = function() {
      var replies = null;
      try {
        replies = JSON.parse(xhr.responseText);
      } catch (e) {}

      cleanUp();

      if (replies)
        self._receive(replies);
      else
        self._handleError(messages);
    };

    xhr.onerror = xhr.ontimeout = function() {
      cleanUp();
      self._handleError(messages);
    };

    xhr.onprogress = function() {};

    if (xhrClass === Faye.ENV.XDomainRequest)
      Faye.Transport.CORS._pending.add({id: id, xhr: xhr});

    xhr.send(this.encode(messages));
    return xhr;
  }
}), {
  _id:      0,
  _pending: new Faye.Set(),

  isUsable: function(dispatcher, endpoint, callback, context) {
    if (Faye.URI.isSameOrigin(endpoint))
      return callback.call(context, false);

    if (Faye.ENV.XDomainRequest)
      return callback.call(context, endpoint.protocol === Faye.ENV.location.protocol);

    if (Faye.ENV.XMLHttpRequest) {
      var xhr = new Faye.ENV.XMLHttpRequest();
      return callback.call(context, xhr.withCredentials !== undefined);
    }
    return callback.call(context, false);
  }
});

Faye.Transport.register('cross-origin-long-polling', Faye.Transport.CORS);

Faye.Transport.JSONP = Faye.extend(Faye.Class(Faye.Transport, {
 encode: function(messages) {
    var url = Faye.copyObject(this.endpoint);
    url.query.message = Faye.toJSON(messages);
    url.query.jsonp   = '__jsonp' + Faye.Transport.JSONP._cbCount + '__';
    return Faye.URI.stringify(url);
  },

  request: function(messages) {
    var head         = document.getElementsByTagName('head')[0],
        script       = document.createElement('script'),
        callbackName = Faye.Transport.JSONP.getCallbackName(),
        endpoint     = Faye.copyObject(this.endpoint),
        self         = this;

    endpoint.query.message = Faye.toJSON(messages);
    endpoint.query.jsonp   = callbackName;

    var cleanup = function() {
      if (!Faye.ENV[callbackName]) return false;
      Faye.ENV[callbackName] = undefined;
      try { delete Faye.ENV[callbackName] } catch (e) {}
      script.parentNode.removeChild(script);
    };

    Faye.ENV[callbackName] = function(replies) {
      cleanup();
      self._receive(replies);
    };

    script.type = 'text/javascript';
    script.src  = Faye.URI.stringify(endpoint);
    head.appendChild(script);

    script.onerror = function() {
      cleanup();
      self._handleError(messages);
    };

    return {abort: cleanup};
  }
}), {
  _cbCount: 0,

  getCallbackName: function() {
    this._cbCount += 1;
    return '__jsonp' + this._cbCount + '__';
  },

  isUsable: function(dispatcher, endpoint, callback, context) {
    callback.call(context, true);
  }
});

Faye.Transport.register('callback-polling', Faye.Transport.JSONP);

})();
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"_process":97}],42:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],43:[function(require,module,exports){
/**
 * Determine if an object is Buffer
 *
 * Author:   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * License:  MIT
 *
 * `npm install is-buffer`
 */

module.exports = function (obj) {
  return !!(obj != null &&
    (obj._isBuffer || // For Safari 5-7 (missing Object.prototype.constructor)
      (obj.constructor &&
      typeof obj.constructor.isBuffer === 'function' &&
      obj.constructor.isBuffer(obj))
    ))
}

},{}],44:[function(require,module,exports){
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

},{}],45:[function(require,module,exports){
/**
 * @file Manages Salesforce Analytics API
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var _ = require('lodash/core'),
    jsforce = require('../core'),
    Promise  = require('../promise');

/**
 * Report instance to retrieving asynchronously executed result
 *
 * @protected
 * @class Analytics~ReportInstance
 * @param {Analytics~Report} report - Report
 * @param {String} id - Report instance id
 */
var ReportInstance = function(report, id) {
  this._report = report;
  this._conn = report._conn;
  this.id = id;
};

/**
 * Retrieve report result asynchronously executed
 *
 * @method Analytics~ReportInstance#retrieve
 * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function
 * @returns {Promise.<Analytics~ReportResult>}
 */
ReportInstance.prototype.retrieve = function(callback) {
  var conn = this._conn,
      report = this._report;
  var url = [ conn._baseUrl(), "analytics", "reports", report.id, "instances", this.id ].join('/');
  return conn.request(url).thenCall(callback);
};

/**
 * Report object in Analytics API
 *
 * @protected
 * @class Analytics~Report
 * @param {Connection} conn Connection
 */
var Report = function(conn, id) {
  this._conn = conn;
  this.id = id;
};

/**
 * Describe report metadata
 *
 * @method Analytics~Report#describe
 * @param {Callback.<Analytics~ReportMetadata>} [callback] - Callback function
 * @returns {Promise.<Analytics~ReportMetadata>}
 */
Report.prototype.describe = function(callback) {
  var url = [ this._conn._baseUrl(), "analytics", "reports", this.id, "describe" ].join('/');
  return this._conn.request(url).thenCall(callback);
};

/**
 * Explain plan for executing report
 *
 * @method Analytics~Report#explain
 * @param {Callback.<ExplainInfo>} [callback] - Callback function
 * @returns {Promise.<ExplainInfo>}
 */
Report.prototype.explain = function(callback) {
  var url = "/query/?explain=" + this.id;
  return this._conn.request(url).thenCall(callback);
};


/**
 * Run report synchronously
 *
 * @method Analytics~Report#execute
 * @param {Object} [options] - Options
 * @param {Boolean} options.details - Flag if include detail in result
 * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata
 * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function
 * @returns {Promise.<Analytics~ReportResult>}
 */
Report.prototype.run =
Report.prototype.exec =
Report.prototype.execute = function(options, callback) {
  options = options || {};
  if (_.isFunction(options)) {
    callback = options;
    options = {};
  }
  var url = [ this._conn._baseUrl(), "analytics", "reports", this.id ].join('/');
  url += "?includeDetails=" + (options.details ? "true" : "false");
  var params = { method : options.metadata ? 'POST' : 'GET', url : url };
  if (options.metadata) {
    params.headers = { "Content-Type" : "application/json" };
    params.body = JSON.stringify(options.metadata);
  }
  return this._conn.request(params).thenCall(callback);
};


/**
 * Run report asynchronously
 *
 * @method Analytics~Report#executeAsync
 * @param {Object} [options] - Options
 * @param {Boolean} options.details - Flag if include detail in result
 * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata
 * @param {Callback.<Analytics~ReportInstanceAttrs>} [callback] - Callback function
 * @returns {Promise.<Analytics~ReportInstanceAttrs>}
 */
Report.prototype.executeAsync = function(options, callback) {
  options = options || {};
  if (_.isFunction(options)) {
    callback = options;
    options = {};
  }
  var url = [ this._conn._baseUrl(), "analytics", "reports", this.id, "instances" ].join('/');
  if (options.details) {
    url += "?includeDetails=true";
  }
  var params = { method : 'POST', url : url, body: "" };
  if (options.metadata) {
    params.headers = { "Content-Type" : "application/json" };
    params.body = JSON.stringify(options.metadata);
  }
  return this._conn.request(params).thenCall(callback);
};

/**
 * Get report instance for specified instance ID
 *
 * @method Analytics~Report#instance
 * @param {String} id - Report instance ID
 * @returns {Analytics~ReportInstance}
 */
Report.prototype.instance = function(id) {
  return new ReportInstance(this, id);
};

/**
 * List report instances which had been executed asynchronously
 *
 * @method Analytics~Report#instances
 * @param {Callback.<Array.<Analytics~ReportInstanceAttrs>>} [callback] - Callback function
 * @returns {Promise.<Array.<Analytics~ReportInstanceAttrs>>}
 */
Report.prototype.instances = function(callback) {
  var url = [ this._conn._baseUrl(), "analytics", "reports", this.id, "instances" ].join('/');
  return this._conn.request(url).thenCall(callback);
};


/**
 * API class for Analytics API
 *
 * @class
 * @param {Connection} conn Connection
 */
var Analytics = function(conn) {
  this._conn = conn;
};

/**
 * Get report object of Analytics API
 *
 * @param {String} id - Report Id
 * @returns {Analytics~Report}
 */
Analytics.prototype.report = function(id) {
  return new Report(this._conn, id);
};

/**
 * Get recent report list
 *
 * @param {Callback.<Array.<Analytics~ReportInfo>>} [callback] - Callback function
 * @returns {Promise.<Array.<Analytics~ReportInfo>>}
 */
Analytics.prototype.reports = function(callback) {
  var url = [ this._conn._baseUrl(), "analytics", "reports" ].join('/');
  return this._conn.request(url).thenCall(callback);
};


/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
jsforce.on('connection:new', function(conn) {
  conn.analytics = new Analytics(conn);
});


module.exports = Analytics;

},{"../core":61,"../promise":68,"lodash/core":79}],46:[function(require,module,exports){
/**
 * @file Manages Salesforce Apex REST endpoint calls
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var jsforce = require('../core');

/**
 * API class for Apex REST endpoint call
 *
 * @class
 * @param {Connection} conn Connection
 */
var Apex = function(conn) {
  this._conn = conn;
};

/**
 * @private
 */
Apex.prototype._baseUrl = function() {
  return this._conn.instanceUrl + "/services/apexrest";
};

/**
 * @private
 */
Apex.prototype._createRequestParams = function(method, path, body, options) {
  var params = {
    method: method,
    url: this._baseUrl() + path
  },
  _headers = {};
  if(options && 'object' === typeof options['headers']){
    _headers = options['headers'];
  }
  if (!/^(GET|DELETE)$/i.test(method)) {
    _headers["Content-Type"] = "application/json";
  }
  params.headers = _headers;
  if (body) {
    params.body = JSON.stringify(body);
  }
  return params;
};

/**
 * Call Apex REST service in GET request
 *
 * @param {String} path - URL path to Apex REST service
 * @param {Object} options - Holds headers and other meta data for the request.
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Apex.prototype.get = function(path, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = undefined;
  }
  return this._conn.request(this._createRequestParams('GET', path, undefined, options)).thenCall(callback);
};

/**
 * Call Apex REST service in POST request
 *
 * @param {String} path - URL path to Apex REST service
 * @param {Object} [body] - Request body
 * @param {Object} options - Holds headers and other meta data for the request.
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Apex.prototype.post = function(path, body, options, callback) {
  if (typeof body === 'function') {
    callback = body;
    body = undefined;
    options = undefined;
  }
  if (typeof options === 'function') {
    callback = options;
    options = undefined;
  }
  var params = this._createRequestParams('POST', path, body, options);
  return this._conn.request(params).thenCall(callback);
};

/**
 * Call Apex REST service in PUT request
 *
 * @param {String} path - URL path to Apex REST service
 * @param {Object} [body] - Request body
 * @param {Object} [options] - Holds headers and other meta data for the request.
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Apex.prototype.put = function(path, body, options, callback) {
  if (typeof body === 'function') {
    callback = body;
    body = undefined;
    options = undefined;
  }
  if (typeof options === 'function') {
    callback = options;
    options = undefined;
  }
  var params = this._createRequestParams('PUT', path, body, options);
  return this._conn.request(params).thenCall(callback);
};

/**
 * Call Apex REST service in PATCH request
 *
 * @param {String} path - URL path to Apex REST service
 * @param {Object} [body] - Request body
 * @param {Object} [options] - Holds headers and other meta data for the request.
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Apex.prototype.patch = function(path, body, options, callback) {
  if (typeof body === 'function') {
    callback = body;
    body = undefined;
    options = undefined;
  }
  if (typeof options === 'function') {
    callback = options;
    options = undefined;
  }
  var params = this._createRequestParams('PATCH', path, body, options);
  return this._conn.request(params).thenCall(callback);
};

/**
 * Synonym of Apex#delete()
 *
 * @method Apex#del
 *
 * @param {String} path - URL path to Apex REST service
 * @param {Object} [body] - Request body
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
/**
 * Call Apex REST service in DELETE request
 *
 * @method Apex#delete
 *
 * @param {String} path - URL path to Apex REST service
 * @param {Object} [body] - Request body
 * @param {Object} [options] - Holds headers and other meta data for the request.
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Apex.prototype.del =
  Apex.prototype["delete"] = function(path, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = undefined;
  }
  return this._conn.request(this._createRequestParams('DELETE', path, undefined, options)).thenCall(callback);
};


/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
jsforce.on('connection:new', function(conn) {
  conn.apex = new Apex(conn);
});


module.exports = Apex;

},{"../core":61}],47:[function(require,module,exports){
(function (process){
/*global process*/
/**
 * @file Manages Salesforce Bulk API related operations
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var inherits     = require('inherits'),
    stream       = require('readable-stream'),
    Duplex       = stream.Duplex,
    events       = require('events'),
    _            = require('lodash/core'),
    jsforce      = require('../core'),
    RecordStream = require('../record-stream'),
    CSV          = require('../csv'),
    Promise      = require('../promise'),
    HttpApi      = require('../http-api');

/*--------------------------------------------*/

/**
 * Class for Bulk API Job
 *
 * @protected
 * @class Bulk~Job
 * @extends events.EventEmitter
 *
 * @param {Bulk} bulk - Bulk API object
 * @param {String} [type] - SObject type
 * @param {String} [operation] - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')
 * @param {Object} [options] - Options for bulk loading operation
 * @param {String} [options.extIdField] - External ID field name (used when upsert operation).
 * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.
 * @param {String} [jobId] - Job ID (if already available)
 */
var Job = function(bulk, type, operation, options, jobId) {
  this._bulk = bulk;
  this.type = type;
  this.operation = operation;
  this.options = options || {};
  this.id = jobId;
  this.state = this.id ? 'Open' : 'Unknown';
  this._batches = {};
};

inherits(Job, events.EventEmitter);

/**
 * @typedef {Object} Bulk~JobInfo
 * @prop {String} id - Job ID
 * @prop {String} object - Object type name
 * @prop {String} operation - Operation type of the job
 * @prop {String} state - Job status
 */

/**
 * Return latest jobInfo from cache
 *
 * @method Bulk~Job#open
 * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function
 * @returns {Promise.<Bulk~JobInfo>}
 */
Job.prototype.info = function(callback) {
  var self = this;
  // if cache is not available, check the latest
  if (!this._jobInfo) {
    this._jobInfo = this.check();
  }
  return this._jobInfo.thenCall(callback);
};

/**
 * Open new job and get jobinfo
 *
 * @method Bulk~Job#open
 * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function
 * @returns {Promise.<Bulk~JobInfo>}
 */
Job.prototype.open = function(callback) {
  var self = this;
  var bulk = this._bulk;
  var logger = bulk._logger;

  // if not requested opening job
  if (!this._jobInfo) {
    var operation = this.operation.toLowerCase();
    if (operation === 'harddelete') { operation = 'hardDelete'; }
    var body = [
      '<?xml version="1.0" encoding="UTF-8"?>',
      '<jobInfo  xmlns="http://www.force.com/2009/06/asyncapi/dataload">',
        '<operation>' + operation + '</operation>',
        '<object>' + this.type + '</object>',
        (this.options.extIdField ?
         '<externalIdFieldName>'+this.options.extIdField+'</externalIdFieldName>' :
         ''),
        (this.options.concurrencyMode ?
         '<concurrencyMode>'+this.options.concurrencyMode+'</concurrencyMode>' :
         ''),
        (this.options.assignmentRuleId ?
          '<assignmentRuleId>' + this.options.assignmentRuleId + '</assignmentRuleId>' :
          ''),
        '<contentType>CSV</contentType>',
      '</jobInfo>'
    ].join('');

    this._jobInfo = bulk._request({
      method : 'POST',
      path : "/job",
      body : body,
      headers : {
        "Content-Type" : "application/xml; charset=utf-8"
      },
      responseType: "application/xml"
    }).then(function(res) {
      self.emit("open", res.jobInfo);
      self.id = res.jobInfo.id;
      self.state = res.jobInfo.state;
      return res.jobInfo;
    }, function(err) {
      self.emit("error", err);
      throw err;
    });
  }
  return this._jobInfo.thenCall(callback);
};

/**
 * Create a new batch instance in the job
 *
 * @method Bulk~Job#createBatch
 * @returns {Bulk~Batch}
 */
Job.prototype.createBatch = function() {
  var batch = new Batch(this);
  var self = this;
  batch.on('queue', function() {
    self._batches[batch.id] = batch;
  });
  return batch;
};

/**
 * Get a batch instance specified by given batch ID
 *
 * @method Bulk~Job#batch
 * @param {String} batchId - Batch ID
 * @returns {Bulk~Batch}
 */
Job.prototype.batch = function(batchId) {
  var batch = this._batches[batchId];
  if (!batch) {
    batch = new Batch(this, batchId);
    this._batches[batchId] = batch;
  }
  return batch;
};

/**
 * Check the latest job status from server
 *
 * @method Bulk~Job#check
 * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function
 * @returns {Promise.<Bulk~JobInfo>}
 */
Job.prototype.check = function(callback) {
  var self = this;
  var bulk = this._bulk;
  var logger = bulk._logger;

  this._jobInfo = this._waitAssign().then(function() {
    return bulk._request({
      method : 'GET',
      path : "/job/" + self.id,
      responseType: "application/xml"
    });
  }).then(function(res) {
    logger.debug(res.jobInfo);
    self.id = res.jobInfo.id;
    self.type = res.jobInfo.object;
    self.operation = res.jobInfo.operation;
    self.state = res.jobInfo.state;
    return res.jobInfo;
  });
  return this._jobInfo.thenCall(callback);
};

/**
 * Wait till the job is assigned to server
 *
 * @method Bulk~Job#info
 * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function
 * @returns {Promise.<Bulk~JobInfo>}
 */
Job.prototype._waitAssign = function(callback) {
  return (this.id ? Promise.resolve({ id: this.id }) : this.open()).thenCall(callback);
};


/**
 * List all registered batch info in job
 *
 * @method Bulk~Job#list
 * @param {Callback.<Array.<Bulk~BatchInfo>>} [callback] - Callback function
 * @returns {Promise.<Array.<Bulk~BatchInfo>>}
 */
Job.prototype.list = function(callback) {
  var self = this;
  var bulk = this._bulk;
  var logger = bulk._logger;

  return this._waitAssign().then(function() {
    return bulk._request({
      method : 'GET',
      path : "/job/" + self.id + "/batch",
      responseType: "application/xml"
    });
  }).then(function(res) {
    logger.debug(res.batchInfoList.batchInfo);
    var batchInfoList = res.batchInfoList;
    batchInfoList = _.isArray(batchInfoList.batchInfo) ? batchInfoList.batchInfo : [ batchInfoList.batchInfo ];
    return batchInfoList;
  }).thenCall(callback);

};

/**
 * Close opened job
 *
 * @method Bulk~Job#close
 * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function
 * @returns {Promise.<Bulk~JobInfo>}
 */
Job.prototype.close = function() {
  var self = this;
  return this._changeState("Closed").then(function(jobInfo) {
    self.id = null;
    self.emit("close", jobInfo);
    return jobInfo;
  }, function(err) {
    self.emit("error", err);
    throw err;
  });
};

/**
 * Set the status to abort
 *
 * @method Bulk~Job#abort
 * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function
 * @returns {Promise.<Bulk~JobInfo>}
 */
Job.prototype.abort = function() {
  var self = this;
  return this._changeState("Aborted").then(function(jobInfo) {
    self.id = null;
    self.emit("abort", jobInfo);
    return jobInfo;
  }, function(err) {
    self.emit("error", err);
    throw err;
  });
};

/**
 * @private
 */
Job.prototype._changeState = function(state, callback) {
  var self = this;
  var bulk = this._bulk;
  var logger = bulk._logger;

  this._jobInfo = this._waitAssign().then(function() {
    var body = [
      '<?xml version="1.0" encoding="UTF-8"?>',
      '<jobInfo xmlns="http://www.force.com/2009/06/asyncapi/dataload">',
        '<state>' + state + '</state>',
      '</jobInfo>'
    ].join('');
    return bulk._request({
      method : 'POST',
      path : "/job/" + self.id,
      body : body,
      headers : {
        "Content-Type" : "application/xml; charset=utf-8"
      },
      responseType: "application/xml"
    });
  }).then(function(res) {
    logger.debug(res.jobInfo);
    self.state = res.jobInfo.state;
    return res.jobInfo;
  });
  return this._jobInfo.thenCall(callback);

};


/*--------------------------------------------*/

/**
 * Batch (extends RecordStream)
 *
 * @protected
 * @class Bulk~Batch
 * @extends {stream.Writable}
 * @implements {Promise.<Array.<RecordResult>>}
 * @param {Bulk~Job} job - Bulk job object
 * @param {String} [batchId] - Batch ID (if already available)
 */
var Batch = function(job, batchId) {
  Batch.super_.call(this, { objectMode: true });
  this.job = job;
  this.id = batchId;
  this._bulk = job._bulk;
  this._deferred = Promise.defer();
  this._setupDataStreams();
};

inherits(Batch, stream.Writable);


/**
 * @private
 */
Batch.prototype._setupDataStreams = function() {
  var batch = this;
  var converterOptions = { nullValue : '#N/A' };
  this._uploadStream = new RecordStream.Serializable();
  this._uploadDataStream = this._uploadStream.stream('csv', converterOptions);
  this._downloadStream = new RecordStream.Parsable();
  this._downloadDataStream = this._downloadStream.stream('csv', converterOptions);

  this.on('finish', function() {
    batch._uploadStream.end();
  });
  this._uploadDataStream.once('readable', function() {
    batch.job.open().then(function() {
      // pipe upload data to batch API request stream
      batch._uploadDataStream.pipe(batch._createRequestStream());
    });
  });

  // duplex data stream, opened access to API programmers by Batch#stream()
  var dataStream = this._dataStream = new Duplex();
  dataStream._write = function(data, enc, cb) {
    batch._uploadDataStream.write(data, enc, cb);
  };
  dataStream.on('finish', function() {
    batch._uploadDataStream.end();
  });

  this._downloadDataStream.on('readable', function() {
    dataStream.read(0);
  });
  this._downloadDataStream.on('end', function() {
    dataStream.push(null);
  });
  dataStream._read = function(size) {
    var chunk;
    while ((chunk = batch._downloadDataStream.read()) !== null) {
      dataStream.push(chunk);
    }
  };
};

/**
 * Connect batch API and create stream instance of request/response
 *
 * @private
 * @returns {stream.Duplex}
 */
Batch.prototype._createRequestStream = function() {
  var batch = this;
  var bulk = batch._bulk;
  var logger = bulk._logger;

  return bulk._request({
    method : 'POST',
    path : "/job/" + batch.job.id + "/batch",
    headers: {
      "Content-Type": "text/csv"
    },
    responseType: "application/xml"
  }, function(err, res) {
    if (err) {
      batch.emit('error', err);
    } else {
      logger.debug(res.batchInfo);
      batch.id = res.batchInfo.id;
      batch.emit('queue', res.batchInfo);
    }
  }).stream();
};

/**
 * Implementation of Writable
 *
 * @override
 * @private
 */
Batch.prototype._write = function(record, enc, cb) {
  record = _.clone(record);
  if (this.job.operation === "insert") {
    delete record.Id;
  } else if (this.job.operation === "delete") {
    record = { Id: record.Id };
  }
  delete record.type;
  delete record.attributes;
  this._uploadStream.write(record, enc, cb);
};

/**
 * Returns duplex stream which accepts CSV data input and batch result output
 *
 * @returns {stream.Duplex}
 */
Batch.prototype.stream = function() {
  return this._dataStream;
};

/**
 * Execute batch operation
 *
 * @method Bulk~Batch#execute
 * @param {Array.<Record>|stream.Stream|String} [input] - Input source for batch operation. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.
 * @param {Callback.<Array.<RecordResult>|Array.<BatchResultInfo>>} [callback] - Callback function
 * @returns {Bulk~Batch}
 */
Batch.prototype.run =
Batch.prototype.exec =
Batch.prototype.execute = function(input, callback) {
  var self = this;

  if (typeof input === 'function') { // if input argument is omitted
    callback = input;
    input = null;
  }

  // if batch is already executed
  if (this._result) {
    throw new Error("Batch already executed.");
  }

  var rdeferred = Promise.defer();
  this._result = rdeferred.promise;
  this._result.then(function(res) {
    self._deferred.resolve(res);
  }, function(err) {
    self._deferred.reject(err);
  });
  this.once('response', function(res) {
    rdeferred.resolve(res);
  });
  this.once('error', function(err) {
    rdeferred.reject(err);
  });

  if (_.isObject(input) && _.isFunction(input.pipe)) { // if input has stream.Readable interface
    input.pipe(this._dataStream);
  } else {
    var data;
    if (_.isArray(input)) {
      _.forEach(input, function(record) { self.write(record); });
      self.end();
    } else if (_.isString(input)){
      data = input;
      this._dataStream.write(data, 'utf8');
      this._dataStream.end();
    }
  }

  // return Batch instance for chaining
  return this.thenCall(callback);
};

/**
 * Promise/A+ interface
 * http://promises-aplus.github.io/promises-spec/
 *
 * Delegate to deferred promise, return promise instance for batch result
 *
 * @method Bulk~Batch#then
 */
Batch.prototype.then = function(onResolved, onReject, onProgress) {
  return this._deferred.promise.then(onResolved, onReject, onProgress);
};

/**
 * Promise/A+ extension
 * Call "then" using given node-style callback function
 *
 * @method Bulk~Batch#thenCall
 */
Batch.prototype.thenCall = function(callback) {
  if (_.isFunction(callback)) {
    this.then(function(res) {
      process.nextTick(function() {
        callback(null, res);
      });
    }, function(err) {
      process.nextTick(function() {
        callback(err);
      });
    });
  }
  return this;
};

/**
 * @typedef {Object} Bulk~BatchInfo
 * @prop {String} id - Batch ID
 * @prop {String} jobId - Job ID
 * @prop {String} state - Batch state
 * @prop {String} stateMessage - Batch state message
 */

/**
 * Check the latest batch status in server
 *
 * @method Bulk~Batch#check
 * @param {Callback.<Bulk~BatchInfo>} [callback] - Callback function
 * @returns {Promise.<Bulk~BatchInfo>}
 */
Batch.prototype.check = function(callback) {
  var self = this;
  var bulk = this._bulk;
  var logger = bulk._logger;
  var jobId = this.job.id;
  var batchId = this.id;

  if (!jobId || !batchId) {
    throw new Error("Batch not started.");
  }
  return bulk._request({
    method : 'GET',
    path : "/job/" + jobId + "/batch/" + batchId,
    responseType: "application/xml"
  }).then(function(res) {
    logger.debug(res.batchInfo);
    return res.batchInfo;
  }).thenCall(callback);
};


/**
 * Polling the batch result and retrieve
 *
 * @method Bulk~Batch#poll
 * @param {Number} interval - Polling interval in milliseconds
 * @param {Number} timeout - Polling timeout in milliseconds
 */
Batch.prototype.poll = function(interval, timeout) {
  var self = this;
  var jobId = this.job.id;
  var batchId = this.id;

  if (!jobId || !batchId) {
    throw new Error("Batch not started.");
  }
  var startTime = new Date().getTime();
  var poll = function() {
    var now = new Date().getTime();
    if (startTime + timeout < now) {
      var err = new Error("Polling time out. Job Id = " + jobId + " , batch Id = " + batchId);
      err.name = 'PollingTimeout';
      self.emit('error', err);
      return;
    }
    self.check(function(err, res) {
      if (err) {
        self.emit('error', err);
      } else {
        if (res.state === "Failed") {
          if (parseInt(res.numberRecordsProcessed, 10) > 0) {
            self.retrieve();
          } else {
            self.emit('error', new Error(res.stateMessage));
          }
        } else if (res.state === "Completed") {
          self.retrieve();
        } else {
          self.emit('progress', res);
          setTimeout(poll, interval);
        }
      }
    });
  };
  setTimeout(poll, interval);
};

/**
 * @typedef {Object} Bulk~BatchResultInfo
 * @prop {String} id - Batch result ID
 * @prop {String} batchId - Batch ID which includes this batch result.
 * @prop {String} jobId - Job ID which includes this batch result.
 */

/**
 * Retrieve batch result
 *
 * @method Bulk~Batch#retrieve
 * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function
 * @returns {Promise.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>}
 */
Batch.prototype.retrieve = function(callback) {
  var self = this;
  var bulk = this._bulk;
  var jobId = this.job.id;
  var job = this.job;
  var batchId = this.id;

  if (!jobId || !batchId) {
    throw new Error("Batch not started.");
  }

  return job.info().then(function(jobInfo) {
    return bulk._request({
      method : 'GET',
      path : "/job/" + jobId + "/batch/" + batchId + "/result"
    });
  }).then(function(res) {
    var results;
    if (job.operation === 'query') {
      var conn = bulk._conn;
      var resultIds = res['result-list'].result;
      results = res['result-list'].result;
      results = _.map(_.isArray(results) ? results : [ results ], function(id) {
        return {
          id: id,
          batchId: batchId,
          jobId: jobId
        };
      });
    } else {
      results = _.map(res, function(ret) {
        return {
          id: ret.Id || null,
          success: ret.Success === "true",
          errors: ret.Error ? [ ret.Error ] : []
        };
      });
    }
    self.emit('response', results);
    return results;
  }).fail(function(err) {
    self.emit('error', err);
    throw err;
  }).thenCall(callback);
};

/**
 * Fetch query result as a record stream
 * @param {String} resultId - Result id
 * @returns {RecordStream} - Record stream, convertible to CSV data stream
 */
Batch.prototype.result = function(resultId) {
  var jobId = this.job.id;
  var batchId = this.id;
  if (!jobId || !batchId) {
    throw new Error("Batch not started.");
  }
  var resultStream = new RecordStream.Parsable();
  var resultDataStream = resultStream.stream('csv');
  var reqStream = this._bulk._request({
    method : 'GET',
    path : "/job/" + jobId + "/batch/" + batchId + "/result/" + resultId
  }).stream().pipe(resultDataStream);
  return resultStream;
};

/*--------------------------------------------*/
/**
 * @private
 */
var BulkApi = function() {
  BulkApi.super_.apply(this, arguments);
};

inherits(BulkApi, HttpApi);

BulkApi.prototype.beforeSend = function(request) {
  request.headers = request.headers || {};
  request.headers["X-SFDC-SESSION"] = this._conn.accessToken;
};

BulkApi.prototype.isSessionExpired = function(response) {
  return response.statusCode === 400 &&
    /<exceptionCode>InvalidSessionId<\/exceptionCode>/.test(response.body);
};

BulkApi.prototype.hasErrorInResponseBody = function(body) {
  return !!body.error;
};

BulkApi.prototype.parseError = function(body) {
  return {
    errorCode: body.error.exceptionCode,
    message: body.error.exceptionMessage
  };
};

/*--------------------------------------------*/

/**
 * Class for Bulk API
 *
 * @class
 * @param {Connection} conn - Connection object
 */
var Bulk = function(conn) {
  this._conn = conn;
  this._logger = conn._logger;
};

/**
 * Polling interval in milliseconds
 * @type {Number}
 */
Bulk.prototype.pollInterval = 1000;

/**
 * Polling timeout in milliseconds
 * @type {Number}
 */
Bulk.prototype.pollTimeout = 10000;

/** @private **/
Bulk.prototype._request = function(request, callback) {
  var conn = this._conn;
  request = _.clone(request);
  var baseUrl = [ conn.instanceUrl, "services/async", conn.version ].join('/');
  request.url = baseUrl + request.path;
  var options = { responseType: request.responseType };
  delete request.path;
  delete request.responseType;
  return new BulkApi(this._conn, options).request(request).thenCall(callback);
};

/**
 * Create and start bulkload job and batch
 *
 * @param {String} type - SObject type
 * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')
 * @param {Object} [options] - Options for bulk loading operation
 * @param {String} [options.extIdField] - External ID field name (used when upsert operation).
 * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.
 * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.
 * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function
 * @returns {Bulk~Batch}
 */
Bulk.prototype.load = function(type, operation, options, input, callback) {
  var self = this;
  if (!type || !operation) {
    throw new Error("Insufficient arguments. At least, 'type' and 'operation' are required.");
  }
  if (!_.isObject(options) || options.constructor !== Object) { // when options is not plain hash object, it is omitted
    callback = input;
    input = options;
    options = null;
  }
  var job = this.createJob(type, operation, options);
  job.once('error', function (error) {
    if (batch) {
      batch.emit('error', error); // pass job error to batch
    }
  });
  var batch = job.createBatch();
  var cleanup = function() {
    batch = null;
    job.close();
  };
  var cleanupOnError = function(err) {
    if (err.name !== 'PollingTimeout') {
      cleanup();
    }
  };
  batch.on('response', cleanup);
  batch.on('error', cleanupOnError);
  batch.on('queue', function() { batch.poll(self.pollInterval, self.pollTimeout); });
  return batch.execute(input, callback);
};

/**
 * Execute bulk query and get record stream
 *
 * @param {String} soql - SOQL to execute in bulk job
 * @returns {RecordStream.Parsable} - Record stream, convertible to CSV data stream
 */
Bulk.prototype.query = function(soql) {
  var m = soql.replace(/\([\s\S]+\)/g, '').match(/FROM\s+(\w+)/i);
  if (!m) {
    throw new Error("No sobject type found in query, maybe caused by invalid SOQL.");
  }
  var type = m[1];
  var self = this;
  var recordStream = new RecordStream.Parsable();
  var dataStream = recordStream.stream('csv');
  this.load(type, "query", soql).then(function(results) {
    // Ideally, it should merge result files into one stream.
    // Currently only first batch result is the target (mostly enough).
    var r = results[0];
    var result = self.job(r.jobId).batch(r.batchId).result(r.id);
    result.stream().pipe(dataStream);
  }).fail(function(err) {
    recordStream.emit('error', err);
  });
  return recordStream;
};


/**
 * Create a new job instance
 *
 * @param {String} type - SObject type
 * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', 'hardDelete', or 'query')
 * @param {Object} [options] - Options for bulk loading operation
 * @returns {Bulk~Job}
 */
Bulk.prototype.createJob = function(type, operation, options) {
  return new Job(this, type, operation, options);
};

/**
 * Get a job instance specified by given job ID
 *
 * @param {String} jobId - Job ID
 * @returns {Bulk~Job}
 */
Bulk.prototype.job = function(jobId) {
  return new Job(this, null, null, null, jobId);
};


/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
jsforce.on('connection:new', function(conn) {
  conn.bulk = new Bulk(conn);
});


module.exports = Bulk;

}).call(this,require('_process'))
},{"../core":61,"../csv":62,"../http-api":64,"../promise":68,"../record-stream":71,"_process":97,"events":40,"inherits":78,"lodash/core":79,"readable-stream":89}],48:[function(require,module,exports){
/**
 * @file Manages Salesforce Chatter REST API calls
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var inherits = require('inherits'),
    _       = require('lodash/core'),
    jsforce = require('../core'),
    Promise = require('../promise');

/**
 * API class for Chatter REST API call
 *
 * @class
 * @param {Connection} conn Connection
 */
var Chatter = module.exports = function(conn) {
  this._conn = conn;
};

/**
 * Sending request to API endpoint
 * @private
 */
Chatter.prototype._request = function(params, callback) {
  if (/^(put|post|patch)$/i.test(params.method)) {
    if (_.isObject(params.body)) {
      params.headers = {
        "Content-Type": "application/json"
      };
      params.body = JSON.stringify(params.body);
    }
  }
  params.url = this._normalizeUrl(params.url);
  return this._conn.request(params, callback);
};

/**
 * Convert path to site root relative url
 * @private
 */
Chatter.prototype._normalizeUrl = function(url) {
  if (url.indexOf('/chatter/') === 0 || url.indexOf('/connect/') === 0) {
    return '/services/data/v' + this._conn.version + url;
  } else if (/^\/v[\d]+\.[\d]+\//.test(url)) {
    return '/services/data' + url;
  } else if (url.indexOf('/services/') !== 0 && url[0] === '/') {
    return '/services/data/v' + this._conn.version + '/chatter' + url;
  } else {
    return url;
  }
};

/**
 * @typedef {Object} Chatter~RequestParams
 * @prop {String} method - HTTP method
 * @prop {String} url - Resource URL
 * @prop {String} [body] - HTTP body (in POST/PUT/PATCH methods)
 */

/**
 * @typedef {Object} Chatter~RequestResult
 */

/**
 * Make a request for chatter API resource
 *
 * @param {Chatter~RequestParams} params - Paramters representing HTTP request
 * @param {Callback.<Chatter~RequestResult>} [callback] - Callback func
 * @returns {Chatter~Request}
 */
Chatter.prototype.request = function(params, callback) {
  return new Request(this, params).thenCall(callback);
};

/**
 * Make a resource request to chatter API
 *
 * @param {String} url - Resource URL
 * @param {Object} [queryParams] - Query parameters (in hash object)
 * @returns {Chatter~Resource}
 */
Chatter.prototype.resource = function(url, queryParams) {
  return new Resource(this, url, queryParams);
};

/**
 * @typedef {Object} Chatter~BatchRequestResult
 * @prop {Boolean} hasError - Flag if the batch has one or more errors
 * @prop {Array.<Object>} results - Batch request results in array
 * @prop {Number} results.statusCode - HTTP response status code
 * @prop {Chatter~RequestResult} results.result - Parsed HTTP response body
 */

/**
 * Make a batch request to chatter API
 *
 * @params {Array.<Chatter~Request>} requests - Chatter API requests
 * @param {Callback.<Chatter~BatchRequestResult>} [callback] - Callback func
 * @returns {Promise.<Chatter~BatchRequestResult>}
 */
Chatter.prototype.batch = function(requests, callback) {
  var self = this;
  var batchRequests = [], batchDeferreds = [];
  _.forEach(requests, function(request) {
    var deferred = Promise.defer();
    request._promise = deferred.promise;
    batchRequests.push(request.batchParams());
    batchDeferreds.push(deferred);
  });
  var params = {
    method: 'POST',
    url: this._normalizeUrl('/connect/batch'),
    body: {
      batchRequests: batchRequests
    }
  };
  return this.request(params).then(function(res) {
    _.forEach(res.results, function(result, i) {
      var deferred = batchDeferreds[i];
      if (result.statusCode >= 400) {
        deferred.reject(result.result);
      } else {
        deferred.resolve(result.result);
      }
    });
    return res;
  }).thenCall(callback);
};


/*--------------------------------------------*/
/**
 * A class representing chatter API request
 *
 * @protected
 * @class Chatter~Request
 * @implements {Promise.<Chatter~RequestResult>}
 * @param {Chatter} chatter - Chatter API object
 * @param {Chatter~RequestParams} params - Paramters representing HTTP request
 */
var Request = function(chatter, params) {
  this._chatter = chatter;
  this._params = params;
  this._promise = null;
};

/**
 * @typedef {Object} Chatter~BatchRequestParams
 * @prop {String} method - HTTP method
 * @prop {String} url - Resource URL
 * @prop {String} [richInput] - HTTP body (in POST/PUT/PATCH methods)
 */

/**
 * Retrieve parameters in batch request form
 *
 * @method Chatter~Request#batchParams
 * @returns {Chatter~BatchRequestParams}
 */
Request.prototype.batchParams = function() {
  var params = this._params;
  var batchParams = {
    method: params.method,
    url: this._chatter._normalizeUrl(params.url)
  };
  if (this._params.body) {
    batchParams.richInput = this._params.body;
  }
  return batchParams;
};

/**
 * Retrieve parameters in batch request form
 *
 * @method Chatter~Request#promise
 * @returns {Promise.<Chatter~RequestResult>}
 */
Request.prototype.promise = function() {
  return this._promise || this._chatter._request(this._params);
};

/**
 * Returns Node.js Stream object for request
 *
 * @method Chatter~Request#stream
 * @returns {stream.Stream}
 */
Request.prototype.stream = function() {
  return this._chatter._request(this._params).stream();
};

/**
 * Promise/A+ interface
 * http://promises-aplus.github.io/promises-spec/
 *
 * Delegate to deferred promise, return promise instance for batch result
 *
 * @method Chatter~Request#then
 */
Request.prototype.then = function(onResolve, onReject) {
  return this.promise().then(onResolve, onReject);
};

/**
 * Promise/A+ extension
 * Call "then" using given node-style callback function
 *
 * @method Chatter~Request#thenCall
 */
Request.prototype.thenCall = function(callback) {
  return _.isFunction(callback) ? this.promise().thenCall(callback) : this;
};


/*--------------------------------------------*/
/**
 * A class representing chatter API resource
 *
 * @protected
 * @class Chatter~Resource
 * @extends Chatter~Request
 * @param {Chatter} chatter - Chatter API object
 * @param {String} url - Resource URL
 * @param {Object} [queryParams] - Query parameters (in hash object)
 */
var Resource = function(chatter, url, queryParams) {
  if (queryParams) {
    var qstring = _.map(_.keys(queryParams), function(name) {
      return name + "=" + encodeURIComponent(queryParams[name]);
    }).join('&');
    url += (url.indexOf('?') > 0 ? '&' : '?') + qstring;
  }
  Resource.super_.call(this, chatter, { method: 'GET', url: url });
  this._url = url;
};

inherits(Resource, Request);

/**
 * Create a new resource
 *
 * @method Chatter~Resource#create
 * @param {Object} data - Data to newly post
 * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function
 * @returns {Chatter~Request}
 */
Resource.prototype.create = function(data, callback) {
  return this._chatter.request({
    method: 'POST',
    url: this._url,
    body: data
  }).thenCall(callback);
};

/**
 * Retrieve resource content
 *
 * @method Chatter~Resource#retrieve
 * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function
 * @returns {Chatter~Request}
 */
Resource.prototype.retrieve = function(callback) {
  return this.thenCall(callback);
};

/**
 * Update specified resource
 *
 * @method Chatter~Resource#update
 * @param {Obejct} data - Data to update
 * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function
 * @returns {Chatter~Request}
 */
Resource.prototype.update = function(data, callback) {
  return this._chatter.request({
    method: 'POST',
    url: this._url,
    body: data
  }).thenCall(callback);
};

/**
 * Synonym of Resource#delete()
 *
 * @method Chatter~Resource#del
 * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function
 * @returns {Chatter~Request}
 */
/**
 * Delete specified resource
 *
 * @method Chatter~Resource#delete
 * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function
 * @returns {Chatter~Request}
 */
Resource.prototype.del =
Resource.prototype["delete"] = function(callback) {
  return this._chatter.request({
    method: 'DELETE',
    url: this._url
  }).thenCall(callback);
};


/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
jsforce.on('connection:new', function(conn) {
  conn.chatter = new Chatter(conn);
});

},{"../core":61,"../promise":68,"inherits":78,"lodash/core":79}],49:[function(require,module,exports){
require('./analytics');
require('./apex');
require('./bulk');
require('./chatter');
require('./metadata');
require('./soap');
require('./streaming');
require('./tooling');

},{"./analytics":45,"./apex":46,"./bulk":47,"./chatter":48,"./metadata":50,"./soap":51,"./streaming":52,"./tooling":53}],50:[function(require,module,exports){
(function (process,Buffer){
/*global process, Buffer */
/**
 * @file Manages Salesforce Metadata API
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var inherits = require('inherits'),
    events  = require('events'),
    stream  = require('readable-stream'),
    _       = require('lodash/core'),
    jsforce = require('../core'),
    Promise = require('../promise'),
    SOAP    = require('../soap');

/*--------------------------------------------*/
/**
 * Class for Salesforce Metadata API
 *
 * @class
 * @param {Connection} conn - Connection object
 */
var Metadata = module.exports = function(conn) {
  this._conn = conn;
};


/**
 * Polling interval in milliseconds
 * @type {Number}
 */
Metadata.prototype.pollInterval = 1000;

/**
 * Polling timeout in milliseconds
 * @type {Number}
 */
Metadata.prototype.pollTimeout = 10000;


/**
 * Call Metadata API SOAP endpoint
 *
 * @private
 */
Metadata.prototype._invoke = function(method, message, callback) {
  var soapEndpoint = new SOAP(this._conn, {
    xmlns: "http://soap.sforce.com/2006/04/metadata",
    endpointUrl: this._conn.instanceUrl + "/services/Soap/m/" + this._conn.version
  });
  return soapEndpoint.invoke(method, message).then(function(res) {
    return res.result;
  }).thenCall(callback);
};


/**
 * @typedef {Object} Metadata~MetadataInfo
 * @prop {String} fullName - The name of the component
 */

/**
 * Asynchronously adds one or more new metadata components to the organization.
 *
 * @param {String} type - The type of metadata to create
 * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create
 * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function
 * @returns {Metadata~AsyncResultLocator}
 */
Metadata.prototype.createAsync = function(type, metadata, callback) {
  if (Number(this._conn.version) > 30) {
    throw new Error("Async metadata CRUD calls are not supported on ver 31.0 or later.");
  }
  var convert = function(md) {
    md["@xsi:type"] = type;
    return md;
  };
  var isArray = _.isArray(metadata);
  metadata = isArray ? _.map(metadata, convert) : convert(metadata);
  var res = this._invoke("create", { metadata: metadata });
  return new AsyncResultLocator(this, res, isArray).thenCall(callback);
};

/**
 * @typedef {Object} Metadata~SaveResult
 * @prop {Boolean} success - True if metadata is successfully saved
 * @prop {String} fullName - Full name of metadata object
 */

/**
 * @private
 */
function convertToSaveResult(result) {
  var saveResult = _.clone(result);
  saveResult.success = saveResult.success === 'true';
  return saveResult;
}

/**
 * @typedef {Object} Metadata~UpsertResult
 * @prop {Boolean} success - True if metadata is successfully saved
 * @prop {String} fullName - Full name of metadata object
 * @prop {Boolean} created - True if metadata is newly created
 */

/**
 * @private
 */
function convertToUpsertResult(result) {
  var upsertResult = convertToSaveResult(result);
  upsertResult.created = upsertResult.created === 'true';
  return upsertResult;
}

/**
 * Synonym of Metadata#create().
 *
 * @method Metadata#createSync
 * @param {String} type - The type of metadata to create
 * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create
 * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function
 * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}
 */
/**
 * Synchronously adds one or more new metadata components to the organization.
 *
 * @method Metadata#create
 * @param {String} type - The type of metadata to create
 * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create
 * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function
 * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}
 */
Metadata.prototype.createSync =
Metadata.prototype.create = function(type, metadata, callback) {
  var convert = function(md) {
    md["@xsi:type"] = type;
    return md;
  };
  var isArray = _.isArray(metadata);
  metadata = isArray ? _.map(metadata, convert) : convert(metadata);
  return this._invoke("createMetadata", { metadata: metadata }).then(function(results) {
    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);
  }).thenCall(callback);
};

/**
 * @private
 */
function convertToMetadataInfo(rec) {
  var metadataInfo = _.clone(rec);
  delete metadataInfo.$;
  return metadataInfo;
}

/**
 * Synonym of Metadata#read()
 *
 * @method Metadata#readSync
 * @param {String} type - The type of metadata to read
 * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read
 * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function
 * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}
 */
/**
 * Synchronously read specified metadata components in the organization.
 *
 * @method Metadata#read
 * @param {String} type - The type of metadata to read
 * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read
 * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function
 * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}
 */
Metadata.prototype.readSync =
Metadata.prototype.read = function(type, fullNames, callback) {
  return this._invoke("readMetadata", { type: type, fullNames: fullNames }).then(function(res) {
    return _.isArray(res.records) ? _.map(res.records, convertToMetadataInfo) : convertToMetadataInfo(res.records);
  }).thenCall(callback);
};

/**
 * @typedef {Object} Metadata~UpdateMetadataInfo
 * @prop {String} currentName - The API name of the component or field before the update
 * @prop {Metadata~MetadataInfo} metadata - Full specification of the component or field you wish to update
 */

/**
 * Asynchronously updates one or more metadata components in the organization.
 *
 * @param {String} type - The type of metadata to update
 * @param {Metadata~UpdateMetadataInfo|Array.<Metadata~UpdateMetadataInfo>} updateMetadata - Updating metadata
 * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function
 * @returns {Metadata~AsyncResultLocator}
 */
Metadata.prototype.updateAsync = function(type, updateMetadata, callback) {
  if (Number(this._conn.version) > 30) {
    throw new Error("Async metadata CRUD calls are not supported on ver 31.0 or later.");
  }
  var convert = function(umd) {
    umd.metadata["@xsi:type"] = type;
    return umd;
  };
  var isArray = _.isArray(updateMetadata);
  updateMetadata = isArray ? _.map(updateMetadata, convert) : convert(updateMetadata);
  var res = this._invoke("update", { updateMetadata: updateMetadata });
  return new AsyncResultLocator(this, res, isArray).thenCall(callback);
};

/**
 * Synonym of Metadata#update().
 *
 * @method Metadata#updateSync
 * @param {String} type - The type of metadata to update
 * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata
 * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function
 * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}
 */
/**
 * Synchronously updates one or more metadata components in the organization.
 *
 * @method Metadata#update
 * @param {String} type - The type of metadata to update
 * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata
 * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function
 * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}
 */
Metadata.prototype.updateSync =
Metadata.prototype.update = function(type, metadata, callback) {
  var convert = function(md) {
    md["@xsi:type"] = type;
    return md;
  };
  var isArray = _.isArray(metadata);
  metadata = isArray ? _.map(metadata, convert) : convert(metadata);
  return this._invoke("updateMetadata", { metadata: metadata }).then(function(results) {
    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);
  }).thenCall(callback);
};

/**
 * Upserts one or more components in your organization's data.
 *
 * @param {String} type - The type of metadata to upsert
 * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Upserting metadata
 * @param {Callback.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>} [callback] - Callback function
 * @returns {Promise.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>}
 */
Metadata.prototype.upsertSync =
Metadata.prototype.upsert = function(type, metadata, callback) {
  var convert = function(md) {
    md["@xsi:type"] = type;
    return md;
  };
  var isArray = _.isArray(metadata);
  metadata = isArray ? _.map(metadata, convert) : convert(metadata);
  return this._invoke("upsertMetadata", { metadata: metadata }).then(function(results) {
    return _.isArray(results) ? _.map(results, convertToUpsertResult) : convertToUpsertResult(results);
  }).thenCall(callback);
};

/**
 * Asynchronously deletes specified metadata components in the organization.
 *
 * @param {String} type - The type of metadata to delete
 * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.
 * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function
 * @returns {Metadata~AsyncResultLocator}
 */
Metadata.prototype.deleteAsync = function(type, metadata, callback) {
  if (Number(this._conn.version) > 30) {
    throw new Error("Async metadata CRUD calls are not supported on ver 31.0 or later.");
  }
  var convert = function(md) {
    if (_.isString(md)) {
      md = { fullName : md };
    }
    md["@xsi:type"] = type;
    return md;
  };
  var isArray = _.isArray(metadata);
  metadata = isArray ? _.map(metadata, convert) : convert(metadata);
  var res = this._invoke("delete", { metadata: metadata });
  return new AsyncResultLocator(this, res, isArray).thenCall(callback);
};

/**
 * Synonym of Metadata#delete().
 *
 * @deprecated
 * @method Metadata#del
 * @param {String} [type] - The type of metadata to delete
 * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.
 * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function
 * @returns {Metadata~AsyncResultLocator}
 */
/**
 * Synonym of Metadata#delete().
 *
 * @method Metadata#deleteSync
 * @param {String} type - The type of metadata to delete
 * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.
 * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function
 * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}
 */

/**
 * Synchronously deletes specified metadata components in the organization.
 *
 * @method Metadata#delete
 * @param {String} type - The type of metadata to delete
 * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.
 * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function
 * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}
 */
Metadata.prototype.del =
Metadata.prototype.deleteSync =
Metadata.prototype["delete"] = function(type, fullNames, callback) {
  return this._invoke("deleteMetadata", { type: type, fullNames: fullNames }).then(function(results) {
    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);
  }).thenCall(callback);
};

/**
 * Rename fullname of a metadata component in the organization
 *
 * @param {String} type - The type of metadata to delete
 * @param {String} oldFullName - The original fullName of metadata
 * @param {String} newFullName - The new fullName of metadata
 * @param {Callback.<Metadata~SaveResult>} [callback] - Callback function
 * @returns {Promise.<Metadata~SaveResult>}
 */
Metadata.prototype.rename = function(type, oldFullName, newFullName, callback) {
  return this._invoke("renameMetadata", { type: type, oldFullName: oldFullName, newFullName: newFullName }).then(function(result) {
    return convertToSaveResult(result);
  }).thenCall(callback);
};

/**
 * Checks the status of asynchronous metadata calls
 *
 * @param {String|Array.<String>} ids - The asynchronous process ID(s)
 * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function
 * @returns {Metadata~AsyncResultLocator}
 */
Metadata.prototype.checkStatus = function(ids, callback) {
  var isArray = _.isArray(ids);
  var res = this._invoke("checkStatus", { asyncProcessId: ids });
  return new AsyncResultLocator(this, res, isArray).thenCall(callback);
};

/**
 * @typedef {Object} Metadata~DescribeMetadataResult
 * @prop {Array.<Object>} metadataObjects - One or more metadata components and their attributes
 * @prop {Array.<String>} metadataObjects.childXmlNames - List of child sub-components for this component
 * @prop {String} metadataObjects.directoryName - The name of the directory in the .zip file that contains this component
 * @prop {Boolean} metadataObjects.inFolder - Indicates whether the component is in a folder or not
 * @prop {Boolean} metadataObjects.metaFile - Indicates whether the component requires an accompanying metadata file
 * @prop {String} metadataObjects.suffix - The file suffix for this component
 * @prop {String} metadataObjects.xmlName - The name of the root element in the metadata file for this component
 * @prop {String} organizationNamespace - The namespace of the organization
 * @prop {Boolean} partialSaveAllowed - Indicates whether rollbackOnError is allowed or not
 * @prop {Boolean} testRequired - Indicates whether tests are required or not
 */

/**
 * Retrieves the metadata which describes your organization, including Apex classes and triggers,
 * custom objects, custom fields on standard objects, tab sets that define an app,
 * and many other components.
 *
 * @param {String} [version] - The API version for which you want metadata; for example, 29.0
 * @param {Callback.<Metadata~DescribeMetadataResult>} [callback] - Callback function
 * @returns {Promise.<Metadata~DescribeMetadataResult>}
 */
Metadata.prototype.describe = function(version, callback) {
  if (!_.isString(version)) {
    callback = version;
    version = this._conn.version;
  }
  return this._invoke("describeMetadata", { asOfVersion: version }).then(function(res) {
    res.metadataObjects = _.isArray(res.metadataObjects) ? res.metadataObjects : [ res.metadataObjects ];
    res.metadataObjects = _.map(res.metadataObjects, function(mo) {
      if (mo.childXmlNames) {
        mo.childXmlNames = _.isArray(mo.childXmlNames) ? mo.childXmlNames: [ mo.childXmlNames ];
      }
      mo.inFolder = mo.inFolder === 'true';
      mo.metaFile = mo.metaFile === 'true';
      return mo;
    });
    res.partialSaveAllowed = res.partialSaveAllowed === 'true';
    res.testRequired = res.testRequired === 'true';
    return res;
  }).thenCall(callback);
};

/**
 * @typedef {Object} Metadata~ListMetadataQuery
 * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass
 * @prop {String} [folder] - The folder associated with the component.
 */

/**
 * @typedef {Object} Metadata~FileProperties
 * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass
 * @prop {String} createdById - ID of the user who created the file
 * @prop {String} createdByName - Name of the user who created the file
 * @prop {String} createdDate - Date and time when the file was created
 * @prop {String} fileName - Name of the file
 * @prop {String} fullName - The file developer name used as a unique identifier for API access
 * @prop {String} id - ID of the file
 * @prop {String} lastModifiedById - ID of the user who last modified the file
 * @prop {String} lastModifiedByName - Name of the user who last modified the file
 * @prop {String} lastModifiedDate - Date and time that the file was last modified
 * @prop {String} [manageableState] - Indicates the manageable state of the specified component if it is contained in a package
 * @prop {String} [namespacePrefix] - The namespace prefix of the component
 */

/**
 * Retrieves property information about metadata components in your organization
 *
 * @param {Metadata~ListMetadataQuery|Array.<Metadata~ListMetadataQuery>} queries - The criteria object(s) specifing metadata to list
 * @param {String} [version] - The API version for which you want metadata; for example, 29.0
 * @param {Callback.<Array.<Metadata~FileProperties>>} [callback] - Callback function
 * @returns {Promise.<Array.<Metadata~FileProperties>>}
 */
Metadata.prototype.list = function(queries, version, callback) {
  if (!_.isString(version)) {
    callback = version;
    version = this._conn.version;
  }
  if (!_.isArray(queries)) {
    queries = [ queries ];
  }
  return this._invoke("listMetadata", { queries: queries, asOfVersion: version }, callback);
};

/**
 * @typedef {Object} Metadata~RetrieveRequest
 */

/**
 * Retrieves XML file representations of components in an organization
 *
 * @param {Metadata~RetrieveRequest} request - Options for determining which packages or files are retrieved
 * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function
 * @returns {Metadata~RetrieveResultLocator}
 */
Metadata.prototype.retrieve = function(request, callback) {
  var res = this._invoke("retrieve", { request: request });
  return new RetrieveResultLocator(this, res).thenCall(callback);
};

/**
 * Checks the status of declarative metadata call retrieve() and returns the zip file contents
 *
 * @param {String} id - Async process id returned from previous retrieve request
 * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function
 * @returns {Promise.<Metadata~RetrieveResult>}
 */
Metadata.prototype.checkRetrieveStatus = function(id, callback) {
  return this._invoke("checkRetrieveStatus", { asyncProcessId: id }, callback);
};

/**
 * Deploy components into an organization using zipped file representations
 *
 * @param {stream.Stream|Buffer|String} zipInput - Zipped file input source in readable stream, binary buffer or Base64-encoded string
 * @param {Object} [options] - Options used in deployment
 * @param {Boolean} [options.allowMissingFiles] - Specifies whether a deploy succeeds even if files that are specified in package.xml but are not in the .zip file or not.
 * @param {Boolean} [options.autoUpdatePackage] - If a file is in the .zip file but not specified in package.xml, specifies whether the file should be automatically added to the package or not.
 * @param {Boolean} [options.checkOnly] - Indicates whether Apex classes and triggers are saved to the organization as part of the deployment (false) or not (true).
 * @param {Boolean} [options.ignoreWarnings] - Indicates whether a warning should allow a deployment to complete successfully (true) or not (false). Defaults to false.
 * @param {Boolean} [options.performRetrieve] - Indicates whether a retrieve() call is performed immediately after the deployment (true) or not (false).
 * @param {Boolean} [options.purgeOnDelete] - If true, the deleted components in the destructiveChanges.xml manifest file aren't stored in the Recycle Bin.
 * @param {Boolean} [options.rollbackOnError] - Indicates whether any failure causes a complete rollback (true) or not (false).
 * @param {Boolean} [options.runAllTests] - If true, all Apex tests defined in the organization are run.
 * @param {Array.<String>} [options.runTests] - A list of Apex tests to be run during deployment.
 * @param {Boolean} [options.singlePackage] - Indicates whether the specified .zip file points to a directory structure with a single package (true) or a set of packages (false).
 * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function
 * @returns {Metadata~DeployResultLocator}
 */
Metadata.prototype.deploy = function(zipInput, options, callback) {
  if (!options || _.isFunction(options)) {
    callback = options;
    options = {};
  }
  var deferred = Promise.defer();
  if (_.isObject(zipInput) && _.isFunction(zipInput.pipe)) {
    var bufs = [];
    zipInput.on('data', function(d) {
      bufs.push(d);
    });
    zipInput.on('end', function() {
      deferred.resolve(Buffer.concat(bufs).toString('base64'));
    });
    // zipInput.resume();
  } else if (zipInput instanceof Buffer) {
    deferred.resolve(zipInput.toString('base64'));
  } else if (zipInput instanceof String || typeof zipInput === 'string') {
    deferred.resolve(zipInput);
  } else {
    throw "Unexpected zipInput type";
  }

  var self = this;
  var res = deferred.promise.then(function(zipContentB64) {
    return self._invoke("deploy", {
      ZipFile: zipContentB64,
      DeployOptions: options
    }, callback);
  });
  return new DeployResultLocator(this, res).thenCall(callback);
};

/**
 * Checks the status of declarative metadata call deploy()
 *
 * @param {String} id - Async process id returned from previous deploy request
 * @param {Boolean} [includeDetails] - Sets the DeployResult object to include details information (default: false)
 * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function
 * @returns {Promise.<Metadata~DeployResult>}
 */
Metadata.prototype.checkDeployStatus = function(id, includeDetails, callback) {
  if (_.isObject(includeDetails) || _.isBoolean(includeDetails)) {
    includeDetails = !!includeDetails;
  } else {
    callback = includeDetails;
    includeDetails = false;
  }
  return this._invoke("checkDeployStatus", {
    asyncProcessId: id,
    includeDetails : includeDetails
  }).then(function(res) {
    res.done = res.done === 'true';
    res.success = res.success === 'true';
    res.checkOnly = res.checkOnly === 'true';
    if (res.ignoreWarnings) {
      res.ignoreWarnings = res.ignoreWarnings === 'true';
    }
    if (res.rollbackOnError) {
      res.rollbackOnError = res.rollbackOnError === 'true';
    }
    res.numberComponentErrors = Number(res.numberComponentErrors);
    res.numberComponentsDeployed = Number(res.numberComponentsDeployed);
    res.numberComponentsTotal = Number(res.numberComponentsTotal);
    res.numberTestErrors = Number(res.numberTestErrors);
    res.numberTestsCompleted = Number(res.numberTestsCompleted);
    res.numberTestsTotal = Number(res.numberTestsTotal);

    return res;
  }).thenCall(callback);
};


/*--------------------------------------------*/

/**
 * @typedef {Object} Metadata~AsyncResult
 * @prop {Boolean} done - Indicates whether the call has completed or not
 * @prop {String} id - ID of the component being created, updated, deleted, deployed, or retrieved
 * @prop {String} state - The state four possible values: Queued, InProgress, Completed, and Error.
 * @prop {String} [statusCode] - If an error occurred during the create(), update(), or delete() call, a status code is returned
 * @prop {String} [message] - Message corresponding to the statusCode field returned
 */

/**
 * The locator class for Metadata API asynchronous call result
 *
 * @protected
 * @class Metadata~AsyncResultLocator
 * @extends events.EventEmitter
 * @implements Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>
 * @param {Metadata} meta - Metadata API object
 * @param {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} results - Promise object for async result info
 * @param {Boolean} [isArray] - Indicates whether the async request is given in array or single object
 */
var AsyncResultLocator = function(meta, results, isArray) {
  this._meta = meta;
  this._results = results;
  this._isArray = isArray;
};

inherits(AsyncResultLocator, events.EventEmitter);

/**
 * Promise/A+ interface
 * http://promises-aplus.github.io/promises-spec/
 *
 * Delegate to deferred promise, return promise instance for batch result
 *
 * @method Metadata~AsyncResultLocator#then
 */
AsyncResultLocator.prototype.then = function(onResolve, onReject) {
  var self = this;
  return this._results.then(function(results) {
    var convertType = function(res) {
      if (res.$ && res.$["xsi:nil"] === 'true') {
        return null;
      }
      res.done = res.done === 'true';
      return res;
    };
    results = _.isArray(results) ? _.map(results, convertType) : convertType(results);
    if (self._isArray && !_.isArray(results)) {
      results = [ results ];
    }
    return onResolve(results);
  }, onReject);
};

/**
 * Promise/A+ extension
 * Call "then" using given node-style callback function
 *
 * @method Metadata~AsyncResultLocator#thenCall
 */
AsyncResultLocator.prototype.thenCall = function(callback) {
  return _.isFunction(callback) ? this.then(function(res) {
    process.nextTick(function() {
      callback(null, res);
    });
  }, function(err) {
    process.nextTick(function() {
      callback(err);
    });
  }) : this;
};

/**
 * Check the status of async request
 *
 * @method Metadata~AsyncResultLocator#check
 * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function
 * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}
 */
AsyncResultLocator.prototype.check = function(callback) {
  var self = this;
  var meta = this._meta;
  return this.then(function(results) {
    var ids = _.isArray(results) ? _.map(results, function(res){ return res.id; }) : results.id;
    self._ids = ids;
    return meta.checkStatus(ids);
  }).thenCall(callback);
};

/**
 * Polling until async call status becomes complete or error
 *
 * @method Metadata~AsyncResultLocator#poll
 * @param {Number} interval - Polling interval in milliseconds
 * @param {Number} timeout - Polling timeout in milliseconds
 */
AsyncResultLocator.prototype.poll = function(interval, timeout) {
  var self = this;
  var startTime = new Date().getTime();
  var poll = function() {
    var now = new Date().getTime();
    if (startTime + timeout < now) {
      var errMsg = "Polling time out.";
      if (self._ids) {
        errMsg += " Process Id = " + self._ids;
      }
      self.emit('error', new Error(errMsg));
      return;
    }
    self.check().then(function(results) {
      var done = true;
      var resultArr = _.isArray(results) ? results : [ results ];
      for (var i=0, len=resultArr.length; i<len; i++) {
        var result = resultArr[i];
        if (result && !result.done) {
          self.emit('progress', result);
          done = false;
        }
      }
      if (done) {
        self.emit('complete', results);
      } else {
        setTimeout(poll, interval);
      }
    }, function(err) {
      self.emit('error', err);
    });
  };
  setTimeout(poll, interval);
};

/**
 * Check and wait until the async requests become in completed status
 *
 * @method Metadata~AsyncResultLocator#complete
 * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function
 * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}
 */
AsyncResultLocator.prototype.complete = function(callback) {
  var deferred = Promise.defer();
  this.on('complete', function(results) {
    deferred.resolve(results);
  });
  this.on('error', function(err) {
    deferred.reject(err);
  });
  var meta = this._meta;
  this.poll(meta.pollInterval, meta.pollTimeout);
  return deferred.promise.thenCall(callback);
};

/*--------------------------------------------*/
/**
 * The locator class to track retreive() Metadata API call result
 *
 * @protected
 * @class Metadata~RetrieveResultLocator
 * @extends Metadata~AsyncResultLocator
 * @param {Metadata} meta - Metadata API object
 * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of retrieve call()
 */
var RetrieveResultLocator = function(meta, result) {
  RetrieveResultLocator.super_.call(this, meta, result);
};

inherits(RetrieveResultLocator, AsyncResultLocator);

/**
 * @typedef {Object} Metadata~RetrieveResult
 * @prop {Array.<Metadata~FileProperties>} fileProperties - Contains information about the properties of each component in the .zip file, and the manifest file package.xml
 * @prop {String} id - ID of the component being retrieved
 * @prop {Array.<Object>} messages - Contains information about the success or failure of the retrieve() call
 * @prop {String} zipFile - The zip file returned by the retrieve request. Base 64-encoded binary data
 */

/**
 * Check and wait until the async request becomes in completed status,
 * and retrieve the result data.
 *
 * @memthod Metadata~RetrieveResultLocator#complete
 * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function
 * @returns {Promise.<Metadata~RetrieveResult>}
 */
RetrieveResultLocator.prototype.complete = function(callback) {
  var meta = this._meta;
  return RetrieveResultLocator.super_.prototype.complete.call(this).then(function(result) {
    return meta.checkRetrieveStatus(result.id);
  }).thenCall(callback);
};

/**
 * Change the retrieved result to Node.js readable stream
 *
 * @method Metadata~RetrieveResultLocator#stream
 * @returns {stream.Readable}
 */
RetrieveResultLocator.prototype.stream = function() {
  var self = this;
  var resultStream = new stream.Readable();
  var reading = false;
  resultStream._read = function() {
    if (reading) { return; }
    reading = true;
    self.complete(function(err, result) {
      if (err) {
        resultStream.emit('error', err);
      } else {
        resultStream.push(new Buffer(result.zipFile, 'base64'));
        resultStream.push(null);
      }
    });
  };
  return resultStream;
};

/*--------------------------------------------*/
/**
 * The locator class to track deploy() Metadata API call result
 *
 * @protected
 * @class Metadata~DeployResultLocator
 * @extends Metadata~AsyncResultLocator
 * @param {Metadata} meta - Metadata API object
 * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of deploy() call
 */
var DeployResultLocator = function(meta, result) {
  DeployResultLocator.super_.call(this, meta, result);
};

inherits(DeployResultLocator, AsyncResultLocator);

/**
 * @typedef {Object} Metadata~DeployResult
 * @prop {String} id - ID of the component being deployed
 * @prop {Boolean} checkOnly - Indicates whether this deployment is being used to check the validity of the deployed files without making any changes in the organization or not
 * @prop {String} completedDate - Timestamp for when the deployment process ended
 * @prop {String} createdDate - Timestamp for when the deploy() call was received
 * @prop {Array.<Object>} [details] - Provides the details of a deployment that is in-progress or ended, if includeDetails is set to true in checkDeployStatus() call
 * @prop {Boolean} done - Indicates whether the server finished processing the deploy() call for the specified id
 * @prop {String} [errorMessage] - Message corresponding to the values in the errorStatusCode field
 * @prop {String} [errorStatusCode] - If an error occurred during the deploy() call, a status code is returned, and the message corresponding to the status code is returned in the errorMessagefield
 * @prop {Boolean} [ignoreWarnings] - Specifies whether a deployment should continue even if the deployment generates warnings
 * @prop {String} lastModifiedDate - Timestamp of the last update for the deployment process
 * @prop {Number} numberComponentErrors - The number of components that generated errors during this deployment
 * @prop {Number} numberComponentsDeployed - The number of components deployed in the deployment process
 * @prop {Number} numberComponentsTotal - The total number of components in the deployment
 * @prop {Number} numberTestErrors - The number of Apex tests that have generated errors during this deployment
 * @prop {Number} numberTestsCompleted - The number of completedApex tests for this deployment
 * @prop {Number} numberTestsTotal - The total number of Apex tests for this deployment
 * @prop {Boolean} [rollbackOnError] - Indicates whether any failure causes a complete rollback or not. Default is true.
 * @prop {String} startDate - Timestamp for when the deployment process began
 * @prop {String} status - Indicates the current state of the deployment
 * @prop {Boolean} success - Indicates whether the deployment was successful or not
 */

/**
 * Check and wait until the async request becomes in completed status,
 * and retrieve the result data.
 *
 * @method Metadata~DeployResultLocator#complete
 * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function
 * @returns {Promise.<Metadata~DeployResult>}
 */
DeployResultLocator.prototype.complete = function(includeDetails, callback) {
  if (_.isFunction(includeDetails)) {
    callback = includeDetails;
    includeDetails = false;
  }
  var meta = this._meta;
  return DeployResultLocator.super_.prototype.complete.call(this).then(function(result) {
    return meta.checkDeployStatus(result.id, includeDetails);
  }).thenCall(callback);
};


/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
jsforce.on('connection:new', function(conn) {
  conn.metadata = new Metadata(conn);
});

}).call(this,require('_process'),require("buffer").Buffer)
},{"../core":61,"../promise":68,"../soap":74,"_process":97,"buffer":36,"events":40,"inherits":78,"lodash/core":79,"readable-stream":89}],51:[function(require,module,exports){
/**
 * @file Salesforce SOAP API
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var _ = require('lodash/core');
var jsforce = require('../core');
var SOAP = require('../soap');

/**
 * API class for Partner SOAP call
 *
 * @class
 * @param {Connection} conn - Connection
 */
var SoapApi = module.exports = function(conn) {
  this._conn = conn;
};

/**
 * Call SOAP Api (Partner) endpoint
 * @private
 */
SoapApi.prototype._invoke = function(method, message, schema, callback) {
  var soapEndpoint = new SOAP(this._conn, {
    xmlns: "urn:partner.soap.sforce.com",
    endpointUrl: this._conn.instanceUrl + "/services/Soap/u/" + this._conn.version
  });
  return soapEndpoint.invoke(method, message, { result: schema }).then(function(res) {
    return res.result;
  }).thenCall(callback);
};


/* */
var Schemas = {};

/**
 * @typedef SoapApi~LeadConvert
 * @prop {String} convertedStatus - Status of converted lead
 * @prop {String} leadId - Lead record Id to convert
 * @prop {String} [accountId] - Account record Id to assign the converted record
 * @prop {String} [contactId] - Contact record Id to assign the converted record
 * @prop {Boolean} [doNotCreateOpportunity] - True if you don't want to create a new opportunity
 * @prop {String} [opportunityName] - Name of opportunity to create
 * @prop {Boolean} [overwriteLeadSource] - True if overwriting lead source
 * @prop {String} [ownerId] - Owner Id
 * @prop {Boolean} [sendNotificationEmail] - True if send notification email
 */
/**
 * @typedef SoapApi~LeadConvertResult
 * @prop {String} leadId - Lead record Id to convert
 * @prop {String} [accountId] - Account record Id of converted lead
 * @prop {String} [contactId] - Contact record Id of converted lead
 * @prop {String} [opportunityId] - Opportunity record Id created in conversion
 * @prop {Boolean} success - True if successfully converted
 * @prop {Array.<Object>} errors - Error
 */
/**
 * Converts a Lead into an Account, Contact, or (optionally) an Opportunity.
 *
 * @param {SoapApi~LeadConvert|Array.<SoapApi~LeadConvert>} leadConverts
 * @param {Callback.<SoapApi~LeadConvertResult|Array.<SoapApi~LeadConvertResult>>} [callback] - Callback function
 * @returns {Promise.<SoapApi~LeadConvertResult|Array.<SoapApi~LeadConvertResult>>}
 */
SoapApi.prototype.convertLead = function(leadConverts, callback) {
  var schema = _.isArray(leadConverts) ? [ Schemas.LeadConvertResult ] : Schemas.LeadConvertResult;
  return this._invoke("convertLead", { leadConverts: leadConverts }, schema, callback);
};
Schemas.LeadConvertResult = {
  success: 'boolean',
  errors: [],
  leadId: 'string',
  accountId: 'string',
  contactId: 'string',
  opportunityId: 'string'
};

/**
 * @typedef SoapApi~MergeRequest
 * @prop {Object} masterRecord - The merge destination record
 * @prop {Array.<String>} recordToMergeIds - Ids of records to merge
 */
/**
 * @typedef SoapApi~MergeResult
 * @prop {Boolean} success - True if successfully merged
 * @prop {Array.<Object>} errors - Error
 * @prop {String} id - ID of the master record
 * @prop {Array.<String>} mergedRecordIds - ID of the records that were merged into the master record
 * @prop {Array.<String>} updatedRelatedIds - ID of all related records that were moved (re-parented) as a result of the merge
 */

/**
 * Merge up to three records into one
 *
 * @param {SoapApi~MergeRequest|Array.<SoapApi~MergeRequest>} mergeRequests
 * @param {Callback.<SoapApi~MergeResult|Array.<SoapApi~MergeResult>>} [callback] - Callback function
 * @returns {Promise.<SoapApi~MergeResult|Array.<SoapApi~MergeResult>>}
 */
SoapApi.prototype.merge = function(mergeRequests, callback) {
  var schema = _.isArray(mergeRequests) ? [ Schemas.MergeResult ] : Schemas.MergeResult;
  return this._invoke("merge", { mergeRequests: mergeRequests }, schema, callback);
};
Schemas.MergeResult = {
  success: 'boolean',
  errors: [],
  id: 'string',
  mergedRecordIds: ['string'],
  updatedRelatedIds: ['string']
};


/**
 * @typedef SoapApi~EmptyRecycleBinResult
 * @prop {String} id - ID of an sObject that you attempted to delete from the Recycle Bin
 * @prop {Boolean} success - Whether the call succeeded (true) or not (false) for this record
 * @prop {Array.<Object>} errors - Errors
 */
/**
 * Delete records from the recycle bin immediately
 *
 * @param {Array.<String>} ids - Record ids to empty from recycle bin
 * @param {Callback.<Array.<SoapApi~EmptyRecycleBinResult>>} [callback] - Callback function
 * @returns {Promise.<Array.<SoapApi~EmptyRecycleBinResult>>}
 */
SoapApi.prototype.emptyRecycleBin = function(ids, callback) {
  return this._invoke("emptyRecycleBin", { ids: ids }, [ Schemas.EmptyRecycleBinResult ], callback);
};
Schemas.EmptyRecycleBinResult = {
  id: 'string',
  success: 'boolean',
  errors: []
};


/**
 * @typedef SoapApi~DescribeTabSetResult
 * @prop {String} label - The display label for this standard or custom app
 * @prop {String} logoUrl - A fully qualified URL to the logo image associated with the standard or custom app
 * @prop {String} namespace - Namespace of application package
 * @prop {Boolean} selected - If true, then this standard or custom app is the user’s currently selected app
 * @prop {Array.<SoapApi~DescribeTab>} tabs - An array of tabs that are displayed for the specified standard app or custom app
 */
/**
 * @typedef SoapApi~DescribeTab
 * @prop {Array.<Object>} colors - Array of color information used for a tab
 * @prop {Boolean} custom - true if this is a custom tab
 * @prop {String} iconUrl - The URL for the main 32 x 32 pixel icon for a tab
 * @prop {Array.<Object>} icons - Array of icon information used for a tab
 * @prop {String} label - The display label for this tab
 * @prop {String} miniIconUrl - The URL for the 16 x 16 pixel icon that represents a tab
 * @prop {String} name - The API name of the tab
 * @prop {String} sobjectName - The name of the sObject that is primarily displayed on this tab
 * @prop {String} url - A fully qualified URL for viewing this tab
 */
/**
 * Returns information about the standard and custom apps available to the logged-in user
 *
 * @param {Callback.<Array.<SoapApi~DescribeTabSetResult>>} [callback] - Callback function
 * @returns {Promise.<Array.<SoapApi~DescribeTabSetResult>>}
 */
SoapApi.prototype.describeTabs = function(callback) {
  return this._invoke("describeTabs", {}, [ Schemas.DescribeTabSetResult ], callback);
};
Schemas.DescribeTabSetResult = {
  label: 'string',
  logoUrl: 'string',
  namespace: 'string',
  selected: 'boolean',
  tabs: [{
    colors: [{
      theme: 'string',
      color: 'string',
      context: 'string'
    }],
    iconUrl: 'string',
    icons: [{
      theme: 'string',
      height: 'number',
      width: 'number',
      url: 'string',
      contentType: 'string'
    }],
    label: 'string',
    custom: 'boolean',
    miniIconUrl: 'string',
    name: 'string',
    sobjectName: 'string',
    url: 'string'
  }]
};

/**
 * Retrieves the current system timestamp (Coordinated Universal Time (UTC) time zone) from the API
 *
 * @typedef SoapApi~ServerTimestampResult
 * @prop {String} timestamp - Timestamp
 */
/**
 * @param {Callback.<SoapApi~ServerTimestampResult>} [callback] - Callback function
 * @returns {Promise.<SoapApi~ServerTimestampResult>}
 */
SoapApi.prototype.getServerTimestamp = function(callback) {
  return this._invoke("getServerTimestamp", {}, Schemas.GetServerTimestampResult, callback);
};
Schemas.GetServerTimestampResult = {
  timestamp: 'string'
};

/**
 * @typedef SoapApi~UserInfoResult
 * @prop {Boolean} accessibilityMode
 * @prop {String} currencySymbol
 * @prop {Number} orgAttachmentFileSizeLimit
 * @prop {String} orgDefaultCurrencyIsoCode
 * @prop {String} orgDisallowHtmlAttachments
 * @prop {Boolean} orgHasPersonAccounts
 * @prop {String} organizationId
 * @prop {Boolean} organizationMultiCurrency
 * @prop {String} organizationName
 * @prop {String} profileId
 * @prop {String} roleId
 * @prop {Number} sessionSecondsValid
 * @prop {String} userDefaultCurrencyIsoCode
 * @prop {String} userEmail
 * @prop {String} userFullName
 * @prop {String} userId
 * @prop {String} userLanguage
 * @prop {String} userLocale
 * @prop {String} userName
 * @prop {String} userTimeZone
 * @prop {String} userType
 * @prop {String} userUiSkin
 */
/**
 * Retrieves personal information for the user associated with the current session
 *
 * @param {Callback.<SoapApi~UserInfoResult>} [callback] - Callback function
 * @returns {Promise.<SoapApi~UserInfoResult>}
 */
SoapApi.prototype.getUserInfo = function(callback) {
  return this._invoke("getUserInfo", {}, Schemas.GetUserInfoResult, callback);
};
Schemas.GetUserInfoResult = {
  accessibilityMode: 'boolean',
  currencySymbol: 'string',
  orgAttachmentFileSizeLimit: 'number',
  orgDefaultCurrencyIsoCode: 'string',
  orgDisallowHtmlAttachments: 'boolean',
  orgHasPersonAccounts: 'boolean',
  organizationId: 'string',
  organizationMultiCurrency: 'boolean',
  organizationName: 'string',
  profileId: 'string',
  roleId: 'string',
  sessionSecondsValid: 'number',
  userDefaultCurrencyIsoCode: 'string',
  userEmail: 'string',
  userFullName: 'string',
  userId: 'string',
  userLanguage: 'string',
  userLocale: 'string',
  userName: 'string',
  userTimeZone: 'string',
  userType: 'string',
  userUiSkin: 'string'
};

/**
 * Sets the specified user’s password to the specified value
 *
 * @param {String} userId - User Id to set password
 * @param {String} password - New password
 * @param {Callback.<String>} [callback] - Callback function
 * @returns {Promise.<String>}
 */
SoapApi.prototype.setPassword = function(userId, password, callback) {
  return this._invoke("setPassword", { userId: userId, password: password }, callback);
};

/**
 * @typedef SoapApi~ResetPasswordResult
 * @prop {String} password
 */
/**
 * Resets the specified user’s password
 *
 * @param {String} userId - User Id to set password
 * @param {String} password - New password
 * @param {Callback.<SoapApi~ResetPasswordResult>} [callback] - Callback function
 * @returns {Promise.<SoapApi~ResetPasswordResult>}
 */
SoapApi.prototype.resetPassword = function(userId, callback) {
  return this._invoke("resetPassword", { userId: userId }, callback);
};


/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
jsforce.on('connection:new', function(conn) {
  conn.soap = new SoapApi(conn);
});


module.exports = SoapApi;

},{"../core":61,"../soap":74,"lodash/core":79}],52:[function(require,module,exports){
/**
 * @file Manages Streaming APIs
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var events = require('events'),
    inherits = require('inherits'),
    _ = require('lodash/core'),
    Faye   = require('faye'),
    jsforce = require('../core');

/**
 * Streaming API topic class
 *
 * @class Streaming~Topic
 * @param {Streaming} steaming - Streaming API object
 * @param {String} name - Topic name
 */
var Topic = function(streaming, name) {
  this._streaming = streaming;
  this.name = name;
};

/**
 * @typedef {Object} Streaming~StreamingMessage
 * @prop {Object} event
 * @prop {Object} event.type - Event type
 * @prop {Record} sobject - Record information
 */
/**
 * Subscribe listener to topic
 *
 * @method Streaming~Topic#subscribe
 * @param {Callback.<Streaming~StreamingMesasge>} listener - Streaming message listener
 * @returns {Subscription} - Faye subscription object
 */
Topic.prototype.subscribe = function(listener) {
  return this._streaming.subscribe(this.name, listener);
};

/**
 * Unsubscribe listener from topic
 *
 * @method Streaming~Topic#unsubscribe
 * @param {Callback.<Streaming~StreamingMesasge>} listener - Streaming message listener
 * @returns {Streaming~Topic}
 */
Topic.prototype.unsubscribe = function(listener) {
  this._streaming.unsubscribe(this.name, listener);
  return this;
};

/*--------------------------------------------*/

/**
 * Streaming API Generic Streaming Channel
 *
 * @class Streaming~Channel
 * @param {Streaming} steaming - Streaming API object
 * @param {String} name - Channel name (starts with "/u/")
 */
var Channel = function(streaming, name) {
  this._streaming = streaming;
  this._name = name;
};

/**
 * Subscribe to hannel
 *
 * @param {Callback.<Streaming~StreamingMessage>} listener - Streaming message listener
 * @returns {Subscription} - Faye subscription object
 */
Channel.prototype.subscribe = function(listener) {
  return this._streaming.subscribe(this._name, listener);
};

Channel.prototype.unsubscribe = function(listener) {
  this._streaming.unsubscribe(this._name, listener);
  return this;
};

Channel.prototype.push = function(events, callback) {
  var isArray = _.isArray(events);
  events = isArray ? events : [ events ];
  var conn = this._streaming._conn;
  if (!this._id) {
    this._id = conn.sobject('StreamingChannel').findOne({ Name: this._name }, 'Id')
      .then(function(rec) { return rec.Id });
  }
  return this._id.then(function(id) {
    var channelUrl = '/sobjects/StreamingChannel/' + id + '/push';
    return conn.requestPost(channelUrl, { pushEvents: events });
  }).then(function(rets) {
    return isArray ? rets : rets[0];
  }).thenCall(callback);
};

/*--------------------------------------------*/

/**
 * Streaming API class
 *
 * @class
 * @extends events.EventEmitter
 * @param {Connection} conn - Connection object
 */
var Streaming = function(conn) {
  this._conn = conn;
};

inherits(Streaming, events.EventEmitter);

/** @private **/
Streaming.prototype._createClient = function(replay) {
  var endpointUrl = [ this._conn.instanceUrl, "cometd" + (replay ? "/replay" : ""), this._conn.version ].join('/');
  var fayeClient = new Faye.Client(endpointUrl, {});
  fayeClient.setHeader('Authorization', 'OAuth '+this._conn.accessToken);
  return fayeClient;
};

/** @private **/
Streaming.prototype._getFayeClient = function(channelName) {
  var isGeneric = channelName.indexOf('/u/') === 0;
  var clientType = isGeneric ? 'generic' : 'pushTopic';
  if (!this._fayeClients || !this._fayeClients[clientType]) {
    this._fayeClients = this._fayeClients || {};
    this._fayeClients[clientType] = this._createClient(isGeneric);
    if (Faye.Transport.NodeHttp) {
      Faye.Transport.NodeHttp.prototype.batching = false; // prevent streaming API server error
    }
  }
  return this._fayeClients[clientType];
};


/**
 * Get named topic
 *
 * @param {String} name - Topic name
 * @returns {Streaming~Topic}
 */
Streaming.prototype.topic = function(name) {
  this._topics = this._topics || {};
  var topic = this._topics[name] =
    this._topics[name] || new Topic(this, name);
  return topic;
};

/**
 * Get Channel for Id
 * @param {String} channelId - Id of StreamingChannel object
 * @returns {Streaming~Channel}
 */
Streaming.prototype.channel = function(channelId) {
  return new Channel(this, channelId);
};

/**
 * Subscribe topic/channel
 *
 * @param {String} name - Topic name
 * @param {Callback.<Streaming~StreamingMessage>} listener - Streaming message listener
 * @returns {Subscription} - Faye subscription object
 */
Streaming.prototype.subscribe = function(name, listener) {
  var channelName = name.indexOf('/') === 0 ? name : '/topic/' + name;
  var fayeClient = this._getFayeClient(channelName);
  return fayeClient.subscribe(channelName, listener);
};

/**
 * Unsubscribe topic
 *
 * @param {String} name - Topic name
 * @param {Callback.<Streaming~StreamingMessage>} listener - Streaming message listener
 * @returns {Streaming}
 */
Streaming.prototype.unsubscribe = function(name, listener) {
  var channelName = name.indexOf('/') === 0 ? name : '/topic/' + name;
  var fayeClient = this._getFayeClient(channelName);
  fayeClient.unsubscribe(channelName, listener);
  return this;
};


/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
jsforce.on('connection:new', function(conn) {
  conn.streaming = new Streaming(conn);
});


module.exports = Streaming;

},{"../core":61,"events":40,"faye":41,"inherits":78,"lodash/core":79}],53:[function(require,module,exports){
/**
 * @file Manages Tooling APIs
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var jsforce = require('../core'),
    _     = require('lodash/core'),
    Cache = require('../cache');

/**
 * API class for Tooling API call
 *
 * @class
 * @param {Connection} conn - Connection
 */
var Tooling = function(conn) {
  this._conn = conn;
  this._logger = conn._logger;
  var delegates = [
    "query",
    "queryMore",
    "create",
    "insert",
    "retrieve",
    "update",
    "upsert",
    "del",
    "delete",
    "destroy",
    "describe",
    "describeGlobal",
    "sobject"
  ];
  delegates.forEach(function(method) {
    this[method] = conn.constructor.prototype[method];
  }, this);

  this.cache = new Cache();

  var cacheOptions = {
    key: function(type) { return type ? "describe." + type : "describe"; }
  };
  this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);
  this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);
  this.describeSObject$ = this.describe$;
  this.describeSObject = this.describe;

  cacheOptions = { key: 'describeGlobal' };
  this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);
  this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);

  this.initialize();
};

/**
 * Initialize tooling API
 * @protected
 */
Tooling.prototype.initialize = function() {
  this.sobjects = {};
  this.cache.clear();
  this.cache.get('describeGlobal').on('value', _.bind(function(res) {
    if (res.result) {
      var types = _.map(res.result.sobjects, function(so) { return so.name; });
      types.forEach(this.sobject, this);
    }
  }, this));
};

/**
 * @private
 */
Tooling.prototype._baseUrl = function() {
  return this._conn._baseUrl() + "/tooling";
};

/**
 * @private
 */
Tooling.prototype.request = function() {
  return this._conn.request.apply(this._conn, arguments);
};

/**
 * Execute query by using SOQL
 *
 * @param {String} soql - SOQL string
 * @param {Callback.<QueryResult>} [callback] - Callback function
 * @returns {Query.<QueryResult>}
 */
/**
 * Query next record set by using query locator
 *
 * @method Tooling#query
 * @param {String} locator - Next record set locator
 * @param {Callback.<QueryResult>} [callback] - Callback function
 * @returns {Query.<QueryResult>}
 */
/**
 * Retrieve specified records
 *
 * @method Tooling#queryMore
 * @param {String} type - SObject Type
 * @param {String|Array.<String>} ids - A record ID or array of record IDs
 * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function
 * @returns {Promise.<Record|Array.<Record>>}
 */

/**
 * Synonym of Tooling#create()
 *
 * @method Tooling#insert
 * @param {String} type - SObject Type
 * @param {Object|Array.<Object>} records - A record or array of records to create
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
/**
 * Create records
 *
 * @method Tooling#create
 * @param {String} type - SObject Type
 * @param {Record|Array.<Record>} records - A record or array of records to create
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */

/**
 * Update records
 *
 * @method Tooling#update
 * @param {String} type - SObject Type
 * @param {Record|Array.<Record>} records - A record or array of records to update
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */

/**
 * Upsert records
 *
 * @method Tooling#upsert
 * @param {String} type - SObject Type
 * @param {Record|Array.<Record>} records - Record or array of records to upsert
 * @param {String} extIdField - External ID field name
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */

/**
 * Synonym of Tooling#destroy()
 *
 * @method Tooling#delete
 * @param {String} type - SObject Type
 * @param {String|Array.<String>} ids - A ID or array of IDs to delete
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
/**
 * Synonym of Tooling#destroy()
 *
 * @method Tooling#del
 * @param {String} type - SObject Type
 * @param {String|Array.<String>} ids - A ID or array of IDs to delete
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
/**
 * Delete records
 *
 * @method Tooling#destroy
 * @param {String} type - SObject Type
 * @param {String|Array.<String>} ids - A ID or array of IDs to delete
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */

/**
 * Synonym of Tooling#describe()
 *
 * @method Tooling#describeSObject
 * @param {String} type - SObject Type
 * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function
 * @returns {Promise.<DescribeSObjectResult>}
 */
/**
 * Describe SObject metadata
 *
 * @method Tooling#describe
 * @param {String} type - SObject Type
 * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function
 * @returns {Promise.<DescribeSObjectResult>}
 */

/**
 * Describe global SObjects
 *
 * @method Tooling#describeGlobal
 * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function
 * @returns {Promise.<DescribeGlobalResult>}
 */

/**
 * Get SObject instance
 *
 * @method Tooling#sobject
 * @param {String} type - SObject Type
 * @returns {SObject}
 */

/**
 * @typedef {Object} Tooling~ExecuteAnonymousResult
 * @prop {Boolean} compiled - Flag if the query is compiled successfully
 * @prop {String} compileProblem - Error reason in compilation
 * @prop {Boolean} success - Flag if the code is executed successfully
 * @prop {Number} line - Line number for the error
 * @prop {Number} column - Column number for the error
 * @prop {String} exceptionMessage - Exception message
 * @prop {String} exceptionStackTrace - Exception stack trace
 */
/**
 * Executes Apex code anonymously
 *
 * @param {String} body - Anonymous Apex code
 * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function
 * @returns {Promise.<Tooling~ExecuteAnonymousResult>}
 */
Tooling.prototype.executeAnonymous = function(body, callback) {
  var url = this._baseUrl() + "/executeAnonymous?anonymousBody=" + encodeURIComponent(body);
  return this.request(url).thenCall(callback);
};

/**
 * Executes Apex tests asynchronously
 *
 * @param {Array.<String>} classids - Comma separated list of class IDs
 * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function
 * @returns {Promise.<Tooling~ExecuteAnonymousResult>}
 */
Tooling.prototype.runTestsAsynchronous = function(classids, callback) {
  var url = this._baseUrl() + "/runTestsAsynchronous/?classids=" + classids.join(',');
  return this.request(url).thenCall(callback);
};

/**
 * @typedef {Object} Tooling~CompletionsResult
 * @prop {Object} publicDeclarations
 */
/**
 * Retrieves available code completions of the referenced type
 *
 * @param {String} [type] - completion type (default 'apex')
 * @param {Callback.<Tooling~CompletionsResult>} [callback] - Callback function
 * @returns {Promise.<Tooling~CompletionsResult>}
 */
Tooling.prototype.completions = function(type, callback) {
  if (!_.isString(type)) {
    callback = type;
    type = 'apex';
  }
  var url = this._baseUrl() + "/completions?type=" + encodeURIComponent(type);
  return this.request(url).thenCall(callback);
};


/*--------------------------------------------*/
/*
 * Register hook in connection instantiation for dynamically adding this API module features
 */
jsforce.on('connection:new', function(conn) {
  conn.tooling = new Tooling(conn);
});


module.exports = Tooling;

},{"../cache":59,"../core":61,"lodash/core":79}],54:[function(require,module,exports){
/*global Sfdc */
'use strict';

var Duplex = require('readable-stream').Duplex,
    _ = require('lodash/core');

function parseHeaders(hs) {
  var headers = {};
  hs.split(/\n/).forEach(function(line) {
    var pair = line.split(/\s*:\s*/);
    var name = pair[0].toLowerCase();
    var value = pair[1];
    headers[name] = value;
  });
  return headers;
}

module.exports = {

  supported: typeof Sfdc === 'object' && typeof Sfdc.canvas !== 'undefined',

  createRequest: function(signedRequest) {
    return function(params, callback) {
      var response;
      var str = new Duplex();
      str._read = function(size) {
        if (response) {
          str.push(response.body);
        }
      };
      var bufs = [];
      var sent = false;
      str._write = function(chunk, encoding, callback) {
        bufs.push(chunk.toString(encoding));
        callback();
      };
      str.on('finish', function() {
        if (!sent) {
          send(bufs.join(''));
          sent = true;
        }
      });
      if (params.body || params.body === "" || !/^(put|post|patch)$/i.test(params.method)) {
        send(params.body);
        sent = true;
      }

      function send(body) {
        var settings = {
          client: signedRequest.client,
          method: params.method,
          data: body
        };
        if (params.headers) {
          settings.headers = {};
          for (var name in params.headers) {
            if (name.toLowerCase() === 'content-type') {
              settings.contentType = params.headers[name];
            } else {
              settings.headers[name] = params.headers[name];
            }
          }
        }
        settings.success = function(data) {
          var headers = parseHeaders(data.responseHeaders);
          var body = data.payload;
          if (!_.isString(body)) {
            body = JSON.stringify(body);
          }
          response = {
            statusCode : data.status,
            headers: headers,
            body: body
          };
          if (callback) {
            callback(null, response, response.body);
          }
          str.end();
        };
        settings.failure = function(err) {
          if (callback) {
            callback(err);
          }
        };
        Sfdc.canvas.client.ajax(params.url, settings);
      }
      return str;
    };
  }
};

},{"lodash/core":79,"readable-stream":89}],55:[function(require,module,exports){
/**
 * @file Browser client connection management class
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var events = require('events'),
    inherits = require('inherits'),
    qs = require('querystring'),
    _ = require('lodash/core'),
    Connection = require('../connection'),
    OAuth2 = require('../oauth2');

/**
 * @private
 */
function popupWin(url, w, h) {
  var left = (screen.width/2)-(w/2);
  var top = (screen.height/2)-(h/2);
  return window.open(url, null, 'location=yes,toolbar=no,status=no,menubar=no,width='+w+',height='+h+',top='+top+',left='+left);
}

function handleCallbackResponse() {
  var res = checkCallbackResponse();
  var state = localStorage.getItem('jsforce_state');
  if (res && state && res.body.state === state) {
    localStorage.removeItem('jsforce_state');
    var states = state.split('.');
    var prefix = states[0], promptType = states[1];
    var cli = new Client(prefix);
    if (res.success) {
      cli._storeTokens(res.body);
      location.hash = '';
    } else {
      cli._storeError(res.body);
    }
    if (promptType === 'popup') { window.close(); }
    return true;
  }
}

/**
 * @private
 */
function checkCallbackResponse() {
  var params;
  if (window.location.hash) {
    params = qs.parse(window.location.hash.substring(1));
    if (params.access_token) {
      return { success: true, body: params };
    }
  } else if (window.location.search) {
    params = qs.parse(window.location.search.substring(1));
    if (params.error) {
      return { success: false, body: params };
    }
  }
}

/** @private **/
var clientIdx = 0;


/**
 * @class
 * @todo add document
 */
var Client = function(prefix) {
  this._prefix = prefix || 'jsforce' + clientIdx++;
  this.connection = null;
};

inherits(Client, events.EventEmitter);

/**
 *
 */
Client.prototype.init = function(config) {
  if (handleCallbackResponse()) { return; }
  this.config = config;
  this.connection = new Connection(config);
  var tokens = this._getTokens();
  if (tokens) {
    this.connection.initialize(tokens);
    var self = this;
    setTimeout(function() {
      self.emit('connect', self.connection);
    }, 10);
  }
};

/**
 *
 */
Client.prototype.login = function(options, callback) {
  if (_.isFunction(options)) {
    callback = options;
    options = {};
  }
  options = options || {};
  callback = callback || function(){ };
  _.extend(options, this.config);
  var self = this;
  this._prompt(options, callback);
};


Client.prototype._prompt = function(options, callback) {
  var self = this;
  var oauth2 = new OAuth2(options);
  var rand = Math.random().toString(36).substring(2);
  var state = [ this._prefix, "popup", rand ].join('.');
  localStorage.setItem("jsforce_state", state);
  var authzUrl = oauth2.getAuthorizationUrl({
    response_type: 'token',
    scope : options.scope,
    state: state
  });
  var size = options.size || {};
  var pw = popupWin(authzUrl, size.width || 912, size.height || 513);
  if (!pw) {
    state = [ this._prefix, "redirect", rand ].join('.');
    localStorage.setItem("jsforce_state", state);
    authzUrl = oauth2.getAuthorizationUrl({
      response_type: 'token',
      scope : options.scope,
      state: state
    });
    location.href = authzUrl;
    return;
  }
  self._removeTokens();
  var pid = setInterval(function() {
    try {
      if (!pw || pw.closed) {
        clearInterval(pid);
        var tokens = self._getTokens();
        if (tokens) {
          self.connection.initialize(tokens);
          self.emit('connect', self.connection);
          callback(null, { status: 'connect' });
        } else {
          var err = self._getError();
          if (err) {
            callback(new Error(err.error + ": " + err.error_description));
          } else {
            callback(null, { status: 'cancel' });
          }
        }
      }
    } catch(e) {}
  }, 1000);
};

/**
 *
 */
Client.prototype.isLoggedIn = function() {
  return !!(this.connection && this.connection.accessToken);
};

/**
 *
 */
Client.prototype.logout = function() {
  this.connection.logout();
  this._removeTokens();
  this.emit('disconnect');
};

/**
 * @private
 */
Client.prototype._getTokens = function() {
  var regexp = new RegExp("(^|;\\s*)"+this._prefix+"_loggedin=true(;|$)");
  if (document.cookie.match(regexp)) {
    var issuedAt = Number(localStorage.getItem(this._prefix+'_issued_at'));
    if (Date.now() < issuedAt + 2 * 60 * 60 * 1000) { // 2 hours
      var userInfo;
      var idUrl = localStorage.getItem(this._prefix + '_id');
      if (idUrl) {
        var ids = idUrl.split('/');
        userInfo = { id: ids.pop(), organizationId: ids.pop(), url: idUrl };
      }
      return {
        accessToken: localStorage.getItem(this._prefix + '_access_token'),
        instanceUrl: localStorage.getItem(this._prefix + '_instance_url'),
        userInfo: userInfo
      };
    }
  }
  return null;
};

/**
 * @private
 */
Client.prototype._storeTokens = function(params) {
  localStorage.setItem(this._prefix + '_access_token', params.access_token);
  localStorage.setItem(this._prefix + '_instance_url', params.instance_url);
  localStorage.setItem(this._prefix + '_issued_at', params.issued_at);
  localStorage.setItem(this._prefix + '_id', params.id);
  document.cookie = this._prefix + '_loggedin=true;';
};

/**
 * @private
 */
Client.prototype._removeTokens = function() {
  localStorage.removeItem(this._prefix + '_access_token');
  localStorage.removeItem(this._prefix + '_instance_url');
  localStorage.removeItem(this._prefix + '_issued_at');
  localStorage.removeItem(this._prefix + '_id');
  document.cookie = this._prefix + '_loggedin=';
};

/**
 * @private
 */
Client.prototype._getError = function() {
  try {
    var err = JSON.parse(localStorage.getItem(this._prefix + '_error'));
    localStorage.removeItem(this._prefix + '_error');
    return err;
  } catch(e) {}
};

/**
 * @private
 */
Client.prototype._storeError = function(err) {
  localStorage.setItem(this._prefix + '_error', JSON.stringify(err));
};

/**
 *
 */
module.exports = new Client();

module.exports.Client = Client;

},{"../connection":60,"../oauth2":66,"events":40,"inherits":78,"lodash/core":79,"querystring":100}],56:[function(require,module,exports){
'use strict';

var jsforce = require('../core');
jsforce.browser = require('./client');
require('../api');
module.exports = jsforce;

},{"../api":49,"../core":61,"./client":55}],57:[function(require,module,exports){
/*global window, document */
'use strict';

var _index = 0;

module.exports = {

  supported: typeof window !== 'undefined',

  createRequest: function(jsonpParam, timeout) {
    jsonpParam = jsonpParam || 'callback';
    timeout = timeout || 10000;

    return function(params, callback) {
      if (params.method.toUpperCase() !== 'GET') {
        return callback(new Error('JSONP only supports GET request.'));
      }
      var cbFuncName = '_jsforce_jsonpCallback_' + (++_index);
      var callbacks = window;
      var url = params.url;
      url += url.indexOf('?')>0 ? '&' : '?';
      url += jsonpParam + '=' + cbFuncName;

      var script = document.createElement('script');
      script.type = 'text/javascript';
      script.src = url;
      document.documentElement.appendChild(script);

      var pid = setTimeout(function() {
        cleanup();
        callback(new Error("JSONP call time out."));
      }, timeout);

      callbacks[cbFuncName] = function(res) {
        cleanup();
        callback(null, {
          statusCode: 200,
          headers: { "content-type": "application/json" },
          body: JSON.stringify(res)
        });
      };

      var cleanup = function() {
        clearTimeout(pid);
        document.documentElement.removeChild(script);
        delete callbacks[cbFuncName];
      };
    };

  }

};
},{}],58:[function(require,module,exports){
'use strict';

var Duplex = require('readable-stream').Duplex;
var _ = require('lodash/core');

module.exports = function(params, callback) {
  var xhr = new XMLHttpRequest();
  xhr.open(params.method, params.url);
  if (params.headers) {
    for (var header in params.headers) {
      xhr.setRequestHeader(header, params.headers[header]);
    }
  }
  xhr.setRequestHeader("Accept", "*/*");
  var response;
  var str = new Duplex();
  str._read = function(size) {
    if (response) {
      str.push(response.body);
    }
  };
  var bufs = [];
  var sent = false;
  str._write = function(chunk, encoding, callback) {
    bufs.push(chunk.toString(encoding === "buffer" ? "binary" : encoding));
    callback();
  };
  str.on('finish', function() {
    if (!sent) {
      xhr.send(bufs.join(''));
      sent = true;
    }
  });
  if (params.body || params.body === "" || !/^(put|post|patch)$/i.test(params.method)) {
    xhr.send(params.body);
    sent = true;
  }
  xhr.onreadystatechange = function() {
    if (xhr.readyState === 4) {
      var headerNames = getResponseHeaderNames(xhr);
      var headers = {};
      _.forEach(headerNames, function(headerName) {
        if (headerName) {
          headers[headerName] = xhr.getResponseHeader(headerName);
        }
      });
      response = {
        statusCode: xhr.status,
        headers: headers,
        body: xhr.response
      };
      if (!response.statusCode) {
        response.statusCode = 400;
        response.body = "Access Declined";
      }
      if (callback) {
        callback(null, response, response.body);
      }
      str.end();
    }
  };
  return str;
};

function getResponseHeaderNames(xhr) {
  var headerLines = (xhr.getAllResponseHeaders() || "").split(/[\r\n]+/);
  return _.map(headerLines, function(headerLine) {
    return headerLine.split(/\s*:/)[0].toLowerCase();
  });
}

},{"lodash/core":79,"readable-stream":89}],59:[function(require,module,exports){
/**
 * @file Manages asynchronous method response cache
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var events = require('events'),
    inherits = require('inherits'),
    _      = require('lodash/core');

/**
 * Class for managing cache entry
 *
 * @private
 * @class
 * @constructor
 * @template T
 */
var CacheEntry = function() {
  this.fetching = false;
};

inherits(CacheEntry, events.EventEmitter);

/**
 * Get value in the cache entry
 *
 * @param {Callback.<T>} [callback] - Callback function callbacked the cache entry updated
 * @returns {T|undefined}
 */
CacheEntry.prototype.get = function(callback) {
  if (!callback) {
    return this._value;
  } else {
    this.once('value', callback);
    if (!_.isUndefined(this._value)) {
      this.emit('value', this._value);
    }
  }
};

/**
 * Set value in the cache entry
 *
 * @param {T} [value] - A value for caching
 */
CacheEntry.prototype.set = function(value) {
  this._value = value;
  this.emit('value', this._value);
};

/**
 * Clear cached value
 */
CacheEntry.prototype.clear = function() {
  this.fetching = false;
  delete this._value;
};


/**
 * Caching manager for async methods
 *
 * @class
 * @constructor
 */
var Cache = function() {
  this._entries = {};
};

/**
 * retrive cache entry, or create if not exists.
 *
 * @param {String} [key] - Key of cache entry
 * @returns {CacheEntry}
 */
Cache.prototype.get = function(key) {
  if (key && this._entries[key]) {
    return this._entries[key];
  } else {
    var entry = new CacheEntry();
    this._entries[key] = entry;
    return entry;
  }
};

/**
 * clear cache entries prefix matching given key
 * @param {String} [key] - Key prefix of cache entry to clear
 */
Cache.prototype.clear = function(key) {
  for (var k in this._entries) {
    if (!key || k.indexOf(key) === 0) {
      this._entries[k].clear();
    }
  }
};

/**
 * create and return cache key from namespace and serialized arguments.
 * @private
 */
function createCacheKey(namespace, args) {
  args = Array.prototype.slice.apply(args);
  return namespace + '(' + _.map(args, function(a){ return JSON.stringify(a); }).join(',') + ')';
}

/**
 * Enable caching for async call fn to intercept the response and store it to cache.
 * The original async calll fn is always invoked.
 *
 * @protected
 * @param {Function} fn - Function to covert cacheable
 * @param {Object} [scope] - Scope of function call
 * @param {Object} [options] - Options
 * @return {Function} - Cached version of function
 */
Cache.prototype.makeResponseCacheable = function(fn, scope, options) {
  var cache = this;
  options = options || {};
  return function() {
    var args = Array.prototype.slice.apply(arguments);
    var callback = args.pop();
    if (!_.isFunction(callback)) {
      args.push(callback);
      callback = null;
    }
    var key = _.isString(options.key) ? options.key :
              _.isFunction(options.key) ? options.key.apply(scope, args) :
              createCacheKey(options.namespace, args);
    var entry = cache.get(key);
    entry.fetching = true;
    if (callback) {
      args.push(function(err, result) {
        entry.set({ error: err, result: result });
        callback(err, result);
      });
    }
    var ret, error;
    try {
      ret = fn.apply(scope || this, args);
    } catch(e) {
      error = e;
    }
    if (ret && _.isFunction(ret.then)) { // if the returned value is promise
      if (!callback) {
        return ret.then(function(result) {
          entry.set({ error: undefined, result: result });
          return result;
        }, function(err) {
          entry.set({ error: err, result: undefined });
          throw err;
        });
      } else {
        return ret;
      }
    } else {
      entry.set({ error: error, result: ret });
      if (error) { throw error; }
      return ret;
    }
  };
};

/**
 * Enable caching for async call fn to lookup the response cache first, then invoke original if no cached value.
 *
 * @protected
 * @param {Function} fn - Function to covert cacheable
 * @param {Object} [scope] - Scope of function call
 * @param {Object} [options] - Options
 * @return {Function} - Cached version of function
 */
Cache.prototype.makeCacheable = function(fn, scope, options) {
  var cache = this;
  options = options || {};
  var $fn = function() {
    var args = Array.prototype.slice.apply(arguments);
    var callback = args.pop();
    if (!_.isFunction(callback)) {
      args.push(callback);
    }
    var key = _.isString(options.key) ? options.key :
              _.isFunction(options.key) ? options.key.apply(scope, args) :
              createCacheKey(options.namespace, args);
    var entry = cache.get(key);
    if (!_.isFunction(callback)) { // if callback is not given in last arg, return cached result (immediate).
      var value = entry.get();
      if (!value) { throw new Error('Function call result is not cached yet.'); }
      if (value.error) { throw value.error; }
      return value.result;
    }
    entry.get(function(value) {
      callback(value.error, value.result);
    });
    if (!entry.fetching) { // only when no other client is calling function
      entry.fetching = true;
      args.push(function(err, result) {
        entry.set({ error: err, result: result });
      });
      fn.apply(scope || this, args);
    }
  };
  $fn.clear = function() {
    var key = _.isString(options.key) ? options.key :
              _.isFunction(options.key) ? options.key.apply(scope, arguments) :
              createCacheKey(options.namespace, arguments);
    cache.clear(key);
  };
  return $fn;
};


module.exports = Cache;

},{"events":40,"inherits":78,"lodash/core":79}],60:[function(require,module,exports){
(function (Buffer){
/*global Buffer */
/**
 * @file Connection class to keep the API session information and manage requests
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var events  = require('events'),
    inherits = require('inherits'),
    _       = require('lodash/core'),
    Promise = require('./promise'),
    Logger  = require('./logger'),
    OAuth2  = require('./oauth2'),
    Query   = require('./query'),
    SObject = require('./sobject'),
    QuickAction = require('./quick-action'),
    HttpApi = require('./http-api'),
    Transport = require('./transport'),
    Process = require('./process'),
    Cache   = require('./cache');

var defaults = {
  loginUrl: "https://login.salesforce.com",
  instanceUrl: "",
  version: "36.0"
};

/**
 * Connection class to keep the API session information and manage requests
 *
 * @constructor
 * @extends events.EventEmitter
 * @param {Object} [options] - Connection options
 * @param {OAuth2|Object} [options.oauth2] - OAuth2 instance or options to be passed to OAuth2 constructor
 * @param {String} [options.logLevel] - Output logging level (DEBUG|INFO|WARN|ERROR|FATAL)
 * @param {String} [options.version] - Salesforce API Version (without "v" prefix)
 * @param {Number} [options.maxRequest] - Max number of requests allowed in parallel call
 * @param {String} [options.loginUrl] - Salesforce Login Server URL (e.g. https://login.salesforce.com/)
 * @param {String} [options.instanceUrl] - Salesforce Instance URL (e.g. https://na1.salesforce.com/)
 * @param {String} [options.serverUrl] - Salesforce SOAP service endpoint URL (e.g. https://na1.salesforce.com/services/Soap/u/28.0)
 * @param {String} [options.accessToken] - Salesforce OAuth2 access token
 * @param {String} [options.sessionId] - Salesforce session ID
 * @param {String} [options.refreshToken] - Salesforce OAuth2 refresh token
 * @param {String|Object} [options.signedRequest] - Salesforce Canvas signed request (Raw Base64 string, JSON string, or deserialized JSON)
 * @param {String} [options.proxyUrl] - Cross-domain proxy server URL, used in browser client, non Visualforce app.
 * @param {Object} [options.callOptions] - Call options used in each SOAP/REST API request. See manual.
 */
var Connection = module.exports = function(options) {
  options = options || {};

  this._logger = new Logger(options.logLevel);

  var oauth2 = options.oauth2 || {
    loginUrl : options.loginUrl,
    clientId : options.clientId,
    clientSecret : options.clientSecret,
    redirectUri : options.redirectUri
  };

  /**
   * OAuth2 object
   * @member {OAuth2} Connection#oauth2
   */
  this.oauth2 = oauth2 = oauth2 instanceof OAuth2 ? oauth2 : new OAuth2(oauth2);

  this.loginUrl = options.loginUrl || oauth2.loginUrl || defaults.loginUrl;
  this.version = options.version || defaults.version;
  this.maxRequest = options.maxRequest || this.maxRequest || 10;

  /** @private */
  this._transport =
    options.proxyUrl ? new Transport.ProxyTransport(options.proxyUrl) : new Transport();

  this.callOptions = options.callOptions;

  /*
   * Fire connection:new event to notify jsforce plugin modules
   */
  var jsforce = require('./core');
  jsforce.emit('connection:new', this);

  /**
   * Streaming API object
   * @member {Streaming} Connection#streaming
   */
  // this.streaming = new Streaming(this);
  /**
   * Bulk API object
   * @member {Bulk} Connection#bulk
   */
  // this.bulk = new Bulk(this);
  /**
   * Tooling API object
   * @member {Tooling} Connection#tooling
   */
  // this.tooling = new Tooling(this);
  /**
   * Analytics API object
   * @member {Analytics} Connection#analytics
   */
  // this.analytics = new Analytics(this);
  /**
   * Chatter API object
   * @member {Chatter} Connection#chatter
   */
  // this.chatter = new Chatter(this);
  /**
   * Metadata API object
   * @member {Metadata} Connection#metadata
   */
  // this.metadata = new Metadata(this);

  /**
   * SOAP API object
   * @member {SoapApi} Connection#soap
   */
  // this.soap = new SoapApi(this);

  /**
   * Apex REST API object
   * @member {Apex} Connection#apex
   */
  // this.apex = new Apex(this);

  /**
   * @member {Process} Connection#process
   */
  this.process = new Process(this);

  /**
   * Cache object for result
   * @member {Cache} Connection#cache
   */
  this.cache = new Cache();

  // Allow to delegate connection refresh to outer function
  var self = this;
  var refreshFn = options.refreshFn;
  if (!refreshFn && this.oauth2.clientId && this.oauth2.clientSecret) {
    refreshFn = oauthRefreshFn;
  }
  if (refreshFn) {
    this._refreshDelegate = new HttpApi.SessionRefreshDelegate(this, refreshFn);
  }

  var cacheOptions = {
    key: function(type) { return type ? "describe." + type : "describe"; }
  };
  this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);
  this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);
  this.describeSObject$ = this.describe$;
  this.describeSObject = this.describe;

  cacheOptions = { key: 'describeGlobal' };
  this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);
  this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);

  this.initialize(options);
};

inherits(Connection, events.EventEmitter);

/**
 * Initialize connection.
 *
 * @protected
 * @param {Object} options - Initialization options
 * @param {String} [options.instanceUrl] - Salesforce Instance URL (e.g. https://na1.salesforce.com/)
 * @param {String} [options.serverUrl] - Salesforce SOAP service endpoint URL (e.g. https://na1.salesforce.com/services/Soap/u/28.0)
 * @param {String} [options.accessToken] - Salesforce OAuth2 access token
 * @param {String} [options.sessionId] - Salesforce session ID
 * @param {String} [options.refreshToken] - Salesforce OAuth2 refresh token
 * @param {String|Object} [options.signedRequest] - Salesforce Canvas signed request (Raw Base64 string, JSON string, or deserialized JSON)
 * @param {UserInfo} [options.userInfo] - Logged in user information
 */
Connection.prototype.initialize = function(options) {
  if (!options.instanceUrl && options.serverUrl) {
    options.instanceUrl = options.serverUrl.split('/').slice(0, 3).join('/');
  }
  this.instanceUrl = options.instanceUrl || options.serverUrl || this.instanceUrl || defaults.instanceUrl;

  this.accessToken = options.sessionId || options.accessToken || this.accessToken;
  this.refreshToken = options.refreshToken || this.refreshToken;
  if (this.refreshToken && !this._refreshDelegate) {
    throw new Error("Refresh token is specified without oauth2 client information or refresh function");
  }

  this.signedRequest = options.signedRequest && parseSignedRequest(options.signedRequest);
  if (this.signedRequest) {
    this.accessToken = this.signedRequest.client.oauthToken;
  }

  if (options.userInfo) {
    this.userInfo = options.userInfo;
  }

  this.limitInfo = {};

  this.sobjects = {};
  this.cache.clear();
  this.cache.get('describeGlobal').on('value', _.bind(function(res) {
    if (res.result) {
      var types = _.map(res.result.sobjects, function(so) { return so.name; });
      types.forEach(this.sobject, this);
    }
  }, this));

  if (this.tooling) {
    this.tooling.initialize();
  }

  this._sessionType = options.sessionId ? "soap" : "oauth2";

};

/** @private **/
function oauthRefreshFn(conn, callback) {
  conn.oauth2.refreshToken(conn.refreshToken, function(err, res) {
    if (err) { return callback(err); }
    var userInfo = parseIdUrl(res.id);
    conn.initialize({
      instanceUrl : res.instance_url,
      accessToken : res.access_token,
      userInfo : userInfo
    });
    callback(null, res.access_token, res);
  });
}

/** @private **/
function parseSignedRequest(sr) {
  if (_.isString(sr)) {
    if (sr[0] === '{') { // might be JSON
      return JSON.parse(sr);
    } else { // might be original base64-encoded signed request
      var msg = sr.split('.').pop(); // retrieve latter part
      var json = new Buffer(msg, 'base64').toString('utf-8');
      return JSON.parse(json);
    }
    return null;
  }
  return sr;
}


/** @private **/
Connection.prototype._baseUrl = function() {
  return [ this.instanceUrl, "services/data", "v" + this.version ].join('/');
};

/**
 * Convert path to absolute url
 * @private
 */
Connection.prototype._normalizeUrl = function(url) {
  if (url[0] === '/') {
    if (url.indexOf('/services/') === 0) {
      return this.instanceUrl + url;
    } else {
      return this._baseUrl() + url;
    }
  } else {
    return url;
  }
};

/**
 * Send REST API request with given HTTP request info, with connected session information.
 *
 * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
 * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
 * , or relative path from version root ('/sobjects/Account/describe').
 *
 * @param {String|Object} request - HTTP request object or URL to GET request
 * @param {String} request.method - HTTP method URL to send HTTP request
 * @param {String} request.url - URL to send HTTP request
 * @param {Object} [request.headers] - HTTP request headers in hash object (key-value)
 * @param {Object} [options] - HTTP API request options
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Connection.prototype.request = function(request, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = null;
  }
  options = options || {};
  var self = this;

  // if request is simple string, regard it as url in GET method
  if (_.isString(request)) {
    request = { method: 'GET', url: request };
  }
  // if url is given in relative path, prepend base url or instance url before.
  request.url = this._normalizeUrl(request.url);

  var httpApi = new HttpApi(this, options);

  // log api usage and its quota
  httpApi.on('response', function(response) {
    if (response.headers && response.headers["sforce-limit-info"]) {
      var apiUsage = response.headers["sforce-limit-info"].match(/api\-usage=(\d+)\/(\d+)/);
      if (apiUsage) {
        self.limitInfo = {
          apiUsage: {
            used: parseInt(apiUsage[1], 10),
            limit: parseInt(apiUsage[2], 10)
          }
        };
      }
    }
  });
  return httpApi.request(request).thenCall(callback);
};

/**
 * Send HTTP GET request
 *
 * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
 * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
 * , or relative path from version root ('/sobjects/Account/describe').
 *
 * @param {String} url - Endpoint URL to request HTTP GET
 * @param {Object} [options] - HTTP API request options
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Connection.prototype.requestGet = function(url, options, callback) {
  var request = {
    method: "GET",
    url: url
  };
  return this.request(request, options, callback);
};


/**
 * Send HTTP POST request with JSON body, with connected session information
 *
 * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
 * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
 * , or relative path from version root ('/sobjects/Account/describe').
 *
 * @param {String} url - Endpoint URL to request HTTP POST
 * @param {Object} body - Any JS object which can be serialized to JSON
 * @param {Object} [options] - HTTP API request options
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Connection.prototype.requestPost = function(url, body, options, callback) {
  var request = {
    method: "POST",
    url: url,
    body: JSON.stringify(body),
    headers: { "content-type": "application/json" }
  };
  return this.request(request, options, callback);
};

/**
 * Send HTTP PUT request with JSON body, with connected session information
 *
 * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
 * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
 * , or relative path from version root ('/sobjects/Account/describe').
 *
 * @param {String} url - Endpoint URL to request HTTP PUT
 * @param {Object} body - Any JS object which can be serialized to JSON
 * @param {Object} [options] - HTTP API request options
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Connection.prototype.requestPut = function(url, body, options, callback) {
  var request = {
    method: "PUT",
    url: url,
    body: JSON.stringify(body),
    headers: { "content-type": "application/json" }
  };
  return this.request(request, options, callback);
};

/**
 * Send HTTP PATCH request with JSON body
 *
 * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
 * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
 * , or relative path from version root ('/sobjects/Account/describe').
 *
 * @param {String} url - Endpoint URL to request HTTP PATCH
 * @param {Object} body - Any JS object which can be serialized to JSON
 * @param {Object} [options] - HTTP API request options
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Connection.prototype.requestPatch = function(url, body, options, callback) {
  var request = {
    method: "PATCH",
    url: url,
    body: JSON.stringify(body),
    headers: { "content-type": "application/json" }
  };
  return this.request(request, options, callback);
};

/**
 * Send HTTP DELETE request
 *
 * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')
 * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')
 * , or relative path from version root ('/sobjects/Account/describe').
 *
 * @param {String} url - Endpoint URL to request HTTP DELETE
 * @param {Object} [options] - HTTP API request options
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
Connection.prototype.requestDelete = function(url, options, callback) {
  var request = {
    method: "DELETE",
    url: url
  };
  return this.request(request, options, callback);
};


/** @private */
function formatDate(date) {
  function pad(number) {
    if (number < 10) {
      return '0' + number;
    }
    return number;
  }

  return date.getUTCFullYear() +
    '-' + pad(date.getUTCMonth() + 1) +
    '-' + pad(date.getUTCDate()) +
    'T' + pad(date.getUTCHours()) +
    ':' + pad(date.getUTCMinutes()) +
    ':' + pad(date.getUTCSeconds()) +
    '+00:00';
}


/** @private **/
function parseIdUrl(idUrl) {
  var idUrls = idUrl.split("/");
  var userId = idUrls.pop(), orgId = idUrls.pop();
  return {
    id: userId,
    organizationId: orgId,
    url: idUrl
  };
}

/**
 * @callback Callback
 * @type {Function}
 * @param {Error} err - Callback error
 * @param {T} response - Callback response
 * @template T
 */

/**
 * @typedef {Object} QueryResult
 * @prop {Boolean} done - Flag if the query is fetched all records or not
 * @prop {String} [nextRecordsUrl] - URL locator for next record set, (available when done = false)
 * @prop {Number} totalSize - Total size for query
 * @prop {Array.<Record>} [records] - Array of records fetched
 */

/**
 * Execute query by using SOQL
 *
 * @param {String} soql - SOQL string
 * @param {Callback.<QueryResult>} [callback] - Callback function
 * @returns {Query.<QueryResult>}
 */
Connection.prototype.query = function(soql, callback) {
  var query = new Query(this, soql);
  if (callback) {
    query.run(callback);
  }
  return query;
};

/**
 * Execute query by using SOQL, including deleted records
 *
 * @param {String} soql - SOQL string
 * @param {Callback.<QueryResult>} [callback] - Callback function
 * @returns {Query.<QueryResult>}
 */
Connection.prototype.queryAll = function(soql, callback) {
  var query = new Query(this, soql);
  query.scanAll(true);
  if (callback) {
    query.run(callback);
  }
  return query;
};

/**
 * Query next record set by using query locator
 *
 * @param {String} locator - Next record set locator
 * @param {Callback.<QueryResult>} [callback] - Callback function
 * @returns {Query.<QueryResult>}
 */
Connection.prototype.queryMore = function(locator, callback) {
  var query = new Query(this, null, locator);
  if (callback) {
    query.run(callback);
  }
  return query;
};

/**
 * Retrieve specified records
 *
 * @param {String} type - SObject Type
 * @param {String|Array.<String>} ids - A record ID or array of record IDs
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function
 * @returns {Promise.<Record|Array.<Record>>}
 */
Connection.prototype.retrieve = function(type, ids, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }
  var self = this;
  var isArray = _.isArray(ids);
  ids = isArray ? ids : [ ids ];
  if (ids.length > self.maxRequest) {
    return Promise.reject(new Error("Exceeded max limit of concurrent call")).thenCall(callback);
  }
  return Promise.all(
    _.map(ids, function(id) {
      if (!id) { return Promise.reject(new Error('Invalid record ID. Specify valid record ID value')).thenCall(callback); }
      var url = [ self._baseUrl(), "sobjects", type, id ].join('/');
      return self.request(url);
    })
  ).then(function(results) {
    return !isArray && _.isArray(results) ? results[0] : results;
  }).thenCall(callback);
};


/**
 * @typedef RecordResult
 * @prop {Boolean} success - The result is succeessful or not
 * @prop {String} [id] - Record ID
 * @prop {Array.<String>} [errors] - Errors (available when success = false)
 */

/**
 * Synonym of Connection#create()
 *
 * @method Connection#insert
 * @param {String} type - SObject Type
 * @param {Object|Array.<Object>} records - A record or array of records to create
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
/**
 * Create records
 *
 * @method Connection#create
 * @param {String} type - SObject Type
 * @param {Record|Array.<Record>} records - A record or array of records to create
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
Connection.prototype.insert =
Connection.prototype.create = function(type, records, options, callback) {
  if (!_.isString(type)) {
    // reverse order
    callback = options;
    options = records;
    records = type;
    type = null;
  }
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};
  var self = this;
  var isArray = _.isArray(records);
  records = isArray ? records : [ records ];
  if (records.length > self.maxRequest) {
    return Promise.reject(new Error("Exceeded max limit of concurrent call")).thenCall(callback);
  }
  return Promise.all(
    _.map(records, function(record) {
      var sobjectType = type || (record.attributes && record.attributes.type) || record.type;
      if (!sobjectType) {
        throw new Error('No SObject Type defined in record');
      }
      record = _.clone(record);
      delete record.Id;
      delete record.type;
      delete record.attributes;

      var url = [ self._baseUrl(), "sobjects", sobjectType ].join('/');
      return self.request({
        method : 'POST',
        url : url,
        body : JSON.stringify(record),
        headers : _.defaults(options.headers || {}, {
          "Content-Type" : "application/json"
        })
      });
    })
  ).then(function(results) {
    return !isArray && _.isArray(results) ? results[0] : results;
  }).thenCall(callback);
};

/**
 * Update records
 *
 * @param {String} type - SObject Type
 * @param {Record|Array.<Record>} records - A record or array of records to update
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
Connection.prototype.update = function(type, records, options, callback) {
  if (!_.isString(type)) {
    // reverse order
    callback = options;
    options = records;
    records = type;
    type = null;
  }
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};
  var self = this;
  var isArray = _.isArray(records);
  records = isArray ? records : [ records ];
  if (records.length > self.maxRequest) {
    return Promise.reject(new Error("Exceeded max limit of concurrent call")).thenCall(callback);
  }
  return Promise.all(
    _.map(records, function(record) {
      var id = record.Id;
      if (!id) {
        throw new Error('Record id is not found in record.');
      }
      var sobjectType = type || (record.attributes && record.attributes.type) || record.type;
      if (!sobjectType) {
        throw new Error('No SObject Type defined in record');
      }
      record = _.clone(record);
      delete record.Id;
      delete record.type;
      delete record.attributes;

      var url = [ self._baseUrl(), "sobjects", sobjectType, id ].join('/');
      return self.request({
        method : 'PATCH',
        url : url,
        body : JSON.stringify(record),
        headers : _.defaults(options.headers || {}, {
          "Content-Type" : "application/json"
        })
      }, {
        noContentResponse: { id : id, success : true, errors : [] }
      });
    })
  ).then(function(results) {
    return !isArray && _.isArray(results) ? results[0] : results;
  }).thenCall(callback);
};

/**
 * Upsert records
 *
 * @param {String} type - SObject Type
 * @param {Record|Array.<Record>} records - Record or array of records to upsert
 * @param {String} extIdField - External ID field name
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
Connection.prototype.upsert = function(type, records, extIdField, options, callback) {
  // You can omit "type" argument, when the record includes type information.
  if (!_.isString(type)) {
    // reverse order
    callback = options;
    options = extIdField;
    extIdField = records;
    records = type;
    type = null;
  }
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};
  var self = this;
  var isArray = _.isArray(records);
  records = isArray ? records : [ records ];
  if (records.length > self.maxRequest) {
    return Promise.reject(new Error("Exceeded max limit of concurrent call")).thenCall(callback);
  }
  return Promise.all(
    _.map(records, function(record) {
      var sobjectType = type || (record.attributes && record.attributes.type) || record.type;
      var extId = record[extIdField];
      if (!extId) {
        return Promise.reject(new Error('External ID is not defined in the record'));
      }
      record = _.clone(record);
      delete record[extIdField];
      delete record.type;
      delete record.attributes;

      var url = [ self._baseUrl(), "sobjects", sobjectType, extIdField, extId ].join('/');
      return self.request({
        method : 'PATCH',
        url : url,
        body : JSON.stringify(record),
        headers : _.defaults(options.headers || {}, {
          "Content-Type" : "application/json"
        })
      }, {
        noContentResponse: { success : true, errors : [] }
      });
    })
  ).then(function(results) {
    return !isArray && _.isArray(results) ? results[0] : results;
  }).thenCall(callback);
};

/**
 * Synonym of Connection#destroy()
 *
 * @method Connection#delete
 * @param {String} type - SObject Type
 * @param {String|Array.<String>} ids - A ID or array of IDs to delete
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
/**
 * Synonym of Connection#destroy()
 *
 * @method Connection#del
 * @param {String} type - SObject Type
 * @param {String|Array.<String>} ids - A ID or array of IDs to delete
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
/**
 * Delete records
 *
 * @method Connection#destroy
 * @param {String} type - SObject Type
 * @param {String|Array.<String>} ids - A ID or array of IDs to delete
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
Connection.prototype["delete"] =
Connection.prototype.del =
Connection.prototype.destroy = function(type, ids, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }
  options = options || {};
  var self = this;
  var isArray = _.isArray(ids);
  ids = isArray ? ids : [ ids ];
  if (ids.length > self.maxRequest) {
    return Promise.reject(new Error("Exceeded max limit of concurrent call")).thenCall(callback);
  }
  return Promise.all(
    _.map(ids, function(id) {
      var url = [ self._baseUrl(), "sobjects", type, id ].join('/');
      return self.request({
        method : 'DELETE',
        url : url,
        headers: options.headers || null
      }, {
        noContentResponse: { id : id, success : true, errors : [] }
      });
    })
  ).then(function(results) {
    return !isArray && _.isArray(results) ? results[0] : results;
  }).thenCall(callback);
};

/**
 * Execute search by SOSL
 *
 * @param {String} sosl - SOSL string
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<Array.<RecordResult>>}
 */
Connection.prototype.search = function(sosl, callback) {
  var url = this._baseUrl() + "/search?q=" + encodeURIComponent(sosl);
  return this.request(url).thenCall(callback);
};

/**
 * Result returned by describeSObject call
 *
 * @typedef {Object} DescribeSObjectResult
 */
/**
 * Synonym of Connection#describe()
 *
 * @method Connection#describeSObject
 * @param {String} type - SObject Type
 * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function
 * @returns {Promise.<DescribeSObjectResult>}
 */
/**
 * Describe SObject metadata
 *
 * @method Connection#describe
 * @param {String} type - SObject Type
 * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function
 * @returns {Promise.<DescribeSObjectResult>}
 */
Connection.prototype.describe =
Connection.prototype.describeSObject = function(type, callback) {
  var url = [ this._baseUrl(), "sobjects", type, "describe" ].join('/');
  return this.request(url).thenCall(callback);
};


/**
 * Result returned by describeGlobal call
 *
 * @typedef {Object} DescribeGlobalResult
 */
/**
 * Describe global SObjects
 *
 * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function
 * @returns {Promise.<DescribeGlobalResult>}
 */
Connection.prototype.describeGlobal = function(callback) {
  var url = this._baseUrl() + "/sobjects";
  return this.request(url).thenCall(callback);
};


/**
 * Get SObject instance
 *
 * @param {String} type - SObject Type
 * @returns {SObject}
 */
Connection.prototype.sobject = function(type) {
  this.sobjects = this.sobjects || {};
  var sobject = this.sobjects[type] =
    this.sobjects[type] || new SObject(this, type);
  return sobject;
};

/**
 * Get identity information of current user
 *
 * @param {Callback.<IdentityInfo>} [callback] - Callback function
 * @returns {Promise.<IdentityInfo>}
 */
Connection.prototype.identity = function(callback) {
  var self = this;
  var idUrl = this.userInfo && this.userInfo.url;
  return Promise.resolve(
    idUrl ?
    { identity: idUrl } :
    this.request(this._baseUrl())
  ).then(function(res) {
    var url = res.identity;
    url += '?format=json&oauth_token=' + encodeURIComponent(self.accessToken);
    return self.request(url, null, { jsonp : 'callback' });
  }).then(function(res) {
    self.userInfo = {
      id: res.user_id,
      organizationId: res.organization_id,
      url: res.id
    };
    return res;
  }).thenCall(callback);
};

/**
 * @typedef UserInfo
 * @prop {String} id - User ID
 * @prop {String} organizationId - Organization ID
 * @prop {String} url - Identity URL of the user
 */

/**
 * Authorize (using oauth2 web server flow)
 *
 * @param {String} code - Authorization code
 * @param {Callback.<UserInfo>} [callback] - Callback function
 * @returns {Promise.<UserInfo>}
 */
Connection.prototype.authorize = function(code, callback) {
  var self = this;
  var logger = this._logger;

  return this.oauth2.requestToken(code).then(function(res) {
    logger.debug("OAuth2 token response = " + JSON.stringify(res));
    var userInfo = parseIdUrl(res.id);
    self.initialize({
      instanceUrl : res.instance_url,
      accessToken : res.access_token,
      refreshToken : res.refresh_token,
      userInfo: userInfo
    });
    logger.debug("<login> completed. user id = " + userInfo.id + ", org id = " + userInfo.organizationId);
    return userInfo;

  }).thenCall(callback);

};


/**
 * Login to Salesforce
 *
 * @param {String} username - Salesforce username
 * @param {String} password - Salesforce password (and security token, if required)
 * @param {Callback.<UserInfo>} [callback] - Callback function
 * @returns {Promise.<UserInfo>}
 */
Connection.prototype.login = function(username, password, callback) {
  // register refreshDelegate for session expiration
  this._refreshDelegate = new HttpApi.SessionRefreshDelegate(this, createUsernamePasswordRefreshFn(username, password));
  if (this.oauth2 && this.oauth2.clientId && this.oauth2.clientSecret) {
    return this.loginByOAuth2(username, password, callback);
  } else {
    return this.loginBySoap(username, password, callback);
  }
};

/** @private **/
function createUsernamePasswordRefreshFn(username, password) {
  return function(conn, callback) {
    conn.login(username, password, function(err) {
      if (err) { return callback(err); }
      callback(null, conn.accessToken);
    });
  };
}

/**
 * Login by OAuth2 username & password flow
 *
 * @param {String} username - Salesforce username
 * @param {String} password - Salesforce password (and security token, if required)
 * @param {Callback.<UserInfo>} [callback] - Callback function
 * @returns {Promise.<UserInfo>}
 */
Connection.prototype.loginByOAuth2 = function(username, password, callback) {
  var self = this;
  var logger = this._logger;
  return this.oauth2.authenticate(username, password).then(function(res) {
    logger.debug("OAuth2 token response = " + JSON.stringify(res));
    var userInfo = parseIdUrl(res.id);
    self.initialize({
      instanceUrl : res.instance_url,
      accessToken : res.access_token,
      userInfo: userInfo
    });
    logger.debug("<login> completed. user id = " + userInfo.id + ", org id = " + userInfo.organizationId);
    return userInfo;

  }).thenCall(callback);

};

/**
 * @private
 */
function esc(str) {
  return str && String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;')
                           .replace(/>/g, '&gt;').replace(/"/g, '&quot;');
}

/**
 * Login by SOAP web service API
 *
 * @param {String} username - Salesforce username
 * @param {String} password - Salesforce password (and security token, if required)
 * @param {Callback.<UserInfo>} [callback] - Callback function
 * @returns {Promise.<UserInfo>}
 */
Connection.prototype.loginBySoap = function(username, password, callback) {
  var self = this;
  var logger = this._logger;
  var body = [
    '<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">',
      '<se:Header/>',
      '<se:Body>',
        '<login xmlns="urn:partner.soap.sforce.com">',
          '<username>' + esc(username) + '</username>',
          '<password>' + esc(password) + '</password>',
        '</login>',
      '</se:Body>',
    '</se:Envelope>'
  ].join('');

  var soapLoginEndpoint = [ this.loginUrl, "services/Soap/u", this.version ].join('/');

  return this._transport.httpRequest({
    method : 'POST',
    url : soapLoginEndpoint,
    body : body,
    headers : {
      "Content-Type" : "text/xml",
      "SOAPAction" : '""'
    }
  }).then(function(response) {
    var m;
    if (response.statusCode >= 400) {
      m = response.body.match(/<faultstring>([^<]+)<\/faultstring>/);
      var faultstring = m && m[1];
      throw new Error(faultstring || response.body);
    }
    logger.debug("SOAP response = " + response.body);
    m = response.body.match(/<serverUrl>([^<]+)<\/serverUrl>/);
    var serverUrl = m && m[1];
    m = response.body.match(/<sessionId>([^<]+)<\/sessionId>/);
    var sessionId = m && m[1];
    m = response.body.match(/<userId>([^<]+)<\/userId>/);
    var userId = m && m[1];
    m = response.body.match(/<organizationId>([^<]+)<\/organizationId>/);
    var orgId = m && m[1];
    var idUrl = soapLoginEndpoint.split('/').slice(0, 3).join('/');
    idUrl += "/id/" + orgId + "/" + userId;
    var userInfo = {
      id: userId,
      organizationId: orgId,
      url: idUrl
    };
    self.initialize({
      serverUrl: serverUrl.split('/').slice(0, 3).join('/'),
      sessionId: sessionId,
      userInfo: userInfo
    });
    logger.debug("<login> completed. user id = " + userId + ", org id = " + orgId);
    return userInfo;

  }).thenCall(callback);

};

/**
 * Logout the current session
 *
 * @param {Callback.<undefined>} [callback] - Callback function
 * @returns {Promise.<undefined>}
 */
Connection.prototype.logout = function(callback) {
  if (this._sessionType === "oauth2") {
    return this.logoutByOAuth2(callback);
  } else {
    return this.logoutBySoap(callback);
  }
};

/**
 * Logout the current session by revoking access token via OAuth2 session revoke
 *
 * @param {Callback.<undefined>} [callback] - Callback function
 * @returns {Promise.<undefined>}
 */
Connection.prototype.logoutByOAuth2 = function(callback) {
  var self = this;
  var logger = this._logger;

  return this.oauth2.revokeToken(this.accessToken).then(function() {
    // Destroy the session bound to this connection
    self.accessToken = null;
    self.userInfo = null;
    self.refreshToken = null;
    self.instanceUrl = null;
    self.cache.clear();

    // nothing useful returned by logout API, just return
    return undefined;
  }).thenCall(callback);
};


/**
 * Logout the session by using SOAP web service API
 *
 * @param {Callback.<undefined>} [callback] - Callback function
 * @returns {Promise.<undefined>}
 */
Connection.prototype.logoutBySoap = function(callback) {
  var self = this;
  var logger = this._logger;

  var body = [
    '<se:Envelope xmlns:se="http://schemas.xmlsoap.org/soap/envelope/">',
      '<se:Header>',
        '<SessionHeader xmlns="urn:partner.soap.sforce.com">',
          '<sessionId>' + esc(this.accessToken) + '</sessionId>',
        '</SessionHeader>',
      '</se:Header>',
      '<se:Body>',
        '<logout xmlns="urn:partner.soap.sforce.com"/>',
      '</se:Body>',
    '</se:Envelope>'
  ].join('');

  return this._transport.httpRequest({
    method : 'POST',
    url : [ this.instanceUrl, "services/Soap/u", this.version ].join('/'),
    body : body,
    headers : {
      "Content-Type" : "text/xml",
      "SOAPAction" : '""'
    }
  }).then(function(response) {
    logger.debug("SOAP statusCode = " + response.statusCode + ", response = " + response.body);
    if (response.statusCode >= 400) {
      var m = response.body.match(/<faultstring>([^<]+)<\/faultstring>/);
      var faultstring = m && m[1];
      throw new Error(faultstring || response.body);
    }

    // Destroy the session bound to this connection
    self.accessToken = null;
    self.userInfo = null;
    self.refreshToken = null;
    self.instanceUrl = null;
    self.cache.clear();

    // nothing useful returned by logout API, just return
    return undefined;

  }).thenCall(callback);
};

/**
 * List recently viewed records
 *
 * @param {String} [type] - SObject type
 * @param {Number} [limit] - Limit num to fetch
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<Array.<RecordResult>>}
 */
Connection.prototype.recent = function(type, limit, callback) {
  if (!_.isString(type)) {
    callback = limit;
    limit = type;
    type = undefined;
  }
  if (!_.isNumber(limit)) {
    callback = limit;
    limit = undefined;
  }
  var url;
  if (type) {
    url = [ this._baseUrl(), "sobjects", type ].join('/');
    return this.request(url).then(function(res) {
      return limit ? res.recentItems.slice(0, limit) : res.recentItems;
    }).thenCall(callback);
  } else {
    url = this._baseUrl() + "/recent";
    if (limit) {
      url += "?limit=" + limit;
    }
    return this.request(url).thenCall(callback);
  }

};

/**
 * @typedef {Object} UpdatedRecordsInfo
 * @prop {String} latestDateCovered - The timestamp of the last date covered.
 * @prop {Array.<String>} ids - Updated record IDs.
 */

/**
 * Retrieve updated records
 *
 * @param {String} type - SObject Type
 * @param {String|Date} start - start date or string representing the start of the interval
 * @param {String|Date} end - start date or string representing the end of the interval must be > start
 * @param {Callback.<UpdatedRecordsInfo>} [callback] - Callback function
 * @returns {Promise.<UpdatedRecordsInfo>}
 */
Connection.prototype.updated = function (type, start, end, callback) {
  var url = [ this._baseUrl(), "sobjects", type, "updated" ].join('/');

  if (typeof start === 'string') {
    start = new Date(start);
  }

  if (start instanceof Date) {
    start = formatDate(start);
  }

  if (start) {
    url += "?start=" + encodeURIComponent(start);
  }

  if (typeof end === 'string') {
    end = new Date(end);
  }

  if (end instanceof Date) {
    end = formatDate(end);
  }

  if (end) {
    url += "&end=" + encodeURIComponent(end);
  }

  return this.request(url).thenCall(callback);
};

/**
 * @typedef {Object} DeletedRecordsInfo
 * @prop {String} earliestDateAvailable - The timestamp of the earliest date available
 * @prop {String} latestDateCovered - The timestamp of the last date covered
 * @prop {Array.<Object>} deletedRecords - Updated records
 * @prop {String} deletedRecords.id - Record ID
 * @prop {String} deletedRecords.deletedDate - The timestamp when this record was deleted
 */

/**
 * Retrieve deleted records
 *
 * @param {String} type - SObject Type
 * @param {String|Date} start - start date or string representing the start of the interval
 * @param {String|Date} end - start date or string representing the end of the interval
 * @param {Callback.<DeletedRecordsInfo>} [callback] - Callback function
 * @returns {Promise.<DeletedRecordsInfo>}
 */
Connection.prototype.deleted = function (type, start, end, callback) {
  var url = [ this._baseUrl(), "sobjects", type, "deleted" ].join('/');

  if (typeof start === 'string') {
    start = new Date(start);
  }

  if (start instanceof Date) {
    start = formatDate(start);
  }

  if (start) {
    url += "?start=" + encodeURIComponent(start);
  }

  if (typeof end === 'string') {
    end = new Date(end);
  }

  if (end instanceof Date) {
    end = formatDate(end);
  }

  if (end) {
    url += "&end=" + encodeURIComponent(end);
  }

  return this.request(url).thenCall(callback);
};


/**
 * @typedef {Object} TabsInfo - See the API document for detail structure
 */

/**
 * Returns a list of all tabs
 *
 * @param {Callback.<TabsInfo>} [callback] - Callback function
 * @returns {Promise.<TabsInfo>}
 */
Connection.prototype.tabs = function(callback) {
  var url = [ this._baseUrl(), "tabs" ].join('/');
  return this.request(url).thenCall(callback);
};


/**
 * @typedef {Object} LimitsInfo - See the API document for detail structure
 */

/**
 * Returns curren system limit in the organization
 *
 * @param {Callback.<LimitsInfo>} [callback] - Callback function
 * @returns {Promise.<LimitsInfo>}
 */
Connection.prototype.limits = function(callback) {
  var url = [ this._baseUrl(), "limits" ].join('/');
  return this.request(url).thenCall(callback);
};


/**
 * @typedef {Object} ThemeInfo - See the API document for detail structure
 */

/**
 * Returns a theme info
 *
 * @param {Callback.<ThemeInfo>} [callback] - Callback function
 * @returns {Promise.<ThemeInfo>}
 */
Connection.prototype.theme = function(callback) {
  var url = [ this._baseUrl(), "theme" ].join('/');
  return this.request(url).thenCall(callback);
};

/**
 * Returns all registered global quick actions
 *
 * @param {Callback.<Array.<QuickAction~QuickActionInfo>>} [callback] - Callback function
 * @returns {Promise.<Array.<QuickAction~QuickActionInfo>>}
 */
Connection.prototype.quickActions = function(callback) {
  return this.request("/quickActions").thenCall(callback);
};

/**
 * Get reference for specified global quick aciton
 *
 * @param {String} actionName - Name of the global quick action
 * @returns {QuickAction}
 */
Connection.prototype.quickAction = function(actionName) {
  return new QuickAction(this, "/quickActions/" + actionName);
};

}).call(this,require("buffer").Buffer)
},{"./cache":59,"./core":61,"./http-api":64,"./logger":65,"./oauth2":66,"./process":67,"./promise":68,"./query":69,"./quick-action":70,"./sobject":75,"./transport":77,"buffer":36,"events":40,"inherits":78,"lodash/core":79}],61:[function(require,module,exports){
/**
 * @file JSforce Core
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */
'use strict';

var EventEmitter = require('events').EventEmitter;

var jsforce = new EventEmitter();
var pkg = require('../package.json');
jsforce.VERSION = pkg.version;
jsforce.Connection = require('./connection');
jsforce.OAuth2 = require('./oauth2');
jsforce.Date = jsforce.SfDate = require("./date");
jsforce.RecordStream = require('./record-stream');
jsforce.Promise = require('./promise');
jsforce.require = require('./require');

module.exports = jsforce;

},{"../package.json":95,"./connection":60,"./date":63,"./oauth2":66,"./promise":68,"./record-stream":71,"./require":73,"events":40}],62:[function(require,module,exports){
'use strict';

var _      = require('lodash/core'),
    SfDate = require('./date');

/**
 * @private
 */
function toCSV(records, headers, options) {
  options = options || {};
  if (!headers) {
    headers = extractHeaders(records, options);
  }
  var rows = _.map(records, function(record){ return recordToCSV(record, headers, options); });
  return arrayToCSV(headers) + "\n" + rows.join("\n");
}

/**
 * @private
 */
function extractHeaders(records, options) {
  options = options || {};
  var headers = {};
  _.forEach(records, function(record) {
    for (var key in record) {
      var value = record[key];
      if (record.hasOwnProperty(key) && (value === null || typeof value !== 'object')) {
        headers[key] = true;
      }
    }
  });
  return _.keys(headers);
}

/**
 * @private
 */
function recordToCSV(record, headers, options) {
  options = options || {};
  var row = [];
  _.forEach(headers, function(header) {
    var value = record[header];
    if (value === null && typeof options.nullValue !== 'undefined') {
      value = options.nullValue;
    }
    if (typeof value === 'undefined') { value = null; }
    row.push(value);
  });
  return arrayToCSV(row);
}

/**
 * @private
 */
function arrayToCSV(arr) {
  return _.map(arr, escapeCSV).join(',');
}

/**
 * @private
 */
function escapeCSV(str) {
  if (str === null || typeof str === 'undefined') { str = ''; }
  str = String(str);
  if (str.indexOf('"') >= 0 || str.indexOf(',') >= 0 || /[\n\r]/.test(str)) {
    str = '"' + str.replace(/"/g, '""') + '"';
  }
  return str;
}



/**
 * @private
 * @class
 * @constructor
 * @param {String} text - CSV string
 */
var CSVParser = function(text) {
  this.text = text;
  this.cursor = 0;
};

CSVParser.prototype = {

  nextToken : function() {
    var cell;
    var dquoted = false;
    var firstChar = this.text.charAt(this.cursor);
    if (firstChar === '' || firstChar === '\r' || firstChar === '\n') {
      return null;
    }
    if (firstChar === '"') {
      dquoted = true;
    }
    if (dquoted) {
      var dq = this.cursor;
      while(true) {
        dq++;
        dq = this.text.indexOf('"', dq);
        if (dq<0 || this.text.charAt(dq+1) !== '"') {
          break;
        } else {
          dq++;
        }
      }
      if (dq>=0) {
        var delim = this.text.charAt(dq+1);
        cell = this.text.substring(this.cursor, dq+1);
        this.cursor = dq + (delim === ',' ? 2 : 1);
      } else {
        cell = this.text.substring(this.cursor);
        this.cursor = this.text.length;
      }
      return cell.replace(/""/g,'"').replace(/^"/,'').replace(/"$/,'');
    } else {
      var comma = this.text.indexOf(',', this.cursor);
      var cr = this.text.indexOf('\r', this.cursor);
      var lf = this.text.indexOf('\n', this.cursor);
      comma = comma<0 ? this.text.length+1 : comma;
      cr = cr<0 ? this.text.length+1 : cr;
      lf = lf<0 ? this.text.length+1 : lf;
      var pivot = Math.min(comma, cr, lf, this.text.length);
      cell = this.text.substring(this.cursor, pivot);
      this.cursor = pivot;
      if (comma === pivot) {
        this.cursor++;
      }
      return cell;
    }
  },

  nextLine : function() {
    for (var c = this.text.charAt(this.cursor);
        c === '\r' || c === '\n';
        c = this.text.charAt(++this.cursor))
      {}
    return this.cursor !== this.text.length;
  }

};

/**
 * @private
 */
function parseCSV(str) {
  var parser = new CSVParser(str);
  var headers = [];
  var token;
  if (parser.nextLine()) {
    token = parser.nextToken();
    while (!_.isUndefined(token) && !_.isNull(token)) {
      headers.push(token);
      token = parser.nextToken();
    }
  }
  var rows = [];
  while (parser.nextLine()) {
    var row = {};
    token = parser.nextToken();
    var i = 0;
    while (!_.isUndefined(token) && !_.isNull(token)) {
      var header = headers[i++];
      row[header] = token;
      token = parser.nextToken();
    }
    rows.push(row);
  }
  return rows;
}


/**
 * @protected
 */
module.exports = {
  toCSV : toCSV,
  extractHeaders : extractHeaders,
  recordToCSV : recordToCSV,
  arrayToCSV : arrayToCSV,
  parseCSV : parseCSV
};

},{"./date":63,"lodash/core":79}],63:[function(require,module,exports){
'use strict';

var _ = require('lodash/core');

/**
 * A date object to keep Salesforce date literal
 *
 * @class
 * @constructor
 * @see http://www.salesforce.com/us/developer/docs/soql_sosl/Content/sforce_api_calls_soql_select_dateformats.htm
 */
var SfDate = module.exports = function(literal) {
  this._literal = literal;
};

/**
 * Returns literal when converted to string
 *
 * @override
 */
SfDate.prototype.toString =
SfDate.prototype.toJSON = function() { return this._literal; };


/** @private **/
function zeropad(n) { return (n<10 ? "0" : "") + n; }

/**
 * Convert JavaScript date object to ISO8601 Date format (e.g. 2012-10-31)
 *
 * @param {String|Number|Date} date - Input date
 * @returns {SfDate} - Salesforce date literal with ISO8601 date format
 */
SfDate.toDateLiteral = function(date) {
  if (_.isNumber(date)) {
    date = new Date(date);
  } else if (_.isString(date)) {
    date = SfDate.parseDate(date);
  }
  var yy = date.getFullYear();
  var mm = date.getMonth()+1;
  var dd = date.getDate();
  var dstr = [ yy, zeropad(mm), zeropad(dd) ].join("-");
  return new SfDate(dstr);
};

/**
 * Convert JavaScript date object to ISO8601 DateTime format
 * (e.g. 2012-10-31T12:34:56Z)
 *
 * @param {String|Number|Date} date - Input date
 * @returns {SfDate} - Salesforce date literal with ISO8601 datetime format
 */
SfDate.toDateTimeLiteral = function(date) {
  if (_.isNumber(date)) {
    date = new Date(date);
  } else if (_.isString(date)) {
    date = SfDate.parseDate(date);
  }
  var yy = date.getUTCFullYear();
  var mm = date.getUTCMonth()+1;
  var dd = date.getUTCDate();
  var hh = date.getUTCHours();
  var mi = date.getUTCMinutes();
  var ss = date.getUTCSeconds();
  var dtstr =
    [ yy, zeropad(mm), zeropad(dd) ].join("-") + "T" +
    [ zeropad(hh), zeropad(mi), zeropad(ss) ].join(":") + "Z";
  return new SfDate(dtstr);
};

/**
 * Parse IS08601 date(time) formatted string and return date instance
 *
 * @param {String} str
 * @returns {Date}
 */
SfDate.parseDate = function(str) {
  var d = new Date();
  var regexp = /^([\d]{4})-?([\d]{2})-?([\d]{2})(T([\d]{2}):?([\d]{2}):?([\d]{2})(.([\d]{3}))?(Z|([\+\-])([\d]{2}):?([\d]{2})))?$/;
  var m = str.match(regexp);
  if (m) {
    d = new Date(0);
    if (!m[4]) {
      d.setFullYear(parseInt(m[1], 10));
      d.setDate(parseInt(m[3], 10));
      d.setMonth(parseInt(m[2], 10) - 1);
      d.setHours(0);
      d.setMinutes(0);
      d.setSeconds(0);
      d.setMilliseconds(0);
    } else {
      d.setUTCFullYear(parseInt(m[1], 10));
      d.setUTCDate(parseInt(m[3], 10));
      d.setUTCMonth(parseInt(m[2], 10) - 1);
      d.setUTCHours(parseInt(m[5], 10));
      d.setUTCMinutes(parseInt(m[6], 10));
      d.setUTCSeconds(parseInt(m[7], 10));
      d.setUTCMilliseconds(parseInt(m[9] || '0', 10));
      if (m[10] && m[10] !== 'Z') {
        var offset = parseInt(m[12],10) * 60 + parseInt(m[13], 10);
        d.setTime((m[11] === '+' ? -1 : 1) * offset * 60 * 1000 +d.getTime());
      }
    }
    return d;
  } else {
    throw new Error("Invalid date format is specified : " + str);
  }
};

/*
 * Pre-defined Salesforce Date Literals
 */
var SfDateLiterals = {
  YESTERDAY: 1,
  TODAY: 1,
  TOMORROW: 1,
  LAST_WEEK: 1,
  THIS_WEEK: 1,
  NEXT_WEEK: 1,
  LAST_MONTH: 1,
  THIS_MONTH: 1,
  NEXT_MONTH: 1,
  LAST_90_DAYS: 1,
  NEXT_90_DAYS: 1,
  LAST_N_DAYS: 2,
  NEXT_N_DAYS: 2,
  NEXT_N_WEEKS: 2,
  LAST_N_WEEKS: 2,
  NEXT_N_MONTHS: 2,
  LAST_N_MONTHS: 2,
  THIS_QUARTER: 1,
  LAST_QUARTER: 1,
  NEXT_QUARTER: 1,
  NEXT_N_QUARTERS: 2,
  LAST_N_QUARTERS: 2,
  THIS_YEAR: 1,
  LAST_YEAR: 1,
  NEXT_YEAR: 1,
  NEXT_N_YEARS: 2,
  LAST_N_YEARS: 2,
  THIS_FISCAL_QUARTER: 1,
  LAST_FISCAL_QUARTER: 1,
  NEXT_FISCAL_QUARTER: 1,
  NEXT_N_FISCAL_QUARTERS:2,
  LAST_N_FISCAL_QUARTERS:2,
  THIS_FISCAL_YEAR:1,
  LAST_FISCAL_YEAR:1,
  NEXT_FISCAL_YEAR:1,
  NEXT_N_FISCAL_YEARS: 2,
  LAST_N_FISCAL_YEARS: 2
};

for (var literal in SfDateLiterals) {
  var type = SfDateLiterals[literal];
  SfDate[literal] =
   type === 1 ? new SfDate(literal) : createLiteralBuilder(literal);
}

/** @private **/
function createLiteralBuilder(literal) {
  return function(num) { return new SfDate(literal + ":" + num); };
}

},{"lodash/core":79}],64:[function(require,module,exports){
'use strict';

var inherits = require('inherits'),
    events = require('events'),
    _ = require('lodash/core'),
    Promise = require('./promise');

/**
 * HTTP based API class with authorization hook
 *
 * @constructor
 * @extends events.EventEmitter
 * @param {Connection} conn - Connection object
 * @param {Object} [options] - Http API Options
 * @param {String} [options.responseType] - Overriding content mime-type in response
 * @param {Transport} [options.transport] - Transport for http api
 * @param {Object} [options.noContentResponse] - Alternative response when no content returned in response (= HTTP 204)
 */
var HttpApi = function(conn, options) {
  options = options || {};
  this._conn = conn;
  this.on('resume', function(err) { conn.emit('resume', err); });
  this._responseType = options.responseType;
  this._transport = options.transport || conn._transport;
  this._noContentResponse = options.noContentResponse;
};

inherits(HttpApi, events.EventEmitter);

/**
 * Callout to API endpoint using http
 *
 * @param {Object} request - Http Request object
 * @param {String} request.url - Endpoint URL to request
 * @param {String} request.method - Http method for request
 * @param {Object} [request.headers] - Http request headers in hash object
 * @param {Callback.<Object>} callback - Callback function
 * @returns {Promise.<Object>} -
 */
HttpApi.prototype.request = function(request, callback) {
  var self = this;
  var conn = this._conn;
  var logger = conn._logger;
  var refreshDelegate = this.getRefreshDelegate();
  // remember previous instance url in case it changes after a refresh
  var lastInstanceUrl = conn.instanceUrl;

  var deferred = Promise.defer();

  var onResume = function(err) {
    if (err) {
      deferred.reject(err);
      return;
    }
    // check to see if the token refresh has changed the instance url
    if(lastInstanceUrl !== conn.instanceUrl){
      // if the instance url has changed
      // then replace the current request urls instance url fragment
      // with the updated instance url
      request.url = request.url.replace(lastInstanceUrl,conn.instanceUrl);
    }

    self.request(request).then(function(response) {
      deferred.resolve(response);
    }, function(err) {
      deferred.reject(err);
    });
  };

  if (refreshDelegate && refreshDelegate._refreshing) {
    refreshDelegate.once('resume', onResume);
    return deferred.promise.thenCall(callback);
  }

  // hook before sending
  self.beforeSend(request);

  self.emit('request', request);
  logger.debug("<request> method=" + request.method + ", url=" + request.url);
  var requestTime = Date.now();

  return this._transport.httpRequest(request).then(function(response) {
    var responseTime = Date.now();
    logger.debug("elappsed time : " + (responseTime - requestTime) + "msec");
    logger.debug("<response> status=" + response.statusCode + ", url=" + request.url);

    self.emit('response', response);
    // Refresh token if session has been expired and requires authentication
    // when session refresh delegate is available
    if (self.isSessionExpired(response) && refreshDelegate) {
      refreshDelegate.refresh(requestTime, onResume);
      return deferred.promise;
    }
    if (self.isErrorResponse(response)) {
      var err = self.getError(response);
      throw err;
    }
    return self.getResponseBody(response);
  }, function(err) {
    var responseTime = Date.now();
    logger.debug("elappsed time : " + (responseTime - requestTime) + "msec");
    logger.error(err);
    throw err;
  })
  .thenCall(callback);
};

/**
 * @protected
 */
HttpApi.prototype.getRefreshDelegate = function() {
  return this._conn._refreshDelegate;
};

/**
 *
 * @protected
 */
HttpApi.prototype.beforeSend = function(request) {
  request.headers = request.headers || {};
  if (this._conn.accessToken) {
    request.headers.Authorization = "Bearer " + this._conn.accessToken;
  }
  if (this._conn.callOptions) {
    var callOptions = [];
    for (var name in this._conn.callOptions) {
      callOptions.push(name + "=" + this._conn.callOptions[name]);
    }
    request.headers["Sforce-Call-Options"] = callOptions.join(', ');
  }
};

/**
 * Detect response content mime-type
 * @protected
 */
HttpApi.prototype.getResponseContentType = function(response) {
  return this._responseType || response.headers && response.headers["content-type"];
};

/**
 *
 */
HttpApi.prototype.parseResponseBody = function(response) {
  var contentType = this.getResponseContentType(response);
  var parseBody = /^(text|application)\/xml(;|$)/.test(contentType) ? parseXML :
         /^application\/json(;|$)/.test(contentType) ? parseJSON :
         /^text\/csv(;|$)/.test(contentType) ? parseCSV :
         parseText;
  try {
    return parseBody(response.body);
  } catch(e) {
    return response.body;
  }
};

/**
 * Get response body
 * @protected
 */
HttpApi.prototype.getResponseBody = function(response) {
  if (response.statusCode === 204) { // No Content
    return this._noContentResponse;
  }
  var body = this.parseResponseBody(response);
  var err;
  if (this.hasErrorInResponseBody(body)) {
    err = this.getError(response, body);
    throw err;
  }
  if (response.statusCode === 300) { // Multiple Choices
    err = new Error('Multiple records found');
    err.name = "MULTIPLE_CHOICES";
    err.content = body;
    throw err;
  }
  return body;
};

/** @private */
function parseJSON(str) {
  return JSON.parse(str);
}

/** @private */
function parseXML(str) {
  var ret = {};
  require('xml2js').parseString(str, { explicitArray: false }, function(err, result) {
    ret = { error: err, result : result };
  });
  if (ret.error) { throw ret.error; }
  return ret.result;
}

/** @private */
function parseCSV(str) {
  return require('./csv').parseCSV(str);
}

/** @private */
function parseText(str) { return str; }


/**
 * Detect session expiry
 * @protected
 */
HttpApi.prototype.isSessionExpired = function(response) {
  return response.statusCode === 401;
};

/**
 * Detect error response
 * @protected
 */
HttpApi.prototype.isErrorResponse = function(response) {
  return response.statusCode >= 400;
};

/**
 * Detect error in response body
 * @protected
 */
HttpApi.prototype.hasErrorInResponseBody = function(body) {
  return false;
};

/**
 * Parsing error message in response
 * @protected
 */
HttpApi.prototype.parseError = function(body) {
  var errors = body;
  return _.isArray(errors) ? errors[0] : errors;
};

/**
 * Get error message in response
 * @protected
 */
HttpApi.prototype.getError = function(response, body) {
  var error;
  try {
    error = this.parseError(body || this.parseResponseBody(response));
  } catch(e) {}
  error = _.isObject(error) && _.isString(error.message) ? error : {
    errorCode: 'ERROR_HTTP_' + response.statusCode,
    message : response.body
  };
  var err = new Error(error.message);
  err.name = error.errorCode;
  for (var key in error) { err[key] = error[key]; }
  return err;
};

/*-------------------------------------------------------------------------*/

/**
 * @protected
 */
var SessionRefreshDelegate = function(conn, refreshFn) {
  this._conn = conn;
  this._refreshFn = refreshFn;
  this._refreshing = false;
};

inherits(SessionRefreshDelegate, events.EventEmitter);

/**
 * Refresh access token
 * @private
 */
SessionRefreshDelegate.prototype.refresh = function(since, callback) {
  // Callback immediately When refreshed after designated time
  if (this._lastRefreshedAt > since) { return callback(); }
  var self = this;
  var conn = this._conn;
  var logger = conn._logger;
  self.once('resume', callback);
  if (self._refreshing) { return; }
  logger.debug("<refresh token>");
  self._refreshing = true;
  return self._refreshFn(conn, function(err, accessToken, res) {
    if (!err) {
      logger.debug("Connection refresh completed. Refreshed access token = " + accessToken);
      conn.accessToken = accessToken;
      conn.emit("refresh", accessToken, res);
    }
    self._lastRefreshedAt = Date.now();
    self._refreshing = false;
    self.emit('resume', err);
  });
};


/**
 *
 */
HttpApi.SessionRefreshDelegate = SessionRefreshDelegate;
module.exports = HttpApi;

},{"./csv":62,"./promise":68,"events":40,"inherits":78,"lodash/core":79,"xml2js":94}],65:[function(require,module,exports){
'use strict';

/**
 * @protected
 * @class
 * @constructor
 * @param {String|Number} logLevel - Log level
 */
var Logger = module.exports = function(logLevel) {
  if (typeof logLevel === 'string') {
    logLevel = LogLevels[logLevel];
  }
  if (!logLevel) {
    logLevel = LogLevels.INFO;
  }
  this._logLevel = logLevel;
};

/**
 * @memberof Logger
 */
var LogLevels = Logger.LogLevels = {
  "DEBUG" : 1,
  "INFO" : 2,
  "WARN" : 3,
  "ERROR" : 4,
  "FATAL" : 5
};

/**
 * Output log
 *
 * @param {String} level - Logging target level
 * @param {String} message - Message to log
 */
Logger.prototype.log = function(level, message) {
  if (this._logLevel <= level) {
    if (level < LogLevels.ERROR) {
      console.log(message);
    } else {
      console.error(message);
    }
  }
};

for (var level in LogLevels) {
  Logger.prototype[level.toLowerCase()] = createLoggerFunction(LogLevels[level]);
}

function createLoggerFunction(level) {
  return function(message) { this.log(level, message); };
}

},{}],66:[function(require,module,exports){
/**
 * @file Manages Salesforce OAuth2 operations
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var querystring = require('querystring'),
    _ = require('lodash/core'),
    Transport = require('./transport');

var defaults = {
  loginUrl : "https://login.salesforce.com"
};

/**
 * OAuth2 class
 *
 * @class
 * @constructor
 * @param {Object} options - OAuth2 config options
 * @param {String} [options.loginUrl] - Salesforce login server URL
 * @param {String} [options.authzServiceUrl] - OAuth2 authorization service URL. If not specified, it generates from default by adding to login server URL.
 * @param {String} [options.tokenServiceUrl] - OAuth2 token service URL. If not specified it generates from default by adding to login server URL.
 * @param {String} options.clientId - OAuth2 client ID.
 * @param {String} options.clientSecret - OAuth2 client secret.
 * @param {String} options.redirectUri - URI to be callbacked from Salesforce OAuth2 authorization service.
 */
var OAuth2 = module.exports = function(options) {
  if (options.authzServiceUrl && options.tokenServiceUrl) {
    this.loginUrl = options.authzServiceUrl.split('/').slice(0, 3).join('/');
    this.authzServiceUrl = options.authzServiceUrl;
    this.tokenServiceUrl = options.tokenServiceUrl;
    this.revokeServiceUrl = options.revokeServiceUrl;
  } else {
    this.loginUrl = options.loginUrl || defaults.loginUrl;
    this.authzServiceUrl = this.loginUrl + "/services/oauth2/authorize";
    this.tokenServiceUrl = this.loginUrl + "/services/oauth2/token";
    this.revokeServiceUrl = this.loginUrl + "/services/oauth2/revoke";
  }
  this.clientId = options.clientId;
  this.clientSecret = options.clientSecret;
  this.redirectUri = options.redirectUri;
  this._transport =
    options.proxyUrl ? new Transport.ProxyTransport(options.proxyUrl) : new Transport();
};



/**
 *
 */
_.extend(OAuth2.prototype, /** @lends OAuth2.prototype **/ {

  /**
   * Get Salesforce OAuth2 authorization page URL to redirect user agent.
   *
   * @param {Object} params - Parameters
   * @param {String} params.scope - Scope values in space-separated string
   * @param {String} params.state - State parameter
   * @returns {String} Authorization page URL
   */
  getAuthorizationUrl : function(params) {
    params = _.extend({
      response_type : "code",
      client_id : this.clientId,
      redirect_uri : this.redirectUri
    }, params || {});
    return this.authzServiceUrl +
      (this.authzServiceUrl.indexOf('?') >= 0 ? "&" : "?") +
      querystring.stringify(params);
  },

  /**
   * @typedef TokenResponse
   * @type {Object}
   * @property {String} access_token
   * @property {String} refresh_token
   */

  /**
   * OAuth2 Refresh Token Flow
   *
   * @param {String} refreshToken - Refresh token
   * @param {Callback.<TokenResponse>} [callback] - Callback function
   * @returns {Promise.<TokenResponse>}
   */
  refreshToken : function(refreshToken, callback) {
    return this._postParams({
      grant_type : "refresh_token",
      refresh_token : refreshToken,
      client_id : this.clientId,
      client_secret : this.clientSecret
    }, callback);
  },

  /**
   * OAuth2 Web Server Authentication Flow (Authorization Code)
   * Access Token Request
   *
   * @param {String} code - Authorization code
   * @param {Callback.<TokenResponse>} [callback] - Callback function
   * @returns {Promise.<TokenResponse>}
   */
  requestToken : function(code, callback) {
    return this._postParams({
      grant_type : "authorization_code",
      code : code,
      client_id : this.clientId,
      client_secret : this.clientSecret,
      redirect_uri : this.redirectUri
    }, callback);
  },

  /**
   * OAuth2 Username-Password Flow (Resource Owner Password Credentials)
   *
   * @param {String} username - Salesforce username
   * @param {String} password - Salesforce password
   * @param {Callback.<TokenResponse>} [callback] - Callback function
   * @returns {Promise.<TokenResponse>}
   */
  authenticate : function(username, password, callback) {
    return this._postParams({
      grant_type : "password",
      username : username,
      password : password,
      client_id : this.clientId,
      client_secret : this.clientSecret,
      redirect_uri : this.redirectUri
    }, callback);
  },

  /**
   * OAuth2 Revoke Session Token
   *
   * @param {String} accessToken - Access token to revoke
   * @param {Callback.<undefined>} [callback] - Callback function
   * @returns {Promise.<undefined>}
   */
  revokeToken : function(accessToken, callback) {
    return this._transport.httpRequest({
      method : 'POST',
      url : this.revokeServiceUrl,
      body: querystring.stringify({ token: accessToken }),
      headers: {
        "content-type" : "application/x-www-form-urlencoded"
      }
    }).then(function(response) {
      if (response.statusCode >= 400) {
        var res = querystring.parse(response.body);
        if (!res || !res.error) {
          res = { error: "ERROR_HTTP_"+response.statusCode, error_description: response.body };
        }
        var err = new Error(res.error_description);
        err.name = res.error;
        throw err;
      }
    }).thenCall(callback);
  },

  /**
   * @private
   */
  _postParams : function(params, callback) {
    return this._transport.httpRequest({
      method : 'POST',
      url : this.tokenServiceUrl,
      body : querystring.stringify(params),
      headers : {
        "content-type" : "application/x-www-form-urlencoded"
      }
    }).then(function(response) {
      var res;
      try {
        res = JSON.parse(response.body);
      } catch(e) {}
      if (response.statusCode >= 400) {
        res = res || { error: "ERROR_HTTP_"+response.statusCode, error_description: response.body };
        var err = new Error(res.error_description);
        err.name = res.error;
        throw err;
      }
      return res;
    }).thenCall(callback);
  }

});

},{"./transport":77,"lodash/core":79,"querystring":100}],67:[function(require,module,exports){
/**
 * @file Process class to manage/run workflow rule and approval process
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var _ = require('lodash/core'),
    Promise = require('./promise'),
    Conneciton = require('./connection');

/**
 * A class which manages process rules and approval processes
 *
 * @class
 * @param {Connection} conn - Connection object
 */
var Process = module.exports = function(conn) {
  /**
   * Object which mangages process rules
   * @member {Process~ProcessRule} Process#rule
   */
  this.rule = new ProcessRule(conn);
  /**
   * Object which mangages approval process
   * @member {Process~ApprovalProcess} Process#approval
   */
  this.approval = new ApprovalProcess(conn);
};

/**
 * A class which manages process (workflow) rules
 *
 * @class Process~ProcessRule
 * @param {Connection} conn - Connection object
 */
var ProcessRule = function(conn) {
  this._conn = conn;
};

/**
 * @typedef {Object} Process~ProcessRuleDefinition
 * @prop {String} id - Id of approval process definition
 * @prop {String} name - Name of process rule definition
 * @prop {String} object - SObject name which process rule is defined
 */

/**
 * Get all process rule definitions registered to sobjects
 *
 * @method Process~ProcessRule#list
 * @param {Callback.<Map.<String, Array.<Process~ProcessRuleDefinition>>>} [callback] - Callback function
 * @returns {Promise.<Map.<String, Array.<Process~ProcessRuleDefinition>>>}
 */
ProcessRule.prototype.list = function(callback) {
  return this._conn.request("/process/rules").then(function(res) {
    return res.rules;
  }).thenCall(callback);
};


/**
 * @typedef {Object} Process~ProcessRuleTriggerResult
 * @prop {Boolean} success - Is process rule trigger succeeded or not
 * @prop {Array.<Object>} errors - Array of errors returned if the request failed
 */

/**
 * Trigger process rule for given entities
 *
 * @method Process~ProcessRule#trigger
 * @param {String|Array.<String>} contextIds - Entity ID(s) to trigger workflow process
 * @param {Callback.<Process~ProcessRuleTriggerResult>} [callback] - Callback function
 * @returns {Promise.<Process~ProcessRuleTriggerResult>}
 */
ProcessRule.prototype.trigger = function(contextIds, callback) {
  contextIds = _.isArray(contextIds) ? contextIds : [ contextIds ];
  return this._conn.request({
    method: "POST",
    url: "/process/rules/",
    body: JSON.stringify({
      contextIds: contextIds
    }),
    headers: {
      "content-type": "application/json"
    }
  }).thenCall(callback);
};

/**
 * A class which manages approval processes
 *
 * @class Process~ApprovalProcess
 * @param {Connection} conn - Connection object
 */
var ApprovalProcess = function(conn) {
  this._conn = conn;
};

/**
 * @typedef {Object} Process~ApprovalProcessDefinition
 * @prop {String} id - Id of approval process definition
 * @prop {String} name - Name of approval process definition
 * @prop {String} object - SObject name which approval process is defined
 * @prop {Number} sortOrder - Processing order of approval in SObject
 */
/**
 * Get all approval process definitions registered to sobjects
 *
 * @method Process~ApprovalProcess#list
 * @param {Callback.<Map.<String, Array.<ApprovalProcessDefinition>>>} [callback] - Callback function
 * @returns {Promise.<Map.<String, Array.<ApprovalProcessDefinition>>>}
 */
ApprovalProcess.prototype.list = function(callback) {
  return this._conn.request("/process/approvals").then(function(res) {
    return res.approvals;
  }).thenCall(callback);
};

/**
 * @typedef {Object} Process~ApprovalProcessRequestResult
 * @prop {Boolean} success - True if processing or approval completed successfully
 * @prop {Array.<Object>} errors - The set of errors returned if the request failed
 * @prop {Array.<String>} actorIds - IDs of the users who are currently assigned to this approval step
 * @prop {String} entityId - Object being processed
 * @prop {String} instanceId - ID of the ProcessInstance associated with the object submitted for processing
 * @prop {String} instanceStatus - Status of the current process instance (not an individual object but the entire process instance)
 * @prop {Array.<String>} newWorkItemIds - Case-insensitive IDs that point to ProcessInstanceWorkitem items (the set of pending approval requests)
 */

/**
 * Send bulk requests for approval process
 *
 * @method Process~ApprovalProcess#request
 * @param {Array.<ApprovalProcessRequest>} requests - Array of approval process request to send
 * @param {Callback.<Array.<ApprovalProcessRequestResult>>} - Callback function
 * @param {Promise.<Array.<ApprovalProcessRequestResult>>}
 */
ApprovalProcess.prototype.request = function(requests, callback) {
  requests = requests.map(function(req) {
    return req._request ? req._request : req;
  });
  return this._conn.request({
    method: 'POST',
    url: '/process/approvals',
    headers: { "content-type": "application/json" },
    body: JSON.stringify({ requests: requests })
  }).thenCall(callback);
};

/**
 * Create approval process request
 *
 * @private
 */
ApprovalProcess.prototype._createRequest = function(actionType, contextId, comments, options, callback) {
  if (typeof comments === "function") {
    callback = comments;
    options = null;
    comments = null;
  }
  if (typeof options === "function") {
    callback = options;
    options = null;
  }
  options = options || {};
  var request = {
    actionType: actionType,
    contextId: contextId,
    comments: comments
  };
  _.extend(request, options);
  return new ApprovalProcessRequest(this, request).thenCall(callback);
};

/**
 * Submit approval request for an item
 *
 * @method Process~ApprovalProcess#submit
 * @param {String} contextId - ID of the item that is being acted upon
 * @param {String} [comments] - Comment to add to the history step associated with this request
 * @param {Object} [options] - Request parameters
 * @param {Array.<String>} [options.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request
 * @param {String} [options.processDefinitionNameOrId] - Developer name or ID of the process definition
 * @param {Boolean} [options.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null
 * @param {Callback.<ApprovalProcessRequestResult>} [callback] - Callback function
 * @returns {ApprovalProcessRequest}
 */
ApprovalProcess.prototype.submit = function(contextId, comments, options, callback) {
  return this._createRequest("Submit", contextId, comments, options, callback);
};

/**
 * Approve approval request for an item
 *
 * @method Process~ApprovalProcess#approve
 * @param {String} workitemId - ID of the item that is being acted upon
 * @param {String} [comments] - Comment to add to the history step associated with this request
 * @param {Object} [options] - Request parameters
 * @param {Array.<String>} [options.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request
 * @param {String} [options.processDefinitionNameOrId] - Developer name or ID of the process definition
 * @param {Boolean} [options.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null
 * @param {Callback.<ApprovalProcessRequestResult>} [callback] - Callback function
 * @returns {ApprovalProcessRequest}
 */
ApprovalProcess.prototype.approve = function(workitemId, comments, options, callback) {
  return this._createRequest("Approve", workitemId, comments, options, callback);
};

/**
 * Reject approval request for an item
 *
 * @method Process~ApprovalProcess#reject
 * @param {String} workitemId - ID of the item that is being acted upon
 * @param {String} [comments] - Comment to add to the history step associated with this request
 * @param {Object} [options] - Request parameters
 * @param {Array.<String>} [options.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request
 * @param {String} [options.processDefinitionNameOrId] - Developer name or ID of the process definition
 * @param {Boolean} [options.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null
 * @param {Callback.<ApprovalProcessRequestResult>} [callback] - Callback function
 * @returns {ApprovalProcessRequest}
 */
ApprovalProcess.prototype.reject = function(workitemId, comments, options, callback) {
  return this._createRequest("Reject", workitemId, comments, options, callback);
};

/**
 * A class representing approval process request
 *
 * @protected
 * @class Process~ApprovalProcessRequest
 * @implements {Promise.<Process~ApprovalProcessRequestResult>}
 * @param {Process~ApprovalProcess} process - ApprovalProcess
 * @param {Object} request - Request parameters
 * @param {String} request.actionType - Represents the kind of action to take: Submit, Approve, or Reject
 * @param {String} request.contextId - ID of the item that is being acted upon
 * @param {String} request.comments - Comment to add to the history step associated with this request
 * @param {Array.<String>} [request.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request
 * @param {String} [request.processDefinitionNameOrId] - Developer name or ID of the process definition
 * @param {Boolean} [request.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null
 */
var ApprovalProcessRequest = function(process, request) {
  this._process = process;
  this._request = request;
};

/**
 * Promise/A+ interface
 * http://promises-aplus.github.io/promises-spec/
 *
 * @method Process~ApprovalProcessRequest#then
 */
ApprovalProcessRequest.prototype.then = function(onResolve, onReject) {
  if (!this._promise) {
    this._promise = this._process.request([ this ]).then(function(rets) {
      return rets[0];
    });
  }
  this._promise.then(onResolve, onReject);
};

/**
 * Promise/A+ extension
 * Call "then" using given node-style callback function
 *
 * @method Process~ApprovalProcessRequest#thenCall
 */
ApprovalProcessRequest.prototype.thenCall = function(callback) {
  return callback ? this.then(function(res) {
    callback(null, res);
  }, function(err) {
    callback(err);
  }) :
  this;
};

},{"./connection":60,"./promise":68,"lodash/core":79}],68:[function(require,module,exports){
(function (process){
/*global process*/

'use strict';

var _ = require('lodash/core');

/**
 * @callback ResolvedCallback
 * @param {T} result - Resolved value
 * @returns {S}
 * @template T,S
 */

/**
 * @callback RejectedCallback
 * @param {Error} reason - Rejected reason
 * @returns {S}
 * @template S
 */

/**
 * @callback ResolveCallback
 * @param {T} result
 * @template T
 */

/**
 * @callback RejectedCallback
 * @param {Error} reason - Rejected reason
 * @returns {S}
 * @template S
 */

/**
 * @callback PromiseCallback
 * @param {ResolveCallback.<T>} resolve
 * @param {RejectCallback} reject
 * @template T
 */

/**
 * Promise class with a little extension
 *
 * @class Promise
 * @constructor
 * @param {PromiseCallback.<T>}
 * @template T
 */
var Promise = require('promise/lib/es6-extensions');

/**
 * The "then" method from the Promises/A+ specification
 *
 * @method Promise#then
 * @param {FulfilledCallback.<T, S1>} [onFulfilled]
 * @param {RejectedCallback.<S2>} [onRejected]
 * @returns {Promise.<S1|S2>}
 */

/**
 * Call "then" using given node-style callback function.
 * This is basically same as "nodeify" except that it always return the original promise
 *
 * @method Promise#thenCall
 * @param {Callback.<T>} [callback] - Callback function
 * @returns {Promise}
 */
Promise.prototype.thenCall = function(callback) {
  if (_.isFunction(callback)) {
    this.then(function(res) {
      process.nextTick(function() {
        callback(null, res);
      });
    }, function(err) {
      process.nextTick(function() {
        callback(err);
      });
    });
  }
  return this;
};

/**
 * A sugar method, equivalent to promise.then(undefined, onRejected).
 *
 * @method Promise#catch
 * @param {RejectedCallback.<S>} onRejected
 * @returns {Promise.<S>}
 */

/**
 * Synonym of Promise#catch
 *
 * @method Promise#fail
 * @param {RejectedCallback.<S>} onRejected
 * @returns {Promise.<S>}
 */
Promise.prototype.fail = Promise.prototype['catch'];

/**
 * Returns resolving promise with given reason
 *
 * @method Promise.resolve
 * @param {*} result - Resolved value
 * @returns {Promise}
 */

/**
 * Returns rejecting promise with given reason
 *
 * @method Promise.reject
 * @param {Error} reason - Rejecting reason
 * @returns {Promise}
 */

/**
 * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise,
 * or is rejected with the same rejection reason as the first promise to be rejected.
 *
 * @method Promise.all
 * @param {Array.<Promise.<*>|*>} promises
 * @returns {Promise.<Array.<*>>}
 */

/**
 * Returns a deferred object
 *
 * @method Promise.defer
 * @returns {Deferred}
 */
Promise.defer = function() {
  return new Deferred();
};

/**
 * Deferred object
 *
 * @protected
 * @constructor
 */
var Deferred = function() {
  var self = this;
  this.promise = new Promise(function(resolve, reject) {
    self.resolve = resolve;
    self.reject = reject;
  });
};

/**
 * Resolve promise
 * @method Deferred#resolve
 * @param {*} result - Resolving result
 */

/**
 * Reject promise
 * @method Deferred#reject
 * @param {Error} error - Rejecting reason
 */

/**
 *
 */
module.exports = Promise;

}).call(this,require('_process'))
},{"_process":97,"lodash/core":79,"promise/lib/es6-extensions":81}],69:[function(require,module,exports){
(function (process){
/*global process*/
/**
 * @file Manages query for records in Salesforce
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var inherits = require('inherits'),
    events = require('events'),
    stream = require('readable-stream'),
    _      = require('lodash/core'),
    Promise = require('./promise'),
    SfDate = require("./date"),
    SOQLBuilder = require("./soql-builder"),
    RecordStream = require("./record-stream");

/**
 * Query
 *
 * @protected
 * @class
 * @extends {stream.Readable}
 * @implements Promise.<T>
 * @template T
 * @param {Connection} conn - Connection object
 * @param {Object|String} config - Query config object or SOQL string
 * @param {String} [locator] - Locator string to fetch next record set
 */
var Query = module.exports = function(conn, config, locator) {
  Query.super_.call(this, { objectMode: true });

  this._conn = conn;
  if (config) {
    if (_.isString(config)) { // if query config is string, it is given in SOQL.
      this._soql = config;
    } else {
      this._config = config;
      this.select(config.fields);
      if (config.includes) {
        this.include(config.includes);
      }
    }
  }
  if (locator && locator.indexOf("/") >= 0) { // if locator given in url for next records
    locator = locator.split("/").pop();
  }
  this._locator = locator;

  this._executed = false;
  this._finished = false;
  this._chaining = false;

  this._deferred = Promise.defer();

  var self = this;
};

inherits(Query, stream.Readable);

/**
 * Select fields to include in the returning result
 *
 * @param {Object|Array.<String>|String} fields - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.
 * @returns {Query.<T>}
 */
Query.prototype.select = function(fields) {
  if (this._soql) {
    throw Error("Cannot set select fields for the query which has already built SOQL.");
  }
  fields = fields || '*';
  if (_.isString(fields)) {
    fields = fields.split(/\s*,\s*/);
  } else if (_.isObject(fields) && !_.isArray(fields)) {
    var _fields =  [];
    for (var k in fields) {
      if (fields[k]) { _fields.push(k); }
    }
    fields = _fields;
  }
  this._config.fields = fields;
  return this;
};

/**
 * Set query conditions to filter the result records
 *
 * @param {Object|String} conditions - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.
 * @returns {Query.<T>}
 */
Query.prototype.where = function(conditions) {
  if (this._soql) {
    throw Error("Cannot set where conditions for the query which has already built SOQL.");
  }
  this._config.conditions = conditions;
  return this;
};

/**
 * Limit the returning result
 *
 * @param {Number} limit - Maximum number of records the query will return.
 * @returns {Query.<T>}
 */
Query.prototype.limit = function(limit) {
  if (this._soql) {
    throw Error("Cannot set limit for the query which has already built SOQL.");
  }
  this._config.limit = limit;
  return this;
};

/**
 * Synonym of Query#skip()
 *
 * @method Query#offset
 * @param {Number} offset - Offset number where begins returning results.
 * @returns {Query.<T>}
 */
/**
 * Skip records
 *
 * @method Query#offset
 * @param {Number} offset - Offset number where begins returning results.
 * @returns {Query.<T>}
 */
Query.prototype.skip =
Query.prototype.offset = function(offset) {
  if (this._soql) {
    throw Error("Cannot set skip/offset for the query which has already built SOQL.");
  }
  this._config.offset = offset;
  return this;
};

/**
 * Synonym of Query#sort()
 *
 * @memthod Query#orderby
 * @param {String|Object} sort - Sorting field or hash object with field name and sord direction
 * @param {String|Number} [dir] - Sorting direction (ASC|DESC|1|-1)
 * @returns {Query.<T>}
 */
/**
 * Set query sort with direction
 *
 * @method Query#sort
 * @param {String|Object} sort - Sorting field or hash object with field name and sord direction
 * @param {String|Number} [dir] - Sorting direction (ASC|DESC|1|-1)
 * @returns {Query.<T>}
 */
Query.prototype.sort =
Query.prototype.orderby = function(sort, dir) {
  if (this._soql) {
    throw Error("Cannot set sort for the query which has already built SOQL.");
  }
  if (_.isString(sort) && _.isString(dir)) {
    sort = [ [ sort, dir ] ];
  }
  this._config.sort = sort;
  return this;
};

/**
 * Include child relationship query
 *
 * @param {String} childRelName - Child relationship name to include in query result
 * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.
 * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.
 * @param {Object} [options] - Query options.
 * @param {Number} [options.limit] - Maximum number of records the query will return.
 * @param {Number} [options.offset] - Offset number where begins returning results.
 * @param {Number} [options.skip] - Synonym of options.offset.
 * @returns {Query~SubQuery}
 */
Query.prototype.include = function(childRelName, conditions, fields, options) {
  if (this._soql) {
    throw Error("Cannot include child relationship into the query which has already built SOQL.");
  }
  if (_.isObject(childRelName)) {
    var includes = childRelName;
    for (var crname in includes) {
      var config = includes[crname];
      this.include(crname, config.conditions, config.fields, config);
    }
    return;
  }
  var childConfig = {
    table: childRelName,
    conditions: conditions,
    fields: fields,
    limit: options && options.limit,
    offset: options && (options.offset || options.skip)
  };
  this._config.includes = this._config.includes || [];
  this._config.includes.push(childConfig);
  var childQuery = new SubQuery(this._conn, this, childConfig);
  this._children = this._children || [];
  this._children.push(childQuery);
  return childQuery;
};


/** @private **/
Query.prototype._maxFetch = 10000;
/**
 * Setting maxFetch query option
 *
 * @param {Number} maxFetch - Max fetching records in auto fetch mode
 * @returns {Query.<T>}
 */
Query.prototype.maxFetch = function(maxFetch) {
  this._maxFetch = maxFetch;
  return this;
};

/** @private **/
Query.prototype._autoFetch = false;
/**
 * Switching auto fetch mode
 *
 * @param {Boolean} autoFetch - Using auto fetch mode or not
 * @returns {Query.<T>}
 */
Query.prototype.autoFetch = function(autoFetch) {
  this._autoFetch = autoFetch;
  return this;
};

/** @private **/
Query.prototype._scanAll = false;
/**
 * Set flag to scan all records including deleted and archived.
 *
 * @param {Boolean} scanAll - Flag whether include deleted/archived record or not. Default is false.
 * @returns {Query.<T>}
 */
Query.prototype.scanAll = function(scanAll) {
  this._scanAll = scanAll;
  return this;
};

/**
 * @private
 */
var ResponseTargets = Query.ResponseTargets = {};
[ "QueryResult", "Records", "SingleRecord", "Count" ].forEach(function(f) {
  ResponseTargets[f] = f;
});

/** @private **/
Query.prototype._responseTarget = ResponseTargets.QueryResult;
/**
 * @protected
 * @param {String} responseTarget - Query response target
 * @returns {Query.<S>}
 */
Query.prototype.setResponseTarget = function(responseTarget) {
  if (responseTarget in ResponseTargets) {
    this._responseTarget = responseTarget;
  }
  return this;
};


/**
 * Synonym of Query#execute()
 *
 * @method Query#run
 * @param {Object} [options] - Query options
 * @param {Boolean} [options.autoFetch] - Using auto fetch mode or not
 * @param {Number} [options.maxFetch] - Max fetching records in auto fetch mode
 * @param {Boolean} [options.scanAll] - Including deleted records for query target or not
 * @param {Callback.<T>} [callback] - Callback function
 * @returns {Query.<T>}
 */
Query.prototype.run =
/**
 * Synonym of Query#execute()
 *
 * @method Query#exec
 * @param {Object} [options] - Query options
 * @param {Boolean} [options.autoFetch] - Using auto fetch mode or not
 * @param {Number} [options.maxFetch] - Max fetching records in auto fetch mode
 * @param {Boolean} [options.scanAll] - Including deleted records for query target or not
 * @param {Callback.<T>} [callback] - Callback function
 * @returns {Query.<T>}
 */
Query.prototype.exec =
/**
 * Execute query and fetch records from server.
 *
 * @method Query#execute
 * @param {Object} [options] - Query options
 * @param {Boolean} [options.autoFetch] - Using auto fetch mode or not
 * @param {Number} [options.maxFetch] - Max fetching records in auto fetch mode
 * @param {Boolean} [options.scanAll] - Including deleted records for query target or not
 * @param {Callback.<T>} [callback] - Callback function
 * @returns {Query.<T>}
 */
Query.prototype.execute = function(options, callback) {
  var self = this;
  var logger = this._conn._logger;
  var deferred = this._deferred;

  if (this._executed) {
    deferred.reject(new Error("re-executing already executed query"));
    return this;
  }

  if (this._finished) {
    deferred.reject(new Error("executing already closed query"));
    return this;
  }

  if (typeof options === "function") {
    callback = options;
    options = {};
  }
  options = options || {};
  options = {
    responseTarget: options.responseTarget || self._responseTarget,
    autoFetch: options.autoFetch || self._autoFetch,
    maxFetch: options.maxFetch || self._maxFetch,
    scanAll: options.scanAll || self._scanAll
  };

  // callback and promise resolution;
  var promiseCallback = function(err, res) {
    if (_.isFunction(callback)) {
      try {
        res = callback(err, res);
        err = null;
      } catch(e) {
        err = e;
      }
    }
    if (err) {
      deferred.reject(err);
    } else {
      deferred.resolve(res);
    }
  };
  this.once('response', function(res) {
    promiseCallback(null, res);
  });
  this.once('error', function(err) {
    promiseCallback(err);
  });

  // collect fetched records in array
  // only when response target is Records and
  // either callback or chaining promises are available to this query.
  this.once('fetch', function() {
    if (options.responseTarget === ResponseTargets.Records && (self._chaining || callback)) {
      logger.debug('--- collecting all fetched records ---');
      var records = [];
      var onRecord = function(record) {
        records.push(record);
      };
      self.on('record', onRecord);
      self.once('end', function() {
        self.removeListener('record', onRecord);
        self.emit('response', records, self);
      });
    }
  });

  // flag to prevent re-execution
  this._executed = true;

  // start actual query
  logger.debug('>>> Query start >>>');
  this._execute(options).then(function() {
    logger.debug('*** Query finished ***');
  }).fail(function(err) {
    logger.debug('--- Query error ---');
    self.emit('error', err);
  });

  // return Query instance for chaining
  return this;
};

/**
 * @private
 */
Query.prototype._execute = function(options) {
  var self = this;
  var logger = this._conn._logger;
  var responseTarget = options.responseTarget;
  var autoFetch = options.autoFetch;
  var maxFetch = options.maxFetch;
  var scanAll = options.scanAll;

  return Promise.resolve(
    self._locator ?
    self._conn._baseUrl() + "/query/" + self._locator :
    self.toSOQL().then(function(soql) {
      self.totalFetched = 0;
      logger.debug("SOQL = " + soql);
      return self._conn._baseUrl() + "/" + (scanAll ? "queryAll" : "query") + "?q=" + encodeURIComponent(soql);
    })
  ).then(function(url) {
    return self._conn.request(url);
  }).then(function(data) {
    self.emit("fetch");
    self.totalSize = data.totalSize;
    var res;
    switch(responseTarget) {
      case ResponseTargets.SingleRecord:
        res = data.records && data.records.length > 0 ? data.records[0] : null;
        break;
      case ResponseTargets.Records:
        res = data.records;
        break;
      case ResponseTargets.Count:
        res = data.totalSize;
        break;
      default:
        res = data;
    }
    // only fire response event when it should be notified per fetch
    if (responseTarget !== ResponseTargets.Records) {
      self.emit("response", res, self);
    }

    // streaming record instances
    for (var i=0, l=data.records.length; i<l; i++) {
      if (self.totalFetched >= maxFetch) {
        self._finished = true;
        break;
      }
      var record = data.records[i];
      self.push(record);
      self.emit('record', record, self.totalFetched++, self);
    }
    if (data.nextRecordsUrl) {
      self._locator = data.nextRecordsUrl.split('/').pop();
    }
    self._finished = self._finished || data.done || !autoFetch;
    if (self._finished) {
      self.push(null);
    } else {
      self._execute(options);
    }
    return res;
  });
};

/**
 * Readable stream implementation
 *
 * @override
 * @private
 */
Query.prototype._read = function(size) {
  if (!this._finished && !this._executed) {
    this.execute({ autoFetch: true });
  }
};

/** @override **/
Query.prototype.on = function(e, fn) {
  if (e === 'record') {
    var self = this;
    this.on('readable', function() {
      while(self.read() !== null) {} // discard buffered records
    });
  }
  return Query.super_.prototype.on.call(this, e, fn);
};

/** @override **/
Query.prototype.addListener = Query.prototype.on;


/**
 * @private
 */
Query.prototype._expandFields = function() {
  if (this._soql) {
    return Promise.reject(new Error("Cannot expand fields for the query which has already built SOQL."));
  }
  var self = this;
  var logger = self._conn._logger;
  var conn = this._conn;
  var table = this._config.table;
  var fields = this._config.fields || [];

  logger.debug('_expandFields: table = ' + table + ', fields = ' + fields.join(', '));

  return Promise.all([
    Promise.resolve(self._parent ? findRelationTable(table) : table)
      .then(function(table) {
        return Promise.all(
          _.map(fields, function(field) { return expandAsteriskField(table, field); })
        ).then(function(expandedFields) {
          self._config.fields = _.flatten(expandedFields);
        });
      }),
    Promise.all(
      _.map(self._children || [], function(childQuery) {
        return childQuery._expandFields();
      })
    )
  ]);

  function findRelationTable(rname) {
    var ptable = self._parent._config.table;
    logger.debug('finding table for relation "' + rname + '" in "' + ptable + '"...');
    return describeCache(ptable).then(function(sobject) {
      var upperRname = rname.toUpperCase();
      var childRelation = _.find(sobject.childRelationships, function(cr) {
        return (cr.relationshipName || '').toUpperCase() === upperRname;
      });
      return childRelation ? childRelation.childSObject :
        Promise.reject(new Error("No child relationship found: " + rname ));
    });
  }

  function describeCache(table) {
    logger.debug('describe cache: '+table);
    var deferred = Promise.defer();
    conn.describe$(table, function(err, sobject) {
      logger.debug('... done.');
      if (err) { deferred.reject(err); }
      else { deferred.resolve(sobject); }
    });
    return deferred.promise;
  }

  function expandAsteriskField(table, field) {
    logger.debug('expanding field "'+ field + '" in "' + table + '"...');
    var fpath = field.split('.');
    return fpath[fpath.length - 1] === '*' ?
      describeCache(table).then(function(sobject) {
        logger.debug('table '+table+'has been described');
        if (fpath.length > 1) {
          var rname = fpath.shift();
          var rfield = _.find(sobject.fields, function(f) {
            return f.relationshipName &&
                   f.relationshipName.toUpperCase() === rname.toUpperCase();
          });
          if (rfield) {
            var rtable = rfield.referenceTo.length === 1 ? rfield.referenceTo[0] : 'Name';
            return expandAsteriskField(rtable, fpath.join('.')).then(function(fpaths) {
              return _.map(fpaths, function(fpath) { return rname + '.' + fpath; });
            });
          } else {
            return [];
          }
        } else {
          return _.map(sobject.fields, function(f) { return f.name; });
        }
      }) :
      Promise.resolve([ field ]);
  }
};

/**
 * Explain plan for executing query
 *
 * @param {Callback.<ExplainInfo>} [callback] - Callback function
 * @returns {Promise.<ExplainInfo>}
 */
Query.prototype.explain = function(callback) {
  var self = this;
  var logger = this._conn._logger;
  return self.toSOQL().then(function(soql) {
    logger.debug("SOQL = " + soql);
    var url = "/query/?explain=" + encodeURIComponent(soql);
    return self._conn.request(url);
  }).thenCall(callback);
};

/**
 * Return SOQL expression for the query
 *
 * @param {Callback.<String>} [callback] - Callback function
 * @returns {Promise.<String>}
 */
Query.prototype.toSOQL = function(callback) {
  var self = this;
  return Promise.resolve(self._soql ||
    self._expandFields().then(function() { return SOQLBuilder.createSOQL(self._config); })
  ).thenCall(callback);
};

/**
 * Create data stream of queried records.
 * Automatically resume query if paused.
 *
 * @param {String} [type] - Type of outgoing data format. Currently 'csv' is default value and the only supported.
 * @param {Object} [options] - Options passed to converter
 * @returns {stream.Readable}
 */
Query.prototype.stream = RecordStream.Serializable.prototype.stream;

/**
 * Get record stream of queried records applying the given mapping function
 *
 * @param {RecordMapFunction} fn - Record mapping function
 * @returns {RecordStream.Serializable}
 */
Query.prototype.map = RecordStream.prototype.map;

/**
 * Get record stream of queried records, applying the given filter function
 *
 * @param {RecordFilterFunction} fn - Record filtering function
 * @returns {RecordStream.Serializable}
 */
Query.prototype.filter = RecordStream.prototype.map;

/**
 * Synonym of Query#destroy()
 *
 * @method Query#delete
 * @param {String} [type] - SObject type. Required for SOQL based query object.
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Bulk~Batch}
 */
/**
 * Synonym of Query#destroy()
 *
 * @method Query#del
 * @param {String} [type] - SObject type. Required for SOQL based query object.
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Bulk~Batch}
 */
/**
 * Bulk delete queried records
 *
 * @method Query#destroy
 * @param {String} [type] - SObject type. Required for SOQL based query object.
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<Array.<RecordResult>>}
 */
Query.prototype["delete"] =
Query.prototype.del =
Query.prototype.destroy = function(type, callback) {
  if (typeof type === 'function') {
    callback = type;
    type = null;
  }
  type = type || (this._config && this._config.table);
  if (!type) {
    throw new Error("SOQL based query needs SObject type information to bulk delete.");
  }
  var batch = this._conn.sobject(type).deleteBulk();
  var deferred = Promise.defer();
  var handleError = function(err) {
    if (err.name === 'ClientInputError') { deferred.resolve([]); } // if batch input receives no records
    else { deferred.reject(err); }
  };
  this.on('error', handleError)
    .pipe(batch)
    .on('response', function(res) { deferred.resolve(res); })
    .on('error', handleError);
  return deferred.promise.thenCall(callback);
};

/**
 * Bulk update queried records, using given mapping function/object
 *
 * @param {Record|RecordMapFunction} mapping - Mapping record or record mapping function
 * @param {String} [type] - SObject type. Required for SOQL based query object.
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<Array.<RecordResult>>}
 */
Query.prototype.update = function(mapping, type, callback) {
  if (typeof type === 'function') {
    callback = type;
    type = null;
  }
  type = type || (this._config && this._config.table);
  if (!type) {
    throw new Error("SOQL based query needs SObject type information to bulk update.");
  }
  var updateStream = _.isFunction(mapping) ? RecordStream.map(mapping) : RecordStream.recordMapStream(mapping);
  var batch = this._conn.sobject(type).updateBulk();
  var deferred = Promise.defer();
  var handleError = function(err) {
    if (err.name === 'ClientInputError') { deferred.resolve([]); } // if batch input receives no records
    else { deferred.reject(err); }
  };
  this.on('error', handleError)
    .pipe(updateStream)
    .on('error', handleError)
    .pipe(batch)
    .on('response', function(res) { deferred.resolve(res); })
    .on('error', handleError);
  return deferred.promise.thenCall(callback);
};

/**
 * Promise/A+ interface
 * http://promises-aplus.github.io/promises-spec/
 *
 * Delegate to deferred promise, return promise instance for query result
 *
 * @param {FulfilledCallback.<T, S1>} [onFulfilled]
 * @param {RejectedCallback.<S2>} [onRejected]
 * @returns {Promise.<S1|S2>}
 */
Query.prototype.then = function(onResolved, onReject) {
  this._chaining = true;
  if (!this._finished && !this._executed) { this.execute(); }
  return this._deferred.promise.then.apply(this._deferred.promise, arguments);
};

/**
 * Promise/A+ extension
 * Call "then" using given node-style callback function
 *
 * @param {Callback.<T>} [callback] - Callback function
 * @returns {Query}
 */
Query.prototype.thenCall = function(callback) {
  if (_.isFunction(callback)) {
    this.then(function(res) {
      process.nextTick(function() {
        callback(null, res);
      });
    }, function(err) {
      process.nextTick(function() {
        callback(err);
      });
    });
  }
  return this;
};

/*--------------------------------------------*/

/**
 * SubQuery object for representing child relationship query
 *
 * @protected
 * @class Query~SubQuery
 * @extends Query
 * @param {Connection} conn - Connection object
 * @param {Query} parent - Parent query object
 * @param {Object} config - Sub query configuration
 */
var SubQuery = function(conn, parent, config) {
  SubQuery.super_.call(this, conn, config);
  this._parent = parent;
};

inherits(SubQuery, Query);

/**
 * @method Query~SubQuery#include
 * @override
 */
SubQuery.prototype.include = function() {
  throw new Error("Not allowed to include another subquery in subquery.");
};

/**
 * Back the context to parent query object
 *
 * @method Query~SubQuery#end
 * @returns {Query}
 */
SubQuery.prototype.end = function() {
  return this._parent;
};

/**
 * If execute is called in subquery context, delegate it to parent query object
 *
 * @method Query~SubQuery#execute
 * @override
 */
SubQuery.prototype.run =
SubQuery.prototype.exec =
SubQuery.prototype.execute = function() {
  return this._parent.execute.apply(this._parent, arguments);
};

}).call(this,require('_process'))
},{"./date":63,"./promise":68,"./record-stream":71,"./soql-builder":76,"_process":97,"events":40,"inherits":78,"lodash/core":79,"readable-stream":89}],70:[function(require,module,exports){
/**
 * @file Represents Salesforce QuickAction
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';


/**
 * A class for quick action
 *
 * @protected
 * @constructor
 */
var QuickAction = module.exports = function(conn, path) {
  this._conn = conn;
  this._path = path;
};

/**
 * @typedef {Object} QuickAction~QuickActionInfo
 * @prop {String} type - Type of the action (e.g. Create, Update, Post, LogACall)
 * @prop {String} name - Name of the action
 * @prop {String} label - Label of the action
 * @prop {Object} urls - Endpoint URL information of the action
 */
/**
 * @typedef {QuickAction~QuickActionInfo} QuickAction~QuickActionDescriveInfo
 * @prop {String} contextSobjectType - Object type used for the action
 * @prop {String} targetSobjectType - Object type of the action to target
 * @prop {String} targetParentField - Field name in the target object which refers parent(context) object record ID.
 * @prop {String} targetRecordTypeId - Record type of the targeted record
 * @prop {Object} layout - Layout sections that comprise an action
 */

/**
 * Describe the action's information (including layout, etc.)
 *
 * @param {Callback.<QuickAction~QuickActionDescriveInfo>} [callback] - Callback function
 * @returns {Promise.<QuickAction~QuickActionDescriveInfo>}
 */
QuickAction.prototype.describe = function(callback) {
  var url = this._path + "/describe";
  return this._conn.request(url).thenCall(callback);
};

/**
 * Retrieve default field values in the action (for given record, if specified)
 *
 * @param {String} [contextId] - ID of record to get default values specific to the record
 * @param {Callback.<Record>} [callback] - Callback function
 * @returns {Promise.<Record>}
 */
QuickAction.prototype.defaultValues = function(contextId, callback) {
  if (typeof contextId === 'function') {
    callback = contextId;
    contextId = null;
  }
  var url = this._path + "/defaultValues";
  if (contextId) {
    url += "/" + contextId;
  }
  return this._conn.request(url).thenCall(callback);
};

/**
 * @typedef {Object} QuickAction~QuickActionResult
 * @param {String} id - Record id of the action result
 * @param {Array.<String>} feedItemIds - List of IDs for feed item
 * @param {Boolean} success - True if the action successfully completed
 * @param {Boolean} created - True if the action yields a new record
 * @param {String} contextId - Context record ID of the action
 * @param {Array.<Object>} errors - Errors if the action failed
 */

/**
 * Execute the action for given context Id and record information
 * 
 * @param {String} contextId - Context record ID of the action
 * @param {Record} record - Input record information for the action
 * @param {Callback.<QuickAction~QuickActionResult>} [callback] - Callback function
 * @returns {Promise.<QuickAction~QuickActionResult>}
 */
QuickAction.prototype.execute = function(contextId, record, callback) {
  var body = {
    contextId: contextId,
    record: record
  };
  return this._conn.requestPost(this._path, body).thenCall(callback);
};

},{}],71:[function(require,module,exports){
/**
 * @file Represents stream that handles Salesforce record as stream data
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var events = require('events'),
    stream = require('readable-stream'),
    Duplex = stream.Duplex,
    Transform = stream.Transform,
    PassThrough = stream.PassThrough,
    through2 = require('through2'),
    inherits = require('inherits'),
    _      = require('lodash/core'),
    CSV    = require('./csv');


/**
 * Class for Record Stream
 *
 * @class
 * @constructor
 * @extends stream.Transform
 */
var RecordStream = module.exports = function() {
  RecordStream.super_.call(this, { objectMode: true });
};

inherits(RecordStream, Transform);


/*
 * @override
 */
RecordStream.prototype._transform = function(record, enc, callback) {
  this.emit('record', record);
  this.push(record);
  callback();
};

/**
 * Get record stream of queried records applying the given mapping function
 *
 * @param {RecordMapFunction} fn - Record mapping function
 * @returns {RecordStream}
 */
RecordStream.prototype.map = function(fn) {
  return this.pipe(RecordStream.map(fn));
};

/**
 * Get record stream of queried records, applying the given filter function
 *
 * @param {RecordFilterFunction} fn - Record filtering function
 * @returns {RecordStream}
 */
RecordStream.prototype.filter = function(fn) {
  return this.pipe(RecordStream.filter(fn));
};


/**
 * @class RecordStream.Serializable
 * @extends {RecordStream}
 */
var Serializable = RecordStream.Serializable = function() {
  Serializable.super_.call(this);
  this._dataStream = null;
};

inherits(Serializable, RecordStream);

/**
 * Create readable data stream which emits serialized record data
 *
 * @param {String} [type] - Type of outgoing data format. Currently 'csv' is default value and the only supported.
 * @param {Object} [options] - Options passed to converter
 * @returns {stream.Readable}
*/
Serializable.prototype.stream = function(type, options) {
  type = type || 'csv';
  var converter = DataStreamConverters[type];
  if (!converter) {
    throw new Error('Converting [' + type + '] data stream is not supported.');
  }
  if (!this._dataStream) {
    this._dataStream = new PassThrough();
    this.pipe(converter.serialize(options))
      .pipe(this._dataStream);
  }
  return this._dataStream;
};


/**
 * @class RecordStream.Parsable
 * @extends {RecordStream}
 */
var Parsable = RecordStream.Parsable = function() {
  Parsable.super_.call(this);
  this._dataStream = null;
};

inherits(Parsable, RecordStream);

/**
 * Create writable data stream which accepts serialized record data
 *
 * @param {String} [type] - Type of outgoing data format. Currently 'csv' is default value and the only supported.
 * @param {Object} [options] - Options passed to converter
 * @returns {stream.Readable}
*/
Parsable.prototype.stream = function(type, options) {
  type = type || 'csv';
  var converter = DataStreamConverters[type];
  if (!converter) {
    throw new Error('Converting [' + type + '] data stream is not supported.');
  }
  if (!this._dataStream) {
    this._dataStream = new PassThrough();
    this._parserStream = converter.parse(options);
    this._parserStream.pipe(this).pipe(new PassThrough({ objectMode: true, highWaterMark: ( 500 * 1000 ) }));
  }
  return this._dataStream;
};


/* @override */
Parsable.prototype.on = function(ev, fn) {
  if (ev === 'readable' || ev === 'record') {
    this._dataStream.pipe(this._parserStream);
  }
  return Parsable.super_.prototype.on.call(this, ev, fn);
};

/* @override */
Parsable.prototype.addListener = Parsable.prototype.on;

/* --------------------------------------------------- */

/**
 * @callback RecordMapFunction
 * @param {Record} record - Source record to map
 * @returns {Record}
 */

/**
 * Create a record stream which maps records and pass them to downstream
 *
 * @param {RecordMapFunction} fn - Record mapping function
 * @returns {RecordStream.Serializable}
 */
RecordStream.map = function(fn) {
  var mapStream = new RecordStream.Serializable();
  mapStream._transform = function(record, enc, callback) {
    var rec = fn(record) || record; // if not returned record, use same record
    this.push(rec);
    callback();
  };
  return mapStream;
};

/**
 * Create mapping stream using given record template
 *
 * @param {Record} record - Mapping record object. In mapping field value, temlate notation can be used to refer field value in source record, if noeval param is not true.
 * @param {Boolean} [noeval] - Disable template evaluation in mapping record.
 * @returns {RecordStream.Serializable}
 */
RecordStream.recordMapStream = function(record, noeval) {
  return RecordStream.map(function(rec) {
    var mapped = { Id: rec.Id };
    for (var prop in record) {
      mapped[prop] = noeval ? record[prop] : evalMapping(record[prop], rec);
    }
    return mapped;
  });

  function evalMapping(value, mapping) {
    if (_.isString(value)) {
      var m = /^\$\{(\w+)\}$/.exec(value);
      if (m) { return mapping[m[1]]; }
      return value.replace(/\$\{(\w+)\}/g, function($0, prop) {
        var v = mapping[prop];
        return _.isNull(v) || _.isUndefined(v) ? "" : String(v);
      });
    } else {
      return value;
    }
  }
};

/**
 * @callback RecordFilterFunction
 * @param {Record} record - Source record to filter
 * @returns {Boolean}
 */

/**
 * Create a record stream which filters records and pass them to downstream
 *
 * @param {RecordFilterFunction} fn - Record filtering function
 * @returns {RecordStream.Serializable}
 */
RecordStream.filter = function(fn) {
  var filterStream = new RecordStream.Serializable();
  filterStream._transform = function(record, enc, callback) {
    if (fn(record)) { this.push(record); }
    callback();
  };
  return filterStream;
};

/** ---------------------------------------------------------------------- **/

/**
 * @private
 */
var CSVStreamConverter = {
  serialize: function(options) {
    options = options || {};
    var wroteHeaders = false;
    var headers = options.headers;
    return through2({ writableObjectMode: true },
      function transform(record, enc, callback) {
        if (!wroteHeaders) {
          if (!headers) {
            headers = CSV.extractHeaders([ record ]);
          }
          this.push(CSV.arrayToCSV(headers) + '\n', 'utf8');
          wroteHeaders = true;
        }
        this.push(CSV.recordToCSV(record, headers, { nullValue: options.nullValue }) + '\n', 'utf8');
        callback();
      }
    );
  },

  parse: function() {
    var buf = [];
    return through2({ readableObjectMode: true },
      function transform(data, enc, callback) {
        buf.push(data);
        callback();
      },
      function flush(callback) {
        var data = buf.map(function(d) {
          return d.toString('utf8');
        }).join('');
        var records = CSV.parseCSV(data);
        var _this = this;
        records.forEach(function(record) {
          _this.push(record);
        });
        this.push(null);
        callback();
      }
    );
  }
};

/**
 * @private
 */
var DataStreamConverters = RecordStream.DataStreamConverters = {
  csv: CSVStreamConverter
};

},{"./csv":62,"events":40,"inherits":78,"lodash/core":79,"readable-stream":89,"through2":91}],72:[function(require,module,exports){
/**
 * @file Represents Salesforce record information
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var _ = require('lodash/core');

/**
 * A simple hash object including record field information
 *
 * @typedef {Object} Record
 */

/**
 * Remote reference to record information
 *
 * @protected
 * @class
 * @constructor
 * @param {Connection} conn - Connection object
 * @param {String} type - SObject type
 * @param {String} id - Record ID
 */
var RecordReference = module.exports = function(conn, type, id) {
  this._conn = conn;
  this.type = type;
  this.id = id;
};

/**
 * Retrieve record field information
 *
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<Record>} [callback] - Callback function
 * @returns {Promise.<Record>}
 */
RecordReference.prototype.retrieve = function(options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }
  return this._conn.retrieve(this.type, this.id, options, callback);
};

/**
 * Update record field information
 *
 * @param {Record} record - A Record which includes fields to update
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<RecordResult>} [callback] - Callback function
 * @returns {Promise.<RecordResult>}
 */
RecordReference.prototype.update = function(record, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }
  record = _.clone(record);
  record.Id = this.id;
  return this._conn.update(this.type, record, options, callback);
};

/**
 * Synonym of Record#destroy()
 *
 * @method RecordReference#delete
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<RecordResult>} [callback] - Callback function
 * @returns {Promise.<RecordResult>}
 */
RecordReference.prototype["delete"] =
/**
 * Synonym of Record#destroy()
 *
 * @method RecordReference#del
 * @param {Callback.<RecordResult>} [callback] - Callback function
 * @returns {Promise.<RecordResult>}
 */
RecordReference.prototype.del =
/**
 * Delete record field
 *
 * @method RecordReference#destroy
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<RecordResult>} [callback] - Callback function
 * @returns {Promise.<RecordResult>}
 */
RecordReference.prototype.destroy = function(options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }
  return this._conn.destroy(this.type, this.id, options, callback);
};

/**
 * Get blob field as stream
 *
 * @param {String} fieldName - Blob field name
 * @returns {stream.Stream}
 */
RecordReference.prototype.blob = function(fieldName) {
  var url = [ this._conn._baseUrl(), 'sobjects', this.type, this.id, fieldName ].join('/');
  return this._conn.request(url).stream();
};

},{"lodash/core":79}],73:[function(require,module,exports){
'use strict';

// START_REQUIRE
require('inherits');
require('util');
require('events');
require('lodash/core');
require('readable-stream');
require('./cache');
require('./connection');
require('./core');
require('./csv');
require('./date');
require('./http-api');
require('./logger');
require('./oauth2');
require('./process');
require('./promise');
require('./query');
require('./quick-action');
require('./record-stream');
require('./record');
require('./soap');
require('./sobject');
require('./soql-builder');
require('./transport');
// END_REQUIRE

var requireCalled;
module.exports = function(name) {
  // prevent recursive require call
  if (requireCalled) { throw new Error("Cannot find module '" + name + "'"); }
  if (name === './jsforce' || name === 'jsforce') {
    return require('./core');
  }
  requireCalled = true;
  try {
    return require(name);
  } finally {
    requireCalled = false;
  }
};

},{"./cache":59,"./connection":60,"./core":61,"./csv":62,"./date":63,"./http-api":64,"./logger":65,"./oauth2":66,"./process":67,"./promise":68,"./query":69,"./quick-action":70,"./record":72,"./record-stream":71,"./soap":74,"./sobject":75,"./soql-builder":76,"./transport":77,"events":40,"inherits":78,"lodash/core":79,"readable-stream":89,"util":129}],74:[function(require,module,exports){
/**
 * @file Manages method call to SOAP endpoint
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var inherits = require('inherits'),
    _ = require('lodash/core'),
    xml2js = require('xml2js'),
    HttpApi = require('./http-api');


/**
 * Class for SOAP endpoint of Salesforce
 *
 * @protected
 * @class
 * @constructor
 * @param {Connection} conn - Connection instance
 * @param {Object} options - SOAP endpoint setting options
 * @param {String} options.endpointUrl - SOAP endpoint URL
 * @param {String} [options.xmlns] - XML namespace for method call (default is "urn:partner.soap.sforce.com")
 */
var SOAP = module.exports = function(conn, options) {
  SOAP.super_.apply(this, arguments);
  this._endpointUrl = options.endpointUrl;
  this._xmlns = options.xmlns || 'urn:partner.soap.sforce.com';
};

inherits(SOAP, HttpApi);

/**
 * Invoke SOAP call using method and arguments
 *
 * @param {String} method - Method name
 * @param {Object} args - Arguments for the method call
 * @param {Object} [schema] - Schema definition of response message
 * @param {Callback.<Object>} [callback] - Callback function
 * @returns {Promise.<Object>}
 */
SOAP.prototype.invoke = function(method, args, schema, callback) {
  if (typeof schema === 'function') {
    callback = schema;
    schema = null;
  }
  var message = {};
  message[method] = args;
  return this.request({
    method: 'POST',
    url: this._endpointUrl,
    headers: {
      'Content-Type': 'text/xml',
      'SOAPAction': '""'
    },
    message: message
  }).then(function(res) {
    return schema ? convertType(res, schema) : res;
  }).thenCall(callback);
};

/* @private */
function convertType(value, schema) {
  if (_.isArray(value)) {
    return value.map(function(v) {
      return convertType(v, schema && schema[0])
    });
  } else if (_.isObject(value)) {
    if (value.$ && value.$['xsi:nil'] === 'true') {
      return null;
    } else if (_.isArray(schema)) {
      return [ convertType(value, schema[0]) ];
    } else {
      var o = {};
      for (var key in value) {
        o[key] = convertType(value[key], schema && schema[key]);
      }
      return o;
    }
  } else {
    if (_.isArray(schema)) {
      return [ convertType(value, schema[0]) ];
    } else if (_.isObject(schema)) {
      return {};
    } else {
      switch(schema) {
        case 'string':
          return String(value);
        case 'number':
          return Number(value);
        case 'boolean':
          return value === 'true';
        default:
          return value;
      }
    }
  }
}

/** @override **/
SOAP.prototype.beforeSend = function(request) {
  request.body = this._createEnvelope(request.message);
};

/** @override **/
SOAP.prototype.isSessionExpired = function(response) {
  return response.statusCode === 500 &&
    /<faultcode>[a-zA-Z]+:INVALID_SESSION_ID<\/faultcode>/.test(response.body);
};

/** @override **/
SOAP.prototype.parseError = function(body) {
  var error = lookupValue(body, [ /:Envelope$/, /:Body$/, /:Fault$/ ]);
  return {
    errorCode: error.faultcode,
    message: error.faultstring
  };
};

/** @override **/
SOAP.prototype.getResponseBody = function(response) {
  var body = SOAP.super_.prototype.getResponseBody.call(this, response);
  return lookupValue(body, [ /:Envelope$/, /:Body$/, /.+/ ]);
};

/**
 * @private
 */
function lookupValue(obj, propRegExps) {
  var regexp = propRegExps.shift();
  if (!regexp) {
    return obj;
  }
  else {
    for (var prop in obj) {
      if (regexp.test(prop)) {
        return lookupValue(obj[prop], propRegExps);
      }
    }
    return null;
  }
}

/**
 * @private
 */
function toXML(name, value) {
  if (_.isObject(name)) {
    value = name;
    name = null;
  }
  if (_.isArray(value)) {
    return _.map(value, function(v) { return toXML(name, v); }).join('');
  } else {
    var attrs = [];
    var elems = [];
    if (_.isObject(value)) {
      for (var k in value) {
        var v = value[k];
        if (k[0] === '@') {
          k = k.substring(1);
          attrs.push(k + '="' + v + '"');
        } else {
          elems.push(toXML(k, v));
        }
      }
      value = elems.join('');
    } else {
      value = String(value)
        .replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/"/g, '&quot;')
        .replace(/'/g, '&apos;');
    }
    var startTag = name ? '<' + name + (attrs.length > 0 ? ' ' + attrs.join(' ') : '') + '>' : '';
    var endTag = name ? '</' + name + '>' : '';
    return  startTag + value + endTag;
  }
}

/**
 * @private
 */
SOAP.prototype._createEnvelope = function(message) {
  var header = {};
  var conn = this._conn;
  if (conn.accessToken) {
    header.SessionHeader = { sessionId: this._conn.accessToken };
  }
  if (conn.callOptions) {
    header.CallOptions = conn.callOptions;
  }
  return [
    '<?xml version="1.0" encoding="UTF-8"?>',
    '<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"',
    ' xmlns:xsd="http://www.w3.org/2001/XMLSchema"',
    ' xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">',
    '<soapenv:Header xmlns="' + this._xmlns + '">',
    toXML(header),
    '</soapenv:Header>',
    '<soapenv:Body xmlns="' + this._xmlns + '">',
    toXML(message),
    '</soapenv:Body>',
    '</soapenv:Envelope>'
  ].join('');
};

},{"./http-api":64,"inherits":78,"lodash/core":79,"xml2js":94}],75:[function(require,module,exports){
/**
 * @file Represents Salesforce SObject
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var _      = require('lodash/core'),
    Record = require('./record'),
    Query  = require('./query'),
    Cache  = require('./cache'),
    QuickAction = require('./quick-action');

/**
 * A class for organizing all SObject access
 *
 * @constructor
 */
var SObject = module.exports = function(conn, type) {
  this._conn = conn;
  this.type = type;
  var cacheOptions = { key: "describe." + this.type };
  this.describe$ = conn.cache.makeCacheable(this.describe, this, cacheOptions);
  this.describe = conn.cache.makeResponseCacheable(this.describe, this, cacheOptions);

  cacheOptions = { key: "layouts." + this.type };
  this.layouts$ = conn.cache.makeCacheable(this.layouts, this, cacheOptions);
  this.layouts = conn.cache.makeResponseCacheable(this.layouts, this, cacheOptions);

  cacheOptions = { key: "compactLayouts." + this.type };
  this.compactLayouts$ = conn.cache.makeCacheable(this.compactLayouts, this, cacheOptions);
  this.compactLayouts = conn.cache.makeResponseCacheable(this.compactLayouts, this, cacheOptions);

  cacheOptions = { key: "approvalLayouts." + this.type };
  this.approvalLayouts$ = conn.cache.makeCacheable(this.approvalLayouts, this, cacheOptions);
  this.approvalLayouts = conn.cache.makeResponseCacheable(this.approvalLayouts, this, cacheOptions);
};

/**
 * Synonym of SObject#create()
 *
 * @method SObject#insert
 * @param {Record|Array.<Record>} records - A record or array of records to create
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
/**
 * Create records
 *
 * @method SObject#create
 * @param {Record|Array.<Record>} records - A record or array of records to create
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
SObject.prototype.insert =
SObject.prototype.create = function(records, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }
  return this._conn.create(this.type, records, options, callback);
};

/**
 * Retrieve specified records
 *
 * @param {String|Array.<String>} ids - A record ID or array of record IDs
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function
 * @returns {Promise.<Record|Array.<Record>>}
 */
SObject.prototype.retrieve = function(ids, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }
  return this._conn.retrieve(this.type, ids, options, callback);
};

/**
 * Update records
 *
 * @param {Record|Array.<Record>} records - A record or array of records to update
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
SObject.prototype.update = function(records, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }
  return this._conn.update(this.type, records, options, callback);
};

/**
 * Upsert records
 *
 * @param {Record|Array.<Record>} records - Record or array of records to upsert
 * @param {String} extIdField - External ID field name
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
SObject.prototype.upsert = function(records, extIdField, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }
  return this._conn.upsert(this.type, records, extIdField, options, callback);
};

/**
 * Synonym of SObject#destroy()
 *
 * @method SObject#delete
 * @param {String|Array.<String>} ids - A ID or array of IDs to delete
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
/**
 * Synonym of SObject#destroy()
 *
 * @method SObject#del
 * @param {String|Array.<String>} ids - A ID or array of IDs to delete
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
/**
 * Delete records
 *
 * @method SObject#destroy
 * @param {String|Array.<String>} ids - A ID or array of IDs to delete
 * @param {Object} [options] - Options for rest api.
 * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<RecordResult|Array.<RecordResult>>}
 */
SObject.prototype["delete"] =
SObject.prototype.del =
SObject.prototype.destroy = function(ids, options, callback) {
  if (typeof options === 'function') {
    callback = options;
    options = {};
  }
  return this._conn.destroy(this.type, ids, options, callback);
};

/**
 * Describe SObject metadata
 *
 * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function
 * @returns {Promise.<DescribeSObjectResult>}
 */
SObject.prototype.describe = function(callback) {
  return this._conn.describe(this.type, callback);
};

/**
 * Get record representation instance by given id
 *
 * @param {String} id - A record ID
 * @returns {RecordReference}
 */
SObject.prototype.record = function(id) {
  return new Record(this._conn, this.type, id);
};

/**
 * Find and fetch records which matches given conditions
 *
 * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.
 * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.
 * @param {Object} [options] - Query options.
 * @param {Number} [options.limit] - Maximum number of records the query will return.
 * @param {Number} [options.offset] - Offset number where begins returning results.
 * @param {Number} [options.skip] - Synonym of options.offset.
 * @param {Callback.<Array.<Record>>} [callback] - Callback function
 * @returns {Query.<Array.<Record>>}
 */
SObject.prototype.find = function(conditions, fields, options, callback) {
  if (typeof conditions === 'function') {
    callback = conditions;
    conditions = {};
    fields = null;
    options = null;
  } else if (typeof fields === 'function') {
    callback = fields;
    fields = null;
    options = null;
  } else if (typeof options === 'function') {
    callback = options;
    options = null;
  }
  options = options || {};
  var config = {
    fields: fields,
    includes: options.includes,
    table: this.type,
    conditions: conditions,
    limit: options.limit,
    offset: options.offset || options.skip
  };
  var query = new Query(this._conn, config);
  query.setResponseTarget(Query.ResponseTargets.Records);
  if (callback) { query.run(callback); }
  return query;
};

/**
 * Fetch one record which matches given conditions
 *
 * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.
 * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.
 * @param {Object} [options] - Query options.
 * @param {Number} [options.limit] - Maximum number of records the query will return.
 * @param {Number} [options.offset] - Offset number where begins returning results.
 * @param {Number} [options.skip] - Synonym of options.offset.
 * @param {Callback.<Record>} [callback] - Callback function
 * @returns {Query.<Record>}
 */
SObject.prototype.findOne = function(conditions, fields, options, callback) {
  if (typeof conditions === 'function') {
    callback = conditions;
    conditions = {};
    fields = null;
    options = null;
  } else if (typeof fields === 'function') {
    callback = fields;
    fields = null;
    options = null;
  } else if (typeof options === 'function') {
    callback = options;
    options = null;
  }
  options = _.extend(options || {}, { limit: 1 });
  var query = this.find(conditions, fields, options);
  query.setResponseTarget(Query.ResponseTargets.SingleRecord);
  if (callback) { query.run(callback); }
  return query;
};

/**
 * Find and fetch records only by specifying fields to fetch.
 *
 * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.
 * @param {Callback.<Array.<Record>>} [callback] - Callback function
 * @returns {Query.<Array.<Record>>}
 */
SObject.prototype.select = function(fields, callback) {
  return this.find(null, fields, null, callback);
};

/**
 * Count num of records which matches given conditions
 *
 * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.
 * @param {Callback.<Number>} [callback] - Callback function
 * @returns {Query.<Number>}
 */
SObject.prototype.count = function(conditions, callback) {
  if (typeof conditions === 'function') {
    callback = conditions;
    conditions = {};
  }
  var query = this.find(conditions, { "count()" : true });
  query.setResponseTarget("Count");
  if (callback) { query.run(callback); }
  return query;
};


/**
 * Call Bulk#load() to execute bulkload, returning batch object
 *
 * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')
 * @param {Object} [options] - Options for bulk loading operation
 * @param {String} [options.extIdField] - External ID field name (used when upsert operation).
 * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSv string, and CSV data input stream.
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Bulk~Batch}
 */
SObject.prototype.bulkload = function(operation, options, input, callback) {
  return this._conn.bulk.load(this.type, operation, options, input, callback);
};

/**
 * Synonym of SObject#createBulk()
 *
 * @method SObject#insertBulk
 * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk insert. Accepts array of records, CSv string, and CSV data input stream.
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Bulk~Batch}
 */
/**
 * Bulkly insert input data using bulk API
 *
 * @method SObject#createBulk
 * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk insert. Accepts array of records, CSv string, and CSV data input stream.
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Bulk~Batch}
 */
SObject.prototype.insertBulk =
SObject.prototype.createBulk = function(input, callback) {
  return this.bulkload("insert", input, callback);
};

/**
 * Bulkly update records by input data using bulk API
 *
 * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk update Accepts array of records, CSv string, and CSV data input stream.
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Bulk~Batch}
 */
SObject.prototype.updateBulk = function(input, callback) {
  return this.bulkload("update", input, callback);
};

/**
 * Bulkly upsert records by input data using bulk API
 *
 * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk upsert. Accepts array of records, CSv string, and CSV data input stream.
 * @param {String} [options.extIdField] - External ID field name
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Bulk~Batch}
 */
SObject.prototype.upsertBulk = function(input, extIdField, callback) {
  return this.bulkload("upsert", { extIdField: extIdField }, input, callback);
};

/**
 * Synonym of SObject#destroyBulk()
 *
 * @method SObject#deleteBulk
 * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Bulk~Batch}
 */
/**
 * Bulkly delete records specified by input data using bulk API
 *
 * @method SObject#destroyBulk
 * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Bulk~Batch}
 */
SObject.prototype.deleteBulk =
SObject.prototype.destroyBulk = function(input, callback) {
  return this.bulkload("delete", input, callback);
};

/**
 * Synonym of SObject#destroyHardBulk()
 *
 * @method SObject#deleteHardBulk
 * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Bulk~Batch}
 */
/**
 * Bulkly hard delete records specified in input data using bulk API
 *
 * @method SObject#destroyHardBulk
 * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Bulk~Batch}
 */
SObject.prototype.deleteHardBulk =
SObject.prototype.destroyHardBulk = function(input, callback) {
  return this.bulkload("hardDelete", input, callback);
};

/**
 * Retrieve recently accessed records
 *
 * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function
 * @returns {Promise.<Array.<RecordResult>>}
 */
SObject.prototype.recent = function (callback) {
  return this._conn.recent(this.type, callback);
};

/**
 * Retrieve the updated records
 *
 * @param {String|Date} start - start date or string representing the start of the interval
 * @param {String|Date} end - start date or string representing the end of the interval, must be > start
 * @param {Callback.<UpdatedRecordsInfo>} [callback] - Callback function
 * @returns {Promise.<UpdatedRecordsInfo>}
 */
SObject.prototype.updated = function (start, end, callback) {
  return this._conn.updated(this.type, start, end, callback);
};

/**
 * Retrieve the deleted records
 *
 * @param {String|Date} start - start date or string representing the start of the interval
 * @param {String|Date} end - start date or string representing the end of the interval, must be > start
 * @param {Callback.<DeletedRecordsInfo>} [callback] - Callback function
 * @returns {Promise.<DeletedRecordsInfo>}
 */
SObject.prototype.deleted = function (start, end, callback) {
  return this._conn.deleted(this.type, start, end, callback);
};

/**
 * @typedef {Object} LayoutInfo
 * @prop {Array.<Object>} layouts - Array of layouts
 * @prop {Array.<Object>} recordTypeMappings - Array of record type mappings
 */
/**
 * Describe layout information for SObject
 *
 * @param {String} [layoutName] - Name of named layout. (e.g. UserAlt in User SObject)
 * @param {Callback.<LayoutInfo>} [callback] - Callback function
 * @returns {Promise.<LayoutInfo>}
 */
SObject.prototype.layouts = function(layoutName, callback) {
  if (typeof layoutName === 'function') {
    callback = layoutName;
    layoutName = null;
  }
  var url = "/sobjects/" + this.type + "/describe/" + (layoutName ? "namedLayouts/"+layoutName : "layouts");
  return this._conn.request(url, callback);
};

/**
 * @typedef {Object} CompactLayoutInfo
 * @prop {Array.<Object>} compactLayouts - Array of compact layouts
 * @prop {String} defaultCompactLayoutId - ID of default compact layout
 * @prop {Array.<Object>} recordTypeCompactLayoutMappings - Array of record type mappings
 */
/**
 * Describe compact layout information defined for SObject
 *
 * @param {Callback.<CompactLayoutInfo>} [callback] - Callback function
 * @returns {Promise.<CompactLayoutInfo>}
 */
SObject.prototype.compactLayouts = function(callback) {
  var url = "/sobjects/" + this.type + "/describe/compactLayouts";
  return this._conn.request(url, callback);
};


/**
 * @typedef {Object} ApprovalLayoutInfo
 * @prop {Array.<Object>} approvalLayouts - Array of approval layouts
 */
/**
 * Describe compact layout information defined for SObject
 *
 * @param {Callback.<ApprovalLayoutInfo>} [callback] - Callback function
 * @returns {Promise.<ApprovalLayoutInfo>}
 */
SObject.prototype.approvalLayouts = function(callback) {
  var url = "/sobjects/" + this.type + "/describe/approvalLayouts";
  return this._conn.request(url, callback);
};

/**
 * Returns the list of list views for the SObject
 *
 * @param {Callback.<ListViewsInfo>} [callback] - Callback function
 * @returns {Promise.<ListViewsInfo>}
 */
SObject.prototype.listviews = function(callback) {
  var url = this._conn._baseUrl() + '/sobjects/' + this.type + '/listviews';
  return this._conn.request(url, callback);
};

/**
 * Returns the list view info in specifed view id
 *
 * @param {String} id - List view ID
 * @returns {ListView}
 */
SObject.prototype.listview = function(id) {
  return new ListView(this._conn, this.type, id);
};

/**
 * Returns all registered quick actions for the SObject
 *
 * @param {Callback.<Array.<QuickAction~QuickActionInfo>>} [callback] - Callback function
 * @returns {Promise.<Array.<QuickAction~QuickActionInfo>>}
 */
SObject.prototype.quickActions = function(callback) {
  return this._conn.request("/sobjects/" + this.type + "/quickActions").thenCall(callback);
};

/**
 * Get reference for specified quick aciton in the SObject
 *
 * @param {String} actionName - Name of the quick action
 * @returns {QuickAction}
 */
SObject.prototype.quickAction = function(actionName) {
  return new QuickAction(this._conn, "/sobjects/" + this.type + "/quickActions/" + actionName);
};


/**
 * A class for organizing list view information
 *
 * @protected
 * @class ListView
 * @param {Connection} conn - Connection instance
 * @param {SObject} type - SObject type
 * @param {String} id - List view ID
 */
var ListView = function(conn, type, id) {
  this._conn = conn;
  this.type = type;
  this.id = id;
};

/**
 * Executes query for the list view and returns the resulting data and presentation information.
 *
 * @param {Callback.<ListViewResultInfo>} [callback] - Callback function
 * @returns {Promise.<ListViewResultInfo>}
 */
ListView.prototype.results = function(callback) {
  var url =  this._conn._baseUrl() + '/sobjects/' + this.type + '/listviews/' + this.id + '/results';
  return this._conn.request(url, callback);
};


/**
 * Returns detailed information about a list view
 *
 * @param {Callback.<ListViewDescribeInfo>} [callback] - Callback function
 * @returns {Promise.<ListViewDescribeInfo>}
 */
ListView.prototype.describe = function(callback) {
  var url =  this._conn._baseUrl() + '/sobjects/' + this.type + '/listviews/' + this.id + '/describe';
  return this._conn.request(url, callback);
};

/**
 * Explain plan for executing list view
 *
 * @param {Callback.<ExplainInfo>} [callback] - Callback function
 * @returns {Promise.<ExplainInfo>}
 */
ListView.prototype.explain = function(callback) {
  var url = "/query/?explain=" + this.id;
  return this._conn.request(url, callback);
};

},{"./cache":59,"./query":69,"./quick-action":70,"./record":72,"lodash/core":79}],76:[function(require,module,exports){
/**
 * @file Create and build SOQL string from configuration
 * @author Shinichi Tomita <shinichi.tomita@gmail.com>
 */

'use strict';

var _      = require('lodash/core'),
    SfDate = require("./date");


/**
 * Create SOQL
 * @private
 */
function createSOQL(query) {
  var soql = [
    "SELECT ",
    createFieldsClause(query.fields, query.includes),
    " FROM ",
    query.table
  ].join("");
  var cond = createConditionClause(query.conditions);
  if (cond) {
    soql += " WHERE " + cond;
  }
  var orderby = createOrderByClause(query.sort);
  if (orderby) {
    soql += " ORDER BY " + orderby;
  }
  if (query.limit) {
    soql += " LIMIT " + query.limit;
  }
  if (query.offset) {
    soql += " OFFSET " + query.offset;
  }
  return soql;
}

/** @private **/
function createFieldsClause(fields, childQueries) {
  childQueries = _.map(_.values(childQueries || {}), function(cquery) {
    return '(' + createSOQL(cquery) + ')';
  });
  return (fields || [ "Id" ]).concat(childQueries).join(', ');
}

/** @private **/
function createConditionClause(conditions, operator, depth) {
  if (_.isString(conditions)) {
    return conditions;
  }
  conditions = conditions || [];
  operator = operator || "AND";
  depth = depth || 0;
  if (!isArray(conditions)) { // if passed in hash object
    conditions = _.keys(conditions).map(function(key) {
      return {
        key: key,
        value: conditions[key]
      };
    });
  } else {
    conditions = conditions.map(function(cond) {
      var conds = [];
      for (var key in cond) {
        conds.push({
          key: key,
          value: cond[key]
        });
      }
      return conds.length>1 ? conds : conds[0];
    });
  }
  conditions = conditions.map(function(cond) {
    var d = depth+1, op;
    switch (cond.key) {
      case "$or" :
      case "$and" :
      case "$not" :
        if (operator !== "NOT" && conditions.length === 1) {
          d = depth; // not change tree depth
        }
        op = cond.key === "$or" ? "OR" :
             cond.key === "$and" ? "AND" :
             "NOT";
        return createConditionClause(cond.value, op, d);
      default:
        return createFieldExpression(cond.key, cond.value);
    }
  }).filter(function(expr) { return expr; });

  var paren;
  if (operator === 'NOT') {
    paren = depth > 0;
    return (paren ? "(" : "") + "NOT " + conditions[0] + (paren ? ")" : "");
  } else {
    paren = depth > 0 && conditions.length > 1;
    return (paren ? "(" : "") + conditions.join(" "+operator+" ") + (paren ? ")" : "");
  }
}

var opMap = {
  "="     : "=",
  "$eq"   : "=",
  "!="    : "!=",
  "$ne"   : "!=",
  ">"     : ">",
  "$gt"   : ">",
  "<"     : "<",
  "$lt"   : "<",
  ">="    : ">=",
  "$gte"  : ">=",
  "<="    : "<=",
  "$lte"  : "<=",
  "$like" : "LIKE",
  "$nlike" : "NOT LIKE",
  "$in"   : "IN",
  "$nin"  : "NOT IN",
  "$exists" : "EXISTS"
};

/** @private **/
function createFieldExpression(field, value) {
  var op = "$eq";

  // Assume the `$in` operator if value is an array and none was supplied.
  if (_.isArray(value)) { op = "$in"; }
  // Otherwise, if an object was passed then process the supplied ops.
  else if (_.isObject(value)) {
    var _value;
    for (var k in value) {
      if (k[0] === "$") {
        op = k;
        value = value[k];
        break;
      }
    }
  }
  var sfop = opMap[op];
  if (!sfop || _.isUndefined(value)) { return null; }
  var valueExpr = createValueExpression(value);
  if (_.isUndefined(valueExpr)) { return null; }
  switch (sfop) {
    case "NOT LIKE":
      return "(" + [ "NOT", field, 'LIKE', valueExpr ].join(" ") + ")";
    case "EXISTS":
      return [ field, value ? "!=" : "=", "null" ].join(" ");
    default:
      return [ field, sfop, valueExpr ].join(" ");
  }
}

/** @private **/
function createValueExpression(value) {
  if (isArray(value)) {
    return value.length > 0 ?
           "(" + value.map(createValueExpression).join(", ") + ")" :
           undefined;
  }
  if (value instanceof SfDate) {
    return value.toString();
  }
  if (_.isString(value)) {
    return "'" + escapeSOQLString(value) + "'";
  }
  if (_.isNumber(value)) {
    return (value).toString();
  }
  if (_.isNull(value)) {
    return "null";
  }
  return value;
}

/** @private **/
function escapeSOQLString(str) {
  return String(str || '').replace(/'/g, "\\'");
}

/** @private **/
function isArray(a) {
  return _.isObject(a) && _.isFunction(a.pop);
}


/** @private **/
function createOrderByClause(sort) {
  sort = sort || [];
  if (_.isString(sort)) {
    if (/,|\s+(asc|desc)\s*$/.test(sort)) {
      // must be specified in pure "order by" clause. Return raw config.
      return sort;
    }
    // sort order in mongoose-style expression.
    // e.g. "FieldA -FieldB" => "ORDER BY FieldA ASC, FieldB DESC"
    sort = sort.split(/\s+/).map(function(field) {
      var dir = "ASC"; // ascending
      var flag = field[0];
      if (flag === '-') {
        dir = "DESC";
        field = field.substring(1);
      } else if (flag === '+') {
        field = field.substring(1);
      }
      return [ field, dir ];
    });
  } else if (!isArray(sort)) {
    sort = _.keys(sort).map(function(field) {
      var dir = sort[field];
      return [ field, dir ];
    });
  }
  return sort.map(function(s) {
    var field = s[0], dir = s[1];
    switch (String(dir)) {
      case "DESC":
      case "desc":
      case "descending":
      case "-":
      case "-1":
        dir = "DESC";
        break;
      default:
        dir = "ASC";
    }
    return field + " " + dir;
  }).join(", ");
}


exports.createSOQL = createSOQL;

},{"./date":63,"lodash/core":79}],77:[function(require,module,exports){
(function (process){
/*global process, Sfdc */

'use strict';

var inherits = require('inherits'),
    Promise = require('./promise');

/* */

var request = require('request'),
    canvas = require('./browser/canvas'),
    jsonp = require('./browser/jsonp');

// set options if defaults setting is available in request, which is not available in xhr module.
if (request.defaults) {
  var defaults = {
    followAllRedirects: true
  };
  if (process.env.HTTP_PROXY) {
    defaults.proxy = process.env.HTTP_PROXY;
  }
  if (parseInt(process.env.HTTP_TIMEOUT)) {
    defaults.timeout = parseInt(process.env.HTTP_TIMEOUT);
  }
  request = request.defaults(defaults);
}

var baseUrl;
if (typeof window === 'undefined') {
  baseUrl = process.env.LOCATION_BASE_URL || "";
} else {
  var apiHost = normalizeApiHost(window.location.host);
  baseUrl = apiHost ? "https://" + apiHost : "";
}

/**
 * Add stream() method to promise (and following promise chain), to access original request stream.
 * @private
 */
function streamify(promise, factory) {
  var _then = promise.then;
  promise.then = function() {
    factory();
    var newPromise = _then.apply(promise, arguments);
    return streamify(newPromise, factory);
  };
  promise.stream = factory;
  return promise;
}

/**
 * Normarize Salesforce API host name
 * @private
 */
function normalizeApiHost(apiHost) {
  var m = /(\w+)\.(visual\.force|salesforce)\.com$/.exec(apiHost);
  if (m) {
    apiHost = m[1] + ".salesforce.com";
  }
  return apiHost;
}

/**
 * Class for HTTP request transport
 *
 * @class
 * @protected
 */
var Transport = module.exports = function() {};

/**
 * Make HTTP request, returns promise instead of stream
 *
 * @param {Object} params - HTTP request
 * @param {Callback.<Object>} [callback] - Calback Function
 * @param {Callback.<Object>} [options] - Options
 * @returns {Promise.<Object>}
 */
Transport.prototype.httpRequest = function(params, callback, options) {
  var deferred = Promise.defer();
  var req;
  var httpRequest = request;
  if (options && options.jsonp && jsonp.supported) {
    httpRequest = jsonp.createRequest(options.jsonp);
  } else if (options && options.signedRequest && canvas.supported) {
    httpRequest = canvas.createRequest(options.signedRequest);
  }
  var createRequest = function() {
    if (!req) {
      req = httpRequest(params, function(err, response) {
        if (err) {
          deferred.reject(err);
        } else {
          deferred.resolve(response);
        }
      });
    }
    return req;
  };
  return streamify(deferred.promise, createRequest).thenCall(callback);
};

/**
 * Class for HTTP request transport using AJAX proxy service
 *
 * @class Transport~ProxyTransport
 * @protected
 * @extends Transport
 * @param {String} proxyUrl - AJAX Proxy server URL
 */
var ProxyTransport = Transport.ProxyTransport = function(proxyUrl) {
  this._proxyUrl = proxyUrl;
};

inherits(ProxyTransport, Transport);

/**
 * Make HTTP request via AJAX proxy
 *
 * @method Transport~ProxyTransport#httpRequest
 * @param {Object} params - HTTP request
 * @param {Callback.<Object>} [callback] - Calback Function
 * @returns {Promise.<Object>}
 */
ProxyTransport.prototype.httpRequest = function(params, callback) {
  var url = params.url;
  if (url.indexOf("/") === 0) {
    url = baseUrl + url;
  }
  var proxyParams = {
    method: params.method,
    url: this._proxyUrl + '?' + Date.now() + "." + ("" + Math.random()).substring(2),
    headers: {
      'salesforceproxy-endpoint': url
    }
  };
  if (params.body || params.body === "") {
    proxyParams.body = params.body;
  }
  if (params.headers) {
    for (var name in params.headers) {
      proxyParams.headers[name] = params.headers[name];
    }
  }
  return ProxyTransport.super_.prototype.httpRequest.call(this, proxyParams, callback);
};

}).call(this,require('_process'))
},{"./browser/canvas":54,"./browser/jsonp":57,"./promise":68,"_process":97,"inherits":78,"request":58}],78:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],79:[function(require,module,exports){
(function (global){
/**
 * @license
 * lodash 4.6.1 (Custom Build) <https://lodash.com/>
 * Build: `lodash core -o ./dist/lodash.core.js`
 * Copyright 2012-2016 The Dojo Foundation <http://dojofoundation.org/>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright 2009-2016 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 * Available under MIT license <https://lodash.com/license>
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.6.1';

  /** Used as the `TypeError` message for "Functions" methods. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to compose bitmasks for wrapper metadata. */
  var BIND_FLAG = 1,
      PARTIAL_FLAG = 32;

  /** Used to compose bitmasks for comparison styles. */
  var UNORDERED_COMPARE_FLAG = 1,
      PARTIAL_COMPARE_FLAG = 2;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991;

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      stringTag = '[object String]';

  /** Used to match HTML entities and HTML characters. */
  var reUnescapedHtml = /[&<>"'`]/g,
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '`': '&#96;'
  };

  /** Used to determine if values are of the language type `Object`. */
  var objectTypes = {
    'function': true,
    'object': true
  };

  /** Detect free variable `exports`. */
  var freeExports = (objectTypes[typeof exports] && exports && !exports.nodeType)
    ? exports
    : undefined;

  /** Detect free variable `module`. */
  var freeModule = (objectTypes[typeof module] && module && !module.nodeType)
    ? module
    : undefined;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = (freeModule && freeModule.exports === freeExports)
    ? freeExports
    : undefined;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = checkGlobal(freeExports && freeModule && typeof global == 'object' && global);

  /** Detect free variable `self`. */
  var freeSelf = checkGlobal(objectTypes[typeof self] && self);

  /** Detect free variable `window`. */
  var freeWindow = checkGlobal(objectTypes[typeof window] && window);

  /** Detect `this` as the global object. */
  var thisGlobal = checkGlobal(objectTypes[typeof this] && this);

  /**
   * Used as a reference to the global object.
   *
   * The `this` value is used if it's the global object to avoid Greasemonkey's
   * restricted `window` object, otherwise the `window` object is used.
   */
  var root = freeGlobal ||
    ((freeWindow !== (thisGlobal && thisGlobal.window)) && freeWindow) ||
      freeSelf || thisGlobal || Function('return this')();

  /*--------------------------------------------------------------------------*/

  /**
   * Creates a new array concatenating `array` with `other`.
   *
   * @private
   * @param {Array} array The first array to concatenate.
   * @param {Array} other The second array to concatenate.
   * @returns {Array} Returns the new concatenated array.
   */
  function arrayConcat(array, other) {
    return arrayPush(copyArray(array), values);
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * The base implementation of methods like `_.max` and `_.min` which accepts a
   * `comparator` to determine the extremum value.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The iteratee invoked per iteration.
   * @param {Function} comparator The comparator used to compare values.
   * @returns {*} Returns the extremum value.
   */
  function baseExtremum(array, iteratee, comparator) {
    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index],
          current = iteratee(value);

      if (current != null && (computed === undefined
            ? current === current
            : comparator(current, computed)
          )) {
        var computed = current,
            result = value;
      }
    }
    return result;
  }

  /**
   * The base implementation of methods like `_.find` and `_.findKey`, without
   * support for iteratee shorthands, which iterates over `collection` using
   * `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to search.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @param {boolean} [retKey] Specify returning the key of the found element instead of the element itself.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFind(collection, predicate, eachFunc, retKey) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = retKey ? key : value;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return baseMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if `value` is a global object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {null|Object} Returns `value` if it's a global object, else `null`.
   */
  function checkGlobal(value) {
    return (value && value.Object === Object) ? value : null;
  }

  /**
   * Compares values to sort them in ascending order.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function compareAscending(value, other) {
    if (value !== other) {
      var valIsNull = value === null,
          valIsUndef = value === undefined,
          valIsReflexive = value === value;

      var othIsNull = other === null,
          othIsUndef = other === undefined,
          othIsReflexive = other === other;

      if ((value > other && !othIsNull) || !valIsReflexive ||
          (valIsNull && !othIsUndef && othIsReflexive) ||
          (valIsUndef && othIsReflexive)) {
        return 1;
      }
      if ((value < other && !valIsNull) || !othIsReflexive ||
          (othIsNull && !valIsUndef && valIsReflexive) ||
          (othIsUndef && valIsReflexive)) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeHtmlChar(chr) {
    return htmlEscapes[chr];
  }

  /**
   * Checks if `value` is a host object in IE < 9.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a host object, else `false`.
   */
  function isHostObject(value) {
    // Many host objects are `Object` objects that can coerce to strings
    // despite having improperly defined `toString` methods.
    var result = false;
    if (value != null && typeof value.toString != 'function') {
      try {
        result = !!(value + '');
      } catch (e) {}
    }
    return result;
  }

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
    length = length == null ? MAX_SAFE_INTEGER : length;
    return value > -1 && value % 1 == 0 && value < length;
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /*--------------------------------------------------------------------------*/

  /** Used for built-in method references. */
  var arrayProto = Array.prototype,
      objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /** Used to generate unique IDs. */
  var idCounter = 0;

  /**
   * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
   * of values.
   */
  var objectToString = objectProto.toString;

  /** Used to restore the original `_` reference in `_.noConflict`. */
  var oldDash = root._;

  /** Built-in value references. */
  var Reflect = root.Reflect,
      Symbol = root.Symbol,
      Uint8Array = root.Uint8Array,
      enumerate = Reflect ? Reflect.enumerate : undefined,
      objectCreate = Object.create,
      propertyIsEnumerable = objectProto.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsFinite = root.isFinite,
      nativeKeys = Object.keys,
      nativeMax = Math.max;

  /*------------------------------------------------------------------------*/

  /**
   * Creates a `lodash` object which wraps `value` to enable implicit method
   * chaining. Methods that operate on and return arrays, collections, and
   * functions can be chained together. Methods that retrieve a single value or
   * may return a primitive value will automatically end the chain sequence and
   * return the unwrapped value. Otherwise, the value must be unwrapped with
   * `_#value`.
   *
   * Explicit chaining, which must be unwrapped with `_#value` in all cases,
   * may be enabled using `_.chain`.
   *
   * The execution of chained methods is lazy, that is, it's deferred until
   * `_#value` is implicitly or explicitly called.
   *
   * Lazy evaluation allows several methods to support shortcut fusion. Shortcut
   * fusion is an optimization to merge iteratee calls; this avoids the creation
   * of intermediate arrays and can greatly reduce the number of iteratee executions.
   * Sections of a chain sequence qualify for shortcut fusion if the section is
   * applied to an array of at least two hundred elements and any iteratees
   * accept only one argument. The heuristic for whether a section qualifies
   * for shortcut fusion is subject to change.
   *
   * Chaining is supported in custom builds as long as the `_#value` method is
   * directly or indirectly included in the build.
   *
   * In addition to lodash methods, wrappers have `Array` and `String` methods.
   *
   * The wrapper `Array` methods are:
   * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
   *
   * The wrapper `String` methods are:
   * `replace` and `split`
   *
   * The wrapper methods that support shortcut fusion are:
   * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
   * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
   * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
   *
   * The chainable wrapper methods are:
   * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
   * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
   * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
   * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
   * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
   * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
   * `flatten`, `flattenDeep`, `flattenDepth`, `flip`, `flow`, `flowRight`,
   * `fromPairs`, `functions`, `functionsIn`, `groupBy`, `initial`, `intersection`,
   * `intersectionBy`, `intersectionWith`, `invert`, `invertBy`, `invokeMap`,
   * `iteratee`, `keyBy`, `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`,
   * `matches`, `matchesProperty`, `memoize`, `merge`, `mergeWith`, `method`,
   * `methodOf`, `mixin`, `negate`, `nthArg`, `omit`, `omitBy`, `once`, `orderBy`,
   * `over`, `overArgs`, `overEvery`, `overSome`, `partial`, `partialRight`,
   * `partition`, `pick`, `pickBy`, `plant`, `property`, `propertyOf`, `pull`,
   * `pullAll`, `pullAllBy`, `pullAllWith`, `pullAt`, `push`, `range`,
   * `rangeRight`, `rearg`, `reject`, `remove`, `rest`, `reverse`, `sampleSize`,
   * `set`, `setWith`, `shuffle`, `slice`, `sort`, `sortBy`, `splice`, `spread`,
   * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, `tap`, `throttle`,
   * `thru`, `toArray`, `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`,
   * `transform`, `unary`, `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`,
   * `uniqWith`, `unset`, `unshift`, `unzip`, `unzipWith`, `update`, `values`,
   * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`, `zipObject`,
   * `zipObjectDeep`, and `zipWith`
   *
   * The wrapper methods that are **not** chainable by default are:
   * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
   * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `deburr`, `each`, `eachRight`,
   * `endsWith`, `eq`, `escape`, `escapeRegExp`, `every`, `find`, `findIndex`,
   * `findKey`, `findLast`, `findLastIndex`, `findLastKey`, `first`, `floor`,
   * `forEach`, `forEachRight`, `forIn`, `forInRight`, `forOwn`, `forOwnRight`,
   * `get`, `gt`, `gte`, `has`, `hasIn`, `head`, `identity`, `includes`,
   * `indexOf`, `inRange`, `invoke`, `isArguments`, `isArray`, `isArrayBuffer`,
   * `isArrayLike`, `isArrayLikeObject`, `isBoolean`, `isBuffer`, `isDate`,
   * `isElement`, `isEmpty`, `isEqual`, `isEqualWith`, `isError`, `isFinite`,
   * `isFunction`, `isInteger`, `isLength`, `isMap`, `isMatch`, `isMatchWith`,
   * `isNaN`, `isNative`, `isNil`, `isNull`, `isNumber`, `isObject`, `isObjectLike`,
   * `isPlainObject`, `isRegExp`, `isSafeInteger`, `isSet`, `isString`,
   * `isUndefined`, `isTypedArray`, `isWeakMap`, `isWeakSet`, `join`, `kebabCase`,
   * `last`, `lastIndexOf`, `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`,
   * `maxBy`, `mean`, `min`, `minBy`, `noConflict`, `noop`, `now`, `pad`,
   * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
   * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
   * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
   * `sortedLastIndexBy`, `startCase`, `startsWith`, `subtract`, `sum`, `sumBy`,
   * `template`, `times`, `toInteger`, `toJSON`, `toLength`, `toLower`,
   * `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`, `trimEnd`,
   * `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`, `upperFirst`,
   * `value`, and `words`
   *
   * @name _
   * @constructor
   * @category Seq
   * @param {*} value The value to wrap in a `lodash` instance.
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * var wrapped = _([1, 2, 3]);
   *
   * // Returns an unwrapped value.
   * wrapped.reduce(_.add);
   * // => 6
   *
   * // Returns a wrapped value.
   * var squares = wrapped.map(square);
   *
   * _.isArray(squares);
   * // => false
   *
   * _.isArray(squares.value());
   * // => true
   */
  function lodash(value) {
    if (isObjectLike(value) && !isArray(value)) {
      if (value instanceof LodashWrapper) {
        return value;
      }
      if (hasOwnProperty.call(value, '__wrapped__')) {
        return wrapperClone(value);
      }
    }
    return new LodashWrapper(value);
  }

  /**
   * The base constructor for creating `lodash` wrapper objects.
   *
   * @private
   * @param {*} value The value to wrap.
   * @param {boolean} [chainAll] Enable chaining for all wrapper methods.
   */
  function LodashWrapper(value, chainAll) {
    this.__wrapped__ = value;
    this.__actions__ = [];
    this.__chain__ = !!chainAll;
  }

  /*------------------------------------------------------------------------*/

  /**
   * Used by `_.defaults` to customize its `_.assignIn` use.
   *
   * @private
   * @param {*} objValue The destination value.
   * @param {*} srcValue The source value.
   * @param {string} key The key of the property to assign.
   * @param {Object} object The parent object of `objValue`.
   * @returns {*} Returns the value to assign.
   */
  function assignInDefaults(objValue, srcValue, key, object) {
    if (objValue === undefined ||
        (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
      return srcValue;
    }
    return objValue;
  }

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
        (value === undefined && !(key in object))) {
      object[key] = value;
    }
  }

  /**
   * Casts `value` to `identity` if it's not a function.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Array} Returns the array-like object.
   */
  function baseCastFunction(value) {
    return typeof value == 'function' ? value : identity;
  }

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} prototype The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  function baseCreate(proto) {
    return isObject(proto) ? objectCreate(proto) : {};
  }

  /**
   * The base implementation of `_.delay` and `_.defer` which accepts an array
   * of `func` arguments.
   *
   * @private
   * @param {Function} func The function to delay.
   * @param {number} wait The number of milliseconds to delay invocation.
   * @param {Object} args The arguments to provide to `func`.
   * @returns {number} Returns the timer id.
   */
  function baseDelay(func, wait, args) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    return setTimeout(function() { func.apply(undefined, args); }, wait);
  }

  /**
   * The base implementation of `_.forEach` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   */
  var baseEach = createBaseEach(baseForOwn);

  /**
   * The base implementation of `_.every` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`
   */
  function baseEvery(collection, predicate) {
    var result = true;
    baseEach(collection, function(value, index, collection) {
      result = !!predicate(value, index, collection);
      return result;
    });
    return result;
  }

  /**
   * The base implementation of `_.filter` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function baseFilter(collection, predicate) {
    var result = [];
    baseEach(collection, function(value, index, collection) {
      if (predicate(value, index, collection)) {
        result.push(value);
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.flatten` with support for restricting flattening.
   *
   * @private
   * @param {Array} array The array to flatten.
   * @param {number} depth The maximum recursion depth.
   * @param {boolean} [isStrict] Restrict flattening to arrays-like objects.
   * @param {Array} [result=[]] The initial result value.
   * @returns {Array} Returns the new flattened array.
   */
  function baseFlatten(array, depth, isStrict, result) {
    result || (result = []);

    var index = -1,
        length = array.length;

    while (++index < length) {
      var value = array[index];
      if (depth > 0 && isArrayLikeObject(value) &&
          (isStrict || isArray(value) || isArguments(value))) {
        if (depth > 1) {
          // Recursively flatten arrays (susceptible to call stack limits).
          baseFlatten(value, depth - 1, isStrict, result);
        } else {
          arrayPush(result, value);
        }
      } else if (!isStrict) {
        result[result.length] = value;
      }
    }
    return result;
  }

  /**
   * The base implementation of `baseForIn` and `baseForOwn` which iterates
   * over `object` properties returned by `keysFunc` invoking `iteratee` for
   * each property. Iteratee functions may exit iteration early by explicitly
   * returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = createBaseFor();

  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }

  /**
   * The base implementation of `_.functions` which creates an array of
   * `object` function property names filtered from `props`.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Array} props The property names to filter.
   * @returns {Array} Returns the new array of filtered property names.
   */
  function baseFunctions(object, props) {
    return baseFilter(props, function(key) {
      return isFunction(object[key]);
    });
  }

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {boolean} [bitmask] The bitmask of comparison flags.
   *  The bitmask may be composed of the following flags:
   *     1 - Unordered comparison
   *     2 - Partial comparison
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, customizer, bitmask, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, baseIsEqual, customizer, bitmask, stack);
  }

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {number} [bitmask] The bitmask of comparison flags. See `baseIsEqual` for more details.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, equalFunc, customizer, bitmask, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = arrayTag,
        othTag = arrayTag;

    if (!objIsArr) {
      objTag = objectToString.call(object);
      objTag = objTag == argsTag ? objectTag : objTag;
    }
    if (!othIsArr) {
      othTag = objectToString.call(other);
      othTag = othTag == argsTag ? objectTag : othTag;
    }
    var objIsObj = objTag == objectTag && !isHostObject(object),
        othIsObj = othTag == objectTag && !isHostObject(other),
        isSameTag = objTag == othTag;

    stack || (stack = []);
    var stacked = find(stack, function(entry) {
      return entry[0] === object;
    });
    if (stacked && stacked[1]) {
      return stacked[1] == other;
    }
    stack.push([object, other]);
    if (isSameTag && !objIsObj) {
      var result = (objIsArr || isTypedArray(object))
        ? equalArrays(object, other, equalFunc, customizer, bitmask, stack)
        : equalByTag(object, other, objTag, equalFunc, customizer, bitmask, stack);
      stack.pop();
      return result;
    }
    if (!(bitmask & PARTIAL_COMPARE_FLAG)) {
      var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var result = equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, bitmask, stack);
        stack.pop();
        return result;
      }
    }
    if (!isSameTag) {
      return false;
    }
    var result = equalObjects(object, other, equalFunc, customizer, bitmask, stack);
    stack.pop();
    return result;
  }

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */
  function baseIteratee(func) {
    var type = typeof func;
    if (type == 'function') {
      return func;
    }
    return func == null
      ? identity
      : (type == 'object' ? baseMatches : baseProperty)(func);
  }

  /**
   * The base implementation of `_.keys` which doesn't skip the constructor
   * property of prototypes or treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    return nativeKeys(Object(object));
  }

  /**
   * The base implementation of `_.keysIn` which doesn't skip the constructor
   * property of prototypes or treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    object = object == null ? object : Object(object);

    var result = [];
    for (var key in object) {
      result.push(key);
    }
    return result;
  }

  // Fallback for IE < 9 with es6-shim.
  if (enumerate && !propertyIsEnumerable.call({ 'valueOf': 1 }, 'valueOf')) {
    baseKeysIn = function(object) {
      return iteratorToArray(enumerate(object));
    };
  }

  /**
   * The base implementation of `_.map` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function baseMap(collection, iteratee) {
    var index = -1,
        result = isArrayLike(collection) ? Array(collection.length) : [];

    baseEach(collection, function(value, key, collection) {
      result[++index] = iteratee(value, key, collection);
    });
    return result;
  }

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new function.
   */
  function baseMatches(source) {
    var props = keys(source);
    return function(object) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length];
        if (!(key in object &&
              baseIsEqual(source[key], object[key], undefined, UNORDERED_COMPARE_FLAG | PARTIAL_COMPARE_FLAG)
            )) {
          return false;
        }
      }
      return true;
    };
  }

  /**
   * The base implementation of `_.pick` without support for individual
   * property names.
   *
   * @private
   * @param {Object} object The source object.
   * @param {string[]} props The property names to pick.
   * @returns {Object} Returns the new object.
   */
  function basePick(object, props) {
    object = Object(object);
    return reduce(props, function(result, key) {
      if (key in object) {
        result[key] = object[key];
      }
      return result;
    }, {});
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.slice` without an iteratee call guard.
   *
   * @private
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function baseSlice(array, start, end) {
    var index = -1,
        length = array.length;

    if (start < 0) {
      start = -start > length ? 0 : (length + start);
    }
    end = end > length ? length : end;
    if (end < 0) {
      end += length;
    }
    length = start > end ? 0 : ((end - start) >>> 0);
    start >>>= 0;

    var result = Array(length);
    while (++index < length) {
      result[index] = array[index + start];
    }
    return result;
  }

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source) {
    return baseSlice(source, 0, source.length);
  }

  /**
   * The base implementation of `_.some` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
   */
  function baseSome(collection, predicate) {
    var result;

    baseEach(collection, function(value, index, collection) {
      result = predicate(value, index, collection);
      return !result;
    });
    return !!result;
  }

  /**
   * The base implementation of `wrapperValue` which returns the result of
   * performing a sequence of actions on the unwrapped `value`, where each
   * successive action is supplied the return value of the previous.
   *
   * @private
   * @param {*} value The unwrapped value.
   * @param {Array} actions Actions to perform to resolve the unwrapped value.
   * @returns {*} Returns the resolved value.
   */
  function baseWrapperValue(value, actions) {
    var result = value;
    return reduce(actions, function(result, action) {
      return action.func.apply(action.thisArg, arrayPush([result], action.args));
    }, result);
  }

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property names to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @returns {Object} Returns `object`.
   */
  var copyObject = copyObjectWith;

  /**
   * This function is like `copyObject` except that it accepts a function to
   * customize copied values.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property names to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObjectWith(source, props, object, customizer) {
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : source[key];

      assignValue(object, key, newValue);
    }
    return object;
  }

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return rest(function(object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined;

      customizer = typeof customizer == 'function'
        ? (length--, customizer)
        : undefined;

      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  /**
   * Creates a `baseEach` or `baseEachRight` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length,
          index = fromRight ? length : -1,
          iterable = Object(collection);

      while ((fromRight ? index-- : ++index < length)) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }

  /**
   * Creates a base function for methods like `_.forIn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  /**
   * Creates a function that produces an instance of `Ctor` regardless of
   * whether it was invoked as part of a `new` expression or by `call` or `apply`.
   *
   * @private
   * @param {Function} Ctor The constructor to wrap.
   * @returns {Function} Returns the new wrapped function.
   */
  function createCtorWrapper(Ctor) {
    return function() {
      // Use a `switch` statement to work with class constructors.
      // See http://ecma-international.org/ecma-262/6.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
      // for more details.
      var args = arguments;
      var thisBinding = baseCreate(Ctor.prototype),
          result = Ctor.apply(thisBinding, args);

      // Mimic the constructor's `return` behavior.
      // See https://es5.github.io/#x13.2.2 for more details.
      return isObject(result) ? result : thisBinding;
    };
  }

  /**
   * Creates a function that wraps `func` to invoke it with the optional `this`
   * binding of `thisArg` and the `partials` prepended to those provided to
   * the wrapper.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {number} bitmask The bitmask of wrapper flags. See `createWrapper` for more details.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} partials The arguments to prepend to those provided to the new function.
   * @returns {Function} Returns the new wrapped function.
   */
  function createPartialWrapper(func, bitmask, thisArg, partials) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var isBind = bitmask & BIND_FLAG,
        Ctor = createCtorWrapper(func);

    function wrapper() {
      var argsIndex = -1,
          argsLength = arguments.length,
          leftIndex = -1,
          leftLength = partials.length,
          args = Array(leftLength + argsLength),
          fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

      while (++leftIndex < leftLength) {
        args[leftIndex] = partials[leftIndex];
      }
      while (argsLength--) {
        args[leftIndex++] = arguments[++argsIndex];
      }
      return fn.apply(isBind ? thisArg : this, args);
    }
    return wrapper;
  }

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} customizer The function to customize comparisons.
   * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual` for more details.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, equalFunc, customizer, bitmask, stack) {
    var index = -1,
        isPartial = bitmask & PARTIAL_COMPARE_FLAG,
        isUnordered = bitmask & UNORDERED_COMPARE_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    var result = true;

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      var compared;
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (isUnordered) {
        if (!baseSome(other, function(othValue) {
              return arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack);
            })) {
          result = false;
          break;
        }
      } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, bitmask, stack))) {
        result = false;
        break;
      }
    }
    return result;
  }

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} customizer The function to customize comparisons.
   * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual` for more details.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, equalFunc, customizer, bitmask, stack) {
    switch (tag) {

      case boolTag:
      case dateTag:
        // Coerce dates and booleans to numbers, dates to milliseconds and booleans
        // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
        return +object == +other;

      case errorTag:
        return object.name == other.name && object.message == other.message;

      case numberTag:
        // Treat `NaN` vs. `NaN` as equal.
        return (object != +object) ? other != +other : object == +other;

      case regexpTag:
      case stringTag:
        // Coerce regexes to strings and treat strings primitives and string
        // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
        return object == (other + '');

    }
    return false;
  }

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Function} customizer The function to customize comparisons.
   * @param {number} bitmask The bitmask of comparison flags. See `baseIsEqual` for more details.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, equalFunc, customizer, bitmask, stack) {
    var isPartial = bitmask & PARTIAL_COMPARE_FLAG,
        objProps = keys(object),
        objLength = objProps.length,
        othProps = keys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
        return false;
      }
    }
    var result = true;

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      var compared;
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined
            ? (objValue === othValue || equalFunc(objValue, othValue, customizer, bitmask, stack))
            : compared
          )) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    return result;
  }

  /**
   * Gets the "length" property value of `object`.
   *
   * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
   * that affects Safari on at least iOS 8.1-8.3 ARM64.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {*} Returns the "length" value.
   */
  var getLength = baseProperty('length');

  /**
   * Creates an array of index keys for `object` values of arrays,
   * `arguments` objects, and strings, otherwise `null` is returned.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array|null} Returns index keys, else `null`.
   */
  function indexKeys(object) {
    var length = object ? object.length : undefined;
    if (isLength(length) &&
        (isArray(object) || isString(object) || isArguments(object))) {
      return baseTimes(length, String);
    }
    return null;
  }

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

    return value === proto;
  }

  /**
   * Creates a clone of `wrapper`.
   *
   * @private
   * @param {Object} wrapper The wrapper to clone.
   * @returns {Object} Returns the cloned wrapper.
   */
  function wrapperClone(wrapper) {
    var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
    result.__actions__ = copyArray(wrapper.__actions__);
    return result;
  }

  /*------------------------------------------------------------------------*/

  /**
   * Creates an array with all falsey values removed. The values `false`, `null`,
   * `0`, `""`, `undefined`, and `NaN` are falsey.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to compact.
   * @returns {Array} Returns the new array of filtered values.
   * @example
   *
   * _.compact([0, 1, false, 2, '', 3]);
   * // => [1, 2, 3]
   */
  function compact(array) {
    return baseFilter(array, Boolean);
  }

  /**
   * Creates a new array concatenating `array` with any additional arrays
   * and/or values.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to concatenate.
   * @param {...*} [values] The values to concatenate.
   * @returns {Array} Returns the new concatenated array.
   * @example
   *
   * var array = [1];
   * var other = _.concat(array, 2, [3], [[4]]);
   *
   * console.log(other);
   * // => [1, 2, 3, [4]]
   *
   * console.log(array);
   * // => [1]
   */
  var concat = rest(function(array, values) {
    if (!isArray(array)) {
      array = array == null ? [] : [Object(array)];
    }
    values = baseFlatten(values, 1);
    return arrayConcat(array, values);
  });

  /**
   * Flattens `array` a single level deep.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flatten([1, [2, [3, [4]], 5]]);
   * // => [1, 2, [3, [4]], 5]
   */
  function flatten(array) {
    var length = array ? array.length : 0;
    return length ? baseFlatten(array, 1) : [];
  }

  /**
   * Recursively flattens `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to flatten.
   * @returns {Array} Returns the new flattened array.
   * @example
   *
   * _.flattenDeep([1, [2, [3, [4]], 5]]);
   * // => [1, 2, 3, 4, 5]
   */
  function flattenDeep(array) {
    var length = array ? array.length : 0;
    return length ? baseFlatten(array, INFINITY) : [];
  }

  /**
   * Gets the first element of `array`.
   *
   * @static
   * @memberOf _
   * @alias first
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the first element of `array`.
   * @example
   *
   * _.head([1, 2, 3]);
   * // => 1
   *
   * _.head([]);
   * // => undefined
   */
  function head(array) {
    return array ? array[0] : undefined;
  }

  /**
   * Gets the index at which the first occurrence of `value` is found in `array`
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * for equality comparisons. If `fromIndex` is negative, it's used as the offset
   * from the end of `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to search.
   * @param {*} value The value to search for.
   * @param {number} [fromIndex=0] The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   * @example
   *
   * _.indexOf([1, 2, 1, 2], 2);
   * // => 1
   *
   * // Search from the `fromIndex`.
   * _.indexOf([1, 2, 1, 2], 2, 2);
   * // => 3
   */
  function indexOf(array, value, fromIndex) {
    var length = array ? array.length : 0;
    if (typeof fromIndex == 'number') {
      fromIndex = fromIndex < 0 ? nativeMax(length + fromIndex, 0) : fromIndex;
    } else {
      fromIndex = 0;
    }
    var index = (fromIndex || 0) - 1,
        isReflexive = value === value;

    while (++index < length) {
      var other = array[index];
      if ((isReflexive ? other === value : other !== other)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * Gets the last element of `array`.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to query.
   * @returns {*} Returns the last element of `array`.
   * @example
   *
   * _.last([1, 2, 3]);
   * // => 3
   */
  function last(array) {
    var length = array ? array.length : 0;
    return length ? array[length - 1] : undefined;
  }

  /**
   * Creates a slice of `array` from `start` up to, but not including, `end`.
   *
   * **Note:** This method is used instead of [`Array#slice`](https://mdn.io/Array/slice)
   * to ensure dense arrays are returned.
   *
   * @static
   * @memberOf _
   * @category Array
   * @param {Array} array The array to slice.
   * @param {number} [start=0] The start position.
   * @param {number} [end=array.length] The end position.
   * @returns {Array} Returns the slice of `array`.
   */
  function slice(array, start, end) {
    var length = array ? array.length : 0;
    start = start == null ? 0 : +start;
    end = end === undefined ? length : +end;
    return length ? baseSlice(array, start, end) : [];
  }

  /*------------------------------------------------------------------------*/

  /**
   * Creates a `lodash` object that wraps `value` with explicit method chaining enabled.
   * The result of such method chaining must be unwrapped with `_#value`.
   *
   * @static
   * @memberOf _
   * @category Seq
   * @param {*} value The value to wrap.
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36 },
   *   { 'user': 'fred',    'age': 40 },
   *   { 'user': 'pebbles', 'age': 1 }
   * ];
   *
   * var youngest = _
   *   .chain(users)
   *   .sortBy('age')
   *   .map(function(o) {
   *     return o.user + ' is ' + o.age;
   *   })
   *   .head()
   *   .value();
   * // => 'pebbles is 1'
   */
  function chain(value) {
    var result = lodash(value);
    result.__chain__ = true;
    return result;
  }

  /**
   * This method invokes `interceptor` and returns `value`. The interceptor
   * is invoked with one argument; (value). The purpose of this method is to
   * "tap into" a method chain in order to modify intermediate results.
   *
   * @static
   * @memberOf _
   * @category Seq
   * @param {*} value The value to provide to `interceptor`.
   * @param {Function} interceptor The function to invoke.
   * @returns {*} Returns `value`.
   * @example
   *
   * _([1, 2, 3])
   *  .tap(function(array) {
   *    // Mutate input array.
   *    array.pop();
   *  })
   *  .reverse()
   *  .value();
   * // => [2, 1]
   */
  function tap(value, interceptor) {
    interceptor(value);
    return value;
  }

  /**
   * This method is like `_.tap` except that it returns the result of `interceptor`.
   * The purpose of this method is to "pass thru" values replacing intermediate
   * results in a method chain.
   *
   * @static
   * @memberOf _
   * @category Seq
   * @param {*} value The value to provide to `interceptor`.
   * @param {Function} interceptor The function to invoke.
   * @returns {*} Returns the result of `interceptor`.
   * @example
   *
   * _('  abc  ')
   *  .chain()
   *  .trim()
   *  .thru(function(value) {
   *    return [value];
   *  })
   *  .value();
   * // => ['abc']
   */
  function thru(value, interceptor) {
    return interceptor(value);
  }

  /**
   * Enables explicit method chaining on the wrapper object.
   *
   * @name chain
   * @memberOf _
   * @category Seq
   * @returns {Object} Returns the new `lodash` wrapper instance.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 40 }
   * ];
   *
   * // A sequence without explicit chaining.
   * _(users).head();
   * // => { 'user': 'barney', 'age': 36 }
   *
   * // A sequence with explicit chaining.
   * _(users)
   *   .chain()
   *   .head()
   *   .pick('user')
   *   .value();
   * // => { 'user': 'barney' }
   */
  function wrapperChain() {
    return chain(this);
  }

  /**
   * Executes the chained sequence to extract the unwrapped value.
   *
   * @name value
   * @memberOf _
   * @alias toJSON, valueOf
   * @category Seq
   * @returns {*} Returns the resolved unwrapped value.
   * @example
   *
   * _([1, 2, 3]).value();
   * // => [1, 2, 3]
   */
  function wrapperValue() {
    return baseWrapperValue(this.__wrapped__, this.__actions__);
  }

  /*------------------------------------------------------------------------*/

  /**
   * Checks if `predicate` returns truthy for **all** elements of `collection`.
   * Iteration is stopped once `predicate` returns falsey. The predicate is
   * invoked with three arguments: (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
   * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
   * @returns {boolean} Returns `true` if all elements pass the predicate check, else `false`.
   * @example
   *
   * _.every([true, 1, null, 'yes'], Boolean);
   * // => false
   *
   * var users = [
   *   { 'user': 'barney', 'active': false },
   *   { 'user': 'fred',   'active': false }
   * ];
   *
   * // The `_.matches` iteratee shorthand.
   * _.every(users, { 'user': 'barney', 'active': false });
   * // => false
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.every(users, ['active', false]);
   * // => true
   *
   * // The `_.property` iteratee shorthand.
   * _.every(users, 'active');
   * // => false
   */
  function every(collection, predicate, guard) {
    predicate = guard ? undefined : predicate;
    return baseEvery(collection, baseIteratee(predicate));
  }

  /**
   * Iterates over elements of `collection`, returning an array of all elements
   * `predicate` returns truthy for. The predicate is invoked with three arguments:
   * (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': true },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * _.filter(users, function(o) { return !o.active; });
   * // => objects for ['fred']
   *
   * // The `_.matches` iteratee shorthand.
   * _.filter(users, { 'age': 36, 'active': true });
   * // => objects for ['barney']
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.filter(users, ['active', false]);
   * // => objects for ['fred']
   *
   * // The `_.property` iteratee shorthand.
   * _.filter(users, 'active');
   * // => objects for ['barney']
   */
  function filter(collection, predicate) {
    return baseFilter(collection, baseIteratee(predicate));
  }

  /**
   * Iterates over elements of `collection`, returning the first element
   * `predicate` returns truthy for. The predicate is invoked with three arguments:
   * (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object} collection The collection to search.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
   * @returns {*} Returns the matched element, else `undefined`.
   * @example
   *
   * var users = [
   *   { 'user': 'barney',  'age': 36, 'active': true },
   *   { 'user': 'fred',    'age': 40, 'active': false },
   *   { 'user': 'pebbles', 'age': 1,  'active': true }
   * ];
   *
   * _.find(users, function(o) { return o.age < 40; });
   * // => object for 'barney'
   *
   * // The `_.matches` iteratee shorthand.
   * _.find(users, { 'age': 1, 'active': true });
   * // => object for 'pebbles'
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.find(users, ['active', false]);
   * // => object for 'fred'
   *
   * // The `_.property` iteratee shorthand.
   * _.find(users, 'active');
   * // => object for 'barney'
   */
  function find(collection, predicate) {
    return baseFind(collection, baseIteratee(predicate), baseEach);
  }

  /**
   * Iterates over elements of `collection` invoking `iteratee` for each element.
   * The iteratee is invoked with three arguments: (value, index|key, collection).
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * **Note:** As with other "Collections" methods, objects with a "length" property
   * are iterated like arrays. To avoid this behavior use `_.forIn` or `_.forOwn`
   * for object iteration.
   *
   * @static
   * @memberOf _
   * @alias each
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   * @example
   *
   * _([1, 2]).forEach(function(value) {
   *   console.log(value);
   * });
   * // => logs `1` then `2`
   *
   * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
   *   console.log(key);
   * });
   * // => logs 'a' then 'b' (iteration order is not guaranteed)
   */
  function forEach(collection, iteratee) {
    return baseEach(collection, baseCastFunction(iteratee));
  }

  /**
   * Creates an array of values by running each element in `collection` through
   * `iteratee`. The iteratee is invoked with three arguments:
   * (value, index|key, collection).
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
   *
   * The guarded methods are:
   * `ary`, `curry`, `curryRight`, `drop`, `dropRight`, `every`, `fill`,
   * `invert`, `parseInt`, `random`, `range`, `rangeRight`, `slice`, `some`,
   * `sortBy`, `take`, `takeRight`, `template`, `trim`, `trimEnd`, `trimStart`,
   * and `words`
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function|Object|string} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   * @example
   *
   * function square(n) {
   *   return n * n;
   * }
   *
   * _.map([4, 8], square);
   * // => [16, 64]
   *
   * _.map({ 'a': 4, 'b': 8 }, square);
   * // => [16, 64] (iteration order is not guaranteed)
   *
   * var users = [
   *   { 'user': 'barney' },
   *   { 'user': 'fred' }
   * ];
   *
   * // The `_.property` iteratee shorthand.
   * _.map(users, 'user');
   * // => ['barney', 'fred']
   */
  function map(collection, iteratee) {
    return baseMap(collection, baseIteratee(iteratee));
  }

  /**
   * Reduces `collection` to a value which is the accumulated result of running
   * each element in `collection` through `iteratee`, where each successive
   * invocation is supplied the return value of the previous. If `accumulator`
   * is not given the first element of `collection` is used as the initial
   * value. The iteratee is invoked with four arguments:
   * (accumulator, value, index|key, collection).
   *
   * Many lodash methods are guarded to work as iteratees for methods like
   * `_.reduce`, `_.reduceRight`, and `_.transform`.
   *
   * The guarded methods are:
   * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
   * and `sortBy`
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @returns {*} Returns the accumulated value.
   * @example
   *
   * _.reduce([1, 2], function(sum, n) {
   *   return sum + n;
   * }, 0);
   * // => 3
   *
   * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
   *   (result[value] || (result[value] = [])).push(key);
   *   return result;
   * }, {});
   * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
   */
  function reduce(collection, iteratee, accumulator) {
    return baseReduce(collection, baseIteratee(iteratee), accumulator, arguments.length < 3, baseEach);
  }

  /**
   * Gets the size of `collection` by returning its length for array-like
   * values or the number of own enumerable properties for objects.
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object} collection The collection to inspect.
   * @returns {number} Returns the collection size.
   * @example
   *
   * _.size([1, 2, 3]);
   * // => 3
   *
   * _.size({ 'a': 1, 'b': 2 });
   * // => 2
   *
   * _.size('pebbles');
   * // => 7
   */
  function size(collection) {
    if (collection == null) {
      return 0;
    }
    collection = isArrayLike(collection) ? collection : keys(collection);
    return collection.length;
  }

  /**
   * Checks if `predicate` returns truthy for **any** element of `collection`.
   * Iteration is stopped once `predicate` returns truthy. The predicate is
   * invoked with three arguments: (value, index|key, collection).
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function|Object|string} [predicate=_.identity] The function invoked per iteration.
   * @param- {Object} [guard] Enables use as an iteratee for functions like `_.map`.
   * @returns {boolean} Returns `true` if any element passes the predicate check, else `false`.
   * @example
   *
   * _.some([null, 0, 'yes', false], Boolean);
   * // => true
   *
   * var users = [
   *   { 'user': 'barney', 'active': true },
   *   { 'user': 'fred',   'active': false }
   * ];
   *
   * // The `_.matches` iteratee shorthand.
   * _.some(users, { 'user': 'barney', 'active': false });
   * // => false
   *
   * // The `_.matchesProperty` iteratee shorthand.
   * _.some(users, ['active', false]);
   * // => true
   *
   * // The `_.property` iteratee shorthand.
   * _.some(users, 'active');
   * // => true
   */
  function some(collection, predicate, guard) {
    predicate = guard ? undefined : predicate;
    return baseSome(collection, baseIteratee(predicate));
  }

  /**
   * Creates an array of elements, sorted in ascending order by the results of
   * running each element in a collection through each iteratee. This method
   * performs a stable sort, that is, it preserves the original sort order of
   * equal elements. The iteratees are invoked with one argument: (value).
   *
   * @static
   * @memberOf _
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {...(Function|Function[]|Object|Object[]|string|string[])} [iteratees=[_.identity]]
   *  The iteratees to sort by, specified individually or in arrays.
   * @returns {Array} Returns the new sorted array.
   * @example
   *
   * var users = [
   *   { 'user': 'fred',   'age': 48 },
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 42 },
   *   { 'user': 'barney', 'age': 34 }
   * ];
   *
   * _.sortBy(users, function(o) { return o.user; });
   * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
   *
   * _.sortBy(users, ['user', 'age']);
   * // => objects for [['barney', 34], ['barney', 36], ['fred', 42], ['fred', 48]]
   *
   * _.sortBy(users, 'user', function(o) {
   *   return Math.floor(o.age / 10);
   * });
   * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 42]]
   */
  function sortBy(collection, iteratee) {
    var index = 0;
    iteratee = baseIteratee(iteratee);

    return baseMap(baseMap(collection, function(value, key, collection) {
      return { 'value': value, 'index': index++, 'criteria': iteratee(value, key, collection) };
    }).sort(function(object, other) {
      return compareAscending(object.criteria, other.criteria) || (object.index - other.index);
    }), baseProperty('value'));
  }

  /*------------------------------------------------------------------------*/

  /**
   * Creates a function that invokes `func`, with the `this` binding and arguments
   * of the created function, while it's called less than `n` times. Subsequent
   * calls to the created function return the result of the last `func` invocation.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {number} n The number of calls at which `func` is no longer invoked.
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * jQuery(element).on('click', _.before(5, addContactToList));
   * // => allows adding up to 4 contacts to the list
   */
  function before(n, func) {
    var result;
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    n = toInteger(n);
    return function() {
      if (--n > 0) {
        result = func.apply(this, arguments);
      }
      if (n <= 1) {
        func = undefined;
      }
      return result;
    };
  }

  /**
   * Creates a function that invokes `func` with the `this` binding of `thisArg`
   * and prepends any additional `_.bind` arguments to those provided to the
   * bound function.
   *
   * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
   * may be used as a placeholder for partially applied arguments.
   *
   * **Note:** Unlike native `Function#bind` this method doesn't set the "length"
   * property of bound functions.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to bind.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {...*} [partials] The arguments to be partially applied.
   * @returns {Function} Returns the new bound function.
   * @example
   *
   * var greet = function(greeting, punctuation) {
   *   return greeting + ' ' + this.user + punctuation;
   * };
   *
   * var object = { 'user': 'fred' };
   *
   * var bound = _.bind(greet, object, 'hi');
   * bound('!');
   * // => 'hi fred!'
   *
   * // Bound with placeholders.
   * var bound = _.bind(greet, object, _, '!');
   * bound('hi');
   * // => 'hi fred!'
   */
  var bind = rest(function(func, thisArg, partials) {
    return createPartialWrapper(func, BIND_FLAG | PARTIAL_FLAG, thisArg, partials);
  });

  /**
   * Defers invoking the `func` until the current call stack has cleared. Any
   * additional arguments are provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to defer.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {number} Returns the timer id.
   * @example
   *
   * _.defer(function(text) {
   *   console.log(text);
   * }, 'deferred');
   * // => logs 'deferred' after one or more milliseconds
   */
  var defer = rest(function(func, args) {
    return baseDelay(func, 1, args);
  });

  /**
   * Invokes `func` after `wait` milliseconds. Any additional arguments are
   * provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to delay.
   * @param {number} wait The number of milliseconds to delay invocation.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {number} Returns the timer id.
   * @example
   *
   * _.delay(function(text) {
   *   console.log(text);
   * }, 1000, 'later');
   * // => logs 'later' after one second
   */
  var delay = rest(function(func, wait, args) {
    return baseDelay(func, toNumber(wait) || 0, args);
  });

  /**
   * Creates a function that negates the result of the predicate `func`. The
   * `func` predicate is invoked with the `this` binding and arguments of the
   * created function.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} predicate The predicate to negate.
   * @returns {Function} Returns the new function.
   * @example
   *
   * function isEven(n) {
   *   return n % 2 == 0;
   * }
   *
   * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
   * // => [1, 3, 5]
   */
  function negate(predicate) {
    if (typeof predicate != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    return function() {
      return !predicate.apply(this, arguments);
    };
  }

  /**
   * Creates a function that is restricted to invoking `func` once. Repeat calls
   * to the function return the value of the first invocation. The `func` is
   * invoked with the `this` binding and arguments of the created function.
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new restricted function.
   * @example
   *
   * var initialize = _.once(createApplication);
   * initialize();
   * initialize();
   * // `initialize` invokes `createApplication` once
   */
  function once(func) {
    return before(2, func);
  }

  /**
   * Creates a function that invokes `func` with the `this` binding of the
   * created function and arguments from `start` and beyond provided as an array.
   *
   * **Note:** This method is based on the [rest parameter](https://mdn.io/rest_parameters).
   *
   * @static
   * @memberOf _
   * @category Function
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var say = _.rest(function(what, names) {
   *   return what + ' ' + _.initial(names).join(', ') +
   *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
   * });
   *
   * say('hello', 'fred', 'barney', 'pebbles');
   * // => 'hello fred, barney, & pebbles'
   */
  function rest(func, start) {
    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    start = nativeMax(start === undefined ? (func.length - 1) : toInteger(start), 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      var otherArgs = Array(start + 1);
      index = -1;
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = array;
      return func.apply(this, otherArgs);
    };
  }

  /*------------------------------------------------------------------------*/

  /**
   * Creates a shallow clone of `value`.
   *
   * **Note:** This method is loosely based on the
   * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
   * and supports cloning arrays, array buffers, booleans, date objects, maps,
   * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
   * arrays. The own enumerable properties of `arguments` objects are cloned
   * as plain objects. An empty object is returned for uncloneable values such
   * as error objects, functions, DOM nodes, and WeakMaps.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to clone.
   * @returns {*} Returns the cloned value.
   * @example
   *
   * var objects = [{ 'a': 1 }, { 'b': 2 }];
   *
   * var shallow = _.clone(objects);
   * console.log(shallow[0] === objects[0]);
   * // => true
   */
  function clone(value) {
    if (!isObject(value)) {
      return value;
    }
    return isArray(value) ? copyArray(value) : copyObject(value, keys(value));
  }

  /**
   * Performs a [`SameValueZero`](http://ecma-international.org/ecma-262/6.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'user': 'fred' };
   * var other = { 'user': 'fred' };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  /**
   * Checks if `value` is greater than `other`.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is greater than `other`, else `false`.
   * @example
   *
   * _.gt(3, 1);
   * // => true
   *
   * _.gt(3, 3);
   * // => false
   *
   * _.gt(1, 3);
   * // => false
   */
  function gt(value, other) {
    return value > other;
  }

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  function isArguments(value) {
    // Safari 8.1 incorrectly makes `arguments.callee` enumerable in strict mode.
    return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&
      (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);
  }

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @type {Function}
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(getLength(value)) && !isFunction(value);
  }

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object, else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  /**
   * Checks if `value` is classified as a boolean primitive or object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isBoolean(false);
   * // => true
   *
   * _.isBoolean(null);
   * // => false
   */
  function isBoolean(value) {
    return value === true || value === false ||
      (isObjectLike(value) && objectToString.call(value) == boolTag);
  }

  /**
   * Checks if `value` is classified as a `Date` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isDate(new Date);
   * // => true
   *
   * _.isDate('Mon April 23 2012');
   * // => false
   */
  function isDate(value) {
    return isObjectLike(value) && objectToString.call(value) == dateTag;
  }

  /**
   * Checks if `value` is an empty collection or object. A value is considered
   * empty if it's an `arguments` object, array, string, or jQuery-like collection
   * with a length of `0` or has no own enumerable properties.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is empty, else `false`.
   * @example
   *
   * _.isEmpty(null);
   * // => true
   *
   * _.isEmpty(true);
   * // => true
   *
   * _.isEmpty(1);
   * // => true
   *
   * _.isEmpty([1, 2, 3]);
   * // => false
   *
   * _.isEmpty({ 'a': 1 });
   * // => false
   */
  function isEmpty(value) {
    if (isArrayLike(value) &&
        (isArray(value) || isString(value) ||
          isFunction(value.splice) || isArguments(value))) {
      return !value.length;
    }
    for (var key in value) {
      if (hasOwnProperty.call(value, key)) {
        return false;
      }
    }
    return true;
  }

  /**
   * Performs a deep comparison between two values to determine if they are
   * equivalent.
   *
   * **Note:** This method supports comparing arrays, array buffers, booleans,
   * date objects, error objects, maps, numbers, `Object` objects, regexes,
   * sets, strings, symbols, and typed arrays. `Object` objects are compared
   * by their own, not inherited, enumerable properties. Functions and DOM
   * nodes are **not** supported.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'user': 'fred' };
   * var other = { 'user': 'fred' };
   *
   * _.isEqual(object, other);
   * // => true
   *
   * object === other;
   * // => false
   */
  function isEqual(value, other) {
    return baseIsEqual(value, other);
  }

  /**
   * Checks if `value` is a finite primitive number.
   *
   * **Note:** This method is based on [`Number.isFinite`](https://mdn.io/Number/isFinite).
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
   * @example
   *
   * _.isFinite(3);
   * // => true
   *
   * _.isFinite(Number.MAX_VALUE);
   * // => true
   *
   * _.isFinite(3.14);
   * // => true
   *
   * _.isFinite(Infinity);
   * // => false
   */
  function isFinite(value) {
    return typeof value == 'number' && nativeIsFinite(value);
  }

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 8 which returns 'object' for typed array and weak map constructors,
    // and PhantomJS 1.9 which returns 'function' for `NodeList` instances.
    var tag = isObject(value) ? objectToString.call(value) : '';
    return tag == funcTag || tag == genTag;
  }

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This function is loosely based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  /**
   * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
   * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject(value) {
    var type = typeof value;
    return !!value && (type == 'object' || type == 'function');
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return !!value && typeof value == 'object';
  }

  /**
   * Checks if `value` is `NaN`.
   *
   * **Note:** This method is not the same as [`isNaN`](https://es5.github.io/#x15.1.2.4)
   * which returns `true` for `undefined` and other non-numeric values.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   * @example
   *
   * _.isNaN(NaN);
   * // => true
   *
   * _.isNaN(new Number(NaN));
   * // => true
   *
   * isNaN(undefined);
   * // => true
   *
   * _.isNaN(undefined);
   * // => false
   */
  function isNaN(value) {
    // An `NaN` primitive is the only value that is not equal to itself.
    // Perform the `toStringTag` check first to avoid errors with some ActiveX objects in IE.
    return isNumber(value) && value != +value;
  }

  /**
   * Checks if `value` is `null`.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
   * @example
   *
   * _.isNull(null);
   * // => true
   *
   * _.isNull(void 0);
   * // => false
   */
  function isNull(value) {
    return value === null;
  }

  /**
   * Checks if `value` is classified as a `Number` primitive or object.
   *
   * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are classified
   * as numbers, use the `_.isFinite` method.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isNumber(3);
   * // => true
   *
   * _.isNumber(Number.MIN_VALUE);
   * // => true
   *
   * _.isNumber(Infinity);
   * // => true
   *
   * _.isNumber('3');
   * // => false
   */
  function isNumber(value) {
    return typeof value == 'number' ||
      (isObjectLike(value) && objectToString.call(value) == numberTag);
  }

  /**
   * Checks if `value` is classified as a `RegExp` object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isRegExp(/abc/);
   * // => true
   *
   * _.isRegExp('/abc/');
   * // => false
   */
  function isRegExp(value) {
    return isObject(value) && objectToString.call(value) == regexpTag;
  }

  /**
   * Checks if `value` is classified as a `String` primitive or object.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
   * @example
   *
   * _.isString('abc');
   * // => true
   *
   * _.isString(1);
   * // => false
   */
  function isString(value) {
    return typeof value == 'string' ||
      (!isArray(value) && isObjectLike(value) && objectToString.call(value) == stringTag);
  }

  /**
   * Checks if `value` is `undefined`.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
   * @example
   *
   * _.isUndefined(void 0);
   * // => true
   *
   * _.isUndefined(null);
   * // => false
   */
  function isUndefined(value) {
    return value === undefined;
  }

  /**
   * Checks if `value` is less than `other`.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if `value` is less than `other`, else `false`.
   * @example
   *
   * _.lt(1, 3);
   * // => true
   *
   * _.lt(3, 3);
   * // => false
   *
   * _.lt(3, 1);
   * // => false
   */
  function lt(value, other) {
    return value < other;
  }

  /**
   * Converts `value` to an array.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Array} Returns the converted array.
   * @example
   *
   * _.toArray({ 'a': 1, 'b': 2 });
   * // => [1, 2]
   *
   * _.toArray('abc');
   * // => ['a', 'b', 'c']
   *
   * _.toArray(1);
   * // => []
   *
   * _.toArray(null);
   * // => []
   */
  function toArray(value) {
    if (!isArrayLike(value)) {
      return values(value);
    }
    return value.length ? copyArray(value) : [];
  }

  /**
   * Converts `value` to an integer.
   *
   * **Note:** This function is loosely based on [`ToInteger`](http://www.ecma-international.org/ecma-262/6.0/#sec-tointeger).
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {number} Returns the converted integer.
   * @example
   *
   * _.toInteger(3);
   * // => 3
   *
   * _.toInteger(Number.MIN_VALUE);
   * // => 0
   *
   * _.toInteger(Infinity);
   * // => 1.7976931348623157e+308
   *
   * _.toInteger('3');
   * // => 3
   */
  var toInteger = Number;

  /**
   * Converts `value` to a number.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to process.
   * @returns {number} Returns the number.
   * @example
   *
   * _.toNumber(3);
   * // => 3
   *
   * _.toNumber(Number.MIN_VALUE);
   * // => 5e-324
   *
   * _.toNumber(Infinity);
   * // => Infinity
   *
   * _.toNumber('3');
   * // => 3
   */
  var toNumber = Number;

  /**
   * Converts `value` to a string if it's not one. An empty string is returned
   * for `null` and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @category Lang
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString(value) {
    if (typeof value == 'string') {
      return value;
    }
    return value == null ? '' : (value + '');
  }

  /*------------------------------------------------------------------------*/

  /**
   * Assigns own enumerable properties of source objects to the destination
   * object. Source objects are applied from left to right. Subsequent sources
   * overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object` and is loosely based on
   * [`Object.assign`](https://mdn.io/Object/assign).
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function Foo() {
   *   this.c = 3;
   * }
   *
   * function Bar() {
   *   this.e = 5;
   * }
   *
   * Foo.prototype.d = 4;
   * Bar.prototype.f = 6;
   *
   * _.assign({ 'a': 1 }, new Foo, new Bar);
   * // => { 'a': 1, 'c': 3, 'e': 5 }
   */
  var assign = createAssigner(function(object, source) {
    copyObject(source, keys(source), object);
  });

  /**
   * This method is like `_.assign` except that it iterates over own and
   * inherited source properties.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @alias extend
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * function Bar() {
   *   this.d = 4;
   * }
   *
   * Foo.prototype.c = 3;
   * Bar.prototype.e = 5;
   *
   * _.assignIn({ 'a': 1 }, new Foo, new Bar);
   * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5 }
   */
  var assignIn = createAssigner(function(object, source) {
    copyObject(source, keysIn(source), object);
  });

  /**
   * This method is like `_.assignIn` except that it accepts `customizer` which
   * is invoked to produce the assigned values. If `customizer` returns `undefined`
   * assignment is handled by the method instead. The `customizer` is invoked
   * with five arguments: (objValue, srcValue, key, object, source).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @alias extendWith
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} [customizer] The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   return _.isUndefined(objValue) ? srcValue : objValue;
   * }
   *
   * var defaults = _.partialRight(_.assignInWith, customizer);
   *
   * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
   * // => { 'a': 1, 'b': 2 }
   */
  var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
    copyObjectWith(source, keysIn(source), object, customizer);
  });

  /**
   * Creates an object that inherits from the `prototype` object. If a `properties`
   * object is given its own enumerable properties are assigned to the created object.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} prototype The object to inherit from.
   * @param {Object} [properties] The properties to assign to the object.
   * @returns {Object} Returns the new object.
   * @example
   *
   * function Shape() {
   *   this.x = 0;
   *   this.y = 0;
   * }
   *
   * function Circle() {
   *   Shape.call(this);
   * }
   *
   * Circle.prototype = _.create(Shape.prototype, {
   *   'constructor': Circle
   * });
   *
   * var circle = new Circle;
   * circle instanceof Circle;
   * // => true
   *
   * circle instanceof Shape;
   * // => true
   */
  function create(prototype, properties) {
    var result = baseCreate(prototype);
    return properties ? assign(result, properties) : result;
  }

  /**
   * Assigns own and inherited enumerable properties of source objects to the
   * destination object for all destination properties that resolve to `undefined`.
   * Source objects are applied from left to right. Once a property is set,
   * additional values of the same property are ignored.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * _.defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
   * // => { 'user': 'barney', 'age': 36 }
   */
  var defaults = rest(function(args) {
    args.push(undefined, assignInDefaults);
    return assignInWith.apply(undefined, args);
  });

  /**
   * Checks if `path` is a direct property of `object`.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = { 'a': { 'b': { 'c': 3 } } };
   * var other = _.create({ 'a': _.create({ 'b': _.create({ 'c': 3 }) }) });
   *
   * _.has(object, 'a');
   * // => true
   *
   * _.has(object, 'a.b.c');
   * // => true
   *
   * _.has(object, ['a', 'b', 'c']);
   * // => true
   *
   * _.has(other, 'a');
   * // => false
   */
  function has(object, path) {
    return object != null && hasOwnProperty.call(object, path);
  }

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    var isProto = isPrototype(object);
    if (!(isProto || isArrayLike(object))) {
      return baseKeys(object);
    }
    var indexes = indexKeys(object),
        skipIndexes = !!indexes,
        result = indexes || [],
        length = result.length;

    for (var key in object) {
      if (hasOwnProperty.call(object, key) &&
          !(skipIndexes && (key == 'length' || isIndex(key, length))) &&
          !(isProto && key == 'constructor')) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn(object) {
    var index = -1,
        isProto = isPrototype(object),
        props = baseKeysIn(object),
        propsLength = props.length,
        indexes = indexKeys(object),
        skipIndexes = !!indexes,
        result = indexes || [],
        length = result.length;

    while (++index < propsLength) {
      var key = props[index];
      if (!(skipIndexes && (key == 'length' || isIndex(key, length))) &&
          !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates an object composed of the picked `object` properties.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The source object.
   * @param {...(string|string[])} [props] The property names to pick, specified
   *  individually or in arrays.
   * @returns {Object} Returns the new object.
   * @example
   *
   * var object = { 'a': 1, 'b': '2', 'c': 3 };
   *
   * _.pick(object, ['a', 'c']);
   * // => { 'a': 1, 'c': 3 }
   */
  var pick = rest(function(object, props) {
    return object == null ? {} : basePick(object, baseFlatten(props, 1));
  });

  /**
   * This method is like `_.get` except that if the resolved value is a function
   * it's invoked with the `this` binding of its parent object and its result
   * is returned.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to resolve.
   * @param {*} [defaultValue] The value returned if the resolved value is `undefined`.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
   *
   * _.result(object, 'a[0].b.c1');
   * // => 3
   *
   * _.result(object, 'a[0].b.c2');
   * // => 4
   *
   * _.result(object, 'a[0].b.c3', 'default');
   * // => 'default'
   *
   * _.result(object, 'a[0].b.c3', _.constant('default'));
   * // => 'default'
   */
  function result(object, path, defaultValue) {
    var value = object == null ? undefined : object[path];
    if (value === undefined) {
      value = defaultValue;
    }
    return isFunction(value) ? value.call(object) : value;
  }

  /**
   * Creates an array of the own enumerable property values of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property values.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.values(new Foo);
   * // => [1, 2] (iteration order is not guaranteed)
   *
   * _.values('hi');
   * // => ['h', 'i']
   */
  function values(object) {
    return object ? baseValues(object, keys(object)) : [];
  }

  /*------------------------------------------------------------------------*/

  /**
   * Converts the characters "&", "<", ">", '"', "'", and "\`" in `string` to
   * their corresponding HTML entities.
   *
   * **Note:** No other characters are escaped. To escape additional
   * characters use a third-party library like [_he_](https://mths.be/he).
   *
   * Though the ">" character is escaped for symmetry, characters like
   * ">" and "/" don't need escaping in HTML and have no special meaning
   * unless they're part of a tag or unquoted attribute value.
   * See [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
   * (under "semi-related fun fact") for more details.
   *
   * Backticks are escaped because in IE < 9, they can break out of
   * attribute values or HTML comments. See [#59](https://html5sec.org/#59),
   * [#102](https://html5sec.org/#102), [#108](https://html5sec.org/#108), and
   * [#133](https://html5sec.org/#133) of the [HTML5 Security Cheatsheet](https://html5sec.org/)
   * for more details.
   *
   * When working with HTML you should always [quote attribute values](http://wonko.com/post/html-escaping)
   * to reduce XSS vectors.
   *
   * @static
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to escape.
   * @returns {string} Returns the escaped string.
   * @example
   *
   * _.escape('fred, barney, & pebbles');
   * // => 'fred, barney, &amp; pebbles'
   */
  function escape(string) {
    string = toString(string);
    return (string && reHasUnescapedHtml.test(string))
      ? string.replace(reUnescapedHtml, escapeHtmlChar)
      : string;
  }

  /*------------------------------------------------------------------------*/

  /**
   * This method returns the first argument given to it.
   *
   * @static
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'user': 'fred' };
   *
   * _.identity(object) === object;
   * // => true
   */
  function identity(value) {
    return value;
  }

  /**
   * Creates a function that invokes `func` with the arguments of the created
   * function. If `func` is a property name the created callback returns the
   * property value for a given element. If `func` is an object the created
   * callback returns `true` for elements that contain the equivalent object
   * properties, otherwise it returns `false`.
   *
   * @static
   * @memberOf _
   * @category Util
   * @param {*} [func=_.identity] The value to convert to a callback.
   * @returns {Function} Returns the callback.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36 },
   *   { 'user': 'fred',   'age': 40 }
   * ];
   *
   * // Create custom iteratee shorthands.
   * _.iteratee = _.wrap(_.iteratee, function(callback, func) {
   *   var p = /^(\S+)\s*([<>])\s*(\S+)$/.exec(func);
   *   return !p ? callback(func) : function(object) {
   *     return (p[2] == '>' ? object[p[1]] > p[3] : object[p[1]] < p[3]);
   *   };
   * });
   *
   * _.filter(users, 'age > 36');
   * // => [{ 'user': 'fred', 'age': 40 }]
   */
  var iteratee = baseIteratee;

  /**
   * Creates a function that performs a partial deep comparison between a given
   * object and `source`, returning `true` if the given object has equivalent
   * property values, else `false`. The created function is equivalent to
   * `_.isMatch` with a `source` partially applied.
   *
   * **Note:** This method supports comparing the same values as `_.isEqual`.
   *
   * @static
   * @memberOf _
   * @category Util
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new function.
   * @example
   *
   * var users = [
   *   { 'user': 'barney', 'age': 36, 'active': true },
   *   { 'user': 'fred',   'age': 40, 'active': false }
   * ];
   *
   * _.filter(users, _.matches({ 'age': 40, 'active': false }));
   * // => [{ 'user': 'fred', 'age': 40, 'active': false }]
   */
  function matches(source) {
    return baseMatches(assign({}, source));
  }

  /**
   * Adds all own enumerable function properties of a source object to the
   * destination object. If `object` is a function then methods are added to
   * its prototype as well.
   *
   * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
   * avoid conflicts caused by modifying the original.
   *
   * @static
   * @memberOf _
   * @category Util
   * @param {Function|Object} [object=lodash] The destination object.
   * @param {Object} source The object of functions to add.
   * @param {Object} [options] The options object.
   * @param {boolean} [options.chain=true] Specify whether the functions added
   *  are chainable.
   * @returns {Function|Object} Returns `object`.
   * @example
   *
   * function vowels(string) {
   *   return _.filter(string, function(v) {
   *     return /[aeiou]/i.test(v);
   *   });
   * }
   *
   * _.mixin({ 'vowels': vowels });
   * _.vowels('fred');
   * // => ['e']
   *
   * _('fred').vowels().value();
   * // => ['e']
   *
   * _.mixin({ 'vowels': vowels }, { 'chain': false });
   * _('fred').vowels();
   * // => ['e']
   */
  function mixin(object, source, options) {
    var props = keys(source),
        methodNames = baseFunctions(source, props);

    if (options == null &&
        !(isObject(source) && (methodNames.length || !props.length))) {
      options = source;
      source = object;
      object = this;
      methodNames = baseFunctions(source, keys(source));
    }
    var chain = (isObject(options) && 'chain' in options) ? options.chain : true,
        isFunc = isFunction(object);

    baseEach(methodNames, function(methodName) {
      var func = source[methodName];
      object[methodName] = func;
      if (isFunc) {
        object.prototype[methodName] = function() {
          var chainAll = this.__chain__;
          if (chain || chainAll) {
            var result = object(this.__wrapped__),
                actions = result.__actions__ = copyArray(this.__actions__);

            actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
            result.__chain__ = chainAll;
            return result;
          }
          return func.apply(object, arrayPush([this.value()], arguments));
        };
      }
    });

    return object;
  }

  /**
   * Reverts the `_` variable to its previous value and returns a reference to
   * the `lodash` function.
   *
   * @static
   * @memberOf _
   * @category Util
   * @returns {Function} Returns the `lodash` function.
   * @example
   *
   * var lodash = _.noConflict();
   */
  function noConflict() {
    if (root._ === this) {
      root._ = oldDash;
    }
    return this;
  }

  /**
   * A no-operation function that returns `undefined` regardless of the
   * arguments it receives.
   *
   * @static
   * @memberOf _
   * @category Util
   * @example
   *
   * var object = { 'user': 'fred' };
   *
   * _.noop(object) === undefined;
   * // => true
   */
  function noop() {
    // No operation performed.
  }

  /**
   * Generates a unique ID. If `prefix` is given the ID is appended to it.
   *
   * @static
   * @memberOf _
   * @category Util
   * @param {string} [prefix=''] The value to prefix the ID with.
   * @returns {string} Returns the unique ID.
   * @example
   *
   * _.uniqueId('contact_');
   * // => 'contact_104'
   *
   * _.uniqueId();
   * // => '105'
   */
  function uniqueId(prefix) {
    var id = ++idCounter;
    return toString(prefix) + id;
  }

  /*------------------------------------------------------------------------*/

  /**
   * Computes the maximum value of `array`. If `array` is empty or falsey
   * `undefined` is returned.
   *
   * @static
   * @memberOf _
   * @category Math
   * @param {Array} array The array to iterate over.
   * @returns {*} Returns the maximum value.
   * @example
   *
   * _.max([4, 2, 8, 6]);
   * // => 8
   *
   * _.max([]);
   * // => undefined
   */
  function max(array) {
    return (array && array.length)
      ? baseExtremum(array, identity, gt)
      : undefined;
  }

  /**
   * Computes the minimum value of `array`. If `array` is empty or falsey
   * `undefined` is returned.
   *
   * @static
   * @memberOf _
   * @category Math
   * @param {Array} array The array to iterate over.
   * @returns {*} Returns the minimum value.
   * @example
   *
   * _.min([4, 2, 8, 6]);
   * // => 2
   *
   * _.min([]);
   * // => undefined
   */
  function min(array) {
    return (array && array.length)
      ? baseExtremum(array, identity, lt)
      : undefined;
  }

  /*------------------------------------------------------------------------*/

  LodashWrapper.prototype = baseCreate(lodash.prototype);
  LodashWrapper.prototype.constructor = LodashWrapper;

  // Add functions that return wrapped values when chaining.
  lodash.assignIn = assignIn;
  lodash.before = before;
  lodash.bind = bind;
  lodash.chain = chain;
  lodash.compact = compact;
  lodash.concat = concat;
  lodash.create = create;
  lodash.defaults = defaults;
  lodash.defer = defer;
  lodash.delay = delay;
  lodash.filter = filter;
  lodash.flatten = flatten;
  lodash.flattenDeep = flattenDeep;
  lodash.iteratee = iteratee;
  lodash.keys = keys;
  lodash.map = map;
  lodash.matches = matches;
  lodash.mixin = mixin;
  lodash.negate = negate;
  lodash.once = once;
  lodash.pick = pick;
  lodash.slice = slice;
  lodash.sortBy = sortBy;
  lodash.tap = tap;
  lodash.thru = thru;
  lodash.toArray = toArray;
  lodash.values = values;

  // Add aliases.
  lodash.extend = assignIn;

  // Add functions to `lodash.prototype`.
  mixin(lodash, lodash);

  /*------------------------------------------------------------------------*/

  // Add functions that return unwrapped values when chaining.
  lodash.clone = clone;
  lodash.escape = escape;
  lodash.every = every;
  lodash.find = find;
  lodash.forEach = forEach;
  lodash.has = has;
  lodash.head = head;
  lodash.identity = identity;
  lodash.indexOf = indexOf;
  lodash.isArguments = isArguments;
  lodash.isArray = isArray;
  lodash.isBoolean = isBoolean;
  lodash.isDate = isDate;
  lodash.isEmpty = isEmpty;
  lodash.isEqual = isEqual;
  lodash.isFinite = isFinite;
  lodash.isFunction = isFunction;
  lodash.isNaN = isNaN;
  lodash.isNull = isNull;
  lodash.isNumber = isNumber;
  lodash.isObject = isObject;
  lodash.isRegExp = isRegExp;
  lodash.isString = isString;
  lodash.isUndefined = isUndefined;
  lodash.last = last;
  lodash.max = max;
  lodash.min = min;
  lodash.noConflict = noConflict;
  lodash.noop = noop;
  lodash.reduce = reduce;
  lodash.result = result;
  lodash.size = size;
  lodash.some = some;
  lodash.uniqueId = uniqueId;

  // Add aliases.
  lodash.each = forEach;
  lodash.first = head;

  mixin(lodash, (function() {
    var source = {};
    baseForOwn(lodash, function(func, methodName) {
      if (!hasOwnProperty.call(lodash.prototype, methodName)) {
        source[methodName] = func;
      }
    });
    return source;
  }()), { 'chain': false });

  /*------------------------------------------------------------------------*/

  /**
   * The semantic version number.
   *
   * @static
   * @memberOf _
   * @type {string}
   */
  lodash.VERSION = VERSION;

  // Add `Array` and `String` methods to `lodash.prototype`.
  baseEach(['pop', 'join', 'replace', 'reverse', 'split', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
    var func = (/^(?:replace|split)$/.test(methodName) ? String.prototype : arrayProto)[methodName],
        chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
        retUnwrapped = /^(?:pop|join|replace|shift)$/.test(methodName);

    lodash.prototype[methodName] = function() {
      var args = arguments;
      if (retUnwrapped && !this.__chain__) {
        return func.apply(this.value(), args);
      }
      return this[chainName](function(value) {
        return func.apply(value, args);
      });
    };
  });

  // Add chaining functions to the `lodash` wrapper.
  lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

  /*--------------------------------------------------------------------------*/

  // Expose lodash on the free variable `window` or `self` when available. This
  // prevents errors in cases where lodash is loaded by a script tag in the presence
  // of an AMD loader. See http://requirejs.org/docs/errors.html#mismatch for more details.
  (freeWindow || freeSelf || {})._ = lodash;

  // Some AMD build optimizers like r.js check for condition patterns like the following:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return lodash;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds an `exports` object.
  else if (freeExports && freeModule) {
    // Export for Node.js.
    if (moduleExports) {
      (freeModule.exports = lodash)._ = lodash;
    }
    // Export for CommonJS support.
    freeExports._ = lodash;
  }
  else {
    // Export to the global object.
    root._ = lodash;
  }
}.call(this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],80:[function(require,module,exports){
'use strict';

var asap = require('asap/raw');

function noop() {}

// States:
//
// 0 - pending
// 1 - fulfilled with _value
// 2 - rejected with _value
// 3 - adopted the state of another promise, _value
//
// once the state is no longer pending (0) it is immutable

// All `_` prefixed properties will be reduced to `_{random number}`
// at build time to obfuscate them and discourage their use.
// We don't use symbols or Object.defineProperty to fully hide them
// because the performance isn't good enough.


// to avoid using try/catch inside critical functions, we
// extract them to here.
var LAST_ERROR = null;
var IS_ERROR = {};
function getThen(obj) {
  try {
    return obj.then;
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

function tryCallOne(fn, a) {
  try {
    return fn(a);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}
function tryCallTwo(fn, a, b) {
  try {
    fn(a, b);
  } catch (ex) {
    LAST_ERROR = ex;
    return IS_ERROR;
  }
}

module.exports = Promise;

function Promise(fn) {
  if (typeof this !== 'object') {
    throw new TypeError('Promises must be constructed via new');
  }
  if (typeof fn !== 'function') {
    throw new TypeError('not a function');
  }
  this._45 = 0;
  this._81 = 0;
  this._65 = null;
  this._54 = null;
  if (fn === noop) return;
  doResolve(fn, this);
}
Promise._10 = null;
Promise._97 = null;
Promise._61 = noop;

Promise.prototype.then = function(onFulfilled, onRejected) {
  if (this.constructor !== Promise) {
    return safeThen(this, onFulfilled, onRejected);
  }
  var res = new Promise(noop);
  handle(this, new Handler(onFulfilled, onRejected, res));
  return res;
};

function safeThen(self, onFulfilled, onRejected) {
  return new self.constructor(function (resolve, reject) {
    var res = new Promise(noop);
    res.then(resolve, reject);
    handle(self, new Handler(onFulfilled, onRejected, res));
  });
};
function handle(self, deferred) {
  while (self._81 === 3) {
    self = self._65;
  }
  if (Promise._10) {
    Promise._10(self);
  }
  if (self._81 === 0) {
    if (self._45 === 0) {
      self._45 = 1;
      self._54 = deferred;
      return;
    }
    if (self._45 === 1) {
      self._45 = 2;
      self._54 = [self._54, deferred];
      return;
    }
    self._54.push(deferred);
    return;
  }
  handleResolved(self, deferred);
}

function handleResolved(self, deferred) {
  asap(function() {
    var cb = self._81 === 1 ? deferred.onFulfilled : deferred.onRejected;
    if (cb === null) {
      if (self._81 === 1) {
        resolve(deferred.promise, self._65);
      } else {
        reject(deferred.promise, self._65);
      }
      return;
    }
    var ret = tryCallOne(cb, self._65);
    if (ret === IS_ERROR) {
      reject(deferred.promise, LAST_ERROR);
    } else {
      resolve(deferred.promise, ret);
    }
  });
}
function resolve(self, newValue) {
  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
  if (newValue === self) {
    return reject(
      self,
      new TypeError('A promise cannot be resolved with itself.')
    );
  }
  if (
    newValue &&
    (typeof newValue === 'object' || typeof newValue === 'function')
  ) {
    var then = getThen(newValue);
    if (then === IS_ERROR) {
      return reject(self, LAST_ERROR);
    }
    if (
      then === self.then &&
      newValue instanceof Promise
    ) {
      self._81 = 3;
      self._65 = newValue;
      finale(self);
      return;
    } else if (typeof then === 'function') {
      doResolve(then.bind(newValue), self);
      return;
    }
  }
  self._81 = 1;
  self._65 = newValue;
  finale(self);
}

function reject(self, newValue) {
  self._81 = 2;
  self._65 = newValue;
  if (Promise._97) {
    Promise._97(self, newValue);
  }
  finale(self);
}
function finale(self) {
  if (self._45 === 1) {
    handle(self, self._54);
    self._54 = null;
  }
  if (self._45 === 2) {
    for (var i = 0; i < self._54.length; i++) {
      handle(self, self._54[i]);
    }
    self._54 = null;
  }
}

function Handler(onFulfilled, onRejected, promise){
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
  this.onRejected = typeof onRejected === 'function' ? onRejected : null;
  this.promise = promise;
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, promise) {
  var done = false;
  var res = tryCallTwo(fn, function (value) {
    if (done) return;
    done = true;
    resolve(promise, value);
  }, function (reason) {
    if (done) return;
    done = true;
    reject(promise, reason);
  })
  if (!done && res === IS_ERROR) {
    done = true;
    reject(promise, LAST_ERROR);
  }
}

},{"asap/raw":82}],81:[function(require,module,exports){
'use strict';

//This file contains the ES6 extensions to the core Promises/A+ API

var Promise = require('./core.js');

module.exports = Promise;

/* Static Functions */

var TRUE = valuePromise(true);
var FALSE = valuePromise(false);
var NULL = valuePromise(null);
var UNDEFINED = valuePromise(undefined);
var ZERO = valuePromise(0);
var EMPTYSTRING = valuePromise('');

function valuePromise(value) {
  var p = new Promise(Promise._61);
  p._81 = 1;
  p._65 = value;
  return p;
}
Promise.resolve = function (value) {
  if (value instanceof Promise) return value;

  if (value === null) return NULL;
  if (value === undefined) return UNDEFINED;
  if (value === true) return TRUE;
  if (value === false) return FALSE;
  if (value === 0) return ZERO;
  if (value === '') return EMPTYSTRING;

  if (typeof value === 'object' || typeof value === 'function') {
    try {
      var then = value.then;
      if (typeof then === 'function') {
        return new Promise(then.bind(value));
      }
    } catch (ex) {
      return new Promise(function (resolve, reject) {
        reject(ex);
      });
    }
  }
  return valuePromise(value);
};

Promise.all = function (arr) {
  var args = Array.prototype.slice.call(arr);

  return new Promise(function (resolve, reject) {
    if (args.length === 0) return resolve([]);
    var remaining = args.length;
    function res(i, val) {
      if (val && (typeof val === 'object' || typeof val === 'function')) {
        if (val instanceof Promise && val.then === Promise.prototype.then) {
          while (val._81 === 3) {
            val = val._65;
          }
          if (val._81 === 1) return res(i, val._65);
          if (val._81 === 2) reject(val._65);
          val.then(function (val) {
            res(i, val);
          }, reject);
          return;
        } else {
          var then = val.then;
          if (typeof then === 'function') {
            var p = new Promise(then.bind(val));
            p.then(function (val) {
              res(i, val);
            }, reject);
            return;
          }
        }
      }
      args[i] = val;
      if (--remaining === 0) {
        resolve(args);
      }
    }
    for (var i = 0; i < args.length; i++) {
      res(i, args[i]);
    }
  });
};

Promise.reject = function (value) {
  return new Promise(function (resolve, reject) {
    reject(value);
  });
};

Promise.race = function (values) {
  return new Promise(function (resolve, reject) {
    values.forEach(function(value){
      Promise.resolve(value).then(resolve, reject);
    });
  });
};

/* Prototype Methods */

Promise.prototype['catch'] = function (onRejected) {
  return this.then(null, onRejected);
};

},{"./core.js":80}],82:[function(require,module,exports){
(function (global){
"use strict";

// Use the fastest means possible to execute a task in its own turn, with
// priority over other events including IO, animation, reflow, and redraw
// events in browsers.
//
// An exception thrown by a task will permanently interrupt the processing of
// subsequent tasks. The higher level `asap` function ensures that if an
// exception is thrown by a task, that the task queue will continue flushing as
// soon as possible, but if you use `rawAsap` directly, you are responsible to
// either ensure that no exceptions are thrown from your task, or to manually
// call `rawAsap.requestFlush` if an exception is thrown.
module.exports = rawAsap;
function rawAsap(task) {
    if (!queue.length) {
        requestFlush();
        flushing = true;
    }
    // Equivalent to push, but avoids a function call.
    queue[queue.length] = task;
}

var queue = [];
// Once a flush has been requested, no further calls to `requestFlush` are
// necessary until the next `flush` completes.
var flushing = false;
// `requestFlush` is an implementation-specific method that attempts to kick
// off a `flush` event as quickly as possible. `flush` will attempt to exhaust
// the event queue before yielding to the browser's own event loop.
var requestFlush;
// The position of the next task to execute in the task queue. This is
// preserved between calls to `flush` so that it can be resumed if
// a task throws an exception.
var index = 0;
// If a task schedules additional tasks recursively, the task queue can grow
// unbounded. To prevent memory exhaustion, the task queue will periodically
// truncate already-completed tasks.
var capacity = 1024;

// The flush function processes all tasks that have been scheduled with
// `rawAsap` unless and until one of those tasks throws an exception.
// If a task throws an exception, `flush` ensures that its state will remain
// consistent and will resume where it left off when called again.
// However, `flush` does not make any arrangements to be called again if an
// exception is thrown.
function flush() {
    while (index < queue.length) {
        var currentIndex = index;
        // Advance the index before calling the task. This ensures that we will
        // begin flushing on the next task the task throws an error.
        index = index + 1;
        queue[currentIndex].call();
        // Prevent leaking memory for long chains of recursive calls to `asap`.
        // If we call `asap` within tasks scheduled by `asap`, the queue will
        // grow, but to avoid an O(n) walk for every task we execute, we don't
        // shift tasks off the queue after they have been executed.
        // Instead, we periodically shift 1024 tasks off the queue.
        if (index > capacity) {
            // Manually shift all values starting at the index back to the
            // beginning of the queue.
            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {
                queue[scan] = queue[scan + index];
            }
            queue.length -= index;
            index = 0;
        }
    }
    queue.length = 0;
    index = 0;
    flushing = false;
}

// `requestFlush` is implemented using a strategy based on data collected from
// every available SauceLabs Selenium web driver worker at time of writing.
// https://docs.google.com/spreadsheets/d/1mG-5UYGup5qxGdEMWkhP6BWCz053NUb2E1QoUTU16uA/edit#gid=783724593

// Safari 6 and 6.1 for desktop, iPad, and iPhone are the only browsers that
// have WebKitMutationObserver but not un-prefixed MutationObserver.
// Must use `global` instead of `window` to work in both frames and web
// workers. `global` is a provision of Browserify, Mr, Mrs, or Mop.
var BrowserMutationObserver = global.MutationObserver || global.WebKitMutationObserver;

// MutationObservers are desirable because they have high priority and work
// reliably everywhere they are implemented.
// They are implemented in all modern browsers.
//
// - Android 4-4.3
// - Chrome 26-34
// - Firefox 14-29
// - Internet Explorer 11
// - iPad Safari 6-7.1
// - iPhone Safari 7-7.1
// - Safari 6-7
if (typeof BrowserMutationObserver === "function") {
    requestFlush = makeRequestCallFromMutationObserver(flush);

// MessageChannels are desirable because they give direct access to the HTML
// task queue, are implemented in Internet Explorer 10, Safari 5.0-1, and Opera
// 11-12, and in web workers in many engines.
// Although message channels yield to any queued rendering and IO tasks, they
// would be better than imposing the 4ms delay of timers.
// However, they do not work reliably in Internet Explorer or Safari.

// Internet Explorer 10 is the only browser that has setImmediate but does
// not have MutationObservers.
// Although setImmediate yields to the browser's renderer, it would be
// preferrable to falling back to setTimeout since it does not have
// the minimum 4ms penalty.
// Unfortunately there appears to be a bug in Internet Explorer 10 Mobile (and
// Desktop to a lesser extent) that renders both setImmediate and
// MessageChannel useless for the purposes of ASAP.
// https://github.com/kriskowal/q/issues/396

// Timers are implemented universally.
// We fall back to timers in workers in most engines, and in foreground
// contexts in the following browsers.
// However, note that even this simple case requires nuances to operate in a
// broad spectrum of browsers.
//
// - Firefox 3-13
// - Internet Explorer 6-9
// - iPad Safari 4.3
// - Lynx 2.8.7
} else {
    requestFlush = makeRequestCallFromTimer(flush);
}

// `requestFlush` requests that the high priority event queue be flushed as
// soon as possible.
// This is useful to prevent an error thrown in a task from stalling the event
// queue if the exception handled by Node.js’s
// `process.on("uncaughtException")` or by a domain.
rawAsap.requestFlush = requestFlush;

// To request a high priority event, we induce a mutation observer by toggling
// the text of a text node between "1" and "-1".
function makeRequestCallFromMutationObserver(callback) {
    var toggle = 1;
    var observer = new BrowserMutationObserver(callback);
    var node = document.createTextNode("");
    observer.observe(node, {characterData: true});
    return function requestCall() {
        toggle = -toggle;
        node.data = toggle;
    };
}

// The message channel technique was discovered by Malte Ubl and was the
// original foundation for this library.
// http://www.nonblocking.io/2011/06/windownexttick.html

// Safari 6.0.5 (at least) intermittently fails to create message ports on a
// page's first load. Thankfully, this version of Safari supports
// MutationObservers, so we don't need to fall back in that case.

// function makeRequestCallFromMessageChannel(callback) {
//     var channel = new MessageChannel();
//     channel.port1.onmessage = callback;
//     return function requestCall() {
//         channel.port2.postMessage(0);
//     };
// }

// For reasons explained above, we are also unable to use `setImmediate`
// under any circumstances.
// Even if we were, there is another bug in Internet Explorer 10.
// It is not sufficient to assign `setImmediate` to `requestFlush` because
// `setImmediate` must be called *by name* and therefore must be wrapped in a
// closure.
// Never forget.

// function makeRequestCallFromSetImmediate(callback) {
//     return function requestCall() {
//         setImmediate(callback);
//     };
// }

// Safari 6.0 has a problem where timers will get lost while the user is
// scrolling. This problem does not impact ASAP because Safari 6.0 supports
// mutation observers, so that implementation is used instead.
// However, if we ever elect to use timers in Safari, the prevalent work-around
// is to add a scroll event listener that calls for a flush.

// `setTimeout` does not call the passed callback if the delay is less than
// approximately 7 in web workers in Firefox 8 through 18, and sometimes not
// even then.

function makeRequestCallFromTimer(callback) {
    return function requestCall() {
        // We dispatch a timeout with a specified delay of 0 for engines that
        // can reliably accommodate that request. This will usually be snapped
        // to a 4 milisecond delay, but once we're flushing, there's no delay
        // between events.
        var timeoutHandle = setTimeout(handleTimer, 0);
        // However, since this timer gets frequently dropped in Firefox
        // workers, we enlist an interval handle that will try to fire
        // an event 20 times per second until it succeeds.
        var intervalHandle = setInterval(handleTimer, 50);

        function handleTimer() {
            // Whichever timer succeeds will cancel both timers and
            // execute the callback.
            clearTimeout(timeoutHandle);
            clearInterval(intervalHandle);
            callback();
        }
    };
}

// This is for `asap.js` only.
// Its name will be periodically randomized to break any code that depends on
// its existence.
rawAsap.makeRequestCallFromTimer = makeRequestCallFromTimer;

// ASAP was originally a nextTick shim included in Q. This was factored out
// into this ASAP package. It was later adapted to RSVP which made further
// amendments. These decisions, particularly to marginalize MessageChannel and
// to capture the MutationObserver implementation in a closure, were integrated
// back into ASAP proper.
// https://github.com/tildeio/rsvp.js/blob/cddf7232546a9cf858524b75cde6f9edf72620a7/lib/rsvp/asap.js

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],83:[function(require,module,exports){
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.

'use strict';

/*<replacement>*/
var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) keys.push(key);
  return keys;
}
/*</replacement>*/


module.exports = Duplex;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/



/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');

util.inherits(Duplex, Readable);

var keys = objectKeys(Writable.prototype);
for (var v = 0; v < keys.length; v++) {
  var method = keys[v];
  if (!Duplex.prototype[method])
    Duplex.prototype[method] = Writable.prototype[method];
}

function Duplex(options) {
  if (!(this instanceof Duplex))
    return new Duplex(options);

  Readable.call(this, options);
  Writable.call(this, options);

  if (options && options.readable === false)
    this.readable = false;

  if (options && options.writable === false)
    this.writable = false;

  this.allowHalfOpen = true;
  if (options && options.allowHalfOpen === false)
    this.allowHalfOpen = false;

  this.once('end', onend);
}

// the no-half-open enforcer
function onend() {
  // if we allow half-open state, or if the writable side ended,
  // then we're ok.
  if (this.allowHalfOpen || this._writableState.ended)
    return;

  // no more data can be written.
  // But allow more writes to happen in this tick.
  processNextTick(onEndNT, this);
}

function onEndNT(self) {
  self.end();
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

},{"./_stream_readable":85,"./_stream_writable":87,"core-util-is":38,"inherits":78,"process-nextick-args":88}],84:[function(require,module,exports){
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.

'use strict';

module.exports = PassThrough;

var Transform = require('./_stream_transform');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(PassThrough, Transform);

function PassThrough(options) {
  if (!(this instanceof PassThrough))
    return new PassThrough(options);

  Transform.call(this, options);
}

PassThrough.prototype._transform = function(chunk, encoding, cb) {
  cb(null, chunk);
};

},{"./_stream_transform":86,"core-util-is":38,"inherits":78}],85:[function(require,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events');

/*<replacement>*/
var EElistenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/



/*<replacement>*/
var Stream;
(function (){try{
  Stream = require('st' + 'ream');
}catch(_){}finally{
  if (!Stream)
    Stream = require('events').EventEmitter;
}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/



/*<replacement>*/
var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

var Duplex;
function ReadableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

var Duplex;
function Readable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function')
    this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function() {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}


// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = computeNewHighWaterMark(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else {
      return state.length;
    }
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      processNextTick(emitReadable_, stream);
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    processNextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      if (state.pipesCount === 1 &&
          state.pipes[0] === dest &&
          src.listenerCount('data') === 1 &&
          !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];


  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined))
      return;
    else if (!state.objectMode && (!chunk || !chunk.length))
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }; }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};


// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else if (list.length === 1)
      ret = list[0];
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"./_stream_duplex":83,"_process":97,"buffer":36,"core-util-is":38,"events":40,"inherits":78,"isarray":44,"process-nextick-args":88,"string_decoder/":124,"util":34}],86:[function(require,module,exports){
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.

'use strict';

module.exports = Transform;

var Duplex = require('./_stream_duplex');

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/

util.inherits(Transform, Duplex);


function TransformState(stream) {
  this.afterTransform = function(er, data) {
    return afterTransform(stream, er, data);
  };

  this.needTransform = false;
  this.transforming = false;
  this.writecb = null;
  this.writechunk = null;
}

function afterTransform(stream, er, data) {
  var ts = stream._transformState;
  ts.transforming = false;

  var cb = ts.writecb;

  if (!cb)
    return stream.emit('error', new Error('no writecb in Transform class'));

  ts.writechunk = null;
  ts.writecb = null;

  if (data !== null && data !== undefined)
    stream.push(data);

  if (cb)
    cb(er);

  var rs = stream._readableState;
  rs.reading = false;
  if (rs.needReadable || rs.length < rs.highWaterMark) {
    stream._read(rs.highWaterMark);
  }
}


function Transform(options) {
  if (!(this instanceof Transform))
    return new Transform(options);

  Duplex.call(this, options);

  this._transformState = new TransformState(this);

  // when the writable side finishes, then flush out anything remaining.
  var stream = this;

  // start out asking for a readable event once data is transformed.
  this._readableState.needReadable = true;

  // we have implemented the _read method, and done the other things
  // that Readable wants before the first _read call, so unset the
  // sync guard flag.
  this._readableState.sync = false;

  if (options) {
    if (typeof options.transform === 'function')
      this._transform = options.transform;

    if (typeof options.flush === 'function')
      this._flush = options.flush;
  }

  this.once('prefinish', function() {
    if (typeof this._flush === 'function')
      this._flush(function(er) {
        done(stream, er);
      });
    else
      done(stream);
  });
}

Transform.prototype.push = function(chunk, encoding) {
  this._transformState.needTransform = false;
  return Duplex.prototype.push.call(this, chunk, encoding);
};

// This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
  throw new Error('not implemented');
};

Transform.prototype._write = function(chunk, encoding, cb) {
  var ts = this._transformState;
  ts.writecb = cb;
  ts.writechunk = chunk;
  ts.writeencoding = encoding;
  if (!ts.transforming) {
    var rs = this._readableState;
    if (ts.needTransform ||
        rs.needReadable ||
        rs.length < rs.highWaterMark)
      this._read(rs.highWaterMark);
  }
};

// Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
  var ts = this._transformState;

  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
    ts.transforming = true;
    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
  } else {
    // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
  }
};


function done(stream, er) {
  if (er)
    return stream.emit('error', er);

  // if there's nothing in the write buffer, then that means
  // that nothing more will ever be provided
  var ws = stream._writableState;
  var ts = stream._transformState;

  if (ws.length)
    throw new Error('calling transform done when ws.length != 0');

  if (ts.transforming)
    throw new Error('calling transform done when still transforming');

  return stream.push(null);
}

},{"./_stream_duplex":83,"core-util-is":38,"inherits":78}],87:[function(require,module,exports){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/


/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/



/*<replacement>*/
var Stream;
(function (){try{
  Stream = require('st' + 'ream');
}catch(_){}finally{
  if (!Stream)
    Stream = require('events').EventEmitter;
}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

var Duplex;
function WritableState(options, stream) {
  Duplex = Duplex || require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function (){try {
Object.defineProperty(WritableState.prototype, 'buffer', {
  get: internalUtil.deprecate(function() {
    return this.getBuffer();
  }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' +
     'instead.')
});
}catch(_){}}());


var Duplex;
function Writable(options) {
  Duplex = Duplex || require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function')
      this._write = options.write;

    if (typeof options.writev === 'function')
      this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;

  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = nop;

  if (state.ended)
    writeAfterEnd(this, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.bufferedRequest)
      clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string')
    encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64',
'ucs2', 'ucs-2','utf16le', 'utf-16le', 'raw']
.indexOf((encoding + '').toLowerCase()) > -1))
    throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync)
    processNextTick(cb, er);
  else
    cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      processNextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var buffer = [];
    var cbs = [];
    while (entry) {
      cbs.push(entry.callback);
      buffer.push(entry);
      entry = entry.next;
    }

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    state.lastBufferedRequest = null;
    doWrite(stream, state, true, state.length, buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null)
      state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined)
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(state) {
  return (state.ending &&
          state.length === 0 &&
          state.bufferedRequest === null &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      processNextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

},{"./_stream_duplex":83,"buffer":36,"core-util-is":38,"events":40,"inherits":78,"process-nextick-args":88,"util-deprecate":126}],88:[function(require,module,exports){
(function (process){
'use strict';

if (!process.version ||
    process.version.indexOf('v0.') === 0 ||
    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {
  module.exports = nextTick;
} else {
  module.exports = process.nextTick;
}

function nextTick(fn) {
  var args = new Array(arguments.length - 1);
  var i = 0;
  while (i < args.length) {
    args[i++] = arguments[i];
  }
  process.nextTick(function afterTick() {
    fn.apply(null, args);
  });
}

}).call(this,require('_process'))
},{"_process":97}],89:[function(require,module,exports){
var Stream = (function (){
  try {
    return require('st' + 'ream'); // hack to fix a circular dependency issue when used with browserify
  } catch(_){}
}());
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = Stream || exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');

},{"./lib/_stream_duplex.js":83,"./lib/_stream_passthrough.js":84,"./lib/_stream_readable.js":85,"./lib/_stream_transform.js":86,"./lib/_stream_writable.js":87}],90:[function(require,module,exports){
module.exports = require("./lib/_stream_transform.js")

},{"./lib/_stream_transform.js":86}],91:[function(require,module,exports){
(function (process){
var Transform = require('readable-stream/transform')
  , inherits  = require('util').inherits
  , xtend     = require('xtend')

function DestroyableTransform(opts) {
  Transform.call(this, opts)
  this._destroyed = false
}

inherits(DestroyableTransform, Transform)

DestroyableTransform.prototype.destroy = function(err) {
  if (this._destroyed) return
  this._destroyed = true
  
  var self = this
  process.nextTick(function() {
    if (err)
      self.emit('error', err)
    self.emit('close')
  })
}

// a noop _transform function
function noop (chunk, enc, callback) {
  callback(null, chunk)
}


// create a new export function, used by both the main export and
// the .ctor export, contains common logic for dealing with arguments
function through2 (construct) {
  return function (options, transform, flush) {
    if (typeof options == 'function') {
      flush     = transform
      transform = options
      options   = {}
    }

    if (typeof transform != 'function')
      transform = noop

    if (typeof flush != 'function')
      flush = null

    return construct(options, transform, flush)
  }
}


// main export, just make me a transform stream!
module.exports = through2(function (options, transform, flush) {
  var t2 = new DestroyableTransform(options)

  t2._transform = transform

  if (flush)
    t2._flush = flush

  return t2
})


// make me a reusable prototype that I can `new`, or implicitly `new`
// with a constructor call
module.exports.ctor = through2(function (options, transform, flush) {
  function Through2 (override) {
    if (!(this instanceof Through2))
      return new Through2(override)

    this.options = xtend(options, override)

    DestroyableTransform.call(this, this.options)
  }

  inherits(Through2, DestroyableTransform)

  Through2.prototype._transform = transform

  if (flush)
    Through2.prototype._flush = flush

  return Through2
})


module.exports.obj = through2(function (options, transform, flush) {
  var t2 = new DestroyableTransform(xtend({ objectMode: true, highWaterMark: 16 }, options))

  t2._transform = transform

  if (flush)
    t2._flush = flush

  return t2
})

}).call(this,require('_process'))
},{"_process":97,"readable-stream/transform":90,"util":129,"xtend":206}],92:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var xml2js;

  xml2js = require('../lib/xml2js');

  exports.stripBOM = function(str) {
    if (str[0] === '\uFEFF') {
      return str.substring(1);
    } else {
      return str;
    }
  };

}).call(this);

},{"../lib/xml2js":94}],93:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var prefixMatch;

  prefixMatch = new RegExp(/(?!xmlns)^.*:/);

  exports.normalize = function(str) {
    return str.toLowerCase();
  };

  exports.firstCharLowerCase = function(str) {
    return str.charAt(0).toLowerCase() + str.slice(1);
  };

  exports.stripPrefix = function(str) {
    return str.replace(prefixMatch, '');
  };

  exports.parseNumbers = function(str) {
    if (!isNaN(str)) {
      str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
    }
    return str;
  };

  exports.parseBooleans = function(str) {
    if (/^(?:true|false)$/i.test(str)) {
      str = str.toLowerCase() === 'true';
    }
    return str;
  };

}).call(this);

},{}],94:[function(require,module,exports){
// Generated by CoffeeScript 1.10.0
(function() {
  "use strict";
  var bom, builder, escapeCDATA, events, isEmpty, processName, processors, requiresCDATA, sax, setImmediate, wrapCDATA,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  sax = require('sax');

  events = require('events');

  builder = require('xmlbuilder');

  bom = require('./bom');

  processors = require('./processors');

  setImmediate = require('timers').setImmediate;

  isEmpty = function(thing) {
    return typeof thing === "object" && (thing != null) && Object.keys(thing).length === 0;
  };

  processName = function(processors, processedName) {
    var i, len, process;
    for (i = 0, len = processors.length; i < len; i++) {
      process = processors[i];
      processedName = process(processedName);
    }
    return processedName;
  };

  requiresCDATA = function(entry) {
    return entry.indexOf('&') >= 0 || entry.indexOf('>') >= 0 || entry.indexOf('<') >= 0;
  };

  wrapCDATA = function(entry) {
    return "<![CDATA[" + (escapeCDATA(entry)) + "]]>";
  };

  escapeCDATA = function(entry) {
    return entry.replace(']]>', ']]]]><![CDATA[>');
  };

  exports.processors = processors;

  exports.defaults = {
    "0.1": {
      explicitCharkey: false,
      trim: true,
      normalize: true,
      normalizeTags: false,
      attrkey: "@",
      charkey: "#",
      explicitArray: false,
      ignoreAttrs: false,
      mergeAttrs: false,
      explicitRoot: false,
      validator: null,
      xmlns: false,
      explicitChildren: false,
      childkey: '@@',
      charsAsChildren: false,
      async: false,
      strict: true,
      attrNameProcessors: null,
      attrValueProcessors: null,
      tagNameProcessors: null,
      valueProcessors: null,
      emptyTag: ''
    },
    "0.2": {
      explicitCharkey: false,
      trim: false,
      normalize: false,
      normalizeTags: false,
      attrkey: "$",
      charkey: "_",
      explicitArray: true,
      ignoreAttrs: false,
      mergeAttrs: false,
      explicitRoot: true,
      validator: null,
      xmlns: false,
      explicitChildren: false,
      preserveChildrenOrder: false,
      childkey: '$$',
      charsAsChildren: false,
      async: false,
      strict: true,
      attrNameProcessors: null,
      attrValueProcessors: null,
      tagNameProcessors: null,
      valueProcessors: null,
      rootName: 'root',
      xmldec: {
        'version': '1.0',
        'encoding': 'UTF-8',
        'standalone': true
      },
      doctype: null,
      renderOpts: {
        'pretty': true,
        'indent': '  ',
        'newline': '\n'
      },
      headless: false,
      chunkSize: 10000,
      emptyTag: '',
      cdata: false
    }
  };

  exports.ValidationError = (function(superClass) {
    extend(ValidationError, superClass);

    function ValidationError(message) {
      this.message = message;
    }

    return ValidationError;

  })(Error);

  exports.Builder = (function() {
    function Builder(opts) {
      var key, ref, value;
      this.options = {};
      ref = exports.defaults["0.2"];
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        this.options[key] = value;
      }
      for (key in opts) {
        if (!hasProp.call(opts, key)) continue;
        value = opts[key];
        this.options[key] = value;
      }
    }

    Builder.prototype.buildObject = function(rootObj) {
      var attrkey, charkey, render, rootElement, rootName;
      attrkey = this.options.attrkey;
      charkey = this.options.charkey;
      if ((Object.keys(rootObj).length === 1) && (this.options.rootName === exports.defaults['0.2'].rootName)) {
        rootName = Object.keys(rootObj)[0];
        rootObj = rootObj[rootName];
      } else {
        rootName = this.options.rootName;
      }
      render = (function(_this) {
        return function(element, obj) {
          var attr, child, entry, index, key, value;
          if (typeof obj !== 'object') {
            if (_this.options.cdata && requiresCDATA(obj)) {
              element.raw(wrapCDATA(obj));
            } else {
              element.txt(obj);
            }
          } else {
            for (key in obj) {
              if (!hasProp.call(obj, key)) continue;
              child = obj[key];
              if (key === attrkey) {
                if (typeof child === "object") {
                  for (attr in child) {
                    value = child[attr];
                    element = element.att(attr, value);
                  }
                }
              } else if (key === charkey) {
                if (_this.options.cdata && requiresCDATA(child)) {
                  element = element.raw(wrapCDATA(child));
                } else {
                  element = element.txt(child);
                }
              } else if (Array.isArray(child)) {
                for (index in child) {
                  if (!hasProp.call(child, index)) continue;
                  entry = child[index];
                  if (typeof entry === 'string') {
                    if (_this.options.cdata && requiresCDATA(entry)) {
                      element = element.ele(key).raw(wrapCDATA(entry)).up();
                    } else {
                      element = element.ele(key, entry).up();
                    }
                  } else {
                    element = render(element.ele(key), entry).up();
                  }
                }
              } else if (typeof child === "object") {
                element = render(element.ele(key), child).up();
              } else {
                if (typeof child === 'string' && _this.options.cdata && requiresCDATA(child)) {
                  element = element.ele(key).raw(wrapCDATA(child)).up();
                } else {
                  if (child == null) {
                    child = '';
                  }
                  element = element.ele(key, child.toString()).up();
                }
              }
            }
          }
          return element;
        };
      })(this);
      rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
        headless: this.options.headless,
        allowSurrogateChars: this.options.allowSurrogateChars
      });
      return render(rootElement, rootObj).end(this.options.renderOpts);
    };

    return Builder;

  })();

  exports.Parser = (function(superClass) {
    extend(Parser, superClass);

    function Parser(opts) {
      this.parseString = bind(this.parseString, this);
      this.reset = bind(this.reset, this);
      this.assignOrPush = bind(this.assignOrPush, this);
      this.processAsync = bind(this.processAsync, this);
      var key, ref, value;
      if (!(this instanceof exports.Parser)) {
        return new exports.Parser(opts);
      }
      this.options = {};
      ref = exports.defaults["0.2"];
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        this.options[key] = value;
      }
      for (key in opts) {
        if (!hasProp.call(opts, key)) continue;
        value = opts[key];
        this.options[key] = value;
      }
      if (this.options.xmlns) {
        this.options.xmlnskey = this.options.attrkey + "ns";
      }
      if (this.options.normalizeTags) {
        if (!this.options.tagNameProcessors) {
          this.options.tagNameProcessors = [];
        }
        this.options.tagNameProcessors.unshift(processors.normalize);
      }
      this.reset();
    }

    Parser.prototype.processAsync = function() {
      var chunk, err, error1;
      try {
        if (this.remaining.length <= this.options.chunkSize) {
          chunk = this.remaining;
          this.remaining = '';
          this.saxParser = this.saxParser.write(chunk);
          return this.saxParser.close();
        } else {
          chunk = this.remaining.substr(0, this.options.chunkSize);
          this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
          this.saxParser = this.saxParser.write(chunk);
          return setImmediate(this.processAsync);
        }
      } catch (error1) {
        err = error1;
        if (!this.saxParser.errThrown) {
          this.saxParser.errThrown = true;
          return this.emit(err);
        }
      }
    };

    Parser.prototype.assignOrPush = function(obj, key, newValue) {
      if (!(key in obj)) {
        if (!this.options.explicitArray) {
          return obj[key] = newValue;
        } else {
          return obj[key] = [newValue];
        }
      } else {
        if (!(obj[key] instanceof Array)) {
          obj[key] = [obj[key]];
        }
        return obj[key].push(newValue);
      }
    };

    Parser.prototype.reset = function() {
      var attrkey, charkey, ontext, stack;
      this.removeAllListeners();
      this.saxParser = sax.parser(this.options.strict, {
        trim: false,
        normalize: false,
        xmlns: this.options.xmlns
      });
      this.saxParser.errThrown = false;
      this.saxParser.onerror = (function(_this) {
        return function(error) {
          _this.saxParser.resume();
          if (!_this.saxParser.errThrown) {
            _this.saxParser.errThrown = true;
            return _this.emit("error", error);
          }
        };
      })(this);
      this.saxParser.onend = (function(_this) {
        return function() {
          if (!_this.saxParser.ended) {
            _this.saxParser.ended = true;
            return _this.emit("end", _this.resultObject);
          }
        };
      })(this);
      this.saxParser.ended = false;
      this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
      this.resultObject = null;
      stack = [];
      attrkey = this.options.attrkey;
      charkey = this.options.charkey;
      this.saxParser.onopentag = (function(_this) {
        return function(node) {
          var key, newValue, obj, processedKey, ref;
          obj = {};
          obj[charkey] = "";
          if (!_this.options.ignoreAttrs) {
            ref = node.attributes;
            for (key in ref) {
              if (!hasProp.call(ref, key)) continue;
              if (!(attrkey in obj) && !_this.options.mergeAttrs) {
                obj[attrkey] = {};
              }
              newValue = _this.options.attrValueProcessors ? processName(_this.options.attrValueProcessors, node.attributes[key]) : node.attributes[key];
              processedKey = _this.options.attrNameProcessors ? processName(_this.options.attrNameProcessors, key) : key;
              if (_this.options.mergeAttrs) {
                _this.assignOrPush(obj, processedKey, newValue);
              } else {
                obj[attrkey][processedKey] = newValue;
              }
            }
          }
          obj["#name"] = _this.options.tagNameProcessors ? processName(_this.options.tagNameProcessors, node.name) : node.name;
          if (_this.options.xmlns) {
            obj[_this.options.xmlnskey] = {
              uri: node.uri,
              local: node.local
            };
          }
          return stack.push(obj);
        };
      })(this);
      this.saxParser.onclosetag = (function(_this) {
        return function() {
          var cdata, emptyStr, err, error1, key, node, nodeName, obj, objClone, old, s, xpath;
          obj = stack.pop();
          nodeName = obj["#name"];
          if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
            delete obj["#name"];
          }
          if (obj.cdata === true) {
            cdata = obj.cdata;
            delete obj.cdata;
          }
          s = stack[stack.length - 1];
          if (obj[charkey].match(/^\s*$/) && !cdata) {
            emptyStr = obj[charkey];
            delete obj[charkey];
          } else {
            if (_this.options.trim) {
              obj[charkey] = obj[charkey].trim();
            }
            if (_this.options.normalize) {
              obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
            }
            obj[charkey] = _this.options.valueProcessors ? processName(_this.options.valueProcessors, obj[charkey]) : obj[charkey];
            if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
              obj = obj[charkey];
            }
          }
          if (isEmpty(obj)) {
            obj = _this.options.emptyTag !== '' ? _this.options.emptyTag : emptyStr;
          }
          if (_this.options.validator != null) {
            xpath = "/" + ((function() {
              var i, len, results;
              results = [];
              for (i = 0, len = stack.length; i < len; i++) {
                node = stack[i];
                results.push(node["#name"]);
              }
              return results;
            })()).concat(nodeName).join("/");
            try {
              obj = _this.options.validator(xpath, s && s[nodeName], obj);
            } catch (error1) {
              err = error1;
              _this.emit("error", err);
            }
          }
          if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === 'object') {
            if (!_this.options.preserveChildrenOrder) {
              node = {};
              if (_this.options.attrkey in obj) {
                node[_this.options.attrkey] = obj[_this.options.attrkey];
                delete obj[_this.options.attrkey];
              }
              if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
                node[_this.options.charkey] = obj[_this.options.charkey];
                delete obj[_this.options.charkey];
              }
              if (Object.getOwnPropertyNames(obj).length > 0) {
                node[_this.options.childkey] = obj;
              }
              obj = node;
            } else if (s) {
              s[_this.options.childkey] = s[_this.options.childkey] || [];
              objClone = {};
              for (key in obj) {
                if (!hasProp.call(obj, key)) continue;
                objClone[key] = obj[key];
              }
              s[_this.options.childkey].push(objClone);
              delete obj["#name"];
              if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                obj = obj[charkey];
              }
            }
          }
          if (stack.length > 0) {
            return _this.assignOrPush(s, nodeName, obj);
          } else {
            if (_this.options.explicitRoot) {
              old = obj;
              obj = {};
              obj[nodeName] = old;
            }
            _this.resultObject = obj;
            _this.saxParser.ended = true;
            return _this.emit("end", _this.resultObject);
          }
        };
      })(this);
      ontext = (function(_this) {
        return function(text) {
          var charChild, s;
          s = stack[stack.length - 1];
          if (s) {
            s[charkey] += text;
            if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && text.replace(/\\n/g, '').trim() !== '') {
              s[_this.options.childkey] = s[_this.options.childkey] || [];
              charChild = {
                '#name': '__text__'
              };
              charChild[charkey] = text;
              s[_this.options.childkey].push(charChild);
            }
            return s;
          }
        };
      })(this);
      this.saxParser.ontext = ontext;
      return this.saxParser.oncdata = (function(_this) {
        return function(text) {
          var s;
          s = ontext(text);
          if (s) {
            return s.cdata = true;
          }
        };
      })(this);
    };

    Parser.prototype.parseString = function(str, cb) {
      var err, error1;
      if ((cb != null) && typeof cb === "function") {
        this.on("end", function(result) {
          this.reset();
          return cb(null, result);
        });
        this.on("error", function(err) {
          this.reset();
          return cb(err);
        });
      }
      try {
        str = str.toString();
        if (str.trim() === '') {
          this.emit("end", null);
          return true;
        }
        str = bom.stripBOM(str);
        if (this.options.async) {
          this.remaining = str;
          setImmediate(this.processAsync);
          return this.saxParser;
        }
        return this.saxParser.write(str).close();
      } catch (error1) {
        err = error1;
        if (!(this.saxParser.errThrown || this.saxParser.ended)) {
          this.emit('error', err);
          return this.saxParser.errThrown = true;
        } else if (this.saxParser.ended) {
          throw err;
        }
      }
    };

    return Parser;

  })(events.EventEmitter);

  exports.parseString = function(str, a, b) {
    var cb, options, parser;
    if (b != null) {
      if (typeof b === 'function') {
        cb = b;
      }
      if (typeof a === 'object') {
        options = a;
      }
    } else {
      if (typeof a === 'function') {
        cb = a;
      }
      options = {};
    }
    parser = new exports.Parser(options);
    return parser.parseString(str, cb);
  };

}).call(this);

},{"./bom":92,"./processors":93,"events":40,"sax":112,"timers":125,"xmlbuilder":146}],95:[function(require,module,exports){
module.exports={
  "author": {
    "name": "Shinichi Tomita",
    "email": "shinichi.tomita@gmail.com"
  },
  "name": "jsforce",
  "description": "Salesforce API Library for JavaScript",
  "keywords": [
    "salesforce",
    "salesforce.com",
    "sfdc",
    "force.com",
    "database.com"
  ],
  "homepage": "http://github.com/jsforce/jsforce",
  "version": "1.6.0",
  "repository": {
    "type": "git",
    "url": "git://github.com/jsforce/jsforce.git"
  },
  "license": "MIT",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/jsforce/jsforce/raw/master/LICENSE"
    }
  ],
  "main": "./index",
  "scripts": {
    "build": "gulp build",
    "build:test": "gulp build:test",
    "build:all": "gulp build:all",
    "doc": "jsdoc lib -d doc --recurse --lenient",
    "test": "npm run test:node",
    "test:all": "npm run test:node && npm run test:browser",
    "test:node": "./test/bin/run-test",
    "test:browser": "testem"
  },
  "directories": {
    "test": "test/"
  },
  "files": [
    "README.md",
    "bower.json",
    "LICENSE",
    "package.json",
    "bin",
    "build",
    "lib",
    "test",
    "core.js",
    "index.js"
  ],
  "engines": {
    "node": ">=0.12.0"
  },
  "bin": {
    "jsforce": "./bin/jsforce"
  },
  "dependencies": {
    "co-prompt": "^1.0.0",
    "coffee-script": "^1.10.0",
    "commander": "^2.9.0",
    "faye": "^1.1.2",
    "inherits": "^2.0.1",
    "lodash": "^4.5.1",
    "open": "0.0.5",
    "promise": "^7.1.1",
    "readable-stream": "^2.0.5",
    "request": "^2.69.0",
    "through2": "^2.0.1",
    "xml2js": "^0.4.16"
  },
  "devDependencies": {
    "archiver": "^0.21.0",
    "async": "^1.5.2",
    "babel": "^6.5.2",
    "babel-core": "^6.6.0",
    "babel-preset-es2015": "^6.5.0",
    "babel-register": "^6.5.2",
    "browserify": "^13.0.0",
    "dotenv": "^2.0.0",
    "envify": "^3.4.0",
    "espower-loader": "^1.0.0",
    "espowerify": "^1.0.0",
    "gulp": "github:gulpjs/gulp#4.0",
    "gulp-rename": "^1.2.2",
    "gulp-sourcemaps": "^1.6.0",
    "gulp-uglify": "^1.5.3",
    "intelli-espower-loader": "^1.0.1",
    "jsdoc": "^3.4.0",
    "mocha": "^2.4.5",
    "power-assert": "^1.2.0",
    "require-swapper": "^0.1.5",
    "testem": "^1.4.2",
    "through2": "^2.0.1",
    "vinyl-buffer": "^1.0.0",
    "vinyl-source-stream": "^1.1.0",
    "webdriverio": "^4.0.3"
  },
  "browser": {
    "./index": "./lib/browser/jsforce",
    "./core": "./lib/browser/core",
    "request": "./lib/browser/request.js"
  },
  "gitHead": "5f0dcce9da30d4cecebddc29ec2474330394f42a",
  "bugs": {
    "url": "https://github.com/jsforce/jsforce/issues"
  },
  "_id": "jsforce@1.6.0",
  "_shasum": "8b1cb661519a741101d577a9b0e6150825e83f23",
  "_from": "jsforce@1.6.0",
  "_npmVersion": "2.14.7",
  "_nodeVersion": "4.2.3",
  "_npmUser": {
    "name": "stomita",
    "email": "shinichi.tomita@gmail.com"
  },
  "maintainers": [
    {
      "name": "stomita",
      "email": "shinichi.tomita@gmail.com"
    }
  ],
  "dist": {
    "shasum": "8b1cb661519a741101d577a9b0e6150825e83f23",
    "tarball": "http://registry.npmjs.org/jsforce/-/jsforce-1.6.0.tgz"
  },
  "_npmOperationalInternal": {
    "host": "packages-13-west.internal.npmjs.com",
    "tmp": "tmp/jsforce-1.6.0.tgz_1456916131434_0.846881058299914"
  },
  "_resolved": "https://registry.npmjs.org/jsforce/-/jsforce-1.6.0.tgz"
}

},{}],96:[function(require,module,exports){
(function (process){
'use strict';
module.exports = nextTick;

function nextTick(fn) {
  var args = new Array(arguments.length - 1);
  var i = 0;
  while (i < args.length) {
    args[i++] = arguments[i];
  }
  process.nextTick(function afterTick() {
    fn.apply(null, args);
  });
}

}).call(this,require('_process'))
},{"_process":97}],97:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],98:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

// If obj.hasOwnProperty has been overridden, then calling
// obj.hasOwnProperty(prop) will break.
// See: https://github.com/joyent/node/issues/1707
function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

module.exports = function(qs, sep, eq, options) {
  sep = sep || '&';
  eq = eq || '=';
  var obj = {};

  if (typeof qs !== 'string' || qs.length === 0) {
    return obj;
  }

  var regexp = /\+/g;
  qs = qs.split(sep);

  var maxKeys = 1000;
  if (options && typeof options.maxKeys === 'number') {
    maxKeys = options.maxKeys;
  }

  var len = qs.length;
  // maxKeys <= 0 means that we should not limit keys count
  if (maxKeys > 0 && len > maxKeys) {
    len = maxKeys;
  }

  for (var i = 0; i < len; ++i) {
    var x = qs[i].replace(regexp, '%20'),
        idx = x.indexOf(eq),
        kstr, vstr, k, v;

    if (idx >= 0) {
      kstr = x.substr(0, idx);
      vstr = x.substr(idx + 1);
    } else {
      kstr = x;
      vstr = '';
    }

    k = decodeURIComponent(kstr);
    v = decodeURIComponent(vstr);

    if (!hasOwnProperty(obj, k)) {
      obj[k] = v;
    } else if (isArray(obj[k])) {
      obj[k].push(v);
    } else {
      obj[k] = [obj[k], v];
    }
  }

  return obj;
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

},{}],99:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

'use strict';

var stringifyPrimitive = function(v) {
  switch (typeof v) {
    case 'string':
      return v;

    case 'boolean':
      return v ? 'true' : 'false';

    case 'number':
      return isFinite(v) ? v : '';

    default:
      return '';
  }
};

module.exports = function(obj, sep, eq, name) {
  sep = sep || '&';
  eq = eq || '=';
  if (obj === null) {
    obj = undefined;
  }

  if (typeof obj === 'object') {
    return map(objectKeys(obj), function(k) {
      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
      if (isArray(obj[k])) {
        return map(obj[k], function(v) {
          return ks + encodeURIComponent(stringifyPrimitive(v));
        }).join(sep);
      } else {
        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
      }
    }).join(sep);

  }

  if (!name) return '';
  return encodeURIComponent(stringifyPrimitive(name)) + eq +
         encodeURIComponent(stringifyPrimitive(obj));
};

var isArray = Array.isArray || function (xs) {
  return Object.prototype.toString.call(xs) === '[object Array]';
};

function map (xs, f) {
  if (xs.map) return xs.map(f);
  var res = [];
  for (var i = 0; i < xs.length; i++) {
    res.push(f(xs[i], i));
  }
  return res;
}

var objectKeys = Object.keys || function (obj) {
  var res = [];
  for (var key in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);
  }
  return res;
};

},{}],100:[function(require,module,exports){
'use strict';

exports.decode = exports.parse = require('./decode');
exports.encode = exports.stringify = require('./encode');

},{"./decode":98,"./encode":99}],101:[function(require,module,exports){
module.exports = require("./lib/_stream_duplex.js")

},{"./lib/_stream_duplex.js":102}],102:[function(require,module,exports){
arguments[4][83][0].apply(exports,arguments)
},{"./_stream_readable":104,"./_stream_writable":106,"core-util-is":38,"dup":83,"inherits":107,"process-nextick-args":96}],103:[function(require,module,exports){
arguments[4][84][0].apply(exports,arguments)
},{"./_stream_transform":105,"core-util-is":38,"dup":84,"inherits":107}],104:[function(require,module,exports){
(function (process){
'use strict';

module.exports = Readable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var isArray = require('isarray');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Readable.ReadableState = ReadableState;

var EE = require('events');

/*<replacement>*/
var EElistenerCount = function(emitter, type) {
  return emitter.listeners(type).length;
};
/*</replacement>*/



/*<replacement>*/
var Stream;
(function (){try{
  Stream = require('st' + 'ream');
}catch(_){}finally{
  if (!Stream)
    Stream = require('events').EventEmitter;
}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/



/*<replacement>*/
var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) {
  debug = debugUtil.debuglog('stream');
} else {
  debug = function () {};
}
/*</replacement>*/

var StringDecoder;

util.inherits(Readable, Stream);

function ReadableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // object stream flag. Used to make read(n) ignore n and to
  // make all the buffer merging and length checks go away
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.readableObjectMode;

  // the point at which it stops calling _read() to fill the buffer
  // Note: 0 is a valid value, means "don't call _read preemptively ever"
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.buffer = [];
  this.length = 0;
  this.pipes = null;
  this.pipesCount = 0;
  this.flowing = null;
  this.ended = false;
  this.endEmitted = false;
  this.reading = false;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // whenever we return null, then we set a flag to say
  // that we're awaiting a 'readable' event emission.
  this.needReadable = false;
  this.emittedReadable = false;
  this.readableListening = false;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // when piping, we only care about 'readable' events that happen
  // after read()ing all the bytes and not getting any pushback.
  this.ranOut = false;

  // the number of writers that are awaiting a drain event in .pipe()s
  this.awaitDrain = 0;

  // if true, a maybeReadMore has been scheduled
  this.readingMore = false;

  this.decoder = null;
  this.encoding = null;
  if (options.encoding) {
    if (!StringDecoder)
      StringDecoder = require('string_decoder/').StringDecoder;
    this.decoder = new StringDecoder(options.encoding);
    this.encoding = options.encoding;
  }
}

function Readable(options) {
  var Duplex = require('./_stream_duplex');

  if (!(this instanceof Readable))
    return new Readable(options);

  this._readableState = new ReadableState(options, this);

  // legacy
  this.readable = true;

  if (options && typeof options.read === 'function')
    this._read = options.read;

  Stream.call(this);
}

// Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
  var state = this._readableState;

  if (!state.objectMode && typeof chunk === 'string') {
    encoding = encoding || state.defaultEncoding;
    if (encoding !== state.encoding) {
      chunk = new Buffer(chunk, encoding);
      encoding = '';
    }
  }

  return readableAddChunk(this, state, chunk, encoding, false);
};

// Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
  var state = this._readableState;
  return readableAddChunk(this, state, chunk, '', true);
};

Readable.prototype.isPaused = function() {
  return this._readableState.flowing === false;
};

function readableAddChunk(stream, state, chunk, encoding, addToFront) {
  var er = chunkInvalid(state, chunk);
  if (er) {
    stream.emit('error', er);
  } else if (chunk === null) {
    state.reading = false;
    onEofChunk(stream, state);
  } else if (state.objectMode || chunk && chunk.length > 0) {
    if (state.ended && !addToFront) {
      var e = new Error('stream.push() after EOF');
      stream.emit('error', e);
    } else if (state.endEmitted && addToFront) {
      var e = new Error('stream.unshift() after end event');
      stream.emit('error', e);
    } else {
      if (state.decoder && !addToFront && !encoding)
        chunk = state.decoder.write(chunk);

      if (!addToFront)
        state.reading = false;

      // if we want the data now, just emit it.
      if (state.flowing && state.length === 0 && !state.sync) {
        stream.emit('data', chunk);
        stream.read(0);
      } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront)
          state.buffer.unshift(chunk);
        else
          state.buffer.push(chunk);

        if (state.needReadable)
          emitReadable(stream);
      }

      maybeReadMore(stream, state);
    }
  } else if (!addToFront) {
    state.reading = false;
  }

  return needMoreData(state);
}


// if it's past the high water mark, we can push in some more.
// Also, if we have no data yet, we can stand some
// more bytes.  This is to work around cases where hwm=0,
// such as the repl.  Also, if the push() triggered a
// readable event, and the user called read(largeNumber) such that
// needReadable was set, then we ought to push more, so that another
// 'readable' event will be triggered.
function needMoreData(state) {
  return !state.ended &&
         (state.needReadable ||
          state.length < state.highWaterMark ||
          state.length === 0);
}

// backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
  if (!StringDecoder)
    StringDecoder = require('string_decoder/').StringDecoder;
  this._readableState.decoder = new StringDecoder(enc);
  this._readableState.encoding = enc;
  return this;
};

// Don't raise the hwm > 8MB
var MAX_HWM = 0x800000;
function computeNewHighWaterMark(n) {
  if (n >= MAX_HWM) {
    n = MAX_HWM;
  } else {
    // Get the next highest power of 2
    n--;
    n |= n >>> 1;
    n |= n >>> 2;
    n |= n >>> 4;
    n |= n >>> 8;
    n |= n >>> 16;
    n++;
  }
  return n;
}

function howMuchToRead(n, state) {
  if (state.length === 0 && state.ended)
    return 0;

  if (state.objectMode)
    return n === 0 ? 0 : 1;

  if (n === null || isNaN(n)) {
    // only flow one buffer at a time
    if (state.flowing && state.buffer.length)
      return state.buffer[0].length;
    else
      return state.length;
  }

  if (n <= 0)
    return 0;

  // If we're asking for more than the target buffer level,
  // then raise the water mark.  Bump up to the next highest
  // power of 2, to prevent increasing it excessively in tiny
  // amounts.
  if (n > state.highWaterMark)
    state.highWaterMark = computeNewHighWaterMark(n);

  // don't have that much.  return null, unless we've ended.
  if (n > state.length) {
    if (!state.ended) {
      state.needReadable = true;
      return 0;
    } else {
      return state.length;
    }
  }

  return n;
}

// you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
  debug('read', n);
  var state = this._readableState;
  var nOrig = n;

  if (typeof n !== 'number' || n > 0)
    state.emittedReadable = false;

  // if we're doing read(0) to trigger a readable event, but we
  // already have a bunch of data in the buffer, then just trigger
  // the 'readable' event and move on.
  if (n === 0 &&
      state.needReadable &&
      (state.length >= state.highWaterMark || state.ended)) {
    debug('read: emitReadable', state.length, state.ended);
    if (state.length === 0 && state.ended)
      endReadable(this);
    else
      emitReadable(this);
    return null;
  }

  n = howMuchToRead(n, state);

  // if we've ended, and we're now clear, then finish it up.
  if (n === 0 && state.ended) {
    if (state.length === 0)
      endReadable(this);
    return null;
  }

  // All the actual chunk generation logic needs to be
  // *below* the call to _read.  The reason is that in certain
  // synthetic stream cases, such as passthrough streams, _read
  // may be a completely synchronous operation which may change
  // the state of the read buffer, providing enough data when
  // before there was *not* enough.
  //
  // So, the steps are:
  // 1. Figure out what the state of things will be after we do
  // a read from the buffer.
  //
  // 2. If that resulting state will trigger a _read, then call _read.
  // Note that this may be asynchronous, or synchronous.  Yes, it is
  // deeply ugly to write APIs this way, but that still doesn't mean
  // that the Readable class should behave improperly, as streams are
  // designed to be sync/async agnostic.
  // Take note if the _read call is sync or async (ie, if the read call
  // has returned yet), so that we know whether or not it's safe to emit
  // 'readable' etc.
  //
  // 3. Actually pull the requested chunks out of the buffer and return.

  // if we need a readable event, then we need to do some reading.
  var doRead = state.needReadable;
  debug('need readable', doRead);

  // if we currently have less than the highWaterMark, then also read some
  if (state.length === 0 || state.length - n < state.highWaterMark) {
    doRead = true;
    debug('length less than watermark', doRead);
  }

  // however, if we've ended, then there's no point, and if we're already
  // reading, then it's unnecessary.
  if (state.ended || state.reading) {
    doRead = false;
    debug('reading or ended', doRead);
  }

  if (doRead) {
    debug('do read');
    state.reading = true;
    state.sync = true;
    // if the length is currently zero, then we *need* a readable event.
    if (state.length === 0)
      state.needReadable = true;
    // call internal read method
    this._read(state.highWaterMark);
    state.sync = false;
  }

  // If _read pushed data synchronously, then `reading` will be false,
  // and we need to re-evaluate how much data we can return to the user.
  if (doRead && !state.reading)
    n = howMuchToRead(nOrig, state);

  var ret;
  if (n > 0)
    ret = fromList(n, state);
  else
    ret = null;

  if (ret === null) {
    state.needReadable = true;
    n = 0;
  }

  state.length -= n;

  // If we have nothing in the buffer, then we want to know
  // as soon as we *do* get something into the buffer.
  if (state.length === 0 && !state.ended)
    state.needReadable = true;

  // If we tried to read() past the EOF, then emit end on the next tick.
  if (nOrig !== n && state.ended && state.length === 0)
    endReadable(this);

  if (ret !== null)
    this.emit('data', ret);

  return ret;
};

function chunkInvalid(state, chunk) {
  var er = null;
  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    er = new TypeError('Invalid non-string/buffer chunk');
  }
  return er;
}


function onEofChunk(stream, state) {
  if (state.ended) return;
  if (state.decoder) {
    var chunk = state.decoder.end();
    if (chunk && chunk.length) {
      state.buffer.push(chunk);
      state.length += state.objectMode ? 1 : chunk.length;
    }
  }
  state.ended = true;

  // emit 'readable' now to make sure it gets picked up.
  emitReadable(stream);
}

// Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
  var state = stream._readableState;
  state.needReadable = false;
  if (!state.emittedReadable) {
    debug('emitReadable', state.flowing);
    state.emittedReadable = true;
    if (state.sync)
      processNextTick(emitReadable_, stream);
    else
      emitReadable_(stream);
  }
}

function emitReadable_(stream) {
  debug('emit readable');
  stream.emit('readable');
  flow(stream);
}


// at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
  if (!state.readingMore) {
    state.readingMore = true;
    processNextTick(maybeReadMore_, stream, state);
  }
}

function maybeReadMore_(stream, state) {
  var len = state.length;
  while (!state.reading && !state.flowing && !state.ended &&
         state.length < state.highWaterMark) {
    debug('maybeReadMore read 0');
    stream.read(0);
    if (len === state.length)
      // didn't get any data, stop spinning.
      break;
    else
      len = state.length;
  }
  state.readingMore = false;
}

// abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
  this.emit('error', new Error('not implemented'));
};

Readable.prototype.pipe = function(dest, pipeOpts) {
  var src = this;
  var state = this._readableState;

  switch (state.pipesCount) {
    case 0:
      state.pipes = dest;
      break;
    case 1:
      state.pipes = [state.pipes, dest];
      break;
    default:
      state.pipes.push(dest);
      break;
  }
  state.pipesCount += 1;
  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

  var doEnd = (!pipeOpts || pipeOpts.end !== false) &&
              dest !== process.stdout &&
              dest !== process.stderr;

  var endFn = doEnd ? onend : cleanup;
  if (state.endEmitted)
    processNextTick(endFn);
  else
    src.once('end', endFn);

  dest.on('unpipe', onunpipe);
  function onunpipe(readable) {
    debug('onunpipe');
    if (readable === src) {
      cleanup();
    }
  }

  function onend() {
    debug('onend');
    dest.end();
  }

  // when the dest drains, it reduces the awaitDrain counter
  // on the source.  This would be more elegant with a .once()
  // handler in flow(), but adding and removing repeatedly is
  // too slow.
  var ondrain = pipeOnDrain(src);
  dest.on('drain', ondrain);

  var cleanedUp = false;
  function cleanup() {
    debug('cleanup');
    // cleanup event handlers once the pipe is broken
    dest.removeListener('close', onclose);
    dest.removeListener('finish', onfinish);
    dest.removeListener('drain', ondrain);
    dest.removeListener('error', onerror);
    dest.removeListener('unpipe', onunpipe);
    src.removeListener('end', onend);
    src.removeListener('end', cleanup);
    src.removeListener('data', ondata);

    cleanedUp = true;

    // if the reader is waiting for a drain event from this
    // specific writer, then it would cause it to never start
    // flowing again.
    // So, if this is awaiting a drain, then we just call it now.
    // If we don't know, then assume that we are waiting for one.
    if (state.awaitDrain &&
        (!dest._writableState || dest._writableState.needDrain))
      ondrain();
  }

  src.on('data', ondata);
  function ondata(chunk) {
    debug('ondata');
    var ret = dest.write(chunk);
    if (false === ret) {
      // If the user unpiped during `dest.write()`, it is possible
      // to get stuck in a permanently paused state if that write
      // also returned false.
      if (state.pipesCount === 1 &&
          state.pipes[0] === dest &&
          src.listenerCount('data') === 1 &&
          !cleanedUp) {
        debug('false write response, pause', src._readableState.awaitDrain);
        src._readableState.awaitDrain++;
      }
      src.pause();
    }
  }

  // if the dest has an error, then stop piping into it.
  // however, don't suppress the throwing behavior for this.
  function onerror(er) {
    debug('onerror', er);
    unpipe();
    dest.removeListener('error', onerror);
    if (EElistenerCount(dest, 'error') === 0)
      dest.emit('error', er);
  }
  // This is a brutally ugly hack to make sure that our error handler
  // is attached before any userland ones.  NEVER DO THIS.
  if (!dest._events || !dest._events.error)
    dest.on('error', onerror);
  else if (isArray(dest._events.error))
    dest._events.error.unshift(onerror);
  else
    dest._events.error = [onerror, dest._events.error];


  // Both close and finish should trigger unpipe, but only once.
  function onclose() {
    dest.removeListener('finish', onfinish);
    unpipe();
  }
  dest.once('close', onclose);
  function onfinish() {
    debug('onfinish');
    dest.removeListener('close', onclose);
    unpipe();
  }
  dest.once('finish', onfinish);

  function unpipe() {
    debug('unpipe');
    src.unpipe(dest);
  }

  // tell the dest that it's being piped to
  dest.emit('pipe', src);

  // start the flow if it hasn't been started already.
  if (!state.flowing) {
    debug('pipe resume');
    src.resume();
  }

  return dest;
};

function pipeOnDrain(src) {
  return function() {
    var state = src._readableState;
    debug('pipeOnDrain', state.awaitDrain);
    if (state.awaitDrain)
      state.awaitDrain--;
    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
      state.flowing = true;
      flow(src);
    }
  };
}


Readable.prototype.unpipe = function(dest) {
  var state = this._readableState;

  // if we're not piping anywhere, then do nothing.
  if (state.pipesCount === 0)
    return this;

  // just one destination.  most common case.
  if (state.pipesCount === 1) {
    // passed in one, but it's not the right one.
    if (dest && dest !== state.pipes)
      return this;

    if (!dest)
      dest = state.pipes;

    // got a match.
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;
    if (dest)
      dest.emit('unpipe', this);
    return this;
  }

  // slow case. multiple pipe destinations.

  if (!dest) {
    // remove all.
    var dests = state.pipes;
    var len = state.pipesCount;
    state.pipes = null;
    state.pipesCount = 0;
    state.flowing = false;

    for (var i = 0; i < len; i++)
      dests[i].emit('unpipe', this);
    return this;
  }

  // try to find the right one.
  var i = indexOf(state.pipes, dest);
  if (i === -1)
    return this;

  state.pipes.splice(i, 1);
  state.pipesCount -= 1;
  if (state.pipesCount === 1)
    state.pipes = state.pipes[0];

  dest.emit('unpipe', this);

  return this;
};

// set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
  var res = Stream.prototype.on.call(this, ev, fn);

  // If listening to data, and it has not explicitly been paused,
  // then call resume to start the flow of data on the next tick.
  if (ev === 'data' && false !== this._readableState.flowing) {
    this.resume();
  }

  if (ev === 'readable' && this.readable) {
    var state = this._readableState;
    if (!state.readableListening) {
      state.readableListening = true;
      state.emittedReadable = false;
      state.needReadable = true;
      if (!state.reading) {
        processNextTick(nReadingNextTick, this);
      } else if (state.length) {
        emitReadable(this, state);
      }
    }
  }

  return res;
};
Readable.prototype.addListener = Readable.prototype.on;

function nReadingNextTick(self) {
  debug('readable nexttick read 0');
  self.read(0);
}

// pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
  var state = this._readableState;
  if (!state.flowing) {
    debug('resume');
    state.flowing = true;
    resume(this, state);
  }
  return this;
};

function resume(stream, state) {
  if (!state.resumeScheduled) {
    state.resumeScheduled = true;
    processNextTick(resume_, stream, state);
  }
}

function resume_(stream, state) {
  if (!state.reading) {
    debug('resume read 0');
    stream.read(0);
  }

  state.resumeScheduled = false;
  stream.emit('resume');
  flow(stream);
  if (state.flowing && !state.reading)
    stream.read(0);
}

Readable.prototype.pause = function() {
  debug('call pause flowing=%j', this._readableState.flowing);
  if (false !== this._readableState.flowing) {
    debug('pause');
    this._readableState.flowing = false;
    this.emit('pause');
  }
  return this;
};

function flow(stream) {
  var state = stream._readableState;
  debug('flow', state.flowing);
  if (state.flowing) {
    do {
      var chunk = stream.read();
    } while (null !== chunk && state.flowing);
  }
}

// wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
  var state = this._readableState;
  var paused = false;

  var self = this;
  stream.on('end', function() {
    debug('wrapped end');
    if (state.decoder && !state.ended) {
      var chunk = state.decoder.end();
      if (chunk && chunk.length)
        self.push(chunk);
    }

    self.push(null);
  });

  stream.on('data', function(chunk) {
    debug('wrapped data');
    if (state.decoder)
      chunk = state.decoder.write(chunk);

    // don't skip over falsy values in objectMode
    if (state.objectMode && (chunk === null || chunk === undefined))
      return;
    else if (!state.objectMode && (!chunk || !chunk.length))
      return;

    var ret = self.push(chunk);
    if (!ret) {
      paused = true;
      stream.pause();
    }
  });

  // proxy all the other methods.
  // important when wrapping filters and duplexes.
  for (var i in stream) {
    if (this[i] === undefined && typeof stream[i] === 'function') {
      this[i] = function(method) { return function() {
        return stream[method].apply(stream, arguments);
      }; }(i);
    }
  }

  // proxy certain important events.
  var events = ['error', 'close', 'destroy', 'pause', 'resume'];
  forEach(events, function(ev) {
    stream.on(ev, self.emit.bind(self, ev));
  });

  // when we try to consume some more bytes, simply unpause the
  // underlying stream.
  self._read = function(n) {
    debug('wrapped _read', n);
    if (paused) {
      paused = false;
      stream.resume();
    }
  };

  return self;
};


// exposed for testing purposes only.
Readable._fromList = fromList;

// Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
function fromList(n, state) {
  var list = state.buffer;
  var length = state.length;
  var stringMode = !!state.decoder;
  var objectMode = !!state.objectMode;
  var ret;

  // nothing in the list, definitely empty.
  if (list.length === 0)
    return null;

  if (length === 0)
    ret = null;
  else if (objectMode)
    ret = list.shift();
  else if (!n || n >= length) {
    // read it all, truncate the array.
    if (stringMode)
      ret = list.join('');
    else if (list.length === 1)
      ret = list[0];
    else
      ret = Buffer.concat(list, length);
    list.length = 0;
  } else {
    // read just some of it.
    if (n < list[0].length) {
      // just take a part of the first list item.
      // slice is the same for buffers and strings.
      var buf = list[0];
      ret = buf.slice(0, n);
      list[0] = buf.slice(n);
    } else if (n === list[0].length) {
      // first list is a perfect match
      ret = list.shift();
    } else {
      // complex case.
      // we have enough to cover it, but it spans past the first buffer.
      if (stringMode)
        ret = '';
      else
        ret = new Buffer(n);

      var c = 0;
      for (var i = 0, l = list.length; i < l && c < n; i++) {
        var buf = list[0];
        var cpy = Math.min(n - c, buf.length);

        if (stringMode)
          ret += buf.slice(0, cpy);
        else
          buf.copy(ret, c, 0, cpy);

        if (cpy < buf.length)
          list[0] = buf.slice(cpy);
        else
          list.shift();

        c += cpy;
      }
    }
  }

  return ret;
}

function endReadable(stream) {
  var state = stream._readableState;

  // If we get here before consuming all the bytes, then that is a
  // bug in node.  Should never happen.
  if (state.length > 0)
    throw new Error('endReadable called on non-empty stream');

  if (!state.endEmitted) {
    state.ended = true;
    processNextTick(endReadableNT, state, stream);
  }
}

function endReadableNT(state, stream) {
  // Check that we didn't get one last unshift.
  if (!state.endEmitted && state.length === 0) {
    state.endEmitted = true;
    stream.readable = false;
    stream.emit('end');
  }
}

function forEach (xs, f) {
  for (var i = 0, l = xs.length; i < l; i++) {
    f(xs[i], i);
  }
}

function indexOf (xs, x) {
  for (var i = 0, l = xs.length; i < l; i++) {
    if (xs[i] === x) return i;
  }
  return -1;
}

}).call(this,require('_process'))
},{"./_stream_duplex":102,"_process":97,"buffer":36,"core-util-is":38,"events":40,"inherits":107,"isarray":44,"process-nextick-args":96,"string_decoder/":124,"util":34}],105:[function(require,module,exports){
arguments[4][86][0].apply(exports,arguments)
},{"./_stream_duplex":102,"core-util-is":38,"dup":86,"inherits":107}],106:[function(require,module,exports){
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.

'use strict';

module.exports = Writable;

/*<replacement>*/
var processNextTick = require('process-nextick-args');
/*</replacement>*/


/*<replacement>*/
var Buffer = require('buffer').Buffer;
/*</replacement>*/

Writable.WritableState = WritableState;


/*<replacement>*/
var util = require('core-util-is');
util.inherits = require('inherits');
/*</replacement>*/


/*<replacement>*/
var internalUtil = {
  deprecate: require('util-deprecate')
};
/*</replacement>*/



/*<replacement>*/
var Stream;
(function (){try{
  Stream = require('st' + 'ream');
}catch(_){}finally{
  if (!Stream)
    Stream = require('events').EventEmitter;
}}())
/*</replacement>*/

var Buffer = require('buffer').Buffer;

util.inherits(Writable, Stream);

function nop() {}

function WriteReq(chunk, encoding, cb) {
  this.chunk = chunk;
  this.encoding = encoding;
  this.callback = cb;
  this.next = null;
}

function WritableState(options, stream) {
  var Duplex = require('./_stream_duplex');

  options = options || {};

  // object stream flag to indicate whether or not this stream
  // contains buffers or objects.
  this.objectMode = !!options.objectMode;

  if (stream instanceof Duplex)
    this.objectMode = this.objectMode || !!options.writableObjectMode;

  // the point at which write() starts returning false
  // Note: 0 is a valid value, means that we always return false if
  // the entire buffer is not flushed immediately on write()
  var hwm = options.highWaterMark;
  var defaultHwm = this.objectMode ? 16 : 16 * 1024;
  this.highWaterMark = (hwm || hwm === 0) ? hwm : defaultHwm;

  // cast to ints.
  this.highWaterMark = ~~this.highWaterMark;

  this.needDrain = false;
  // at the start of calling end()
  this.ending = false;
  // when end() has been called, and returned
  this.ended = false;
  // when 'finish' is emitted
  this.finished = false;

  // should we decode strings into buffers before passing to _write?
  // this is here so that some node-core streams can optimize string
  // handling at a lower level.
  var noDecode = options.decodeStrings === false;
  this.decodeStrings = !noDecode;

  // Crypto is kind of old and crusty.  Historically, its default string
  // encoding is 'binary' so we have to make this configurable.
  // Everything else in the universe uses 'utf8', though.
  this.defaultEncoding = options.defaultEncoding || 'utf8';

  // not an actual buffer we keep track of, but a measurement
  // of how much we're waiting to get pushed to some underlying
  // socket or file.
  this.length = 0;

  // a flag to see when we're in the middle of a write.
  this.writing = false;

  // when true all writes will be buffered until .uncork() call
  this.corked = 0;

  // a flag to be able to tell if the onwrite cb is called immediately,
  // or on a later tick.  We set this to true at first, because any
  // actions that shouldn't happen until "later" should generally also
  // not happen before the first write call.
  this.sync = true;

  // a flag to know if we're processing previously buffered items, which
  // may call the _write() callback in the same tick, so that we don't
  // end up in an overlapped onwrite situation.
  this.bufferProcessing = false;

  // the callback that's passed to _write(chunk,cb)
  this.onwrite = function(er) {
    onwrite(stream, er);
  };

  // the callback that the user supplies to write(chunk,encoding,cb)
  this.writecb = null;

  // the amount that is being written when _write is called.
  this.writelen = 0;

  this.bufferedRequest = null;
  this.lastBufferedRequest = null;

  // number of pending user-supplied write callbacks
  // this must be 0 before 'finish' can be emitted
  this.pendingcb = 0;

  // emit prefinish if the only thing we're waiting for is _write cbs
  // This is relevant for synchronous Transform streams
  this.prefinished = false;

  // True if the error was already emitted and should not be thrown again
  this.errorEmitted = false;
}

WritableState.prototype.getBuffer = function writableStateGetBuffer() {
  var current = this.bufferedRequest;
  var out = [];
  while (current) {
    out.push(current);
    current = current.next;
  }
  return out;
};

(function (){try {
Object.defineProperty(WritableState.prototype, 'buffer', {
  get: internalUtil.deprecate(function() {
    return this.getBuffer();
  }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' +
     'instead.')
});
}catch(_){}}());


function Writable(options) {
  var Duplex = require('./_stream_duplex');

  // Writable ctor is applied to Duplexes, though they're not
  // instanceof Writable, they're instanceof Readable.
  if (!(this instanceof Writable) && !(this instanceof Duplex))
    return new Writable(options);

  this._writableState = new WritableState(options, this);

  // legacy.
  this.writable = true;

  if (options) {
    if (typeof options.write === 'function')
      this._write = options.write;

    if (typeof options.writev === 'function')
      this._writev = options.writev;
  }

  Stream.call(this);
}

// Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
  this.emit('error', new Error('Cannot pipe. Not readable.'));
};


function writeAfterEnd(stream, cb) {
  var er = new Error('write after end');
  // TODO: defer error events consistently everywhere, not just the cb
  stream.emit('error', er);
  processNextTick(cb, er);
}

// If we get something that is not a buffer, string, null, or undefined,
// and we're not in objectMode, then that's an error.
// Otherwise stream chunks are all considered to be of length=1, and the
// watermarks determine how many objects to keep in the buffer, rather than
// how many bytes or characters.
function validChunk(stream, state, chunk, cb) {
  var valid = true;

  if (!(Buffer.isBuffer(chunk)) &&
      typeof chunk !== 'string' &&
      chunk !== null &&
      chunk !== undefined &&
      !state.objectMode) {
    var er = new TypeError('Invalid non-string/buffer chunk');
    stream.emit('error', er);
    processNextTick(cb, er);
    valid = false;
  }
  return valid;
}

Writable.prototype.write = function(chunk, encoding, cb) {
  var state = this._writableState;
  var ret = false;

  if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  else if (!encoding)
    encoding = state.defaultEncoding;

  if (typeof cb !== 'function')
    cb = nop;

  if (state.ended)
    writeAfterEnd(this, cb);
  else if (validChunk(this, state, chunk, cb)) {
    state.pendingcb++;
    ret = writeOrBuffer(this, state, chunk, encoding, cb);
  }

  return ret;
};

Writable.prototype.cork = function() {
  var state = this._writableState;

  state.corked++;
};

Writable.prototype.uncork = function() {
  var state = this._writableState;

  if (state.corked) {
    state.corked--;

    if (!state.writing &&
        !state.corked &&
        !state.finished &&
        !state.bufferProcessing &&
        state.bufferedRequest)
      clearBuffer(this, state);
  }
};

Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
  // node::ParseEncoding() requires lower case.
  if (typeof encoding === 'string')
    encoding = encoding.toLowerCase();
  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64',
'ucs2', 'ucs-2','utf16le', 'utf-16le', 'raw']
.indexOf((encoding + '').toLowerCase()) > -1))
    throw new TypeError('Unknown encoding: ' + encoding);
  this._writableState.defaultEncoding = encoding;
};

function decodeChunk(state, chunk, encoding) {
  if (!state.objectMode &&
      state.decodeStrings !== false &&
      typeof chunk === 'string') {
    chunk = new Buffer(chunk, encoding);
  }
  return chunk;
}

// if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, chunk, encoding, cb) {
  chunk = decodeChunk(state, chunk, encoding);

  if (Buffer.isBuffer(chunk))
    encoding = 'buffer';
  var len = state.objectMode ? 1 : chunk.length;

  state.length += len;

  var ret = state.length < state.highWaterMark;
  // we must ensure that previous needDrain will not be reset to false.
  if (!ret)
    state.needDrain = true;

  if (state.writing || state.corked) {
    var last = state.lastBufferedRequest;
    state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
    if (last) {
      last.next = state.lastBufferedRequest;
    } else {
      state.bufferedRequest = state.lastBufferedRequest;
    }
  } else {
    doWrite(stream, state, false, len, chunk, encoding, cb);
  }

  return ret;
}

function doWrite(stream, state, writev, len, chunk, encoding, cb) {
  state.writelen = len;
  state.writecb = cb;
  state.writing = true;
  state.sync = true;
  if (writev)
    stream._writev(chunk, state.onwrite);
  else
    stream._write(chunk, encoding, state.onwrite);
  state.sync = false;
}

function onwriteError(stream, state, sync, er, cb) {
  --state.pendingcb;
  if (sync)
    processNextTick(cb, er);
  else
    cb(er);

  stream._writableState.errorEmitted = true;
  stream.emit('error', er);
}

function onwriteStateUpdate(state) {
  state.writing = false;
  state.writecb = null;
  state.length -= state.writelen;
  state.writelen = 0;
}

function onwrite(stream, er) {
  var state = stream._writableState;
  var sync = state.sync;
  var cb = state.writecb;

  onwriteStateUpdate(state);

  if (er)
    onwriteError(stream, state, sync, er, cb);
  else {
    // Check if we're actually ready to finish, but don't emit yet
    var finished = needFinish(state);

    if (!finished &&
        !state.corked &&
        !state.bufferProcessing &&
        state.bufferedRequest) {
      clearBuffer(stream, state);
    }

    if (sync) {
      processNextTick(afterWrite, stream, state, finished, cb);
    } else {
      afterWrite(stream, state, finished, cb);
    }
  }
}

function afterWrite(stream, state, finished, cb) {
  if (!finished)
    onwriteDrain(stream, state);
  state.pendingcb--;
  cb();
  finishMaybe(stream, state);
}

// Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
  if (state.length === 0 && state.needDrain) {
    state.needDrain = false;
    stream.emit('drain');
  }
}


// if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
  state.bufferProcessing = true;
  var entry = state.bufferedRequest;

  if (stream._writev && entry && entry.next) {
    // Fast case, write everything using _writev()
    var buffer = [];
    var cbs = [];
    while (entry) {
      cbs.push(entry.callback);
      buffer.push(entry);
      entry = entry.next;
    }

    // count the one we are adding, as well.
    // TODO(isaacs) clean this up
    state.pendingcb++;
    state.lastBufferedRequest = null;
    doWrite(stream, state, true, state.length, buffer, '', function(err) {
      for (var i = 0; i < cbs.length; i++) {
        state.pendingcb--;
        cbs[i](err);
      }
    });

    // Clear buffer
  } else {
    // Slow case, write chunks one-by-one
    while (entry) {
      var chunk = entry.chunk;
      var encoding = entry.encoding;
      var cb = entry.callback;
      var len = state.objectMode ? 1 : chunk.length;

      doWrite(stream, state, false, len, chunk, encoding, cb);
      entry = entry.next;
      // if we didn't call the onwrite immediately, then
      // it means that we need to wait until it does.
      // also, that means that the chunk and cb are currently
      // being processed, so move the buffer counter past them.
      if (state.writing) {
        break;
      }
    }

    if (entry === null)
      state.lastBufferedRequest = null;
  }
  state.bufferedRequest = entry;
  state.bufferProcessing = false;
}

Writable.prototype._write = function(chunk, encoding, cb) {
  cb(new Error('not implemented'));
};

Writable.prototype._writev = null;

Writable.prototype.end = function(chunk, encoding, cb) {
  var state = this._writableState;

  if (typeof chunk === 'function') {
    cb = chunk;
    chunk = null;
    encoding = null;
  } else if (typeof encoding === 'function') {
    cb = encoding;
    encoding = null;
  }

  if (chunk !== null && chunk !== undefined)
    this.write(chunk, encoding);

  // .end() fully uncorks
  if (state.corked) {
    state.corked = 1;
    this.uncork();
  }

  // ignore unnecessary end() calls.
  if (!state.ending && !state.finished)
    endWritable(this, state, cb);
};


function needFinish(state) {
  return (state.ending &&
          state.length === 0 &&
          state.bufferedRequest === null &&
          !state.finished &&
          !state.writing);
}

function prefinish(stream, state) {
  if (!state.prefinished) {
    state.prefinished = true;
    stream.emit('prefinish');
  }
}

function finishMaybe(stream, state) {
  var need = needFinish(state);
  if (need) {
    if (state.pendingcb === 0) {
      prefinish(stream, state);
      state.finished = true;
      stream.emit('finish');
    } else {
      prefinish(stream, state);
    }
  }
  return need;
}

function endWritable(stream, state, cb) {
  state.ending = true;
  finishMaybe(stream, state);
  if (cb) {
    if (state.finished)
      processNextTick(cb);
    else
      stream.once('finish', cb);
  }
  state.ended = true;
}

},{"./_stream_duplex":102,"buffer":36,"core-util-is":38,"events":40,"inherits":107,"process-nextick-args":96,"util-deprecate":126}],107:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"dup":78}],108:[function(require,module,exports){
module.exports = require("./lib/_stream_passthrough.js")

},{"./lib/_stream_passthrough.js":103}],109:[function(require,module,exports){
arguments[4][89][0].apply(exports,arguments)
},{"./lib/_stream_duplex.js":102,"./lib/_stream_passthrough.js":103,"./lib/_stream_readable.js":104,"./lib/_stream_transform.js":105,"./lib/_stream_writable.js":106,"dup":89}],110:[function(require,module,exports){
arguments[4][90][0].apply(exports,arguments)
},{"./lib/_stream_transform.js":105,"dup":90}],111:[function(require,module,exports){
module.exports = require("./lib/_stream_writable.js")

},{"./lib/_stream_writable.js":106}],112:[function(require,module,exports){
(function (Buffer){
// wrapper for non-node envs
;(function (sax) {

sax.parser = function (strict, opt) { return new SAXParser(strict, opt) }
sax.SAXParser = SAXParser
sax.SAXStream = SAXStream
sax.createStream = createStream

// When we pass the MAX_BUFFER_LENGTH position, start checking for buffer overruns.
// When we check, schedule the next check for MAX_BUFFER_LENGTH - (max(buffer lengths)),
// since that's the earliest that a buffer overrun could occur.  This way, checks are
// as rare as required, but as often as necessary to ensure never crossing this bound.
// Furthermore, buffers are only tested at most once per write(), so passing a very
// large string into write() might have undesirable effects, but this is manageable by
// the caller, so it is assumed to be safe.  Thus, a call to write() may, in the extreme
// edge case, result in creating at most one complete copy of the string passed in.
// Set to Infinity to have unlimited buffers.
sax.MAX_BUFFER_LENGTH = 64 * 1024

var buffers = [
  "comment", "sgmlDecl", "textNode", "tagName", "doctype",
  "procInstName", "procInstBody", "entity", "attribName",
  "attribValue", "cdata", "script"
]

sax.EVENTS = // for discoverability.
  [ "text"
  , "processinginstruction"
  , "sgmldeclaration"
  , "doctype"
  , "comment"
  , "attribute"
  , "opentag"
  , "closetag"
  , "opencdata"
  , "cdata"
  , "closecdata"
  , "error"
  , "end"
  , "ready"
  , "script"
  , "opennamespace"
  , "closenamespace"
  ]

function SAXParser (strict, opt) {
  if (!(this instanceof SAXParser)) return new SAXParser(strict, opt)

  var parser = this
  clearBuffers(parser)
  parser.q = parser.c = ""
  parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH
  parser.opt = opt || {}
  parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags
  parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase"
  parser.tags = []
  parser.closed = parser.closedRoot = parser.sawRoot = false
  parser.tag = parser.error = null
  parser.strict = !!strict
  parser.noscript = !!(strict || parser.opt.noscript)
  parser.state = S.BEGIN
  parser.ENTITIES = Object.create(sax.ENTITIES)
  parser.attribList = []

  // namespaces form a prototype chain.
  // it always points at the current tag,
  // which protos to its parent tag.
  if (parser.opt.xmlns) parser.ns = Object.create(rootNS)

  // mostly just for error reporting
  parser.trackPosition = parser.opt.position !== false
  if (parser.trackPosition) {
    parser.position = parser.line = parser.column = 0
  }
  emit(parser, "onready")
}

if (!Object.create) Object.create = function (o) {
  function f () { this.__proto__ = o }
  f.prototype = o
  return new f
}

if (!Object.getPrototypeOf) Object.getPrototypeOf = function (o) {
  return o.__proto__
}

if (!Object.keys) Object.keys = function (o) {
  var a = []
  for (var i in o) if (o.hasOwnProperty(i)) a.push(i)
  return a
}

function checkBufferLength (parser) {
  var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10)
    , maxActual = 0
  for (var i = 0, l = buffers.length; i < l; i ++) {
    var len = parser[buffers[i]].length
    if (len > maxAllowed) {
      // Text/cdata nodes can get big, and since they're buffered,
      // we can get here under normal conditions.
      // Avoid issues by emitting the text node now,
      // so at least it won't get any bigger.
      switch (buffers[i]) {
        case "textNode":
          closeText(parser)
        break

        case "cdata":
          emitNode(parser, "oncdata", parser.cdata)
          parser.cdata = ""
        break

        case "script":
          emitNode(parser, "onscript", parser.script)
          parser.script = ""
        break

        default:
          error(parser, "Max buffer length exceeded: "+buffers[i])
      }
    }
    maxActual = Math.max(maxActual, len)
  }
  // schedule the next check for the earliest possible buffer overrun.
  parser.bufferCheckPosition = (sax.MAX_BUFFER_LENGTH - maxActual)
                             + parser.position
}

function clearBuffers (parser) {
  for (var i = 0, l = buffers.length; i < l; i ++) {
    parser[buffers[i]] = ""
  }
}

function flushBuffers (parser) {
  closeText(parser)
  if (parser.cdata !== "") {
    emitNode(parser, "oncdata", parser.cdata)
    parser.cdata = ""
  }
  if (parser.script !== "") {
    emitNode(parser, "onscript", parser.script)
    parser.script = ""
  }
}

SAXParser.prototype =
  { end: function () { end(this) }
  , write: write
  , resume: function () { this.error = null; return this }
  , close: function () { return this.write(null) }
  , flush: function () { flushBuffers(this) }
  }

try {
  var Stream = require("stream").Stream
} catch (ex) {
  var Stream = function () {}
}


var streamWraps = sax.EVENTS.filter(function (ev) {
  return ev !== "error" && ev !== "end"
})

function createStream (strict, opt) {
  return new SAXStream(strict, opt)
}

function SAXStream (strict, opt) {
  if (!(this instanceof SAXStream)) return new SAXStream(strict, opt)

  Stream.apply(this)

  this._parser = new SAXParser(strict, opt)
  this.writable = true
  this.readable = true


  var me = this

  this._parser.onend = function () {
    me.emit("end")
  }

  this._parser.onerror = function (er) {
    me.emit("error", er)

    // if didn't throw, then means error was handled.
    // go ahead and clear error, so we can write again.
    me._parser.error = null
  }

  this._decoder = null;

  streamWraps.forEach(function (ev) {
    Object.defineProperty(me, "on" + ev, {
      get: function () { return me._parser["on" + ev] },
      set: function (h) {
        if (!h) {
          me.removeAllListeners(ev)
          return me._parser["on"+ev] = h
        }
        me.on(ev, h)
      },
      enumerable: true,
      configurable: false
    })
  })
}

SAXStream.prototype = Object.create(Stream.prototype,
  { constructor: { value: SAXStream } })

SAXStream.prototype.write = function (data) {
  if (typeof Buffer === 'function' &&
      typeof Buffer.isBuffer === 'function' &&
      Buffer.isBuffer(data)) {
    if (!this._decoder) {
      var SD = require('string_decoder').StringDecoder
      this._decoder = new SD('utf8')
    }
    data = this._decoder.write(data);
  }

  this._parser.write(data.toString())
  this.emit("data", data)
  return true
}

SAXStream.prototype.end = function (chunk) {
  if (chunk && chunk.length) this.write(chunk)
  this._parser.end()
  return true
}

SAXStream.prototype.on = function (ev, handler) {
  var me = this
  if (!me._parser["on"+ev] && streamWraps.indexOf(ev) !== -1) {
    me._parser["on"+ev] = function () {
      var args = arguments.length === 1 ? [arguments[0]]
               : Array.apply(null, arguments)
      args.splice(0, 0, ev)
      me.emit.apply(me, args)
    }
  }

  return Stream.prototype.on.call(me, ev, handler)
}



// character classes and tokens
var whitespace = "\r\n\t "
  // this really needs to be replaced with character classes.
  // XML allows all manner of ridiculous numbers and digits.
  , number = "0124356789"
  , letter = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
  // (Letter | "_" | ":")
  , quote = "'\""
  , entity = number+letter+"#"
  , attribEnd = whitespace + ">"
  , CDATA = "[CDATA["
  , DOCTYPE = "DOCTYPE"
  , XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace"
  , XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/"
  , rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE }

// turn all the string character sets into character class objects.
whitespace = charClass(whitespace)
number = charClass(number)
letter = charClass(letter)

// http://www.w3.org/TR/REC-xml/#NT-NameStartChar
// This implementation works on strings, a single character at a time
// as such, it cannot ever support astral-plane characters (10000-EFFFF)
// without a significant breaking change to either this  parser, or the
// JavaScript language.  Implementation of an emoji-capable xml parser
// is left as an exercise for the reader.
var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/

var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040\.\d-]/

quote = charClass(quote)
entity = charClass(entity)
attribEnd = charClass(attribEnd)

function charClass (str) {
  return str.split("").reduce(function (s, c) {
    s[c] = true
    return s
  }, {})
}

function isRegExp (c) {
  return Object.prototype.toString.call(c) === '[object RegExp]'
}

function is (charclass, c) {
  return isRegExp(charclass) ? !!c.match(charclass) : charclass[c]
}

function not (charclass, c) {
  return !is(charclass, c)
}

var S = 0
sax.STATE =
{ BEGIN                     : S++
, TEXT                      : S++ // general stuff
, TEXT_ENTITY               : S++ // &amp and such.
, OPEN_WAKA                 : S++ // <
, SGML_DECL                 : S++ // <!BLARG
, SGML_DECL_QUOTED          : S++ // <!BLARG foo "bar
, DOCTYPE                   : S++ // <!DOCTYPE
, DOCTYPE_QUOTED            : S++ // <!DOCTYPE "//blah
, DOCTYPE_DTD               : S++ // <!DOCTYPE "//blah" [ ...
, DOCTYPE_DTD_QUOTED        : S++ // <!DOCTYPE "//blah" [ "foo
, COMMENT_STARTING          : S++ // <!-
, COMMENT                   : S++ // <!--
, COMMENT_ENDING            : S++ // <!-- blah -
, COMMENT_ENDED             : S++ // <!-- blah --
, CDATA                     : S++ // <![CDATA[ something
, CDATA_ENDING              : S++ // ]
, CDATA_ENDING_2            : S++ // ]]
, PROC_INST                 : S++ // <?hi
, PROC_INST_BODY            : S++ // <?hi there
, PROC_INST_ENDING          : S++ // <?hi "there" ?
, OPEN_TAG                  : S++ // <strong
, OPEN_TAG_SLASH            : S++ // <strong /
, ATTRIB                    : S++ // <a
, ATTRIB_NAME               : S++ // <a foo
, ATTRIB_NAME_SAW_WHITE     : S++ // <a foo _
, ATTRIB_VALUE              : S++ // <a foo=
, ATTRIB_VALUE_QUOTED       : S++ // <a foo="bar
, ATTRIB_VALUE_CLOSED       : S++ // <a foo="bar"
, ATTRIB_VALUE_UNQUOTED     : S++ // <a foo=bar
, ATTRIB_VALUE_ENTITY_Q     : S++ // <foo bar="&quot;"
, ATTRIB_VALUE_ENTITY_U     : S++ // <foo bar=&quot;
, CLOSE_TAG                 : S++ // </a
, CLOSE_TAG_SAW_WHITE       : S++ // </a   >
, SCRIPT                    : S++ // <script> ...
, SCRIPT_ENDING             : S++ // <script> ... <
}

sax.ENTITIES =
{ "amp" : "&"
, "gt" : ">"
, "lt" : "<"
, "quot" : "\""
, "apos" : "'"
, "AElig" : 198
, "Aacute" : 193
, "Acirc" : 194
, "Agrave" : 192
, "Aring" : 197
, "Atilde" : 195
, "Auml" : 196
, "Ccedil" : 199
, "ETH" : 208
, "Eacute" : 201
, "Ecirc" : 202
, "Egrave" : 200
, "Euml" : 203
, "Iacute" : 205
, "Icirc" : 206
, "Igrave" : 204
, "Iuml" : 207
, "Ntilde" : 209
, "Oacute" : 211
, "Ocirc" : 212
, "Ograve" : 210
, "Oslash" : 216
, "Otilde" : 213
, "Ouml" : 214
, "THORN" : 222
, "Uacute" : 218
, "Ucirc" : 219
, "Ugrave" : 217
, "Uuml" : 220
, "Yacute" : 221
, "aacute" : 225
, "acirc" : 226
, "aelig" : 230
, "agrave" : 224
, "aring" : 229
, "atilde" : 227
, "auml" : 228
, "ccedil" : 231
, "eacute" : 233
, "ecirc" : 234
, "egrave" : 232
, "eth" : 240
, "euml" : 235
, "iacute" : 237
, "icirc" : 238
, "igrave" : 236
, "iuml" : 239
, "ntilde" : 241
, "oacute" : 243
, "ocirc" : 244
, "ograve" : 242
, "oslash" : 248
, "otilde" : 245
, "ouml" : 246
, "szlig" : 223
, "thorn" : 254
, "uacute" : 250
, "ucirc" : 251
, "ugrave" : 249
, "uuml" : 252
, "yacute" : 253
, "yuml" : 255
, "copy" : 169
, "reg" : 174
, "nbsp" : 160
, "iexcl" : 161
, "cent" : 162
, "pound" : 163
, "curren" : 164
, "yen" : 165
, "brvbar" : 166
, "sect" : 167
, "uml" : 168
, "ordf" : 170
, "laquo" : 171
, "not" : 172
, "shy" : 173
, "macr" : 175
, "deg" : 176
, "plusmn" : 177
, "sup1" : 185
, "sup2" : 178
, "sup3" : 179
, "acute" : 180
, "micro" : 181
, "para" : 182
, "middot" : 183
, "cedil" : 184
, "ordm" : 186
, "raquo" : 187
, "frac14" : 188
, "frac12" : 189
, "frac34" : 190
, "iquest" : 191
, "times" : 215
, "divide" : 247
, "OElig" : 338
, "oelig" : 339
, "Scaron" : 352
, "scaron" : 353
, "Yuml" : 376
, "fnof" : 402
, "circ" : 710
, "tilde" : 732
, "Alpha" : 913
, "Beta" : 914
, "Gamma" : 915
, "Delta" : 916
, "Epsilon" : 917
, "Zeta" : 918
, "Eta" : 919
, "Theta" : 920
, "Iota" : 921
, "Kappa" : 922
, "Lambda" : 923
, "Mu" : 924
, "Nu" : 925
, "Xi" : 926
, "Omicron" : 927
, "Pi" : 928
, "Rho" : 929
, "Sigma" : 931
, "Tau" : 932
, "Upsilon" : 933
, "Phi" : 934
, "Chi" : 935
, "Psi" : 936
, "Omega" : 937
, "alpha" : 945
, "beta" : 946
, "gamma" : 947
, "delta" : 948
, "epsilon" : 949
, "zeta" : 950
, "eta" : 951
, "theta" : 952
, "iota" : 953
, "kappa" : 954
, "lambda" : 955
, "mu" : 956
, "nu" : 957
, "xi" : 958
, "omicron" : 959
, "pi" : 960
, "rho" : 961
, "sigmaf" : 962
, "sigma" : 963
, "tau" : 964
, "upsilon" : 965
, "phi" : 966
, "chi" : 967
, "psi" : 968
, "omega" : 969
, "thetasym" : 977
, "upsih" : 978
, "piv" : 982
, "ensp" : 8194
, "emsp" : 8195
, "thinsp" : 8201
, "zwnj" : 8204
, "zwj" : 8205
, "lrm" : 8206
, "rlm" : 8207
, "ndash" : 8211
, "mdash" : 8212
, "lsquo" : 8216
, "rsquo" : 8217
, "sbquo" : 8218
, "ldquo" : 8220
, "rdquo" : 8221
, "bdquo" : 8222
, "dagger" : 8224
, "Dagger" : 8225
, "bull" : 8226
, "hellip" : 8230
, "permil" : 8240
, "prime" : 8242
, "Prime" : 8243
, "lsaquo" : 8249
, "rsaquo" : 8250
, "oline" : 8254
, "frasl" : 8260
, "euro" : 8364
, "image" : 8465
, "weierp" : 8472
, "real" : 8476
, "trade" : 8482
, "alefsym" : 8501
, "larr" : 8592
, "uarr" : 8593
, "rarr" : 8594
, "darr" : 8595
, "harr" : 8596
, "crarr" : 8629
, "lArr" : 8656
, "uArr" : 8657
, "rArr" : 8658
, "dArr" : 8659
, "hArr" : 8660
, "forall" : 8704
, "part" : 8706
, "exist" : 8707
, "empty" : 8709
, "nabla" : 8711
, "isin" : 8712
, "notin" : 8713
, "ni" : 8715
, "prod" : 8719
, "sum" : 8721
, "minus" : 8722
, "lowast" : 8727
, "radic" : 8730
, "prop" : 8733
, "infin" : 8734
, "ang" : 8736
, "and" : 8743
, "or" : 8744
, "cap" : 8745
, "cup" : 8746
, "int" : 8747
, "there4" : 8756
, "sim" : 8764
, "cong" : 8773
, "asymp" : 8776
, "ne" : 8800
, "equiv" : 8801
, "le" : 8804
, "ge" : 8805
, "sub" : 8834
, "sup" : 8835
, "nsub" : 8836
, "sube" : 8838
, "supe" : 8839
, "oplus" : 8853
, "otimes" : 8855
, "perp" : 8869
, "sdot" : 8901
, "lceil" : 8968
, "rceil" : 8969
, "lfloor" : 8970
, "rfloor" : 8971
, "lang" : 9001
, "rang" : 9002
, "loz" : 9674
, "spades" : 9824
, "clubs" : 9827
, "hearts" : 9829
, "diams" : 9830
}

Object.keys(sax.ENTITIES).forEach(function (key) {
    var e = sax.ENTITIES[key]
    var s = typeof e === 'number' ? String.fromCharCode(e) : e
    sax.ENTITIES[key] = s
})

for (var S in sax.STATE) sax.STATE[sax.STATE[S]] = S

// shorthand
S = sax.STATE

function emit (parser, event, data) {
  parser[event] && parser[event](data)
}

function emitNode (parser, nodeType, data) {
  if (parser.textNode) closeText(parser)
  emit(parser, nodeType, data)
}

function closeText (parser) {
  parser.textNode = textopts(parser.opt, parser.textNode)
  if (parser.textNode) emit(parser, "ontext", parser.textNode)
  parser.textNode = ""
}

function textopts (opt, text) {
  if (opt.trim) text = text.trim()
  if (opt.normalize) text = text.replace(/\s+/g, " ")
  return text
}

function error (parser, er) {
  closeText(parser)
  if (parser.trackPosition) {
    er += "\nLine: "+parser.line+
          "\nColumn: "+parser.column+
          "\nChar: "+parser.c
  }
  er = new Error(er)
  parser.error = er
  emit(parser, "onerror", er)
  return parser
}

function end (parser) {
  if (!parser.closedRoot) strictFail(parser, "Unclosed root tag")
  if ((parser.state !== S.BEGIN) && (parser.state !== S.TEXT)) error(parser, "Unexpected end")
  closeText(parser)
  parser.c = ""
  parser.closed = true
  emit(parser, "onend")
  SAXParser.call(parser, parser.strict, parser.opt)
  return parser
}

function strictFail (parser, message) {
  if (typeof parser !== 'object' || !(parser instanceof SAXParser))
    throw new Error('bad call to strictFail');
  if (parser.strict) error(parser, message)
}

function newTag (parser) {
  if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]()
  var parent = parser.tags[parser.tags.length - 1] || parser
    , tag = parser.tag = { name : parser.tagName, attributes : {} }

  // will be overridden if tag contails an xmlns="foo" or xmlns:foo="bar"
  if (parser.opt.xmlns) tag.ns = parent.ns
  parser.attribList.length = 0
}

function qname (name, attribute) {
  var i = name.indexOf(":")
    , qualName = i < 0 ? [ "", name ] : name.split(":")
    , prefix = qualName[0]
    , local = qualName[1]

  // <x "xmlns"="http://foo">
  if (attribute && name === "xmlns") {
    prefix = "xmlns"
    local = ""
  }

  return { prefix: prefix, local: local }
}

function attrib (parser) {
  if (!parser.strict) parser.attribName = parser.attribName[parser.looseCase]()

  if (parser.attribList.indexOf(parser.attribName) !== -1 ||
      parser.tag.attributes.hasOwnProperty(parser.attribName)) {
    return parser.attribName = parser.attribValue = ""
  }

  if (parser.opt.xmlns) {
    var qn = qname(parser.attribName, true)
      , prefix = qn.prefix
      , local = qn.local

    if (prefix === "xmlns") {
      // namespace binding attribute; push the binding into scope
      if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
        strictFail( parser
                  , "xml: prefix must be bound to " + XML_NAMESPACE + "\n"
                  + "Actual: " + parser.attribValue )
      } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
        strictFail( parser
                  , "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\n"
                  + "Actual: " + parser.attribValue )
      } else {
        var tag = parser.tag
          , parent = parser.tags[parser.tags.length - 1] || parser
        if (tag.ns === parent.ns) {
          tag.ns = Object.create(parent.ns)
        }
        tag.ns[local] = parser.attribValue
      }
    }

    // defer onattribute events until all attributes have been seen
    // so any new bindings can take effect; preserve attribute order
    // so deferred events can be emitted in document order
    parser.attribList.push([parser.attribName, parser.attribValue])
  } else {
    // in non-xmlns mode, we can emit the event right away
    parser.tag.attributes[parser.attribName] = parser.attribValue
    emitNode( parser
            , "onattribute"
            , { name: parser.attribName
              , value: parser.attribValue } )
  }

  parser.attribName = parser.attribValue = ""
}

function openTag (parser, selfClosing) {
  if (parser.opt.xmlns) {
    // emit namespace binding events
    var tag = parser.tag

    // add namespace info to tag
    var qn = qname(parser.tagName)
    tag.prefix = qn.prefix
    tag.local = qn.local
    tag.uri = tag.ns[qn.prefix] || ""

    if (tag.prefix && !tag.uri) {
      strictFail(parser, "Unbound namespace prefix: "
                       + JSON.stringify(parser.tagName))
      tag.uri = qn.prefix
    }

    var parent = parser.tags[parser.tags.length - 1] || parser
    if (tag.ns && parent.ns !== tag.ns) {
      Object.keys(tag.ns).forEach(function (p) {
        emitNode( parser
                , "onopennamespace"
                , { prefix: p , uri: tag.ns[p] } )
      })
    }

    // handle deferred onattribute events
    // Note: do not apply default ns to attributes:
    //   http://www.w3.org/TR/REC-xml-names/#defaulting
    for (var i = 0, l = parser.attribList.length; i < l; i ++) {
      var nv = parser.attribList[i]
      var name = nv[0]
        , value = nv[1]
        , qualName = qname(name, true)
        , prefix = qualName.prefix
        , local = qualName.local
        , uri = prefix == "" ? "" : (tag.ns[prefix] || "")
        , a = { name: name
              , value: value
              , prefix: prefix
              , local: local
              , uri: uri
              }

      // if there's any attributes with an undefined namespace,
      // then fail on them now.
      if (prefix && prefix != "xmlns" && !uri) {
        strictFail(parser, "Unbound namespace prefix: "
                         + JSON.stringify(prefix))
        a.uri = prefix
      }
      parser.tag.attributes[name] = a
      emitNode(parser, "onattribute", a)
    }
    parser.attribList.length = 0
  }

  parser.tag.isSelfClosing = !!selfClosing

  // process the tag
  parser.sawRoot = true
  parser.tags.push(parser.tag)
  emitNode(parser, "onopentag", parser.tag)
  if (!selfClosing) {
    // special case for <script> in non-strict mode.
    if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
      parser.state = S.SCRIPT
    } else {
      parser.state = S.TEXT
    }
    parser.tag = null
    parser.tagName = ""
  }
  parser.attribName = parser.attribValue = ""
  parser.attribList.length = 0
}

function closeTag (parser) {
  if (!parser.tagName) {
    strictFail(parser, "Weird empty close tag.")
    parser.textNode += "</>"
    parser.state = S.TEXT
    return
  }

  if (parser.script) {
    if (parser.tagName !== "script") {
      parser.script += "</" + parser.tagName + ">"
      parser.tagName = ""
      parser.state = S.SCRIPT
      return
    }
    emitNode(parser, "onscript", parser.script)
    parser.script = ""
  }

  // first make sure that the closing tag actually exists.
  // <a><b></c></b></a> will close everything, otherwise.
  var t = parser.tags.length
  var tagName = parser.tagName
  if (!parser.strict) tagName = tagName[parser.looseCase]()
  var closeTo = tagName
  while (t --) {
    var close = parser.tags[t]
    if (close.name !== closeTo) {
      // fail the first time in strict mode
      strictFail(parser, "Unexpected close tag")
    } else break
  }

  // didn't find it.  we already failed for strict, so just abort.
  if (t < 0) {
    strictFail(parser, "Unmatched closing tag: "+parser.tagName)
    parser.textNode += "</" + parser.tagName + ">"
    parser.state = S.TEXT
    return
  }
  parser.tagName = tagName
  var s = parser.tags.length
  while (s --> t) {
    var tag = parser.tag = parser.tags.pop()
    parser.tagName = parser.tag.name
    emitNode(parser, "onclosetag", parser.tagName)

    var x = {}
    for (var i in tag.ns) x[i] = tag.ns[i]

    var parent = parser.tags[parser.tags.length - 1] || parser
    if (parser.opt.xmlns && tag.ns !== parent.ns) {
      // remove namespace bindings introduced by tag
      Object.keys(tag.ns).forEach(function (p) {
        var n = tag.ns[p]
        emitNode(parser, "onclosenamespace", { prefix: p, uri: n })
      })
    }
  }
  if (t === 0) parser.closedRoot = true
  parser.tagName = parser.attribValue = parser.attribName = ""
  parser.attribList.length = 0
  parser.state = S.TEXT
}

function parseEntity (parser) {
  var entity = parser.entity
    , entityLC = entity.toLowerCase()
    , num
    , numStr = ""
  if (parser.ENTITIES[entity])
    return parser.ENTITIES[entity]
  if (parser.ENTITIES[entityLC])
    return parser.ENTITIES[entityLC]
  entity = entityLC
  if (entity.charAt(0) === "#") {
    if (entity.charAt(1) === "x") {
      entity = entity.slice(2)
      num = parseInt(entity, 16)
      numStr = num.toString(16)
    } else {
      entity = entity.slice(1)
      num = parseInt(entity, 10)
      numStr = num.toString(10)
    }
  }
  entity = entity.replace(/^0+/, "")
  if (numStr.toLowerCase() !== entity) {
    strictFail(parser, "Invalid character entity")
    return "&"+parser.entity + ";"
  }

  return String.fromCodePoint(num)
}

function write (chunk) {
  var parser = this
  if (this.error) throw this.error
  if (parser.closed) return error(parser,
    "Cannot write after close. Assign an onready handler.")
  if (chunk === null) return end(parser)
  var i = 0, c = ""
  while (parser.c = c = chunk.charAt(i++)) {
    if (parser.trackPosition) {
      parser.position ++
      if (c === "\n") {
        parser.line ++
        parser.column = 0
      } else parser.column ++
    }
    switch (parser.state) {

      case S.BEGIN:
        if (c === "<") {
          parser.state = S.OPEN_WAKA
          parser.startTagPosition = parser.position
        } else if (not(whitespace,c)) {
          // have to process this as a text node.
          // weird, but happens.
          strictFail(parser, "Non-whitespace before first tag.")
          parser.textNode = c
          parser.state = S.TEXT
        }
      continue

      case S.TEXT:
        if (parser.sawRoot && !parser.closedRoot) {
          var starti = i-1
          while (c && c!=="<" && c!=="&") {
            c = chunk.charAt(i++)
            if (c && parser.trackPosition) {
              parser.position ++
              if (c === "\n") {
                parser.line ++
                parser.column = 0
              } else parser.column ++
            }
          }
          parser.textNode += chunk.substring(starti, i-1)
        }
        if (c === "<") {
          parser.state = S.OPEN_WAKA
          parser.startTagPosition = parser.position
        } else {
          if (not(whitespace, c) && (!parser.sawRoot || parser.closedRoot))
            strictFail(parser, "Text data outside of root node.")
          if (c === "&") parser.state = S.TEXT_ENTITY
          else parser.textNode += c
        }
      continue

      case S.SCRIPT:
        // only non-strict
        if (c === "<") {
          parser.state = S.SCRIPT_ENDING
        } else parser.script += c
      continue

      case S.SCRIPT_ENDING:
        if (c === "/") {
          parser.state = S.CLOSE_TAG
        } else {
          parser.script += "<" + c
          parser.state = S.SCRIPT
        }
      continue

      case S.OPEN_WAKA:
        // either a /, ?, !, or text is coming next.
        if (c === "!") {
          parser.state = S.SGML_DECL
          parser.sgmlDecl = ""
        } else if (is(whitespace, c)) {
          // wait for it...
        } else if (is(nameStart,c)) {
          parser.state = S.OPEN_TAG
          parser.tagName = c
        } else if (c === "/") {
          parser.state = S.CLOSE_TAG
          parser.tagName = ""
        } else if (c === "?") {
          parser.state = S.PROC_INST
          parser.procInstName = parser.procInstBody = ""
        } else {
          strictFail(parser, "Unencoded <")
          // if there was some whitespace, then add that in.
          if (parser.startTagPosition + 1 < parser.position) {
            var pad = parser.position - parser.startTagPosition
            c = new Array(pad).join(" ") + c
          }
          parser.textNode += "<" + c
          parser.state = S.TEXT
        }
      continue

      case S.SGML_DECL:
        if ((parser.sgmlDecl+c).toUpperCase() === CDATA) {
          emitNode(parser, "onopencdata")
          parser.state = S.CDATA
          parser.sgmlDecl = ""
          parser.cdata = ""
        } else if (parser.sgmlDecl+c === "--") {
          parser.state = S.COMMENT
          parser.comment = ""
          parser.sgmlDecl = ""
        } else if ((parser.sgmlDecl+c).toUpperCase() === DOCTYPE) {
          parser.state = S.DOCTYPE
          if (parser.doctype || parser.sawRoot) strictFail(parser,
            "Inappropriately located doctype declaration")
          parser.doctype = ""
          parser.sgmlDecl = ""
        } else if (c === ">") {
          emitNode(parser, "onsgmldeclaration", parser.sgmlDecl)
          parser.sgmlDecl = ""
          parser.state = S.TEXT
        } else if (is(quote, c)) {
          parser.state = S.SGML_DECL_QUOTED
          parser.sgmlDecl += c
        } else parser.sgmlDecl += c
      continue

      case S.SGML_DECL_QUOTED:
        if (c === parser.q) {
          parser.state = S.SGML_DECL
          parser.q = ""
        }
        parser.sgmlDecl += c
      continue

      case S.DOCTYPE:
        if (c === ">") {
          parser.state = S.TEXT
          emitNode(parser, "ondoctype", parser.doctype)
          parser.doctype = true // just remember that we saw it.
        } else {
          parser.doctype += c
          if (c === "[") parser.state = S.DOCTYPE_DTD
          else if (is(quote, c)) {
            parser.state = S.DOCTYPE_QUOTED
            parser.q = c
          }
        }
      continue

      case S.DOCTYPE_QUOTED:
        parser.doctype += c
        if (c === parser.q) {
          parser.q = ""
          parser.state = S.DOCTYPE
        }
      continue

      case S.DOCTYPE_DTD:
        parser.doctype += c
        if (c === "]") parser.state = S.DOCTYPE
        else if (is(quote,c)) {
          parser.state = S.DOCTYPE_DTD_QUOTED
          parser.q = c
        }
      continue

      case S.DOCTYPE_DTD_QUOTED:
        parser.doctype += c
        if (c === parser.q) {
          parser.state = S.DOCTYPE_DTD
          parser.q = ""
        }
      continue

      case S.COMMENT:
        if (c === "-") parser.state = S.COMMENT_ENDING
        else parser.comment += c
      continue

      case S.COMMENT_ENDING:
        if (c === "-") {
          parser.state = S.COMMENT_ENDED
          parser.comment = textopts(parser.opt, parser.comment)
          if (parser.comment) emitNode(parser, "oncomment", parser.comment)
          parser.comment = ""
        } else {
          parser.comment += "-" + c
          parser.state = S.COMMENT
        }
      continue

      case S.COMMENT_ENDED:
        if (c !== ">") {
          strictFail(parser, "Malformed comment")
          // allow <!-- blah -- bloo --> in non-strict mode,
          // which is a comment of " blah -- bloo "
          parser.comment += "--" + c
          parser.state = S.COMMENT
        } else parser.state = S.TEXT
      continue

      case S.CDATA:
        if (c === "]") parser.state = S.CDATA_ENDING
        else parser.cdata += c
      continue

      case S.CDATA_ENDING:
        if (c === "]") parser.state = S.CDATA_ENDING_2
        else {
          parser.cdata += "]" + c
          parser.state = S.CDATA
        }
      continue

      case S.CDATA_ENDING_2:
        if (c === ">") {
          if (parser.cdata) emitNode(parser, "oncdata", parser.cdata)
          emitNode(parser, "onclosecdata")
          parser.cdata = ""
          parser.state = S.TEXT
        } else if (c === "]") {
          parser.cdata += "]"
        } else {
          parser.cdata += "]]" + c
          parser.state = S.CDATA
        }
      continue

      case S.PROC_INST:
        if (c === "?") parser.state = S.PROC_INST_ENDING
        else if (is(whitespace, c)) parser.state = S.PROC_INST_BODY
        else parser.procInstName += c
      continue

      case S.PROC_INST_BODY:
        if (!parser.procInstBody && is(whitespace, c)) continue
        else if (c === "?") parser.state = S.PROC_INST_ENDING
        else parser.procInstBody += c
      continue

      case S.PROC_INST_ENDING:
        if (c === ">") {
          emitNode(parser, "onprocessinginstruction", {
            name : parser.procInstName,
            body : parser.procInstBody
          })
          parser.procInstName = parser.procInstBody = ""
          parser.state = S.TEXT
        } else {
          parser.procInstBody += "?" + c
          parser.state = S.PROC_INST_BODY
        }
      continue

      case S.OPEN_TAG:
        if (is(nameBody, c)) parser.tagName += c
        else {
          newTag(parser)
          if (c === ">") openTag(parser)
          else if (c === "/") parser.state = S.OPEN_TAG_SLASH
          else {
            if (not(whitespace, c)) strictFail(
              parser, "Invalid character in tag name")
            parser.state = S.ATTRIB
          }
        }
      continue

      case S.OPEN_TAG_SLASH:
        if (c === ">") {
          openTag(parser, true)
          closeTag(parser)
        } else {
          strictFail(parser, "Forward-slash in opening tag not followed by >")
          parser.state = S.ATTRIB
        }
      continue

      case S.ATTRIB:
        // haven't read the attribute name yet.
        if (is(whitespace, c)) continue
        else if (c === ">") openTag(parser)
        else if (c === "/") parser.state = S.OPEN_TAG_SLASH
        else if (is(nameStart, c)) {
          parser.attribName = c
          parser.attribValue = ""
          parser.state = S.ATTRIB_NAME
        } else strictFail(parser, "Invalid attribute name")
      continue

      case S.ATTRIB_NAME:
        if (c === "=") parser.state = S.ATTRIB_VALUE
        else if (c === ">") {
          strictFail(parser, "Attribute without value")
          parser.attribValue = parser.attribName
          attrib(parser)
          openTag(parser)
        }
        else if (is(whitespace, c)) parser.state = S.ATTRIB_NAME_SAW_WHITE
        else if (is(nameBody, c)) parser.attribName += c
        else strictFail(parser, "Invalid attribute name")
      continue

      case S.ATTRIB_NAME_SAW_WHITE:
        if (c === "=") parser.state = S.ATTRIB_VALUE
        else if (is(whitespace, c)) continue
        else {
          strictFail(parser, "Attribute without value")
          parser.tag.attributes[parser.attribName] = ""
          parser.attribValue = ""
          emitNode(parser, "onattribute",
                   { name : parser.attribName, value : "" })
          parser.attribName = ""
          if (c === ">") openTag(parser)
          else if (is(nameStart, c)) {
            parser.attribName = c
            parser.state = S.ATTRIB_NAME
          } else {
            strictFail(parser, "Invalid attribute name")
            parser.state = S.ATTRIB
          }
        }
      continue

      case S.ATTRIB_VALUE:
        if (is(whitespace, c)) continue
        else if (is(quote, c)) {
          parser.q = c
          parser.state = S.ATTRIB_VALUE_QUOTED
        } else {
          strictFail(parser, "Unquoted attribute value")
          parser.state = S.ATTRIB_VALUE_UNQUOTED
          parser.attribValue = c
        }
      continue

      case S.ATTRIB_VALUE_QUOTED:
        if (c !== parser.q) {
          if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_Q
          else parser.attribValue += c
          continue
        }
        attrib(parser)
        parser.q = ""
        parser.state = S.ATTRIB_VALUE_CLOSED
      continue

      case S.ATTRIB_VALUE_CLOSED:
        if (is(whitespace, c)) {
          parser.state = S.ATTRIB
        } else if (c === ">") openTag(parser)
        else if (c === "/") parser.state = S.OPEN_TAG_SLASH
        else if (is(nameStart, c)) {
          strictFail(parser, "No whitespace between attributes")
          parser.attribName = c
          parser.attribValue = ""
          parser.state = S.ATTRIB_NAME
        } else strictFail(parser, "Invalid attribute name")
      continue

      case S.ATTRIB_VALUE_UNQUOTED:
        if (not(attribEnd,c)) {
          if (c === "&") parser.state = S.ATTRIB_VALUE_ENTITY_U
          else parser.attribValue += c
          continue
        }
        attrib(parser)
        if (c === ">") openTag(parser)
        else parser.state = S.ATTRIB
      continue

      case S.CLOSE_TAG:
        if (!parser.tagName) {
          if (is(whitespace, c)) continue
          else if (not(nameStart, c)) {
            if (parser.script) {
              parser.script += "</" + c
              parser.state = S.SCRIPT
            } else {
              strictFail(parser, "Invalid tagname in closing tag.")
            }
          } else parser.tagName = c
        }
        else if (c === ">") closeTag(parser)
        else if (is(nameBody, c)) parser.tagName += c
        else if (parser.script) {
          parser.script += "</" + parser.tagName
          parser.tagName = ""
          parser.state = S.SCRIPT
        } else {
          if (not(whitespace, c)) strictFail(parser,
            "Invalid tagname in closing tag")
          parser.state = S.CLOSE_TAG_SAW_WHITE
        }
      continue

      case S.CLOSE_TAG_SAW_WHITE:
        if (is(whitespace, c)) continue
        if (c === ">") closeTag(parser)
        else strictFail(parser, "Invalid characters in closing tag")
      continue

      case S.TEXT_ENTITY:
      case S.ATTRIB_VALUE_ENTITY_Q:
      case S.ATTRIB_VALUE_ENTITY_U:
        switch(parser.state) {
          case S.TEXT_ENTITY:
            var returnState = S.TEXT, buffer = "textNode"
          break

          case S.ATTRIB_VALUE_ENTITY_Q:
            var returnState = S.ATTRIB_VALUE_QUOTED, buffer = "attribValue"
          break

          case S.ATTRIB_VALUE_ENTITY_U:
            var returnState = S.ATTRIB_VALUE_UNQUOTED, buffer = "attribValue"
          break
        }
        if (c === ";") {
          parser[buffer] += parseEntity(parser)
          parser.entity = ""
          parser.state = returnState
        }
        else if (is(entity, c)) parser.entity += c
        else {
          strictFail(parser, "Invalid character entity")
          parser[buffer] += "&" + parser.entity + c
          parser.entity = ""
          parser.state = returnState
        }
      continue

      default:
        throw new Error(parser, "Unknown state: " + parser.state)
    }
  } // while
  // cdata blocks can get very big under normal conditions. emit and move on.
  // if (parser.state === S.CDATA && parser.cdata) {
  //   emitNode(parser, "oncdata", parser.cdata)
  //   parser.cdata = ""
  // }
  if (parser.position >= parser.bufferCheckPosition) checkBufferLength(parser)
  return parser
}

/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */
if (!String.fromCodePoint) {
        (function() {
                var stringFromCharCode = String.fromCharCode;
                var floor = Math.floor;
                var fromCodePoint = function() {
                        var MAX_SIZE = 0x4000;
                        var codeUnits = [];
                        var highSurrogate;
                        var lowSurrogate;
                        var index = -1;
                        var length = arguments.length;
                        if (!length) {
                                return '';
                        }
                        var result = '';
                        while (++index < length) {
                                var codePoint = Number(arguments[index]);
                                if (
                                        !isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
                                        codePoint < 0 || // not a valid Unicode code point
                                        codePoint > 0x10FFFF || // not a valid Unicode code point
                                        floor(codePoint) != codePoint // not an integer
                                ) {
                                        throw RangeError('Invalid code point: ' + codePoint);
                                }
                                if (codePoint <= 0xFFFF) { // BMP code point
                                        codeUnits.push(codePoint);
                                } else { // Astral code point; split in surrogate halves
                                        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
                                        codePoint -= 0x10000;
                                        highSurrogate = (codePoint >> 10) + 0xD800;
                                        lowSurrogate = (codePoint % 0x400) + 0xDC00;
                                        codeUnits.push(highSurrogate, lowSurrogate);
                                }
                                if (index + 1 == length || codeUnits.length > MAX_SIZE) {
                                        result += stringFromCharCode.apply(null, codeUnits);
                                        codeUnits.length = 0;
                                }
                        }
                        return result;
                };
                if (Object.defineProperty) {
                        Object.defineProperty(String, 'fromCodePoint', {
                                'value': fromCodePoint,
                                'configurable': true,
                                'writable': true
                        });
                } else {
                        String.fromCodePoint = fromCodePoint;
                }
        }());
}

})(typeof exports === "undefined" ? sax = {} : exports);

}).call(this,require("buffer").Buffer)
},{"buffer":36,"stream":122,"string_decoder":124}],113:[function(require,module,exports){
'use strict';
module.exports = require('./lib/index');

},{"./lib/index":117}],114:[function(require,module,exports){
'use strict';

var randomFromSeed = require('./random/random-from-seed');

var ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
var alphabet;
var previousSeed;

var shuffled;

function reset() {
    shuffled = false;
}

function setCharacters(_alphabet_) {
    if (!_alphabet_) {
        if (alphabet !== ORIGINAL) {
            alphabet = ORIGINAL;
            reset();
        }
        return;
    }

    if (_alphabet_ === alphabet) {
        return;
    }

    if (_alphabet_.length !== ORIGINAL.length) {
        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
    }

    var unique = _alphabet_.split('').filter(function(item, ind, arr){
       return ind !== arr.lastIndexOf(item);
    });

    if (unique.length) {
        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
    }

    alphabet = _alphabet_;
    reset();
}

function characters(_alphabet_) {
    setCharacters(_alphabet_);
    return alphabet;
}

function setSeed(seed) {
    randomFromSeed.seed(seed);
    if (previousSeed !== seed) {
        reset();
        previousSeed = seed;
    }
}

function shuffle() {
    if (!alphabet) {
        setCharacters(ORIGINAL);
    }

    var sourceArray = alphabet.split('');
    var targetArray = [];
    var r = randomFromSeed.nextValue();
    var characterIndex;

    while (sourceArray.length > 0) {
        r = randomFromSeed.nextValue();
        characterIndex = Math.floor(r * sourceArray.length);
        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
    }
    return targetArray.join('');
}

function getShuffled() {
    if (shuffled) {
        return shuffled;
    }
    shuffled = shuffle();
    return shuffled;
}

/**
 * lookup shuffled letter
 * @param index
 * @returns {string}
 */
function lookup(index) {
    var alphabetShuffled = getShuffled();
    return alphabetShuffled[index];
}

module.exports = {
    characters: characters,
    seed: setSeed,
    lookup: lookup,
    shuffled: getShuffled
};

},{"./random/random-from-seed":120}],115:[function(require,module,exports){
'use strict';
var alphabet = require('./alphabet');

/**
 * Decode the id to get the version and worker
 * Mainly for debugging and testing.
 * @param id - the shortid-generated id.
 */
function decode(id) {
    var characters = alphabet.shuffled();
    return {
        version: characters.indexOf(id.substr(0, 1)) & 0x0f,
        worker: characters.indexOf(id.substr(1, 1)) & 0x0f
    };
}

module.exports = decode;

},{"./alphabet":114}],116:[function(require,module,exports){
'use strict';

var randomByte = require('./random/random-byte');

function encode(lookup, number) {
    var loopCounter = 0;
    var done;

    var str = '';

    while (!done) {
        str = str + lookup( ( (number >> (4 * loopCounter)) & 0x0f ) | randomByte() );
        done = number < (Math.pow(16, loopCounter + 1 ) );
        loopCounter++;
    }
    return str;
}

module.exports = encode;

},{"./random/random-byte":119}],117:[function(require,module,exports){
'use strict';

var alphabet = require('./alphabet');
var encode = require('./encode');
var decode = require('./decode');
var isValid = require('./is-valid');

// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.
// This number should be updated every year or so to keep the generated id short.
// To regenerate `new Date() - 0` and bump the version. Always bump the version!
var REDUCE_TIME = 1459707606518;

// don't change unless we change the algos or REDUCE_TIME
// must be an integer and less than 16
var version = 6;

// if you are using cluster or multiple servers use this to make each instance
// has a unique value for worker
// Note: I don't know if this is automatically set when using third
// party cluster solutions such as pm2.
var clusterWorkerId = require('./util/cluster-worker-id') || 0;

// Counter is used when shortid is called multiple times in one second.
var counter;

// Remember the last time shortid was called in case counter is needed.
var previousSeconds;

/**
 * Generate unique id
 * Returns string id
 */
function generate() {

    var str = '';

    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);

    if (seconds === previousSeconds) {
        counter++;
    } else {
        counter = 0;
        previousSeconds = seconds;
    }

    str = str + encode(alphabet.lookup, version);
    str = str + encode(alphabet.lookup, clusterWorkerId);
    if (counter > 0) {
        str = str + encode(alphabet.lookup, counter);
    }
    str = str + encode(alphabet.lookup, seconds);

    return str;
}


/**
 * Set the seed.
 * Highly recommended if you don't want people to try to figure out your id schema.
 * exposed as shortid.seed(int)
 * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.
 */
function seed(seedValue) {
    alphabet.seed(seedValue);
    return module.exports;
}

/**
 * Set the cluster worker or machine id
 * exposed as shortid.worker(int)
 * @param workerId worker must be positive integer.  Number less than 16 is recommended.
 * returns shortid module so it can be chained.
 */
function worker(workerId) {
    clusterWorkerId = workerId;
    return module.exports;
}

/**
 *
 * sets new characters to use in the alphabet
 * returns the shuffled alphabet
 */
function characters(newCharacters) {
    if (newCharacters !== undefined) {
        alphabet.characters(newCharacters);
    }

    return alphabet.shuffled();
}


// Export all other functions as properties of the generate function
module.exports = generate;
module.exports.generate = generate;
module.exports.seed = seed;
module.exports.worker = worker;
module.exports.characters = characters;
module.exports.decode = decode;
module.exports.isValid = isValid;

},{"./alphabet":114,"./decode":115,"./encode":116,"./is-valid":118,"./util/cluster-worker-id":121}],118:[function(require,module,exports){
'use strict';
var alphabet = require('./alphabet');

function isShortId(id) {
    if (!id || typeof id !== 'string' || id.length < 6 ) {
        return false;
    }

    var characters = alphabet.characters();
    var len = id.length;
    for(var i = 0; i < len;i++) {
        if (characters.indexOf(id[i]) === -1) {
            return false;
        }
    }
    return true;
}

module.exports = isShortId;

},{"./alphabet":114}],119:[function(require,module,exports){
'use strict';

var crypto = typeof window === 'object' && (window.crypto || window.msCrypto); // IE 11 uses window.msCrypto

function randomByte() {
    if (!crypto || !crypto.getRandomValues) {
        return Math.floor(Math.random() * 256) & 0x30;
    }
    var dest = new Uint8Array(1);
    crypto.getRandomValues(dest);
    return dest[0] & 0x30;
}

module.exports = randomByte;

},{}],120:[function(require,module,exports){
'use strict';

// Found this seed-based random generator somewhere
// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)

var seed = 1;

/**
 * return a random number based on a seed
 * @param seed
 * @returns {number}
 */
function getNextValue() {
    seed = (seed * 9301 + 49297) % 233280;
    return seed/(233280.0);
}

function setSeed(_seed_) {
    seed = _seed_;
}

module.exports = {
    nextValue: getNextValue,
    seed: setSeed
};

},{}],121:[function(require,module,exports){
'use strict';

module.exports = 0;

},{}],122:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

module.exports = Stream;

var EE = require('events').EventEmitter;
var inherits = require('inherits');

inherits(Stream, EE);
Stream.Readable = require('readable-stream/readable.js');
Stream.Writable = require('readable-stream/writable.js');
Stream.Duplex = require('readable-stream/duplex.js');
Stream.Transform = require('readable-stream/transform.js');
Stream.PassThrough = require('readable-stream/passthrough.js');

// Backwards-compat with node 0.4.x
Stream.Stream = Stream;



// old-style streams.  Note that the pipe method (the only relevant
// part of this class) is overridden in the Readable class.

function Stream() {
  EE.call(this);
}

Stream.prototype.pipe = function(dest, options) {
  var source = this;

  function ondata(chunk) {
    if (dest.writable) {
      if (false === dest.write(chunk) && source.pause) {
        source.pause();
      }
    }
  }

  source.on('data', ondata);

  function ondrain() {
    if (source.readable && source.resume) {
      source.resume();
    }
  }

  dest.on('drain', ondrain);

  // If the 'end' option is not supplied, dest.end() will be called when
  // source gets the 'end' or 'close' events.  Only dest.end() once.
  if (!dest._isStdio && (!options || options.end !== false)) {
    source.on('end', onend);
    source.on('close', onclose);
  }

  var didOnEnd = false;
  function onend() {
    if (didOnEnd) return;
    didOnEnd = true;

    dest.end();
  }


  function onclose() {
    if (didOnEnd) return;
    didOnEnd = true;

    if (typeof dest.destroy === 'function') dest.destroy();
  }

  // don't leave dangling pipes when there are errors.
  function onerror(er) {
    cleanup();
    if (EE.listenerCount(this, 'error') === 0) {
      throw er; // Unhandled stream error in pipe.
    }
  }

  source.on('error', onerror);
  dest.on('error', onerror);

  // remove all the event listeners that were added.
  function cleanup() {
    source.removeListener('data', ondata);
    dest.removeListener('drain', ondrain);

    source.removeListener('end', onend);
    source.removeListener('close', onclose);

    source.removeListener('error', onerror);
    dest.removeListener('error', onerror);

    source.removeListener('end', cleanup);
    source.removeListener('close', cleanup);

    dest.removeListener('close', cleanup);
  }

  source.on('end', cleanup);
  source.on('close', cleanup);

  dest.on('close', cleanup);

  dest.emit('pipe', source);

  // Allow for unix-like usage: A.pipe(B).pipe(C)
  return dest;
};

},{"events":40,"inherits":123,"readable-stream/duplex.js":101,"readable-stream/passthrough.js":108,"readable-stream/readable.js":109,"readable-stream/transform.js":110,"readable-stream/writable.js":111}],123:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"dup":78}],124:[function(require,module,exports){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var Buffer = require('buffer').Buffer;

var isBufferEncoding = Buffer.isEncoding
  || function(encoding) {
       switch (encoding && encoding.toLowerCase()) {
         case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
         default: return false;
       }
     }


function assertEncoding(encoding) {
  if (encoding && !isBufferEncoding(encoding)) {
    throw new Error('Unknown encoding: ' + encoding);
  }
}

// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters. CESU-8 is handled as part of the UTF-8 encoding.
//
// @TODO Handling all encodings inside a single object makes it very difficult
// to reason about this code, so it should be split up in the future.
// @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
// points as used by CESU-8.
var StringDecoder = exports.StringDecoder = function(encoding) {
  this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
  assertEncoding(encoding);
  switch (this.encoding) {
    case 'utf8':
      // CESU-8 represents each of Surrogate Pair by 3-bytes
      this.surrogateSize = 3;
      break;
    case 'ucs2':
    case 'utf16le':
      // UTF-16 represents each of Surrogate Pair by 2-bytes
      this.surrogateSize = 2;
      this.detectIncompleteChar = utf16DetectIncompleteChar;
      break;
    case 'base64':
      // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
      this.surrogateSize = 3;
      this.detectIncompleteChar = base64DetectIncompleteChar;
      break;
    default:
      this.write = passThroughWrite;
      return;
  }

  // Enough space to store all bytes of a single character. UTF-8 needs 4
  // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
  this.charBuffer = new Buffer(6);
  // Number of bytes received for the current incomplete multi-byte character.
  this.charReceived = 0;
  // Number of bytes expected for the current incomplete multi-byte character.
  this.charLength = 0;
};


// write decodes the given buffer and returns it as JS string that is
// guaranteed to not contain any partial multi-byte characters. Any partial
// character found at the end of the buffer is buffered up, and will be
// returned when calling write again with the remaining bytes.
//
// Note: Converting a Buffer containing an orphan surrogate to a String
// currently works, but converting a String to a Buffer (via `new Buffer`, or
// Buffer#write) will replace incomplete surrogates with the unicode
// replacement character. See https://codereview.chromium.org/121173009/ .
StringDecoder.prototype.write = function(buffer) {
  var charStr = '';
  // if our last write ended with an incomplete multibyte character
  while (this.charLength) {
    // determine how many remaining bytes this buffer has to offer for this char
    var available = (buffer.length >= this.charLength - this.charReceived) ?
        this.charLength - this.charReceived :
        buffer.length;

    // add the new bytes to the char buffer
    buffer.copy(this.charBuffer, this.charReceived, 0, available);
    this.charReceived += available;

    if (this.charReceived < this.charLength) {
      // still not enough chars in this buffer? wait for more ...
      return '';
    }

    // remove bytes belonging to the current character from the buffer
    buffer = buffer.slice(available, buffer.length);

    // get the character that was split
    charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

    // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
    var charCode = charStr.charCodeAt(charStr.length - 1);
    if (charCode >= 0xD800 && charCode <= 0xDBFF) {
      this.charLength += this.surrogateSize;
      charStr = '';
      continue;
    }
    this.charReceived = this.charLength = 0;

    // if there are no more bytes in this buffer, just emit our char
    if (buffer.length === 0) {
      return charStr;
    }
    break;
  }

  // determine and set charLength / charReceived
  this.detectIncompleteChar(buffer);

  var end = buffer.length;
  if (this.charLength) {
    // buffer the incomplete character bytes we got
    buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
    end -= this.charReceived;
  }

  charStr += buffer.toString(this.encoding, 0, end);

  var end = charStr.length - 1;
  var charCode = charStr.charCodeAt(end);
  // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
  if (charCode >= 0xD800 && charCode <= 0xDBFF) {
    var size = this.surrogateSize;
    this.charLength += size;
    this.charReceived += size;
    this.charBuffer.copy(this.charBuffer, size, 0, size);
    buffer.copy(this.charBuffer, 0, 0, size);
    return charStr.substring(0, end);
  }

  // or just emit the charStr
  return charStr;
};

// detectIncompleteChar determines if there is an incomplete UTF-8 character at
// the end of the given buffer. If so, it sets this.charLength to the byte
// length that character, and sets this.charReceived to the number of bytes
// that are available for this character.
StringDecoder.prototype.detectIncompleteChar = function(buffer) {
  // determine how many bytes we have to check at the end of this buffer
  var i = (buffer.length >= 3) ? 3 : buffer.length;

  // Figure out if one of the last i bytes of our buffer announces an
  // incomplete char.
  for (; i > 0; i--) {
    var c = buffer[buffer.length - i];

    // See http://en.wikipedia.org/wiki/UTF-8#Description

    // 110XXXXX
    if (i == 1 && c >> 5 == 0x06) {
      this.charLength = 2;
      break;
    }

    // 1110XXXX
    if (i <= 2 && c >> 4 == 0x0E) {
      this.charLength = 3;
      break;
    }

    // 11110XXX
    if (i <= 3 && c >> 3 == 0x1E) {
      this.charLength = 4;
      break;
    }
  }
  this.charReceived = i;
};

StringDecoder.prototype.end = function(buffer) {
  var res = '';
  if (buffer && buffer.length)
    res = this.write(buffer);

  if (this.charReceived) {
    var cr = this.charReceived;
    var buf = this.charBuffer;
    var enc = this.encoding;
    res += buf.slice(0, cr).toString(enc);
  }

  return res;
};

function passThroughWrite(buffer) {
  return buffer.toString(this.encoding);
}

function utf16DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 2;
  this.charLength = this.charReceived ? 2 : 0;
}

function base64DetectIncompleteChar(buffer) {
  this.charReceived = buffer.length % 3;
  this.charLength = this.charReceived ? 3 : 0;
}

},{"buffer":36}],125:[function(require,module,exports){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
},{"process/browser.js":97}],126:[function(require,module,exports){
(function (global){

/**
 * Module exports.
 */

module.exports = deprecate;

/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */

function deprecate (fn, msg) {
  if (config('noDeprecation')) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (config('throwDeprecation')) {
        throw new Error(msg);
      } else if (config('traceDeprecation')) {
        console.trace(msg);
      } else {
        console.warn(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
}

/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */

function config (name) {
  // accessing global.localStorage can trigger a DOMException in sandboxed iframes
  try {
    if (!global.localStorage) return false;
  } catch (_) {
    return false;
  }
  var val = global.localStorage[name];
  if (null == val) return false;
  return String(val).toLowerCase() === 'true';
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],127:[function(require,module,exports){
arguments[4][78][0].apply(exports,arguments)
},{"dup":78}],128:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],129:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./support/isBuffer":128,"_process":97,"inherits":127}],130:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLAttribute, create;

  create = require('lodash/object/create');

  module.exports = XMLAttribute = (function() {
    function XMLAttribute(parent, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing attribute name of element " + parent.name);
      }
      if (value == null) {
        throw new Error("Missing attribute value for attribute " + name + " of element " + parent.name);
      }
      this.name = this.stringify.attName(name);
      this.value = this.stringify.attValue(value);
    }

    XMLAttribute.prototype.clone = function() {
      return create(XMLAttribute.prototype, this);
    };

    XMLAttribute.prototype.toString = function(options, level) {
      return ' ' + this.name + '="' + this.value + '"';
    };

    return XMLAttribute;

  })();

}).call(this);

},{"lodash/object/create":200}],131:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLBuilder, XMLDeclaration, XMLDocType, XMLElement, XMLStringifier;

  XMLStringifier = require('./XMLStringifier');

  XMLDeclaration = require('./XMLDeclaration');

  XMLDocType = require('./XMLDocType');

  XMLElement = require('./XMLElement');

  module.exports = XMLBuilder = (function() {
    function XMLBuilder(name, options) {
      var root, temp;
      if (name == null) {
        throw new Error("Root element needs a name");
      }
      if (options == null) {
        options = {};
      }
      this.options = options;
      this.stringify = new XMLStringifier(options);
      temp = new XMLElement(this, 'doc');
      root = temp.element(name);
      root.isRoot = true;
      root.documentObject = this;
      this.rootObject = root;
      if (!options.headless) {
        root.declaration(options);
        if ((options.pubID != null) || (options.sysID != null)) {
          root.doctype(options);
        }
      }
    }

    XMLBuilder.prototype.root = function() {
      return this.rootObject;
    };

    XMLBuilder.prototype.end = function(options) {
      return this.toString(options);
    };

    XMLBuilder.prototype.toString = function(options) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      r = '';
      if (this.xmldec != null) {
        r += this.xmldec.toString(options);
      }
      if (this.doctype != null) {
        r += this.doctype.toString(options);
      }
      r += this.rootObject.toString(options);
      if (pretty && r.slice(-newline.length) === newline) {
        r = r.slice(0, -newline.length);
      }
      return r;
    };

    return XMLBuilder;

  })();

}).call(this);

},{"./XMLDeclaration":138,"./XMLDocType":139,"./XMLElement":140,"./XMLStringifier":144}],132:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLCData, XMLNode, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/object/create');

  XMLNode = require('./XMLNode');

  module.exports = XMLCData = (function(superClass) {
    extend(XMLCData, superClass);

    function XMLCData(parent, text) {
      XMLCData.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing CDATA text");
      }
      this.text = this.stringify.cdata(text);
    }

    XMLCData.prototype.clone = function() {
      return create(XMLCData.prototype, this);
    };

    XMLCData.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<![CDATA[' + this.text + ']]>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLCData;

  })(XMLNode);

}).call(this);

},{"./XMLNode":141,"lodash/object/create":200}],133:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLComment, XMLNode, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/object/create');

  XMLNode = require('./XMLNode');

  module.exports = XMLComment = (function(superClass) {
    extend(XMLComment, superClass);

    function XMLComment(parent, text) {
      XMLComment.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing comment text");
      }
      this.text = this.stringify.comment(text);
    }

    XMLComment.prototype.clone = function() {
      return create(XMLComment.prototype, this);
    };

    XMLComment.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!-- ' + this.text + ' -->';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLComment;

  })(XMLNode);

}).call(this);

},{"./XMLNode":141,"lodash/object/create":200}],134:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDAttList, create;

  create = require('lodash/object/create');

  module.exports = XMLDTDAttList = (function() {
    function XMLDTDAttList(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      this.stringify = parent.stringify;
      if (elementName == null) {
        throw new Error("Missing DTD element name");
      }
      if (attributeName == null) {
        throw new Error("Missing DTD attribute name");
      }
      if (!attributeType) {
        throw new Error("Missing DTD attribute type");
      }
      if (!defaultValueType) {
        throw new Error("Missing DTD attribute default");
      }
      if (defaultValueType.indexOf('#') !== 0) {
        defaultValueType = '#' + defaultValueType;
      }
      if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
        throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");
      }
      if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
        throw new Error("Default value only applies to #FIXED or #DEFAULT");
      }
      this.elementName = this.stringify.eleName(elementName);
      this.attributeName = this.stringify.attName(attributeName);
      this.attributeType = this.stringify.dtdAttType(attributeType);
      this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
      this.defaultValueType = defaultValueType;
    }

    XMLDTDAttList.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ATTLIST ' + this.elementName + ' ' + this.attributeName + ' ' + this.attributeType;
      if (this.defaultValueType !== '#DEFAULT') {
        r += ' ' + this.defaultValueType;
      }
      if (this.defaultValue) {
        r += ' "' + this.defaultValue + '"';
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDAttList;

  })();

}).call(this);

},{"lodash/object/create":200}],135:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDElement, create;

  create = require('lodash/object/create');

  module.exports = XMLDTDElement = (function() {
    function XMLDTDElement(parent, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing DTD element name");
      }
      if (!value) {
        value = '(#PCDATA)';
      }
      if (Array.isArray(value)) {
        value = '(' + value.join(',') + ')';
      }
      this.name = this.stringify.eleName(name);
      this.value = this.stringify.dtdElementValue(value);
    }

    XMLDTDElement.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ELEMENT ' + this.name + ' ' + this.value + '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDElement;

  })();

}).call(this);

},{"lodash/object/create":200}],136:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDEntity, create, isObject;

  create = require('lodash/object/create');

  isObject = require('lodash/lang/isObject');

  module.exports = XMLDTDEntity = (function() {
    function XMLDTDEntity(parent, pe, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing entity name");
      }
      if (value == null) {
        throw new Error("Missing entity value");
      }
      this.pe = !!pe;
      this.name = this.stringify.eleName(name);
      if (!isObject(value)) {
        this.value = this.stringify.dtdEntityValue(value);
      } else {
        if (!value.pubID && !value.sysID) {
          throw new Error("Public and/or system identifiers are required for an external entity");
        }
        if (value.pubID && !value.sysID) {
          throw new Error("System identifier is required for a public external entity");
        }
        if (value.pubID != null) {
          this.pubID = this.stringify.dtdPubID(value.pubID);
        }
        if (value.sysID != null) {
          this.sysID = this.stringify.dtdSysID(value.sysID);
        }
        if (value.nData != null) {
          this.nData = this.stringify.dtdNData(value.nData);
        }
        if (this.pe && this.nData) {
          throw new Error("Notation declaration is not allowed in a parameter entity");
        }
      }
    }

    XMLDTDEntity.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!ENTITY';
      if (this.pe) {
        r += ' %';
      }
      r += ' ' + this.name;
      if (this.value) {
        r += ' "' + this.value + '"';
      } else {
        if (this.pubID && this.sysID) {
          r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
        } else if (this.sysID) {
          r += ' SYSTEM "' + this.sysID + '"';
        }
        if (this.nData) {
          r += ' NDATA ' + this.nData;
        }
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDEntity;

  })();

}).call(this);

},{"lodash/lang/isObject":196,"lodash/object/create":200}],137:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDTDNotation, create;

  create = require('lodash/object/create');

  module.exports = XMLDTDNotation = (function() {
    function XMLDTDNotation(parent, name, value) {
      this.stringify = parent.stringify;
      if (name == null) {
        throw new Error("Missing notation name");
      }
      if (!value.pubID && !value.sysID) {
        throw new Error("Public or system identifiers are required for an external entity");
      }
      this.name = this.stringify.eleName(name);
      if (value.pubID != null) {
        this.pubID = this.stringify.dtdPubID(value.pubID);
      }
      if (value.sysID != null) {
        this.sysID = this.stringify.dtdSysID(value.sysID);
      }
    }

    XMLDTDNotation.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!NOTATION ' + this.name;
      if (this.pubID && this.sysID) {
        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
      } else if (this.pubID) {
        r += ' PUBLIC "' + this.pubID + '"';
      } else if (this.sysID) {
        r += ' SYSTEM "' + this.sysID + '"';
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDTDNotation;

  })();

}).call(this);

},{"lodash/object/create":200}],138:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLDeclaration, XMLNode, create, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/object/create');

  isObject = require('lodash/lang/isObject');

  XMLNode = require('./XMLNode');

  module.exports = XMLDeclaration = (function(superClass) {
    extend(XMLDeclaration, superClass);

    function XMLDeclaration(parent, version, encoding, standalone) {
      var ref;
      XMLDeclaration.__super__.constructor.call(this, parent);
      if (isObject(version)) {
        ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
      }
      if (!version) {
        version = '1.0';
      }
      this.version = this.stringify.xmlVersion(version);
      if (encoding != null) {
        this.encoding = this.stringify.xmlEncoding(encoding);
      }
      if (standalone != null) {
        this.standalone = this.stringify.xmlStandalone(standalone);
      }
    }

    XMLDeclaration.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<?xml';
      r += ' version="' + this.version + '"';
      if (this.encoding != null) {
        r += ' encoding="' + this.encoding + '"';
      }
      if (this.standalone != null) {
        r += ' standalone="' + this.standalone + '"';
      }
      r += '?>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLDeclaration;

  })(XMLNode);

}).call(this);

},{"./XMLNode":141,"lodash/lang/isObject":196,"lodash/object/create":200}],139:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLProcessingInstruction, create, isObject;

  create = require('lodash/object/create');

  isObject = require('lodash/lang/isObject');

  XMLCData = require('./XMLCData');

  XMLComment = require('./XMLComment');

  XMLDTDAttList = require('./XMLDTDAttList');

  XMLDTDEntity = require('./XMLDTDEntity');

  XMLDTDElement = require('./XMLDTDElement');

  XMLDTDNotation = require('./XMLDTDNotation');

  XMLProcessingInstruction = require('./XMLProcessingInstruction');

  module.exports = XMLDocType = (function() {
    function XMLDocType(parent, pubID, sysID) {
      var ref, ref1;
      this.documentObject = parent;
      this.stringify = this.documentObject.stringify;
      this.children = [];
      if (isObject(pubID)) {
        ref = pubID, pubID = ref.pubID, sysID = ref.sysID;
      }
      if (sysID == null) {
        ref1 = [pubID, sysID], sysID = ref1[0], pubID = ref1[1];
      }
      if (pubID != null) {
        this.pubID = this.stringify.dtdPubID(pubID);
      }
      if (sysID != null) {
        this.sysID = this.stringify.dtdSysID(sysID);
      }
    }

    XMLDocType.prototype.element = function(name, value) {
      var child;
      child = new XMLDTDElement(this, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      var child;
      child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.entity = function(name, value) {
      var child;
      child = new XMLDTDEntity(this, false, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.pEntity = function(name, value) {
      var child;
      child = new XMLDTDEntity(this, true, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.notation = function(name, value) {
      var child;
      child = new XMLDTDNotation(this, name, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.cdata = function(value) {
      var child;
      child = new XMLCData(this, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.comment = function(value) {
      var child;
      child = new XMLComment(this, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.instruction = function(target, value) {
      var child;
      child = new XMLProcessingInstruction(this, target, value);
      this.children.push(child);
      return this;
    };

    XMLDocType.prototype.root = function() {
      return this.documentObject.root();
    };

    XMLDocType.prototype.document = function() {
      return this.documentObject;
    };

    XMLDocType.prototype.toString = function(options, level) {
      var child, i, indent, len, newline, offset, pretty, r, ref, ref1, ref2, ref3, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<!DOCTYPE ' + this.root().name;
      if (this.pubID && this.sysID) {
        r += ' PUBLIC "' + this.pubID + '" "' + this.sysID + '"';
      } else if (this.sysID) {
        r += ' SYSTEM "' + this.sysID + '"';
      }
      if (this.children.length > 0) {
        r += ' [';
        if (pretty) {
          r += newline;
        }
        ref3 = this.children;
        for (i = 0, len = ref3.length; i < len; i++) {
          child = ref3[i];
          r += child.toString(options, level + 1);
        }
        r += ']';
      }
      r += '>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    XMLDocType.prototype.ele = function(name, value) {
      return this.element(name, value);
    };

    XMLDocType.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
      return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
    };

    XMLDocType.prototype.ent = function(name, value) {
      return this.entity(name, value);
    };

    XMLDocType.prototype.pent = function(name, value) {
      return this.pEntity(name, value);
    };

    XMLDocType.prototype.not = function(name, value) {
      return this.notation(name, value);
    };

    XMLDocType.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLDocType.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLDocType.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLDocType.prototype.up = function() {
      return this.root();
    };

    XMLDocType.prototype.doc = function() {
      return this.document();
    };

    return XMLDocType;

  })();

}).call(this);

},{"./XMLCData":132,"./XMLComment":133,"./XMLDTDAttList":134,"./XMLDTDElement":135,"./XMLDTDEntity":136,"./XMLDTDNotation":137,"./XMLProcessingInstruction":142,"lodash/lang/isObject":196,"lodash/object/create":200}],140:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLAttribute, XMLElement, XMLNode, XMLProcessingInstruction, create, every, isFunction, isObject,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/object/create');

  isObject = require('lodash/lang/isObject');

  isFunction = require('lodash/lang/isFunction');

  every = require('lodash/collection/every');

  XMLNode = require('./XMLNode');

  XMLAttribute = require('./XMLAttribute');

  XMLProcessingInstruction = require('./XMLProcessingInstruction');

  module.exports = XMLElement = (function(superClass) {
    extend(XMLElement, superClass);

    function XMLElement(parent, name, attributes) {
      XMLElement.__super__.constructor.call(this, parent);
      if (name == null) {
        throw new Error("Missing element name");
      }
      this.name = this.stringify.eleName(name);
      this.children = [];
      this.instructions = [];
      this.attributes = {};
      if (attributes != null) {
        this.attribute(attributes);
      }
    }

    XMLElement.prototype.clone = function() {
      var att, attName, clonedSelf, i, len, pi, ref, ref1;
      clonedSelf = create(XMLElement.prototype, this);
      if (clonedSelf.isRoot) {
        clonedSelf.documentObject = null;
      }
      clonedSelf.attributes = {};
      ref = this.attributes;
      for (attName in ref) {
        if (!hasProp.call(ref, attName)) continue;
        att = ref[attName];
        clonedSelf.attributes[attName] = att.clone();
      }
      clonedSelf.instructions = [];
      ref1 = this.instructions;
      for (i = 0, len = ref1.length; i < len; i++) {
        pi = ref1[i];
        clonedSelf.instructions.push(pi.clone());
      }
      clonedSelf.children = [];
      this.children.forEach(function(child) {
        var clonedChild;
        clonedChild = child.clone();
        clonedChild.parent = clonedSelf;
        return clonedSelf.children.push(clonedChild);
      });
      return clonedSelf;
    };

    XMLElement.prototype.attribute = function(name, value) {
      var attName, attValue;
      if (name != null) {
        name = name.valueOf();
      }
      if (isObject(name)) {
        for (attName in name) {
          if (!hasProp.call(name, attName)) continue;
          attValue = name[attName];
          this.attribute(attName, attValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        if (!this.options.skipNullAttributes || (value != null)) {
          this.attributes[name] = new XMLAttribute(this, name, value);
        }
      }
      return this;
    };

    XMLElement.prototype.removeAttribute = function(name) {
      var attName, i, len;
      if (name == null) {
        throw new Error("Missing attribute name");
      }
      name = name.valueOf();
      if (Array.isArray(name)) {
        for (i = 0, len = name.length; i < len; i++) {
          attName = name[i];
          delete this.attributes[attName];
        }
      } else {
        delete this.attributes[name];
      }
      return this;
    };

    XMLElement.prototype.instruction = function(target, value) {
      var i, insTarget, insValue, instruction, len;
      if (target != null) {
        target = target.valueOf();
      }
      if (value != null) {
        value = value.valueOf();
      }
      if (Array.isArray(target)) {
        for (i = 0, len = target.length; i < len; i++) {
          insTarget = target[i];
          this.instruction(insTarget);
        }
      } else if (isObject(target)) {
        for (insTarget in target) {
          if (!hasProp.call(target, insTarget)) continue;
          insValue = target[insTarget];
          this.instruction(insTarget, insValue);
        }
      } else {
        if (isFunction(value)) {
          value = value.apply();
        }
        instruction = new XMLProcessingInstruction(this, target, value);
        this.instructions.push(instruction);
      }
      return this;
    };

    XMLElement.prototype.toString = function(options, level) {
      var att, child, i, indent, instruction, j, len, len1, name, newline, offset, pretty, r, ref, ref1, ref2, ref3, ref4, ref5, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      ref3 = this.instructions;
      for (i = 0, len = ref3.length; i < len; i++) {
        instruction = ref3[i];
        r += instruction.toString(options, level);
      }
      if (pretty) {
        r += space;
      }
      r += '<' + this.name;
      ref4 = this.attributes;
      for (name in ref4) {
        if (!hasProp.call(ref4, name)) continue;
        att = ref4[name];
        r += att.toString(options);
      }
      if (this.children.length === 0 || every(this.children, function(e) {
        return e.value === '';
      })) {
        r += '/>';
        if (pretty) {
          r += newline;
        }
      } else if (pretty && this.children.length === 1 && (this.children[0].value != null)) {
        r += '>';
        r += this.children[0].value;
        r += '</' + this.name + '>';
        r += newline;
      } else {
        r += '>';
        if (pretty) {
          r += newline;
        }
        ref5 = this.children;
        for (j = 0, len1 = ref5.length; j < len1; j++) {
          child = ref5[j];
          r += child.toString(options, level + 1);
        }
        if (pretty) {
          r += space;
        }
        r += '</' + this.name + '>';
        if (pretty) {
          r += newline;
        }
      }
      return r;
    };

    XMLElement.prototype.att = function(name, value) {
      return this.attribute(name, value);
    };

    XMLElement.prototype.ins = function(target, value) {
      return this.instruction(target, value);
    };

    XMLElement.prototype.a = function(name, value) {
      return this.attribute(name, value);
    };

    XMLElement.prototype.i = function(target, value) {
      return this.instruction(target, value);
    };

    return XMLElement;

  })(XMLNode);

}).call(this);

},{"./XMLAttribute":130,"./XMLNode":141,"./XMLProcessingInstruction":142,"lodash/collection/every":148,"lodash/lang/isFunction":194,"lodash/lang/isObject":196,"lodash/object/create":200}],141:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLElement, XMLNode, XMLRaw, XMLText, isEmpty, isFunction, isObject,
    hasProp = {}.hasOwnProperty;

  isObject = require('lodash/lang/isObject');

  isFunction = require('lodash/lang/isFunction');

  isEmpty = require('lodash/lang/isEmpty');

  XMLElement = null;

  XMLCData = null;

  XMLComment = null;

  XMLDeclaration = null;

  XMLDocType = null;

  XMLRaw = null;

  XMLText = null;

  module.exports = XMLNode = (function() {
    function XMLNode(parent) {
      this.parent = parent;
      this.options = this.parent.options;
      this.stringify = this.parent.stringify;
      if (XMLElement === null) {
        XMLElement = require('./XMLElement');
        XMLCData = require('./XMLCData');
        XMLComment = require('./XMLComment');
        XMLDeclaration = require('./XMLDeclaration');
        XMLDocType = require('./XMLDocType');
        XMLRaw = require('./XMLRaw');
        XMLText = require('./XMLText');
      }
    }

    XMLNode.prototype.element = function(name, attributes, text) {
      var childNode, item, j, k, key, lastChild, len, len1, ref, val;
      lastChild = null;
      if (attributes == null) {
        attributes = {};
      }
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref = [attributes, text], text = ref[0], attributes = ref[1];
      }
      if (name != null) {
        name = name.valueOf();
      }
      if (Array.isArray(name)) {
        for (j = 0, len = name.length; j < len; j++) {
          item = name[j];
          lastChild = this.element(item);
        }
      } else if (isFunction(name)) {
        lastChild = this.element(name.apply());
      } else if (isObject(name)) {
        for (key in name) {
          if (!hasProp.call(name, key)) continue;
          val = name[key];
          if (isFunction(val)) {
            val = val.apply();
          }
          if ((isObject(val)) && (isEmpty(val))) {
            val = null;
          }
          if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
            lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
          } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && key.indexOf(this.stringify.convertPIKey) === 0) {
            lastChild = this.instruction(key.substr(this.stringify.convertPIKey.length), val);
          } else if (!this.options.separateArrayItems && Array.isArray(val)) {
            for (k = 0, len1 = val.length; k < len1; k++) {
              item = val[k];
              childNode = {};
              childNode[key] = item;
              lastChild = this.element(childNode);
            }
          } else if (isObject(val)) {
            lastChild = this.element(key);
            lastChild.element(val);
          } else {
            lastChild = this.element(key, val);
          }
        }
      } else {
        if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
          lastChild = this.text(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
          lastChild = this.cdata(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
          lastChild = this.comment(text);
        } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
          lastChild = this.raw(text);
        } else {
          lastChild = this.node(name, attributes, text);
        }
      }
      if (lastChild == null) {
        throw new Error("Could not create any elements with: " + name);
      }
      return lastChild;
    };

    XMLNode.prototype.insertBefore = function(name, attributes, text) {
      var child, i, removed;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i);
      child = this.parent.element(name, attributes, text);
      Array.prototype.push.apply(this.parent.children, removed);
      return child;
    };

    XMLNode.prototype.insertAfter = function(name, attributes, text) {
      var child, i, removed;
      if (this.isRoot) {
        throw new Error("Cannot insert elements at root level");
      }
      i = this.parent.children.indexOf(this);
      removed = this.parent.children.splice(i + 1);
      child = this.parent.element(name, attributes, text);
      Array.prototype.push.apply(this.parent.children, removed);
      return child;
    };

    XMLNode.prototype.remove = function() {
      var i, ref;
      if (this.isRoot) {
        throw new Error("Cannot remove the root element");
      }
      i = this.parent.children.indexOf(this);
      [].splice.apply(this.parent.children, [i, i - i + 1].concat(ref = [])), ref;
      return this.parent;
    };

    XMLNode.prototype.node = function(name, attributes, text) {
      var child, ref;
      if (name != null) {
        name = name.valueOf();
      }
      if (attributes == null) {
        attributes = {};
      }
      attributes = attributes.valueOf();
      if (!isObject(attributes)) {
        ref = [attributes, text], text = ref[0], attributes = ref[1];
      }
      child = new XMLElement(this, name, attributes);
      if (text != null) {
        child.text(text);
      }
      this.children.push(child);
      return child;
    };

    XMLNode.prototype.text = function(value) {
      var child;
      child = new XMLText(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.cdata = function(value) {
      var child;
      child = new XMLCData(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.comment = function(value) {
      var child;
      child = new XMLComment(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.raw = function(value) {
      var child;
      child = new XMLRaw(this, value);
      this.children.push(child);
      return this;
    };

    XMLNode.prototype.declaration = function(version, encoding, standalone) {
      var doc, xmldec;
      doc = this.document();
      xmldec = new XMLDeclaration(doc, version, encoding, standalone);
      doc.xmldec = xmldec;
      return doc.root();
    };

    XMLNode.prototype.doctype = function(pubID, sysID) {
      var doc, doctype;
      doc = this.document();
      doctype = new XMLDocType(doc, pubID, sysID);
      doc.doctype = doctype;
      return doctype;
    };

    XMLNode.prototype.up = function() {
      if (this.isRoot) {
        throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
      }
      return this.parent;
    };

    XMLNode.prototype.root = function() {
      var child;
      if (this.isRoot) {
        return this;
      }
      child = this.parent;
      while (!child.isRoot) {
        child = child.parent;
      }
      return child;
    };

    XMLNode.prototype.document = function() {
      return this.root().documentObject;
    };

    XMLNode.prototype.end = function(options) {
      return this.document().toString(options);
    };

    XMLNode.prototype.prev = function() {
      var i;
      if (this.isRoot) {
        throw new Error("Root node has no siblings");
      }
      i = this.parent.children.indexOf(this);
      if (i < 1) {
        throw new Error("Already at the first node");
      }
      return this.parent.children[i - 1];
    };

    XMLNode.prototype.next = function() {
      var i;
      if (this.isRoot) {
        throw new Error("Root node has no siblings");
      }
      i = this.parent.children.indexOf(this);
      if (i === -1 || i === this.parent.children.length - 1) {
        throw new Error("Already at the last node");
      }
      return this.parent.children[i + 1];
    };

    XMLNode.prototype.importXMLBuilder = function(xmlbuilder) {
      var clonedRoot;
      clonedRoot = xmlbuilder.root().clone();
      clonedRoot.parent = this;
      clonedRoot.isRoot = false;
      this.children.push(clonedRoot);
      return this;
    };

    XMLNode.prototype.ele = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLNode.prototype.nod = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLNode.prototype.txt = function(value) {
      return this.text(value);
    };

    XMLNode.prototype.dat = function(value) {
      return this.cdata(value);
    };

    XMLNode.prototype.com = function(value) {
      return this.comment(value);
    };

    XMLNode.prototype.doc = function() {
      return this.document();
    };

    XMLNode.prototype.dec = function(version, encoding, standalone) {
      return this.declaration(version, encoding, standalone);
    };

    XMLNode.prototype.dtd = function(pubID, sysID) {
      return this.doctype(pubID, sysID);
    };

    XMLNode.prototype.e = function(name, attributes, text) {
      return this.element(name, attributes, text);
    };

    XMLNode.prototype.n = function(name, attributes, text) {
      return this.node(name, attributes, text);
    };

    XMLNode.prototype.t = function(value) {
      return this.text(value);
    };

    XMLNode.prototype.d = function(value) {
      return this.cdata(value);
    };

    XMLNode.prototype.c = function(value) {
      return this.comment(value);
    };

    XMLNode.prototype.r = function(value) {
      return this.raw(value);
    };

    XMLNode.prototype.u = function() {
      return this.up();
    };

    return XMLNode;

  })();

}).call(this);

},{"./XMLCData":132,"./XMLComment":133,"./XMLDeclaration":138,"./XMLDocType":139,"./XMLElement":140,"./XMLRaw":143,"./XMLText":145,"lodash/lang/isEmpty":193,"lodash/lang/isFunction":194,"lodash/lang/isObject":196}],142:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLProcessingInstruction, create;

  create = require('lodash/object/create');

  module.exports = XMLProcessingInstruction = (function() {
    function XMLProcessingInstruction(parent, target, value) {
      this.stringify = parent.stringify;
      if (target == null) {
        throw new Error("Missing instruction target");
      }
      this.target = this.stringify.insTarget(target);
      if (value) {
        this.value = this.stringify.insValue(value);
      }
    }

    XMLProcessingInstruction.prototype.clone = function() {
      return create(XMLProcessingInstruction.prototype, this);
    };

    XMLProcessingInstruction.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += '<?';
      r += this.target;
      if (this.value) {
        r += ' ' + this.value;
      }
      r += '?>';
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLProcessingInstruction;

  })();

}).call(this);

},{"lodash/object/create":200}],143:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLNode, XMLRaw, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/object/create');

  XMLNode = require('./XMLNode');

  module.exports = XMLRaw = (function(superClass) {
    extend(XMLRaw, superClass);

    function XMLRaw(parent, text) {
      XMLRaw.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing raw text");
      }
      this.value = this.stringify.raw(text);
    }

    XMLRaw.prototype.clone = function() {
      return create(XMLRaw.prototype, this);
    };

    XMLRaw.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += this.value;
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLRaw;

  })(XMLNode);

}).call(this);

},{"./XMLNode":141,"lodash/object/create":200}],144:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLStringifier,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    hasProp = {}.hasOwnProperty;

  module.exports = XMLStringifier = (function() {
    function XMLStringifier(options) {
      this.assertLegalChar = bind(this.assertLegalChar, this);
      var key, ref, value;
      this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;
      this.noDoubleEncoding = options != null ? options.noDoubleEncoding : void 0;
      ref = (options != null ? options.stringify : void 0) || {};
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        this[key] = value;
      }
    }

    XMLStringifier.prototype.eleName = function(val) {
      val = '' + val || '';
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.eleText = function(val) {
      val = '' + val || '';
      return this.assertLegalChar(this.elEscape(val));
    };

    XMLStringifier.prototype.cdata = function(val) {
      val = '' + val || '';
      if (val.match(/]]>/)) {
        throw new Error("Invalid CDATA text: " + val);
      }
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.comment = function(val) {
      val = '' + val || '';
      if (val.match(/--/)) {
        throw new Error("Comment text cannot contain double-hypen: " + val);
      }
      return this.assertLegalChar(val);
    };

    XMLStringifier.prototype.raw = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.attName = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.attValue = function(val) {
      val = '' + val || '';
      return this.attEscape(val);
    };

    XMLStringifier.prototype.insTarget = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.insValue = function(val) {
      val = '' + val || '';
      if (val.match(/\?>/)) {
        throw new Error("Invalid processing instruction value: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlVersion = function(val) {
      val = '' + val || '';
      if (!val.match(/1\.[0-9]+/)) {
        throw new Error("Invalid version number: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlEncoding = function(val) {
      val = '' + val || '';
      if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-]|-)*$/)) {
        throw new Error("Invalid encoding: " + val);
      }
      return val;
    };

    XMLStringifier.prototype.xmlStandalone = function(val) {
      if (val) {
        return "yes";
      } else {
        return "no";
      }
    };

    XMLStringifier.prototype.dtdPubID = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdSysID = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdElementValue = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdAttType = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdAttDefault = function(val) {
      if (val != null) {
        return '' + val || '';
      } else {
        return val;
      }
    };

    XMLStringifier.prototype.dtdEntityValue = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.dtdNData = function(val) {
      return '' + val || '';
    };

    XMLStringifier.prototype.convertAttKey = '@';

    XMLStringifier.prototype.convertPIKey = '?';

    XMLStringifier.prototype.convertTextKey = '#text';

    XMLStringifier.prototype.convertCDataKey = '#cdata';

    XMLStringifier.prototype.convertCommentKey = '#comment';

    XMLStringifier.prototype.convertRawKey = '#raw';

    XMLStringifier.prototype.assertLegalChar = function(str) {
      var chars, chr;
      if (this.allowSurrogateChars) {
        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uFFFE-\uFFFF]/;
      } else {
        chars = /[\u0000-\u0008\u000B-\u000C\u000E-\u001F\uD800-\uDFFF\uFFFE-\uFFFF]/;
      }
      chr = str.match(chars);
      if (chr) {
        throw new Error("Invalid character (" + chr + ") in string: " + str + " at index " + chr.index);
      }
      return str;
    };

    XMLStringifier.prototype.elEscape = function(str) {
      var ampregex;
      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\r/g, '&#xD;');
    };

    XMLStringifier.prototype.attEscape = function(str) {
      var ampregex;
      ampregex = this.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
      return str.replace(ampregex, '&amp;').replace(/</g, '&lt;').replace(/"/g, '&quot;');
    };

    return XMLStringifier;

  })();

}).call(this);

},{}],145:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLNode, XMLText, create,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  create = require('lodash/object/create');

  XMLNode = require('./XMLNode');

  module.exports = XMLText = (function(superClass) {
    extend(XMLText, superClass);

    function XMLText(parent, text) {
      XMLText.__super__.constructor.call(this, parent);
      if (text == null) {
        throw new Error("Missing element text");
      }
      this.value = this.stringify.eleText(text);
    }

    XMLText.prototype.clone = function() {
      return create(XMLText.prototype, this);
    };

    XMLText.prototype.toString = function(options, level) {
      var indent, newline, offset, pretty, r, ref, ref1, ref2, space;
      pretty = (options != null ? options.pretty : void 0) || false;
      indent = (ref = options != null ? options.indent : void 0) != null ? ref : '  ';
      offset = (ref1 = options != null ? options.offset : void 0) != null ? ref1 : 0;
      newline = (ref2 = options != null ? options.newline : void 0) != null ? ref2 : '\n';
      level || (level = 0);
      space = new Array(level + offset + 1).join(indent);
      r = '';
      if (pretty) {
        r += space;
      }
      r += this.value;
      if (pretty) {
        r += newline;
      }
      return r;
    };

    return XMLText;

  })(XMLNode);

}).call(this);

},{"./XMLNode":141,"lodash/object/create":200}],146:[function(require,module,exports){
// Generated by CoffeeScript 1.9.1
(function() {
  var XMLBuilder, assign;

  assign = require('lodash/object/assign');

  XMLBuilder = require('./XMLBuilder');

  module.exports.create = function(name, xmldec, doctype, options) {
    options = assign({}, xmldec, doctype, options);
    return new XMLBuilder(name, options).root();
  };

}).call(this);

},{"./XMLBuilder":131,"lodash/object/assign":199}],147:[function(require,module,exports){
/**
 * Gets the last element of `array`.
 *
 * @static
 * @memberOf _
 * @category Array
 * @param {Array} array The array to query.
 * @returns {*} Returns the last element of `array`.
 * @example
 *
 * _.last([1, 2, 3]);
 * // => 3
 */
function last(array) {
  var length = array ? array.length : 0;
  return length ? array[length - 1] : undefined;
}

module.exports = last;

},{}],148:[function(require,module,exports){
var arrayEvery = require('../internal/arrayEvery'),
    baseCallback = require('../internal/baseCallback'),
    baseEvery = require('../internal/baseEvery'),
    isArray = require('../lang/isArray'),
    isIterateeCall = require('../internal/isIterateeCall');

/**
 * Checks if `predicate` returns truthy for **all** elements of `collection`.
 * The predicate is bound to `thisArg` and invoked with three arguments:
 * (value, index|key, collection).
 *
 * If a property name is provided for `predicate` the created `_.property`
 * style callback returns the property value of the given element.
 *
 * If a value is also provided for `thisArg` the created `_.matchesProperty`
 * style callback returns `true` for elements that have a matching property
 * value, else `false`.
 *
 * If an object is provided for `predicate` the created `_.matches` style
 * callback returns `true` for elements that have the properties of the given
 * object, else `false`.
 *
 * @static
 * @memberOf _
 * @alias all
 * @category Collection
 * @param {Array|Object|string} collection The collection to iterate over.
 * @param {Function|Object|string} [predicate=_.identity] The function invoked
 *  per iteration.
 * @param {*} [thisArg] The `this` binding of `predicate`.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 * @example
 *
 * _.every([true, 1, null, 'yes'], Boolean);
 * // => false
 *
 * var users = [
 *   { 'user': 'barney', 'active': false },
 *   { 'user': 'fred',   'active': false }
 * ];
 *
 * // using the `_.matches` callback shorthand
 * _.every(users, { 'user': 'barney', 'active': false });
 * // => false
 *
 * // using the `_.matchesProperty` callback shorthand
 * _.every(users, 'active', false);
 * // => true
 *
 * // using the `_.property` callback shorthand
 * _.every(users, 'active');
 * // => false
 */
function every(collection, predicate, thisArg) {
  var func = isArray(collection) ? arrayEvery : baseEvery;
  if (thisArg && isIterateeCall(collection, predicate, thisArg)) {
    predicate = undefined;
  }
  if (typeof predicate != 'function' || thisArg !== undefined) {
    predicate = baseCallback(predicate, thisArg, 3);
  }
  return func(collection, predicate);
}

module.exports = every;

},{"../internal/arrayEvery":150,"../internal/baseCallback":154,"../internal/baseEvery":158,"../internal/isIterateeCall":183,"../lang/isArray":192}],149:[function(require,module,exports){
/** Used as the `TypeError` message for "Functions" methods. */
var FUNC_ERROR_TEXT = 'Expected a function';

/* Native method references for those with the same name as other `lodash` methods. */
var nativeMax = Math.max;

/**
 * Creates a function that invokes `func` with the `this` binding of the
 * created function and arguments from `start` and beyond provided as an array.
 *
 * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).
 *
 * @static
 * @memberOf _
 * @category Function
 * @param {Function} func The function to apply a rest parameter to.
 * @param {number} [start=func.length-1] The start position of the rest parameter.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var say = _.restParam(function(what, names) {
 *   return what + ' ' + _.initial(names).join(', ') +
 *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
 * });
 *
 * say('hello', 'fred', 'barney', 'pebbles');
 * // => 'hello fred, barney, & pebbles'
 */
function restParam(func, start) {
  if (typeof func != 'function') {
    throw new TypeError(FUNC_ERROR_TEXT);
  }
  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);
  return function() {
    var args = arguments,
        index = -1,
        length = nativeMax(args.length - start, 0),
        rest = Array(length);

    while (++index < length) {
      rest[index] = args[start + index];
    }
    switch (start) {
      case 0: return func.call(this, rest);
      case 1: return func.call(this, args[0], rest);
      case 2: return func.call(this, args[0], args[1], rest);
    }
    var otherArgs = Array(start + 1);
    index = -1;
    while (++index < start) {
      otherArgs[index] = args[index];
    }
    otherArgs[start] = rest;
    return func.apply(this, otherArgs);
  };
}

module.exports = restParam;

},{}],150:[function(require,module,exports){
/**
 * A specialized version of `_.every` for arrays without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`.
 */
function arrayEvery(array, predicate) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    if (!predicate(array[index], index, array)) {
      return false;
    }
  }
  return true;
}

module.exports = arrayEvery;

},{}],151:[function(require,module,exports){
/**
 * A specialized version of `_.some` for arrays without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Array} array The array to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if any element passes the predicate check,
 *  else `false`.
 */
function arraySome(array, predicate) {
  var index = -1,
      length = array.length;

  while (++index < length) {
    if (predicate(array[index], index, array)) {
      return true;
    }
  }
  return false;
}

module.exports = arraySome;

},{}],152:[function(require,module,exports){
var keys = require('../object/keys');

/**
 * A specialized version of `_.assign` for customizing assigned values without
 * support for argument juggling, multiple sources, and `this` binding `customizer`
 * functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {Function} customizer The function to customize assigned values.
 * @returns {Object} Returns `object`.
 */
function assignWith(object, source, customizer) {
  var index = -1,
      props = keys(source),
      length = props.length;

  while (++index < length) {
    var key = props[index],
        value = object[key],
        result = customizer(value, source[key], key, object, source);

    if ((result === result ? (result !== value) : (value === value)) ||
        (value === undefined && !(key in object))) {
      object[key] = result;
    }
  }
  return object;
}

module.exports = assignWith;

},{"../object/keys":201}],153:[function(require,module,exports){
var baseCopy = require('./baseCopy'),
    keys = require('../object/keys');

/**
 * The base implementation of `_.assign` without support for argument juggling,
 * multiple sources, and `customizer` functions.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @returns {Object} Returns `object`.
 */
function baseAssign(object, source) {
  return source == null
    ? object
    : baseCopy(source, keys(source), object);
}

module.exports = baseAssign;

},{"../object/keys":201,"./baseCopy":155}],154:[function(require,module,exports){
var baseMatches = require('./baseMatches'),
    baseMatchesProperty = require('./baseMatchesProperty'),
    bindCallback = require('./bindCallback'),
    identity = require('../utility/identity'),
    property = require('../utility/property');

/**
 * The base implementation of `_.callback` which supports specifying the
 * number of arguments to provide to `func`.
 *
 * @private
 * @param {*} [func=_.identity] The value to convert to a callback.
 * @param {*} [thisArg] The `this` binding of `func`.
 * @param {number} [argCount] The number of arguments to provide to `func`.
 * @returns {Function} Returns the callback.
 */
function baseCallback(func, thisArg, argCount) {
  var type = typeof func;
  if (type == 'function') {
    return thisArg === undefined
      ? func
      : bindCallback(func, thisArg, argCount);
  }
  if (func == null) {
    return identity;
  }
  if (type == 'object') {
    return baseMatches(func);
  }
  return thisArg === undefined
    ? property(func)
    : baseMatchesProperty(func, thisArg);
}

module.exports = baseCallback;

},{"../utility/identity":204,"../utility/property":205,"./baseMatches":165,"./baseMatchesProperty":166,"./bindCallback":171}],155:[function(require,module,exports){
/**
 * Copies properties of `source` to `object`.
 *
 * @private
 * @param {Object} source The object to copy properties from.
 * @param {Array} props The property names to copy.
 * @param {Object} [object={}] The object to copy properties to.
 * @returns {Object} Returns `object`.
 */
function baseCopy(source, props, object) {
  object || (object = {});

  var index = -1,
      length = props.length;

  while (++index < length) {
    var key = props[index];
    object[key] = source[key];
  }
  return object;
}

module.exports = baseCopy;

},{}],156:[function(require,module,exports){
var isObject = require('../lang/isObject');

/**
 * The base implementation of `_.create` without support for assigning
 * properties to the created object.
 *
 * @private
 * @param {Object} prototype The object to inherit from.
 * @returns {Object} Returns the new object.
 */
var baseCreate = (function() {
  function object() {}
  return function(prototype) {
    if (isObject(prototype)) {
      object.prototype = prototype;
      var result = new object;
      object.prototype = undefined;
    }
    return result || {};
  };
}());

module.exports = baseCreate;

},{"../lang/isObject":196}],157:[function(require,module,exports){
var baseForOwn = require('./baseForOwn'),
    createBaseEach = require('./createBaseEach');

/**
 * The base implementation of `_.forEach` without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Array|Object|string} collection The collection to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Array|Object|string} Returns `collection`.
 */
var baseEach = createBaseEach(baseForOwn);

module.exports = baseEach;

},{"./baseForOwn":160,"./createBaseEach":173}],158:[function(require,module,exports){
var baseEach = require('./baseEach');

/**
 * The base implementation of `_.every` without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Array|Object|string} collection The collection to iterate over.
 * @param {Function} predicate The function invoked per iteration.
 * @returns {boolean} Returns `true` if all elements pass the predicate check,
 *  else `false`
 */
function baseEvery(collection, predicate) {
  var result = true;
  baseEach(collection, function(value, index, collection) {
    result = !!predicate(value, index, collection);
    return result;
  });
  return result;
}

module.exports = baseEvery;

},{"./baseEach":157}],159:[function(require,module,exports){
var createBaseFor = require('./createBaseFor');

/**
 * The base implementation of `baseForIn` and `baseForOwn` which iterates
 * over `object` properties returned by `keysFunc` invoking `iteratee` for
 * each property. Iteratee functions may exit iteration early by explicitly
 * returning `false`.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @param {Function} keysFunc The function to get the keys of `object`.
 * @returns {Object} Returns `object`.
 */
var baseFor = createBaseFor();

module.exports = baseFor;

},{"./createBaseFor":174}],160:[function(require,module,exports){
var baseFor = require('./baseFor'),
    keys = require('../object/keys');

/**
 * The base implementation of `_.forOwn` without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Object} object The object to iterate over.
 * @param {Function} iteratee The function invoked per iteration.
 * @returns {Object} Returns `object`.
 */
function baseForOwn(object, iteratee) {
  return baseFor(object, iteratee, keys);
}

module.exports = baseForOwn;

},{"../object/keys":201,"./baseFor":159}],161:[function(require,module,exports){
var toObject = require('./toObject');

/**
 * The base implementation of `get` without support for string paths
 * and default values.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {Array} path The path of the property to get.
 * @param {string} [pathKey] The key representation of path.
 * @returns {*} Returns the resolved value.
 */
function baseGet(object, path, pathKey) {
  if (object == null) {
    return;
  }
  if (pathKey !== undefined && pathKey in toObject(object)) {
    path = [pathKey];
  }
  var index = 0,
      length = path.length;

  while (object != null && index < length) {
    object = object[path[index++]];
  }
  return (index && index == length) ? object : undefined;
}

module.exports = baseGet;

},{"./toObject":189}],162:[function(require,module,exports){
var baseIsEqualDeep = require('./baseIsEqualDeep'),
    isObject = require('../lang/isObject'),
    isObjectLike = require('./isObjectLike');

/**
 * The base implementation of `_.isEqual` without support for `this` binding
 * `customizer` functions.
 *
 * @private
 * @param {*} value The value to compare.
 * @param {*} other The other value to compare.
 * @param {Function} [customizer] The function to customize comparing values.
 * @param {boolean} [isLoose] Specify performing partial comparisons.
 * @param {Array} [stackA] Tracks traversed `value` objects.
 * @param {Array} [stackB] Tracks traversed `other` objects.
 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
 */
function baseIsEqual(value, other, customizer, isLoose, stackA, stackB) {
  if (value === other) {
    return true;
  }
  if (value == null || other == null || (!isObject(value) && !isObjectLike(other))) {
    return value !== value && other !== other;
  }
  return baseIsEqualDeep(value, other, baseIsEqual, customizer, isLoose, stackA, stackB);
}

module.exports = baseIsEqual;

},{"../lang/isObject":196,"./baseIsEqualDeep":163,"./isObjectLike":186}],163:[function(require,module,exports){
var equalArrays = require('./equalArrays'),
    equalByTag = require('./equalByTag'),
    equalObjects = require('./equalObjects'),
    isArray = require('../lang/isArray'),
    isTypedArray = require('../lang/isTypedArray');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    objectTag = '[object Object]';

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objToString = objectProto.toString;

/**
 * A specialized version of `baseIsEqual` for arrays and objects which performs
 * deep comparisons and tracks traversed objects enabling objects with circular
 * references to be compared.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparing objects.
 * @param {boolean} [isLoose] Specify performing partial comparisons.
 * @param {Array} [stackA=[]] Tracks traversed `value` objects.
 * @param {Array} [stackB=[]] Tracks traversed `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function baseIsEqualDeep(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
  var objIsArr = isArray(object),
      othIsArr = isArray(other),
      objTag = arrayTag,
      othTag = arrayTag;

  if (!objIsArr) {
    objTag = objToString.call(object);
    if (objTag == argsTag) {
      objTag = objectTag;
    } else if (objTag != objectTag) {
      objIsArr = isTypedArray(object);
    }
  }
  if (!othIsArr) {
    othTag = objToString.call(other);
    if (othTag == argsTag) {
      othTag = objectTag;
    } else if (othTag != objectTag) {
      othIsArr = isTypedArray(other);
    }
  }
  var objIsObj = objTag == objectTag,
      othIsObj = othTag == objectTag,
      isSameTag = objTag == othTag;

  if (isSameTag && !(objIsArr || objIsObj)) {
    return equalByTag(object, other, objTag);
  }
  if (!isLoose) {
    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

    if (objIsWrapped || othIsWrapped) {
      return equalFunc(objIsWrapped ? object.value() : object, othIsWrapped ? other.value() : other, customizer, isLoose, stackA, stackB);
    }
  }
  if (!isSameTag) {
    return false;
  }
  // Assume cyclic values are equal.
  // For more information on detecting circular references see https://es5.github.io/#JO.
  stackA || (stackA = []);
  stackB || (stackB = []);

  var length = stackA.length;
  while (length--) {
    if (stackA[length] == object) {
      return stackB[length] == other;
    }
  }
  // Add `object` and `other` to the stack of traversed objects.
  stackA.push(object);
  stackB.push(other);

  var result = (objIsArr ? equalArrays : equalObjects)(object, other, equalFunc, customizer, isLoose, stackA, stackB);

  stackA.pop();
  stackB.pop();

  return result;
}

module.exports = baseIsEqualDeep;

},{"../lang/isArray":192,"../lang/isTypedArray":198,"./equalArrays":175,"./equalByTag":176,"./equalObjects":177}],164:[function(require,module,exports){
var baseIsEqual = require('./baseIsEqual'),
    toObject = require('./toObject');

/**
 * The base implementation of `_.isMatch` without support for callback
 * shorthands and `this` binding.
 *
 * @private
 * @param {Object} object The object to inspect.
 * @param {Array} matchData The propery names, values, and compare flags to match.
 * @param {Function} [customizer] The function to customize comparing objects.
 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
 */
function baseIsMatch(object, matchData, customizer) {
  var index = matchData.length,
      length = index,
      noCustomizer = !customizer;

  if (object == null) {
    return !length;
  }
  object = toObject(object);
  while (index--) {
    var data = matchData[index];
    if ((noCustomizer && data[2])
          ? data[1] !== object[data[0]]
          : !(data[0] in object)
        ) {
      return false;
    }
  }
  while (++index < length) {
    data = matchData[index];
    var key = data[0],
        objValue = object[key],
        srcValue = data[1];

    if (noCustomizer && data[2]) {
      if (objValue === undefined && !(key in object)) {
        return false;
      }
    } else {
      var result = customizer ? customizer(objValue, srcValue, key) : undefined;
      if (!(result === undefined ? baseIsEqual(srcValue, objValue, customizer, true) : result)) {
        return false;
      }
    }
  }
  return true;
}

module.exports = baseIsMatch;

},{"./baseIsEqual":162,"./toObject":189}],165:[function(require,module,exports){
var baseIsMatch = require('./baseIsMatch'),
    getMatchData = require('./getMatchData'),
    toObject = require('./toObject');

/**
 * The base implementation of `_.matches` which does not clone `source`.
 *
 * @private
 * @param {Object} source The object of property values to match.
 * @returns {Function} Returns the new function.
 */
function baseMatches(source) {
  var matchData = getMatchData(source);
  if (matchData.length == 1 && matchData[0][2]) {
    var key = matchData[0][0],
        value = matchData[0][1];

    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === value && (value !== undefined || (key in toObject(object)));
    };
  }
  return function(object) {
    return baseIsMatch(object, matchData);
  };
}

module.exports = baseMatches;

},{"./baseIsMatch":164,"./getMatchData":179,"./toObject":189}],166:[function(require,module,exports){
var baseGet = require('./baseGet'),
    baseIsEqual = require('./baseIsEqual'),
    baseSlice = require('./baseSlice'),
    isArray = require('../lang/isArray'),
    isKey = require('./isKey'),
    isStrictComparable = require('./isStrictComparable'),
    last = require('../array/last'),
    toObject = require('./toObject'),
    toPath = require('./toPath');

/**
 * The base implementation of `_.matchesProperty` which does not clone `srcValue`.
 *
 * @private
 * @param {string} path The path of the property to get.
 * @param {*} srcValue The value to compare.
 * @returns {Function} Returns the new function.
 */
function baseMatchesProperty(path, srcValue) {
  var isArr = isArray(path),
      isCommon = isKey(path) && isStrictComparable(srcValue),
      pathKey = (path + '');

  path = toPath(path);
  return function(object) {
    if (object == null) {
      return false;
    }
    var key = pathKey;
    object = toObject(object);
    if ((isArr || !isCommon) && !(key in object)) {
      object = path.length == 1 ? object : baseGet(object, baseSlice(path, 0, -1));
      if (object == null) {
        return false;
      }
      key = last(path);
      object = toObject(object);
    }
    return object[key] === srcValue
      ? (srcValue !== undefined || (key in object))
      : baseIsEqual(srcValue, object[key], undefined, true);
  };
}

module.exports = baseMatchesProperty;

},{"../array/last":147,"../lang/isArray":192,"./baseGet":161,"./baseIsEqual":162,"./baseSlice":169,"./isKey":184,"./isStrictComparable":187,"./toObject":189,"./toPath":190}],167:[function(require,module,exports){
/**
 * The base implementation of `_.property` without support for deep paths.
 *
 * @private
 * @param {string} key The key of the property to get.
 * @returns {Function} Returns the new function.
 */
function baseProperty(key) {
  return function(object) {
    return object == null ? undefined : object[key];
  };
}

module.exports = baseProperty;

},{}],168:[function(require,module,exports){
var baseGet = require('./baseGet'),
    toPath = require('./toPath');

/**
 * A specialized version of `baseProperty` which supports deep paths.
 *
 * @private
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new function.
 */
function basePropertyDeep(path) {
  var pathKey = (path + '');
  path = toPath(path);
  return function(object) {
    return baseGet(object, path, pathKey);
  };
}

module.exports = basePropertyDeep;

},{"./baseGet":161,"./toPath":190}],169:[function(require,module,exports){
/**
 * The base implementation of `_.slice` without an iteratee call guard.
 *
 * @private
 * @param {Array} array The array to slice.
 * @param {number} [start=0] The start position.
 * @param {number} [end=array.length] The end position.
 * @returns {Array} Returns the slice of `array`.
 */
function baseSlice(array, start, end) {
  var index = -1,
      length = array.length;

  start = start == null ? 0 : (+start || 0);
  if (start < 0) {
    start = -start > length ? 0 : (length + start);
  }
  end = (end === undefined || end > length) ? length : (+end || 0);
  if (end < 0) {
    end += length;
  }
  length = start > end ? 0 : ((end - start) >>> 0);
  start >>>= 0;

  var result = Array(length);
  while (++index < length) {
    result[index] = array[index + start];
  }
  return result;
}

module.exports = baseSlice;

},{}],170:[function(require,module,exports){
/**
 * Converts `value` to a string if it's not one. An empty string is returned
 * for `null` or `undefined` values.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {string} Returns the string.
 */
function baseToString(value) {
  return value == null ? '' : (value + '');
}

module.exports = baseToString;

},{}],171:[function(require,module,exports){
var identity = require('../utility/identity');

/**
 * A specialized version of `baseCallback` which only supports `this` binding
 * and specifying the number of arguments to provide to `func`.
 *
 * @private
 * @param {Function} func The function to bind.
 * @param {*} thisArg The `this` binding of `func`.
 * @param {number} [argCount] The number of arguments to provide to `func`.
 * @returns {Function} Returns the callback.
 */
function bindCallback(func, thisArg, argCount) {
  if (typeof func != 'function') {
    return identity;
  }
  if (thisArg === undefined) {
    return func;
  }
  switch (argCount) {
    case 1: return function(value) {
      return func.call(thisArg, value);
    };
    case 3: return function(value, index, collection) {
      return func.call(thisArg, value, index, collection);
    };
    case 4: return function(accumulator, value, index, collection) {
      return func.call(thisArg, accumulator, value, index, collection);
    };
    case 5: return function(value, other, key, object, source) {
      return func.call(thisArg, value, other, key, object, source);
    };
  }
  return function() {
    return func.apply(thisArg, arguments);
  };
}

module.exports = bindCallback;

},{"../utility/identity":204}],172:[function(require,module,exports){
var bindCallback = require('./bindCallback'),
    isIterateeCall = require('./isIterateeCall'),
    restParam = require('../function/restParam');

/**
 * Creates a `_.assign`, `_.defaults`, or `_.merge` function.
 *
 * @private
 * @param {Function} assigner The function to assign values.
 * @returns {Function} Returns the new assigner function.
 */
function createAssigner(assigner) {
  return restParam(function(object, sources) {
    var index = -1,
        length = object == null ? 0 : sources.length,
        customizer = length > 2 ? sources[length - 2] : undefined,
        guard = length > 2 ? sources[2] : undefined,
        thisArg = length > 1 ? sources[length - 1] : undefined;

    if (typeof customizer == 'function') {
      customizer = bindCallback(customizer, thisArg, 5);
      length -= 2;
    } else {
      customizer = typeof thisArg == 'function' ? thisArg : undefined;
      length -= (customizer ? 1 : 0);
    }
    if (guard && isIterateeCall(sources[0], sources[1], guard)) {
      customizer = length < 3 ? undefined : customizer;
      length = 1;
    }
    while (++index < length) {
      var source = sources[index];
      if (source) {
        assigner(object, source, customizer);
      }
    }
    return object;
  });
}

module.exports = createAssigner;

},{"../function/restParam":149,"./bindCallback":171,"./isIterateeCall":183}],173:[function(require,module,exports){
var getLength = require('./getLength'),
    isLength = require('./isLength'),
    toObject = require('./toObject');

/**
 * Creates a `baseEach` or `baseEachRight` function.
 *
 * @private
 * @param {Function} eachFunc The function to iterate over a collection.
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseEach(eachFunc, fromRight) {
  return function(collection, iteratee) {
    var length = collection ? getLength(collection) : 0;
    if (!isLength(length)) {
      return eachFunc(collection, iteratee);
    }
    var index = fromRight ? length : -1,
        iterable = toObject(collection);

    while ((fromRight ? index-- : ++index < length)) {
      if (iteratee(iterable[index], index, iterable) === false) {
        break;
      }
    }
    return collection;
  };
}

module.exports = createBaseEach;

},{"./getLength":178,"./isLength":185,"./toObject":189}],174:[function(require,module,exports){
var toObject = require('./toObject');

/**
 * Creates a base function for `_.forIn` or `_.forInRight`.
 *
 * @private
 * @param {boolean} [fromRight] Specify iterating from right to left.
 * @returns {Function} Returns the new base function.
 */
function createBaseFor(fromRight) {
  return function(object, iteratee, keysFunc) {
    var iterable = toObject(object),
        props = keysFunc(object),
        length = props.length,
        index = fromRight ? length : -1;

    while ((fromRight ? index-- : ++index < length)) {
      var key = props[index];
      if (iteratee(iterable[key], key, iterable) === false) {
        break;
      }
    }
    return object;
  };
}

module.exports = createBaseFor;

},{"./toObject":189}],175:[function(require,module,exports){
var arraySome = require('./arraySome');

/**
 * A specialized version of `baseIsEqualDeep` for arrays with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Array} array The array to compare.
 * @param {Array} other The other array to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparing arrays.
 * @param {boolean} [isLoose] Specify performing partial comparisons.
 * @param {Array} [stackA] Tracks traversed `value` objects.
 * @param {Array} [stackB] Tracks traversed `other` objects.
 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
 */
function equalArrays(array, other, equalFunc, customizer, isLoose, stackA, stackB) {
  var index = -1,
      arrLength = array.length,
      othLength = other.length;

  if (arrLength != othLength && !(isLoose && othLength > arrLength)) {
    return false;
  }
  // Ignore non-index properties.
  while (++index < arrLength) {
    var arrValue = array[index],
        othValue = other[index],
        result = customizer ? customizer(isLoose ? othValue : arrValue, isLoose ? arrValue : othValue, index) : undefined;

    if (result !== undefined) {
      if (result) {
        continue;
      }
      return false;
    }
    // Recursively compare arrays (susceptible to call stack limits).
    if (isLoose) {
      if (!arraySome(other, function(othValue) {
            return arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB);
          })) {
        return false;
      }
    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, customizer, isLoose, stackA, stackB))) {
      return false;
    }
  }
  return true;
}

module.exports = equalArrays;

},{"./arraySome":151}],176:[function(require,module,exports){
/** `Object#toString` result references. */
var boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    numberTag = '[object Number]',
    regexpTag = '[object RegExp]',
    stringTag = '[object String]';

/**
 * A specialized version of `baseIsEqualDeep` for comparing objects of
 * the same `toStringTag`.
 *
 * **Note:** This function only supports comparing values with tags of
 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {string} tag The `toStringTag` of the objects to compare.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalByTag(object, other, tag) {
  switch (tag) {
    case boolTag:
    case dateTag:
      // Coerce dates and booleans to numbers, dates to milliseconds and booleans
      // to `1` or `0` treating invalid dates coerced to `NaN` as not equal.
      return +object == +other;

    case errorTag:
      return object.name == other.name && object.message == other.message;

    case numberTag:
      // Treat `NaN` vs. `NaN` as equal.
      return (object != +object)
        ? other != +other
        : object == +other;

    case regexpTag:
    case stringTag:
      // Coerce regexes to strings and treat strings primitives and string
      // objects as equal. See https://es5.github.io/#x15.10.6.4 for more details.
      return object == (other + '');
  }
  return false;
}

module.exports = equalByTag;

},{}],177:[function(require,module,exports){
var keys = require('../object/keys');

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A specialized version of `baseIsEqualDeep` for objects with support for
 * partial deep comparisons.
 *
 * @private
 * @param {Object} object The object to compare.
 * @param {Object} other The other object to compare.
 * @param {Function} equalFunc The function to determine equivalents of values.
 * @param {Function} [customizer] The function to customize comparing values.
 * @param {boolean} [isLoose] Specify performing partial comparisons.
 * @param {Array} [stackA] Tracks traversed `value` objects.
 * @param {Array} [stackB] Tracks traversed `other` objects.
 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
 */
function equalObjects(object, other, equalFunc, customizer, isLoose, stackA, stackB) {
  var objProps = keys(object),
      objLength = objProps.length,
      othProps = keys(other),
      othLength = othProps.length;

  if (objLength != othLength && !isLoose) {
    return false;
  }
  var index = objLength;
  while (index--) {
    var key = objProps[index];
    if (!(isLoose ? key in other : hasOwnProperty.call(other, key))) {
      return false;
    }
  }
  var skipCtor = isLoose;
  while (++index < objLength) {
    key = objProps[index];
    var objValue = object[key],
        othValue = other[key],
        result = customizer ? customizer(isLoose ? othValue : objValue, isLoose? objValue : othValue, key) : undefined;

    // Recursively compare objects (susceptible to call stack limits).
    if (!(result === undefined ? equalFunc(objValue, othValue, customizer, isLoose, stackA, stackB) : result)) {
      return false;
    }
    skipCtor || (skipCtor = key == 'constructor');
  }
  if (!skipCtor) {
    var objCtor = object.constructor,
        othCtor = other.constructor;

    // Non `Object` object instances with different constructors are not equal.
    if (objCtor != othCtor &&
        ('constructor' in object && 'constructor' in other) &&
        !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
          typeof othCtor == 'function' && othCtor instanceof othCtor)) {
      return false;
    }
  }
  return true;
}

module.exports = equalObjects;

},{"../object/keys":201}],178:[function(require,module,exports){
var baseProperty = require('./baseProperty');

/**
 * Gets the "length" property value of `object`.
 *
 * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)
 * that affects Safari on at least iOS 8.1-8.3 ARM64.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {*} Returns the "length" value.
 */
var getLength = baseProperty('length');

module.exports = getLength;

},{"./baseProperty":167}],179:[function(require,module,exports){
var isStrictComparable = require('./isStrictComparable'),
    pairs = require('../object/pairs');

/**
 * Gets the propery names, values, and compare flags of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the match data of `object`.
 */
function getMatchData(object) {
  var result = pairs(object),
      length = result.length;

  while (length--) {
    result[length][2] = isStrictComparable(result[length][1]);
  }
  return result;
}

module.exports = getMatchData;

},{"../object/pairs":203,"./isStrictComparable":187}],180:[function(require,module,exports){
var isNative = require('../lang/isNative');

/**
 * Gets the native function at `key` of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @param {string} key The key of the method to get.
 * @returns {*} Returns the function if it's native, else `undefined`.
 */
function getNative(object, key) {
  var value = object == null ? undefined : object[key];
  return isNative(value) ? value : undefined;
}

module.exports = getNative;

},{"../lang/isNative":195}],181:[function(require,module,exports){
var getLength = require('./getLength'),
    isLength = require('./isLength');

/**
 * Checks if `value` is array-like.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
 */
function isArrayLike(value) {
  return value != null && isLength(getLength(value));
}

module.exports = isArrayLike;

},{"./getLength":178,"./isLength":185}],182:[function(require,module,exports){
/** Used to detect unsigned integer values. */
var reIsUint = /^\d+$/;

/**
 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
 * of an array-like value.
 */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like index.
 *
 * @private
 * @param {*} value The value to check.
 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
 */
function isIndex(value, length) {
  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;
  length = length == null ? MAX_SAFE_INTEGER : length;
  return value > -1 && value % 1 == 0 && value < length;
}

module.exports = isIndex;

},{}],183:[function(require,module,exports){
var isArrayLike = require('./isArrayLike'),
    isIndex = require('./isIndex'),
    isObject = require('../lang/isObject');

/**
 * Checks if the provided arguments are from an iteratee call.
 *
 * @private
 * @param {*} value The potential iteratee value argument.
 * @param {*} index The potential iteratee index or key argument.
 * @param {*} object The potential iteratee object argument.
 * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.
 */
function isIterateeCall(value, index, object) {
  if (!isObject(object)) {
    return false;
  }
  var type = typeof index;
  if (type == 'number'
      ? (isArrayLike(object) && isIndex(index, object.length))
      : (type == 'string' && index in object)) {
    var other = object[index];
    return value === value ? (value === other) : (other !== other);
  }
  return false;
}

module.exports = isIterateeCall;

},{"../lang/isObject":196,"./isArrayLike":181,"./isIndex":182}],184:[function(require,module,exports){
var isArray = require('../lang/isArray'),
    toObject = require('./toObject');

/** Used to match property names within property paths. */
var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\n\\]|\\.)*?\1)\]/,
    reIsPlainProp = /^\w*$/;

/**
 * Checks if `value` is a property name and not a property path.
 *
 * @private
 * @param {*} value The value to check.
 * @param {Object} [object] The object to query keys on.
 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
 */
function isKey(value, object) {
  var type = typeof value;
  if ((type == 'string' && reIsPlainProp.test(value)) || type == 'number') {
    return true;
  }
  if (isArray(value)) {
    return false;
  }
  var result = !reIsDeepProp.test(value);
  return result || (object != null && value in toObject(object));
}

module.exports = isKey;

},{"../lang/isArray":192,"./toObject":189}],185:[function(require,module,exports){
/**
 * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)
 * of an array-like value.
 */
var MAX_SAFE_INTEGER = 9007199254740991;

/**
 * Checks if `value` is a valid array-like length.
 *
 * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
 */
function isLength(value) {
  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
}

module.exports = isLength;

},{}],186:[function(require,module,exports){
/**
 * Checks if `value` is object-like.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
 */
function isObjectLike(value) {
  return !!value && typeof value == 'object';
}

module.exports = isObjectLike;

},{}],187:[function(require,module,exports){
var isObject = require('../lang/isObject');

/**
 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
 *
 * @private
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` if suitable for strict
 *  equality comparisons, else `false`.
 */
function isStrictComparable(value) {
  return value === value && !isObject(value);
}

module.exports = isStrictComparable;

},{"../lang/isObject":196}],188:[function(require,module,exports){
var isArguments = require('../lang/isArguments'),
    isArray = require('../lang/isArray'),
    isIndex = require('./isIndex'),
    isLength = require('./isLength'),
    keysIn = require('../object/keysIn');

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * A fallback implementation of `Object.keys` which creates an array of the
 * own enumerable property names of `object`.
 *
 * @private
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 */
function shimKeys(object) {
  var props = keysIn(object),
      propsLength = props.length,
      length = propsLength && object.length;

  var allowIndexes = !!length && isLength(length) &&
    (isArray(object) || isArguments(object));

  var index = -1,
      result = [];

  while (++index < propsLength) {
    var key = props[index];
    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {
      result.push(key);
    }
  }
  return result;
}

module.exports = shimKeys;

},{"../lang/isArguments":191,"../lang/isArray":192,"../object/keysIn":202,"./isIndex":182,"./isLength":185}],189:[function(require,module,exports){
var isObject = require('../lang/isObject');

/**
 * Converts `value` to an object if it's not one.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {Object} Returns the object.
 */
function toObject(value) {
  return isObject(value) ? value : Object(value);
}

module.exports = toObject;

},{"../lang/isObject":196}],190:[function(require,module,exports){
var baseToString = require('./baseToString'),
    isArray = require('../lang/isArray');

/** Used to match property names within property paths. */
var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\n\\]|\\.)*?)\2)\]/g;

/** Used to match backslashes in property paths. */
var reEscapeChar = /\\(\\)?/g;

/**
 * Converts `value` to property path array if it's not one.
 *
 * @private
 * @param {*} value The value to process.
 * @returns {Array} Returns the property path array.
 */
function toPath(value) {
  if (isArray(value)) {
    return value;
  }
  var result = [];
  baseToString(value).replace(rePropName, function(match, number, quote, string) {
    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));
  });
  return result;
}

module.exports = toPath;

},{"../lang/isArray":192,"./baseToString":170}],191:[function(require,module,exports){
var isArrayLike = require('../internal/isArrayLike'),
    isObjectLike = require('../internal/isObjectLike');

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Native method references. */
var propertyIsEnumerable = objectProto.propertyIsEnumerable;

/**
 * Checks if `value` is classified as an `arguments` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArguments(function() { return arguments; }());
 * // => true
 *
 * _.isArguments([1, 2, 3]);
 * // => false
 */
function isArguments(value) {
  return isObjectLike(value) && isArrayLike(value) &&
    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
}

module.exports = isArguments;

},{"../internal/isArrayLike":181,"../internal/isObjectLike":186}],192:[function(require,module,exports){
var getNative = require('../internal/getNative'),
    isLength = require('../internal/isLength'),
    isObjectLike = require('../internal/isObjectLike');

/** `Object#toString` result references. */
var arrayTag = '[object Array]';

/** Used for native method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objToString = objectProto.toString;

/* Native method references for those with the same name as other `lodash` methods. */
var nativeIsArray = getNative(Array, 'isArray');

/**
 * Checks if `value` is classified as an `Array` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isArray([1, 2, 3]);
 * // => true
 *
 * _.isArray(function() { return arguments; }());
 * // => false
 */
var isArray = nativeIsArray || function(value) {
  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;
};

module.exports = isArray;

},{"../internal/getNative":180,"../internal/isLength":185,"../internal/isObjectLike":186}],193:[function(require,module,exports){
var isArguments = require('./isArguments'),
    isArray = require('./isArray'),
    isArrayLike = require('../internal/isArrayLike'),
    isFunction = require('./isFunction'),
    isObjectLike = require('../internal/isObjectLike'),
    isString = require('./isString'),
    keys = require('../object/keys');

/**
 * Checks if `value` is empty. A value is considered empty unless it's an
 * `arguments` object, array, string, or jQuery-like collection with a length
 * greater than `0` or an object with own enumerable properties.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {Array|Object|string} value The value to inspect.
 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
 * @example
 *
 * _.isEmpty(null);
 * // => true
 *
 * _.isEmpty(true);
 * // => true
 *
 * _.isEmpty(1);
 * // => true
 *
 * _.isEmpty([1, 2, 3]);
 * // => false
 *
 * _.isEmpty({ 'a': 1 });
 * // => false
 */
function isEmpty(value) {
  if (value == null) {
    return true;
  }
  if (isArrayLike(value) && (isArray(value) || isString(value) || isArguments(value) ||
      (isObjectLike(value) && isFunction(value.splice)))) {
    return !value.length;
  }
  return !keys(value).length;
}

module.exports = isEmpty;

},{"../internal/isArrayLike":181,"../internal/isObjectLike":186,"../object/keys":201,"./isArguments":191,"./isArray":192,"./isFunction":194,"./isString":197}],194:[function(require,module,exports){
var isObject = require('./isObject');

/** `Object#toString` result references. */
var funcTag = '[object Function]';

/** Used for native method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objToString = objectProto.toString;

/**
 * Checks if `value` is classified as a `Function` object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isFunction(_);
 * // => true
 *
 * _.isFunction(/abc/);
 * // => false
 */
function isFunction(value) {
  // The use of `Object#toString` avoids issues with the `typeof` operator
  // in older versions of Chrome and Safari which return 'function' for regexes
  // and Safari 8 which returns 'object' for typed array constructors.
  return isObject(value) && objToString.call(value) == funcTag;
}

module.exports = isFunction;

},{"./isObject":196}],195:[function(require,module,exports){
var isFunction = require('./isFunction'),
    isObjectLike = require('../internal/isObjectLike');

/** Used to detect host constructors (Safari > 5). */
var reIsHostCtor = /^\[object .+?Constructor\]$/;

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to resolve the decompiled source of functions. */
var fnToString = Function.prototype.toString;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/** Used to detect if a method is native. */
var reIsNative = RegExp('^' +
  fnToString.call(hasOwnProperty).replace(/[\\^$.*+?()[\]{}|]/g, '\\$&')
  .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
);

/**
 * Checks if `value` is a native function.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is a native function, else `false`.
 * @example
 *
 * _.isNative(Array.prototype.push);
 * // => true
 *
 * _.isNative(_);
 * // => false
 */
function isNative(value) {
  if (value == null) {
    return false;
  }
  if (isFunction(value)) {
    return reIsNative.test(fnToString.call(value));
  }
  return isObjectLike(value) && reIsHostCtor.test(value);
}

module.exports = isNative;

},{"../internal/isObjectLike":186,"./isFunction":194}],196:[function(require,module,exports){
/**
 * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.
 * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
 * @example
 *
 * _.isObject({});
 * // => true
 *
 * _.isObject([1, 2, 3]);
 * // => true
 *
 * _.isObject(1);
 * // => false
 */
function isObject(value) {
  // Avoid a V8 JIT bug in Chrome 19-20.
  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.
  var type = typeof value;
  return !!value && (type == 'object' || type == 'function');
}

module.exports = isObject;

},{}],197:[function(require,module,exports){
var isObjectLike = require('../internal/isObjectLike');

/** `Object#toString` result references. */
var stringTag = '[object String]';

/** Used for native method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objToString = objectProto.toString;

/**
 * Checks if `value` is classified as a `String` primitive or object.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isString('abc');
 * // => true
 *
 * _.isString(1);
 * // => false
 */
function isString(value) {
  return typeof value == 'string' || (isObjectLike(value) && objToString.call(value) == stringTag);
}

module.exports = isString;

},{"../internal/isObjectLike":186}],198:[function(require,module,exports){
var isLength = require('../internal/isLength'),
    isObjectLike = require('../internal/isObjectLike');

/** `Object#toString` result references. */
var argsTag = '[object Arguments]',
    arrayTag = '[object Array]',
    boolTag = '[object Boolean]',
    dateTag = '[object Date]',
    errorTag = '[object Error]',
    funcTag = '[object Function]',
    mapTag = '[object Map]',
    numberTag = '[object Number]',
    objectTag = '[object Object]',
    regexpTag = '[object RegExp]',
    setTag = '[object Set]',
    stringTag = '[object String]',
    weakMapTag = '[object WeakMap]';

var arrayBufferTag = '[object ArrayBuffer]',
    float32Tag = '[object Float32Array]',
    float64Tag = '[object Float64Array]',
    int8Tag = '[object Int8Array]',
    int16Tag = '[object Int16Array]',
    int32Tag = '[object Int32Array]',
    uint8Tag = '[object Uint8Array]',
    uint8ClampedTag = '[object Uint8ClampedArray]',
    uint16Tag = '[object Uint16Array]',
    uint32Tag = '[object Uint32Array]';

/** Used to identify `toStringTag` values of typed arrays. */
var typedArrayTags = {};
typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
typedArrayTags[uint32Tag] = true;
typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
typedArrayTags[dateTag] = typedArrayTags[errorTag] =
typedArrayTags[funcTag] = typedArrayTags[mapTag] =
typedArrayTags[numberTag] = typedArrayTags[objectTag] =
typedArrayTags[regexpTag] = typedArrayTags[setTag] =
typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

/** Used for native method references. */
var objectProto = Object.prototype;

/**
 * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)
 * of values.
 */
var objToString = objectProto.toString;

/**
 * Checks if `value` is classified as a typed array.
 *
 * @static
 * @memberOf _
 * @category Lang
 * @param {*} value The value to check.
 * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.
 * @example
 *
 * _.isTypedArray(new Uint8Array);
 * // => true
 *
 * _.isTypedArray([]);
 * // => false
 */
function isTypedArray(value) {
  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];
}

module.exports = isTypedArray;

},{"../internal/isLength":185,"../internal/isObjectLike":186}],199:[function(require,module,exports){
var assignWith = require('../internal/assignWith'),
    baseAssign = require('../internal/baseAssign'),
    createAssigner = require('../internal/createAssigner');

/**
 * Assigns own enumerable properties of source object(s) to the destination
 * object. Subsequent sources overwrite property assignments of previous sources.
 * If `customizer` is provided it's invoked to produce the assigned values.
 * The `customizer` is bound to `thisArg` and invoked with five arguments:
 * (objectValue, sourceValue, key, object, source).
 *
 * **Note:** This method mutates `object` and is based on
 * [`Object.assign`](http://ecma-international.org/ecma-262/6.0/#sec-object.assign).
 *
 * @static
 * @memberOf _
 * @alias extend
 * @category Object
 * @param {Object} object The destination object.
 * @param {...Object} [sources] The source objects.
 * @param {Function} [customizer] The function to customize assigned values.
 * @param {*} [thisArg] The `this` binding of `customizer`.
 * @returns {Object} Returns `object`.
 * @example
 *
 * _.assign({ 'user': 'barney' }, { 'age': 40 }, { 'user': 'fred' });
 * // => { 'user': 'fred', 'age': 40 }
 *
 * // using a customizer callback
 * var defaults = _.partialRight(_.assign, function(value, other) {
 *   return _.isUndefined(value) ? other : value;
 * });
 *
 * defaults({ 'user': 'barney' }, { 'age': 36 }, { 'user': 'fred' });
 * // => { 'user': 'barney', 'age': 36 }
 */
var assign = createAssigner(function(object, source, customizer) {
  return customizer
    ? assignWith(object, source, customizer)
    : baseAssign(object, source);
});

module.exports = assign;

},{"../internal/assignWith":152,"../internal/baseAssign":153,"../internal/createAssigner":172}],200:[function(require,module,exports){
var baseAssign = require('../internal/baseAssign'),
    baseCreate = require('../internal/baseCreate'),
    isIterateeCall = require('../internal/isIterateeCall');

/**
 * Creates an object that inherits from the given `prototype` object. If a
 * `properties` object is provided its own enumerable properties are assigned
 * to the created object.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} prototype The object to inherit from.
 * @param {Object} [properties] The properties to assign to the object.
 * @param- {Object} [guard] Enables use as a callback for functions like `_.map`.
 * @returns {Object} Returns the new object.
 * @example
 *
 * function Shape() {
 *   this.x = 0;
 *   this.y = 0;
 * }
 *
 * function Circle() {
 *   Shape.call(this);
 * }
 *
 * Circle.prototype = _.create(Shape.prototype, {
 *   'constructor': Circle
 * });
 *
 * var circle = new Circle;
 * circle instanceof Circle;
 * // => true
 *
 * circle instanceof Shape;
 * // => true
 */
function create(prototype, properties, guard) {
  var result = baseCreate(prototype);
  if (guard && isIterateeCall(prototype, properties, guard)) {
    properties = undefined;
  }
  return properties ? baseAssign(result, properties) : result;
}

module.exports = create;

},{"../internal/baseAssign":153,"../internal/baseCreate":156,"../internal/isIterateeCall":183}],201:[function(require,module,exports){
var getNative = require('../internal/getNative'),
    isArrayLike = require('../internal/isArrayLike'),
    isObject = require('../lang/isObject'),
    shimKeys = require('../internal/shimKeys');

/* Native method references for those with the same name as other `lodash` methods. */
var nativeKeys = getNative(Object, 'keys');

/**
 * Creates an array of the own enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects. See the
 * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)
 * for more details.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keys(new Foo);
 * // => ['a', 'b'] (iteration order is not guaranteed)
 *
 * _.keys('hi');
 * // => ['0', '1']
 */
var keys = !nativeKeys ? shimKeys : function(object) {
  var Ctor = object == null ? undefined : object.constructor;
  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||
      (typeof object != 'function' && isArrayLike(object))) {
    return shimKeys(object);
  }
  return isObject(object) ? nativeKeys(object) : [];
};

module.exports = keys;

},{"../internal/getNative":180,"../internal/isArrayLike":181,"../internal/shimKeys":188,"../lang/isObject":196}],202:[function(require,module,exports){
var isArguments = require('../lang/isArguments'),
    isArray = require('../lang/isArray'),
    isIndex = require('../internal/isIndex'),
    isLength = require('../internal/isLength'),
    isObject = require('../lang/isObject');

/** Used for native method references. */
var objectProto = Object.prototype;

/** Used to check objects for own properties. */
var hasOwnProperty = objectProto.hasOwnProperty;

/**
 * Creates an array of the own and inherited enumerable property names of `object`.
 *
 * **Note:** Non-object values are coerced to objects.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the array of property names.
 * @example
 *
 * function Foo() {
 *   this.a = 1;
 *   this.b = 2;
 * }
 *
 * Foo.prototype.c = 3;
 *
 * _.keysIn(new Foo);
 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
 */
function keysIn(object) {
  if (object == null) {
    return [];
  }
  if (!isObject(object)) {
    object = Object(object);
  }
  var length = object.length;
  length = (length && isLength(length) &&
    (isArray(object) || isArguments(object)) && length) || 0;

  var Ctor = object.constructor,
      index = -1,
      isProto = typeof Ctor == 'function' && Ctor.prototype === object,
      result = Array(length),
      skipIndexes = length > 0;

  while (++index < length) {
    result[index] = (index + '');
  }
  for (var key in object) {
    if (!(skipIndexes && isIndex(key, length)) &&
        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
      result.push(key);
    }
  }
  return result;
}

module.exports = keysIn;

},{"../internal/isIndex":182,"../internal/isLength":185,"../lang/isArguments":191,"../lang/isArray":192,"../lang/isObject":196}],203:[function(require,module,exports){
var keys = require('./keys'),
    toObject = require('../internal/toObject');

/**
 * Creates a two dimensional array of the key-value pairs for `object`,
 * e.g. `[[key1, value1], [key2, value2]]`.
 *
 * @static
 * @memberOf _
 * @category Object
 * @param {Object} object The object to query.
 * @returns {Array} Returns the new array of key-value pairs.
 * @example
 *
 * _.pairs({ 'barney': 36, 'fred': 40 });
 * // => [['barney', 36], ['fred', 40]] (iteration order is not guaranteed)
 */
function pairs(object) {
  object = toObject(object);

  var index = -1,
      props = keys(object),
      length = props.length,
      result = Array(length);

  while (++index < length) {
    var key = props[index];
    result[index] = [key, object[key]];
  }
  return result;
}

module.exports = pairs;

},{"../internal/toObject":189,"./keys":201}],204:[function(require,module,exports){
/**
 * This method returns the first argument provided to it.
 *
 * @static
 * @memberOf _
 * @category Utility
 * @param {*} value Any value.
 * @returns {*} Returns `value`.
 * @example
 *
 * var object = { 'user': 'fred' };
 *
 * _.identity(object) === object;
 * // => true
 */
function identity(value) {
  return value;
}

module.exports = identity;

},{}],205:[function(require,module,exports){
var baseProperty = require('../internal/baseProperty'),
    basePropertyDeep = require('../internal/basePropertyDeep'),
    isKey = require('../internal/isKey');

/**
 * Creates a function that returns the property value at `path` on a
 * given object.
 *
 * @static
 * @memberOf _
 * @category Utility
 * @param {Array|string} path The path of the property to get.
 * @returns {Function} Returns the new function.
 * @example
 *
 * var objects = [
 *   { 'a': { 'b': { 'c': 2 } } },
 *   { 'a': { 'b': { 'c': 1 } } }
 * ];
 *
 * _.map(objects, _.property('a.b.c'));
 * // => [2, 1]
 *
 * _.pluck(_.sortBy(objects, _.property(['a', 'b', 'c'])), 'a.b.c');
 * // => [1, 2]
 */
function property(path) {
  return isKey(path) ? baseProperty(path) : basePropertyDeep(path);
}

module.exports = property;

},{"../internal/baseProperty":167,"../internal/basePropertyDeep":168,"../internal/isKey":184}],206:[function(require,module,exports){
module.exports = extend

var hasOwnProperty = Object.prototype.hasOwnProperty;

function extend() {
    var target = {}

    for (var i = 0; i < arguments.length; i++) {
        var source = arguments[i]

        for (var key in source) {
            if (hasOwnProperty.call(source, key)) {
                target[key] = source[key]
            }
        }
    }

    return target
}

},{}]},{},[32]);
